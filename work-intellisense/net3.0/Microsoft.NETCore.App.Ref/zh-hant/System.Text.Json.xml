<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Text.Json</name>
  </assembly>
  <members>
    <member name="T:System.Text.Json.JsonCommentHandling">
      <summary vsli:raw="Defines how the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct handles comments.">定義 <see cref="T:System.Text.Json.Utf8JsonReader" /> 結構如何處理註解。</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Allow">
      <summary vsli:raw="Allows comments within the JSON input and treats them as valid tokens. While reading, the caller can access the comment values.">允許在 JSON 輸入內使用註解，並將其視為有效的權杖。 讀取時，呼叫端可以存取註解值。</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Disallow">
      <summary vsli:raw="Doesn't allow comments within the JSON input. Comments are treated as invalid JSON if found, and a &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; is thrown. This is the default value.">不允許在 JSON 輸入內使用註解。 找到的註解會視為無效 JSON，並擲回 <see cref="T:System.Text.Json.JsonException" />。 這是預設值。</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Skip">
      <summary vsli:raw="Allows comments within the JSON input and ignores them. The &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; behaves as if no comments are present.">允許在 JSON 輸入內使用註解，並予以忽略。 <see cref="T:System.Text.Json.Utf8JsonReader" /> 的行為就如同未呈現任何註解。</summary>
    </member>
    <member name="T:System.Text.Json.JsonDocument">
      <summary vsli:raw="Provides a mechanism for examining the structural content of a JSON value without automatically instantiating data values.">提供機制用於檢查 JSON 值的結構化內容，而不需自動具現化資料值。</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonDocument&quot;&gt;&lt;/xref&gt; instance.">釋放這個 <see cref="T:System.Text.Json.JsonDocument" /> 執行個體所使用的資源。</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses a sequence as UTF-8-encoded text representing a single JSON value into a JsonDocument.">將序列剖析為 UTF-8 編碼的文字，將單一 JSON 位元組值表示為 JsonDocument。</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">要剖析的 JSON 文字。</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">在剖析期間控制讀取器行為的選項。</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">JSON 值的 JsonDocument 表示法。</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> 不代表有效的單一 JSON 值。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> 包含不支援的選項。</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; as UTF-8-encoded data representing a single JSON value into a JsonDocument. The stream is read to completion.">將 <see cref="T:System.IO.Stream" /> 剖析為 UTF-8 編碼的資料，將單一 JSON 值表示為 JsonDocument。 資料流讀取完成。</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">要剖析的 JSON 資料。</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">在剖析期間控制讀取器行為的選項。</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">JSON 值的 JsonDocument 表示法。</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> 不代表有效的單一 JSON 值。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> 包含不支援的選項。</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses memory as UTF-8-encoded text representing a single JSON value into a JsonDocument.">將記憶體剖析為 UTF-8 編碼的文字，將單一 JSON 位元組值表示為 JsonDocument。</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">要剖析的 JSON 文字。</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">在剖析期間控制讀取器行為的選項。</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">JSON 值的 JsonDocument 表示法。</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> 不代表有效的單一 JSON 值。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> 包含不支援的選項。</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses text representing a single JSON value into a JsonDocument.">將表示單一 JSON 字元值的文字剖析為 JsonDocument。</summary>
      <param name="json" vsli:raw="The JSON text to parse.">要剖析的 JSON 文字。</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">在剖析期間控制讀取器行為的選項。</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">JSON 值的 JsonDocument 表示法。</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="json" /> 不代表有效的單一 JSON 值。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> 包含不支援的選項。</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses text representing a single JSON string value into a JsonDocument.">將表示單一 JSON 字串值的文字剖析為 JsonDocument。</summary>
      <param name="json" vsli:raw="The JSON text to parse.">要剖析的 JSON 文字。</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">在剖析期間控制讀取器行為的選項。</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">JSON 值的 JsonDocument 表示法。</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="json" /> 不代表有效的單一 JSON 值。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> 包含不支援的選項。</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseAsync(System.IO.Stream,System.Text.Json.JsonDocumentOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; as UTF-8-encoded data representing a single JSON value into a JsonDocument. The stream is read to completion.">將 <see cref="T:System.IO.Stream" /> 剖析為 UTF-8 編碼的資料，將單一 JSON 值表示為 JsonDocument。 資料流讀取完成。</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">要剖析的 JSON 資料。</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">在剖析期間控制讀取器行為的選項。</param>
      <param name="cancellationToken" vsli:raw="The token to monitor for cancellation requests.">用來監視是否有取消要求的語彙基元。</param>
      <returns vsli:raw="A task to produce a JsonDocument representation of the JSON value.">產生 JSON 值之 JsonDocument 表示法的工作。</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> 不代表有效的單一 JSON 值。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> 包含不支援的選項。</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseValue(System.Text.Json.Utf8JsonReader@)">
      <summary vsli:raw="Parses one JSON value (including objects or arrays) from the provided reader.">從提供的讀取器剖析一個 JSON 值 (包括物件或陣列)。</summary>
      <param name="reader" vsli:raw="The reader to read.">要讀取的讀取器。</param>
      <returns vsli:raw="A JsonDocument representing the value (and nested values) read from the reader.">JsonDocument，表示從讀取器讀取的值 (和巢狀值)。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; contains unsupported options.&#xA;&#xA;-or-&#xA;&#xA;The current &lt;paramref name=&quot;reader&quot; /&gt; token does not start or represent a value.">
        <paramref name="reader" /> 包含不支援的選項。</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="A value could not be read from the reader.">無法從讀取器讀取某個值。</exception>
    </member>
    <member name="P:System.Text.Json.JsonDocument.RootElement">
      <summary vsli:raw="Gets the root element of this JSON document.">取得此 JSON 文件的根項目。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the document.">, <see cref="T:System.Text.Json.JsonElement" />表示檔的值。</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.TryParseValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonDocument@)">
      <summary vsli:raw="Attempts to parse one JSON value (including objects or arrays) from the provided reader.">會嘗試從提供的讀取器剖析一個 JSON 值 (包括物件或陣列)。</summary>
      <param name="reader" vsli:raw="The reader to read.">要讀取的讀取器。</param>
      <param name="document" vsli:raw="When the method returns, contains the parsed document.">當這個方法傳回時，會包含剖析的文件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a value was read and parsed into a JsonDocument; &lt;see langword=&quot;false&quot; /&gt; if the reader ran out of data while parsing. All other situations result in an exception being thrown.">如果已讀取值並已將其剖析為 JsonDocument，則為 <see langword="true" />；如果讀取器在剖析時用盡資料，則為 <see langword="false" />。 所有其他情況都會導致擲回例外狀況。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; contains unsupported options.&#xA;&#xA;-or-&#xA;&#xA;The current &lt;paramref name=&quot;reader&quot; /&gt; token does not start or represent a value.">
        <paramref name="reader" /> 包含不支援的選項。</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="A value could not be read from the reader.">無法從讀取器讀取某個值。</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the document to the provided writer as a JSON value.">將元素以 JSON 值形式寫入提供的寫入器。</summary>
      <param name="writer" vsli:raw="The writer to which to write the document.">要將文件寫入其中的寫入器。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;writer&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this &lt;see cref=&quot;P:System.Text.Json.JsonDocument.RootElement&quot; /&gt; would result in invalid JSON.">此 <see cref="P:System.Text.Json.JsonDocument.RootElement" /> 的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 會導致 JSON 無效。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="T:System.Text.Json.JsonDocumentOptions">
      <summary vsli:raw="Provides the ability for the user to define custom behavior when parsing JSON to create a &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">提供使用者在剖析 JSON 以建立 <see cref="T:System.Text.Json.JsonDocument" /> 時，定義自訂行為的功能。</summary>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.AllowTrailingCommas">
      <summary vsli:raw="Gets or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read.">取得或設定值，指出在所要讀取的 JSON 承載內，是否允許 (並忽略) 物件或陣列中的 JSON 值清單結尾有額外逗號。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma at the end of a list of JSON values in an object or array is allowed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. Default is &lt;see langword=&quot;false&quot; /&gt;">
        <see langword="true" />如果允許在物件或陣列中的 JSON 值清單結尾出現額外的逗號, 則為,否則為<see langword="false" />。 預設值為<see langword="false" /></returns>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.CommentHandling">
      <summary vsli:raw="Gets or sets a value that determines how the &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; handles comments when reading through the JSON data.">取得或設定值，判斷 <see cref="T:System.Text.Json.JsonDocument" /> 如何在讀取 JSON 資料時處理註解。</summary>
      <returns vsli:raw="One of the enumeration values that indicates how comments are handled.">其中一個列舉值, 表示批註的處理方式。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The comment handling enum is set to a value that is not supported (or not within the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enum range).">註解處理列舉設定為不支援的值 (或不在 <see cref="T:System.Text.Json.JsonCommentHandling" /> 列舉範圍內)。</exception>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when parsing JSON data, with the default (that is, 0) indicating a maximum depth of 64.">取得或設定剖析 JSON 資料時允許的最大深度，預設值 (亦即 0) 表示最大深度為 64。</summary>
      <returns vsli:raw="The maximum depth allowed when parsing JSON data.">剖析 JSON 資料時允許的最大深度。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The max depth is set to a negative value.">最大深度設定為負值。</exception>
    </member>
    <member name="T:System.Text.Json.JsonElement">
      <summary vsli:raw="Represents a specific JSON value within a &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">表示 <see cref="T:System.Text.Json.JsonDocument" /> 內的特定 JSON 值。</summary>
    </member>
    <member name="T:System.Text.Json.JsonElement.ArrayEnumerator">
      <summary vsli:raw="Represents an enumerator for the contents of a JSON array.">表示 JSON 陣列內容的列舉值。</summary>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">取得集合中位於列舉值目前位置的元素。</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">位於列舉值中目前位置的集合中的元素。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonElement.ArrayEnumerator&quot;&gt;&lt;/xref&gt; instance.">釋放這個 <see cref="T:System.Text.Json.JsonElement.ArrayEnumerator" /> 執行個體所使用的資源。</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">傳回逐一查看集合的列舉值。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the array.">可用來逐一查看陣列的列舉程式。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the collection.">將列舉值往前推至下集合中的下一個項目。</summary>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the enumerator was successfully advanced to the next element; &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt; if the enumerator has passed the end of the collection.">如果列舉值成功前移至下一個項目，則為 <see langword="true" />；如果列舉值超過集合的結尾，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">設定列舉值至它的初始位置，這是在集合中第一個項目之前。</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonElement}#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用來逐一查看集合的 <see cref="T:System.Text.Json.JsonElement" /> 陣列列舉程式。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">傳回逐一查看集合的列舉值。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">可用來逐一查看集合的列舉值。</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">取得集合中位於列舉值目前位置的元素。</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">位於列舉值中目前位置的集合中的元素。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.Clone">
      <summary vsli:raw="Gets a JsonElement that can be safely stored beyond the lifetime of the original &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">取得可安全儲存超過原始 <see cref="T:System.Text.Json.JsonDocument" /> 存留期的 JsonElement。</summary>
      <returns vsli:raw="A JsonElement that can be safely stored beyond the lifetime of the original &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">可安全儲存超過原始 <see cref="T:System.Text.Json.JsonDocument" /> 存留期的 JsonElement。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateArray">
      <summary vsli:raw="Gets an enumerator to enumerate the values in the JSON array represented by this JsonElement.">取得列舉值，列舉此 JsonElement 所表示 JSON 陣列中的值。</summary>
      <returns vsli:raw="An enumerator to enumerate the values in the JSON array represented by this JsonElement.">列舉值，列舉此 JsonElement 所表示 JSON 陣列中的值。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Array" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateObject">
      <summary vsli:raw="Gets an enumerator to enumerate the properties in the JSON object represented by this JsonElement.">取得列舉值，列舉此 JsonElement 所表示 JSON 物件中的屬性。</summary>
      <returns vsli:raw="An enumerator to enumerate the properties in the JSON object represented by this JsonElement.">列舉值，列舉此 JsonElement 所表示 JSON 物件中的屬性。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Object" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetArrayLength">
      <summary vsli:raw="Gets the number of values contained within the current array value.">取得目前陣列值內所包含的值數目。</summary>
      <returns vsli:raw="The number of values contained within the current array value.">目前陣列值內所包含的值數目。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Array" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBoolean">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">取得 <see cref="T:System.Boolean" /> 形式的項目值。</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">
        <see cref="T:System.Boolean" /> 形式的項目值。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is neither &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.True&quot; /&gt; nor &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.False&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 既不是 <see cref="F:System.Text.Json.JsonValueKind.True" /> 也不是 <see cref="F:System.Text.Json.JsonValueKind.False" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetByte">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">取得 <see cref="T:System.Byte" /> 形式的目前 JSON 數字。</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">
        <see cref="T:System.Byte" /> 形式的目前 JSON 數字。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">此值不能以 <see cref="T:System.Byte" /> 表示。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBytesFromBase64">
      <summary vsli:raw="Gets the value of the element as a byte array.">取得元素的值作為位元組陣列。</summary>
      <returns vsli:raw="The value decoded as a byte array.">已解碼為位元組陣列的值。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value is not encoded as Base64 text and hence cannot be decoded to bytes.">該值未編碼為 Base64 文字，因此無法解碼為位元組。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTime">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">取得 <see cref="T:System.DateTime" /> 形式的項目值。</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">
        <see cref="T:System.DateTime" /> 形式的項目值。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be read as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">此值不能以 <see cref="T:System.DateTime" /> 表示。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTimeOffset">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">取得 <see cref="T:System.DateTimeOffset" /> 形式的項目值。</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">
        <see cref="T:System.DateTimeOffset" /> 形式的項目值。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be read as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">此值不能以 <see cref="T:System.DateTimeOffset" /> 表示。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDecimal">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">取得 <see cref="T:System.Decimal" /> 形式的目前 JSON 數字。</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">
        <see cref="T:System.Decimal" /> 形式的目前 JSON 數字。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">此值不能以 <see cref="T:System.Decimal" /> 表示。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDouble">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">取得 <see cref="T:System.Double" /> 形式的目前 JSON 數字。</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">
        <see cref="T:System.Double" /> 形式的目前 JSON 數字。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">此值不能以 <see cref="T:System.Double" /> 表示。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetGuid">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">取得 <see cref="T:System.Guid" /> 形式的項目值。</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">
        <see cref="T:System.Guid" /> 形式的項目值。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">此值不能以 <see cref="T:System.Guid" /> 表示。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt16">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">取得 <see cref="T:System.Int16" /> 形式的目前 JSON 數字。</summary>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">
        <see cref="T:System.Int16" /> 形式的目前 JSON 數字。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">此值不能以 <see cref="T:System.Int16" /> 表示。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt32">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">取得 <see cref="T:System.Int32" /> 形式的目前 JSON 數字。</summary>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <see cref="T:System.Int32" /> 形式的目前 JSON 數字。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">此值不能以 <see cref="T:System.Int32" /> 表示。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt64">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">取得 <see cref="T:System.Int64" /> 形式的目前 JSON 數字。</summary>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">
        <see cref="T:System.Int64" /> 形式的目前 JSON 數字。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">此值不能以 <see cref="T:System.Int64" /> 表示。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;utf8PropertyName&quot; /&gt;.">取得 <see cref="T:System.Text.Json.JsonElement" />，表示 <paramref name="utf8PropertyName" /> 所識別的必要屬性值。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 representation (with no Byte-Order-Mark (BOM)) of the name of the property to return.">要傳回的屬性名稱 UTF-8 表示 (沒有位元組順序標記 (BOM))。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">
        <see cref="T:System.Text.Json.JsonElement" />，表示必要屬性值。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Object" />。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">找不到具有所要求名稱的屬性。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;propertyName&quot; /&gt;.">取得 <see cref="T:System.Text.Json.JsonElement" />，表示 <paramref name="propertyName" /> 所識別的必要屬性值。</summary>
      <param name="propertyName" vsli:raw="The name of the property whose value is to be returned.">要傳回其值的屬性名稱。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">
        <see cref="T:System.Text.Json.JsonElement" />，表示必要屬性值。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Object" />。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">找不到具有所要求名稱的屬性。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.String)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;propertyName&quot; /&gt;.">取得 <see cref="T:System.Text.Json.JsonElement" />，表示 <paramref name="propertyName" /> 所識別的必要屬性值。</summary>
      <param name="propertyName" vsli:raw="The name of the property whose value is to be returned.">要傳回其值的屬性名稱。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">
        <see cref="T:System.Text.Json.JsonElement" />，表示必要屬性值。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Object" />。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">找不到具有所要求名稱的屬性。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetRawText">
      <summary vsli:raw="Gets a string that represents the original input data backing this value.">取得字串，表示支援此值的原始輸入資料。</summary>
      <returns vsli:raw="The original input data backing this value.">支援此值的原始輸入資料。</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSByte">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">取得 <see cref="T:System.SByte" /> 形式的目前 JSON 數字。</summary>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">
        <see cref="T:System.SByte" /> 形式的目前 JSON 數字。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">此值不能以 <see cref="T:System.SByte" /> 表示。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSingle">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">取得 <see cref="T:System.Single" /> 形式的目前 JSON 數字。</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">
        <see cref="T:System.Single" /> 形式的目前 JSON 數字。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">此值不能以 <see cref="T:System.Single" /> 表示。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetString">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">取得 <see cref="T:System.String" /> 形式的項目值。</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.String" /> 形式的項目值。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is neither &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt; nor &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Null&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 既不是 <see cref="F:System.Text.Json.JsonValueKind.String" /> 也不是 <see cref="F:System.Text.Json.JsonValueKind.Null" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt16">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">取得 <see cref="T:System.UInt16" /> 形式的目前 JSON 數字。</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">
        <see cref="T:System.UInt16" /> 形式的目前 JSON 數字。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">此值不能以 <see cref="T:System.UInt16" /> 表示。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt32">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">取得 <see cref="T:System.UInt32" /> 形式的目前 JSON 數字。</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">
        <see cref="T:System.UInt32" /> 形式的目前 JSON 數字。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">此值不能以 <see cref="T:System.UInt32" /> 表示。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt64">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">取得 <see cref="T:System.UInt64" /> 形式的目前 JSON 數字。</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">
        <see cref="T:System.UInt64" /> 形式的目前 JSON 數字。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">此值不能以 <see cref="T:System.UInt64" /> 表示。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="P:System.Text.Json.JsonElement.Item(System.Int32)">
      <summary vsli:raw="Gets the value at the specified index if the current value is an &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">取得目前值為 <see cref="F:System.Text.Json.JsonValueKind.Array" /> 時位於指定索引的值。</summary>
      <param name="index" vsli:raw="The item index.">項目索引。</param>
      <returns vsli:raw="The value at the specified index.">位於指定索引處的值。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Array" />。</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is not in the range [0, &lt;see cref=&quot;M:System.Text.Json.JsonElement.GetArrayLength&quot; /&gt;()).">
        <paramref name="index" /> 不在 [0, <see cref="M:System.Text.Json.JsonElement.GetArrayLength" />()) 範圍內。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="T:System.Text.Json.JsonElement.ObjectEnumerator">
      <summary vsli:raw="Represents an enumerator for the properties of a JSON object.">表示 JSON 物件屬性的列舉值。</summary>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">取得集合中位於列舉值目前位置的元素。</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">位於列舉值中目前位置的集合中的元素。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonElement.ObjectEnumerator&quot;&gt;&lt;/xref&gt; instance.">釋放這個 <see cref="T:System.Text.Json.JsonElement.ObjectEnumerator" /> 執行個體所使用的資源。</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates the properties of an object.">傳回會逐一查看物件屬性的列舉值。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the object.">可用來逐一查看物件的列舉值。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the collection.">將列舉值往前推至下集合中的下一個項目。</summary>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the enumerator was successfully advanced to the next element; &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt; if the enumerator has passed the end of the collection.">如果列舉值成功前移至下一個項目，則為 <see langword="true" />；如果列舉值超過集合的結尾，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">設定列舉值至它的初始位置，這是在集合中第一個項目之前。</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonProperty}#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用來逐一查看集合的 <see cref="T:System.Text.Json.JsonProperty" /> 物件列舉程式。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">傳回逐一查看集合的列舉值。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">可用來逐一查看集合的列舉值。</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">取得集合中位於列舉值目前位置的元素。</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">位於列舉值中目前位置的集合中的元素。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ToString">
      <summary vsli:raw="Gets a string representation for the current value appropriate to the value type.">取得適用於實值型別的目前值字串表示。</summary>
      <returns vsli:raw="A string representation for the current value appropriate to the value type.">適用於實值型別的目前值字串表示。</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetByte(System.Byte@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">嘗試以 <see cref="T:System.Byte" /> 表示目前的 JSON 數字。</summary>
      <param name="value" vsli:raw="When this method returns, contains the byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">當方法傳回時，如果轉換成功，則會包含相當於目前 JSON 數字的位元組。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若數字可以表示為 <see cref="T:System.Byte" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetBytesFromBase64(System.Byte[]@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a byte array, assuming that it is Base64 encoded.">假設 JSON 字串已經過 Base 64 編碼，並嘗試以位元組陣列加以表示。</summary>
      <param name="value" vsli:raw="If the method succeeds, contains the decoded binary representation of the Base64 text.">若方法成功，則包含解碼後的 Base64 文字二進位表示。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire token value is encoded as valid Base64 text and can be successfully decoded to bytes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若整個權杖值是有效的 Base 64 編碼文字，並能成功地解碼成位元組時為 <see langword="true" />。
              否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTime(System.DateTime@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">嘗試以 <see cref="T:System.DateTime" /> 表示目前的 JSON 字串。</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTime.MinValue&quot; /&gt; if the conversion failed.">當這個方法傳回時，會包含與目前 JSON 字串相等的日期和時間值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若字串可以表示為 <see cref="T:System.DateTime" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">嘗試以 <see cref="T:System.DateTimeOffset" /> 表示目前的 JSON 字串。</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTimeOffset.MinValue&quot; /&gt; if the conversion failed.">當這個方法傳回時，會包含與目前 JSON 字串相等的日期和時間。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若字串可以表示為 <see cref="T:System.DateTimeOffset" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDecimal(System.Decimal@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">嘗試以 <see cref="T:System.Decimal" /> 表示目前的 JSON 數字。</summary>
      <param name="value" vsli:raw="When this method returns, contains the decimal equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">當這個方法傳回時，會包含與目前 JSON 數字相等的十進位。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若數字可以表示為 <see cref="T:System.Decimal" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDouble(System.Double@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">嘗試以 <see cref="T:System.Double" /> 表示目前的 JSON 數字。</summary>
      <param name="value" vsli:raw="When this method returns, contains a double-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">當這個方法傳回時，會包含與目前 JSON 數字相等的雙精確度浮點數值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Double&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若數字可以表示為 <see cref="T:System.Double" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetGuid(System.Guid@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">嘗試以 <see cref="T:System.Guid" /> 表示目前的 JSON 字串。</summary>
      <param name="value" vsli:raw="When this method returns, contains the GUID equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.Guid.Empty&quot; /&gt; if the conversion failed.">當這個方法傳回時，會包含與目前 JSON 字串相等的 GUID。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若字串可以表示為 <see cref="T:System.Guid" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt16(System.Int16@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">嘗試以 <see cref="T:System.Int16" /> 表示目前的 JSON 數字。</summary>
      <param name="value" vsli:raw="When this method returns, contains the 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">當方法傳回時，如果轉換成功，則會包含相當於目前 JSON 數字的 16 位元整數。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若數字可以表示為 <see cref="T:System.Int16" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt32(System.Int32@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">嘗試以 <see cref="T:System.Int32" /> 表示目前的 JSON 數字。</summary>
      <param name="value" vsli:raw="When this method returns, contains the 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">當這個方法傳回時，會包含與目前 JSON 數字相等的 32 位元整數值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若數字可以表示為 <see cref="T:System.Int32" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt64(System.Int64@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">嘗試以 <see cref="T:System.Int64" /> 表示目前的 JSON 數字。</summary>
      <param name="value" vsli:raw="When this method returns, contains the 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">當這個方法傳回時，會包含與目前 JSON 數字相等的 64 位元整數值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若數字可以表示為 <see cref="T:System.Int64" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;utf8PropertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, the method assigns its value to the &lt;paramref name=&quot;value&quot; /&gt; argument.">尋找目前物件中名為 <paramref name="utf8PropertyName" /> 的屬性，並傳回指出這類屬性是否存在的值。 當屬性存在時，方法會將其值指派給 <paramref name="value" /> 引數。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 (with no Byte-Order-Mark (BOM)) representation of the name of the property to return.">要傳回的屬性名稱 UTF-8 表示 (沒有位元組順序標記 (BOM))。</param>
      <param name="value" vsli:raw="Receives the value of the located property.">接收所找到的屬性值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若找到屬性，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Object" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Char},System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;propertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, the method assigns its value to the &lt;paramref name=&quot;value&quot; /&gt; argument.">尋找目前物件中名為 <paramref name="propertyName" /> 的屬性，並傳回指出這類屬性是否存在的值。 當屬性存在時，方法會將其值指派給 <paramref name="value" /> 引數。</summary>
      <param name="propertyName" vsli:raw="The name of the property to find.">要尋找的屬性名稱。</param>
      <param name="value" vsli:raw="When this method returns, contains the value of the specified property.">當這個方法傳回時，會包含指定屬性的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若找到屬性，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Object" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.String,System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;propertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, its value is assigned to the &lt;paramref name=&quot;value&quot; /&gt; argument.">尋找目前物件中名為 <paramref name="propertyName" /> 的屬性，並傳回指出這類屬性是否存在的值。 當屬性存在時，會將其值指派給 <paramref name="value" /> 引數。</summary>
      <param name="propertyName" vsli:raw="The name of the property to find.">要尋找的屬性名稱。</param>
      <param name="value" vsli:raw="When this method returns, contains the value of the specified property.">當這個方法傳回時，會包含指定屬性的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若找到屬性，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Object" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSByte(System.SByte@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">嘗試以 <see cref="T:System.SByte" /> 表示目前的 JSON 數字。</summary>
      <param name="value" vsli:raw="When this method returns, contains the signed byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">當方法傳回時，如果轉換成功，則會包含相當於目前 JSON 數字的帶正負號位元組。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若數字可以表示為 <see cref="T:System.SByte" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSingle(System.Single@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">嘗試以 <see cref="T:System.Single" /> 表示目前的 JSON 數字。</summary>
      <param name="value" vsli:raw="When this method returns, contains the single-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">當這個方法傳回時，會包含與目前 JSON 數字相等的單精確度浮點數值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Single&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若數字可以表示為 <see cref="T:System.Single" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt16(System.UInt16@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">嘗試以 <see cref="T:System.UInt16" /> 表示目前的 JSON 數字。</summary>
      <param name="value" vsli:raw="When this method returns, contains the unsigned 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">當方法傳回時，如果轉換成功，則會包含相當於目前 JSON 數字的不帶正負號 16 位元整數。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若數字可以表示為 <see cref="T:System.UInt16" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt32(System.UInt32@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">嘗試以 <see cref="T:System.UInt32" /> 表示目前的 JSON 數字。</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">當這個方法傳回時，會包含與目前 JSON 數字相等的不帶正負號 32 位元整數值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若數字可以表示為 <see cref="T:System.UInt32" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt64(System.UInt64@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">嘗試以 <see cref="T:System.UInt64" /> 表示目前的 JSON 數字。</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">當這個方法傳回時，會包含與目前 JSON 數字相等的不帶正負號 64 位元整數值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若數字可以表示為 <see cref="T:System.UInt64" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.Number" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the text represented by a UTF8-encoded byte span to the string value of this element.">比較 UTF8 編碼位元組範圍所呈現的文字與此元素的字串值。</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">要用來比較的 UTF-8 編碼文字。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element has the same UTF-8 encoding as&#xA;              &lt;paramref name=&quot;utf8Text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若此元素的字串值和 <paramref name="utf8Text" /> 有相同的 UTF-8 編碼，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares a specified read-only character span to the string value of this element.">比較指定的唯讀字元範圍與此元素的字串值。</summary>
      <param name="text" vsli:raw="The text to compare against.">要比較的文字。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若此元素的字串值符合 <paramref name="text" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.String)">
      <summary vsli:raw="Compares a specified string to the string value of this element.">比較指定字串與此元素的字串值。</summary>
      <param name="text" vsli:raw="The text to compare against.">要比較的文字。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若此元素的字串值符合 <paramref name="text" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 不是 <see cref="F:System.Text.Json.JsonValueKind.String" />。</exception>
    </member>
    <member name="P:System.Text.Json.JsonElement.ValueKind">
      <summary vsli:raw="Gets the type of the current JSON value.">取得目前 JSON 值的類型。</summary>
      <returns vsli:raw="The type of the current JSON value.">目前 JSON 值的類型。</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the element to the specified writer as a JSON value.">將項目以 JSON 值格式寫入指定的寫入器。</summary>
      <param name="writer" vsli:raw="The writer to which to write the element.">要接受項目寫入的寫入器。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;writer&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this value is &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Undefined&quot; /&gt;.">此值的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 為 <see cref="F:System.Text.Json.JsonValueKind.Undefined" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="T:System.Text.Json.JsonEncodedText">
      <summary vsli:raw="Provides methods to transform UTF-8 or UTF-16 encoded text into a form that is suitable for JSON.">提供方法，將 UTF-8 或 UTF-16 編碼文字轉換成適用於 JSON 的格式。</summary>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Byte},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes a UTF-8 text value as a JSON string.">將 UTF-8 文字值編碼為 JSON 字串。</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded text to convert to JSON encoded text.">要轉換為 JSON 編碼文字的 UTF-8 編碼文字。</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">要在逸出字元串時使用的編碼器；<see langword="null" /> 表示使用預設的編碼器。</param>
      <returns vsli:raw="The encoded JSON text.">編碼的 JSON 文字。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;utf8Value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;utf8Value&quot; /&gt; contains invalid UTF-8 bytes.">
        <paramref name="utf8Value" /> 太大。
-或-
<paramref name="utf8Value" /> 包含無效的 UTF-8 位元組。</exception>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Char},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes a specified text value as a JSON string.">將指定的文字值編碼為 JSON 字串。</summary>
      <param name="value" vsli:raw="The value to convert to JSON encoded text.">要轉換為 JSON 編碼文字的值。</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">要在逸出字元串時使用的編碼器；<see langword="null" /> 表示使用預設的編碼器。</param>
      <returns vsli:raw="The encoded JSON text.">經過編碼的 JSON 文字。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains invalid UTF-16 characters.">
        <paramref name="value" /> 太大。
-或-
<paramref name="value" /> 包含無效的 UTF-16 字元。</exception>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.String,System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes the string text value as a JSON string.">將字串文字值編碼為 JSON 字串。</summary>
      <param name="value" vsli:raw="The value to convert to JSON encoded text.">要轉換為 JSON 編碼文字的值。</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">要在逸出字元串時使用的編碼器；<see langword="null" /> 表示使用預設的編碼器。</param>
      <returns vsli:raw="The encoded JSON text.">經過編碼的 JSON 文字。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains invalid UTF-16 characters.">
        <paramref name="value" /> 太大。
-或-
<paramref name="value" /> 包含無效的 UTF-16 字元。</exception>
    </member>
    <member name="P:System.Text.Json.JsonEncodedText.EncodedUtf8Bytes">
      <summary vsli:raw="Gets the UTF-8 encoded representation of the pre-encoded JSON text.">取得預先編碼 JSON 文字的 UTF-8 編碼表示。</summary>
      <returns vsli:raw="The UTF-8 encoded representation of the pre-encoded JSON text.">預先編碼 JSON 文字的 UTF-8 編碼標記法。</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance and a specified object, which must also be a &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt; instance, have the same value.">判斷這個執行個體和指定的物件 (同時還必須是 <see cref="T:System.Text.Json.JsonEncodedText" /> 執行個體) 是否具有相同值。</summary>
      <param name="obj" vsli:raw="The object to compare to this instance.">與這個執行個體相比較的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and &lt;paramref name=&quot;obj&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前的執行個體和 <paramref name="obj" /> 相等則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Determines whether this instance and another specified &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt; instance have the same value.">判斷這個執行個體和另一個指定的 <see cref="T:System.Text.Json.JsonEncodedText" /> 執行個體是否具有相同值。</summary>
      <param name="other" vsli:raw="The object to compare to this instance.">與這個執行個體相比較的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance and &lt;paramref name=&quot;other&quot; /&gt; have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若這個執行個體與 <paramref name="other" /> 具有相同值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt;.">傳回這個 <see cref="T:System.Text.Json.JsonEncodedText" /> 的雜湊程式碼。</summary>
      <returns vsli:raw="The hash code for this instance.">這個執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.ToString">
      <summary vsli:raw="Converts the value of this instance to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">將這個執行個體的值轉換為 <see cref="T:System.String" />。</summary>
      <returns vsli:raw="The underlying UTF-16 encoded string.">基礎 UTF-16 編碼字串。</returns>
    </member>
    <member name="T:System.Text.Json.JsonException">
      <summary vsli:raw="Defines a custom exception object that is thrown when invalid JSON text is encountered, the defined maximum depth is passed, or the JSON text is not compatible with the type of a property on an object.">定義當發現無效的 JSON 文字、超過定義的最大深度，或 JSON 文字與物件上的屬性類型不相容時，所擲回的自訂例外狀況物件。</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class.">初始化 <see cref="T:System.Text.Json.JsonException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Creates a new exception object with serialized data.">使用序列化資料建立新的例外狀況物件。</summary>
      <param name="info" vsli:raw="The serialized object data about the exception being thrown.">擲回例外狀況相關的序列化物件資料。</param>
      <param name="context" vsli:raw="An object that contains contextual information about the source or destination.">物件，包含關於來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class with a specified error message.">使用指定的錯誤訊息，初始化 <see cref="T:System.Text.Json.JsonException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The context-specific error message.">特定內容的錯誤訊息。</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class, with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的錯誤訊息和造成這個例外狀況原因的內部例外狀況參考，初始化 <see cref="T:System.Text.Json.JsonException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The context-specific error message.">特定內容的錯誤訊息。</param>
      <param name="innerException" vsli:raw="The exception that caused the current exception.">造成目前例外狀況的例外狀況。</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
      <summary vsli:raw="Creates a new exception object to relay error information to the user.">建立新的例外狀況物件，將錯誤資訊轉送給使用者。</summary>
      <param name="message" vsli:raw="The context-specific error message.">特定內容的錯誤訊息。</param>
      <param name="path" vsli:raw="The path where the invalid JSON was encountered.">發現無效 JSON 所在的路徑。</param>
      <param name="lineNumber" vsli:raw="The line number (starting at 0) at which the invalid JSON was encountered when deserializing.">還原序列化時發現無效 JSON 處的行號 (從 0 開始)。</param>
      <param name="bytePositionInLine" vsli:raw="The byte count within the current line (starting at 0) where the invalid JSON was encountered.">發現無效 JSON 所在的目前這一行內位元組計數 (從 0 開始)。</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Exception)">
      <summary vsli:raw="Creates a new exception object to relay error information to the user that includes a specified inner exception.">建立新的例外狀況物件，將錯誤資訊轉送給使用者，包括指定的內部例外狀況。</summary>
      <param name="message" vsli:raw="The context-specific error message.">特定內容的錯誤訊息。</param>
      <param name="path" vsli:raw="The path where the invalid JSON was encountered.">發現無效 JSON 所在的路徑。</param>
      <param name="lineNumber" vsli:raw="The line number (starting at 0) at which the invalid JSON was encountered when deserializing.">還原序列化時發現無效 JSON 所在的行號 (從 0 開始)。</param>
      <param name="bytePositionInLine" vsli:raw="The byte count (starting at 0) within the current line where the invalid JSON was encountered.">發現無效 JSON 所在的目前這一行內位元組計數 (從 0 開始)。</param>
      <param name="innerException" vsli:raw="The exception that caused the current exception.">造成目前例外狀況的例外狀況。</param>
    </member>
    <member name="P:System.Text.Json.JsonException.BytePositionInLine">
      <summary vsli:raw="Gets the zero-based number of bytes read within the current line before the exception.">取得例外狀況之前，在目前這一行內讀取的以零起始位元組數。</summary>
      <returns vsli:raw="The zero-based number of bytes read within the current line before the exception.">以零為起始的位元組數目, 會在例外狀況之前的目前一行內讀取。</returns>
    </member>
    <member name="M:System.Text.Json.JsonException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with information about the exception.">使用例外狀況的相關資訊來設定 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info" vsli:raw="The serialized object data about the exception being thrown.">擲回例外狀況相關的序列化物件資料。</param>
      <param name="context" vsli:raw="An object that contains contextual information about the source or destination.">物件，包含關於來源或目的端的內容資訊。</param>
    </member>
    <member name="P:System.Text.Json.JsonException.LineNumber">
      <summary vsli:raw="Gets the zero-based number of lines read before the exception.">取得例外狀況之前讀取的以零起始行數。</summary>
      <returns vsli:raw="The zero-based number of lines read before the exception.">在例外狀況之前讀取之以零為基底的行數。</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Message">
      <summary vsli:raw="Gets a message that describes the current exception.">取得描述目前例外狀況的訊息。</summary>
      <returns vsli:raw="The error message that describes the current exception.">描述目前例外狀況的錯誤訊息。</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Path">
      <summary vsli:raw="Gets The path within the JSON where the exception was encountered.">取得 JSON 內遇到例外狀況的路徑。</summary>
      <returns vsli:raw="The path within the JSON where the exception was encountered.">JSON 中遇到例外狀況的路徑。</returns>
    </member>
    <member name="T:System.Text.Json.JsonNamingPolicy">
      <summary vsli:raw="Determines the naming policy used to convert a string-based name to another format, such as a camel-casing format.">判斷用來將字串型名稱轉換為另一種格式的命名原則，例如 Camel 命名法大小寫格式。</summary>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.JsonNamingPolicy&quot; /&gt;.">初始化 <see cref="T:System.Text.Json.JsonNamingPolicy" /> 的新執行個體。</summary>
    </member>
    <member name="P:System.Text.Json.JsonNamingPolicy.CamelCase">
      <summary vsli:raw="Gets the naming policy for camel-casing.">取得 Camel 命名法大小寫的命名原則。</summary>
      <returns vsli:raw="The naming policy for camel-casing.">Camel 大小寫的命名原則。</returns>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.ConvertName(System.String)">
      <summary vsli:raw="When overridden in a derived class, converts the specified name according to the policy.">在衍生類別中覆寫時，根據原則轉換指定的名稱。</summary>
      <param name="name" vsli:raw="The name to convert.">要轉換的名稱。</param>
      <returns vsli:raw="The converted name.">轉換的名稱。</returns>
    </member>
    <member name="T:System.Text.Json.JsonProperty">
      <summary vsli:raw="Represents a single property for a JSON object.">表示 JSON 物件的單一屬性。</summary>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Name">
      <summary vsli:raw="Gets the name of this property.">取得這個屬性的名稱。</summary>
      <returns vsli:raw="The name of this property.">這個屬性的名稱。</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the specified UTF-8 encoded text to the name of this property.">將指定的 UTF-8 編碼文字與此屬性名稱進行比較。</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">要用來比較的 UTF-8 編碼文字。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property has the same UTF-8 encoding as &lt;paramref name=&quot;utf8Text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此屬性名稱具有與 <paramref name="utf8Text" /> 相同的 UTF-8 編碼，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">此值的 <see cref="T:System.Type" /> 不是 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />。</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares the specified text as a character span to the name of this property.">將指定的文字作為字元範圍，與此屬性的名稱進行比較。</summary>
      <param name="text" vsli:raw="The text to compare against.">要比較的文字。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此屬性的名稱符合 <paramref name="text" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">此值的 <see cref="T:System.Type" /> 不是 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />。</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.String)">
      <summary vsli:raw="Compares the specified string to the name of this property.">將指定的字串與此屬性名稱進行比較。</summary>
      <param name="text" vsli:raw="The text to compare against.">要比較的文字。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果此屬性的名稱符合 <paramref name="text" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">此值的 <see cref="T:System.Type" /> 不是 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />。</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.ToString">
      <summary vsli:raw="Provides a string representation of the property for debugging purposes.">提供屬性的字串表示，以進行偵錯。</summary>
      <returns vsli:raw="A string containing the uninterpreted value of the property, beginning at the declaring open-quote and ending at the last character that is part of the value.">字串，其中包含未解譯的屬性值，從宣告 open-quote 開始，在值的最後一個字元結束。</returns>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Value">
      <summary vsli:raw="Gets the value of this property.">取得此屬性的值。</summary>
      <returns vsli:raw="The value of this property.">這個屬性的值。</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the property to the provided writer as a named JSON object property.">將屬性以具名 JSON 物件屬性的形式，寫入所提供的寫入器。</summary>
      <param name="writer" vsli:raw="The writer to which to write the property.">要將屬性寫入其中的寫入器。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;see cref=&quot;P:System.Text.Json.JsonProperty.Name&quot; /&gt; is too large to be a JSON object property.">
        <see cref="P:System.Text.Json.JsonProperty.Name" /> 大小太大，無法成為 JSON 物件屬性。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this JSON property's &lt;see cref=&quot;P:System.Text.Json.JsonProperty.Value&quot; /&gt; would result in invalid JSON.">這個 JSON 屬性 <see cref="P:System.Text.Json.JsonProperty.Value" /> 的 <see cref="P:System.Text.Json.JsonElement.ValueKind" /> 會導致 JSON 無效。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">父 <see cref="T:System.Text.Json.JsonDocument" /> 已經過處置。</exception>
    </member>
    <member name="T:System.Text.Json.JsonReaderOptions">
      <summary vsli:raw="Provides the ability for the user to define custom behavior when reading JSON.">可讓使用者定義讀取 JSON 時的自訂行為。</summary>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas">
      <summary vsli:raw="Gets or sets a value that defines whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read.">取得或設定值，定義在所要讀取的 JSON 承載內，是否允許 (並忽略) 物件或陣列中的 JSON 值清單結尾有額外逗號。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma is allowed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />如果允許 exra 逗號, 則為,否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.CommentHandling">
      <summary vsli:raw="Gets or sets a value that determines how the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; handles comments when reading through the JSON data.">取得或設定值，判斷 <see cref="T:System.Text.Json.Utf8JsonReader" /> 如何在讀取 JSON 資料時處理註解。</summary>
      <returns vsli:raw="One of the enumeration values that indicates how comments are handled.">其中一個列舉值, 表示批註的處理方式。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The property is being set to a value that is not a member of the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enumeration.">此屬性將設定為非 <see cref="T:System.Text.Json.JsonCommentHandling" /> 列舉成員的值。</exception>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when reading JSON, with the default (that is, 0) indicating a maximum depth of 64.">取得或設定讀取 JSON 時允許的最大深度，預設值 (亦即 0) 表示最大深度為 64。</summary>
      <returns vsli:raw="The maximum depth allowed when reading JSON.">讀取 JSON 時允許的最大深度。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The maximum depth is being set to a negative value.">最大深度將設定為負值。</exception>
    </member>
    <member name="T:System.Text.Json.JsonReaderState">
      <summary vsli:raw="Defines an opaque type that holds and saves all the relevant state information, which must be provided to the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; to continue reading after processing incomplete data.">定義不透明的類型，以保留和儲存必須提供給 <see cref="T:System.Text.Json.Utf8JsonReader" /> 的所有相關狀態資訊，以便在處理未完成資料之後繼續讀取。</summary>
    </member>
    <member name="M:System.Text.Json.JsonReaderState.#ctor(System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Constructs a new &lt;see cref=&quot;T:System.Text.Json.JsonReaderState&quot; /&gt; instance.">建構新的 <see cref="T:System.Text.Json.JsonReaderState" /> 執行個體。</summary>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that is different from the JSON RFC (for example how to handle comments, or the maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly (comments within the JSON are invalid) and reads up to a maximum depth of 64.">定義不同於 JSON RFC 的自訂 <see cref="T:System.Text.Json.Utf8JsonReader" /> 行為 (例如處理註解的方式，或讀取時允許的最大深度)。 根據預設，<see cref="T:System.Text.Json.Utf8JsonReader" /> 會嚴格遵循 JSON RFC (JSON 內的註解無效)，且最多可讀取最大深度 64。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The maximum depth is set to a non-positive value (&amp;lt; 0).">最大深度設定為非正數值 (&lt; 0)。</exception>
    </member>
    <member name="P:System.Text.Json.JsonReaderState.Options">
      <summary vsli:raw="Gets the custom behavior to use when reading JSON data using the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct that may deviate from strict adherence to the JSON specification, which is the default behavior.">取得使用 <see cref="T:System.Text.Json.Utf8JsonReader" /> 結構讀取 JSON 資料時要使用的自訂行為，該結構可能會偏離嚴格遵守的 JSON 規格，這是預設行為。</summary>
      <returns vsli:raw="The custom behavior to use when reading JSON data.">讀取 JSON 資料時要使用的自訂行為。</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializer">
      <summary vsli:raw="Provides functionality to serialize objects or value types to JSON and to deserialize JSON into objects or value types.">提供功能將物件或實值型別序列化為 JSON，並將 JSON 還原序列化為物件或實值型別。</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the UTF-8 encoded text representing a single JSON value into an instance of a specified type.">將表示單一 JSON 值的 UTF-8 編碼文字，剖析為指定類型的執行個體。</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">要剖析的 JSON 文字。</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">要轉換並傳回的物件類型。</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">在剖析期間控制行為的選項。</param>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">JSON 值的 <paramref name="returnType" /> 表示法。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="returnType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;returnType&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the span beyond a single JSON value.">JSON 無效、<paramref name="returnType" /> 與 JSON 不相容，或是在資料流中有剩餘的資料時。</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the text representing a single JSON value into an instance of a specified type.">將表示單一 JSON 值的文字，剖析為指定類型的執行個體。</summary>
      <param name="json" vsli:raw="The JSON text to parse.">要剖析的 JSON 文字。</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">要轉換並傳回的物件類型。</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">在剖析期間控制行為的選項。</param>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">JSON 值的 <paramref name="returnType" /> 表示法。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; or &lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="json" /> 或 <paramref name="returnType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the string beyond a single JSON value.">JSON 無效、<paramref name="returnType" /> 與 JSON 不相容，或是在資料流中有剩餘的資料時。</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads one JSON value (including objects or arrays) from the provided reader and converts it into an instance of  a specified type.">從提供的讀取器讀取一個 JSON 值 (包括物件或陣列)，並將其轉換為指定類型的執行個體。</summary>
      <param name="reader" vsli:raw="The reader to read the JSON from.">要讀取的讀取器。</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">要轉換並傳回的物件類型。</param>
      <param name="options" vsli:raw="Options to control the serializer behavior during reading.">在讀取期間控制序列化程式行為的選項。</param>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">JSON 值的 <paramref name="returnType" /> 表示法。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="returnType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;returnType&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;A value could not be read from the reader.">JSON 無效、<paramref name="returnType" /> 與 JSON 不相容，或無法從讀取器讀取值。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; is using unsupported options.">
        <paramref name="reader" /> 正在使用不支援的選項。</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the UTF-8 encoded text representing a single JSON value into an instance of the type specified by a generic type parameter.">將表示單一 JSON 值的 UTF-8 編碼文字，剖析成泛型型別參數所指定類型的執行個體。</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">要剖析的 JSON 文字。</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">在剖析期間控制行為的選項。</param>
      <typeparam name="TValue" vsli:raw="The target type of the UTF-8 encoded text.">UTF-8 編碼文字的目標型別。</typeparam>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">JSON 值的 <typeparamref name="TValue" /> 表示法。</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the span beyond a single JSON value.">JSON 無效。
-或-
<typeparamref name="TValue" /> 與 JSON 不相容。
-或-
資料流中有剩餘的資料。</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the text representing a single JSON value into an instance of the type specified by a generic type parameter.">將表示單一 JSON 值的文字，剖析成泛型型別參數所指定類型的執行個體。</summary>
      <param name="json" vsli:raw="The JSON text to parse.">要剖析的 JSON 文字。</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">在剖析期間控制行為的選項。</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">JSON 值的目標型別。</typeparam>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">JSON 值的 <typeparamref name="TValue" /> 表示法。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="json" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the string beyond a single JSON value.">JSON 無效。
-或-
<typeparamref name="TValue" /> 與 JSON 不相容。
-或-
資料流中有剩餘的資料。</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads one JSON value (including objects or arrays) from the provided reader into an instance of the type specified by a generic type parameter.">從提供的讀取器，將一個 JSON 值 (包括物件或陣列) 讀取至泛型型別參數所指定類型的執行個體。</summary>
      <param name="reader" vsli:raw="The reader to read the JSON from.">要讀取的讀取器。</param>
      <param name="options" vsli:raw="Options to control serializer behavior during reading.">在讀取期間控制序列化程式行為的選項。</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">JSON 值的目標型別。</typeparam>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">JSON 值的 <typeparamref name="TValue" /> 表示法。</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;A value could not be read from the reader.">JSON 無效。
-或-
<typeparamref name="TValue" /> 與 JSON 不相容。
-或-
資料流中有剩餘的資料。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; uses unsupported options.">
        <paramref name="reader" /> 使用不支援的選項。</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a specified type. The stream will be read to completion.">將代表單一 JSON 值的 UTF-8 編碼文字，以非同步方式讀取到指定類型的執行個體中。 資料流將會讀取至完成。</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">要剖析的 JSON 資料。</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">要轉換並傳回的物件類型。</param>
      <param name="options" vsli:raw="Options to control the behavior during reading.">在讀取期間控制行為的選項。</param>
      <param name="cancellationToken" vsli:raw="A cancellation token that may be used to cancel the read operation.">可用來取消讀取作業的取消語彙基元。</param>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">JSON 值的 <paramref name="returnType" /> 表示法。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; or &lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> 或 <paramref name="returnType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the stream.">JSON 無效。
-或-
<typeparamref name="TValue" /> 與 JSON 不相容。
-或-
資料流中有剩餘的資料。</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a type specified by a generic type parameter. The stream will be read to completion.">將表示單一 JSON 值的 UTF-8 編碼文字，以非同步方式讀取到泛型型別參數所指定類型的執行個體中。 資料流將會讀取至完成。</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">要剖析的 JSON 資料。</param>
      <param name="options" vsli:raw="Options to control the behavior during reading.">在讀取期間控制行為的選項。</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the read operation.">可用來取消讀取作業的語彙基元。</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">JSON 值的目標型別。</typeparam>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">JSON 值的 <typeparamref name="TValue" /> 表示法。</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the stream.">JSON 無效。
-或-
<typeparamref name="TValue" /> 與 JSON 不相容。
-或-
資料流中有剩餘的資料。</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a specified type into a JSON string.">將指定類型的值轉換成 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The value to convert.">要進行轉換的值。</param>
      <param name="type">要轉換的 <paramref name="value" /> 類型。</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">控制轉換行為的選項。</param>
      <returns vsli:raw="The JSON string representation of the value.">值的字串表示。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes the JSON representation of the specified type to the provided writer.">將指定類型的一個 JSON 值 (包括物件或陣列)，寫入至所提供的寫入器。</summary>
      <param name="writer" vsli:raw="The JSON writer to write to.">JSON 寫入器。</param>
      <param name="value" vsli:raw="The value to convert and write.">要轉換和寫入的值。</param>
      <param name="type">要轉換的 <paramref name="value" /> 類型。</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">控制序列化行為的選項。</param>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a type specified by a generic type parameter into a JSON string.">將泛型型別參數所指定類型的值轉換為 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The value to convert.">要進行轉換的值。</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">控制序列化行為的選項。</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">要序列化之值的型別。</typeparam>
      <returns vsli:raw="A JSON string representation of the value.">值的字串表示。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes the JSON representation of a type specified by a generic type parameter to the provided writer.">將泛型型別參數所指定類型的一個 JSON 值 (包括物件或陣列)，寫入至所提供的寫入器。</summary>
      <param name="writer" vsli:raw="A JSON writer to write to.">JSON 寫入器。</param>
      <param name="value" vsli:raw="The value to convert and write.">要轉換和寫入的值。</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">控制序列化行為的選項。</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">要序列化之值的型別。</typeparam>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously converts the value of a specified type to UTF-8 encoded JSON text and writes it to the specified stream.">將指定類型的值，以非同步方式轉換成 UTF-8 編碼的 JSON 文字，並將其寫入指定的資料流。</summary>
      <param name="utf8Json" vsli:raw="The UTF-8 stream to write to.">要寫入的 UTF-8 資料流。</param>
      <param name="value" vsli:raw="The value to convert.">要進行轉換的值。</param>
      <param name="type">要轉換的 <paramref name="value" /> 類型。</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">控制序列化行為的選項。</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the write operation.">可用來取消寫入作業的語彙基元。</param>
      <returns vsli:raw="A task that represents the asynchronous write operation.">表示非同步寫入作業的工作。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously converts a value of a type specified by a generic type parameter to UTF-8 encoded JSON text and writes it to a stream.">將泛型型別參數所指定類型的值，以非同步方式轉換為 UTF-8 編碼的 JSON 文字，並將其寫入資料流。</summary>
      <param name="utf8Json" vsli:raw="The UTF-8 stream to write to.">要寫入的 UTF-8 資料流。</param>
      <param name="value" vsli:raw="The value to convert.">要進行轉換的值。</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">控制序列化行為的選項。</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the write operation.">可用來取消寫入作業的語彙基元。</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">要序列化之值的型別。</typeparam>
      <returns vsli:raw="A task that represents the asynchronous write operation.">表示非同步寫入作業的工作。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts a value of the specified type into a JSON string, encoded as UTF-8 bytes.">將所指定類型值轉換成 UTF8 編碼的位元組陣列。</summary>
      <param name="value" vsli:raw="The value to convert.">要進行轉換的值。</param>
      <param name="type">要轉換的 <paramref name="value" /> 類型。</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">控制轉換行為的選項。</param>
      <returns vsli:raw="A JSON string representation of the value, encoded as UTF-8 bytes.">值的 UTF-8 表示。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a type specified by a generic type parameter into a JSON string, encoded as UTF-8 bytes.">將泛型型別參數所指定類型的值，轉換成 UTF8 編碼的位元組陣列。</summary>
      <param name="value" vsli:raw="The value to convert.">要進行轉換的值。</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">控制轉換行為的選項。</param>
      <typeparam name="TValue" vsli:raw="The type of the value.">值的類型。</typeparam>
      <returns vsli:raw="A JSON string representation of the value, encoded as UTF-8 bytes.">值的 UTF-8 表示。</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializerOptions">
      <summary vsli:raw="Provides options to be used with &lt;see cref=&quot;T:System.Text.Json.JsonSerializer&quot; /&gt;.">提供搭配 <see cref="T:System.Text.Json.JsonSerializer" /> 使用的選項。</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonSerializerOptions&quot; /&gt; class.">初始化 <see cref="T:System.Text.Json.JsonSerializerOptions" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.AllowTrailingCommas">
      <summary vsli:raw="Get or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being deserialized.">取得或設定值，指出在所要還原序列化的 JSON 承載內，是否允許 (並忽略) 物件或陣列中的 JSON 值清單結尾有額外逗號。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored); &lt;see langword=&quot;false&quot; /&gt; otherwise.">
        <see langword="true" />如果允許在物件或陣列中的 JSON 值清單結尾出現額外的逗號 (並忽略);<see langword="false" />否則為。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">此屬性是在序列化或還原序列化發生後設定的。</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Converters">
      <summary vsli:raw="Gets the list of user-defined converters that were registered.">取得已註冊的使用者定義轉換器清單。</summary>
      <returns vsli:raw="The list of custom converters.">自訂轉換器的清單。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DefaultBufferSize">
      <summary vsli:raw="Gets or sets the default buffer size, in bytes, to use when creating temporary buffers.">取得或設定建立暫存緩衝區時要使用的預設緩衝區大小 (以位元組為單位)。</summary>
      <returns vsli:raw="The default buffer size in bytes.">預設緩衝區大小 (以位元組為單位)。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The buffer size is less than 1.">緩衝區大小小於 1。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">此屬性是在序列化或還原序列化發生後設定的。</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy">
      <summary vsli:raw="Gets or sets the policy used to convert a &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; key's name to another format, such as camel-casing.">取得或設定用來將 <see cref="T:System.Collections.IDictionary" /> 機碼名稱轉換為另一種格式 (例如，駝峰式大小寫) 的原則。</summary>
      <returns vsli:raw="The policy used to convert a &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; key's name to another format.">用來將索引<see cref="T:System.Collections.IDictionary" />鍵名稱轉換成另一種格式的原則。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Encoder">
      <summary vsli:raw="Gets or sets the encoder to use when escaping strings, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">取得或設定要在逸出字串時使用的編碼器，設為 <see langword="null" /> 則可使用預設編碼器。</summary>
      <returns vsli:raw="The JavaScript character encoding.">JavaScript 字元編碼。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.GetConverter(System.Type)">
      <summary vsli:raw="Returns the converter for the specified type.">傳回所指定類型的轉換器。</summary>
      <param name="typeToConvert" vsli:raw="The type to return a converter for.">要針對其傳回轉換器的類型。</param>
      <returns vsli:raw="The first converter that supports the given type.">第一個支援給定類型的轉換器，或若沒有任何轉換器，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues">
      <summary vsli:raw="Gets or sets a value that indicates whether &lt;see langword=&quot;null&quot; /&gt; values are ignored during serialization and deserialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">取得或設定值，該值決定序列化與還原序列化期間是否忽略 <see langword="null" /> 值。 預設值為 <see langword="false" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if null values are ignored during serialization and deserialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />表示在序列化和還原序列化期間忽略 null 值;否則, 請參閱 langword = "false"&gt;/。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.&#xA;&#xA;-or-&#xA;&#xA;&lt;see cref=&quot;P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition&quot; /&gt; has been set to a non-default value. These properties cannot be used together.">此屬性是在序列化或還原序列化發生後設定的。</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties">
      <summary vsli:raw="Gets a value that indicates whether read-only properties are ignored during serialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">取得值，此值決定序列化期間是否忽略唯讀屬性。 預設值為 <see langword="false" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if read-only properties are ignored during serialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />表示在序列化期間忽略唯讀屬性;否則為<see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">此屬性是在序列化或還原序列化發生後設定的。</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when serializing or deserializing JSON, with the default value of 0 indicating a maximum depth of 64.">取得或設定序劣化或還原序列化 JSON 時允許的最大深度，預設值 (亦即 0) 指出 64 的最大深度。</summary>
      <returns vsli:raw="The maximum depth allowed when serializing or deserializing JSON.">序列化或還原序列化 JSON 時允許的最大深度。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">此屬性是在序列化或還原序列化發生後設定的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The max depth is set to a negative value.">最大深度設定為負值。</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive">
      <summary vsli:raw="Gets or sets a value that indicates whether a property's name uses a case-insensitive comparison during deserialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">取得或設定值，此值決定屬性的名稱在還原序列化期間是否使用不區分大小寫的比較。 預設值為 <see langword="false" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if property names are compared case-insensitively; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />若要使用不區分大小寫的比較來比較屬性名稱, 則為。否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy">
      <summary vsli:raw="Gets or sets a value that specifies the policy used to convert a property's name on an object to another format, such as camel-casing, or &lt;see langword=&quot;null&quot; /&gt; to leave property names unchanged.">取得或設定值，此值指定用來將物件上的屬性名稱轉換為另一種格式 (例如，駝峰式大小寫) 的原則。</summary>
      <returns vsli:raw="A property naming policy, or &lt;see langword=&quot;null&quot; /&gt; to leave property names unchanged.">其中一個列舉值<see cref="T:System.Text.Json.JsonNamingPolicy" />。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.ReadCommentHandling">
      <summary vsli:raw="Gets or sets a value that defines how comments are handled during deserialization.">取得或設定值，此值定義在還原序列化期間如何處理註解。</summary>
      <returns vsli:raw="A value that indicates whether comments are allowed, disallowed, or skipped.">值, 指出是否允許、禁止或略過批註。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">此屬性是在序列化或還原序列化發生後設定的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The comment handling enum is set to a value that is not supported (or not within the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enum range).">註解處理列舉設定為不支援的值 (或不在 <see cref="T:System.Text.Json.JsonCommentHandling" /> 列舉範圍內)。</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.WriteIndented">
      <summary vsli:raw="Gets or sets a value that indicates whether JSON should use pretty printing. By default, JSON is serialized without any extra white space.">取得或設定值，此值定義 JSON 是否應該使用美化顯示。 根據預設，JSON 會序列化，而不會有任何額外的空白字元。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if JSON is pretty printed on serialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />如果 JSON 在序列化時應該會有相當的列印, 則為,否則為<see langword="false" />。 預設為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">此屬性是在序列化或還原序列化發生後設定的。</exception>
    </member>
    <member name="T:System.Text.Json.JsonTokenType">
      <summary vsli:raw="Defines the various JSON tokens that make up a JSON text.">定義組成 JSON 文字的各種 JSON 權杖。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Comment">
      <summary vsli:raw="The token type is a comment string.">權杖類型是註解字串。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndArray">
      <summary vsli:raw="The token type is the end of a JSON array.">權杖類型是 JSON 陣列的結尾。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndObject">
      <summary vsli:raw="The token type is the end of a JSON object.">權杖類型是 JSON 物件的結尾。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.False">
      <summary vsli:raw="The token type is the JSON literal false.">權杖類型是 JSON 常值 false。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.None">
      <summary vsli:raw="There is no value (as distinct from &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;). This is the default token type if no data has been read by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">沒有值 (與 <see cref="F:System.Text.Json.JsonTokenType.Null" /> 不同)。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Null">
      <summary vsli:raw="The token type is the JSON literal null.">權杖類型是 JSON 常值 null。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Number">
      <summary vsli:raw="The token type is a JSON number.">權杖類型是 JSON 數字。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.PropertyName">
      <summary vsli:raw="The token type is a JSON property name.">權杖類型是 JSON 屬性名稱。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartArray">
      <summary vsli:raw="The token type is the start of a JSON array.">權杖類型是 JSON 陣列的開頭。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartObject">
      <summary vsli:raw="The token type is the start of a JSON object.">權杖類型是 JSON 物件的開頭。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.String">
      <summary vsli:raw="The token type is a JSON string.">權杖類型是 JSON 字串。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.True">
      <summary vsli:raw="The token type is the JSON literal true.">權杖類型是 JSON 常值 true。</summary>
    </member>
    <member name="T:System.Text.Json.JsonValueKind">
      <summary vsli:raw="Specifies the data type of a JSON value.">指定 JSON 值的資料型別。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Array">
      <summary vsli:raw="A JSON array.">JSON 陣列。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.False">
      <summary vsli:raw="The JSON value false.">表示值為 JSON 值 <see langword="false" />。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Null">
      <summary vsli:raw="The JSON value null.">JSON 值 <see langword="null" />。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Number">
      <summary vsli:raw="A JSON number.">JSON 數字。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Object">
      <summary vsli:raw="A JSON object.">JSON 物件。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.String">
      <summary vsli:raw="A JSON string.">JSON 字串。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.True">
      <summary vsli:raw="The JSON value true.">JSON 值 <see langword="true" />。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Undefined">
      <summary vsli:raw="There is no value (as distinct from &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Null&quot; /&gt;).">沒有值 (與 <see cref="F:System.Text.Json.JsonValueKind.Null" /> 不同)。</summary>
    </member>
    <member name="T:System.Text.Json.JsonWriterOptions">
      <summary vsli:raw="Allows the user to define custom behavior when writing JSON using the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;.">可讓使用者在使用 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 撰寫 JSON 時，定義自訂行為。</summary>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Encoder">
      <summary vsli:raw="Gets or sets the encoder to use when escaping strings, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">取得或設定要在逸出字串時使用的編碼器，設為 <see langword="null" /> 則可使用預設編碼器。</summary>
      <returns vsli:raw="The JavaScript character encoder used to override the escaping behavior.">JavaScript 字元編碼。</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Indented">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; should format the JSON output, which includes indenting nested JSON tokens, adding new lines, and adding white space between property names and values.">取得或設定值，這個值指出 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 是否應將 JSON 輸出格式化，其中包含縮排巢狀 JSON 權杖、新增新行，以及在屬性名稱與值之間新增空白字元。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON output is formatted; &lt;see langword=&quot;false&quot; /&gt; if the JSON is written without any extra white space. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />若要格式化 JSON 輸出,<see langword="false" />寫入而不需要任何額外的空白字元。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.SkipValidation">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; should skip structural validation and allow the user to write invalid JSON.">取得或設定值，這個值指出 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 是否應該略過結構化驗證，並允許使用者寫入無效 JSON。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if structural validation is skipped and invalid JSON is allowed; &lt;see langword=&quot;false&quot; /&gt; if an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown on any attempt to write invalid JSON.">
        <see langword="true" />略過結構化驗證並允許不正確 JSON;<see langword="false" /> 表示<see cref="T:System.InvalidOperationException" />在任何嘗試寫入無效 JSON 時擲回。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonAttribute">
      <summary vsli:raw="Provides the base class for serialization attributes.">提供序列化屬性的基底類別。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonAttribute.#ctor">
      <summary vsli:raw="Creates a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonAttribute&quot; /&gt;.">建立 <see cref="T:System.Text.Json.Serialization.JsonAttribute" /> 的新執行個體。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter">
      <summary vsli:raw="Converts an object or value to or from JSON.">將物件或值轉換成或轉換自 JSON。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter.CanConvert(System.Type)">
      <summary vsli:raw="When overridden in a derived class, determines whether the converter instance can convert the specified object type.">在衍生類別中覆寫時，會決定轉換器執行個體是否可以轉換指定的物件類型。</summary>
      <param name="typeToConvert" vsli:raw="The type of the object to check whether it can be converted by this converter instance.">要檢查類型是否可由此轉換器執行個體轉換之物件的類型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instance can convert the specified object type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若執行個體可以轉換指定的物件類型，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter`1">
      <summary vsli:raw="Converts an object or value to or from JSON.">將物件或值轉換成或轉換自 JSON。</summary>
      <typeparam name="T" vsli:raw="The type of object or value handled by the converter.">轉換器所處理之物件或值的類型。</typeparam>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverter`1&quot; /&gt; instance.">初始化新的 <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> 執行個體。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)">
      <summary vsli:raw="Determines whether the specified type can be converted.">判斷是否可轉換指定的類型。</summary>
      <param name="typeToConvert" vsli:raw="The type to compare against.">要比較的類型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type can be converted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果型別可以轉換則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads and converts the JSON to type &lt;typeparamref name=&quot;T&quot; /&gt;.">讀取 JSON 並加以轉換為類型 <typeparamref name="T" />。</summary>
      <param name="reader" vsli:raw="The reader.">讀取器。</param>
      <param name="typeToConvert" vsli:raw="The type to convert.">要轉換的型別。</param>
      <param name="options" vsli:raw="An object that specifies serialization options to use.">物件，指定要使用的序列化選項。</param>
      <returns vsli:raw="The converted value.">轉換的值。</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes a specified value as JSON.">將指定的值寫為 JSON。</summary>
      <param name="writer" vsli:raw="The writer to write to.">要寫入的寫入器。</param>
      <param name="value" vsli:raw="The value to convert to JSON.">要轉換為 JSON 的值。</param>
      <param name="options" vsli:raw="An object that specifies serialization options to use.">物件，指定要使用的序列化選項。</param>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterAttribute">
      <summary vsli:raw="When placed on a property or type, specifies the converter type to use.">放在屬性或類型上時，可指定要使用的轉換器類型。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;.">初始化 <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt; with the specified converter type.">使用指定的轉換器類型初始化 <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> 的新執行個體。</summary>
      <param name="converterType" vsli:raw="The type of the converter.">轉換器的類型。</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType">
      <summary vsli:raw="Gets the type of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if it was created without a type.">取得 <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> 的類型，若它是在沒有類型的情況下建立的，則為 <see langword="null" />。</summary>
      <returns vsli:raw="The type of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if it was created without a type.">的類型<see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /><see langword="null" /> , 如果是在沒有類型的情況下建立, 則為。</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.CreateConverter(System.Type)">
      <summary vsli:raw="When overridden in a derived class and &lt;see cref=&quot;P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, allows the derived class to create a &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverter&quot; /&gt; in order to pass additional state.">在衍生類別中覆寫且 <see cref="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType" /> 是 <see langword="null" /> 時，允許衍生類別建立 <see cref="T:System.Text.Json.Serialization.JsonConverter" /> 以傳遞額外狀態。</summary>
      <param name="typeToConvert" vsli:raw="The type of the converter.">轉換器的類型。</param>
      <returns vsli:raw="The custom converter.">自訂轉換器。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterFactory">
      <summary vsli:raw="Supports converting several types by using a factory pattern.">支援使用 factory 模式轉換多種類型。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.#ctor">
      <summary vsli:raw="When overridden in a derived class, initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterFactory&quot; /&gt; class.">在衍生類別中覆寫時，初始化 <see cref="T:System.Text.Json.Serialization.JsonConverterFactory" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Creates a converter for a specified type.">建立指定類型的轉換器。</summary>
      <param name="typeToConvert" vsli:raw="The type handled by the converter.">轉換器處理的類型。</param>
      <param name="options" vsli:raw="The serialization options to use.">要使用的序列化選項。</param>
      <returns vsli:raw="A converter for which &lt;typeparamref name=&quot;T&quot; /&gt; is compatible with &lt;paramref name=&quot;typeToConvert&quot; /&gt;.">
        <typeparamref name="T" /> 與 <paramref name="typeToConvert" /> 相容的轉換器。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonExtensionDataAttribute">
      <summary vsli:raw="When placed on a property of type &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;, any properties that do not have a matching member are added to that dictionary during deserialization and written during serialization.">置於 <see cref="T:System.Collections.Generic.IDictionary`2" /> 類型的屬性上時，任何沒有相符成員的屬性都會在還原序列化期間新增至該字典，並在序列化期間寫入。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonExtensionDataAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonExtensionDataAttribute&quot; /&gt; class.">執行個體化 <see cref="T:System.Text.Json.Serialization.JsonExtensionDataAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIgnoreAttribute">
      <summary vsli:raw="Prevents a property from being serialized or deserialized.">避免將屬性序列化或還原序列化。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonIgnoreAttribute&quot; /&gt;.">初始化 <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute" /> 的新執行個體。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonPropertyNameAttribute">
      <summary vsli:raw="Specifies the property name that is present in the JSON when serializing and deserializing. This overrides any naming policy specified by &lt;see cref=&quot;T:System.Text.Json.JsonNamingPolicy&quot; /&gt;.">指定在序列化和還原序列化時，存在於 JSON 中的屬性名稱。 這會覆寫 <see cref="T:System.Text.Json.JsonNamingPolicy" /> 所指定的任何命名原則。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonPropertyNameAttribute&quot; /&gt; with the specified property name.">使用指定的屬性名稱，初始化 <see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute" /> 的新執行個體。</summary>
      <param name="name" vsli:raw="The name of the property.">屬性的名稱。</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonPropertyNameAttribute.Name">
      <summary vsli:raw="Gets the name of the property.">取得屬性的名稱。</summary>
      <returns vsli:raw="The name of the property.">屬性的名稱。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonStringEnumConverter">
      <summary vsli:raw="Converts enumeration values to and from strings.">將列舉值與字串相互轉換。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor">
      <summary vsli:raw="Initializes an instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonStringEnumConverter&quot; /&gt; class with the default naming policy that allows integer values.">使用允許整數值的預設命名原則，初始化 <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> 類別的執行個體。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor(System.Text.Json.JsonNamingPolicy,System.Boolean)">
      <summary vsli:raw="Initializes an instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonStringEnumConverter&quot; /&gt; class with a specified naming policy and a value that indicates whether undefined enumeration values are allowed.">使用指定命名原則和指出是否允許未定義列舉值的值，來初始化 <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> 類別的執行個體。</summary>
      <param name="namingPolicy" vsli:raw="The optional naming policy for writing enum values.">用於寫入列舉值的選擇性命名原則。</param>
      <param name="allowIntegerValues" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow undefined enum values; otherwise, &lt;see langword=&quot;false&quot; /&gt;. When &lt;see langword=&quot;true&quot; /&gt;, if an enum value isn't defined, it will output as a number rather than a string.">
        <see langword="true" /> 表示允許未定義的列舉值；否則為 <see langword="false" />。 當 <see langword="true" /> 時，如果列舉值未定義，則會輸出為數字而非字串。</param>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CanConvert(System.Type)">
      <summary vsli:raw="Determines whether the specified type can be converted to an enum.">判斷指定的類型是否可以轉換為列舉。</summary>
      <param name="typeToConvert" vsli:raw="The type to be checked.">要檢查的型別。</param>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the type can be converted; otherwise, &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt;.">如果型別可以轉換則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <param name="typeToConvert" vsli:raw="The type handled by the converter." />
      <param name="options" vsli:raw="The serialization options to use." />
    </member>
    <member name="T:System.Text.Json.Utf8JsonReader">
      <summary vsli:raw="Provides a high-performance API for forward-only, read-only access to UTF-8 encoded JSON text.">提供高效能 API，以便對 UTF-8 編碼的 JSON 文字進行唯讀的順向存取。</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only sequence of UTF-8 encoded text and indicates whether the input contains all the text to process.">初始化 <see cref="T:System.Text.Json.Utf8JsonReader" /> 結構的新執行個體，以處理 UTF-8 編碼文字的唯讀序列，並指出輸入是否包含要處理的所有文字。</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">要處理的 UTF-8 編碼 JSON 文字。</param>
      <param name="isFinalBlock" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the input sequence contains the entire data to process; &lt;see langword=&quot;false&quot; /&gt; to indicate that the input span contains partial data with more data to follow.">若輸入序列包含要處理的整個資料，則為 <see langword="true" />；若只有輸入範圍包含有更多資料可供追蹤的部分資料，則為 <see langword="false" />。</param>
      <param name="state" vsli:raw="The reader state. If this is the first call to the constructor, pass the default state; otherwise, pass the value of the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.CurrentState&quot; /&gt; property from the previous instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">包含讀取器狀態的物件。 如果這是建構函式的第一次呼叫，則傳入預設狀態。 否則，請擷取前一個 <see cref="T:System.Text.Json.Utf8JsonReader" /> 執行個體的狀態，並將其傳回。</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only sequence of UTF-8 encoded text using the specified options.">使用指定的選項初始化 <see cref="T:System.Text.Json.Utf8JsonReader" /> 結構的新執行個體，以處理 UTF-8 編碼文字的唯讀序列。</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">要處理的 UTF-8 編碼 JSON 文字。</param>
      <param name="options" vsli:raw="Options that define customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that differs from the JSON RFC (for example, how to handle comments or maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly; comments within the JSON are invalid, and the maximum depth is 64.">一個物件，它定義不同於 JSON RFC 的自訂 <see cref="T:System.Text.Json.Utf8JsonReader" /> 行為 (例如處理註解的方式，或讀取時允許的最大深度)。 根據預設，<see cref="T:System.Text.Json.Utf8JsonReader" /> 會嚴格遵循 JSON RFC；JSON 內的註解無效，且最大深度是 64。</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only span of UTF-8 encoded text and indicates whether the input contains all the text to process.">初始化 <see cref="T:System.Text.Json.Utf8JsonReader" /> 結構的新執行個體，以處理 UTF-8 編碼文字的唯讀反為，並指出輸入是否包含要處理的所有文字。</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">要處理的 UTF-8 編碼 JSON 文字。</param>
      <param name="isFinalBlock" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the input sequence contains the entire data to process; &lt;see langword=&quot;false&quot; /&gt; to indicate that the input span contains partial data with more data to follow.">若輸入序列包含要處理的整個資料，則為 <see langword="true" />；若輸入範圍包含有更多資料可供追蹤的部分資料，則為 <see langword="false" />。</param>
      <param name="state" vsli:raw="The reader state. If this is the first call to the constructor, pass the default state; otherwise, pass the value of the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.CurrentState&quot; /&gt; property from the previous instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">包含讀取器狀態的物件。 若它是對建構函式的第一個呼叫，它應該會反映預設狀態；否則，它應該從 <see cref="T:System.Text.Json.Utf8JsonReader" /> 的前一個執行個體擷取狀態狀態並將其傳回。</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only span of UTF-8 encoded text using the specified options.">使用指定的選項初始化 <see cref="T:System.Text.Json.Utf8JsonReader" /> 結構的新執行個體，以處理 UTF-8 編碼文字的唯讀範圍。</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">要處理的 UTF-8 編碼 JSON 文字。</param>
      <param name="options" vsli:raw="Options that define customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that differs from the JSON RFC (for example, how to handle comments or maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly; comments within the JSON are invalid, and the maximum depth is 64.">一個物件，它定義不同於 JSON RFC 的自訂 <see cref="T:System.Text.Json.Utf8JsonReader" /> 行為 (例如處理註解的方式，或讀取時允許的最大深度)。 根據預設，<see cref="T:System.Text.Json.Utf8JsonReader" /> 會嚴格遵循 JSON RFC；JSON 內的註解無效，且最大深度是 64。</param>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.BytesConsumed">
      <summary vsli:raw="Gets the total number of bytes consumed so far by this instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">取得 <see cref="T:System.Text.Json.Utf8JsonReader" /> 的這個執行個體到目前為止所取用的位元組總數。</summary>
      <returns vsli:raw="The total number of bytes consumed so far.">到目前為止耗用的位元組總數。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentDepth">
      <summary vsli:raw="Gets the depth of the current token.">取得目前權杖的深度。</summary>
      <returns vsli:raw="The depth of the current token.">目前標記的深度。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentState">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; state to pass to a &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; constructor with more data.">取得要傳遞到具有更多資料之 <see cref="T:System.Text.Json.Utf8JsonReader" /> 建構函式的目前 <see cref="T:System.Text.Json.Utf8JsonReader" /> 狀態。</summary>
      <returns vsli:raw="The current reader state.">目前的讀取器狀態。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBoolean">
      <summary vsli:raw="Reads the next JSON token value from the source as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">從來源讀取下一個 JSON 權杖值作為 <see cref="T:System.Boolean" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.True&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.False&quot; /&gt;.">如果 <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> 是 <see cref="F:System.Text.Json.JsonTokenType.True" />，則為 <see langword="true" />；如果 <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> 是 <see cref="F:System.Text.Json.JsonTokenType.False" />，則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a Boolean value (that is, &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.True&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.False&quot; /&gt;).">JSON 權杖值不是布林值 (亦即，<see cref="F:System.Text.Json.JsonTokenType.True" /> 或 <see cref="F:System.Text.Json.JsonTokenType.False" />)。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetByte">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.Byte" />。</summary>
      <returns vsli:raw="The value of the UTF-8 encoded token.">UTF-8 編碼權杖的值。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 權杖的值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Byte.MinValue&quot;&gt;Byte.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Byte.MaxValue&quot;&gt;Byte.MaxValue&lt;/see&gt;.">JSON 權杖值的數值格式不正確 (例如，它包含小數值或以科學記號標記法撰寫)。
-或-
JSON 權杖值表示小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBytesFromBase64">
      <summary vsli:raw="Parses the current JSON token value from the source and decodes the Base64 encoded JSON string as a byte array.">從來源剖析目前 JSON 權杖值，並將 Base64 編碼的 JSON 字串解碼為位元組陣列。</summary>
      <returns vsli:raw="The byte array that represents the current JSON token value.">表示目前 JSON 權杖值的位元組陣列。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON 權杖類型不是 <see cref="F:System.Text.Json.JsonTokenType.String" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value is not encoded as Base64 text, so it can't be decoded to bytes.&#xA;&#xA;-or-&#xA;&#xA;The value contains invalid or more than two padding characters.&#xA;&#xA;-or-&#xA;&#xA;The value is incomplete. That is, the JSON string length is not a multiple of 4.">此值未編碼為 Base64 文字，因此無法解碼為位元組。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetComment">
      <summary vsli:raw="Parses the current JSON token value from the source as a comment and transcodes it as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">從來源將目前 JSON 權杖值剖析為註解，並已將其轉碼為 <see cref="T:System.String" />。</summary>
      <returns vsli:raw="The comment that represents the current JSON token value.">表示目前 JSON 權杖值的註解。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a comment.">JSON 權杖不是註解。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTime">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">從來源讀取下一個 JSON 權杖值，並將其剖析為 <see cref="T:System.DateTime" />。</summary>
      <returns vsli:raw="The date and time value, if the entire UTF-8 encoded token value can be successfully parsed.">日期和時間 (如果可以成功剖析整個 UTF-8 編碼權杖值)。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.String" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value cannot be read as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.&#xA;        &#xA;-or-&#xA;        &#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value is of an unsupported format.">JSON 權杖值不是支援的格式。 僅支援部分的 ISO 8601 格式。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTimeOffset">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">從來源讀取下一個 JSON 權杖值，並將其剖析為 <see cref="T:System.DateTimeOffset" />。</summary>
      <returns vsli:raw="The date and time offset, if the entire UTF-8 encoded token value can be successfully parsed.">日期和時間值 (如果可以成功剖析整個 UTF-8 編碼權杖值)。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.String" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value cannot be read as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.&#xA;&#xA;-or-&#xA;        &#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value is of an unsupported format.">JSON 權杖值不是支援的格式。 僅支援部分的 ISO 8601 格式。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDecimal">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">從來源讀取下一個 JSON 權杖值，並將其剖析為 <see cref="T:System.Decimal" />。</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">剖析為 <see cref="T:System.Decimal" /> 的 UTF-8 編碼權杖值。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Decimal.MinValue&quot;&gt;Decimal.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">JSON 權杖值表示小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDouble">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">從來源讀取下一個 JSON 權杖值，並將其剖析為 <see cref="T:System.Double" />。</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">剖析為 <see cref="T:System.Double" /> 的 UTF-8 編碼權杖值。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Double.MinValue&quot;&gt;Double.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Double.MaxValue&quot;&gt;Double.MaxValue&lt;/see&gt;.">JSON 權杖值表示小於 <see cref="F:System.Double.MinValue" /> 或大於 <see cref="F:System.Double.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetGuid">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">從來源讀取下一個 JSON 權杖值，並將其剖析為 <see cref="T:System.Guid" />。</summary>
      <returns vsli:raw="The GUID value, if the entire UTF-8 encoded token value can be successfully parsed.">GUID 值 (如果可以成功剖析整個 UTF-8 編碼權杖值)。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.String" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is in an unsupported format for a Guid.&#xA;        &#xA;-or-&#xA;&#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value.">JSON 權杖值不是支援的 GUID 格式。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt16">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.Int16" />。</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">剖析為 <see cref="T:System.Int16" /> 的 UTF-8 編碼權杖值。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 權杖的值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int16.MinValue&quot;&gt;Int16.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int16.MaxValue&quot;&gt;Int16.MaxValue&lt;/see&gt;.">JSON 權杖值的數值格式不正確 (例如，它包含小數值或以科學記號標記法撰寫)。
-或-
JSON 權杖值表示小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt32">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">從來源讀取下一個 JSON 權杖值，並將其剖析為 <see cref="T:System.Int32" />。</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">剖析為 <see cref="T:System.Int32" /> 的 UTF-8 編碼權杖值。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int32.MinValue&quot;&gt;Int32.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">JSON 權杖值的數字格式不正確。 例如，包含小數或是以科學記號標記法撰寫。
-或-
JSON 權杖值表示小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt64">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">從來源讀取下一個 JSON 權杖值，並將其剖析為 <see cref="T:System.Int64" />。</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">剖析為 <see cref="T:System.Int64" /> 的 UTF-8 編碼權杖值。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int64.MinValue&quot;&gt;Int64.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">JSON 權杖值的數字格式不正確。 例如，包含小數或是以科學記號標記法撰寫。
-或-
JSON 權杖值表示小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSByte">
      <summary vsli:raw="Parses the current JSON token value from the source as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.SByte" />。</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">剖析為 <see cref="T:System.SByte" /> 的 UTF-8 編碼權杖值。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 權杖的值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.SByte.MinValue&quot;&gt;SByte.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.SByte.MaxValue&quot;&gt;SByte.MaxValue&lt;/see&gt;.">JSON 權杖值的數值格式不正確 (例如，它包含小數值或以科學記號標記法撰寫)。
-或-
JSON 權杖值表示小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSingle">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">從來源讀取下一個 JSON 權杖值，並將其剖析為 <see cref="T:System.Single" />。</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">剖析為 <see cref="T:System.Single" /> 的 UTF-8 編碼權杖值。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Single.MinValue&quot;&gt;Single.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Single.MaxValue&quot;&gt;Single.MaxValue&lt;/see&gt;.">JSON 權杖值表示小於 <see cref="F:System.Single.MinValue" /> 或大於 <see cref="F:System.Single.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetString">
      <summary vsli:raw="Reads the next JSON token value from the source unescaped and transcodes it as a string.">從來源讀取下一個 JSON 權杖值，並轉碼為字串。</summary>
      <returns vsli:raw="The token value parsed to a string, or &lt;see langword=&quot;null&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;.">剖析為字串的權杖值，或若 <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> 是 <see cref="F:System.Text.Json.JsonTokenType.Null" /> 則為 <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a string (that is, not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;, &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;, or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;).&#xA;&#xA;-or-&#xA;&#xA;The JSON string contains invalid UTF-8 bytes or invalid UTF-16 surrogates.">JSON 權杖值不是字串 (亦即，不是 <see cref="F:System.Text.Json.JsonTokenType.String" /> 或 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />)。
-或-
JSON 字串包含無效 UTF-8 位元組或無效 UTF-16 Surrogate。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt16">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.UInt16" />。</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">剖析為 <see cref="T:System.UInt16" /> 的 UTF-8 編碼權杖值。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 權杖的值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt16.MinValue&quot;&gt;UInt16.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt16.MaxValue&quot;&gt;UInt16.MaxValue&lt;/see&gt;.">JSON 權杖值的數值格式不正確 (例如，它包含小數值或以科學記號標記法撰寫)。
-或-
JSON 權杖值表示小於 <see cref="F:System.UInt16.MinValue" /> 或大於 <see cref="F:System.UInt16.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt32">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">從來源讀取下一個 JSON 權杖值，並將其剖析為 <see cref="T:System.UInt32" />。</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">剖析為 <see cref="T:System.UInt32" /> 的 UTF-8 編碼權杖值。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt32.MinValue&quot;&gt;UInt32.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt32.MaxValue&quot;&gt;UInt32.MaxValue&lt;/see&gt;.">JSON 權杖值的數字格式不正確。 例如，包含小數或是以科學記號標記法撰寫。
-或-
JSON 權杖值表示小於 <see cref="F:System.UInt32.MinValue" /> 或大於 <see cref="F:System.UInt32.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt64">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">從來源讀取下一個 JSON 權杖值，並將其剖析為 <see cref="T:System.UInt64" />。</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">剖析為 <see cref="T:System.UInt64" /> 的 UTF-8 編碼權杖值。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt64.MinValue&quot;&gt;UInt64.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt64.MaxValue&quot;&gt;UInt64.MaxValue&lt;/see&gt;.">JSON 權杖值的數字格式不正確。 例如，包含小數或是以科學記號標記法撰寫。
-或-
JSON 權杖值表示小於 <see cref="F:System.UInt64.MinValue" /> 或大於 <see cref="F:System.UInt64.MaxValue" /> 的數字。</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.HasValueSequence">
      <summary vsli:raw="Gets a value that indicates which &lt;c&gt;Value&lt;/c&gt; property to use to get the token value.">取得值，這個值表示要用來取得權杖值的 <c>Value</c> 屬性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.ValueSequence&quot; /&gt; should be used to get the token value; &lt;see langword=&quot;false&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.ValueSpan&quot; /&gt; should be used instead.">
        <see langword="true" />如果<see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" />應該用來取得權杖值, 則為,如果應改用, 則<see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" />為。 <see langword="false" /></returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.IsFinalBlock">
      <summary vsli:raw="Gets a value that indicates whether all the JSON data was provided or there is more data to come.">取得這個 <see cref="T:System.Text.Json.Utf8JsonReader" /> 執行個體的模式，指出已提供所有 JSON 資料，或後續還有更多資料。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader was constructed with the input span or sequence containing the entire JSON data to process; &lt;see langword=&quot;false&quot; /&gt; if the reader was constructed with an input span or sequence that may contain partial JSON data with more data to follow.">
        <see langword="true" />如果讀取器是使用輸入範圍或包含要處理之完整 JSON 資料的序列所建立, 則為。<see langword="false" />如果讀取器是使用輸入範圍或序列所建立, 其中可能包含具有更多要遵循之資料的部分 JSON 資料。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.Position">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; within the provided UTF-8 encoded input ReadOnlySequence&amp;lt;byte&amp;gt; or a default &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; if the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct was constructed with a ReadOnlySpan&amp;lt;byte&amp;gt;.">取得所提供 UTF-8 編碼輸入ReadOnlySequence&lt;位元組&gt; 內的目前 <see cref="T:System.SequencePosition" />，或是使用 ReadOnlySpan&lt;位元組&gt; 建構 <see cref="T:System.Text.Json.Utf8JsonReader" /> 結構時的預設 <see cref="T:System.SequencePosition" />。</summary>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; within the provided UTF-8 encoded input ReadOnlySequence&amp;lt;byte&amp;gt; or a default &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; if the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct was constructed with a ReadOnlySpan&amp;lt;byte&amp;gt;.">提供的<see cref="T:System.SequencePosition" /> utf-8 編碼輸入 ReadOnlySequence&lt;位元組&gt;內的目前, 如果<see cref="T:System.Text.Json.Utf8JsonReader" />結構是使用<see cref="T:System.SequencePosition" /> ReadOnlySpan&lt;位元組&gt;所建立, 則為預設值。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Read">
      <summary vsli:raw="Reads the next JSON token from the input source.">從輸入來源讀取下一個 JSON 權杖。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the token was read successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功讀取權杖，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token according to the JSON RFC is encountered.&#xA;        &#xA;-or-&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">發現根據 JSON RFC 無效的 JSON 權杖。
-或-
目前深度超過最大深度設定的遞迴限制。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Skip">
      <summary vsli:raw="Skips the children of the current JSON token.">略過目前 JSON 權杖的子系。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The reader was given partial data with more data to follow (that is, &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.IsFinalBlock&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;).">已提供部分資料給讀取器，後續還有更多資料 (亦即 <see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" /> 為 <see langword="false" />)。</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token was encountered while skipping, according to the JSON RFC.&#xA;&#xA;-or-&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">根據 JSON RFC，略過時發現無效的 JSON 權杖。
-或-
目前深度超過最大深度設定的遞迴限制。</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenStartIndex">
      <summary vsli:raw="Gets the index that the last processed JSON token starts at (within the given UTF-8 encoded input text), skipping any white space.">取得上次所處理 JSON 權杖的起始索引 (位於指定的 UTF-8 編碼輸入文字內)，並略過任何空白字元。</summary>
      <returns vsli:raw="The starting index of the last processed JSON token within the given UTF-8 encoded input text.">指定之 UTF-8 編碼輸入文字內最後處理之 JSON token 的起始索引。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenType">
      <summary vsli:raw="Gets the type of the last processed JSON token in the UTF-8 encoded JSON text.">取得 UTF-8 編碼 JSON 文字中上次處理 JSON 權杖的類型。</summary>
      <returns vsli:raw="The type of the last processed JSON token.">上次處理之 JSON token 的類型。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetByte(System.Byte@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Byte&quot; /&gt; and returns a value that indicates whether the operation succeeded.">嘗試從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.Byte" />，並傳回指出作業是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains the byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">當這個方法傳回時，會包含剖析的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Byte&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果整個 UTF-8 編碼權杖值可以成功剖析為 <see cref="T:System.Byte" /> 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetBytesFromBase64(System.Byte[]@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source and decodes the Base64 encoded JSON string as a byte array and returns a value that indicates whether the operation succeeded.">嘗試從來源剖析目前的 JSON 權杖值、將 Base64 編碼的 JSON 字串解碼為位元組陣列，並傳回指出作業是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains the decoded binary representation of the Base64 text.">當此方法傳回時，包含 Base64 文字的已解碼二進位表示。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire token value is encoded as valid Base64 text and can be successfully decoded to bytes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若整個權杖值已編碼為有效的 Base64 文字，並可以成功解碼為位元組，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON 權杖不是 <see cref="F:System.Text.Json.JsonTokenType.String" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTime(System.DateTime@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; and returns a value that indicates whether the operation succeeded.">嘗試從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.DateTime" />，並傳回指出作業是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTime.MinValue&quot; /&gt; if the conversion failed.">當這個方法傳回時，會包含剖析的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果整個 UTF-8 編碼權杖值可以成功剖析為 <see cref="T:System.DateTime" /> 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.String" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; and returns a value that indicates whether the operation succeeded.">嘗試從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.DateTimeOffset" />，並傳回指出作業是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTimeOffset.MinValue&quot; /&gt; if the conversion failed.">當這個方法傳回時，會包含剖析的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果整個 UTF-8 編碼權杖值可以成功剖析為 <see cref="T:System.DateTimeOffset" /> 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.String" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; and returns a value that indicates whether the operation succeeded.">嘗試從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.Decimal" />，並傳回指出作業是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains the decimal equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">當這個方法傳回時，會包含剖析的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果整個 UTF-8 編碼權杖值可以成功剖析為 <see cref="T:System.Decimal" /> 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Double&quot; /&gt; and returns a value that indicates whether the operation succeeded.">嘗試從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.Double" />，並傳回指出作業是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains a double-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">當這個方法傳回時，會包含剖析的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Double&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果整個 UTF-8 編碼權杖值可以成功剖析為 <see cref="T:System.Double" /> 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetGuid(System.Guid@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Guid&quot; /&gt; and returns a value that indicates whether the operation succeeded.">嘗試從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.Guid" />，並傳回指出作業是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains the GUID equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.Guid.Empty&quot; /&gt; if the conversion failed.">當這個方法傳回時，會包含剖析的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果整個 UTF-8 編碼權杖值可以成功剖析為 <see cref="T:System.Guid" /> 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.String" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt16(System.Int16@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int16&quot; /&gt; and returns a value that indicates whether the operation succeeded.">嘗試從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.Int16" />，並傳回指出作業是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains the 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">當這個方法傳回時，會包含剖析的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Int16&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果整個 UTF-8 編碼權杖值可以成功剖析為 <see cref="T:System.Int16" /> 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int32&quot; /&gt; and returns a value that indicates whether the operation succeeded.">嘗試從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.Int32" />，並傳回指出作業是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains the 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">當這個方法傳回時，會包含剖析的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果整個 UTF-8 編碼權杖值可以成功剖析為 <see cref="T:System.Int32" /> 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int64&quot; /&gt; and returns a value that indicates whether the operation succeeded.">嘗試從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.Int64" />，並傳回指出作業是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains the 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">當這個方法傳回時，會包含剖析的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果整個 UTF-8 編碼權杖值可以成功剖析為 <see cref="T:System.Int64" /> 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSByte(System.SByte@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.SByte&quot; /&gt; and returns a value that indicates whether the operation succeeded.">嘗試從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.SByte" />，並傳回指出作業是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains the signed byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">當這個方法傳回時，會包含剖析的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.SByte&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果整個 UTF-8 編碼權杖值可以成功剖析為 <see cref="T:System.SByte" /> 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Single&quot; /&gt; and returns a value that indicates whether the operation succeeded.">嘗試從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.Single" />，並傳回指出作業是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains the single-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">當這個方法傳回時，會包含剖析的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Single&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果整個 UTF-8 編碼權杖值可以成功剖析為 <see cref="T:System.Single" /> 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt16(System.UInt16@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; and returns a value that indicates whether the operation succeeded.">嘗試從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.UInt16" />，並傳回指出作業是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains the unsigned 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">當這個方法傳回時，會包含剖析的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果整個 UTF-8 編碼權杖值可以成功剖析為 <see cref="T:System.UInt16" /> 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; and returns a value that indicates whether the operation succeeded.">嘗試從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.UInt32" />，並傳回指出作業是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">當這個方法傳回時，會包含剖析的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果整個 UTF-8 編碼權杖值可以成功剖析為 <see cref="T:System.UInt32" /> 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; and returns a value that indicates whether the operation succeeded.">嘗試從來源剖析目前的 JSON 權杖值作為 <see cref="T:System.UInt64" />，並傳回指出作業是否成功的值。</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">當這個方法傳回時，會包含剖析的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果整個 UTF-8 編碼權杖值可以成功剖析為 <see cref="T:System.UInt64" /> 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON 權杖值不是 <see cref="F:System.Text.Json.JsonTokenType.Number" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TrySkip">
      <summary vsli:raw="Tries to skip the children of the current JSON token.">嘗試略過目前 JSON 權杖的子系。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there was enough data for the children to be skipped successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若有足夠的資料可成功略過子系，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token was encountered while skipping, according to the JSON RFC.&#xA;          &#xA;-or -&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">根據 JSON RFC，略過時發現無效的 JSON 權杖。
-或-
目前深度超過最大深度設定的遞迴限制。</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSequence">
      <summary vsli:raw="Gets the raw value of the last processed token as a ReadOnlySequence&amp;lt;byte&amp;gt; slice of the input payload, only if the token is contained within multiple segments.">取得上次處理之權杖的值，作為輸入承載的 <see cref="T:System.ReadOnlySpan`1" /> 配量。 如果在 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 內提供 JSON，且代表權杖值的配量可融入單一區段，則 <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> 包含配量值，因為您能以範圍形式代表它。 否則，<see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> 包含權杖值。</summary>
      <returns vsli:raw="A byte read-only sequence.">位元組唯讀序列。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSpan">
      <summary vsli:raw="Gets the raw value of the last processed token as a ReadOnlySpan&amp;lt;byte&amp;gt; slice of the input payload, if the token fits in a single segment or if the reader was constructed with a JSON payload contained in a ReadOnlySpan&amp;lt;byte&amp;gt;.">取得上次處理的權杖，作為輸入承載的 ReadOnlySpan&lt;位元組&gt; 的配量。 如果在 ReadOnlySequence&lt;位元組&gt; 內提供 JSON，且表示權杖值的配量可融入單一區段，則 <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> 包含配量值，因為它可以表示為範圍。 否則，<see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> 包含權杖值。</summary>
      <returns vsli:raw="A read-only span of bytes.">位元組的唯讀範圍。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the UTF-8 encoded text in a read-only byte span to the unescaped JSON token value in the source and returns a value that indicates whether they match.">將唯讀位元組範圍中的 UTF-8 編碼文字與來源中未逸出的 JSON 權杖值比較，並傳回指出它們是否相符的值。</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">要用來比較的 UTF-8 編碼文字。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the UTF-8 encoded lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若來源中的 JSON 權杖值符合 UTF-8 編碼查閱文字，即為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">不是字串的 JSON 權杖 (亦即，它不是 <see cref="F:System.Text.Json.JsonTokenType.String" /> 或 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />)。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares the text in a read-only character span to the unescaped JSON token value in the source and returns a value that indicates whether they match.">將唯讀字元範圍中的 UTF-8 編碼文字與來源中未逸出的 JSON 權杖值比較，並傳回指出它們是否相符的值。</summary>
      <param name="text" vsli:raw="The text to compare against.">要用來比較的 UTF-8 編碼文字。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若來源中的 JSON 權杖值符合 UTF-8 編碼查閱文字，即為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">不是字串的 JSON 權杖 (亦即，它不是 <see cref="F:System.Text.Json.JsonTokenType.String" /> 或 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />)。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.String)">
      <summary vsli:raw="Compares the string text to the unescaped JSON token value in the source and returns a value that indicates whether they match.">將字元範圍中的文字與來源中未逸出的 JSON 權杖值比較，並傳回指出它們是否相符的值。</summary>
      <param name="text" vsli:raw="The text to compare against.">要比較的文字。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若來源中的 JSON 權杖值符合查閱文字，即為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">不是字串的 JSON 權杖 (亦即，它不是 <see cref="F:System.Text.Json.JsonTokenType.String" /> 或 <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />)。</exception>
    </member>
    <member name="T:System.Text.Json.Utf8JsonWriter">
      <summary vsli:raw="Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.">提供高效能 API，以便對 UTF-8 編碼的 JSON 文字進行非快取的順向寫入。</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; class using the specified &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt; to write the output to and customization options.">使用指定的 <see langword="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />，建構新的 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 執行個體。</summary>
      <param name="bufferWriter" vsli:raw="The destination for writing JSON text.">寫入 JSON 文字的目的地。</param>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;. By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.">定義 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 的自訂行為。根據預設，它會寫入最小化的 JSON (也就是沒有額外的空白字元)，並驗證所寫入的 JSON 根據 JSON RFC 在結構上有效。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;bufferWriter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="bufferWriter" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; class using the specified stream to write the output to and customization options.">使用指定的 <paramref name="utf8Json" />，建構新的 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 執行個體。</summary>
      <param name="utf8Json" vsli:raw="The destination for writing JSON text.">寫入 JSON 文字的目的地。</param>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;. By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.">定義 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 的自訂行為。根據預設，它會寫入最小化的 JSON (也就是沒有額外的空白字元)，並驗證所寫入的 JSON 根據 JSON RFC 在結構上有效。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesCommitted">
      <summary vsli:raw="Gets the total number of bytes committed to the output by the current instance so far.">取得目前執行個體到目前為止認可至輸出的位元組總數。</summary>
      <returns vsli:raw="The total number of bytes committed to the output by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; so far.">到目前為止, 已認可至輸出<see cref="T:System.Text.Json.Utf8JsonWriter" />的位元組總數。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesPending">
      <summary vsli:raw="Gets the number of bytes written by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; so far that have not yet been flushed to the output and committed.">取得 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 到目前為止所寫入但尚未排清到輸出並認可的位元組數目。</summary>
      <returns vsli:raw="The number of bytes written so far by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; that have not yet been flushed to the output and committed.">到目前為止<see cref="T:System.Text.Json.Utf8JsonWriter" /> , 尚未排清至輸出並認可的位元組數。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.CurrentDepth">
      <summary vsli:raw="Gets the depth of the current token.">取得目前權杖的深度。</summary>
      <returns vsli:raw="The depth of the current token.">目前標記的深度。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Dispose">
      <summary vsli:raw="Commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.">認可尚未排清的任何剩餘 JSON 文字，並釋出目前執行個體使用的所有資源。</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.DisposeAsync">
      <summary vsli:raw="Asynchronously commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.">以非同步方式認可尚未排清的任何剩餘 JSON 文字，並釋出目前執行個體使用的所有資源。</summary>
      <returns vsli:raw="A task representing the asynchronous dispose operation.">代表非同步處置作業的工作。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Flush">
      <summary vsli:raw="Commits the JSON text written so far, which makes it visible to the output destination.">認可到目前為止所寫入的 JSON 文字，以便向輸出目的地顯示。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">這個執行個體已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously commits the JSON text written so far, which makes it visible to the output destination.">以非同步方式認可到目前為止所寫入的 JSON 文字，以便向輸出目的地顯示。</summary>
      <param name="cancellationToken" vsli:raw="The token to monitor for cancellation requests. The default value is &lt;see cref=&quot;P:System.Threading.CancellationToken.None&quot; /&gt;.">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns vsli:raw="A task representing the asynchronous flush operation.">表示非同步排清作業的工作。</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">這個執行個體已經過處置。</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.Options">
      <summary vsli:raw="Gets the custom behavior when writing JSON using this instance, which indicates whether to format the output while writing, whether to skip structural JSON validation, and which characters to escape.">取得使用此執行個體寫入 JSON 時的自訂行為，指出是否要在寫入時將輸出格式化，以及是否要略過結構化 JSON 驗證。</summary>
      <returns vsli:raw="The custom behavior of this instance of the writer for formatting, validating, and escaping.">物件, 定義這個實例用於格式化和驗證的行為。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused.">重設此執行個體的內部狀態，使其能重複使用。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">這個執行個體已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused with a new instance of &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt;.">重設此執行個體的內部狀態，使其能重複用於 <see cref="T:System.Buffers.IBufferWriter`1" /> 的新執行個體。</summary>
      <param name="bufferWriter" vsli:raw="The destination for writing JSON text.">寫入 JSON 文字的目的地。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;bufferWriter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="bufferWriter" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">這個執行個體已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused with a new instance of &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt;.">重設此執行個體的內部狀態，使其能重複用於 <see cref="T:System.IO.Stream" /> 的新執行個體。</summary>
      <param name="utf8Json" vsli:raw="The destination for writing JSON text.">寫入 JSON 文字的目的地。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">這個執行個體已經過處置。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">寫入屬性名稱和原始位元組值 (以 Base64 編碼 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded name of the property to write.">要寫入的屬性 UTF-8 編碼名稱。</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">要以 Base64 編碼文字形式寫入的二進位資料。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">寫入屬性名稱和原始位元組值 (以 Base64 編碼 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 的 JSON 物件屬性名稱。</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">要以 Base64 編碼文字形式寫入的二進位資料。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">寫入屬性名稱和原始位元組值 (以 Base64 編碼 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 的 JSON 物件屬性名稱。</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">要以 Base64 編碼文字形式寫入的二進位資料。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the pre-encoded property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">寫入預先編碼的屬性名稱和原始位元組值 (以 Base 64 編碼的 JSON 字串形式)，成為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The JSON-encoded name of the property to write.">要寫入的屬性 JSON 編碼名稱。</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">要以 Base64 編碼文字形式寫入的二進位資料。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the raw bytes value as a Base64 encoded JSON string as an element of a JSON array.">以 Base64 編碼 JSON 字串將原始位元組值寫入為 JSON 陣列元素。</summary>
      <param name="bytes" vsli:raw="The binary data to be written as a Base64 encoded JSON string element of a JSON array.">要以 Base64 編碼 JSON 字串形式寫入為 JSON 陣列元素的二進位資料。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">指定的值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為唯讀位元組範圍) 和 <see cref="T:System.Boolean" /> 值 (以 JSON 常值 true 或 false)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">要以 JSON 常值 true 或 false 寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為唯讀字元範圍) 和 <see cref="T:System.Boolean" /> 值 (以 JSON 常值 true 或 false)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">要以 JSON 常值 true 或 false 寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為字串) 和 <see cref="T:System.Boolean" /> 值 (以 JSON 常值 true 或 false)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">要以 JSON 常值 true 或 false 寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">寫入預先編碼的屬性名稱和 <see cref="T:System.Boolean" /> 值 (以 JSON 常值 true 或 false)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">要以 JSON 常值 true 或 false 寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as an element of a JSON array.">寫入 <see cref="T:System.Boolean" /> 值 (以 JSON 常值 true 或 false)，作為 JSON 陣列的元素。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as an element of a JSON array.">要以 JSON 常值 true 或 false 寫入作為 JSON 陣列元素的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 text value as a JSON comment.">寫入 UTF-8 文字值作為 JSON 註解。</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">要寫入作為 /../ 內 JSON 註解的 UTF-8 編碼值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;utf8Value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">指定的值太大。
-或-
<paramref name="utf8Value" /> 包含註解分隔符號 (亦即 */)。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 text value as a JSON comment.">寫入 UTF-16 文字值作為 JSON 註解。</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">要寫入作為 /../ 內 UTF-8 轉碼 JSON 註解的 UTF-16 編碼值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">指定的值太大。
-或-
<paramref name="value" /> 包含註解分隔符號 (亦即 */)。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)">
      <summary vsli:raw="Writes a string text value as a JSON comment.">寫入字串文字值作為 JSON 註解。</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">要寫入作為 /../ 內 UTF-8 轉碼 JSON 註解的 UTF-16 編碼值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">指定的值太大。
-或-
<paramref name="value" /> 包含註解分隔符號 (亦即 */)。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;value&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndArray">
      <summary vsli:raw="Writes the end of a JSON array.">寫入 JSON 陣列的結尾。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndObject">
      <summary vsli:raw="Writes the end of a JSON object.">寫入 JSON 物件的結尾。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and the JSON literal null as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為唯讀位元組範圍) 和 JSON 常值 null，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a property name specified as a read-only character span and the JSON literal null as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為唯讀字元範圍) 和 JSON 常值 null，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)">
      <summary vsli:raw="Writes a property name specified as a string and the JSON literal null as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為字串) 和 JSON 常值 null，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name and the JSON literal null as part of a name/value pair of a JSON object.">寫入預先編碼的屬性名稱和 JSON 常值 null，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNullValue">
      <summary vsli:raw="Writes the JSON literal null as an element of a JSON array.">寫入 JSON 常值 null，作為 JSON 陣列的元素。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為唯讀位元組範圍) 和 <see cref="T:System.Decimal" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為唯讀位元組範圍) 和 <see cref="T:System.Double" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為唯讀位元組範圍) 和 <see cref="T:System.Int32" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為唯讀位元組範圍) 和 <see cref="T:System.Int64" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為唯讀位元組範圍) 和 <see cref="T:System.Single" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為唯讀位元組範圍) 和 <see cref="T:System.UInt32" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為唯讀位元組範圍) 和 <see cref="T:System.UInt64" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為唯讀字元範圍) 和 <see cref="T:System.Decimal" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為唯讀字元範圍) 和 <see cref="T:System.Double" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為唯讀字元範圍) 和 <see cref="T:System.Int32" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為唯讀字元範圍) 和 <see cref="T:System.Int64" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為唯讀字元範圍) 和 <see cref="T:System.Single" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為唯讀字元範圍) 和 <see cref="T:System.UInt32" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為唯讀字元範圍) 和 <see cref="T:System.UInt64" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為字串) 和 <see cref="T:System.Decimal" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為字串) 和 <see cref="T:System.Double" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)">
      <summary vsli:raw="Writes a property name specified as a string and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為字串) 和 <see cref="T:System.Int32" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)">
      <summary vsli:raw="Writes a property name specified as a string and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為字串) 和 <see cref="T:System.Int64" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為字串) 和 <see cref="T:System.Single" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為字串) 和 <see cref="T:System.UInt32" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為字串) 和 <see cref="T:System.UInt64" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">寫入預先編碼的屬性名稱和 <see cref="T:System.Decimal" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">寫入預先編碼的屬性名稱和 <see cref="T:System.Double" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">寫入預先編碼的屬性名稱和 <see cref="T:System.Int32" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">寫入預先編碼的屬性名稱和 <see cref="T:System.Int64" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">寫入預先編碼的屬性名稱和 <see cref="T:System.Single" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">寫入預先編碼的屬性名稱和 <see cref="T:System.UInt32" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">寫入預先編碼的屬性名稱和 <see cref="T:System.UInt64" /> 值 (以 JSON 數字)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">要以 JSON 數字寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as an element of a JSON array.">寫入 <see cref="T:System.Decimal" /> 值 (以 JSON 數字)，作為 JSON 陣列的項目。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">要以 JSON 數字寫入作為 JSON 陣列元素的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as an element of a JSON array.">寫入 <see cref="T:System.Double" /> 值 (以 JSON 數字)，作為 JSON 陣列的項目。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">要以 JSON 數字寫入作為 JSON 陣列元素的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as an element of a JSON array.">寫入 <see cref="T:System.Int32" /> 值 (以 JSON 數字)，作為 JSON 陣列的項目。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">要以 JSON 數字寫入作為 JSON 陣列元素的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as an element of a JSON array.">寫入 <see cref="T:System.Int64" /> 值 (以 JSON 數字)，作為 JSON 陣列的項目。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">要以 JSON 數字寫入作為 JSON 陣列元素的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as an element of a JSON array.">寫入 <see cref="T:System.Single" /> 值 (以 JSON 數字)，作為 JSON 陣列的項目。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">要以 JSON 數字寫入作為 JSON 陣列元素的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as an element of a JSON array.">寫入 <see cref="T:System.UInt32" /> 值 (以 JSON 數字)，作為 JSON 陣列的項目。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">要以 JSON 數字寫入作為 JSON 陣列元素的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as an element of a JSON array.">寫入 <see cref="T:System.UInt64" /> 值 (以 JSON 數字)，作為 JSON 陣列的項目。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">要以 JSON 數字寫入作為 JSON 陣列元素的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the UTF-8 property name (as a JSON string) as the first part of a name/value pair of a JSON object.">寫入 UTF-8 屬性名稱 (以 JSON 字串形式)，作為 JSON 物件名稱/值組的第一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">已啟用驗證，且此寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.">寫入屬性名稱 (以 JSON 字串形式)，作為 JSON 物件名稱/值組的第一部分。</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 的 JSON 物件屬性名稱。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">已啟用驗證，且此寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)">
      <summary vsli:raw="Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.">寫入屬性名稱 (以 JSON 字串形式)，作為 JSON 物件名稱/值組的第一部分。</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 的 JSON 物件屬性名稱。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">已啟用驗證，且此寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name (as a JSON string) as the first part of a name/value pair of a JSON object.">寫入預先編碼的屬性名稱 (以 JSON 字串形式)，作為 JSON 物件名稱/值組的第一部分。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">已啟用驗證，且此寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray">
      <summary vsli:raw="Writes the beginning of a JSON array.">寫入 JSON 陣列的開頭。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;&#xA;Validation is enabled, and this write operation would produce invalid JSON.">JSON 的深度超過最大深度 1000。
-或-
已啟用驗證，且此寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a read-only span of bytes as the key.">以屬性名稱 (指定為唯讀位元組範圍) 作為索引鍵，寫入 JSON 陣列的開頭。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON array to be written.">要寫入之 JSON 陣列的 UTF-8 編碼屬性名稱。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">JSON 的深度超過最大深度 1000。
-或-
已啟用驗證，且此寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a read-only character span as the key.">以屬性名稱 (指定為唯讀字元範圍) 作為索引鍵，寫入 JSON 陣列的開頭。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 陣列的 UTF-16 編碼屬性名稱。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">JSON 的深度超過最大深度 1000。
-或-
已啟用驗證，且此寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a string as the key.">以屬性名稱 (指定為字串) 作為索引鍵，寫入 JSON 陣列的開頭。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 陣列的 UTF-16 編碼屬性名稱。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">JSON 的深度超過最大深度 1000。
-或-
已啟用驗證，且此寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the beginning of a JSON array with a pre-encoded property name as the key.">以預先編碼的屬性名稱作為索引鍵，寫入 JSON 陣列的開頭。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON array to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 陣列的 JSON 編碼屬性名稱。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON has exceeded the maximum depth of 1,000.&#xA;    &#xA;-or-&#xA;&#xA;Validation is enabled, and this method would result in writing invalid JSON.">JSON 的深度已超過最大深度 1000。
-或-
已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject">
      <summary vsli:raw="Writes the beginning of a JSON object.">寫入 JSON 物件的開頭。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;&#xA;Validation is enabled, and the operation would result in writing invalid JSON.">JSON 的深度超過最大深度 1000。
-或-
已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a read-only span of bytes as the key.">以屬性名稱 (指定為唯讀位元組範圍) 作為索引鍵，寫入 JSON 物件的開頭。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">JSON 的深度超過最大深度 1000。 
-或-
已啟用驗證，且此寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a read-only character span as the key.">以屬性名稱 (指定為唯讀字元範圍) 作為索引鍵，寫入 JSON 物件的開頭。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">JSON 的深度超過最大深度 1000。 
-或-
已啟用驗證，且此寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a string as the key.">以屬性名稱 (指定為字串) 作為索引鍵，寫入 JSON 物件的開頭。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">JSON 的深度超過最大深度 1000。 
-或-
已啟用驗證，且此寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the beginning of a JSON object with a pre-encoded property name as the key.">以預先編碼的屬性名稱作為索引鍵，寫入 JSON 物件的開頭。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON has exceeded the maximum depth of 1,000.&#xA;          &#xA;-or-&#xA;&#xA;Validation is enabled, and this method would result in writing invalid JSON.">JSON 的深度已超過最大深度 1000。
-或-
已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">寫入 UTF-8 屬性名稱和 <see cref="T:System.DateTime" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">要以 JSON 字串寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">寫入 UTF-8 屬性名稱和 <see cref="T:System.DateTimeOffset" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">要以 JSON 字串寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">寫入 UTF-8 屬性名稱和 <see cref="T:System.Guid" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">要以 JSON 字串寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">寫入 UTF-8 屬性名稱和 UTF-8 文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">要以 JSON 字串寫入作為名稱/值組一部分的 UTF-8 編碼值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定的屬性名稱或值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">寫入 UTF-8 屬性名稱和 UTF-16 文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的 UTF-16 編碼值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定的屬性名稱或值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)">
      <summary vsli:raw="Writes a UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">寫入 UTF-8 屬性名稱和字串文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的 UTF-16 編碼值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定的屬性名稱或值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the UTF-8 property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">寫入 UTF-8 屬性名稱和預先編碼的值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">要寫入之 JSON 物件的 UTF-8 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的 JSON 編碼值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">已啟用驗證，且此方法會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為唯讀字元範圍) 和 <see cref="T:System.DateTime" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">要以 JSON 字串寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為唯讀字元範圍) 和 <see cref="T:System.DateTimeOffset" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">要以 JSON 字串寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為唯讀字元範圍) 和 <see cref="T:System.Guid" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">要以 JSON 字串寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">寫入 UTF-16 屬性名稱和 UTF-8 文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">要以 JSON 字串寫入作為名稱/值組一部分的 UTF-8 編碼值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定的屬性名稱或值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">寫入 UTF-16 屬性名稱和 UTF-16 文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的 UTF-16 編碼值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定的屬性名稱或值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)">
      <summary vsli:raw="Writes a UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">寫入 UTF-16 屬性名稱和字串文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的 UTF-16 編碼值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定的屬性名稱或值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">寫入屬性名稱和預先編碼的值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 的 JSON 物件屬性名稱。</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的 JSON 編碼值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為字串) 和 <see cref="T:System.DateTime" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">要以 JSON 字串寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為字串) 和 <see cref="T:System.DateTimeOffset" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">要以 JSON 字串寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為字串) 和 <see cref="T:System.Guid" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">要以 JSON 字串寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a property name specified as a string and a UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為字串) 和 UTF-8 文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">要以 JSON 字串寫入作為名稱/值組一部分的 UTF-8 編碼值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定的屬性名稱或值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a property name specified as a string and a UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為字串) 和 UTF-16 文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的 UTF-16 編碼值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定的屬性名稱或值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)">
      <summary vsli:raw="Writes a property name specified as a string and a string text value (as a JSON string) as part of a name/value pair of a JSON object.">寫入屬性名稱 (指定為字串) 和字串文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 UTF-16 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的 UTF-16 編碼值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定的屬性名稱或值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">寫入屬性名稱和預先編碼的值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 的 JSON 物件屬性名稱。</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的 JSON 編碼值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定的屬性名稱太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">寫入預先編碼的屬性名稱和 <see cref="T:System.DateTime" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">要以 JSON 字串寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">寫入預先編碼的屬性名稱和 <see cref="T:System.DateTimeOffset" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">要以 JSON 字串寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">寫入預先編碼的屬性名稱和 <see cref="T:System.Guid" /> 值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">要以 JSON 字串寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the pre-encoded property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">寫入預先編碼的屬性名稱和 UTF-8 文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">要以 JSON 字串寫入作為名稱/值組一部分的 UTF-8 編碼值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">指定的值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the pre-encoded property name and text value (as a JSON string) as part of a name/value pair of a JSON object.">寫入預先編碼的屬性名稱和文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">指定的值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)">
      <summary vsli:raw="Writes the pre-encoded property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">寫入預先編碼的屬性名稱和字串文字值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">指定的值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">寫入預先編碼的屬性名稱和預先編碼的值 (以 JSON 字串)，作為 JSON 物件名稱/值組的一部分。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">要轉碼並寫入為 UTF-8 之 JSON 物件的 JSON 編碼屬性名稱。</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">要以 UTF-8 轉碼 JSON 字串寫入作為名稱/值組一部分的 JSON 編碼值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as an element of a JSON array.">寫入 <see cref="T:System.DateTime" /> 值 (以 JSON 字串)，作為 JSON 陣列的項目。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">要以 JSON 字串寫入作為 JSON 陣列元素的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as an element of a JSON array.">寫入 <see cref="T:System.DateTimeOffset" /> 值 (以 JSON 字串)，作為 JSON 陣列的項目。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">要以 JSON 字串寫入作為 JSON 陣列元素的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as an element of a JSON array.">寫入 <see cref="T:System.Guid" /> 值 (以 JSON 字串)，作為 JSON 陣列的項目。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">要以 JSON 字串寫入作為 JSON 陣列元素的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">已啟用驗證，且作業會導致寫入無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 text value (as a JSON string) as an element of a JSON array.">寫入 UTF-8 文字值 (以 JSON 字串)，作為 JSON 陣列的項目。</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string element of a JSON array.">要以 JSON 字串寫入作為 JSON 陣列元素的 UTF-8 編碼值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">指定的值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 text value (as a JSON string) as an element of a JSON array.">寫入 UTF-16 文字值 (以 JSON 字串)，作為 JSON 陣列的項目。</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">要以UTF-8 轉碼 JSON 字串寫入作為 JSON 陣列元素的 UTF-16 編碼值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">指定的值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)">
      <summary vsli:raw="Writes a string text value (as a JSON string) as an element of a JSON array.">寫入字串文字值 (以 JSON 字串)，作為 JSON 陣列的項目。</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">要以UTF-8 轉碼 JSON 字串寫入作為 JSON 陣列元素的 UTF-16 編碼值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">指定的值太大。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded text value (as a JSON string) as an element of a JSON array.">寫入預先編碼的文字值 (以 JSON 字串)，作為 JSON 陣列的元素。</summary>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">要以 UTF-8 轉碼 JSON 字串寫入作為 JSON 陣列元素的 JSON 編碼值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">已啟用驗證，且寫入作業會產生無效的 JSON。</exception>
    </member>
  </members>
</doc>
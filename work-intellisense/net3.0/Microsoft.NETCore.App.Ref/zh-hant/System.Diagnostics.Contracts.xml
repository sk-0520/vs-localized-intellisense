<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Diagnostics.Contracts</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.Contracts.Contract">
      <summary vsli:raw="Contains static methods for representing program contracts such as preconditions, postconditions, and object invariants.">包含表示程式合約的靜態方法，例如前置條件、後置條件及物件非變異。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
      <summary vsli:raw="Checks for a condition; if the condition is &lt;see langword=&quot;false&quot; /&gt;, follows the escalation policy set for the analyzer.">檢查條件，且如果條件為 <see langword="false" />，則遵循已為分析器設定的擴大原則。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">要測試的條件運算式。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
      <summary vsli:raw="Checks for a condition; if the condition is &lt;see langword=&quot;false&quot; /&gt;, follows the escalation policy set by the analyzer and displays the specified message.">檢查條件。如果條件為 <see langword="false" />，則遵循分析器所設定的擴大原則，並顯示指定的訊息。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">要測試的條件運算式。</param>
      <param name="userMessage" vsli:raw="A message to display if the condition is not met.">當條件不符合時所顯示的訊息。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)">
      <summary vsli:raw="Instructs code analysis tools to assume that the specified condition is &lt;see langword=&quot;true&quot; /&gt;, even if it cannot be statically proven to always be &lt;see langword=&quot;true&quot; /&gt;.">指示程式碼分析工具假設指定的條件為 <see langword="true" />，即使該條件無法以靜態方式證明永遠是 <see langword="true" /> 亦然。</summary>
      <param name="condition" vsli:raw="The conditional expression to assume &lt;see langword=&quot;true&quot; /&gt;.">要假設 <see langword="true" /> 的條件運算式。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
      <summary vsli:raw="Instructs code analysis tools to assume that a condition is &lt;see langword=&quot;true&quot; /&gt;, even if it cannot be statically proven to always be &lt;see langword=&quot;true&quot; /&gt;, and displays a message if the assumption fails.">指示程式碼分析工具假設條件為 <see langword="true" />，即使該條件無法以靜態方式證明永遠是 <see langword="true" /> 亦然，同時在假設失敗時顯示訊息。</summary>
      <param name="condition" vsli:raw="The conditional expression to assume &lt;see langword=&quot;true&quot; /&gt;.">要假設 <see langword="true" /> 的條件運算式。</param>
      <param name="userMessage" vsli:raw="The message to post if the assumption fails.">要在假設失敗時張貼的訊息。</param>
    </member>
    <member name="E:System.Diagnostics.Contracts.Contract.ContractFailed">
      <summary vsli:raw="Occurs when a contract fails.">發生於合約失敗時。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
      <summary vsli:raw="Marks the end of the contract section when a method's contracts contain only preconditions in the &lt;see langword=&quot;if&quot; /&gt;-&lt;see langword=&quot;then&quot; /&gt;-&lt;see langword=&quot;throw&quot; /&gt; form.">當方法的合約僅包含 <see langword="if" />-<see langword="then" />-<see langword="throw" /> 形式的前置條件時，標記合約區段的結尾。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
      <summary vsli:raw="Specifies a postcondition contract for the enclosing method or property.">指定封入方法或屬性的後置條件合約。</summary>
      <param name="condition" vsli:raw="The conditional expression to test. The expression may include &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)&quot; /&gt;, &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)&quot; /&gt;, and &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.Result``1&quot; /&gt; values.">要測試的條件運算式。 運算式可以包含 <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" />、<see cref="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)" /> 及 <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" /> 值。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a postcondition contract for a provided exit condition and a message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">指定提供之結束條件的後置條件合約，以及在條件為 <see langword="false" /> 時所要顯示的訊息。</summary>
      <param name="condition" vsli:raw="The conditional expression to test. The expression may include &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)&quot; /&gt; and &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.Result``1&quot; /&gt; values.">要測試的條件運算式。 運算式可以包含 <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" /> 及 <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" /> 值。</param>
      <param name="userMessage" vsli:raw="The message to display if the expression is not &lt;see langword=&quot;true&quot; /&gt;.">當運算式不是 <see langword="true" /> 時所顯示的訊息。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
      <summary vsli:raw="Specifies a postcondition contract for the enclosing method or property, based on the provided exception and condition.">根據所提供的例外狀況和條件，針對封入的方法或屬性指定後置條件合約。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">要測試的條件運算式。</param>
      <typeparam name="TException" vsli:raw="The type of exception that invokes the postcondition check.">例外狀況型別，其會叫用後置條件檢查。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a postcondition contract and a message to display if the condition is &lt;see langword=&quot;false&quot; /&gt; for the enclosing method or property, based on the provided exception and condition.">針對封入方法或屬性來指定後置條件合約，和當條件是 <see langword="false" /> 時，根據所提供之例外狀況和條件來顯示的訊息。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">要測試的條件運算式。</param>
      <param name="userMessage" vsli:raw="The message to display if the expression is &lt;see langword=&quot;false&quot; /&gt;.">當運算式是 <see langword="false" /> 時所顯示的訊息。</param>
      <typeparam name="TException" vsli:raw="The type of exception that invokes the postcondition check.">例外狀況型別，其會叫用後置條件檢查。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary vsli:raw="Determines whether a specified test is true for any integer within a range of integers.">判斷整數範圍內是否有任何整數使指定的測試成立。</summary>
      <param name="fromInclusive" vsli:raw="The first integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">要傳遞至 <paramref name="predicate" /> 的第一個整數。</param>
      <param name="toExclusive" vsli:raw="One more than the last integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">要傳遞至 <paramref name="predicate" /> 的最後一個整數加一。</param>
      <param name="predicate" vsli:raw="The function to evaluate for any value of the integer in the specified range.">要評估指定範圍內任何整數值的函式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for any integer starting from &lt;paramref name=&quot;fromInclusive&quot; /&gt; to &lt;paramref name=&quot;toExclusive&quot; /&gt; - 1.">如果 <paramref name="predicate" /> 為從 <paramref name="fromInclusive" /> 開始到 <paramref name="toExclusive" /> - 1 的任何整數傳回 <see langword="true" />，則為 <see langword="true" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="predicate" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;toExclusive&quot; /&gt; is less than &lt;paramref name=&quot;fromInclusive&quot; /&gt;.">
        <paramref name="toExclusive" /> 小於 <paramref name="fromInclusive" />。</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary vsli:raw="Determines whether an element within a collection of elements exists within a function.">判斷項目集合內的項目是否出現在函式中。</summary>
      <param name="collection" vsli:raw="The collection from which elements of type &lt;c&gt;T&lt;/c&gt; will be drawn to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">將從中取出 <c>T</c> 類型的項目以傳遞至 <paramref name="predicate" /> 的集合。</param>
      <param name="predicate" vsli:raw="The function to evaluate for an element in &lt;paramref name=&quot;collection&quot; /&gt;.">要評估 <paramref name="collection" /> 中項目的函式。</param>
      <typeparam name="T" vsli:raw="The type that is contained in &lt;paramref name=&quot;collection&quot; /&gt;.">包含在 <paramref name="collection" /> 中的型別。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if and only if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for any element of type &lt;paramref name=&quot;T&quot; /&gt; in &lt;paramref name=&quot;collection&quot; /&gt;.">只有在 <paramref name="predicate" /> 為 <paramref name="T" /> 中任何 <paramref name="collection" /> 型別之項目傳回 <see langword="true" /> 時，才為 <see langword="true" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> 或 <paramref name="predicate" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary vsli:raw="Determines whether a particular condition is valid for all integers in a specified range.">判斷特定條件對於指定之範圍內的所有整數是否有效。</summary>
      <param name="fromInclusive" vsli:raw="The first integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">要傳遞至 <paramref name="predicate" /> 的第一個整數。</param>
      <param name="toExclusive" vsli:raw="One more than the last integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">要傳遞至 <paramref name="predicate" /> 的最後一個整數加一。</param>
      <param name="predicate" vsli:raw="The function to evaluate for the existence of the integers in the specified range.">要評估指定範圍中整數是否存在的函式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for all integers starting from &lt;paramref name=&quot;fromInclusive&quot; /&gt; to &lt;paramref name=&quot;toExclusive&quot; /&gt; - 1.">如果 <paramref name="predicate" /> 為從 <paramref name="fromInclusive" /> 開始到 <paramref name="toExclusive" /> - 1 的所有整數傳回 <see langword="true" />，則為 <see langword="true" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="predicate" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;toExclusive&quot; /&gt; is less than &lt;paramref name=&quot;fromInclusive&quot; /&gt;.">
        <paramref name="toExclusive" /> 小於 <paramref name="fromInclusive" />。</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary vsli:raw="Determines whether all the elements in a collection exist within a function.">判斷集合內的所有項目是否都出現在函式中。</summary>
      <param name="collection" vsli:raw="The collection from which elements of type &lt;c&gt;T&lt;/c&gt; will be drawn to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">將從中取出 <c>T</c> 類型的項目以傳遞至 <paramref name="predicate" /> 的集合。</param>
      <param name="predicate" vsli:raw="The function to evaluate for the existence of all the elements in &lt;paramref name=&quot;collection&quot; /&gt;.">要評估 <paramref name="collection" /> 中所有項目是否存在的函式。</param>
      <typeparam name="T" vsli:raw="The type that is contained in &lt;paramref name=&quot;collection&quot; /&gt;.">包含在 <paramref name="collection" /> 中的型別。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if and only if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for all elements of type &lt;paramref name=&quot;T&quot; /&gt; in &lt;paramref name=&quot;collection&quot; /&gt;.">只有在 <paramref name="predicate" /> 為 <paramref name="T" /> 中所有 <paramref name="collection" /> 型別的項目傳回 <see langword="true" /> 時，才為 <see langword="true" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> 或 <paramref name="predicate" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
      <summary vsli:raw="Specifies an invariant contract for the enclosing method or property.">指定封入方法或屬性的非變異合約。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">要測試的條件運算式。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
      <summary vsli:raw="Specifies an invariant contract for the enclosing method or property, and displays a message if the condition for the contract fails.">指定封入方法或屬性的非變異合約，並在合約的條件失敗時顯示訊息。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">要測試的條件運算式。</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">如果條件為 <see langword="false" /> 就會顯示訊息。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
      <summary vsli:raw="Represents values as they were at the start of a method or property.">表示其在方法或屬性開始時的值。</summary>
      <param name="value" vsli:raw="The value to represent (field or parameter).">要表示的值 (欄位或參數)。</param>
      <typeparam name="T" vsli:raw="The type of value.">值的型別。</typeparam>
      <returns vsli:raw="The value of the parameter or field at the start of a method or property.">在方法或屬性開始時之欄位或參數的值。</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property.">指定封入方法或屬性的前置條件合約。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">要測試的條件運算式。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and displays a message if the condition for the contract fails.">指定封入方法或屬性的前置條件合約，並在合約的條件失敗時顯示訊息。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">要測試的條件運算式。</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">如果條件為 <see langword="false" /> 就會顯示訊息。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and throws an exception if the condition for the contract fails.">指定封入方法或屬性的前置條件合約，並在合約的條件失敗時擲回例外狀況。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">要測試的條件運算式。</param>
      <typeparam name="TException" vsli:raw="The exception to throw if the condition is &lt;see langword=&quot;false&quot; /&gt;.">當條件為 <see langword="false" /> 時所要擲回的例外狀況。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and throws an exception with the provided message if the condition for the contract fails.">指定封入方法或屬性的前置條件合約，並在合約的條件失敗時擲回包含所提供訊息的例外狀況。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">要測試的條件運算式。</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">如果條件為 <see langword="false" /> 就會顯示訊息。</param>
      <typeparam name="TException" vsli:raw="The exception to throw if the condition is &lt;see langword=&quot;false&quot; /&gt;.">當條件為 <see langword="false" /> 時所要擲回的例外狀況。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Result``1">
      <summary vsli:raw="Represents the return value of a method or property.">表示方法或屬性的傳回值。</summary>
      <typeparam name="T" vsli:raw="Type of return value of the enclosing method or property.">封入方法或屬性的傳回值型別。</typeparam>
      <returns vsli:raw="Return value of the enclosing method or property.">封入方法或屬性的傳回值。</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
      <summary vsli:raw="Represents the final (output) value of an &lt;see langword=&quot;out&quot; /&gt; parameter when returning from a method.">表示從方法傳回時的最後 (輸出) <see langword="out" /> 參數值。</summary>
      <param name="value" vsli:raw="The &lt;see langword=&quot;out&quot; /&gt; parameter.">
        <see langword="out" /> 參數。</param>
      <typeparam name="T" vsli:raw="The type of the &lt;see langword=&quot;out&quot; /&gt; parameter.">
        <see langword="out" /> 參數的類型。</typeparam>
      <returns vsli:raw="The output value of the &lt;see langword=&quot;out&quot; /&gt; parameter.">
        <see langword="out" /> 參數的輸出值。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute">
      <summary vsli:raw="Defines abbreviations that you can use in place of the full contract syntax.">定義可以取代完整合約語法的縮寫。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractAbbreviatorAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
      <summary vsli:raw="Enables the factoring of legacy &lt;see langword=&quot;if-then-throw&quot; /&gt; code into separate methods for reuse, and provides full control over thrown exceptions and arguments.">可讓您將舊版 <see langword="if-then-throw" /> 程式碼分成不同的方法以供重複使用，並讓您完整控制擲回的例外狀況和引數。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassAttribute">
      <summary vsli:raw="Specifies that a separate type contains the code contracts for this type.">指定包含此類型程式碼合約的個別類型。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractClassAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Diagnostics.Contracts.ContractClassAttribute" /> 類別的新執行個體。</summary>
      <param name="typeContainingContracts" vsli:raw="The type that contains the code contracts for this type.">型別，包含這個型別的程式碼合約。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassAttribute.TypeContainingContracts">
      <summary vsli:raw="Gets the type that contains the code contracts for this type.">取得型別，此型別包含這個型別的程式碼合約。</summary>
      <returns vsli:raw="The type that contains the code contracts for this type.">型別，包含這個型別的程式碼合約。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassForAttribute">
      <summary vsli:raw="Specifies that a class is a contract for a type.">指定類別為類型的合約。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassForAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractClassForAttribute&quot; /&gt; class, specifying the type the current class is a contract for.">初始化 <see cref="T:System.Diagnostics.Contracts.ContractClassForAttribute" /> 類別的新執行個體，指定目前類別為其合約的型別。</summary>
      <param name="typeContractsAreFor" vsli:raw="The type the current class is a contract for.">目前類別為其合約的型別。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassForAttribute.TypeContractsAreFor">
      <summary vsli:raw="Gets the type that this code contract applies to.">取得型別，即其中要套用此程式碼合約的型別。</summary>
      <returns vsli:raw="The type that this contract applies to.">其中要套用此程式碼合約的型別。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailedEventArgs">
      <summary vsli:raw="Provides methods and data for the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">提供 <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 事件的方法與資料。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.#ctor(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">提供 <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 事件的資料。</summary>
      <param name="failureKind" vsli:raw="One of the enumeration values that specifies the contract that failed.">一個列舉值，指定失敗的合約。</param>
      <param name="message" vsli:raw="The message for the event.">事件的訊息。</param>
      <param name="condition" vsli:raw="The condition for the event.">事件的條件。</param>
      <param name="originalException" vsli:raw="The exception that caused the event.">造成事件的例外狀況。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Condition">
      <summary vsli:raw="Gets the condition for the failure of the contract.">取得合約失敗的條件。</summary>
      <returns vsli:raw="The condition for the failure.">失敗的條件。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.FailureKind">
      <summary vsli:raw="Gets the type of contract that failed.">取得失敗的合約類型。</summary>
      <returns vsli:raw="One of the enumeration values that specifies the type of contract that failed.">一個列舉值，指定失敗之合約的型別。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled">
      <summary vsli:raw="Indicates whether the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event has been handled.">表示是否已處理 <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 事件。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event has been handled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已處理事件則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Message">
      <summary vsli:raw="Gets the message that describes the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">取得描述 <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 事件的訊息。</summary>
      <returns vsli:raw="The message that describes the event.">描述事件的訊息。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.OriginalException">
      <summary vsli:raw="Gets the original exception that caused the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">取得造成 <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 事件的原始例外狀況。</summary>
      <returns vsli:raw="The exception that caused the event.">造成事件的例外狀況。</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled">
      <summary vsli:raw="Sets the &lt;see cref=&quot;P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled&quot; /&gt; property to &lt;see langword=&quot;true&quot; /&gt;.">將 <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled" /> 屬性設定為 <see langword="true" />。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind">
      <summary vsli:raw="Sets the &lt;see cref=&quot;P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind&quot; /&gt; property to &lt;see langword=&quot;true&quot; /&gt;.">將 <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind" /> 屬性設定為 <see langword="true" />。</summary>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind">
      <summary vsli:raw="Indicates whether the code contract escalation policy should be applied.">指出是否應該套用程式碼合約擴大原則。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to apply the escalation policy; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示要套用擴大原則，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailureKind">
      <summary vsli:raw="Specifies the type of contract that failed.">指定失敗的合約類型。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assert">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Assert&quot; /&gt; contract failed.">
        <see cref="Overload:System.Diagnostics.Contracts.Contract.Assert" /> 合約失敗。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assume">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Assume&quot; /&gt; contract failed.">
        <see cref="Overload:System.Diagnostics.Contracts.Contract.Assume" /> 合約失敗。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Invariant">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Invariant&quot; /&gt; contract failed.">
        <see cref="Overload:System.Diagnostics.Contracts.Contract.Invariant" /> 合約失敗。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Postcondition">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Ensures&quot; /&gt; contract failed.">
        <see cref="Overload:System.Diagnostics.Contracts.Contract.Ensures" /> 合約失敗。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.PostconditionOnException">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.EnsuresOnThrow&quot; /&gt; contract failed.">
        <see cref="Overload:System.Diagnostics.Contracts.Contract.EnsuresOnThrow" /> 合約失敗。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Precondition">
      <summary vsli:raw="A &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Requires&quot; /&gt; contract failed.">
        <see cref="Overload:System.Diagnostics.Contracts.Contract.Requires" /> 合約失敗。</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute">
      <summary vsli:raw="Marks a method as being the invariant method for a class.">將方法標示為類別的非變異方法。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractInvariantMethodAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractOptionAttribute">
      <summary vsli:raw="Enables you to set contract and tool options at assembly, type, or method granularity.">可讓您以組件、型別或方法的資料粒度設定合約及工具選項。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractOptionAttribute&quot; /&gt; class by using the provided category, setting, and enable/disable value.">使用提供的分類、設定和啟用/停用值，初始化 <see cref="T:System.Diagnostics.Contracts.ContractOptionAttribute" /> 類別的新執行個體。</summary>
      <param name="category" vsli:raw="The category for the option to be set.">要設定其選項的分類。</param>
      <param name="setting" vsli:raw="The option setting.">選項設定。</param>
      <param name="enabled" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to enable the option; &lt;see langword=&quot;false&quot; /&gt; to disable the option.">
        <see langword="true" /> 表示要啟用選項，<see langword="false" /> 表示要停用選項。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractOptionAttribute&quot; /&gt; class by using the provided category, setting, and value.">使用提供的分類、設定和值，初始化 <see cref="T:System.Diagnostics.Contracts.ContractOptionAttribute" /> 類別的新執行個體。</summary>
      <param name="category" vsli:raw="The category of the option to be set.">要設定之選項的分類。</param>
      <param name="setting" vsli:raw="The option setting.">選項設定。</param>
      <param name="value" vsli:raw="The value for the setting.">設定的值。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Category">
      <summary vsli:raw="Gets the category of the option.">取得選項的分類。</summary>
      <returns vsli:raw="The category of the option.">選項的分類。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Enabled">
      <summary vsli:raw="Determines if an option is enabled.">判斷是否選項已啟用。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the option is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已啟用此選項，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Setting">
      <summary vsli:raw="Gets the setting for the option.">取得選項的設定。</summary>
      <returns vsli:raw="The setting for the option.">選項的設定值。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Value">
      <summary vsli:raw="Gets the value for the option.">取得選項的值。</summary>
      <returns vsli:raw="The value for the option.">選項的值。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute">
      <summary vsli:raw="Specifies that a field can be used in method contracts when the field has less visibility than the method.">指定當欄位的可視性比方法還低時，可在方法合約中使用的欄位。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute" /> 類別的新執行個體。</summary>
      <param name="name" vsli:raw="The property name to apply to the field.">要套用至欄位的屬性名稱。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.Name">
      <summary vsli:raw="Gets the property name to be applied to the field.">取得要套用至欄位的屬性名稱。</summary>
      <returns vsli:raw="The property name to be applied to the field.">要套用至欄位的屬性名稱。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute">
      <summary vsli:raw="Specifies that an assembly is a reference assembly that contains contracts.">指定組件為包含合約的參考組件。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute">
      <summary vsli:raw="Identifies a member that has no run-time behavior.">識別沒有任何執行階段行為的成員。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractVerificationAttribute">
      <summary vsli:raw="Instructs analysis tools to assume the correctness of an assembly, type, or member without performing static verification.">指示分析工具假設組件、類型或成員的正確性，而不執行靜態驗證。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractVerificationAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractVerificationAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Diagnostics.Contracts.ContractVerificationAttribute" /> 類別的新執行個體。</summary>
      <param name="value" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to require verification; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示需要驗證，否則為 <see langword="false" />。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractVerificationAttribute.Value">
      <summary vsli:raw="Gets the value that indicates whether to verify the contract of the target.">取得指出是否要驗證目標合約的值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if verification is required; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果需要驗證則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.PureAttribute">
      <summary vsli:raw="Indicates that a type or method is pure, that is, it does not make any visible state changes.">指出型別或方法是純正的，也就是它不會執行任何可見的狀態變更。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.PureAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.PureAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Diagnostics.Contracts.PureAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ContractHelper">
      <summary vsli:raw="Provides methods that the binary rewriter uses to handle contract failures.">提供二進位重寫器用來處理合約失敗的方法。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ContractHelper.RaiseContractFailedEvent(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary vsli:raw="Used by the binary rewriter to activate the default failure behavior.">由二進位重寫器用來啟動預設失敗行為。</summary>
      <param name="failureKind" vsli:raw="One of the enumeration values that specifies the type of failure.">其中一個列舉值，這個值指定失敗的類型。</param>
      <param name="userMessage" vsli:raw="Additional user information.">其他使用者資訊。</param>
      <param name="conditionText" vsli:raw="The description of the condition that caused the failure.">造成失敗的條件描述。</param>
      <param name="innerException" vsli:raw="The inner exception that caused the current exception.">造成目前例外狀況的內部例外狀況。</param>
      <returns vsli:raw="A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) if the event was handled and should not trigger a failure; otherwise, returns the localized failure message.">如果已處理該事件且應該不會觸發失敗，則為 Null 參考 (在 Visual Basic 中的 <see langword="Nothing" />)，否則會傳回當地語系化的失敗訊息。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;failureKind&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractFailureKind&quot; /&gt; value.">
        <paramref name="failureKind" /> 不是有效的 <see cref="T:System.Diagnostics.Contracts.ContractFailureKind" /> 值。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ContractHelper.TriggerFailure(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.String,System.Exception)">
      <summary vsli:raw="Triggers the default failure behavior.">觸發預設的失敗行為。</summary>
      <param name="kind" vsli:raw="One of the enumeration values that specifies the type of failure.">其中一個列舉值，這個值指定失敗的類型。</param>
      <param name="displayMessage" vsli:raw="The message to display.">要顯示的訊息。</param>
      <param name="userMessage" vsli:raw="Additional user information.">其他使用者資訊。</param>
      <param name="conditionText" vsli:raw="The description of the condition that caused the failure.">造成失敗的條件描述。</param>
      <param name="innerException" vsli:raw="The inner exception that caused the current exception.">造成目前例外狀況的內部例外狀況。</param>
    </member>
  </members>
</doc>
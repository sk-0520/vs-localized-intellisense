<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Memory</name>
  </assembly>
  <members>
    <member name="T:System.Buffers.ArrayBufferWriter`1">
      <summary vsli:raw="Represents a heap-based, array-backed output sink into which &lt;typeparamref name=&quot;T&quot; /&gt; data can be written.">代表堆積型的陣列支援輸出接收， <typeparam name="T" /> 可以寫入資料。</summary>
      <typeparam name="T" vsli:raw="The type of the items in this &lt;see cref=&quot;T:System.Buffers.ArrayBufferWriter`1&quot; /&gt; instance.">這個<see cref="T:System.Buffers.ArrayBufferWriter`1" />實例中的專案類型。</typeparam>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.#ctor">
      <summary vsli:raw="Creates an instance of an &lt;see cref=&quot;T:System.Buffers.ArrayBufferWriter`1&quot; /&gt; to which data can be written, with the default initial capacity.">建立可寫入資料的 <see cref="T:System.Buffers.ArrayBufferWriter`1" /> 執行個體，具有預設初始容量。</summary>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.#ctor(System.Int32)">
      <summary vsli:raw="Creates an instance of an &lt;see cref=&quot;T:System.Buffers.ArrayBufferWriter`1&quot; /&gt; to which data can be written, with a specified initial capacity.">建立可寫入資料的 <see cref="T:System.Buffers.ArrayBufferWriter`1" /> 執行個體，具有指定的初始容量。</summary>
      <param name="initialCapacity" vsli:raw="The minimum capacity with which to initialize the underlying buffer.">用來初始化基礎緩衝區的最小容量。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;initialCapacity&quot; /&gt; is less than or equal to 0.">
        <paramref name="initialCapacity" /> 小於或等於 0。</exception>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.Advance(System.Int32)">
      <summary vsli:raw="Notifies the &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt; that &lt;paramref name=&quot;count&quot; /&gt; items were written to the output &lt;see cref=&quot;T:System.Span`1&quot; /&gt;/&lt;see cref=&quot;T:System.Memory`1&quot; /&gt;.">通知 <see cref="T:System.Buffers.IBufferWriter`1" />，<paramref name="count" /> 項目已寫入輸出 <see cref="T:System.Span`1" />/<see cref="T:System.Memory`1" /></summary>
      <param name="count" vsli:raw="The number of items written.">寫入的項目數。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;count&quot; /&gt; is negative.">
        <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The method call attempts to advance past the end of the underlying buffer.">此方法呼叫會嘗試前進超過基礎緩衝區結尾。</exception>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.Capacity">
      <summary vsli:raw="Gets the total amount of space within the underlying buffer.">取得基礎緩衝區內的空間總量。</summary>
      <returns vsli:raw="The total capacity of the underlying buffer.">基礎緩衝區的總容量。</returns>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.Clear">
      <summary vsli:raw="Clears the data written to the underlying buffer.">清除寫入基礎緩衝區的資料。</summary>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.FreeCapacity">
      <summary vsli:raw="Gets the amount of available space that can be written to without forcing the underlying buffer to grow.">取得可以寫入的可用空間量，而不強制基礎緩衝區成長。</summary>
      <returns vsli:raw="The space available for writing without forcing the underlying buffer to grow.">可以寫入的空間, 而不會強制基礎緩衝區成長。</returns>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.GetMemory(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; to write to that is at least the length specified by &lt;paramref name=&quot;sizeHint&quot; /&gt;.">傳回要寫入的 <see cref="T:System.Memory`1" />，至少為 <paramref name="sizeHint" /> 指定的長度。</summary>
      <param name="sizeHint" vsli:raw="The minimum requested length of the &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;.">
        <see cref="T:System.Memory`1" /> 長度的要求下限。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; whose length is at least &lt;paramref name=&quot;sizeHint&quot; /&gt;.  If &lt;paramref name=&quot;sizeHint&quot; /&gt; is not provided or is equal to 0, some non-empty buffer is returned.">長度至少為 <paramref name="sizeHint" /> 的 <see cref="T:System.Memory`1" />。  如不提供 <paramref name="sizeHint" /> 或它等於 0，則傳回一些非空白的緩衝。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;sizeHint&quot; /&gt; is negative.">
        <paramref name="sizeHint" /> 為負。</exception>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.GetSpan(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Span`1&quot; /&gt; to write to that is at least a specified length.">傳回要寫入的 <see cref="T:System.Span`1" />，至少為指定的長度。</summary>
      <param name="sizeHint" vsli:raw="The minimum requested length of the &lt;see cref=&quot;T:System.Span`1&quot; /&gt;.">
        <see cref="T:System.Span`1" /> 長度的要求下限。</param>
      <returns vsli:raw="A span of at least &lt;paramref name=&quot;sizeHint&quot; /&gt; in length. If &lt;paramref name=&quot;sizeHint&quot; /&gt; is not provided or is equal to 0, some non-empty buffer is returned.">至少 <paramref name="sizeHint" /> 長度的範圍。 如不提供 <paramref name="sizeHint" /> 或它等於 0，則傳回一些非空白的緩衝。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;sizeHint&quot; /&gt; is negative.">
        <paramref name="sizeHint" /> 為負。</exception>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.WrittenCount">
      <summary vsli:raw="Gets the amount of data written to the underlying buffer.">取得寫入基礎緩衝區的資料量。</summary>
      <returns vsli:raw="The amount of data written to the underlying buffer.">寫入基礎緩衝區的資料量。</returns>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.WrittenMemory">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; that contains the data written to the underlying buffer so far.">取得 <see cref="T:System.ReadOnlyMemory`1" />，它包含目前已寫入基礎緩衝區的資料。</summary>
      <returns vsli:raw="The data written to the underlying buffer.">寫入基礎緩衝區的資料。</returns>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.WrittenSpan">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; that contains the data written to the underlying buffer so far.">取得 <see cref="T:System.ReadOnlySpan`1" />，它包含目前已寫入基礎緩衝區的資料。</summary>
      <returns vsli:raw="The data written to the underlying buffer.">寫入基礎緩衝區的資料。</returns>
    </member>
    <member name="T:System.Buffers.Binary.BinaryPrimitives">
      <summary vsli:raw="Reads bytes as primitives with specific endianness.">將位元組視為原始值並使用特定位元組排列方式來讀取。</summary>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt16BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int16&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">以位元組由大到小的方式，從唯讀位元組範圍的開頭讀取 <see cref="T:System.Int16" />。</summary>
      <param name="source" vsli:raw="The read-only span to read.">要讀取的唯讀範圍。</param>
      <returns vsli:raw="The big endian value.">位元組排列是由大到小的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">
        <paramref name="source" /> 太小而無法包含 <see cref="T:System.Int16" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt16LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int16&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">以位元組由小到大的方式，從唯讀位元組範圍的開頭讀取 <see cref="T:System.Int16" />。</summary>
      <param name="source" vsli:raw="The read-only span to read.">要讀取的唯讀範圍。</param>
      <returns vsli:raw="The little endian value.">位元組排列是由小到大的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">
        <paramref name="source" /> 太小而無法包含 <see cref="T:System.Int16" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt32BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int32&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">以位元組由大到小的方式，從唯讀位元組範圍的開頭讀取 <see cref="T:System.Int32" />。</summary>
      <param name="source" vsli:raw="The read-only span to read.">要讀取的唯讀範圍。</param>
      <returns vsli:raw="The big endian value.">位元組排列是由大到小的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <paramref name="source" /> 太小而無法包含 <see cref="T:System.Int32" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt32LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int32&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">以位元組由小到大的方式，從唯讀位元組範圍的開頭讀取 <see cref="T:System.Int32" />。</summary>
      <param name="source" vsli:raw="The read-only span to read.">要讀取的唯讀範圍。</param>
      <returns vsli:raw="The little endian value.">位元組排列是由小到大的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <paramref name="source" /> 太小而無法包含 <see cref="T:System.Int32" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt64BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int64&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">以位元組由大到小的方式，從唯讀位元組範圍的開頭讀取 <see cref="T:System.Int64" />。</summary>
      <param name="source" vsli:raw="The read-only span to read.">要讀取的唯讀範圍。</param>
      <returns vsli:raw="The big endian value.">位元組排列是由大到小的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">
        <paramref name="source" /> 太小而無法包含 <see cref="T:System.Int64" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt64LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int64&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">以位元組由小到大的方式，從唯讀位元組範圍的開頭讀取 <see cref="T:System.Int64" />。</summary>
      <param name="source" vsli:raw="The read-only span to read.">要讀取的唯讀範圍。</param>
      <returns vsli:raw="The little endian value.">位元組排列是由小到大的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">
        <paramref name="source" /> 太小而無法包含 <see cref="T:System.Int64" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt16BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">以位元組由大到小的方式，從唯讀位元組範圍的開頭讀取 <see cref="T:System.UInt16" />。</summary>
      <param name="source" vsli:raw="The read-only span to read.">要讀取的唯讀範圍。</param>
      <returns vsli:raw="The big endian value.">位元組排列是由大到小的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">
        <paramref name="source" /> 太小而無法包含 <see cref="T:System.UInt16" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt16LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">以位元組由小到大的方式，從唯讀位元組範圍的開頭讀取 <see cref="T:System.UInt16" />。</summary>
      <param name="source" vsli:raw="The read-only span to read.">要讀取的唯讀範圍。</param>
      <returns vsli:raw="The little endian value.">位元組排列是由小到大的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">
        <paramref name="source" /> 太小而無法包含 <see cref="T:System.UInt16" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt32BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">以位元組由大到小的方式，從唯讀位元組範圍的開頭讀取 <see cref="T:System.UInt32" />。</summary>
      <param name="source" vsli:raw="The read-only span to read.">要讀取的唯讀範圍。</param>
      <returns vsli:raw="The big endian value.">位元組排列是由大到小的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">
        <paramref name="source" /> 太小而無法包含 <see cref="T:System.UInt32" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt32LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">以位元組由小到大的方式，從唯讀位元組範圍的開頭讀取 <see cref="T:System.UInt32" />。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要讀取的唯讀位元組範圍。</param>
      <returns vsli:raw="The little endian value.">位元組排列是由小到大的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">
        <paramref name="source" /> 太小而無法包含 <see cref="T:System.UInt32" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt64BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">以位元組由大到小的方式，從唯讀位元組範圍的開頭讀取 <see cref="T:System.UInt64" />。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要讀取的唯讀位元組範圍。</param>
      <returns vsli:raw="The big endian value.">位元組排列是由大到小的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">
        <paramref name="source" /> 太小而無法包含 <see cref="T:System.UInt64" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt64LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">以位元組由小到大的方式，從唯讀位元組範圍的開頭讀取 <see cref="T:System.UInt64" />。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要讀取的唯讀位元組範圍。</param>
      <returns vsli:raw="The little endian value.">位元組排列是由小到大的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">
        <paramref name="source" /> 太小而無法包含 <see cref="T:System.UInt64" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Byte)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.Byte&quot; /&gt; value, which effectively does nothing for a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">藉由對指定的 <see cref="T:System.Byte" /> 值執行位元組排列方式交換，來反轉原始值，這對 <see cref="T:System.Byte" /> 沒有影響。</summary>
      <param name="value" vsli:raw="The value to reverse.">要反轉的值。</param>
      <returns vsli:raw="The passed-in value, unmodified.">傳入值 (未修改)。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Int16)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.Int16&quot; /&gt; value.">藉由對指定的 <see cref="T:System.Int16" /> 值執行位元組排列方式交換，來反轉原始值。</summary>
      <param name="value" vsli:raw="The value to reverse.">要反轉的值。</param>
      <returns vsli:raw="The reversed value.">已反轉的值。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Int32)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.Int32&quot; /&gt; value.">藉由對指定的 <see cref="T:System.Int32" /> 值執行位元組排列方式交換，來反轉原始值。</summary>
      <param name="value" vsli:raw="The value to reverse.">要反轉的值。</param>
      <returns vsli:raw="The reversed value.">已反轉的值。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Int64)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.Int64&quot; /&gt; value.">藉由對指定的 <see cref="T:System.Int64" /> 值執行位元組排列方式交換，來反轉原始值。</summary>
      <param name="value" vsli:raw="The value to reverse.">要反轉的值。</param>
      <returns vsli:raw="The reversed value.">已反轉的值。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.SByte)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.SByte&quot; /&gt; value, which effectively does nothing for an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">藉由對指定的 <see cref="T:System.SByte" /> 值執行位元組排列方式交換，來反轉原始值，這對 <see cref="T:System.SByte" /> 沒有影響。</summary>
      <param name="value" vsli:raw="The value to reverse.">要反轉的值。</param>
      <returns vsli:raw="The passed-in value, unmodified.">傳入值 (未修改)。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UInt16)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.UInt16&quot; /&gt; value.">藉由對指定的 <see cref="T:System.UInt16" /> 值執行位元組排列方式交換，來反轉原始值。</summary>
      <param name="value" vsli:raw="The value to reverse.">要反轉的值。</param>
      <returns vsli:raw="The reversed value.">已反轉的值。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UInt32)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value.">藉由對指定的 <see cref="T:System.UInt32" /> 值執行位元組排列方式交換，來反轉原始值。</summary>
      <param name="value" vsli:raw="The value to reverse.">要反轉的值。</param>
      <returns vsli:raw="The reversed value.">已反轉的值。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UInt64)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value.">藉由對指定的 <see cref="T:System.UInt64" /> 值執行位元組排列方式交換，來反轉原始值。</summary>
      <param name="value" vsli:raw="The value to reverse.">要反轉的值。</param>
      <returns vsli:raw="The reversed value.">已反轉的值。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt16BigEndian(System.ReadOnlySpan{System.Byte},System.Int16@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int16&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">以位元組由大到小的方式，從唯讀位元組範圍的開頭讀取 <see cref="T:System.Int16" />。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要讀取的唯讀位元組範圍。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">當此方法傳回時，會以位元組由大到小的方式，從位元組唯讀範圍讀取值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果範圍夠大而足以包含 <see cref="T:System.Int16" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt16LittleEndian(System.ReadOnlySpan{System.Byte},System.Int16@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int16&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">以位元組由小到大的方式，從唯讀位元組範圍的開頭讀取 <see cref="T:System.Int16" />。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要讀取的唯讀位元組範圍。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">當此方法傳回時，會以位元組由小到大的方式，從位元組唯讀範圍讀取值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果範圍夠大而足以包含 <see cref="T:System.Int16" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt32BigEndian(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int32&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">以位元組由大到小的方式，從唯讀位元組範圍的開頭讀取 <see cref="T:System.Int32" />。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要讀取的唯讀位元組範圍。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">當此方法傳回時，會以位元組由大到小的方式，從位元組唯讀範圍讀取值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果範圍夠大而足以包含 <see cref="T:System.Int32" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt32LittleEndian(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int32&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">以位元組由小到大的方式，從唯讀位元組範圍的開頭讀取 <see cref="T:System.Int32" />。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要讀取的唯讀位元組範圍。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">當此方法傳回時，會以位元組由小到大的方式，從位元組唯讀範圍讀取值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果範圍夠大而足以包含 <see cref="T:System.Int32" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt64BigEndian(System.ReadOnlySpan{System.Byte},System.Int64@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int64&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">以位元組由大到小的方式，從唯讀位元組範圍的開頭讀取 <see cref="T:System.Int64" />。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要讀取的唯讀位元組範圍。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">當此方法傳回時，會以位元組由大到小的方式，從位元組唯讀範圍讀取值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果範圍夠大而足以包含 <see cref="T:System.Int64" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt64LittleEndian(System.ReadOnlySpan{System.Byte},System.Int64@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int64&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">以位元組由小到大的方式，從唯讀位元組範圍的開頭讀取 <see cref="T:System.Int64" />。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要讀取的唯讀位元組範圍。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">當此方法傳回時，會以位元組由小到大的方式，從位元組唯讀範圍讀取值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果範圍夠大而足以包含 <see cref="T:System.Int64" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt16BigEndian(System.ReadOnlySpan{System.Byte},System.UInt16@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">以位元組由大到小的方式，從唯讀位元組範圍的開頭讀取 <see cref="T:System.UInt16" />。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要讀取的唯讀位元組範圍。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">當此方法傳回時，會以位元組由大到小的方式，從位元組唯讀範圍讀取值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果範圍夠大而足以包含 <see cref="T:System.UInt16" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt16LittleEndian(System.ReadOnlySpan{System.Byte},System.UInt16@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">以位元組由小到大的方式，從唯讀位元組範圍的開頭讀取 <see cref="T:System.UInt16" />。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要讀取的唯讀位元組範圍。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">當此方法傳回時，會以位元組由小到大的方式，從位元組唯讀範圍讀取值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果範圍夠大而足以包含 <see cref="T:System.UInt16" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt32BigEndian(System.ReadOnlySpan{System.Byte},System.UInt32@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">以位元組由大到小的方式，從唯讀位元組範圍的開頭讀取 <see cref="T:System.UInt32" />。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要讀取的唯讀位元組範圍。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">當此方法傳回時，會以位元組由大到小的方式，從位元組唯讀範圍讀取值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果範圍夠大而足以包含 <see cref="T:System.UInt32" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt32LittleEndian(System.ReadOnlySpan{System.Byte},System.UInt32@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">以位元組由小到大的方式，從唯讀位元組範圍的開頭讀取 <see cref="T:System.UInt32" />。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要讀取的唯讀位元組範圍。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">當此方法傳回時，會以位元組由小到大的方式，從位元組唯讀範圍讀取值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果範圍夠大而足以包含 <see cref="T:System.UInt32" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt64BigEndian(System.ReadOnlySpan{System.Byte},System.UInt64@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">以位元組由大到小的方式，從唯讀位元組範圍的開頭讀取 <see cref="T:System.UInt64" />。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要讀取的唯讀位元組範圍。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">當此方法傳回時，會以位元組由大到小的方式，從位元組唯讀範圍讀取值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果範圍夠大而足以包含 <see cref="T:System.UInt64" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt64LittleEndian(System.ReadOnlySpan{System.Byte},System.UInt64@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">以位元組由小到大的方式，從唯讀位元組範圍的開頭讀取 <see cref="T:System.UInt64" />。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">要讀取的唯讀位元組範圍。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">當此方法傳回時，會以位元組由小到大的方式，從位元組唯讀範圍讀取值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果範圍夠大而足以包含 <see cref="T:System.UInt64" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt16BigEndian(System.Span{System.Byte},System.Int16)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int16&quot; /&gt; into a span of bytes, as big endian.">以位元組由大到小的方式，將 <see cref="T:System.Int16" /> 寫入位元組範圍。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">位元組範圍，要以位元組由大到小的方式將值寫入其中。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要寫入位元組範圍的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果範圍夠大而足以包含 <see cref="T:System.Int16" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt16LittleEndian(System.Span{System.Byte},System.Int16)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int16&quot; /&gt; into a span of bytes, as little endian.">以位元組由小到大的方式，將 <see cref="T:System.Int16" /> 寫入位元組範圍。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">位元組範圍，要以位元組由小到大的方式將值寫入其中。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要寫入位元組範圍的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果範圍夠大而足以包含 <see cref="T:System.Int16" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt32BigEndian(System.Span{System.Byte},System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; into a span of bytes, as big endian.">以位元組由大到小的方式，將 <see cref="T:System.Int32" /> 寫入位元組範圍。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">位元組範圍，要以位元組由大到小的方式將值寫入其中。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要寫入位元組範圍的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果範圍夠大而足以包含 <see cref="T:System.Int32" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt32LittleEndian(System.Span{System.Byte},System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; into a span of bytes, as little endian.">以位元組由小到大的方式，將 <see cref="T:System.Int32" /> 寫入位元組範圍。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">位元組範圍，要以位元組由小到大的方式將值寫入其中。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要寫入位元組範圍的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果範圍夠大而足以包含 <see cref="T:System.Int32" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt64BigEndian(System.Span{System.Byte},System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; into a span of bytes, as big endian.">以位元組由大到小的方式，將 <see cref="T:System.Int64" /> 寫入位元組範圍。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">位元組範圍，要以位元組由大到小的方式將值寫入其中。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要寫入位元組範圍的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果範圍夠大而足以包含 <see cref="T:System.Int64" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt64LittleEndian(System.Span{System.Byte},System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; into a span of bytes, as little endian.">以位元組由小到大的方式，將 <see cref="T:System.Int64" /> 寫入位元組範圍。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">位元組範圍，要以位元組由小到大的方式將值寫入其中。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要寫入位元組範圍的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果範圍夠大而足以包含 <see cref="T:System.Int64" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt16BigEndian(System.Span{System.Byte},System.UInt16)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; into a span of bytes, as big endian.">以位元組由大到小的方式，將 <see cref="T:System.UInt16" /> 寫入位元組範圍。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">位元組範圍，要以位元組由大到小的方式將值寫入其中。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要寫入位元組範圍的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果範圍夠大而足以包含 <see cref="T:System.UInt16" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt16LittleEndian(System.Span{System.Byte},System.UInt16)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; into a span of bytes, as little endian.">以位元組由小到大的方式，將 <see cref="T:System.UInt16" /> 寫入位元組範圍。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">位元組範圍，要以位元組由小到大的方式將值寫入其中。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要寫入位元組範圍的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果範圍夠大而足以包含 <see cref="T:System.UInt16" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt32BigEndian(System.Span{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; into a span of bytes, as big endian.">以位元組由大到小的方式，將 <see cref="T:System.UInt32" /> 寫入位元組範圍。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">位元組範圍，要以位元組由大到小的方式將值寫入其中。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要寫入位元組範圍的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果範圍夠大而足以包含 <see cref="T:System.UInt32" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt32LittleEndian(System.Span{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; into a span of bytes, as little endian.">以位元組由小到大的方式，將 <see cref="T:System.UInt32" /> 寫入位元組範圍。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">位元組範圍，要以位元組由小到大的方式將值寫入其中。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要寫入位元組範圍的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果範圍夠大而足以包含 <see cref="T:System.UInt32" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt64BigEndian(System.Span{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; into a span of bytes, as big endian.">以位元組由大到小的方式，將 <see cref="T:System.UInt64" /> 寫入位元組範圍。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">位元組範圍，要以位元組由大到小的方式將值寫入其中。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要寫入位元組範圍的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果範圍夠大而足以包含 <see cref="T:System.UInt64" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt64LittleEndian(System.Span{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; into a span of bytes, as little endian.">以位元組由小到大的方式，將 <see cref="T:System.UInt64" /> 寫入位元組範圍。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">位元組範圍，要以位元組由小到大的方式將值寫入其中。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要寫入位元組範圍的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果範圍夠大而足以包含 <see cref="T:System.UInt64" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt16BigEndian(System.Span{System.Byte},System.Int16)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int16&quot; /&gt; into a span of bytes, as big endian.">以位元組由大到小的方式，將 <see cref="T:System.Int16" /> 寫入位元組範圍。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">位元組範圍，要以位元組由大到小的方式將值寫入其中。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要寫入位元組範圍的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">
        <paramref name="destination" /> 太小而無法包含 <see cref="T:System.Int16" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt16LittleEndian(System.Span{System.Byte},System.Int16)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int16&quot; /&gt; into a span of bytes, as little endian.">以位元組由小到大的方式，將 <see cref="T:System.Int16" /> 寫入位元組範圍。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">位元組範圍，要以位元組由小到大的方式將值寫入其中。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要寫入位元組範圍的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">
        <paramref name="destination" /> 太小而無法包含 <see cref="T:System.Int16" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt32BigEndian(System.Span{System.Byte},System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; into a span of bytes, as big endian.">以位元組由大到小的方式，將 <see cref="T:System.Int32" /> 寫入位元組範圍。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">位元組範圍，要以位元組由大到小的方式將值寫入其中。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要寫入位元組範圍的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <paramref name="destination" /> 太小而無法包含 <see cref="T:System.Int32" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt32LittleEndian(System.Span{System.Byte},System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; into a span of bytes, as little endian.">以位元組由小到大的方式，將 <see cref="T:System.Int32" /> 寫入位元組範圍。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">位元組範圍，要以位元組由小到大的方式將值寫入其中。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要寫入位元組範圍的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <paramref name="destination" /> 太小而無法包含 <see cref="T:System.Int32" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt64BigEndian(System.Span{System.Byte},System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; into a span of bytes, as big endian.">以位元組由大到小的方式，將 <see cref="T:System.Int64" /> 寫入位元組範圍。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">位元組範圍，要以位元組由大到小的方式將值寫入其中。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要寫入位元組範圍的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">
        <paramref name="destination" /> 太小而無法包含 <see cref="T:System.Int64" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt64LittleEndian(System.Span{System.Byte},System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; into a span of bytes, as little endian.">以位元組由小到大的方式，將 <see cref="T:System.Int64" /> 寫入位元組範圍。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">位元組範圍，要以位元組由小到大的方式將值寫入其中。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要寫入位元組範圍的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">
        <paramref name="destination" /> 太小而無法包含 <see cref="T:System.Int64" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt16BigEndian(System.Span{System.Byte},System.UInt16)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; into a span of bytes, as big endian.">以位元組由大到小的方式，將 <see cref="T:System.UInt16" /> 寫入位元組範圍。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">位元組範圍，要以位元組由大到小的方式將值寫入其中。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要寫入位元組範圍的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">
        <paramref name="destination" /> 太小而無法包含 <see cref="T:System.UInt16" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt16LittleEndian(System.Span{System.Byte},System.UInt16)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; into a span of bytes, as little endian.">以位元組由小到大的方式，將 <see cref="T:System.UInt16" /> 寫入位元組範圍。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">位元組範圍，要以位元組由小到大的方式將值寫入其中。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要寫入位元組範圍的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">
        <paramref name="destination" /> 太小而無法包含 <see cref="T:System.UInt16" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt32BigEndian(System.Span{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; into a span of bytes, as big endian.">以位元組由大到小的方式，將 <see cref="T:System.UInt32" /> 寫入位元組範圍。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">位元組範圍，要以位元組由大到小的方式將值寫入其中。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要寫入位元組範圍的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">
        <paramref name="destination" /> 太小而無法包含 <see cref="T:System.UInt32" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt32LittleEndian(System.Span{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; into a span of bytes, as little endian.">以位元組由小到大的方式，將 <see cref="T:System.UInt32" /> 寫入位元組範圍。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">位元組範圍，要以位元組由小到大的方式將值寫入其中。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要寫入位元組範圍的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">
        <paramref name="destination" /> 太小而無法包含 <see cref="T:System.UInt32" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt64BigEndian(System.Span{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; into a span of bytes, as big endian.">以位元組由大到小的方式，將 <see cref="T:System.UInt64" /> 寫入位元組範圍。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">位元組範圍，要以位元組由大到小的方式將值寫入其中。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要寫入位元組範圍的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">
        <paramref name="destination" /> 太小而無法包含 <see cref="T:System.UInt64" />。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt64LittleEndian(System.Span{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; into a span of bytes, as little endian.">以位元組由小到大的方式，將 <see cref="T:System.UInt64" /> 寫入位元組範圍。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">位元組範圍，要以位元組由小到大的方式將值寫入其中。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">要寫入位元組範圍的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">
        <paramref name="destination" /> 太小而無法包含 <see cref="T:System.UInt64" />。</exception>
    </member>
    <member name="T:System.Buffers.BuffersExtensions">
      <summary vsli:raw="Provides extension methods for &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">提供 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 的擴充方法。</summary>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.CopyTo``1(System.Buffers.ReadOnlySequence{``0},System.Span{``0})">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; to the specified &lt;see cref=&quot;T:System.Span`1&quot; /&gt;.">將 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 複製到指定的 <see cref="T:System.Span`1" />。</summary>
      <param name="source" vsli:raw="The source &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">來源 <see cref="T:System.Buffers.ReadOnlySequence`1" />。</param>
      <param name="destination" vsli:raw="The destination &lt;see cref=&quot;T:System.Span`1&quot; /&gt;.">目的 <see cref="T:System.Span`1" />。</param>
      <typeparam name="T" vsli:raw="The type of the items in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">中的專案類型<see cref="T:System.Buffers.ReadOnlySequence`1" />。</typeparam>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.PositionOf``1(System.Buffers.ReadOnlySequence{``0},``0)">
      <summary vsli:raw="Returns the position of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">傳回 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 中出現第一個 <paramref name="item" /> 的位置。</summary>
      <param name="source" vsli:raw="The source &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">來源 <see cref="T:System.Buffers.ReadOnlySequence`1" />。</param>
      <param name="value" vsli:raw="The item to find in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">用來在 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 中尋找的項目。</param>
      <typeparam name="T" vsli:raw="The type of the items in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">中的專案類型<see cref="T:System.Buffers.ReadOnlySequence`1" />。</typeparam>
      <returns vsli:raw="An object whose &lt;see cref=&quot;M:System.SequencePosition.GetInteger&quot; /&gt; method returns the position of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt;, or an object whose &lt;see langword=&quot;Nullable&amp;lt;SequencePosition&amp;gt;.HasValue&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt; .">其 <see cref="M:System.SequencePosition.GetInteger" /> 方法會傳回 <paramref name="item" /> 第一個出現位置的物件，或其 <see langword="Nullable&lt;SequencePosition&gt;.HasValue" /> 屬性為 <see langword="false" /> 的物件。</returns>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.ToArray``1(System.Buffers.ReadOnlySequence{``0})">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; to an array.">將 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 轉換成陣列。</summary>
      <param name="sequence" vsli:raw="The read-only sequence to convert to an array.">要轉換為陣列的唯讀序列。</param>
      <typeparam name="T" vsli:raw="The type of the items in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">中的專案類型<see cref="T:System.Buffers.ReadOnlySequence`1" />。</typeparam>
      <returns vsli:raw="An array containing the data in the current read-only sequence.">陣列，其中包含目前唯讀序列中的資料。</returns>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.Write``1(System.Buffers.IBufferWriter{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Writes the contents of &lt;paramref name=&quot;value&quot; /&gt; to &lt;paramref name=&quot;writer&quot; /&gt;.">將 <paramref name="value" /> 的內容寫入至 <paramref name="writer" />。</summary>
      <param name="writer" vsli:raw="The buffer writer to which to write &lt;paramref name=&quot;value&quot; /&gt;.">要將 <paramref name="value" /> 寫入至其中的緩衝區寫入器。</param>
      <param name="value" vsli:raw="The read-only span to be written to &lt;paramref name=&quot;writer&quot; /&gt;.">要寫入至 <paramref name="writer" /> 的唯讀範圍。</param>
      <typeparam name="T" vsli:raw="The type of the items in the &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt;.">中的專案類型<see cref="T:System.ReadOnlySpan`1" />。</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; is shorter than &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="writer" /> 短於 <paramref name="value" />。</exception>
    </member>
    <member name="T:System.Buffers.IBufferWriter`1">
      <summary vsli:raw="Represents an output sink into which &lt;typeparamref name=&quot;T&quot; /&gt; data can be written.">代表可在其中寫入 <typeparamref name="T" /> 資料的輸出接收。</summary>
      <typeparam name="T" vsli:raw="The type of the items in the &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt;.">中的專案類型<see cref="T:System.Buffers.IBufferWriter`1" />。</typeparam>
    </member>
    <member name="M:System.Buffers.IBufferWriter`1.Advance(System.Int32)">
      <summary vsli:raw="Notifies the &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt; that &lt;paramref name=&quot;count&quot; /&gt; data items were written to the output &lt;see cref=&quot;T:System.Span`1&quot; /&gt; or &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;.">通知 <see cref="T:System.Buffers.IBufferWriter`1" />，<paramref name="count" /> 資料項目已寫入到輸出 <see cref="T:System.Span`1" /> 或 <see cref="T:System.Memory`1" />。</summary>
      <param name="count" vsli:raw="The number of data items written to the &lt;see cref=&quot;T:System.Span`1&quot; /&gt; or &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;.">寫入 <see cref="T:System.Span`1" /> 或 <see cref="T:System.Memory`1" /> 的資料項目數。</param>
    </member>
    <member name="M:System.Buffers.IBufferWriter`1.GetMemory(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; to write to that is at least the requested size (specified by &lt;paramref name=&quot;sizeHint&quot; /&gt;).">傳回 <see cref="T:System.Memory`1" /> 以寫入到至少為要求大小 (由 <paramref name="sizeHint" />指定) 的資料。</summary>
      <param name="sizeHint" vsli:raw="The minimum length of the returned &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;. If 0, a non-empty buffer is returned.">所傳回 <see cref="T:System.Memory`1" /> 的長度下限。 若為 0，則會傳回非空的緩衝區。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; of at least the size &lt;paramref name=&quot;sizeHint&quot; /&gt;. If &lt;paramref name=&quot;sizeHint&quot; /&gt; is 0, returns a non-empty buffer.">大小至少為 <paramref name="sizeHint" /> 的 <see cref="T:System.Memory`1" />。 若 <paramref name="sizeHint" /> 為 0，則會傳回非空緩衝區。</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="The requested buffer size is not available.">要求的緩衝區大小無法使用。</exception>
    </member>
    <member name="M:System.Buffers.IBufferWriter`1.GetSpan(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Span`1&quot; /&gt; to write to that is at least the requested size (specified by &lt;paramref name=&quot;sizeHint&quot; /&gt;).">傳回 <see cref="T:System.Span`1" /> 以寫入到至少為要求大小 (由 <paramref name="sizeHint" />指定) 的資料。</summary>
      <param name="sizeHint" vsli:raw="The minimum length of the returned &lt;see cref=&quot;T:System.Span`1&quot; /&gt;. If 0, a non-empty buffer is returned.">所傳回 <see cref="T:System.Span`1" /> 的長度下限。 若為 0，則會傳回非空的緩衝區。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Span`1&quot; /&gt; of at least the size &lt;paramref name=&quot;sizeHint&quot; /&gt;. If &lt;paramref name=&quot;sizeHint&quot; /&gt; is 0, returns a non-empty buffer.">大小至少為 <paramref name="sizeHint" /> 的 <see cref="T:System.Span`1" />。 若 <paramref name="sizeHint" /> 為 0，則會傳回非空緩衝區。</returns>
    </member>
    <member name="T:System.Buffers.MemoryPool`1">
      <summary vsli:raw="Represents a pool of memory blocks.">表示記憶體區塊的集區。</summary>
      <typeparam name="T" vsli:raw="The type of the items in the memory pool.">記憶體集區中的專案類型。</typeparam>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.#ctor">
      <summary vsli:raw="Constructs a new instance of a memory pool.">建構記憶體集區的新執行個體。</summary>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.Dispose">
      <summary vsli:raw="Frees all resources used by the memory pool.">釋出記憶體集區所使用的全部資源。</summary>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.Dispose(System.Boolean)">
      <summary vsli:raw="Frees the unmanaged resources used by the memory pool and optionally releases the managed resources.">釋出記憶體集區所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源， 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="P:System.Buffers.MemoryPool`1.MaxBufferSize">
      <summary vsli:raw="Gets the maximum buffer size supported by this pool.">取得此集區所支援的最大緩衝區大小。</summary>
      <returns vsli:raw="The maximum buffer size supported by this pool.">此集區所支援的緩衝區大小上限。</returns>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.Rent(System.Int32)">
      <summary vsli:raw="Returns a memory block capable of holding at least &lt;paramref name=&quot;minBufferSize&quot; /&gt; elements of T.">傳回可以保留至少 <paramref name="minBufferSize" /> 個 T 元素的記憶體區塊。</summary>
      <param name="minBufferSize" vsli:raw="The minimum number of elements of &lt;typeparamref name=&quot;T&quot; /&gt; that the memory pool can hold. A value of -1 returns a memory pool set to the default size for the pool.">記憶體集區可以保存的 <typeparamref name="T" /> 元素數目下限。 值 -1 會傳回設為集區預設大小的記憶體集區。</param>
      <returns vsli:raw="A memory block capable of holding at least &lt;paramref name=&quot;minBufferSize&quot; /&gt; elements of T.">可以保留至少 <paramref name="minBufferSize" /> 個 T 元素的記憶體區塊。</returns>
    </member>
    <member name="P:System.Buffers.MemoryPool`1.Shared">
      <summary vsli:raw="Gets a singleton instance of a memory pool based on arrays.">根據陣列，取得記憶體集區的單一執行個體。</summary>
      <returns vsli:raw="A singleton instance of a memory pool.">記憶體集區的單一實例。</returns>
    </member>
    <member name="T:System.Buffers.OperationStatus">
      <summary>定義可以從範圍型作業傳回的值，這些作業支援處理多個不連續緩衝區中包含的輸入。</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.DestinationTooSmall">
      <summary>輸入會經過部分處理，最多到可納入目的地緩衝區的程度。 呼叫者可以放大目的地緩衝區、適當地分割緩衝區，然後重試。</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.Done">
      <summary>整個輸入緩衝區已經過處理，而且此作業已完成。</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.InvalidData">
      <summary>輸入包含無法處理的無效位元組。 如果輸入已經過部分處理，目的地會包含部分結果。 如此可保證，附加至輸入的其他任何資料都不會使無效的序列變成有效。</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.NeedMoreData">
      <summary>輸入經過部分處理，最多到可使用之輸入的最後一個有效區塊。 呼叫者可以將剩餘未處理的輸入與其他資料拼接在一起、適當地分割緩衝區，然後重試。</summary>
    </member>
    <member name="T:System.Buffers.ReadOnlySequence`1">
      <summary vsli:raw="Represents a sequence that can read a sequential series of &lt;typeparamref name=&quot;T&quot; /&gt;.">代表可讀取 <typeparamref name="T" /> 循序序列的序列。</summary>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only sequence." />
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(`0[])">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; from the &lt;paramref name=&quot;array&quot; /&gt;.">從 <paramref name="array" /> 建立 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 的執行個體。</summary>
      <param name="array" vsli:raw="The array from which to create a read-only sequence.">要從中建立唯讀序列的陣列。</param>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates an instance of a &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; from a section of an array.">從陣列區段建立 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 的執行個體。</summary>
      <param name="array" vsli:raw="The array from which to create the read-only sequence.">要從中建立唯讀序列的陣列。</param>
      <param name="start" vsli:raw="The zero-based index of the first element in the array to include in the read-only sequence.">要包含在唯讀序列中之陣列第一個元素以零為起始的索引。</param>
      <param name="length" vsli:raw="The number of elements to include in the read-only sequence.">要包含在唯讀序列中元素的數目。</param>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(System.Buffers.ReadOnlySequenceSegment{`0},System.Int32,System.Buffers.ReadOnlySequenceSegment{`0},System.Int32)">
      <summary vsli:raw="Creates an instance of a &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; from a linked memory list represented by start and end segments and the corresponding indexes in them.">從開始和結束區段及其中對應索引所表示的連結記憶體清單，建立 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 的執行個體。</summary>
      <param name="startSegment" vsli:raw="The initial node of the linked memory list." />
      <param name="startIndex" vsli:raw="The position to the start of the sequence inside &lt;paramref name=&quot;startSegment&quot; /&gt;." />
      <param name="endSegment" vsli:raw="The final node of the linked memory list." />
      <param name="endIndex" vsli:raw="The position to the end of the sequence inside &lt;paramref name=&quot;endSegment&quot; /&gt;." />
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(System.ReadOnlyMemory{`0})">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; from a &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;.">從 <see cref="T:System.ReadOnlyMemory`1" /> 建立 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 的執行個體。</summary>
      <param name="memory" vsli:raw="A read-only block of memory of elements of type &lt;typeparamref name=&quot;T&quot; /&gt;." />
    </member>
    <member name="F:System.Buffers.ReadOnlySequence`1.Empty">
      <summary vsli:raw="Returns an empty &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">傳回空的 <see cref="T:System.Buffers.ReadOnlySequence`1" /></summary>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.End">
      <summary vsli:raw="Gets the position at the end of the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">取得 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 結尾的位置。</summary>
    </member>
    <member name="T:System.Buffers.ReadOnlySequence`1.Enumerator">
      <summary vsli:raw="Represents an enumerator over a &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">透過 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 表示列舉程式。</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Enumerator.#ctor(System.Buffers.ReadOnlySequence{`0}@)">
      <summary vsli:raw="Initializes the enumerator.">初始化列舉程式。</summary>
      <param name="sequence" vsli:raw="The &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; to enumerate.">要列舉的 <see cref="T:System.Buffers.ReadOnlySequence`1" />。</param>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.Enumerator.Current">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;.">取得目前的 <see cref="T:System.ReadOnlyMemory`1" />。</summary>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;.">目前的 <see cref="T:System.ReadOnlyMemory`1" />。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Enumerator.MoveNext">
      <summary vsli:raw="Moves to the next &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">移至 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 中的下一個 <see cref="T:System.ReadOnlyMemory`1" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator successfully advanced to the next item; &lt;see langword=&quot;false&quot; /&gt; if the end of the sequence has been reached.">如果列舉值成功前移至下一個項目，則為 <see langword="true" />；如果已到達序列結尾，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.First">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; from the first segment.">從第一個區段取得 <see cref="T:System.ReadOnlyMemory`1" />。</summary>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.FirstSpan">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; from the first segment.">從第一個區段取得 <see cref="T:System.ReadOnlySpan`1" />。</summary>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator over the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">透過 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 傳回列舉值。</summary>
      <returns vsli:raw="Returns an enumerator over the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">透過 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 傳回列舉值。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.GetPosition(System.Int64)">
      <summary vsli:raw="Returns a new &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; at an &lt;paramref name=&quot;offset&quot; /&gt; from the start of the sequence.">從序列開頭傳回 <paramref name="offset" /> 的新 <see cref="T:System.SequencePosition" />。</summary>
      <param name="offset" vsli:raw="The offset from the start of the sequence." />
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.GetPosition(System.Int64,System.SequencePosition)">
      <summary vsli:raw="Returns a new &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; starting at the specified offset from the &lt;paramref name=&quot;origin&quot; /&gt; position.">從 <paramref name="origin" /> 傳回 <paramref name="offset" /> 的新 <see cref="T:System.SequencePosition" />。</summary>
      <param name="offset" vsli:raw="The offset from the specified &lt;paramref name=&quot;origin&quot; /&gt; sequence position." />
      <param name="origin" vsli:raw="A sequence position representing the point from which to initiate the offset." />
      <returns vsli:raw="An object representing the sequence position that starts at the &lt;paramref name=&quot;offset&quot; /&gt; position of the specified &lt;paramref name=&quot;origin&quot; /&gt; position object.">從原始物件 <paramref name="offset" /> 位置開始的新物件。</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; is empty.">取得值，這個值指出 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 是否是空的。</summary>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.IsSingleSegment">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; contains a single &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; segment.">取得值，指出 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 是否包含單一 <see cref="T:System.ReadOnlyMemory`1" /> 區段。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read-only sequence is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />如果唯讀順序是空的, 則為,否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.Length">
      <summary vsli:raw="Gets the length of the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">取得 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 的長度。</summary>
      <returns vsli:raw="The length of the read-only sequence.">唯讀序列的長度。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int32,System.Int32)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt;, with &lt;paramref name=&quot;length&quot; /&gt; items.">從目前的 <see cref="T:System.Buffers.ReadOnlySequence`1" /> (從 <paramref name="start" /> 開始，包含 <paramref name="length" /> 個項目) 形成配量。</summary>
      <param name="start" vsli:raw="The index at which to begin this slice.">要開始此配量的索引。</param>
      <param name="length" vsli:raw="The length of the slice.">配量的長度。</param>
      <returns vsli:raw="A slice that consists of &lt;paramref name=&quot;length&quot; /&gt; elements from the current instance starting at index &lt;paramref name=&quot;start&quot; /&gt;.">由 <paramref name="length" /> 元素組成的配量 (從索引 <paramref name="start" /> 開始的目前執行個體)。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int32,System.SequencePosition)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt; and ending at &lt;paramref name=&quot;end&quot; /&gt; (exclusive).">從目前的 <see cref="T:System.Buffers.ReadOnlySequence`1" /> (從 <paramref name="start" /> 開始，到 <paramref name="end" /> (不含) 結束) 形成配量。</summary>
      <param name="start" vsli:raw="The index at which to begin this slice.">要開始此配量的索引。</param>
      <param name="end" vsli:raw="The end (exclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; of the slice.">配量的結尾 (不含) <see cref="T:System.SequencePosition" />。</param>
      <returns vsli:raw="A slice that consists of items from the &lt;paramref name=&quot;start&quot; /&gt; index to, but not including, the &lt;paramref name=&quot;end&quot; /&gt; sequence position in the current read-only sequence.">配量組成項目從 <paramref name="start" /> 索引到目前唯讀序列中的 <paramref name="end" /> (不含) 序列位置。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int64)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at a specified index and continuing to the end of the read-only sequence.">從目前的 <see cref="T:System.Buffers.ReadOnlySequence`1" /> (從指定的索引開始，一直到唯讀序列的結尾) 形成配量。</summary>
      <param name="start" vsli:raw="The start index at which to begin this slice.">要開始此配量的起始索引。</param>
      <returns vsli:raw="A slice starting at index &lt;paramref name=&quot;start&quot; /&gt; and continuing to the end of the current read-only sequence.">配量從索引 <paramref name="start" /> 開始，且一直到目前唯讀序列的結尾。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int64,System.Int64)">
      <summary vsli:raw="Forms a slice out of the given &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt;, with &lt;paramref name=&quot;length&quot; /&gt; items.">從給定的 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 形成配量 (從 <paramref name="start" /> 開始，包含 <paramref name="length" /> 個項目)。</summary>
      <param name="start" vsli:raw="The index at which to begin this slice.">要開始此配量的索引。</param>
      <param name="length" vsli:raw="The length of the slice.">配量的長度。</param>
      <returns vsli:raw="A slice that consists of &lt;paramref name=&quot;length&quot; /&gt; elements from the current instance starting at index &lt;paramref name=&quot;start&quot; /&gt;.">由 <paramref name="length" /> 元素組成的配量 (從索引 <paramref name="start" /> 開始的目前執行個體)。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int64,System.SequencePosition)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt; and ending at &lt;paramref name=&quot;end&quot; /&gt; (exclusive).">從目前的 <see cref="T:System.Buffers.ReadOnlySequence`1" /> (從 <paramref name="start" /> 開始，到 <paramref name="end" /> (不含) 結束) 形成配量。</summary>
      <param name="start" vsli:raw="The index at which to begin this slice.">要開始此配量的索引。</param>
      <param name="end" vsli:raw="The end (exclusive) of the slice.">配量的結尾 (不含)。</param>
      <returns vsli:raw="A slice that consists of items from the &lt;paramref name=&quot;start&quot; /&gt; index to, but not including, the &lt;paramref name=&quot;end&quot; /&gt; sequence position in the current read-only sequence.">配量組成項目從 <paramref name="start" /> 索引到目前唯讀序列中的 <paramref name="end" /> (不含) 序列位置。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at a specified sequence position and continuing to the end of the read-only sequence.">從目前的 <see cref="T:System.Buffers.ReadOnlySequence`1" /> (從指定的序列位置開始，一直到唯讀序列的結尾) 形成配量。</summary>
      <param name="start" vsli:raw="The starting (inclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; at which to begin this slice.">要開始此配量的起始 (含) <see cref="T:System.SequencePosition" />。</param>
      <returns vsli:raw="A slice starting at sequence position &lt;paramref name=&quot;start&quot; /&gt; and continuing to the end of the current read-only sequence.">配量從序列位置 <paramref name="start" /> 開始，且一直到目前唯讀序列的結尾。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition,System.Int32)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt;, with &lt;paramref name=&quot;length&quot; /&gt; items.">從目前的 <see cref="T:System.Buffers.ReadOnlySequence`1" /> (從 <paramref name="start" /> 開始，包含 <paramref name="length" /> 個項目) 形成配量。</summary>
      <param name="start" vsli:raw="The starting (inclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; at which to begin this slice.">要開始此配量的起始 (含) <see cref="T:System.SequencePosition" />。</param>
      <param name="length" vsli:raw="The length of the slice.">配量的長度。</param>
      <returns vsli:raw="A slice that consists of &lt;paramref name=&quot;length&quot; /&gt; elements from the current instance starting at sequence position &lt;paramref name=&quot;start&quot; /&gt;.">由目前執行個體的 <paramref name="length" /> 個項目組成的配量，從序列位置 <paramref name="start" /> 開始。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition,System.Int64)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt;, with &lt;paramref name=&quot;length&quot; /&gt; items.">從目前的 <see cref="T:System.Buffers.ReadOnlySequence`1" /> (從 <paramref name="start" /> 開始，包含 <paramref name="length" /> 個項目) 形成配量。</summary>
      <param name="start" vsli:raw="The starting (inclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; at which to begin this slice.">要開始此配量的起始 (含) <see cref="T:System.SequencePosition" />。</param>
      <param name="length" vsli:raw="The length of the slice.">配量的長度。</param>
      <returns vsli:raw="A slice that consists of &lt;paramref name=&quot;length&quot; /&gt; elements from the current instance starting at sequence position &lt;paramref name=&quot;start&quot; /&gt;.">由目前執行個體的 <paramref name="length" /> 個項目組成的配量，從序列位置 <paramref name="start" /> 開始。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition,System.SequencePosition)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt; and ending at &lt;paramref name=&quot;end&quot; /&gt; (exclusive).">從目前的 <see cref="T:System.Buffers.ReadOnlySequence`1" /> (從 <paramref name="start" /> 開始，到 <paramref name="end" /> (不含) 結束) 形成配量。</summary>
      <param name="start" vsli:raw="The starting (inclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; at which to begin this slice.">要開始此配量的起始 (含) <see cref="T:System.SequencePosition" />。</param>
      <param name="end" vsli:raw="The ending (exclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; of the slice.">配量的結尾 (不含) <see cref="T:System.SequencePosition" />。</param>
      <returns vsli:raw="A slice that consists of items from the &lt;paramref name=&quot;start&quot; /&gt; sequence position to, but not including, the &lt;paramref name=&quot;end&quot; /&gt; sequence position in the current read-only sequence.">由項目組成的配量，從 <paramref name="start" /> 序列位置到目前唯讀序列中的 <paramref name="end" /> (不含) 序列位置。</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.Start">
      <summary vsli:raw="Gets the position to the start of the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">取得 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 開頭的位置。</summary>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.ToString" />
    <member name="M:System.Buffers.ReadOnlySequence`1.TryGet(System.SequencePosition@,System.ReadOnlyMemory{`0}@,System.Boolean)">
      <summary vsli:raw="Tries to retrieve the next segment after &lt;paramref name=&quot;position&quot; /&gt; and returns a value that indicates whether the operation succeeded.">嘗試擷取 <paramref name="position" /> 之後的下一個區段，並傳回指出作業是否成功的值。</summary>
      <param name="position" vsli:raw="The current sequence position.">目前的序列位置。</param>
      <param name="memory" vsli:raw="A read-only memory span that contains the next segment after &lt;paramref name=&quot;position&quot; /&gt;.">包含 <paramref name="position" /> 之後的下一個區段的唯讀記憶體範圍。</param>
      <param name="advance" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;position&quot; /&gt; should to the beginning of next segment; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="position" /> 應該到下一個區段的開頭，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns vsli:raw="Returns &lt;see langword=&quot;true&quot; /&gt; if the method returned the next segment, or &lt;see langword=&quot;false&quot; /&gt; if the end of the read-only sequence was reached.">如果方法傳回下一個區段，傳回 <see langword="true" />；如果已到達唯讀序列的結尾，則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Buffers.ReadOnlySequenceSegment`1">
      <summary vsli:raw="Represents a linked list of &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; nodes.">代表 <see cref="T:System.ReadOnlyMemory`1" /> 節點的連結清單。</summary>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only sequence segment." />
    </member>
    <member name="M:System.Buffers.ReadOnlySequenceSegment`1.#ctor" />
    <member name="P:System.Buffers.ReadOnlySequenceSegment`1.Memory">
      <summary vsli:raw="Gets or sets a &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; value for the current node.">取得或設定目前節點的 <see cref="T:System.ReadOnlyMemory`1" /> 值。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; value for the current node.">目前節點的值。 <see cref="T:System.ReadOnlyMemory`1" /></returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequenceSegment`1.Next">
      <summary vsli:raw="Gets or sets the next node.">取得或設定下一個節點。</summary>
      <returns vsli:raw="The next node.">下一個節點。</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequenceSegment`1.RunningIndex">
      <summary vsli:raw="Gets or sets the sum of node lengths before the current node.">取得或設定目前節點之前的節點長度總和。</summary>
      <returns vsli:raw="The sum of node lengths before the current node.">節點長度與目前節點的總和。</returns>
    </member>
    <member name="T:System.Buffers.SequenceReader`1">
      <summary vsli:raw="Provides methods for reading binary and text data out of a &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; with a focus on performance and minimal or zero heap allocations.">提供用來從 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 讀取二進位資料和文字資料的方法，並著重於效能以及為最小或零的堆積配置。</summary>
      <typeparam name="T" vsli:raw="The type of the read-only sequence.">唯讀序列的類型。</typeparam>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.#ctor(System.Buffers.ReadOnlySequence{`0})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Buffers.SequenceReader`1&quot; /&gt; over a given &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">在指定的 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 上建立 <see cref="T:System.Buffers.SequenceReader`1" />。</summary>
      <param name="sequence" vsli:raw="The read-only sequence over which to create the &lt;see cref=&quot;T:System.Buffers.SequenceReader`1&quot; /&gt;.">要建立 <see cref="T:System.Buffers.SequenceReader`1" /> 的唯讀序列。</param>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.Advance(System.Int64)">
      <summary vsli:raw="Moves the reader ahead a specified number of items.">依指定的項目數將讀取器向前移。</summary>
      <param name="count" vsli:raw="The number of items to advance.">要前進的項目數量。</param>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePast(`0)">
      <summary vsli:raw="Advances past consecutive instances of the given &lt;paramref name=&quot;value&quot; /&gt;.">前進超過指定的 <paramref name="value" /> 個連續執行個體。</summary>
      <param name="value" vsli:raw="The value past which the reader is to advance.">超過此值，讀取器就會前進。</param>
      <returns vsli:raw="The number of positions the reader has advanced.">讀取器已前進的位置數。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0)">
      <summary vsli:raw="Advances past consecutive instances of either of two specified values.">前進超過兩個指定值之一的連續執行個體。</summary>
      <param name="value0" vsli:raw="The first value to skip.">要跳過的第一個值。</param>
      <param name="value1" vsli:raw="The second value to skip.">要跳過的第二個值。</param>
      <returns vsli:raw="The number of positions the reader has advanced.">讀取器已前進的位置數。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0,`0)">
      <summary vsli:raw="Advances past consecutive instances of any of three specified values.">前進超過三個指定值之一的連續執行個體。</summary>
      <param name="value0" vsli:raw="The first value to skip.">要跳過的第一個值。</param>
      <param name="value1" vsli:raw="The second value to skip.">要跳過的第二個值。</param>
      <param name="value2" vsli:raw="The third value to skip.">要跳過的第三個值。</param>
      <returns vsli:raw="The number of positions the reader has advanced.">讀取器已前進的位置數。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0,`0,`0)">
      <summary vsli:raw="Advances past consecutive instances of any of four specified values.">前進超過四個指定值之一的連續執行個體。</summary>
      <param name="value0" vsli:raw="The first value to skip.">要跳過的第一個值。</param>
      <param name="value1" vsli:raw="The second value to skip.">要跳過的第二個值。</param>
      <param name="value2" vsli:raw="The third value to skip.">要跳過的第三個值。</param>
      <param name="value3" vsli:raw="The fourth value to skip.">要跳過的第四個值。</param>
      <returns vsli:raw="The number of positions the reader has advanced.">讀取器已前進的位置數。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePastAny(System.ReadOnlySpan{`0})">
      <summary vsli:raw="Skips consecutive instances of any of the specified &lt;paramref name=&quot;values&quot; /&gt;.">跳過任何指定的 <paramref name="values" /> 個連續執行個體。</summary>
      <param name="values" vsli:raw="The values to be skipped.">要跳過的值。</param>
      <returns vsli:raw="The number of positions the reader has advanced.">讀取器已前進的位置數。</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Consumed">
      <summary vsli:raw="Gets the total number of &lt;typeparamref name=&quot;T&quot; /&gt; values processed by the reader.">取得讀取器所處理的 <typeparamref name="T" /> 值總數。</summary>
      <returns vsli:raw="The total number of values processed by the reader.">讀取器處理的值總數。</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.CurrentSpan">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Span`1&quot; /&gt; that contains the current segment in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">取得 <see cref="T:System.Span`1" />，其在 <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> 中包含目前的區段。</summary>
      <returns vsli:raw="A span that contains the current segment in the sequence.">包含序列中目前區段的範圍。</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.CurrentSpanIndex">
      <summary vsli:raw="Gets the index in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.CurrentSpan&quot; /&gt;.">取得 <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" /> 中的索引。</summary>
      <returns vsli:raw="The index in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.CurrentSpan&quot; /&gt;.">中的索引<see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />。</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.End">
      <summary vsli:raw="Gets a value that indicates whether there is no more data in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">取得值，指出 <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> 是否不再有任何資料。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; when there is no more data in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />當中<see cref="P:System.Buffers.SequenceReader`1.Sequence" />沒有其他資料時, 則為, <see langword="false" />否則為。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.IsNext(`0,System.Boolean)">
      <summary vsli:raw="Checks whether a specified value is next in the sequence.">檢查所指定值是否為序列中的下一個。</summary>
      <param name="next" vsli:raw="The value to compare the next items to.">和下個項目比較的值。</param>
      <param name="advancePast" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;next&quot; /&gt; values if they are found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示移動超過 <paramref name="next" /> 值 (如果找到)；否則為 <see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the values are next in sequence; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若是序列中的下一組值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.IsNext(System.ReadOnlySpan{`0},System.Boolean)">
      <summary vsli:raw="Checks whether the values specified in a read-only span are next in the sequence.">檢查在唯讀範圍中所指定值是否為序列中的下一個。</summary>
      <param name="next" vsli:raw="The span to compare the next items to.">和下個項目比較的範圍。</param>
      <param name="advancePast" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;next&quot; /&gt; values if they are found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示移動超過 <paramref name="next" /> 值 (如果找到)；否則為 <see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the values are next in sequence; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若是序列中的下一組值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Length">
      <summary vsli:raw="Gets the count of items in the reader's &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">取得讀取器 <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> 中的項目計數。</summary>
      <returns vsli:raw="The count of items in the reader's &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">讀取器<see cref="P:System.Buffers.SequenceReader`1.Sequence" />中的專案計數。</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Position">
      <summary vsli:raw="Gets the current position in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">取得目前在 <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> 中的位置。</summary>
      <returns vsli:raw="The current position in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">中的目前位置<see cref="P:System.Buffers.SequenceReader`1.Sequence" />。</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Remaining">
      <summary vsli:raw="Gets  the remaining items in the reader's &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">取得讀取器 <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> 中的剩餘項目。</summary>
      <returns vsli:raw="The remaining items in the reader's &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;">讀取器中的其餘專案<see cref="P:System.Buffers.SequenceReader`1.Sequence" /></returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.Rewind(System.Int64)">
      <summary vsli:raw="Moves the reader back the specified number of items.">依指定的項目數將讀取器向後移。</summary>
      <param name="count" vsli:raw="The number of items.">項目的數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;count&quot; /&gt; is negative or greater than &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Consumed&quot; /&gt;.">
        <paramref name="count" /> 是負值或大於 <see cref="P:System.Buffers.SequenceReader`1.Consumed" />。</exception>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Sequence">
      <summary vsli:raw="Gets the underlying &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; for the reader.">取得讀取器的基礎 <see cref="T:System.Buffers.ReadOnlySequence`1" />。</summary>
      <returns vsli:raw="The underlying read-only sequence for the reader.">讀取器的基礎唯讀順序。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryAdvanceTo(`0,System.Boolean)">
      <summary vsli:raw="Searches for a specified delimiter and optionally advances past it if it is found.">搜尋指定的分隔符號，並選擇性前進超過它 (如果找到)。</summary>
      <param name="delimiter" vsli:raw="The delimiter to search for.">要搜尋的分隔符號。</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if it is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 則移動超過 <paramref name="delimiter" /> (如果找到)，否則 <see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the given &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到指定的 <paramref name="delimiter" /> 則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryAdvanceToAny(System.ReadOnlySpan{`0},System.Boolean)">
      <summary vsli:raw="Searches for any of a number of specified delimiters and optionally advances past the first one to be found.">搜尋任何數量的指定分隔符號，並選擇性前進超過找到的第一個分隔符號。</summary>
      <param name="delimiters" vsli:raw="The delimiters to search for.">要搜尋的分隔符號。</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the first instance of any of the given &lt;paramref name=&quot;delimiters&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to not move past the delimiter.">
        <see langword="true" /> 表示移動超過任何指定 <paramref name="delimiters" /> 的第一個執行個體； 表示不移動超過分隔符號。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any of the given &lt;paramref name=&quot;delimiters&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若找到任何指定的 <paramref name="delimiters" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryCopyTo(System.Span{`0})">
      <summary vsli:raw="Copies data from the current position to the given destination span if there is enough data to fill it.">如果沒有足夠的資料填入，請將資料從目前位置複製到指定的目的地範圍。</summary>
      <param name="destination" vsli:raw="Destination span to copy to.">作為複製目標位置的目的地範圍。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is enough data to completely fill the &lt;paramref name=&quot;destination&quot; /&gt; span; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如有足夠資料可完全填滿 <paramref name="destination" /> 範圍則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryPeek(`0@)">
      <summary vsli:raw="Peeks at the next value without advancing the reader.">查看下一個值，但不使讀取器前進。</summary>
      <param name="value" vsli:raw="The next value, or the default value if at the end of the reader.">如在讀取器結尾，則為下個值或預設值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is not at its end and the peek operation succeeded; &lt;see langword=&quot;false&quot; /&gt; if at the end of the reader.">如果讀取器不在其結尾且查看作業成功，則為 <see langword="true" />；如在讀取器結尾，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryRead(`0@)">
      <summary vsli:raw="Reads the next value and advance the reader.">讀取下一個值，並使讀取器前進。</summary>
      <param name="value" vsli:raw="The next value, or the default value if at the end of the reader.">如在讀取器結尾，則為下個值或預設值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is not at its end and the read operation succeeded; &lt;see langword=&quot;false&quot; /&gt; if at the end of the reader.">如果讀取器不在其結尾且讀取作業成功，則為 <see langword="true" />；如在讀取器結尾，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,`0,`0,System.Boolean)">
      <summary vsli:raw="Tries to read everything up to the given &lt;paramref name=&quot;delimiter&quot; /&gt;, ignoring delimiters that are preceded by &lt;paramref name=&quot;delimiterEscape&quot; /&gt;.">嘗試讀取所有項目，最多為指定的 <paramref name="delimiter" />，忽略前有 <paramref name="delimiterEscape" /> 的分隔符號。</summary>
      <param name="sequence" vsli:raw="When the method returns, contains the data read, if any.">方法傳回時，包含讀取的資料 (如有)。</param>
      <param name="delimiter" vsli:raw="The delimiter to look for.">要搜尋的分隔符號。</param>
      <param name="delimiterEscape" vsli:raw="A value that indicates that an immediately following &lt;paramref name=&quot;delimiter&quot; /&gt; is to be skipped.">值，指出要跳過的下一個 <paramref name="delimiter" />。</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示移動超過 <paramref name="delimiter" /> (如果找到)；否則為 <see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到 <paramref name="delimiter" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,`0,System.Boolean)">
      <summary vsli:raw="Tries to read everything up to the given &lt;paramref name=&quot;delimiter&quot; /&gt;.">嘗試讀取所有項目，最多為指定的 <paramref name="delimiter" />。</summary>
      <param name="sequence" vsli:raw="When the method returns, contains the data read, if any.">方法傳回時，包含讀取的資料 (如有)。</param>
      <param name="delimiter" vsli:raw="The delimiter to look for.">要搜尋的分隔符號。</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示移動超過 <paramref name="delimiter" /> (如果找到)；否則為 <see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到 <paramref name="delimiter" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,System.ReadOnlySpan{`0},System.Boolean)">
      <summary vsli:raw="Tries to read data until the entire delimiter specified as a read-only span matches.">嘗試讀取資料，直到指定為唯寫範圍的整個分隔符號符合。</summary>
      <param name="sequence" vsli:raw="When the method returns, contains the data read, if any.">方法傳回時，包含讀取的資料 (如有)。</param>
      <param name="delimiter" vsli:raw="A read-only span that contains one or more delimiters.">包含一或多個分隔符號的唯讀範圍。</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示移動超過 <paramref name="delimiter" /> (如果找到)；否則為 <see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到 <paramref name="delimiter" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.ReadOnlySpan{`0}@,`0,`0,System.Boolean)">
      <summary vsli:raw="Tries to read everything up to the given &lt;paramref name=&quot;delimiter&quot; /&gt;, ignoring delimiters that are preceded by &lt;paramref name=&quot;delimiterEscape&quot; /&gt;.">嘗試讀取所有項目，最多為指定的 <paramref name="delimiter" />，忽略前有 <paramref name="delimiterEscape" /> 的分隔符號。</summary>
      <param name="span" vsli:raw="When the method returns, contains the data read, if any.">方法傳回時，包含讀取的資料 (如有)。</param>
      <param name="delimiter" vsli:raw="The delimiter to look for.">要搜尋的分隔符號。</param>
      <param name="delimiterEscape" vsli:raw="A value that indicates that an immediately following &lt;paramref name=&quot;delimiter&quot; /&gt; is to be skipped.">值，指出要跳過的下一個 <paramref name="delimiter" />。</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示移動超過 <paramref name="delimiter" /> (如果找到)；否則為 <see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到 <paramref name="delimiter" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.ReadOnlySpan{`0}@,`0,System.Boolean)">
      <summary vsli:raw="Tries to read everything up to the given &lt;paramref name=&quot;delimiter&quot; /&gt;.">嘗試讀取所有項目，最多為指定的 <paramref name="delimiter" />。</summary>
      <param name="span" vsli:raw="When the method returns, contains the data read, if any.">方法傳回時，包含讀取的資料 (如有)。</param>
      <param name="delimiter" vsli:raw="The delimiter to look for.">要搜尋的分隔符號。</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示移動超過 <paramref name="delimiter" /> (如果找到)；否則為 <see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到 <paramref name="delimiter" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadToAny(System.Buffers.ReadOnlySequence{`0}@,System.ReadOnlySpan{`0},System.Boolean)">
      <summary vsli:raw="Tries to read everything up to any of the specified &lt;paramref name=&quot;delimiters&quot; /&gt;.">嘗試讀取所有項目，最多為任何指定的 <paramref name="delimiters" />。</summary>
      <param name="sequence" vsli:raw="When the method returns, contains the data read, if any.">方法傳回時，包含讀取的資料 (如有)。</param>
      <param name="delimiters" vsli:raw="The delimiters to look for.">要搜尋的分隔符號。</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the first found instance of any of the given &lt;paramref name=&quot;delimiters&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示移動超過任何指定 <paramref name="delimiters" /> 中找到的第一個執行個體；否則為 <see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any of the &lt;paramref name=&quot;delimiters&quot; /&gt; were found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到任何 <paramref name="delimiters" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadToAny(System.ReadOnlySpan{`0}@,System.ReadOnlySpan{`0},System.Boolean)">
      <summary vsli:raw="Tries to read everything up to any of the specified &lt;paramref name=&quot;delimiters&quot; /&gt;.">嘗試讀取所有項目，最多為任何指定的 <paramref name="delimiters" />。</summary>
      <param name="span" vsli:raw="When the method returns, contains the data read, if any.">方法傳回時，包含讀取的資料 (如有)。</param>
      <param name="delimiters" vsli:raw="The delimiters to look for.">要搜尋的分隔符號。</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the first found instance of any of the given &lt;paramref name=&quot;delimiters&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示移動超過任何指定 <paramref name="delimiters" /> 中找到的第一個執行個體；否則為 <see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any of the &lt;paramref name=&quot;delimiters&quot; /&gt; were found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果找到任何 <paramref name="delimiters" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.UnreadSpan">
      <summary vsli:raw="Gets the unread portion of the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.CurrentSpan&quot; /&gt;.">取得 <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" /> 的未讀取部分。</summary>
      <returns vsli:raw="The unread portion of the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.CurrentSpan&quot; /&gt;.">的未讀取部分<see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />。</returns>
    </member>
    <member name="T:System.Buffers.SequenceReaderExtensions">
      <summary vsli:raw="Provides extended functionality for the &lt;see cref=&quot;T:System.Buffers.SequenceReader`1&quot; /&gt; class that allows reading of endian specific numeric values from binary data.">提供 <see cref="T:System.Buffers.SequenceReader`1" /> 類別的擴充功能，可允許從二進位資料讀取位元組排列法特定數值。</summary>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadBigEndian(System.Buffers.SequenceReader{System.Byte},System.Int16@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int16&quot; /&gt; as big endian.">嘗試以位元組由大到小的方式讀取 <see cref="T:System.Int16" />。</summary>
      <param name="reader" vsli:raw="The byte sequence reader instance from which the value is to be read.">要從中讀取值的位元組序列讀取器執行個體。</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as big endian.">當此方法傳回時，會以位元組由大到小的方式，從位元組序列讀取器讀取值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">如果讀取作業成功，則為 <see langword="true" />；如果 <see cref="T:System.Int16" /> 沒有足夠的資料，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadBigEndian(System.Buffers.SequenceReader{System.Byte},System.Int32@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int32&quot; /&gt; as big endian.">嘗試以位元組由大到小的方式讀取 <see cref="T:System.Int32" />。</summary>
      <param name="reader" vsli:raw="The byte sequence reader from which to read the value.">要從中讀取值的位元組序列讀取器。</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as big endian.">當此方法傳回時，會以位元組由大到小的方式，從位元組序列讀取器讀取值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">如果讀取作業成功，則為 <see langword="true" />；如果 <see cref="T:System.Int32" /> 沒有足夠的資料，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadBigEndian(System.Buffers.SequenceReader{System.Byte},System.Int64@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int64&quot; /&gt; as big endian.">嘗試以位元組由大到小的方式讀取 <see cref="T:System.Int64" />。</summary>
      <param name="reader" vsli:raw="The byte sequence reader instance from which the value is to be read.">要從中讀取值的位元組序列讀取器執行個體。</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as big endian.">當此方法傳回時，會以位元組由大到小的方式，從位元組序列讀取器讀取值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">如果讀取作業成功，則為 <see langword="true" />；如果 <see cref="T:System.Int64" /> 沒有足夠的資料，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadLittleEndian(System.Buffers.SequenceReader{System.Byte},System.Int16@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int16&quot; /&gt; as little endian.">嘗試以位元組由小到大的方式讀取 <see cref="T:System.Int16" />。</summary>
      <param name="reader" vsli:raw="The byte sequence reader instance from which the value is to be read.">要從中讀取值的位元組序列讀取器執行個體。</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as little endian.">當此方法傳回時，會以位元組由小到大的方式，從位元組序列讀取器讀取值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">如果讀取作業成功，則為 <see langword="true" />；如果 <see cref="T:System.Int16" /> 沒有足夠的資料，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadLittleEndian(System.Buffers.SequenceReader{System.Byte},System.Int32@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int32&quot; /&gt; as little endian.">嘗試以位元組由小到大的方式讀取 <see cref="T:System.Int32" />。</summary>
      <param name="reader" vsli:raw="The byte sequence reader instance from which the value is to be read.">要從中讀取值的位元組序列讀取器執行個體。</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as little endian.">當此方法傳回時，會以位元組由小到大的方式，從位元組序列讀取器讀取值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">如果讀取作業成功，則為 <see langword="true" />；如果 <see cref="T:System.Int32" /> 沒有足夠的資料，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadLittleEndian(System.Buffers.SequenceReader{System.Byte},System.Int64@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int64&quot; /&gt; as little endian.">嘗試以位元組由小到大的方式讀取 <see cref="T:System.Int64" />。</summary>
      <param name="reader" vsli:raw="The byte sequence reader instance from which the value is to be read.">要從中讀取值的位元組序列讀取器執行個體。</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as little endian.">當此方法傳回時，會以位元組由小到大的方式，從位元組序列讀取器讀取值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">如果讀取作業成功，則為 <see langword="true" />；如果 <see cref="T:System.Int64" /> 沒有足夠的資料，則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Buffers.StandardFormat">
      <summary vsli:raw="Represents a standard format string without using an actual string.">代表不使用實際字串的標準格式字串。</summary>
    </member>
    <member name="M:System.Buffers.StandardFormat.#ctor(System.Char,System.Byte)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; structure.">初始化 <see cref="T:System.Buffers.StandardFormat" /> 結構的新執行個體。</summary>
      <param name="symbol" vsli:raw="A type-specific format specifier, such as 'G', 'D', or 'X'.">具有特定類型的格式指定名稱，例如 'G'、'D' 或 'X'。</param>
      <param name="precision" vsli:raw="An optional precision ranging from 0 to 99, or the special value &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt; (the default).">選擇性的有效位數範圍為 0 到 99，或特殊值 <see cref="F:System.Buffers.StandardFormat.NoPrecision" /> (預設值)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;symbol&quot; /&gt; is not &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt;, and its value is greater than &lt;see cref=&quot;F:System.Buffers.StandardFormat.MaxPrecision&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;symbol&quot; /&gt; cannot be converted to a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">
        <paramref name="symbol" /> 不是 <see cref="F:System.Buffers.StandardFormat.NoPrecision" />，且其值大於 <see cref="F:System.Buffers.StandardFormat.MaxPrecision" />。
-或-
<paramref name="symbol" />無法轉換成 <see cref="T:System.Byte" />。</exception>
    </member>
    <member name="M:System.Buffers.StandardFormat.Equals(System.Buffers.StandardFormat)">
      <summary vsli:raw="Returns a value that indicates whether the specified &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; is equal to the current instance.">傳回值，這個值指出指定的 <see cref="T:System.Buffers.StandardFormat" /> 是否等於目前的執行個體。</summary>
      <param name="other" vsli:raw="The format to compare to the current instance.">要與目前執行個體相比較的格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果兩個執行個體相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the specified object is a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; object that is equal to the current instance.">傳回值，這個值指出指定的物件是否為等於目前執行個體的 <see cref="T:System.Buffers.StandardFormat" /> 物件。</summary>
      <param name="obj" vsli:raw="An object to compare to the current instance.">要與目前執行個體比較的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果兩個執行個體相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">傳回這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="The hash code for this instance.">這個執行個體的雜湊碼。</returns>
    </member>
    <member name="P:System.Buffers.StandardFormat.HasPrecision">
      <summary vsli:raw="Gets a value that indicates whether a format has a defined precision.">取得值，這個值指出格式是否具有已定義的有效位數。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the format has a precision other than &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />如果格式具有以外的有效位數<see cref="F:System.Buffers.StandardFormat.NoPrecision" />, 則為, <see langword="false" />否則為。</returns>
    </member>
    <member name="P:System.Buffers.StandardFormat.IsDefault">
      <summary vsli:raw="Gets a value that indicates whether the current instance is a default format.">取得值，這個值指出目前的執行個體是否為預設格式。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance is a default format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />如果目前的實例是預設格式, 則為,否則為<see langword="false" />。</returns>
    </member>
    <member name="F:System.Buffers.StandardFormat.MaxPrecision">
      <summary vsli:raw="Defines the maximum valid precision value.">定義最大有效位數值。</summary>
    </member>
    <member name="F:System.Buffers.StandardFormat.NoPrecision">
      <summary vsli:raw="Indicates that a format doesn't use a precision or that the precision is unspecified.">指出格式不會使用有效位數，或未指定有效位數。</summary>
    </member>
    <member name="M:System.Buffers.StandardFormat.op_Equality(System.Buffers.StandardFormat,System.Buffers.StandardFormat)">
      <summary vsli:raw="Returns a value that indicates whether two &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instances are equal.">傳回值，這個值表示兩個 <see cref="T:System.Buffers.StandardFormat" /> 執行個體是否相等。</summary>
      <param name="left" vsli:raw="The first format to compare.">要比較的第一個格式。</param>
      <param name="right" vsli:raw="The second format to compare.">要比較的第二個格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果兩個執行個體相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.op_Implicit(System.Char)~System.Buffers.StandardFormat">
      <summary vsli:raw="Converts a character to a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instance using &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt; precision.">使用 <see cref="F:System.Buffers.StandardFormat.NoPrecision" /> 有效位數將字元轉換為 <see cref="T:System.Buffers.StandardFormat" /> 執行個體。</summary>
      <param name="symbol" vsli:raw="The character to convert to a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; value.">要轉換為 <see cref="T:System.Buffers.StandardFormat" /> 值的字元。</param>
      <returns vsli:raw="A format with a &lt;see cref=&quot;P:System.Buffers.StandardFormat.Symbol&quot; /&gt; property equal to &lt;paramref name=&quot;symbol&quot; /&gt; and a &lt;see cref=&quot;P:System.Buffers.StandardFormat.Precision&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt;.">
        <see cref="P:System.Buffers.StandardFormat.Symbol" /> 屬性等於 <paramref name="symbol" /> 且 <see cref="P:System.Buffers.StandardFormat.Precision" /> 屬性等於 <see cref="F:System.Buffers.StandardFormat.NoPrecision" /> 的格式。</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.op_Inequality(System.Buffers.StandardFormat,System.Buffers.StandardFormat)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instances are unequal.">判斷兩個 <see cref="T:System.Buffers.StandardFormat" /> 執行個體是否不相等。</summary>
      <param name="left" vsli:raw="The first format to compare.">要比較的第一個格式。</param>
      <param name="right" vsli:raw="The second format to compare.">要比較的第二個格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two formats are unequal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果兩個格式不相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.Parse(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Converts a &lt;see langword=&quot;ReadOnlySpan&amp;lt;System.Char&amp;gt;&quot; /&gt; into a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instance using &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt; precision.">使用 <see cref="F:System.Buffers.StandardFormat.NoPrecision" /> 有效位數將 <see langword="ReadOnlySpan&lt;System.Char&gt;" /> 轉換為 <see cref="T:System.Buffers.StandardFormat" /> 執行個體。</summary>
      <param name="format" vsli:raw="A read-only span that contains the character to parse.">唯讀範圍，其中包含要剖析的字元。</param>
      <returns vsli:raw="A value whose &lt;see cref=&quot;P:System.Buffers.StandardFormat.Symbol&quot; /&gt; property value is the character in &lt;paramref name=&quot;format&quot; /&gt; and whose &lt;see cref=&quot;P:System.Buffers.StandardFormat.Precision&quot; /&gt; property value is &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt;.">
        <see cref="P:System.Buffers.StandardFormat.Symbol" /> 屬性值為 <paramref name="format" /> 中的字元，且其 <see cref="P:System.Buffers.StandardFormat.Precision" /> 屬性值為 <see cref="F:System.Buffers.StandardFormat.NoPrecision" /> 的值。</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.Parse(System.String)">
      <summary vsli:raw="Converts a classic .NET standard format string to a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instance.">將傳統 .NET 標準格式字串轉換為 <see cref="T:System.Buffers.StandardFormat" /> 執行個體。</summary>
      <param name="format" vsli:raw="A classic .NET standard format string.">傳統 .NET 標準格式字串。</param>
      <returns vsli:raw="A format.">格式。</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;format&quot; /&gt; is not a valid standard format string.">
        <paramref name="format" /> 不是有效的標準格式字串。</exception>
    </member>
    <member name="P:System.Buffers.StandardFormat.Precision">
      <summary vsli:raw="Gets the precision component of the format.">取得格式的有效位數元件。</summary>
      <returns vsli:raw="The precision component, which can be &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt;, or can range from 0 to 9.">精確度元件可以是<see cref="F:System.Buffers.StandardFormat.NoPrecision" />, 或的範圍可以從0到9。</returns>
    </member>
    <member name="P:System.Buffers.StandardFormat.Symbol">
      <summary vsli:raw="Gets the character component of the format.">取得格式的字元元件。</summary>
      <returns vsli:raw="The character component of the format.">格式的字元元件。</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.ToString">
      <summary vsli:raw="Returns the string representation of this format.">傳回此格式的字串表示。</summary>
      <returns vsli:raw="The string representation of this format.">此格式的字串表示。</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.TryParse(System.ReadOnlySpan{System.Char},System.Buffers.StandardFormat@)">
      <summary vsli:raw="Attempts to convert a &lt;see langword=&quot;ReadOnlySpan&amp;lt;Char&amp;gt;&quot; /&gt; to a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instance and returns a value that indicates whether the parsing operation succeeded.">嘗試將 <see langword="ReadOnlySpan&lt;Char&gt;" /> 轉換為 <see cref="T:System.Buffers.StandardFormat" /> 執行個體並傳回一個值，該值指出剖析作業是否成功。</summary>
      <param name="format" vsli:raw="A read-only span that contains the character to convert.">唯讀範圍，其中包含要轉換的字元。</param>
      <param name="result" vsli:raw="When the method returns, contains the parsed &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instance if the operation was successful.">當方法傳回時，如果作業成功，則會包含已剖析的 <see cref="T:System.Buffers.StandardFormat" /> 執行個體。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the parsing operation was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果剖析作業成功則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Buffers.Text.Base64">
      <summary>在二進位資料與以 base 64 表示的 UTF-8 編碼文字之間轉換。</summary>
    </member>
    <member name="M:System.Buffers.Text.Base64.DecodeFromUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean)">
      <summary>將以 base 64 表示的 UTF-8 編碼文字範圍解碼為二進位資料。 如果輸入不是 4 的倍數，就會盡可能地解碼為最接近 4 的倍數。</summary>
      <param name="utf8">輸入範圍，包含需要解碼的 base 64 格式 UTF-8 編碼文字。</param>
      <param name="bytes">輸出範圍，包含作業的結果，亦即，解碼的二進位資料。</param>
      <param name="bytesConsumed">作業期間使用的輸入位元組數。 如有必要，這可以用來分割後續呼叫的輸入。</param>
      <param name="bytesWritten">寫入至輸出範圍的位元組數。 如有必要，這可以用來分割後續呼叫的輸出。</param>
      <param name="isFinalBlock">
        <see langword="true" /> (預設) 如果輸入範圍包含要解碼的整個資料。 <see langword="false" /> 如果輸入範圍包含後續還有更多資料的部分資料。</param>
      <returns>指出解碼作業狀態的其中一個列舉值。</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.DecodeFromUtf8InPlace(System.Span{System.Byte},System.Int32@)">
      <summary>將 base 64 (就地) 格式 UTF-8 編碼文字的範圍解碼為二進位資料。 解碼的二進位輸出小於輸入中包含的文字資料 (此作業會壓縮資料)。 如果輸入不是 4 的倍數，此方法將不會解碼任何資料。</summary>
      <param name="buffer">輸入範圍，包含需要解碼的 base-64 文字資料。</param>
      <param name="bytesWritten">寫入緩衝區的位元組數目。</param>
      <returns>指出解碼作業狀態的其中一個列舉值。</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.EncodeToUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean)">
      <summary>將二進位資料的範圍編碼為以 base 64 表示的 UTF-8 編碼文字。</summary>
      <param name="bytes">輸入範圍，包含需要編碼的二進位資料。</param>
      <param name="utf8">輸出範圍，包含作業的結果，亦即，base 64 格式的 UTF-8 編碼文字。</param>
      <param name="bytesConsumed">作業期間使用的輸入位元組數。 如有必要，這可以用來分割後續呼叫的輸入。</param>
      <param name="bytesWritten">寫入至輸出範圍的位元組數。 如有必要，這可以用來分割後續呼叫的輸出。</param>
      <param name="isFinalBlock">
        <see langword="true" /> (預設) 如果輸入範圍包含要編碼的整個資料。 <see langword="false" /> 如果輸入範圍包含後續還有更多資料的部分資料。</param>
      <returns>指出編碼作業狀態的其中一個列舉值。</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.EncodeToUtf8InPlace(System.Span{System.Byte},System.Int32,System.Int32@)">
      <summary>將二進位資料 (就地) 的範圍編碼為以 base 64 表示的 UTF-8 編碼文字。 編碼的文字輸出大於輸入中包含的二進位資料 (此作業會擴大資料)。</summary>
      <param name="buffer">輸入範圍，包含需要編碼的二進位資料。 此方法會執行就地轉換，因此必須要夠大，才能儲存作業的結果。</param>
      <param name="dataLength">包含在需要編碼的緩衝區中的二進位資料位元組數。 這個值必須小於緩衝區長度。</param>
      <param name="bytesWritten">寫入緩衝區的位元組數目。</param>
      <returns>指出編碼作業狀態的其中一個列舉值。</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.GetMaxDecodedFromUtf8Length(System.Int32)">
      <summary>如果您要以指定的長度解碼位元組範圍內的 base-64 編碼文字，則傳回結果的長度上限 (位元組)。</summary>
      <param name="length">位元組範圍的大小。</param>
      <returns>結果的長度上限 (位元組)。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 小於 0。</exception>
    </member>
    <member name="M:System.Buffers.Text.Base64.GetMaxEncodedToUtf8Length(System.Int32)">
      <summary>如果您要以指定的長度編碼位元組範圍內的二進位資料編碼文字，則傳回結果的長度上限 (位元組)。</summary>
      <param name="length">位元組範圍的大小。</param>
      <returns>結果的長度上限 (位元組)。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 小於 0 或大於 1610612733 (因為編碼會將資料擴大 4/3)。</exception>
    </member>
    <member name="T:System.Buffers.Text.Utf8Formatter">
      <summary vsli:raw="Provides static methods to format common data types as Utf8 strings.">提供將一般資料型別格式化成 UTF8 字串的靜態方法。</summary>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Boolean,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; as a UTF8 string.">將 <see cref="T:System.Boolean" /> 格式化成 UTF8 字串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要寫入 UTF8 格式值的緩衝。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法傳回時，會包含經過格式化文字的位元組長度。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的標準格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">若格式化作業成功，則為 <see langword="true" />；若 <paramref name="buffer" /> 過小，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Byte,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Byte&quot; /&gt; as a UTF8 string.">將 <see cref="T:System.Byte" /> 格式化成 UTF8 字串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要寫入 UTF8 格式值的緩衝。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法傳回時，會包含經過格式化文字的位元組長度。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的標準格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">若格式化作業成功，則為 <see langword="true" />；若 <paramref name="buffer" /> 過小，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.DateTime,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; as a UTF8 string.">將 <see cref="T:System.DateTime" /> 格式化成 UTF8 字串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要寫入 UTF8 格式值的緩衝。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法傳回時，會包含經過格式化文字的位元組長度。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的標準格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">若格式化作業成功，則為 <see langword="true" />；若 <paramref name="buffer" /> 過小，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.DateTimeOffset,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; as a UTF8 string.">將 <see cref="T:System.DateTimeOffset" /> 格式化成 UTF8 字串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要寫入 UTF8 格式值的緩衝。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法傳回時，會包含經過格式化文字的位元組長度。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的標準格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">若格式化作業成功，則為 <see langword="true" />；若 <paramref name="buffer" /> 過小，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Decimal,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; as a UTF8 string.">將 <see cref="T:System.Decimal" /> 格式化成 UTF8 字串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要寫入 UTF8 格式值的緩衝。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法傳回時，會包含經過格式化文字的位元組長度。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的標準格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">若格式化作業成功，則為 <see langword="true" />；若 <paramref name="buffer" /> 過小，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Double,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Double&quot; /&gt; as a UTF8 string.">將 <see cref="T:System.Double" /> 格式化成 UTF8 字串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要寫入 UTF8 格式值的緩衝。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法傳回時，會包含經過格式化文字的位元組長度。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的標準格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">若格式化作業成功，則為 <see langword="true" />；若 <paramref name="buffer" /> 過小，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Guid,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Guid&quot; /&gt; as a UTF8 string.">將 <see cref="T:System.Guid" /> 格式化成 UTF8 字串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要寫入 UTF8 格式值的緩衝。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法傳回時，會包含經過格式化文字的位元組長度。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的標準格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">若格式化作業成功，則為 <see langword="true" />；若 <paramref name="buffer" /> 過小，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Int16,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats an &lt;see cref=&quot;T:System.Int16&quot; /&gt; as a UTF8 string.">將 <see cref="T:System.Int16" /> 格式化成 UTF8 字串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要寫入 UTF8 格式值的緩衝。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法傳回時，會包含經過格式化文字的位元組長度。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的標準格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">若格式化作業成功，則為 <see langword="true" />；若 <paramref name="buffer" /> 過小，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Int32,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats an &lt;see cref=&quot;T:System.Int32&quot; /&gt; as a UTF8 string.">將 <see cref="T:System.Int32" /> 格式化成 UTF8 字串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要寫入 UTF8 格式值的緩衝。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法傳回時，會包含經過格式化文字的位元組長度。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的標準格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">若格式化作業成功，則為 <see langword="true" />；若 <paramref name="buffer" /> 過小，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Int64,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats an &lt;see cref=&quot;T:System.Int64&quot; /&gt; as a UTF8 string.">將 <see cref="T:System.Int64" /> 格式化成 UTF8 字串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要寫入 UTF8 格式值的緩衝。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法傳回時，會包含經過格式化文字的位元組長度。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的標準格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">若格式化作業成功，則為 <see langword="true" />；若 <paramref name="buffer" /> 過小，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.SByte,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats an &lt;see cref=&quot;T:System.SByte&quot; /&gt; as a UTF8 string.">將 <see cref="T:System.SByte" /> 格式化成 UTF8 字串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要寫入 UTF8 格式值的緩衝。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法傳回時，會包含經過格式化文字的位元組長度。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的標準格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">若格式化作業成功，則為 <see langword="true" />；若 <paramref name="buffer" /> 過小，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Single,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Single&quot; /&gt; as a UTF8 string.">將 <see cref="T:System.Single" /> 格式化成 UTF8 字串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要寫入 UTF8 格式值的緩衝。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法傳回時，會包含經過格式化文字的位元組長度。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的標準格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">若格式化作業成功，則為 <see langword="true" />；若 <paramref name="buffer" /> 過小，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.TimeSpan,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; as a UTF8 string.">將 <see cref="T:System.TimeSpan" /> 格式化成 UTF8 字串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要寫入 UTF8 格式值的緩衝。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法傳回時，會包含經過格式化文字的位元組長度。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的標準格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">若格式化作業成功，則為 <see langword="true" />；若 <paramref name="buffer" /> 過小，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.UInt16,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; as a UTF8 string.">將 <see cref="T:System.UInt16" /> 格式化成 UTF8 字串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要寫入 UTF8 格式值的緩衝。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法傳回時，會包含經過格式化文字的位元組長度。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的標準格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">若格式化作業成功，則為 <see langword="true" />；若 <paramref name="buffer" /> 過小，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.UInt32,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; as a UTF8 string.">將 <see cref="T:System.UInt32" /> 格式化成 UTF8 字串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要寫入 UTF8 格式值的緩衝。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法傳回時，會包含經過格式化文字的位元組長度。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的標準格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">若格式化作業成功，則為 <see langword="true" />；若 <paramref name="buffer" /> 過小，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.UInt64,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; as a UTF8 string.">將 <see cref="T:System.UInt64" /> 格式化成 UTF8 字串。</summary>
      <param name="value" vsli:raw="The value to format.">要格式化的值。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">要寫入 UTF8 格式值的緩衝。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">方法傳回時，會包含經過格式化文字的位元組長度。</param>
      <param name="format" vsli:raw="The standard format to use.">要使用的標準格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">若格式化作業成功，則為 <see langword="true" />；若 <paramref name="buffer" /> 過小，則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Buffers.Text.Utf8Parser">
      <summary vsli:raw="Provides static methods to parse Utf8 strings to common data types.">提供將 UTF8 字串剖析成一般資料型別的靜態方法。</summary>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Boolean@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; at the start of a Utf8 string.">從 UTF8 字串的開頭剖析 <see cref="T:System.Boolean" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要剖析的 UTF8 字串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">方法傳回時，若剖析作業成功，則會包含從 <paramref name="source" /> 剖析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">若剖析作業成功，則在方法傳回時，會包含剖析子字串的位元組長度。 若方法失敗，則 <paramref name="bytesConsumed" /> 會設為 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">UTF8 字串的預期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">若成功，則為 <see langword="true" />；若字串語法不正確或發生溢位或反向溢位，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Byte@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Byte&quot; /&gt; at the start of a Utf8 string.">從 UTF8 字串的開頭剖析 <see cref="T:System.Byte" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要剖析的 UTF8 字串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">方法傳回時，若剖析作業成功，則會包含從 <paramref name="source" /> 剖析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">若剖析作業成功，則在方法傳回時，會包含剖析子字串的位元組長度。 若方法失敗，則 <paramref name="bytesConsumed" /> 會設為 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">UTF8 字串的預期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">若成功，則為 <see langword="true" />；若字串語法不正確或發生溢位或反向溢位，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTime@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; at the start of a Utf8 string.">從 UTF8 字串的開頭剖析 <see cref="T:System.DateTime" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要剖析的 UTF8 字串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">方法傳回時，若剖析作業成功，則會包含從 <paramref name="source" /> 剖析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">若剖析作業成功，則在方法傳回時，會包含剖析子字串的位元組長度。 若方法失敗，則 <paramref name="bytesConsumed" /> 會設為 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">UTF8 字串的預期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">若成功，則為 <see langword="true" />；若字串語法不正確或發生溢位或反向溢位，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTimeOffset@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; at the start of a Utf8 string.">從 UTF8 字串的開頭剖析 <see cref="T:System.DateTimeOffset" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要剖析的 UTF8 字串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">方法傳回時，若剖析作業成功，則會包含從 <paramref name="source" /> 剖析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">若剖析作業成功，則在方法傳回時，會包含剖析子字串的位元組長度。 若方法失敗，則 <paramref name="bytesConsumed" /> 會設為 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">UTF8 字串的預期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">若成功，則為 <see langword="true" />；若字串語法不正確或發生溢位或反向溢位，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Decimal@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; at the start of a Utf8 string.">從 UTF8 字串的開頭剖析 <see cref="T:System.Decimal" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要剖析的 UTF8 字串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">方法傳回時，若剖析作業成功，則會包含從 <paramref name="source" /> 剖析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">若剖析作業成功，則在方法傳回時，會包含剖析子字串的位元組長度。 若方法失敗，則 <paramref name="bytesConsumed" /> 會設為 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">UTF8 字串的預期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">若成功，則為 <see langword="true" />；若字串語法不正確或發生溢位或反向溢位，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Double@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Double&quot; /&gt; at the start of a Utf8 string.">從 UTF8 字串的開頭剖析 <see cref="T:System.Double" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要剖析的 UTF8 字串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">方法傳回時，若剖析作業成功，則會包含從 <paramref name="source" /> 剖析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">若剖析作業成功，則在方法傳回時，會包含剖析子字串的位元組長度。 若方法失敗，則 <paramref name="bytesConsumed" /> 會設為 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">UTF8 字串的預期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">若成功，則為 <see langword="true" />；若字串語法不正確或發生溢位或反向溢位，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Guid@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Guid&quot; /&gt; at the start of a Utf8 string.">從 UTF8 字串的開頭剖析 <see cref="T:System.Guid" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要剖析的 UTF8 字串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">方法傳回時，若剖析作業成功，則會包含從 <paramref name="source" /> 剖析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">若剖析作業成功，則在方法傳回時，會包含剖析子字串的位元組長度。 若方法失敗，則 <paramref name="bytesConsumed" /> 會設為 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">UTF8 字串的預期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">若成功，則為 <see langword="true" />；若字串語法不正確或發生溢位或反向溢位，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int16@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses an &lt;see cref=&quot;T:System.Int16&quot; /&gt; at the start of a Utf8 string.">從 UTF8 字串的開頭剖析 <see cref="T:System.Int16" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要剖析的 UTF8 字串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">方法傳回時，若剖析作業成功，則會包含從 <paramref name="source" /> 剖析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">若剖析作業成功，則在方法傳回時，會包含剖析子字串的位元組長度。 若方法失敗，則 <paramref name="bytesConsumed" /> 會設為 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">UTF8 字串的預期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">若成功，則為 <see langword="true" />；若字串語法不正確或發生溢位或反向溢位，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int32@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses an &lt;see cref=&quot;T:System.Int32&quot; /&gt; at the start of a Utf8 string.">從 UTF8 字串的開頭剖析 <see cref="T:System.Int32" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要剖析的 UTF8 字串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">方法傳回時，若剖析作業成功，則會包含從 <paramref name="source" /> 剖析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">若剖析作業成功，則在方法傳回時，會包含剖析子字串的位元組長度。 若方法失敗，則 <paramref name="bytesConsumed" /> 會設為 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">UTF8 字串的預期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">若成功，則為 <see langword="true" />；若字串語法不正確或發生溢位或反向溢位，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int64@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses an &lt;see cref=&quot;T:System.Int64&quot; /&gt; at the start of a Utf8 string.">從 UTF8 字串的開頭剖析 <see cref="T:System.Int64" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要剖析的 UTF8 字串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">方法傳回時，若剖析作業成功，則會包含從 <paramref name="source" /> 剖析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">若剖析作業成功，則在方法傳回時，會包含剖析子字串的位元組長度。 若方法失敗，則 <paramref name="bytesConsumed" /> 會設為 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">UTF8 字串的預期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">若成功，則為 <see langword="true" />；若字串語法不正確或發生溢位或反向溢位，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.SByte@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses an &lt;see cref=&quot;T:System.SByte&quot; /&gt; at the start of a Utf8 string.">從 UTF8 字串的開頭剖析 <see cref="T:System.SByte" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要剖析的 UTF8 字串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">方法傳回時，若剖析作業成功，則會包含從 <paramref name="source" /> 剖析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">若剖析作業成功，則在方法傳回時，會包含剖析子字串的位元組長度。 若方法失敗，則 <paramref name="bytesConsumed" /> 會設為 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">UTF8 字串的預期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">若成功，則為 <see langword="true" />；若字串語法不正確或發生溢位或反向溢位，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Single@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Single&quot; /&gt; at the start of a Utf8 string.">從 UTF8 字串的開頭剖析 <see cref="T:System.Single" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要剖析的 UTF8 字串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">方法傳回時，若剖析作業成功，則會包含從 <paramref name="source" /> 剖析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">若剖析作業成功，則在方法傳回時，會包含剖析子字串的位元組長度。 若方法失敗，則 <paramref name="bytesConsumed" /> 會設為 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">UTF8 字串的預期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">若成功，則為 <see langword="true" />；若字串語法不正確或發生溢位或反向溢位，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.TimeSpan@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; at the start of a Utf8 string.">從 UTF8 字串的開頭剖析 <see cref="T:System.TimeSpan" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要剖析的 UTF8 字串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">方法傳回時，若剖析作業成功，則會包含從 <paramref name="source" /> 剖析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">若剖析作業成功，則在方法傳回時，會包含剖析子字串的位元組長度。 若方法失敗，則 <paramref name="bytesConsumed" /> 會設為 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">UTF8 字串的預期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">若成功，則為 <see langword="true" />；若字串語法不正確或發生溢位或反向溢位，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt16@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; at the start of a Utf8 string.">從 UTF8 字串的開頭剖析 <see cref="T:System.UInt16" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要剖析的 UTF8 字串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">方法傳回時，若剖析作業成功，則會包含從 <paramref name="source" /> 剖析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">若剖析作業成功，則在方法傳回時，會包含剖析子字串的位元組長度。 若方法失敗，則 <paramref name="bytesConsumed" /> 會設為 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">UTF8 字串的預期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">若成功，則為 <see langword="true" />；若字串語法不正確或發生溢位或反向溢位，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt32@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; at the start of a Utf8 string.">從 UTF8 字串的開頭剖析 <see cref="T:System.UInt32" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要剖析的 UTF8 字串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">方法傳回時，若剖析作業成功，則會包含從 <paramref name="source" /> 剖析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">若剖析作業成功，則在方法傳回時，會包含剖析子字串的位元組長度。 若方法失敗，則 <paramref name="bytesConsumed" /> 會設為 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">UTF8 字串的預期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">若成功，則為 <see langword="true" />；若字串語法不正確或發生溢位或反向溢位，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt64@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; at the start of a Utf8 string.">從 UTF8 字串的開頭剖析 <see cref="T:System.UInt64" />。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">要剖析的 UTF8 字串。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">方法傳回時，若剖析作業成功，則會包含從 <paramref name="source" /> 剖析的值。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">若剖析作業成功，則在方法傳回時，會包含剖析子字串的位元組長度。 若方法失敗，則 <paramref name="bytesConsumed" /> 會設為 0。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">UTF8 字串的預期格式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">若成功，則為 <see langword="true" />；若字串語法不正確或發生溢位或反向溢位，則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.MemoryExtensions">
      <summary vsli:raw="Provides extension methods for the memory- and span-related types, such as &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;, &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;, &lt;see cref=&quot;T:System.Span`1&quot; /&gt;, and &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt;.">提供記憶體和範圍相關類型的擴充方法，例如 <see cref="T:System.Memory`1" />、<see cref="T:System.ReadOnlyMemory`1" />、<see cref="T:System.Span`1" /> 和 <see cref="T:System.ReadOnlySpan`1" />。</summary>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String)">
      <summary vsli:raw="Creates a new &lt;see langword=&quot;ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt; over the portion of the target string.">在目標字串部分上建立新 <see langword="ReadOnlyMemory&lt;Char&gt;" />。</summary>
      <param name="text" vsli:raw="The target string.">目標字串。</param>
      <returns vsli:raw="The read-only character memory representation of the string, or &lt;see langword=&quot;default&quot; /&gt; if &lt;paramref name=&quot;text&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">字串的唯讀字元記憶體表示；如果 <paramref name="text" /> 為 <see langword="null" />，則為 <see langword="default" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Index)">
      <summary vsli:raw="Creates a new &lt;see langword=&quot;ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt; over a portion of the target string starting at a specified index.">在起始於指定索引的目標字串部分上建立新 <see langword="ReadOnlyMemory&lt;Char&gt;" />。</summary>
      <param name="text" vsli:raw="The target string.">目標字串。</param>
      <param name="startIndex" vsli:raw="The index at which to begin this slice.">要開始此配量的索引。</param>
      <returns vsli:raw="The read-only character memory representation of the string.">字串的唯讀字元記憶體表示。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Int32)">
      <summary vsli:raw="Creates a new &lt;see langword=&quot;ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt; over a portion of the target string starting at a specified character position.">在起始於指定字元位置的目標字串部分上建立新 <see langword="ReadOnlyMemory&lt;Char&gt;" />。</summary>
      <param name="text" vsli:raw="The target string.">目標字串。</param>
      <param name="start" vsli:raw="The index at which to begin this slice.">要開始此配量的索引。</param>
      <returns vsli:raw="The read-only character memory representation of the string, or &lt;see langword=&quot;default&quot; /&gt; if &lt;paramref name=&quot;text&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">字串的唯讀字元記憶體表示；如果 <paramref name="text" /> 為 <see langword="null" />，則為 <see langword="default" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt; is not in the range of &lt;paramref name=&quot;text&quot; /&gt; (&lt;paramref name=&quot;start&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;c&gt;text.Length&lt;/c&gt;).">
        <paramref name="start" /> 不在 <paramref name="text" /> 的範圍內 (<paramref name="start" /> 為 &lt; 0 或 &gt; <c>text.Length</c>)。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new &lt;see langword=&quot;ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt; over a portion of the target string beginning at a specified position with a length.">在起始於指定位置且具有一個長度的目標字串部分上建立新 <see langword="ReadOnlyMemory&lt;Char&gt;" />。</summary>
      <param name="text" vsli:raw="The target string.">目標字串。</param>
      <param name="start" vsli:raw="The index at which to begin this slice.">要開始此配量的索引。</param>
      <param name="length" vsli:raw="The desired length for the slice.">配量所需的長度。</param>
      <returns vsli:raw="The read-only character memory representation of the string, or &lt;see langword=&quot;default&quot; /&gt; if &lt;paramref name=&quot;text&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">字串的唯讀字元記憶體表示；如果 <paramref name="text" /> 為 <see langword="null" />，則為 <see langword="default" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;text&quot; /&gt;.">
        <paramref name="start" />、<paramref name="length" /> 或 <paramref name="start" /> + <paramref name="length" /> 不在 <paramref name="text" /> 的範圍內。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Range)">
      <summary vsli:raw="Creates a new &lt;see langword=&quot;ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt; over a specified range of the target string.">在指定的目標字串範圍上建立新 <see langword="ReadOnlyMemory&lt;Char&gt;" />。</summary>
      <param name="text" vsli:raw="The target string.">目標字串。</param>
      <param name="range" vsli:raw="The range that indicates the start and length of the sliced string.">表示已切割字串開頭和長度的範圍。</param>
      <returns vsli:raw="The read-only character memory representation of the string.">字串的唯讀字元記憶體表示。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[])">
      <summary vsli:raw="Creates a new memory region over the target array.">在目標陣列上建立新記憶體區域。</summary>
      <param name="array" vsli:raw="The array to convert.">要轉換的陣列。</param>
      <typeparam name="T" vsli:raw="The type of the array.">陣列的類型。</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">完整或部分陣列的記憶體表示。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Index)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array starting at a specified index to the end of the array.">在起始於指定索引到陣列結尾的目標陣列部分上建立新記憶體區域。</summary>
      <param name="array" vsli:raw="The array to convert.">要轉換的陣列。</param>
      <param name="startIndex" vsli:raw="The first position of the array.">陣列的第一個位置。</param>
      <typeparam name="T" vsli:raw="The type of the array.">陣列的類型。</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">完整或部分陣列的記憶體表示。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Int32)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array starting at a specified position to the end of the array.">在起始於指定位置到陣列結尾的目標陣列部分上建立新記憶體區域。</summary>
      <param name="array" vsli:raw="The target array.">目標陣列。</param>
      <param name="start" vsli:raw="The index at which to begin the memory.">要開始記憶體的索引。</param>
      <typeparam name="T" vsli:raw="The type of the array.">陣列的類型。</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">完整或部分陣列的記憶體表示。</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">
        <paramref name="array" /> 是 Covariant，且陣列的類型不完全是 <see langword="T[]" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt; index less than 0 or greater than &lt;see langword=&quot;array.Length&quot; /&gt;.">
        <paramref name="start" /> 索引小於 0 或大於 <see langword="array.Length" />。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array beginning at a specified position with a specified length.">在起始於指定位置且具有指定長度的目標陣列部分上建立新記憶體區域。</summary>
      <param name="array" vsli:raw="The target array.">目標陣列。</param>
      <param name="start" vsli:raw="The index at which to begin the memory region.">要開始記憶體區域的索引。</param>
      <param name="length" vsli:raw="The number of items in the memory region.">記憶體區域中的項目數。</param>
      <typeparam name="T" vsli:raw="The type of the array.">陣列的類型。</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">完整或部分陣列的記憶體表示。</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">
        <paramref name="array" /> 是 Covariant，且陣列的類型不完全是 <see langword="T[]" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="start" />、<paramref name="length" /> 或 <paramref name="start" /> + <paramref name="length" /> 不在 <paramref name="array" /> 的範圍內。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Range)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array beginning at inclusive start index of the range and ending at the exclusive end index of the range.">在起始於範圍開始索引 (含) 且結束於範圍結束索引 (不含) 的目標陣列部分上建立新記憶體區域。</summary>
      <param name="array" vsli:raw="The array to convert.">要轉換的陣列。</param>
      <param name="range" vsli:raw="The range to convert from the array.">要從陣列轉換的範圍。</param>
      <typeparam name="T" vsli:raw="The type of the array.">陣列的類型。</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">完整或部分陣列的記憶體表示。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0})">
      <summary vsli:raw="Creates a new memory region over the portion of the target array segment.">在目標陣列區段部分上建立新記憶體區域。</summary>
      <param name="segment" vsli:raw="The segment to convert.">要轉換的區段。</param>
      <typeparam name="T" vsli:raw="The type of the segment.">區段的類型。</typeparam>
      <returns vsli:raw="The memory representation of the segment.">區段的記憶體表示。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0},System.Int32)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array segment starting at a specified position to the end of the segment.">在起始於指定位置到區段結尾的目標陣列區段部分上建立新記憶體區域。</summary>
      <param name="segment" vsli:raw="The target array segment.">目標陣列區段。</param>
      <param name="start" vsli:raw="The index at which to begin the memory.">要開始記憶體的索引。</param>
      <typeparam name="T" vsli:raw="The type of the array.">陣列的類型。</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">完整或部分陣列的記憶體表示。</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;segment&quot; /&gt; is covariant, and the type of &lt;paramref name=&quot;segment&quot; /&gt; is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">
        <paramref name="segment" /> 是 Covariant，且 <paramref name="segment" /> 的型別不完全是 <see langword="T[]" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt; is less than 0 or greater than &lt;see langword=&quot;segment.Count&quot; /&gt;.">
        <paramref name="start" /> 小於 0 或大於 <see langword="segment.Count" />。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0},System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array segment beginning at a specified position with a specified length.">在起始於指定位置且具有指定長度的目標陣列區段部分上建立新記憶體區域。</summary>
      <param name="segment" vsli:raw="The target array segment.">目標陣列區段。</param>
      <param name="start" vsli:raw="The index at which to begin the memory.">要開始記憶體的索引。</param>
      <param name="length" vsli:raw="The number of items in the memory.">記憶體中的項目數。</param>
      <typeparam name="T" vsli:raw="The type of the array.">陣列的類型。</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">完整或部分陣列的記憶體表示。</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;segment&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">
        <paramref name="segment" /> 是 Covariant，且陣列的類型不完全是 <see langword="T[]" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;segment&quot; /&gt;.">
        <paramref name="start" />、<paramref name="length" /> 或 <paramref name="start" /> + <paramref name="length" /> 不在 <paramref name="segment" /> 的範圍內。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan(System.String)">
      <summary vsli:raw="Creates a new read-only span over a string.">在起始於指定位置且具有指定字元數的目標字串部分上建立新唯讀範圍。</summary>
      <param name="text" vsli:raw="The target string.">目標字串。</param>
      <returns vsli:raw="The read-only span representation of the string.">字串的唯讀範圍表示。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan(System.String,System.Int32)">
      <summary vsli:raw="Creates a new read-only span over a portion of the target string from a specified position to the end of the string.">在起始於指定位置到字串結尾的目標字串部分上建立新唯讀範圍。</summary>
      <param name="text" vsli:raw="The target string.">目標字串。</param>
      <param name="start" vsli:raw="The index at which to begin this slice.">要開始此配量的索引。</param>
      <returns vsli:raw="The read-only span representation of the string.">字串的唯讀範圍表示。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Thrown when &lt;paramref name=&quot;text&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="text" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt; is less than 0 or greater than &lt;see langword=&quot;text.Length&quot; /&gt;.">
        <paramref name="start" /> 小於 0 或大於 <see langword="text.Length" />。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan(System.String,System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new read-only span over a portion of the target string from a specified position for a specified number of characters.">在字串上建立新唯讀範圍。</summary>
      <param name="text" vsli:raw="The target string.">目標字串。</param>
      <param name="start" vsli:raw="The index at which to begin this slice.">要開始此配量的索引。</param>
      <param name="length" vsli:raw="The desired length for the slice.">配量所需的長度。</param>
      <returns vsli:raw="The read-only span representation of the string.">字串的唯讀範圍表示。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;text&quot; /&gt;.">
        <paramref name="start" />、<paramref name="length" /> 或 <paramref name="start" /> + <paramref name="length" /> 不在 <paramref name="text" /> 的範圍內。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[])">
      <summary vsli:raw="Creates a new span over a target array.">在目標陣列上建立新範圍。</summary>
      <param name="array" vsli:raw="The array to convert.">要轉換的陣列。</param>
      <typeparam name="T" vsli:raw="The type of the array.">陣列的類型。</typeparam>
      <returns vsli:raw="The span representation of the array.">陣列的範圍表示。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Index)">
      <summary vsli:raw="Creates a new span over the portion of the target array defined by an &lt;see cref=&quot;T:System.Index&quot; /&gt; value.">在由 <see cref="T:System.Index" /> 值定義的目標陣列部分上建立新範圍。</summary>
      <param name="array" vsli:raw="The array to convert.">要轉換的陣列。</param>
      <param name="startIndex" vsli:raw="The starting index.">起始索引。</param>
      <typeparam name="T" vsli:raw="The array type.">陣列類型。</typeparam>
      <returns vsli:raw="The span representation of the array.">陣列的範圍表示。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Int32)">
      <summary vsli:raw="Creates a new span over a portion of the target array starting at a specified position to the end of the array.">在起始於指定位置到陣列結尾的目標陣列部分上建立新範圍。</summary>
      <param name="array" vsli:raw="The array to convert.">要轉換的陣列。</param>
      <param name="start" vsli:raw="The initial index from which the array will be converted.">要從中轉換陣列的初始索引。</param>
      <typeparam name="T" vsli:raw="The type of the array.">陣列的類型。</typeparam>
      <returns vsli:raw="The span representation of the array.">陣列的範圍表示。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new span over the portion of the target array beginning at a specified position for a specified length.">在起始於指定位置且具有指定長度的目標陣列部分上建立新範圍。</summary>
      <param name="array" vsli:raw="The target array.">目標陣列。</param>
      <param name="start" vsli:raw="The index at which to begin the span.">要開始範圍的索引。</param>
      <param name="length" vsli:raw="The number of items in the span.">範圍中的項目數。</param>
      <typeparam name="T" vsli:raw="The type of the array.">陣列的類型。</typeparam>
      <returns vsli:raw="The span representation of the array.">陣列的範圍表示。</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;&quot;.">
        <paramref name="array" /> 是 Covariant，且陣列的類型不完全是 <see langword="T[]" />"。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;text&quot; /&gt;.">
        <paramref name="start" />、<paramref name="length" /> 或 <paramref name="start" /> + <paramref name="length" /> 不在 <paramref name="text" /> 的範圍內。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Range)">
      <summary vsli:raw="Creates a new span over a portion of a target array defined by a &lt;see cref=&quot;T:System.Range&quot; /&gt; value.">在由 <see cref="T:System.Range" /> 值定義的目標陣列部分上建立新範圍。</summary>
      <param name="array" vsli:raw="The array to convert.">要轉換的陣列。</param>
      <param name="range" vsli:raw="The range of the array to convert.">要轉換的陣列範圍。</param>
      <typeparam name="T" vsli:raw="The type of the array.">陣列的類型。</typeparam>
      <returns vsli:raw="The span representation of the array.">陣列的範圍表示。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0})">
      <summary vsli:raw="Creates a new span over a target array segment.">在目標陣列區段上建立新範圍。</summary>
      <param name="segment" vsli:raw="The array segment to convert.">要轉換的陣列區段。</param>
      <typeparam name="T" vsli:raw="The type of the array segment.">陣列區段的類型。</typeparam>
      <returns vsli:raw="The span representation of the array segment.">陣列區段的範圍表示。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Index)">
      <summary vsli:raw="Creates a new span over a portion of the target array segment beginning at a specified index and ending at the end of the segment.">在起始於指定索引且結束於區段結尾的目標陣列區段部分上建立新範圍。</summary>
      <param name="segment" vsli:raw="The target array segment.">目標陣列區段。</param>
      <param name="startIndex" vsli:raw="The index at which to begin the Span.">要開始範圍的索引。</param>
      <typeparam name="T" vsli:raw="The type of the array segment.">陣列區段的類型。</typeparam>
      <returns vsli:raw="The span representation of the array segment.">陣列區段的範圍表示。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Int32)">
      <summary vsli:raw="Creates a new span over a portion of a target array segment from a specified position to the end of the segment.">在起始於指定位置到區段結尾的目標陣列區段部分上建立新範圍。</summary>
      <param name="segment" vsli:raw="The target array segment.">目標陣列區段。</param>
      <param name="start" vsli:raw="The index at which to begin the san.">要開始範圍的索引。</param>
      <typeparam name="T" vsli:raw="The type of the array segment.">陣列區段的類型。</typeparam>
      <returns vsli:raw="The span representation of the array segment.">陣列區段的範圍表示。</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;segment&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">
        <paramref name="segment" /> 是 Covariant，且陣列的類型不完全是 <see langword="T[]" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt; is less than 0 or greater than &lt;see langword=&quot;segment.Count&quot; /&gt;.">
        <paramref name="start" /> 小於 0 或大於 <see langword="segment.Count" />。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new span over a portion of a target array segment from a specified position for a specified length.">在起始於指定位置且具有指定長度的目標陣列區段部分上建立新範圍。</summary>
      <param name="segment" vsli:raw="The target array segment.">目標陣列區段。</param>
      <param name="start" vsli:raw="The index at which to begin the span.">要開始範圍的索引。</param>
      <param name="length" vsli:raw="The number of items in the span.">範圍中的項目數。</param>
      <typeparam name="T" vsli:raw="The type of the array segment.">陣列區段的類型。</typeparam>
      <returns vsli:raw="The span representation of the array.">陣列的範圍表示。</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;segment&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">
        <paramref name="segment" /> 是 Covariant，且陣列的類型不完全是 <see langword="T[]" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;segment&quot; /&gt;.">
        <paramref name="start" />、<paramref name="length" /> 或 <paramref name="start" /> + <paramref name="length" /> 不在 <paramref name="segment" /> 的範圍內。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Range)">
      <summary vsli:raw="Creates a new span over a portion of a target array segment using the range start and end indexes.">在使用範圍開始和結束索引的目標陣列區段部分上建立新範圍</summary>
      <param name="segment" vsli:raw="The target array segment.">目標陣列區段。</param>
      <param name="range" vsli:raw="The range which has start and end indexes to use for slicing the array.">具有開始和結束索引以用於切割陣列的範圍。</param>
      <typeparam name="T" vsli:raw="The type of the array segment.">陣列區段的類型。</typeparam>
      <returns vsli:raw="The span representation of the array segment.">陣列區段的範圍表示。</returns>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``1(System.ReadOnlySpan{``0},System.IComparable{``0})">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; for a value using the specified &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface.">使用指定的 <see cref="T:System.IComparable`1" /> 泛型介面，在整個已排序的 <see cref="T:System.ReadOnlySpan`1" /> 中搜尋值。</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; to search.">要搜尋的已排序 <see cref="T:System.ReadOnlySpan`1" />。</param>
      <param name="comparable" vsli:raw="The &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; to use when comparing.">比較時所要使用的 <see cref="T:System.IComparable`1" />。</param>
      <typeparam name="T" vsli:raw="The element type of the span.">範圍的元素類型。</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;comparable&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;comparable&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;comparable&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.ReadOnlySpan`1.Length&quot; /&gt;.">如果有找到 <paramref name="comparable" />，則為已排序的 <paramref name="span" /> 中 <paramref name="comparable" /> 之以零為起始的索引，否則便為負數，此負數為大於 <paramref name="comparable" /> 的下一個項目索引之位元補數，或者，如果沒有更大的項目，則為 <see cref="P:System.ReadOnlySpan`1.Length" /> 的位元補數。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparable&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparable" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``1(System.Span{``0},System.IComparable{``0})">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; for a value using the specified &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface.">使用指定的 <see cref="T:System.IComparable`1" /> 泛型介面，在整個已排序的 <see cref="T:System.Span`1" /> 中搜尋值。</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; to search.">要搜尋的已排序 <see cref="T:System.Span`1" />。</param>
      <param name="comparable" vsli:raw="The &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; to use when comparing.">比較時所要使用的 <see cref="T:System.IComparable`1" />。</param>
      <typeparam name="T" vsli:raw="The element type of the span.">範圍的元素類型。</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;comparable&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;comparable&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;comparable&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Span`1.Length&quot; /&gt;.">如果有找到 <paramref name="comparable" />，則為已排序的 <paramref name="span" /> 中 <paramref name="comparable" /> 之以零為起始的索引，否則便為負數，此負數為大於 <paramref name="comparable" /> 的下一個項目索引之位元補數，或者，如果沒有更大的項目，則為 <see cref="P:System.Span`1.Length" /> 的位元補數。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparable&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparable" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.ReadOnlySpan{``0},``0,``1)">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; for a specified value using the specified &lt;typeparamref name=&quot;TComparer&quot; /&gt; generic type.">使用指定的 <typeparamref name="TComparer" /> 泛型型別，在整個已排序的 <see cref="T:System.ReadOnlySpan`1" /> 中搜尋指定的值。</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; to search.">要搜尋的已排序 <see cref="T:System.ReadOnlySpan`1" />。</param>
      <param name="value" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要尋找的物件。 參考類型的值可以是 <see langword="null" />。</param>
      <param name="comparer" vsli:raw="The &lt;typeparamref name=&quot;TComparer&quot; /&gt; to use when comparing.">比較時所要使用的 <typeparamref name="TComparer" />。</param>
      <typeparam name="T" vsli:raw="The element type of the span.">範圍的元素類型。</typeparam>
      <typeparam name="TComparer" vsli:raw="The specific type of &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">的特定類型<see cref="T:System.Collections.Generic.IComparer`1" />。</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;value&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;value&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.ReadOnlySpan`1.Length&quot; /&gt;.">如果有找到 <paramref name="value" />，則為已排序的 <paramref name="span" /> 中 <paramref name="value" /> 之以零為起始的索引，否則便為負數，此負數為大於 <paramref name="value" /> 的下一個項目索引之位元補數，或者，如果沒有更大的項目，則為 <see cref="P:System.ReadOnlySpan`1.Length" /> 的位元補數。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparer" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.ReadOnlySpan{``0},``1)">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; for a value using the specified &lt;typeparamref name=&quot;TComparable&quot; /&gt; generic type.">使用指定的 <typeparamref name="TComparable" /> 泛型型別，在整個已排序的 <see cref="T:System.ReadOnlySpan`1" /> 中搜尋值。</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; to search.">要搜尋的已排序 <see cref="T:System.ReadOnlySpan`1" />。</param>
      <param name="comparable" vsli:raw="The &lt;typeparamref name=&quot;TComparable&quot; /&gt; to use when comparing.">比較時所要使用的 <typeparamref name="TComparable" />。</param>
      <typeparam name="T" vsli:raw="The element type of the span.">範圍的元素類型。</typeparam>
      <typeparam name="TComparable" vsli:raw="The specific type of &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt;.">的特定類型<see cref="T:System.IComparable`1" />。</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;comparable&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;comparable&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;comparable&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.ReadOnlySpan`1.Length&quot; /&gt;.">如果有找到 <paramref name="comparable" />，則為已排序的 <paramref name="span" /> 中 <paramref name="comparable" /> 之以零為起始的索引，否則便為負數，此負數為大於 <paramref name="comparable" /> 的下一個項目索引之位元補數，或者，如果沒有更大的項目，則為 <see cref="P:System.ReadOnlySpan`1.Length" /> 的位元補數。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparable&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparable" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.Span{``0},``0,``1)">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; for a specified value using the specified &lt;typeparamref name=&quot;TComparer&quot; /&gt; generic type.">使用指定的 <typeparamref name="TComparer" /> 泛型型別，在整個已排序的 <see cref="T:System.Span`1" /> 中搜尋指定的值。</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; to search.">要搜尋的已排序 <see cref="T:System.Span`1" />。</param>
      <param name="value" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">要尋找的物件。 參考類型的值可以是 <see langword="null" />。</param>
      <param name="comparer" vsli:raw="The &lt;typeparamref name=&quot;TComparer&quot; /&gt; to use when comparing.">比較時所要使用的 <typeparamref name="TComparer" />。</param>
      <typeparam name="T" vsli:raw="The element type of the span.">範圍的元素類型。</typeparam>
      <typeparam name="TComparer" vsli:raw="The specific type of &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">的特定類型<see cref="T:System.Collections.Generic.IComparer`1" />。</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;value&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;value&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Span`1.Length&quot; /&gt;.">如果有找到 <paramref name="value" />，則為已排序的 <paramref name="span" /> 中 <paramref name="value" /> 之以零為起始的索引，否則便為負數，此負數為大於 <paramref name="value" /> 的下一個項目索引之位元補數，或者，如果沒有更大的項目，則為 <see cref="P:System.Span`1.Length" /> 的位元補數。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparer" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.Span{``0},``1)">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; for a value using the specified &lt;typeparamref name=&quot;TComparable&quot; /&gt; generic type.">使用指定的 <typeparamref name="TComparable" /> 泛型型別，在整個已排序的 <see cref="T:System.Span`1" /> 中搜尋值。</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; to search.">要搜尋的已排序 <see cref="T:System.Span`1" />。</param>
      <param name="comparable" vsli:raw="The &lt;typeparamref name=&quot;TComparable&quot; /&gt; to use when comparing.">比較時所要使用的 <typeparamref name="TComparable" />。</param>
      <typeparam name="T" vsli:raw="The element type of the span.">範圍的元素類型。</typeparam>
      <typeparam name="TComparable" vsli:raw="The specific type of &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt;.">的特定類型<see cref="T:System.IComparable`1" />。</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;comparable&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;comparable&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;comparable&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Span`1.Length&quot; /&gt;.">如果有找到 <paramref name="comparable" />，則為已排序的 <paramref name="span" /> 中 <paramref name="comparable" /> 之以零為起始的索引，否則便為負數，此負數為大於 <paramref name="comparable" /> 的下一個項目索引之位元補數，或者，如果沒有更大的項目，則為 <see cref="P:System.Span`1.Length" /> 的位元補數。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparable&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparable" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.MemoryExtensions.CompareTo(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Compares one character span with another using a specified string comparison, and returns an integer that indicates their relative position in the sort order.">使用指定的字串比較來比較一個字元範圍與另一個字元範圍，並傳回一個整數，表示兩者在排序次序中的相對位置。</summary>
      <param name="span" vsli:raw="The source span.">來源範圍。</param>
      <param name="other" vsli:raw="The value to compare with the source span.">要與來源範圍比較的值。</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt; are compared.">決定如何比較 <paramref name="span" /> 和 <paramref name="other" /> 的列舉值。</param>
      <returns vsli:raw="A signed integer that indicates the relative order of &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt;:&lt;br /&gt;   - If less than 0, &lt;paramref name=&quot;span&quot; /&gt; precedes than &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If 0, &lt;paramref name=&quot;span&quot; /&gt; equals &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If greater than 0, &lt;paramref name=&quot;span&quot; /&gt; follows &lt;paramref name=&quot;other&quot; /&gt;.">帶正負號的整數，表示 <paramref name="span" /> 和 <paramref name="other" /> 的相對順序：   - 如果小於 0，則 <paramref name="span" /> 在 <paramref name="other" /> 之前。   - 如果為 0，<paramref name="span" /> 等於 <paramref name="other" />。   - 如果大於 0，則 <paramref name="span" /> 在 <paramref name="other" /> 之後。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Indicates whether a specified value occurs within a read-only character span.">指出指定的值是否出現在唯讀字元範圍內。</summary>
      <param name="span" vsli:raw="The source span.">來源範圍。</param>
      <param name="value" vsli:raw="The value to seek within the source span.">要在來源範圍內搜尋的值。</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how the characters in &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; are compared.">決定如何比較 <paramref name="span" /> 中字元和 <paramref name="value" /> 的列舉值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; occurs within the span, &lt;see langword=&quot;false&quot; /&gt; otherwise.">若 <paramref name="value" /> 出現在範圍內，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Contains``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Indicates whether a specified value is found in a read-only span. Values are compared using IEquatable{T}.Equals(T).">指出是否在唯讀範圍中找到指定的值。 值是使用 IEquatable{T}.Equals(T) 來進行比較。</summary>
      <param name="span" vsli:raw="The span to search.">要搜尋的範圍。</param>
      <param name="value" vsli:raw="The value to search for.">要搜尋的值。</param>
      <typeparam name="T" vsli:raw="The type of the span.">範圍的類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if found, &lt;see langword=&quot;false&quot; /&gt; otherwise.">若找到，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Contains``1(System.Span{``0},``0)">
      <summary vsli:raw="Indicates whether a specified value is found in a span. Values are compared using IEquatable{T}.Equals(T).">指出是否在範圍中找到指定的值。 值是使用 IEquatable{T}.Equals(T) 來進行比較。</summary>
      <param name="span" vsli:raw="The span to search.">要搜尋的範圍。</param>
      <param name="value" vsli:raw="The value to search for.">要搜尋的值。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">範圍中元素的類型。</typeparam>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if found, &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt; otherwise.">若找到，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.CopyTo``1(``0[],System.Memory{``0})">
      <summary vsli:raw="Copies the contents of the array into a memory region.">將陣列的內容複製到記憶體區域。</summary>
      <param name="source" vsli:raw="The array to copy items from.">要從中複製項目的陣列。</param>
      <param name="destination" vsli:raw="The memory to copy items into.">要將項目複製到其中的記憶體。</param>
      <typeparam name="T" vsli:raw="The type of the array.">陣列的類型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination is shorter than the source array.">目的地比來源陣列短。</exception>
    </member>
    <member name="M:System.MemoryExtensions.CopyTo``1(``0[],System.Span{``0})">
      <summary vsli:raw="Copies the contents of the array into the span.">將陣列的內容複製到範圍。</summary>
      <param name="source" vsli:raw="The array to copy items from.">要從中複製項目的陣列。</param>
      <param name="destination" vsli:raw="The span to copy items into.">要將項目複製到其中的範圍。</param>
      <typeparam name="T" vsli:raw="The type of the array.">陣列的類型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination Span is shorter than the source array.">目的地範圍比來源陣列短。</exception>
    </member>
    <member name="M:System.MemoryExtensions.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Determines whether the end of the &lt;paramref name=&quot;span&quot; /&gt; matches the specified &lt;paramref name=&quot;value&quot; /&gt; when compared using the specified &lt;paramref name=&quot;comparisonType&quot; /&gt; option.">判斷當使用指定的 <paramref name="comparisonType" /> 選項進行比較時，<paramref name="span" /> 結尾是否符合指定的 <paramref name="value" />。</summary>
      <param name="span" vsli:raw="The source span.">來源範圍。</param>
      <param name="value" vsli:raw="The sequence to compare to the end of the source span.">要和來源範圍結尾比較的序列。</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; are compared.">決定如何比較 <paramref name="span" /> 和 <paramref name="value" /> 的列舉值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the end of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若 <paramref name="value" /> 符合 <paramref name="span" /> 的結尾．則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.EndsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether the specified sequence appears at the end of a read-only span.">判斷所指定序列是否出現在唯讀範圍的結尾。</summary>
      <param name="span" vsli:raw="The source span.">來源範圍。</param>
      <param name="value" vsli:raw="The sequence to compare to the end of the source span.">要和來源範圍結尾比較的序列。</param>
      <typeparam name="T" vsli:raw="The type of the span.">範圍的類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the end of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若 <paramref name="value" /> 符合 <paramref name="span" /> 的結尾，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.EndsWith``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether the specified sequence appears at the end of a span.">判斷所指定序列是否出現在範圍的結尾。</summary>
      <param name="span" vsli:raw="The source span.">來源範圍。</param>
      <param name="value" vsli:raw="The sequence to compare to the end of the source span.">要和來源範圍結尾比較的序列。</param>
      <typeparam name="T" vsli:raw="The type of the span.">範圍的類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the end of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若 <paramref name="value" /> 符合 <paramref name="span" /> 的結尾，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.EnumerateRunes(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Returns an enumeration of &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; from the provided read-only span.">從所提供唯讀範圍傳回 <see cref="T:System.Text.Rune" /> 的列舉。</summary>
      <param name="span" vsli:raw="The source span.">來源範圍。</param>
      <returns vsli:raw="A rune enumerator.">Rune 列舉值。</returns>
    </member>
    <member name="M:System.MemoryExtensions.EnumerateRunes(System.Span{System.Char})">
      <summary vsli:raw="Returns an enumeration of &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; from the provided span.">從所提供範圍傳回 <see cref="T:System.Text.Rune" /> 的列舉。</summary>
      <param name="span" vsli:raw="The source span.">來源範圍。</param>
      <returns vsli:raw="A rune enumerator.">Rune 列舉值。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Equals(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Determines whether this &lt;paramref name=&quot;span&quot; /&gt; and the specified &lt;paramref name=&quot;other&quot; /&gt; span have the same characters when compared using the specified &lt;paramref name=&quot;comparisonType&quot; /&gt; option.">判斷當使用指定的 <paramref name="comparisonType" /> 選項進行比較時，這個 <paramref name="span" /> 和指定的 <paramref name="other" /> 範圍是否具有相同字元。</summary>
      <param name="span" vsli:raw="The source span.">來源範圍。</param>
      <param name="other" vsli:raw="The value to compare with the source span.">要與來源範圍比較的值。</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt; are compared.">決定如何比較 <paramref name="span" /> 和 <paramref name="other" /> 的列舉值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if equal, &lt;see langword=&quot;false&quot; /&gt; otherwise.">若相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Reports the zero-based index of the first occurrence of the specified &lt;paramref name=&quot;value&quot; /&gt; in the current &lt;paramref name=&quot;span&quot; /&gt;.">報告目前 <paramref name="span" /> 中指定 <paramref name="value" /> 第一個出現位置的以零起始索引。</summary>
      <param name="span" vsli:raw="The source span.">來源範圍。</param>
      <param name="value" vsli:raw="The value to seek within the source span.">要在來源範圍內搜尋的值。</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; are compared.">決定如何比較 <paramref name="span" /> 和 <paramref name="value" /> 的列舉值。</param>
      <returns vsli:raw="The index of the occurrence of the value in the span.">範圍中值出現位置的索引。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Searches for the specified value and returns the index of its first occurrence. Values are compared using IEquatable{T}.Equals(T).">搜尋指定的值，並傳回第一個出現位置的索引。 值是使用 IEquatable{T}.Equals(T) 來進行比較。</summary>
      <param name="span" vsli:raw="The span to search.">要搜尋的範圍。</param>
      <param name="value" vsli:raw="The value to search for.">要搜尋的值。</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">範圍和值的類型。</typeparam>
      <returns vsli:raw="The index of the occurrence of the value in the span. If not found, returns -1.">範圍中值出現位置的索引。 如果找不到，則傳回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the specified sequence and returns the index of its first occurrence. Values are compared using IEquatable{T}.Equals(T).">搜尋指定的序列，並傳回第一個出現位置的索引。 值是使用 IEquatable{T}.Equals(T) 來進行比較。</summary>
      <param name="span" vsli:raw="The span to search.">要搜尋的範圍。</param>
      <param name="value" vsli:raw="The sequence to search for.">要搜尋的序列。</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">範圍和值的類型。</typeparam>
      <returns vsli:raw="The index of the occurrence of the value in the span. If not found, returns -1.">範圍中值出現位置的索引。 如果找不到，則傳回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.Span{``0},``0)">
      <summary vsli:raw="Searches for the specified value and returns the index of its first occurrence. Values are compared using IEquatable{T}.Equals(T).">搜尋指定的值，並傳回第一個出現位置的索引。 值是使用 IEquatable{T}.Equals(T) 來進行比較。</summary>
      <param name="span" vsli:raw="The span to search.">要搜尋的範圍。</param>
      <param name="value" vsli:raw="The value to search for.">要搜尋的值。</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">範圍和值的類型。</typeparam>
      <returns vsli:raw="The index of the occurrence of the value in the span. If not found, returns -1.">範圍中值出現位置的索引。 如果找不到，則傳回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the specified sequence and returns the index of its first occurrence. Values are compared using IEquatable{T}.Equals(T).">搜尋指定的序列，並傳回第一個出現位置的索引。 值是使用 IEquatable{T}.Equals(T) 來進行比較。</summary>
      <param name="span" vsli:raw="The span to search.">要搜尋的範圍。</param>
      <param name="value" vsli:raw="The sequence to search for.">要搜尋的序列。</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">範圍和值的類型。</typeparam>
      <returns vsli:raw="The index of the occurrence of the value in the span. If not found, returns -1.">範圍中值出現位置的索引。 如果找不到，則傳回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">搜尋任何指定值的第一個索引，類似於使用邏輯 OR 運算子呼叫 IndexOf 多次。</summary>
      <param name="span" vsli:raw="The span to search.">要搜尋的範圍。</param>
      <param name="value0" vsli:raw="One of the values to search for.">要搜尋的其中一個值。</param>
      <param name="value1" vsli:raw="One of the values to search for.">要搜尋的其中一個值。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">範圍和值的類型。</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">範圍中任何值出現位置的第一個索引。 如果找不到，則傳回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">搜尋任何指定值的第一個索引，類似於使用邏輯 OR 運算子呼叫 IndexOf 多次。</summary>
      <param name="span" vsli:raw="The span to search.">要搜尋的範圍。</param>
      <param name="value0" vsli:raw="One of the values to search for.">要搜尋的其中一個值。</param>
      <param name="value1" vsli:raw="One of the values to search for.">要搜尋的其中一個值。</param>
      <param name="value2" vsli:raw="One of the values to search for.">要搜尋的其中一個值。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">範圍和值的類型。</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">範圍中任何值出現位置的第一個索引。 如果找不到，則傳回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">搜尋任何指定值的第一個索引，類似於使用邏輯 OR 運算子呼叫 IndexOf 多次。</summary>
      <param name="span" vsli:raw="The span to search.">要搜尋的範圍。</param>
      <param name="values" vsli:raw="The set of values to search for.">要搜尋的值集合。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">範圍和值的類型。</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">範圍中任何值出現位置的第一個索引。 如果找不到，則傳回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},``0,``0)">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">搜尋任何指定值的第一個索引，類似於使用邏輯 OR 運算子呼叫 IndexOf 多次。</summary>
      <param name="span" vsli:raw="The span to search.">要搜尋的範圍。</param>
      <param name="value0" vsli:raw="One of the values to search for.">要搜尋的其中一個值。</param>
      <param name="value1" vsli:raw="One of the values to search for.">要搜尋的其中一個值。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">範圍和值的類型。</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">範圍中任何值出現位置的第一個索引。 如果找不到，則傳回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},``0,``0,``0)">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">搜尋任何指定值的第一個索引，類似於使用邏輯 OR 運算子呼叫 IndexOf 多次。</summary>
      <param name="span" vsli:raw="The span to search.">要搜尋的範圍。</param>
      <param name="value0" vsli:raw="One of the values to search for.">要搜尋的其中一個值。</param>
      <param name="value1" vsli:raw="One of the values to search for.">要搜尋的其中一個值。</param>
      <param name="value2" vsli:raw="One of the values to search for.">要搜尋的其中一個值。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">範圍和值的類型。</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">範圍中任何值出現位置的第一個索引。 如果找不到，則傳回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">搜尋任何指定值的第一個索引，類似於使用邏輯 OR 運算子呼叫 IndexOf 多次。</summary>
      <param name="span" vsli:raw="The span to search.">要搜尋的範圍。</param>
      <param name="values" vsli:raw="The set of values to search for.">要搜尋的值集合。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">範圍和值的類型。</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">範圍中任何值出現位置的第一個索引。 如果找不到，則傳回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IsWhiteSpace(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Indicates whether the specified span contains only whitespace characters.">指出指定的範圍是否只包含空白字元。</summary>
      <param name="span" vsli:raw="The source span.">來源範圍。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span contains only whitespace characters, &lt;see langword=&quot;false&quot; /&gt; otherwise.">若範圍只包含空白字元，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Reports the zero-based index of the last occurrence of the specified &lt;paramref name=&quot;value&quot; /&gt; in the current &lt;paramref name=&quot;span&quot; /&gt;.">報告目前 <paramref name="span" /> 中指定 <paramref name="value" /> 最後一個出現位置的以零起始索引。</summary>
      <param name="span" vsli:raw="The source span.">來源範圍。</param>
      <param name="value" vsli:raw="The value to seek within the source span.">要在來源範圍內搜尋的值。</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; are compared.">決定如何比較 <paramref name="span" /> 和 <paramref name="value" /> 的列舉值。</param>
      <returns vsli:raw="The index of the last occurrence of the value in the span.">範圍中值最後一個出現位置的索引。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Searches for the specified value and returns the index of its last occurrence. Values are compared using IEquatable{T}.Equals(T).">搜尋指定的值，並傳回最後一個出現位置的索引。 值是使用 IEquatable{T}.Equals(T) 來進行比較。</summary>
      <param name="span" vsli:raw="The span to search.">要搜尋的範圍。</param>
      <param name="value" vsli:raw="The value to search for.">要搜尋的值。</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">範圍和值的類型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of the value in the span. If not found, returns -1.">範圍中值最後一個出現位置的索引。 如果找不到，則傳回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the specified sequence and returns the index of its last occurrence. Values are compared using IEquatable{T}.Equals(T).">搜尋指定的序列，並傳回最後一個出現位置的索引。 值是使用 IEquatable{T}.Equals(T) 來進行比較。</summary>
      <param name="span" vsli:raw="The span to search.">要搜尋的範圍。</param>
      <param name="value" vsli:raw="The sequence to search for.">要搜尋的序列。</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">範圍和值的類型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of the value in the span. If not found, returns -1.">範圍中值最後一個出現位置的索引。 如果找不到，則傳回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.Span{``0},``0)">
      <summary vsli:raw="Searches for the specified value and returns the index of its last occurrence. Values are compared using IEquatable{T}.Equals(T).">搜尋指定的值，並傳回最後一個出現位置的索引。 值是使用 IEquatable{T}.Equals(T) 來進行比較。</summary>
      <param name="span" vsli:raw="The span to search.">要搜尋的範圍。</param>
      <param name="value" vsli:raw="The value to search for.">要搜尋的值。</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">範圍和值的類型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of the value in the span. If not found, returns -1.">範圍中值最後一個出現位置的索引。 如果找不到，則傳回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the specified sequence and returns the index of its last occurrence. Values are compared using IEquatable{T}.Equals(T).">搜尋指定的序列，並傳回最後一個出現位置的索引。 值是使用 IEquatable{T}.Equals(T) 來進行比較。</summary>
      <param name="span" vsli:raw="The span to search.">要搜尋的範圍。</param>
      <param name="value" vsli:raw="The sequence to search for.">要搜尋的序列。</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">範圍和值的類型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of the value in the span. If not found, returns -1.">範圍中值最後一個出現位置的索引。 如果找不到，則傳回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">搜尋任何指定值的最後一個索引，類似於使用邏輯 OR 運算子呼叫 LastIndexOf 多次。</summary>
      <param name="span" vsli:raw="The span to search.">要搜尋的範圍。</param>
      <param name="value0" vsli:raw="One of the values to search for.">要搜尋的其中一個值。</param>
      <param name="value1" vsli:raw="One of the values to search for.">要搜尋的其中一個值。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">範圍和值的類型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">範圍中任何值最後一個出現位置的索引。 如果找不到，則傳回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">搜尋任何指定值的最後一個索引，類似於使用邏輯 OR 運算子呼叫 LastIndexOf 多次。</summary>
      <param name="span" vsli:raw="The span to search.">要搜尋的範圍。</param>
      <param name="value0" vsli:raw="One of the values to search for.">要搜尋的其中一個值。</param>
      <param name="value1" vsli:raw="One of the values to search for.">要搜尋的其中一個值。</param>
      <param name="value2" vsli:raw="One of the values to search for.">要搜尋的其中一個值。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">範圍和值的類型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">範圍中任何值最後一個出現位置的索引。 如果找不到，則傳回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">搜尋任何指定值的最後一個索引，類似於使用邏輯 OR 運算子呼叫 LastIndexOf 多次。</summary>
      <param name="span" vsli:raw="The span to search.">要搜尋的範圍。</param>
      <param name="values" vsli:raw="The set of values to search for.">要搜尋的值集合。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">範圍和值的類型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">範圍中任何值最後一個出現位置的索引。 如果找不到，則傳回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},``0,``0)">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">搜尋任何指定值的最後一個索引，類似於使用邏輯 OR 運算子呼叫 LastIndexOf 多次。</summary>
      <param name="span" vsli:raw="The span to search.">要搜尋的範圍。</param>
      <param name="value0" vsli:raw="One of the values to search for.">要搜尋的其中一個值。</param>
      <param name="value1" vsli:raw="One of the values to search for.">要搜尋的其中一個值。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">範圍和值的類型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">範圍中任何值最後一個出現位置的索引。 如果找不到，則傳回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},``0,``0,``0)">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">搜尋任何指定值的最後一個索引，類似於使用邏輯 OR 運算子呼叫 LastIndexOf 多次。</summary>
      <param name="span" vsli:raw="The span to search.">要搜尋的範圍。</param>
      <param name="value0" vsli:raw="One of the values to search for.">要搜尋的其中一個值。</param>
      <param name="value1" vsli:raw="One of the values to search for.">要搜尋的其中一個值。</param>
      <param name="value2" vsli:raw="One of the values to search for.">要搜尋的其中一個值。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">範圍和值的類型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">範圍中任何值最後一個出現位置的索引。 如果找不到，則傳回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">搜尋任何指定值的最後一個索引，類似於使用邏輯 OR 運算子呼叫 LastIndexOf 多次。</summary>
      <param name="span" vsli:raw="The span to search.">要搜尋的範圍。</param>
      <param name="values" vsli:raw="The set of values to search for.">要搜尋的值集合。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">範圍和值的類型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">範圍中任何值最後一個出現位置的索引。 如果找不到，則傳回 -1。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether two read-only sequences overlap in memory.">判斷兩個唯讀序列在記憶體中是否重疊。</summary>
      <param name="span" vsli:raw="The first sequence.">第一個序列。</param>
      <param name="other" vsli:raw="The second sequence.">第二個序列。</param>
      <typeparam name="T" vsli:raw="The type of elements in the read-only sequence.">唯讀順序中的欲類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences overlap; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若兩個序列重疊，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Int32@)">
      <summary vsli:raw="Determines whether two read-only sequences overlap in memory and outputs the element offset.">判斷兩個唯讀序列在記憶體中是否重疊，並輸出元素位移。</summary>
      <param name="span" vsli:raw="The first sequence.">第一個序列。</param>
      <param name="other" vsli:raw="The second sequence.">第二個序列。</param>
      <param name="elementOffset" vsli:raw="When the method returns, contains the offset between &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt;." />
      <typeparam name="T" vsli:raw="The type of elements in the span.">範圍中元素的類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences overlap; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若兩個序列重疊，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether a span and a read-only span overlap in memory.">判斷一個範圍和一個唯讀範圍在記憶體中是否重疊。</summary>
      <param name="span" vsli:raw="The span to compare.">要比較的範圍。</param>
      <param name="other" vsli:raw="The read-only span to compare.">要比較的唯讀範圍。</param>
      <typeparam name="T" vsli:raw="The type of elements in the span.">範圍中元素的類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences overlap; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若兩個序列重疊，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0},System.Int32@)">
      <summary vsli:raw="Determines whether a span and a read-only span overlap in memory and outputs the element offset.">判斷一個範圍和一個唯讀範圍在記憶體中是否重疊，並輸出元素位移。</summary>
      <param name="span" vsli:raw="The first sequence to compare.">要比較的第一個序列。</param>
      <param name="other" vsli:raw="The second sequence to compare.">要比較的第二個序列。</param>
      <param name="elementOffset" vsli:raw="When the method returns, contains the offset between &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt;.">當這個方法傳回時，會包含 <paramref name="span" /> 和 <paramref name="other" /> 之間的位移。</param>
      <typeparam name="T" vsli:raw="The type of elements in the span.">範圍中元素的類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences overlap; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若兩個序列重疊，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Reverse``1(System.Span{``0})">
      <summary vsli:raw="Reverses the sequence of the elements in the entire span.">反轉整個範圍中的元素順序。</summary>
      <param name="span" vsli:raw="The span to reverse.">要反轉的範圍。</param>
      <typeparam name="T" vsli:raw="The type of elements in the span.">範圍中元素的類型。</typeparam>
    </member>
    <member name="M:System.MemoryExtensions.SequenceCompareTo``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines the relative order of two read-only sequences by comparing their elements using IComparable{T}.CompareTo(T).">使用 IComparable{T}.CompareTo(T) 來比較其元素，判斷兩個唯讀序列的相對順序。</summary>
      <param name="span" vsli:raw="The first sequence to compare.">要比較的第一個序列。</param>
      <param name="other" vsli:raw="The second sequence to compare.">要比較的第二個序列。</param>
      <typeparam name="T" vsli:raw="The type of elements in the sequence.">序列中元素的類型。</typeparam>
      <returns vsli:raw="A signed integer that indicates the relative order of &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt;:&lt;br /&gt;   - If less than 0, &lt;paramref name=&quot;span&quot; /&gt; precedes than &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If 0, &lt;paramref name=&quot;span&quot; /&gt; equals &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If greater than 0, &lt;paramref name=&quot;span&quot; /&gt; follows &lt;paramref name=&quot;other&quot; /&gt;.">帶正負號的整數，表示 <paramref name="span" /> 和 <paramref name="other" /> 的相對順序：   - 如果小於 0，則 <paramref name="span" /> 在 <paramref name="other" /> 之前。   - 如果為 0，<paramref name="span" /> 等於 <paramref name="other" />。   - 如果大於 0，則 <paramref name="span" /> 在 <paramref name="other" /> 之後。</returns>
    </member>
    <member name="M:System.MemoryExtensions.SequenceCompareTo``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines the relative order of a span and a read-only span by comparing the elements using IComparable{T}.CompareTo(T).">使用 IComparable{T}.CompareTo(T) 來比較元素，判斷一個範圍和一個唯讀範圍的相對順序。</summary>
      <param name="span" vsli:raw="The span to compare.">要比較的範圍。</param>
      <param name="other" vsli:raw="The read-only span to compare.">要比較的唯讀範圍。</param>
      <typeparam name="T" vsli:raw="The type of elements in the span.">範圍中元素的類型。</typeparam>
      <returns vsli:raw="A signed integer that indicates the relative order of &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt;:&lt;br /&gt;   - If less than 0, &lt;paramref name=&quot;span&quot; /&gt; precedes than &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If 0, &lt;paramref name=&quot;span&quot; /&gt; equals &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If greater than 0, &lt;paramref name=&quot;span&quot; /&gt; follows &lt;paramref name=&quot;other&quot; /&gt;.">帶正負號的整數，表示 <paramref name="span" /> 和 <paramref name="other" /> 的相對順序：   - 如果小於 0，則 <paramref name="span" /> 在 <paramref name="other" /> 之前。   - 如果為 0，<paramref name="span" /> 等於 <paramref name="other" />。   - 如果大於 0，則 <paramref name="span" /> 在 <paramref name="other" /> 之後。</returns>
    </member>
    <member name="M:System.MemoryExtensions.SequenceEqual``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether two read-only sequences are equal by comparing the elements using IEquatable{T}.Equals(T).">使用 IEquatable{T}.Equals(T) 來比較元素，判斷兩個唯讀序列是否相等。</summary>
      <param name="span" vsli:raw="The first sequence to compare.">要比較的第一個序列。</param>
      <param name="other" vsli:raw="The second sequence to compare.">要比較的第二個序列。</param>
      <typeparam name="T" vsli:raw="The type of elements in the sequence.">序列中元素的類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若兩個序列相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.SequenceEqual``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether a span and a read-only span are equal by comparing the elements using IEquatable{T}.Equals(T).">使用 IEquatable{T}.Equals(T) 來比較元素，判斷一個範圍和一個唯讀範圍是否相等。</summary>
      <param name="span" vsli:raw="The span to compare.">要比較的範圍。</param>
      <param name="other" vsli:raw="The read-only span to compare.">要比較的唯讀範圍。</param>
      <typeparam name="T" vsli:raw="The type of elements in the sequence.">序列中元素的類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若兩個序列相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Determines whether a read-only character span begins with a specified value when compared using a specified &lt;see cref=&quot;T:System.StringComparison&quot; /&gt; value.">判斷當使用指定的 <see cref="T:System.StringComparison" /> 值進行比較時，唯讀字元範圍是否以指定的值開始。</summary>
      <param name="span" vsli:raw="The source span.">來源範圍。</param>
      <param name="value" vsli:raw="The sequence to compare to the beginning of the source span.">要和來源範圍開頭比較的序列。</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; are compared.">決定如何比較 <paramref name="span" /> 和 <paramref name="value" /> 的列舉值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the beginning of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若 <paramref name="value" /> 符合 <paramref name="span" /> 的開頭，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.StartsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether a specified sequence appears at the start of a read-only span.">判斷所指定序列是否出現在唯讀範圍的開頭。</summary>
      <param name="span" vsli:raw="The read-only character span to search.">要搜尋的唯讀字元範圍。</param>
      <param name="value" vsli:raw="A sequence to search for at the start of &lt;paramref name=&quot;span&quot; /&gt;.">要在 <paramref name="span" /> 開頭搜尋的序列。</param>
      <typeparam name="T" vsli:raw="The type of elements in the span.">範圍中元素的類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the beginning of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若 <paramref name="value" /> 符合 <paramref name="span" /> 的開頭，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.StartsWith``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether a specified sequence appears at the start of a span.">判斷所指定序列是否出現在範圍的開頭。</summary>
      <param name="span" vsli:raw="The span to search.">要搜尋的範圍。</param>
      <param name="value" vsli:raw="A sequence to search for at the start of &lt;paramref name=&quot;span&quot; /&gt;.">要在 <paramref name="span" /> 開頭搜尋的序列。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">範圍中元素的類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the beginning of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若 <paramref name="value" /> 符合 <paramref name="span" /> 的開頭，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.ToLower(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Globalization.CultureInfo)">
      <summary vsli:raw="Copies the characters from the source span into the destination, converting each character to lowercase, using the casing rules of the specified culture.">將字元從來源範圍複製到目的地，並使用指定文化特性的大小寫規則將每個字元轉換成小寫。</summary>
      <param name="source" vsli:raw="The source span.">來源範圍。</param>
      <param name="destination" vsli:raw="The destination span which contains the transformed characters.">目的地範圍，其中包含已轉換的字元。</param>
      <param name="culture" vsli:raw="An object that supplies culture-specific casing rules.">提供文化特性大小寫規則的物件。</param>
      <returns vsli:raw="The number of characters written into the destination span. If the destination is too small, returns -1.">寫入目的地範圍的字元數。 如果目的地太小，則傳回 -1。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source and destination buffers overlap.">來源和目的地緩衝區重疊。</exception>
    </member>
    <member name="M:System.MemoryExtensions.ToLowerInvariant(System.ReadOnlySpan{System.Char},System.Span{System.Char})">
      <summary vsli:raw="Copies the characters from the source span into the destination, converting each character to lowercase, using the casing rules of the invariant culture.">將字元從來源範圍複製到目的地，並使用不因文化特性而異的大小寫規則將每個字元轉換成小寫。</summary>
      <param name="source" vsli:raw="The source span.">來源範圍。</param>
      <param name="destination" vsli:raw="The destination span which contains the transformed characters.">目的地範圍，其中包含已轉換的字元。</param>
      <returns vsli:raw="The number of characters written into the destination span. If the destination is too small, returns -1.">寫入目的地範圍的字元數。 如果目的地太小，則傳回 -1。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source and destination buffers overlap.">來源和目的地緩衝區重疊。</exception>
    </member>
    <member name="M:System.MemoryExtensions.ToUpper(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Globalization.CultureInfo)">
      <summary vsli:raw="Copies the characters from the source span into the destination, converting each character to uppercase, using the casing rules of the specified culture.">將字元從來源範圍複製到目的地，並使用指定文化特性的大小寫規則將每個字元轉換成大寫。</summary>
      <param name="source" vsli:raw="The source span.">來源範圍。</param>
      <param name="destination" vsli:raw="The destination span which contains the transformed characters.">目的地範圍，其中包含已轉換的字元。</param>
      <param name="culture" vsli:raw="An object that supplies culture-specific casing rules.">提供文化特性大小寫規則的物件。</param>
      <returns vsli:raw="The number of characters written into the destination span. If the destination is too small, returns -1.">寫入目的地範圍的字元數。 如果目的地太小，則傳回 -1。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source and destination buffers overlap.">來源和目的地緩衝區重疊。</exception>
    </member>
    <member name="M:System.MemoryExtensions.ToUpperInvariant(System.ReadOnlySpan{System.Char},System.Span{System.Char})">
      <summary vsli:raw="Copies the characters from the source span into the destination, converting each character to uppercase using the casing rules of the invariant culture.">將字元從來源範圍複製到目的地，並使用不因文化特性而異的大小寫規則將每個字元轉換成大寫。</summary>
      <param name="source" vsli:raw="The source span.">來源範圍。</param>
      <param name="destination" vsli:raw="The destination span which contains the transformed characters.">目的地範圍，其中包含已轉換的字元。</param>
      <returns vsli:raw="The number of characters written into the destination span. If the destination is too small, returns -1.">寫入目的地範圍的字元數。 如果目的地太小，則傳回 -1。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source and destination buffers overlap.">來源和目的地緩衝區重疊。</exception>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.Memory{System.Char})">
      <summary vsli:raw="Removes all leading and trailing whitespace characters from a character memory region.">從字元記憶體區域中移除所有開頭和尾端空白字元。</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">要從中移除字元的來源記憶體。</param>
      <returns vsli:raw="The trimmed character memory region.">修剪的字元記憶體區域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlyMemory{System.Char})">
      <summary vsli:raw="Removes all leading and trailing whitespace characters from a read-only character memory region.">從唯讀字元記憶體區域中移除所有開頭和尾端空白字元。</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">要從中移除字元的來源記憶體。</param>
      <returns vsli:raw="The trimmed character memory region.">修剪的字元記憶體區域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all leading and trailing whitespace characters from a read-only character span.">從唯讀字元範圍中移除所有開頭和尾端空白字元。</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">要從中移除字元的來源範圍。</param>
      <returns vsli:raw="The trimmed read-only character span.">修剪的唯讀字元範圍。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char},System.Char)">
      <summary vsli:raw="Removes all leading and trailing occurrences of a specified character from a read-only character span.">從唯讀字元範圍中移除所有開頭和尾端指定字元項目。</summary>
      <param name="span" vsli:raw="The source span from which the character is removed.">要從中移除字元的來源範圍。</param>
      <param name="trimChar" vsli:raw="The specified character to look for and remove.">要尋找並移除的指定字元。</param>
      <returns vsli:raw="The trimmed read-only character span.">修剪的唯讀字元範圍。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all leading and trailing occurrences of a set of characters specified in a read-only span from a read-only character span.">從唯讀字元範圍中移除唯讀範圍中指定的所有開頭和尾端字元集項目。</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">要從中移除字元的來源範圍。</param>
      <param name="trimChars" vsli:raw="The span which contains the set of characters to remove.">範圍，其中包含要移除的字元集。</param>
      <returns vsli:raw="The trimmed read-only character span.">修剪的唯讀字元範圍。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.Span{System.Char})">
      <summary vsli:raw="Removes all leading and trailing whitespace characters from a character span.">從字元範圍中移除所有開頭和尾端空白字元。</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">要從中移除字元的來源範圍。</param>
      <returns vsli:raw="The trimmed character span.">修剪的字元範圍。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.Memory{``0},``0)">
      <summary vsli:raw="Removes all leading and trailing occurrences of a specified element from a memory region.">從記憶體區域中移除所有開頭和尾端指定元素項目。</summary>
      <param name="memory" vsli:raw="The source memory from which the element is removed.">要從中移除元素的來源記憶體。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">要尋找並移除的指定元素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">記憶體區域中元素的類型。</typeparam>
      <returns vsli:raw="The trimmed memory region.">修剪的記憶體區域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.Memory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading and trailing occurrences of a set of elements specified in a read-only span from a memory region.">從記憶體區域中移除唯讀範圍中指定的所有開頭和尾端元素集項目。</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">要從中移除元素的來源記憶體。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">範圍，其中包含要移除的元素集。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">記憶體區域中元素的類型。</typeparam>
      <returns vsli:raw="The trimmed memory region.">修剪的記憶體區域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.ReadOnlyMemory{``0},``0)">
      <summary vsli:raw="Removes all leading and trailing occurrences of a specified element from a read-only memory region.">從唯讀記憶體區域中移除所有開頭和尾端指定元素項目。</summary>
      <param name="memory" vsli:raw="The source memory from which the element is removed.">要從中移除元素的來源記憶體。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">要尋找並移除的指定元素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">唯讀記憶體區域中元素的類型。</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">修剪的唯讀記憶體區域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading and trailing occurrences of a set of elements specified in a read-only span from a read-only memory region.">從唯讀記憶體區域中移除唯讀範圍中指定的所有開頭和尾端元素集項目。</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">要從中移除元素的來源記憶體。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">範圍，其中包含要移除的元素集。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">唯讀記憶體區域中元素的類型。</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">修剪的唯讀記憶體區域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Removes all leading and trailing occurrences of a specified element from a read-only span.">從唯讀範圍中移除所有開頭和尾端指定元素項目。</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">要從中移除元素的來源範圍。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">要尋找並移除的指定元素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">唯讀範圍中元素的類型。</typeparam>
      <returns vsli:raw="The trimmed read-only span.">修剪的唯讀範圍。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading and trailing occurrences of a set of elements specified in a read-only span from a read-only span.">從唯讀範圍中移除唯讀範圍中指定的所有開頭和尾端元素集項目。</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">要從中移除元素的來源範圍。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">範圍，其中包含要移除的元素集。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">唯讀範圍中元素的類型。</typeparam>
      <returns vsli:raw="The trimmed read-only span.">修剪的唯讀範圍。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.Span{``0},``0)">
      <summary vsli:raw="Removes all leading and trailing occurrences of a specified element from a span.">從範圍中移除所有開頭和尾端指定元素項目。</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">要從中移除元素的來源範圍。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">要尋找並移除的指定元素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">範圍中元素的類型。</typeparam>
      <returns vsli:raw="The trimmed span.">修剪的範圍。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading and trailing occurrences of a set of elements specified in a read-only span from a span.">從範圍中移除唯讀範圍中指定的所有開頭和尾端元素集項目。</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">要從中移除元素的來源範圍。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">範圍，其中包含要移除的元素集。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">範圍中元素的類型。</typeparam>
      <returns vsli:raw="The trimmed span.">修剪的範圍。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.Memory{System.Char})">
      <summary vsli:raw="Removes all trailing whitespace characters from a character memory region.">從字元記憶體區域中移除所有尾端空白字元。</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">要從中移除字元的來源記憶體。</param>
      <returns vsli:raw="The trimmed character memory region.">修剪的字元記憶體區域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlyMemory{System.Char})">
      <summary vsli:raw="Removes all trailing whitespace characters from a read-only character memory region.">從唯讀字元記憶體區域中移除所有尾端空白字元。</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">要從中移除字元的來源記憶體。</param>
      <returns vsli:raw="The trimmed read-only character span.">修剪的唯讀字元範圍。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all trailing whitespace characters from a read-only character span.">從唯讀字元範圍中移除所有尾端空白字元。</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">要從中移除字元的來源範圍。</param>
      <returns vsli:raw="The trimmed read-only character span.">修剪的唯讀字元範圍。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char},System.Char)">
      <summary vsli:raw="Removes all trailing occurrences of a specified character from a read-only span.">從唯讀範圍中移除所有尾端指定字元項目。</summary>
      <param name="span" vsli:raw="The source span from which the character is removed.">要從中移除字元的來源範圍。</param>
      <param name="trimChar" vsli:raw="The specified character to look for and remove.">要尋找並移除的指定字元。</param>
      <returns vsli:raw="The trimmed read-only character span.">修剪的唯讀字元範圍。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all trailing occurrences of a set of characters specified in a read-only span from a read-only character span.">從唯讀字元範圍中移除唯讀範圍中指定的所有尾端字元集項目。</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">要從中移除字元的來源範圍。</param>
      <param name="trimChars" vsli:raw="The span which contains the set of characters to remove.">範圍，其中包含要移除的字元集。</param>
      <returns vsli:raw="The trimmed read-only character span.">修剪的唯讀字元範圍。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.Span{System.Char})">
      <summary vsli:raw="Removes all trailing whitespace characters from a character span.">從字元範圍中移除所有尾端空白字元。</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">要從中移除字元的來源範圍。</param>
      <returns vsli:raw="The trimmed character span.">修剪的字元範圍。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.Memory{``0},``0)">
      <summary vsli:raw="Removes all trailing occurrences of a specified element from a character memory region.">從字元記憶體區域中移除所有尾端指定元素項目。</summary>
      <param name="memory" vsli:raw="The source memory from which the element is removed.">要從中移除元素的來源記憶體。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">要尋找並移除的指定元素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">記憶體區域中元素的類型。</typeparam>
      <returns vsli:raw="The trimmed memory region.">修剪的記憶體區域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.Memory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all trailing occurrences of a set of elements specified in a read-only span from a memory region.">從記憶體區域中移除唯讀範圍中指定的所有尾端元素集項目。</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">要從中移除元素的來源記憶體。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">範圍，其中包含要移除的元素集。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">記憶體區域中元素的類型。</typeparam>
      <returns vsli:raw="The trimmed memory region.">修剪的記憶體區域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlyMemory{``0},``0)">
      <summary vsli:raw="Removes all trailing occurrences of a specified element from a read-only memory region.">從唯讀記憶體區域中移除所有尾端指定元素項目。</summary>
      <param name="memory" vsli:raw="The source memory from which the element is removed.">要從中移除元素的來源記憶體。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">要尋找並移除的指定元素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">唯讀記憶體區域中元素的類型。</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">修剪的唯讀記憶體區域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all trailing occurrences of a set of elements specified in a read-only span from a read-only memory region.">從唯讀記憶體區域中移除唯讀範圍中指定的所有尾端元素集項目。</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">要從中移除元素的來源記憶體。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">範圍，其中包含要移除的元素集。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">唯讀記憶體區域中元素的類型。</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">修剪的唯讀記憶體區域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Removes all trailing occurrences of a specified element from a read-only span.">從唯讀範圍中移除所有尾端指定元素項目。</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">要從中移除元素的來源範圍。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">要尋找並移除的指定元素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">唯讀範圍中元素的類型。</typeparam>
      <returns vsli:raw="The trimmed read-only span.">修剪的唯讀範圍。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all trailing occurrences of a set of elements specified in a read-only span from a read-only span.">從唯讀範圍中移除唯讀範圍中指定的所有尾端元素集項目。</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">要從中移除元素的來源範圍。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">範圍，其中包含要移除的元素集。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">唯讀範圍中元素的類型。</typeparam>
      <returns vsli:raw="The trimmed read-only span.">修剪的唯讀範圍。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.Span{``0},``0)">
      <summary vsli:raw="Removes all trailing occurrences of a specified element from a span.">從範圍中移除所有尾端指定元素項目。</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">要從中移除元素的來源範圍。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">要尋找並移除的指定元素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">範圍中元素的類型。</typeparam>
      <returns vsli:raw="The trimmed span.">修剪的範圍。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all trailing occurrences of a set of elements specified in a read-only span from a span.">從範圍中移除唯讀範圍中指定的所有尾端元素集項目。</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">要從中移除元素的來源範圍。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">範圍，其中包含要移除的元素集。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">範圍中元素的類型。</typeparam>
      <returns vsli:raw="The trimmed span.">修剪的範圍。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.Memory{System.Char})">
      <summary vsli:raw="Removes all leading whitespace characters from a memory region.">從記憶體區域中移除所有開頭空白字元。</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">要從中移除字元的來源記憶體。</param>
      <returns vsli:raw="The trimmed character memory region.">修剪的字元記憶體區域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlyMemory{System.Char})">
      <summary vsli:raw="Removes all leading whitespace characters from a read-only memory region.">從唯讀記憶體區域中移除所有開頭空白字元。</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">要從中移除字元的來源記憶體。</param>
      <returns vsli:raw="The trimmed read-only character memory region.">修剪的唯讀字元記憶體區域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all leading whitespace characters from a read-only span.">從唯讀範圍中移除所有開頭空白字元。</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">要從中移除字元的來源範圍。</param>
      <returns vsli:raw="The trimmed read-only character span.">修剪的唯讀字元範圍。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char},System.Char)">
      <summary vsli:raw="Removes all leading occurrences of a specified character from the span.">從範圍中移除所有開頭指定字元項目。</summary>
      <param name="span" vsli:raw="The source span from which the character is removed.">要從中移除字元的來源範圍。</param>
      <param name="trimChar" vsli:raw="The specified character to look for and remove.">要尋找並移除的指定字元。</param>
      <returns vsli:raw="The trimmed read-only character span.">修剪的唯讀字元範圍。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all leading occurrences of a set of characters specified in a read-only span from the span.">從範圍中移除唯讀範圍中指定的所有開頭字元集項目。</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">要從中移除字元的來源範圍。</param>
      <param name="trimChars" vsli:raw="The span which contains the set of characters to remove.">範圍，其中包含要移除的字元集。</param>
      <returns vsli:raw="The trimmed read-only character span.">修剪的唯讀字元範圍。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.Span{System.Char})">
      <summary vsli:raw="Removes all leading whitespace characters from a span.">從範圍中移除所有開頭空白字元。</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">要從中移除字元的來源範圍。</param>
      <returns vsli:raw="The trimmed character span.">修剪的字元範圍。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.Memory{``0},``0)">
      <summary vsli:raw="Removes all leading occurrences of a specified element from a memory region.">從記憶體區域中移除所有開頭指定元素項目。</summary>
      <param name="memory" vsli:raw="The source memory region from which the element is removed.">要從中移除元素的來源記憶體區域。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">要尋找並移除的指定元素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">記憶體區域中元素的類型。</typeparam>
      <returns vsli:raw="The trimmed memory region.">修剪的記憶體區域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.Memory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading occurrences of a set of elements specified in a read-only span from a memory region.">從記憶體區域中移除唯讀範圍中指定的所有開頭元素集項目。</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">要從中移除元素的來源記憶體。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">範圍，其中包含要移除的元素集。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">記憶體區域中元素的類型。</typeparam>
      <returns vsli:raw="The trimmed memory region.">修剪的記憶體區域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlyMemory{``0},``0)">
      <summary vsli:raw="Removes all leading occurrences of a specified element from a memory region.">從記憶體區域中移除所有開頭指定元素項目。</summary>
      <param name="memory" vsli:raw="The source memory from which the element is removed.">要從中移除元素的來源記憶體。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">要尋找並移除的指定元素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">唯讀記憶體區域中元素的類型。</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">修剪的唯讀記憶體區域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading occurrences of a set of elements specified in a read-only span from a memory region.">從記憶體區域中移除唯讀範圍中指定的所有開頭元素集項目。</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">要從中移除元素的來源記憶體。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">範圍，其中包含要移除的元素集。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">唯讀記憶體區域中元素的類型。</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">修剪的唯讀記憶體區域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Removes all leading occurrences of a specified element from the span.">從範圍中移除所有開頭指定元素項目。</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">要從中移除元素的來源範圍。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">要尋找並移除的指定元素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">唯讀範圍中元素的類型。</typeparam>
      <returns vsli:raw="The trimmed read-only span.">修剪的唯讀範圍。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading occurrences of a set of elements specified in a read-only span from the span.">從範圍中移除唯讀範圍中指定的所有開頭元素集項目。</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">要從中移除元素的來源範圍。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">範圍，其中包含要移除的元素集。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">唯讀範圍中元素的類型。</typeparam>
      <returns vsli:raw="The trimmed read-only span.">修剪的唯讀範圍。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.Span{``0},``0)">
      <summary vsli:raw="Removes all leading occurrences of a specified element from the span.">從範圍中移除所有開頭指定元素項目。</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">要從中移除元素的來源範圍。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">要尋找並移除的指定元素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">範圍中元素的類型。</typeparam>
      <returns vsli:raw="The trimmed span.">修剪的範圍。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading occurrences of a set of elements specified in a read-only span from the span.">從範圍中移除唯讀範圍中指定的所有開頭元素集項目。</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">要從中移除元素的來源範圍。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">範圍，其中包含要移除的元素集。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">範圍中元素的類型。</typeparam>
      <returns vsli:raw="The trimmed span.">修剪的範圍。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.MemoryMarshal">
      <summary vsli:raw="Provides methods to interoperate with &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;, &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;,  &lt;see cref=&quot;T:System.Span`1&quot; /&gt;, and  &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt;.">提供方法來與 <see cref="T:System.Memory`1" />、<see cref="T:System.ReadOnlyMemory`1" />、<see cref="T:System.Span`1" /> 和 <see cref="T:System.ReadOnlySpan`1" /> 交互操作。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.ReadOnlySpan{``0})">
      <summary vsli:raw="Casts a &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; of one primitive type, &lt;paramref name=&quot;T&quot; /&gt;, to a &lt;see langword=&quot;ReadOnlySpan&amp;lt;Byte&amp;gt;&quot; /&gt;.">將一個簡單型別 <paramref name="T" /> 的 <see cref="T:System.ReadOnlySpan`1" /> 轉換成 <see langword="ReadOnlySpan&lt;Byte&gt;" />。</summary>
      <param name="span" vsli:raw="The source slice to convert.">要轉換的來源配量。</param>
      <typeparam name="T" vsli:raw="The type of items in the read-only span.">唯讀範圍中的專案類型。</typeparam>
      <returns vsli:raw="A read-only span of type &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">型別 <see cref="T:System.Byte" /> 的唯讀範圍。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" /> 包含參考或指標。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The &lt;see cref=&quot;P:System.ReadOnlySpan`1.Length&quot; /&gt; property of the new &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; would exceed &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;">新的 <see cref="T:System.ReadOnlySpan`1" /> 的 <see cref="P:System.ReadOnlySpan`1.Length" /> 屬性會超出 <see cref="F:System.Int32.MaxValue" /></exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.Span{``0})">
      <summary vsli:raw="Casts a &lt;see cref=&quot;T:System.Span`1&quot; /&gt; of one primitive type, &lt;paramref name=&quot;T&quot; /&gt;, to a &lt;see langword=&quot;Span&amp;lt;Byte&amp;gt;&quot; /&gt;.">將一個簡單型別 <paramref name="T" /> 的 <see cref="T:System.Span`1" /> 轉換成 <see langword="Span&lt;Byte&gt;" />。</summary>
      <param name="span" vsli:raw="The source slice to convert.">要轉換的來源配量。</param>
      <typeparam name="T" vsli:raw="The type of items in the span.">範圍中的專案類型。</typeparam>
      <returns vsli:raw="A span of type &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">型別 <see cref="T:System.Byte" /> 的範圍。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" /> 包含參考或指標。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The &lt;see cref=&quot;P:System.ReadOnlySpan`1.Length&quot; /&gt; property of the new &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; would exceed &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;">新的 <see cref="T:System.Span`1" /> 的 <see cref="P:System.Span`1.Length" /> 屬性會超出 <see cref="F:System.Int32.MaxValue" /></exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsMemory``1(System.ReadOnlyMemory{``0})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; instance from a &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;.">從 <see cref="T:System.ReadOnlyMemory`1" /> 建立 <see cref="T:System.Memory`1" /> 執行個體。</summary>
      <param name="memory" vsli:raw="The read-only memory buffer.">唯讀記憶體緩衝區。</param>
      <typeparam name="T" vsli:raw="The type of items in the read-only memory buffer.">唯讀記憶體緩衝區中的專案類型。</typeparam>
      <returns vsli:raw="A memory block that represents the same memory as the &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;.">記憶體區塊，代表與 <see cref="T:System.ReadOnlyMemory`1" /> 相同的記憶體。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsRef``1(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reinterprets a read-only span of bytes as a read-only reference to the structure of type &lt;paramref name=&quot;T&quot; /&gt;.">將唯讀範圍的位元組重新解譯為 <paramref name="T" /> 類型結構的唯讀參考。</summary>
      <param name="span" vsli:raw="The read-only span to reinterpret.">要重新解譯的唯讀範圍。</param>
      <typeparam name="T" vsli:raw="The type of the returned reference.">傳回之參考的型別。</typeparam>
      <returns vsli:raw="The read-only reference to the structure of type &lt;paramref name=&quot;T&quot; /&gt;.">
        <paramref name="T" /> 類型結構的唯讀參考。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsRef``1(System.Span{System.Byte})">
      <summary vsli:raw="Reinterprets a span of bytes as a reference to the structure of type &lt;paramref name=&quot;T&quot; /&gt;.">將位元組範圍重新解譯為 <paramref name="T" /> 類型結構的參考。</summary>
      <param name="span" vsli:raw="The span to reinterpret.">要重新解譯的範圍。</param>
      <typeparam name="T" vsli:raw="The type of the returned reference.">傳回之參考的型別。</typeparam>
      <returns vsli:raw="The reference to the structure of type &lt;paramref name=&quot;T&quot; /&gt;.">
        <paramref name="T" /> 類型結構的參考。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.ReadOnlySpan{``0})">
      <summary vsli:raw="Casts a read-only span of one primitive type to a read-only span of another primitive type.">將一個簡單型別的唯讀範圍轉換為另一個簡單型別的唯讀範圍。</summary>
      <param name="span" vsli:raw="The source slice to convert.">要轉換的來源配量。</param>
      <typeparam name="TFrom" vsli:raw="The type of the source span.">來源範圍的類型。</typeparam>
      <typeparam name="TTo" vsli:raw="The type of the target span.">目標範圍的類型。</typeparam>
      <returns vsli:raw="The converted read-only span.">已轉換的唯讀範圍。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;TFrom&quot; /&gt; or &lt;paramref name=&quot;TTo&quot; /&gt; contains managed object references.">
        <paramref name="TFrom" /> 或 <paramref name="TTo" /> 包含參考或指標。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.Span{``0})">
      <summary vsli:raw="Casts a span of one primitive type to a span of another primitive type.">將一個簡單型別的範圍轉換為另一個簡單型別的範圍。</summary>
      <param name="span" vsli:raw="The source slice to convert.">要轉換的來源配量。</param>
      <typeparam name="TFrom" vsli:raw="The type of the source span.">來源範圍的類型。</typeparam>
      <typeparam name="TTo" vsli:raw="The type of the target span.">目標範圍的類型。</typeparam>
      <returns vsli:raw="The converted span.">已轉換的範圍。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;TFrom&quot; /&gt; or &lt;paramref name=&quot;TTo&quot; /&gt; contains managed object references.">
        <paramref name="TFrom" /> 或 <paramref name="TTo" /> 包含參考或指標。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray``1(``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new memory buffer over the portion of the pre-pinned target array beginning at the &lt;paramref name=&quot;start&quot; /&gt; index and consisting of &lt;paramref name=&quot;length&quot; /&gt; items.">在預先定義的目標陣列上建立新的記憶體緩衝區，從 <paramref name="start" /> 索引開始，並包含 <paramref name="length" /> 個項目。</summary>
      <param name="array" vsli:raw="The pre-pinned source array.">預先固定的來源陣列。</param>
      <param name="start" vsli:raw="The index of &lt;paramref name=&quot;array&quot; /&gt; at which to begin the memory block.">要開始記憶體區塊的 <paramref name="array" /> 索引。</param>
      <param name="length" vsli:raw="The number of items to include in the memory block.">要包含在記憶體區塊中的項目數量。</param>
      <typeparam name="T" vsli:raw="The type of the array.">陣列的類型。</typeparam>
      <returns vsli:raw="A block of memory over the specified elements of &lt;paramref name=&quot;array&quot; /&gt;. If &lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, or if &lt;paramref name=&quot;start&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are 0, the method returns a &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; instance of &lt;see cref=&quot;P:System.Memory`1.Length&quot; /&gt; zero.">在 <paramref name="array" /> 指定之元素上的記憶體區塊。 如果 <paramref name="array" /> 為 <see langword="null" />，或如果 <paramref name="start" /> 和 <paramref name="length" /> 為 0，方法會傳回 <see cref="P:System.Memory`1.Length" /> 為零的 <see cref="T:System.Memory`1" /> 執行個體。</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is covariant, and the type of &lt;paramref name=&quot;array&quot; /&gt; is not exactly &lt;paramref name=&quot;T[]&quot; /&gt;.">
        <paramref name="array" /> 是 Covariant，且 <paramref name="array" /> 的型別不完全是 <paramref name="T[]" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;start&quot; /&gt; or the end index is not in the range of 0 to &lt;see cref=&quot;P:System.Array.Length&quot; /&gt;.">
        <paramref name="start" /> 或結尾索引不在 0 到 <see cref="P:System.Array.Length" /> 的範圍內。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan``1(``0@,System.Int32)">
      <summary vsli:raw="Creates a new read-only span over a portion of a regular managed object.">在一般受控物件上建立新的唯讀範圍。</summary>
      <param name="reference" vsli:raw="A reference to data.">資料的參考。</param>
      <param name="length" vsli:raw="The number of &lt;paramref name=&quot;T&quot; /&gt; elements that &lt;paramref name=&quot;reference&quot; /&gt; contains.">
        <paramref name="reference" /> 包含的 <paramref name="T" /> 元素數目。</param>
      <typeparam name="T" vsli:raw="The type of the data items.">資料項目的類型。</typeparam>
      <returns vsli:raw="A read-only span.">唯讀的範圍。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.CreateSpan``1(``0@,System.Int32)">
      <summary vsli:raw="Creates a new span over a portion of a regular managed object.">在一般受控物件上建立新的範圍。</summary>
      <param name="reference" vsli:raw="A reference to data.">資料的參考。</param>
      <param name="length" vsli:raw="The number of &lt;paramref name=&quot;T&quot; /&gt; elements that &lt;paramref name=&quot;reference&quot; /&gt; contains.">
        <paramref name="reference" /> 包含的 <paramref name="T" /> 元素數目。</param>
      <typeparam name="T" vsli:raw="The type of the data items.">資料項目的類型。</typeparam>
      <returns vsli:raw="A span.">範圍。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.ReadOnlySpan{``0})">
      <summary vsli:raw="Returns a reference to the element of the read-only span at index 0.">傳回唯讀範圍索引位置為 0 的元素參考。</summary>
      <param name="span" vsli:raw="The read-only span from which the reference is retrieved.">擷取參考的來源唯讀範圍。</param>
      <typeparam name="T" vsli:raw="The type of items in the span.">範圍中的專案類型。</typeparam>
      <returns vsli:raw="A reference to the element at index 0.">索引位置為 0 的元素參考。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.Span{``0})">
      <summary vsli:raw="Returns a reference to the element of the span at index 0.">傳回範圍索引位置為 0 的元素參考。</summary>
      <param name="span" vsli:raw="The span from which the reference is retrieved.">擷取參考的來源範圍。</param>
      <typeparam name="T" vsli:raw="The type of items in the span.">範圍中的專案類型。</typeparam>
      <returns vsli:raw="A reference to the element at index 0.">索引位置為 0 的元素參考。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Read``1(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a structure of type &lt;typeparamref name=&quot;T&quot; /&gt; out of a read-only span of bytes.">讀取型別結構 <param name="T" /> 超出位元組的唯讀範圍。</summary>
      <param name="source" vsli:raw="A read-only span.">唯讀的範圍。</param>
      <typeparam name="T" vsli:raw="The type of the item to retrieve from the read-only span.">要從唯讀範圍中取出的專案類型。</typeparam>
      <returns vsli:raw="The structure retrieved from the read-only span.">從唯讀範圍擷取的結構。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" /> 包含參考或指標。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is smaller than &lt;paramref name=&quot;T&quot; /&gt;'s length in bytes.">
        <paramref name="source" /> 小於 <paramref name="T" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.ToEnumerable``1(System.ReadOnlyMemory{``0})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; view of the given read-only memory buffer.">建立指定唯讀記憶體緩衝區的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 檢視。</summary>
      <param name="memory" vsli:raw="A read-only memory buffer.">唯讀記憶體緩衝區。</param>
      <typeparam name="T" vsli:raw="The type of the items in the read-only memory buffer.">唯讀記憶體緩衝區中的專案類型。</typeparam>
      <returns vsli:raw="An enumerable view of &lt;paramref name=&quot;memory&quot; /&gt;.">
        <paramref name="memory" /> 的列舉檢視。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetArray``1(System.ReadOnlyMemory{``0},System.ArraySegment{``0}@)">
      <summary vsli:raw="Tries to get an array segment from the underlying memory buffer. The return value indicates the success of the operation.">嘗試從基礎記憶體緩衝區取得陣列區段。 傳回值指出作業是否成功。</summary>
      <param name="memory" vsli:raw="A read-only memory buffer.">唯讀記憶體緩衝區。</param>
      <param name="segment" vsli:raw="When this method returns, contains the array segment retrieved from the underlying read-only memory buffer. If the method fails, the method returns a default array segment.">當方法傳回時，會包含擷取自基礎唯讀記憶體緩衝區的陣列區段。 如果方法失敗，方法會傳回預設的陣列區段。</param>
      <typeparam name="T" vsli:raw="The type of items in the read-only memory buffer.">唯讀記憶體緩衝區中的專案類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method call succeeds; &lt;see langword=&quot;false&quot; /&gt; otherwise.">如果方法呼叫成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@)">
      <summary vsli:raw="Tries to retrieve a &lt;see cref=&quot;T:System.Buffers.MemoryManager`1&quot; /&gt; from the underlying read-only memory buffer.">嘗試從基礎唯讀記憶體緩衝區擷取 <see cref="T:System.Buffers.MemoryManager`1" />。</summary>
      <param name="memory" vsli:raw="The read-only memory buffer for which to get the memory manager.">要取得記憶體管理員的唯讀記憶體緩衝區。</param>
      <param name="manager" vsli:raw="When the method returns, the manager of &lt;paramref name=&quot;memory&quot; /&gt;.">當方法傳回時，為 <paramref name="memory" /> 的管理員。</param>
      <typeparam name="T" vsli:raw="The type of the items in the read-only memory buffer.">唯讀記憶體緩衝區中的專案類型。</typeparam>
      <typeparam name="TManager" vsli:raw="The type of the &lt;see cref=&quot;T:System.Buffers.MemoryManager`1&quot; /&gt; to retrieve.">要取出的<see cref="T:System.Buffers.MemoryManager`1" />類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method retrieved the memory manager; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果方法已擷取記憶體管理員，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@,System.Int32@,System.Int32@)">
      <summary vsli:raw="Tries to retrieve a &lt;see cref=&quot;T:System.Buffers.MemoryManager`1&quot; /&gt;, start index, and length from the underlying read-only memory buffer.">嘗試從基礎唯讀記憶體緩衝區擷取 <see cref="T:System.Buffers.MemoryManager`1" />、開始索引和長度。</summary>
      <param name="memory" vsli:raw="The read-only memory buffer for which to get the memory manager.">要取得記憶體管理員的唯讀記憶體緩衝區。</param>
      <param name="manager" vsli:raw="When the method returns, the manager of &lt;paramref name=&quot;memory&quot; /&gt;.">當方法傳回時，為 <paramref name="memory" /> 的管理員。</param>
      <param name="start" vsli:raw="When the method returns, the offset from the start of the &lt;paramref name=&quot;manager&quot; /&gt; that the &lt;paramref name=&quot;memory&quot; /&gt; represents.">當方法傳回時，為 <paramref name="memory" /> 所代表從 <paramref name="manager" /> 開始的位移。</param>
      <param name="length" vsli:raw="When the method returns, the length of the &lt;paramref name=&quot;manager&quot; /&gt; that the &lt;paramref name=&quot;memory&quot; /&gt; represents.">當方法傳回時，為 <paramref name="memory" /> 所代表 <paramref name="manager" /> 的長度。</param>
      <typeparam name="T" vsli:raw="The type of the items in the read-only memory buffer.">唯讀記憶體緩衝區中的專案類型。</typeparam>
      <typeparam name="TManager" vsli:raw="The type of the &lt;see cref=&quot;T:System.Buffers.MemoryManager`1&quot; /&gt; to retrieve.">要取出的<see cref="T:System.Buffers.MemoryManager`1" />類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method succeeded; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果方法成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetString(System.ReadOnlyMemory{System.Char},System.String@,System.Int32@,System.Int32@)">
      <summary vsli:raw="Tries to get the underlying string from a &lt;see langword=&quot;System.ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt;.">嘗試從 <see langword="System.ReadOnlyMemory&lt;Char&gt;" /> 取得基礎字串。</summary>
      <param name="memory" vsli:raw="Read-only memory containing a block of characters.">唯讀記憶體包含字元區塊。</param>
      <param name="text" vsli:raw="When the method returns, the string contained in the memory buffer.">當方法傳回時，記憶體緩衝區中包含的字串。</param>
      <param name="start" vsli:raw="The starting location in &lt;paramref name=&quot;text&quot; /&gt;.">
        <paramref name="text" /> 中的開始位置。</param>
      <param name="length" vsli:raw="The number of characters in &lt;paramref name=&quot;text&quot; /&gt;.">
        <paramref name="text" /> 中的字元數目。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method successfully retrieves the underlying string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果方法成功擷取基礎字串，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryRead``1(System.ReadOnlySpan{System.Byte},``0@)">
      <summary vsli:raw="Tries to read a structure of type &lt;paramref name=&quot;T&quot; /&gt; from a read-only span of bytes.">嘗試從位元組唯讀範圍中讀取類型 <paramref name="T" /> 的結構。</summary>
      <param name="source" vsli:raw="A read-only span of bytes.">位元組的唯讀範圍。</param>
      <param name="value" vsli:raw="When the method returns, an instance of &lt;paramref name=&quot;T&quot; /&gt;.">當方法傳回時，為 <paramref name="T" /> 的執行個體。</param>
      <typeparam name="T" vsli:raw="The type of the structure to retrieve.">要取出的結構類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method succeeds in retrieving an instance of the structure; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果方法成功擷取結構的執行個體則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" /> 包含參考或指標。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryWrite``1(System.Span{System.Byte},``0@)">
      <summary vsli:raw="Tries to write a structure of type &lt;paramref name=&quot;T&quot; /&gt; into a span of bytes.">嘗試將 <paramref name="T" /> 類型的結構寫入位元組範圍。</summary>
      <param name="destination" vsli:raw="The span of bytes to contain the structure.">要包含結構的位元組範圍。</param>
      <param name="value" vsli:raw="The structure to be written to the span.">要寫入至範圍的結構。</param>
      <typeparam name="T" vsli:raw="The type of the structure.">結構的類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the write operation succeeded; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The method returns &lt;see langword=&quot;false&quot; /&gt; if the span is too small to contain &lt;paramref name=&quot;T&quot; /&gt;.">如果作業執行成功，則為 <see langword="true" />，否則為 <see langword="false" />。 如果範圍太小而無法包含 <paramref name="T" />，方法會傳回 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" /> 包含參考或指標。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Write``1(System.Span{System.Byte},``0@)">
      <summary vsli:raw="Writes a structure of type &lt;paramref name=&quot;T&quot; /&gt; into a span of bytes.">將類型 <paramref name="T" /> 的結構寫入位元組範圍。</summary>
      <param name="destination" vsli:raw="The span of bytes to contain the structure.">要包含結構的位元組範圍。</param>
      <param name="value" vsli:raw="The structure to be written to the span.">要寫入至範圍的結構。</param>
      <typeparam name="T" vsli:raw="The type of the structure.">結構的類型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" /> 包含參考或指標。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="destination" /> 太小而無法包含<paramref name="value" />。</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.SequenceMarshal">
      <summary vsli:raw="Provides a collection of methods for interoperating with &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">提供與 <see cref="T:System.Buffers.ReadOnlySequence`1" /> 交互操作的方法集合。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryGetArray``1(System.Buffers.ReadOnlySequence{``0},System.ArraySegment{``0}@)">
      <summary vsli:raw="Gets an array segment from the underlying read-only sequence.">從基礎唯讀序列取得陣列區段。</summary>
      <param name="sequence" vsli:raw="The read-only sequence from which the array segment will be retrieved.">要從中擷取陣列區段的唯讀序列。</param>
      <param name="segment" vsli:raw="The returned array segment.">傳回的陣列區段。</param>
      <typeparam name="T" vsli:raw="The type of the read-only sequence.">唯讀序列的類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if it's possible to retrieve the array segment; otherwise, &lt;see langword=&quot;false&quot; /&gt; and a default array segment is returned.">若可以擷取陣列區段，則為 <see langword="true" />；否則為 <see langword="false" /> 並傳回預設陣列區段。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryGetReadOnlyMemory``1(System.Buffers.ReadOnlySequence{``0},System.ReadOnlyMemory{``0}@)">
      <summary vsli:raw="Attempts to retrieve a read-only memory from the specified read-only sequence.">嘗試從指定的唯讀序列擷取唯讀記憶體。</summary>
      <param name="sequence" vsli:raw="The read-only sequence from which the memory will be retrieved.">要從中擷取記憶體的唯讀序列。</param>
      <param name="memory" vsli:raw="The returned read-only memory of type T.">傳回的 T 類型唯讀記憶體。</param>
      <typeparam name="T" vsli:raw="The type of the read-only sequence.">唯讀序列的類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read-only memory can be retrieved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若可以擷取唯讀記憶體，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryGetReadOnlySequenceSegment``1(System.Buffers.ReadOnlySequence{``0},System.Buffers.ReadOnlySequenceSegment{``0}@,System.Int32@,System.Buffers.ReadOnlySequenceSegment{``0}@,System.Int32@)">
      <summary vsli:raw="Attempts to retrieve a read-only sequence segment from the specified read-only sequence.">嘗試從指定的唯讀序列擷取唯讀序列區段。</summary>
      <param name="sequence" vsli:raw="The read-only sequence from which the read-only sequence segment will be retrieved.">要從中擷取唯讀序列區段的唯讀序列。</param>
      <param name="startSegment" vsli:raw="The beginning read-only sequence segment.">起始唯讀序列區段。</param>
      <param name="startIndex" vsli:raw="The initial position.">初始位置。</param>
      <param name="endSegment" vsli:raw="The ending read-only sequence segment.">結束唯讀序列區段。</param>
      <param name="endIndex" vsli:raw="The final position.">最終位置。</param>
      <typeparam name="T" vsli:raw="The type of the read-only sequence.">唯讀序列的類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read-only sequence segment can be retrieved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若可以擷取唯讀序列區段，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryRead``1(System.Buffers.SequenceReader{System.Byte}@,``0@)">
      <summary vsli:raw="Attempts to read the specified type out of the buffer. It's dangerous to use this method with arbitrary structs - see remarks for more information.">嘗試從緩衝區讀取指定的類型。 搭配任意結構使用此方法很危險；如需詳細資訊，請參閱備註。</summary>
      <param name="reader" vsli:raw="A reference to the sequence reader.">序列讀取器的參考。</param>
      <param name="value" vsli:raw="The returned value if the read was successful. &lt;paramref name=&quot;value&quot; /&gt; will be &lt;see langword=&quot;default&quot; /&gt; if failed (due to lack of space).">如果讀取成功，則為傳回值。 如果失敗 (由於空間不足)，<paramref name="value" /> 將會是 <see langword="default" />。</param>
      <typeparam name="T" vsli:raw="The type of the value.">值的類型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read attempt was successful, &lt;see langword=&quot;false&quot; /&gt; otherwise.">若讀取嘗試成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.SequencePosition">
      <summary vsli:raw="Represents a position in a non-contiguous set of memory. Properties of this type should not be interpreted by anything but the type that created it.">表示非連續記憶體集合中的位置。 此類型的屬性，不應由建立該屬性的類型來解譯。</summary>
    </member>
    <member name="M:System.SequencePosition.#ctor(System.Object,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; struct.">初始化 <see cref="T:System.SequencePosition" /> 結構的新執行個體。</summary>
      <param name="object" vsli:raw="A non-contiguous set of memory.">非連續的記憶體集。</param>
      <param name="integer" vsli:raw="The position in &lt;paramref name=&quot;object&quot; /&gt;.">
        <paramref name="object" /> 中的位置。</param>
    </member>
    <member name="M:System.SequencePosition.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the current instance is equal to another object.">傳回值，這個值指出目前的執行個體是否與其他物件相等。</summary>
      <param name="obj" vsli:raw="The object to compare with the current instance.">要與目前執行個體比較的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is of type &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; and is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若 <paramref name="obj" /> 為 <see cref="T:System.SequencePosition" /> 類型且等於目前的執行個體，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.SequencePosition.Equals(System.SequencePosition)">
      <summary vsli:raw="Indicates whether the current instance is equal to another &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt;.">指出目前的執行個體和其他 <see cref="T:System.SequencePosition" /> 是否相等。</summary>
      <param name="other" vsli:raw="The sequence position to compare with the current instance.">要與目前執行個體比較的序列位置。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two instances are equal; &lt;see langword=&quot;false&quot; /&gt; otherwise.">如果兩個執行個體相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.SequencePosition.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">傳回這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="The hash code for this instance.">這個執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.SequencePosition.GetInteger">
      <summary vsli:raw="Returns the integer part of this &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt;.">傳回這個 <see cref="T:System.SequencePosition" /> 的整數部分。</summary>
      <returns vsli:raw="The integer part of this sequence position.">此序列位置的整數部分。</returns>
    </member>
    <member name="M:System.SequencePosition.GetObject">
      <summary vsli:raw="Returns the object part of this &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt;.">傳回這個 <see cref="T:System.SequencePosition" /> 的物件部分。</summary>
      <returns vsli:raw="The object part of this sequence position.">此序列位置的物件部分。</returns>
    </member>
    <member name="T:System.Text.SpanRuneEnumerator">
      <summary vsli:raw="Provides an enumerator for the &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; values represented by a span containing UTF-16 text.">提供由包含 UTF-16 文字之範圍代表的 <see cref="T:System.Text.Rune" /> 值的列舉程式。</summary>
    </member>
    <member name="P:System.Text.SpanRuneEnumerator.Current">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; at the current position of the enumerator.">取得位於目前列舉程式位置的 <see cref="T:System.Text.Rune" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; at the current position of the enumerator.">
        <see cref="T:System.Text.Rune" />位於目前列舉值位置的。</returns>
    </member>
    <member name="M:System.Text.SpanRuneEnumerator.GetEnumerator">
      <summary vsli:raw="Returns the current enumerator instance.">傳回目前的列舉程式執行個體。</summary>
      <returns vsli:raw="The current enumerator instance.">目前的列舉程式執行個體。</returns>
    </member>
    <member name="M:System.Text.SpanRuneEnumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; of the span.">將列舉程式前移至範圍的下一個 <see cref="T:System.Text.Rune" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator successfully advanced to the next item; &lt;see langword=&quot;false&quot; /&gt; if the end of the span has been reached.">若列舉程式成功前移至下一個項目，則為 <see langword="true" />；若已達到範圍結尾，則為 <see langword="false" />。</returns>
    </member>
  </members>
</doc>
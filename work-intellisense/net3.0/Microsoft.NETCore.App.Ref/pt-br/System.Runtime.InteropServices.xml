<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.InteropServices</name>
  </assembly>
  <members>
    <member name="T:System.DataMisalignedException">
      <summary>Exceção lançada quando uma unidade de dados é lida ou gravada em um endereço que não é múltiplo do tamanho dos dados. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.DataMisalignedException" />.</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.DataMisalignedException" /> usando a mensagem de erro especificada.</summary>
      <param name="message">Um objeto <see cref="T:System.String" /> que descreve o erro. O conteúdo de <paramref name="message" /> deve ser compreendido por humanos. O chamador desse construtor é necessário para garantir que essa cadeia de caracteres tenha sido localizada para a cultura do sistema atual.</param>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String,System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.DataMisalignedException" /> usando a mensagem de erro especificada e uma exceção subjacente.</summary>
      <param name="message">Um objeto <see cref="T:System.String" /> que descreve o erro. O conteúdo de <paramref name="message" /> deve ser compreendido por humanos. O chamador desse construtor é necessário para garantir que essa cadeia de caracteres tenha sido localizada para a cultura do sistema atual.</param>
      <param name="innerException">A exceção que é a causa da <see cref="T:System.DataMisalignedException" /> atual. Caso o parâmetro <paramref name="innerException" /> não seja <see langword="null" />, a exceção atual é acionada em um bloco <see langword="catch" /> que identifica a exceção interna.</param>
    </member>
    <member name="T:System.DllNotFoundException">
      <summary>A exceção que é lançada quando uma DLL especificada em uma importação de DLL não pode ser encontrada.</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.DllNotFoundException" /> com propriedades padrão.</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.DllNotFoundException" /> com dados serializados.</summary>
      <param name="info">O <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que mantém os dados de objeto serializados sobre a exceção que está sendo lançada.</param>
      <param name="context">O <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contém informações contextuais sobre a fonte ou o destino.</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.DllNotFoundException" /> com uma mensagem de erro especificada.</summary>
      <param name="message">A mensagem de erro que explica a razão da exceção.</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.DllNotFoundException" /> com uma mensagem de erro especificada e uma referência à exceção interna que é a causa da exceção.</summary>
      <param name="message">A mensagem de erro que explica a razão da exceção.</param>
      <param name="inner">A exceção que é a causa da exceção atual. Caso o parâmetro <paramref name="inner" /> não seja <see langword="null" />, a exceção atual é acionada em um bloco <see langword="catch" /> que identifica a exceção interna.</param>
    </member>
    <member name="T:System.IO.UnmanagedMemoryAccessor">
      <summary>Fornece acesso aleatório aos blocos de memória não gerenciados a partir de código gerenciado.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.IO.UnmanagedMemoryAccessor" />.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.IO.UnmanagedMemoryAccessor" /> com o buffer especificado, o deslocamento e a capacidade.</summary>
      <param name="buffer">O buffer que conterá o acessador.</param>
      <param name="offset">O byte no qual o acessador é iniciado.</param>
      <param name="capacity">O tamanho, em bytes, da memória a ser alocada.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> mais <paramref name="capacity" /> é maior que <paramref name="buffer" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> ou <paramref name="capacity" /> é menor que zero.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="offset" /> mais <paramref name="capacity" /> encapsularia a extremidade alta do espaço de endereço.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.IO.UnmanagedMemoryAccessor" /> com o buffer especificado, o deslocamento, a capacidade e o direito de acesso.</summary>
      <param name="buffer">O buffer que conterá o acessador.</param>
      <param name="offset">O byte no qual o acessador é iniciado.</param>
      <param name="capacity">O tamanho, em bytes, da memória a ser alocada.</param>
      <param name="access">O tipo de acesso permitido à memória. O padrão é <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> mais <paramref name="capacity" /> é maior que <paramref name="buffer" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> ou <paramref name="capacity" /> é menor que zero.  

ou - 
<paramref name="access" /> não é um valor de enumeração <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> válido.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="offset" /> mais <paramref name="capacity" /> encapsularia a extremidade alta do espaço de endereço.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanRead">
      <summary>Determina se o acessador é legível.</summary>
      <returns>
        <see langword="true" />Se o acessador for legível; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanWrite">
      <summary>Determina se o acessório é gravável.</summary>
      <returns>
        <see langword="true" />Se o acessador for gravável; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.Capacity">
      <summary>Obtém a capacidade do acessador.</summary>
      <returns>A capacidade do acessador.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose">
      <summary>Libera todos os recursos usados pelo <see cref="T:System.IO.UnmanagedMemoryAccessor" />.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose(System.Boolean)">
      <summary>Libera os recursos não gerenciados usados pelo <see cref="T:System.IO.UnmanagedMemoryAccessor" /> e opcionalmente libera os recursos gerenciados.</summary>
      <param name="disposing">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Define os valores iniciais do acessador.</summary>
      <param name="buffer">O buffer que conterá o acessador.</param>
      <param name="offset">O byte no qual o acessador é iniciado.</param>
      <param name="capacity">O tamanho, em bytes, da memória a ser alocada.</param>
      <param name="access">O tipo de acesso permitido à memória. O padrão é <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> mais <paramref name="capacity" /> é maior que <paramref name="buffer" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> ou <paramref name="capacity" /> é menor que zero.  

ou - 
<paramref name="access" /> não é um valor de enumeração <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> válido.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="offset" /> mais <paramref name="capacity" /> encapsularia a extremidade alta do espaço de endereço.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.IsOpen">
      <summary>Determina se o acessador está aberto por um processo no momento.</summary>
      <returns>
        <see langword="true" />Se o acessador estiver aberto; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)">
      <summary>Lê uma estrutura do tipo <paramref name="T" /> do acessador em uma referência fornecida.</summary>
      <param name="position">A posição no acessador na qual a leitura começará.</param>
      <param name="structure">A estrutura para conter os dados lidos.</param>
      <typeparam name="T">O tipo de estrutura.</typeparam>
      <exception cref="T:System.ArgumentException">Não há bytes suficiente após <paramref name="position" /> a serem lidos em uma estrutura do tipo <paramref name="T" />.  

ou - 
<see langword="T" /> é um tipo de valor que contém um ou mais tipos de referência.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à leitura.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary>Lê as estruturas do tipo <paramref name="T" /> do acessador em uma matriz do tipo <paramref name="T" />.</summary>
      <param name="position">O número de bytes no acessador no qual a leitura começará.</param>
      <param name="array">A matriz para conter as estruturas lidas do acessador.</param>
      <param name="offset">O índice em <paramref name="array" /> no qual colocar a primeira estrutura copiada.</param>
      <param name="count">O número de estruturas de tipo <c>T</c> a serem lidas do acessador.</param>
      <typeparam name="T">O tipo de estrutura.</typeparam>
      <returns>O número de estruturas lidas no <paramref name="array" />. Esse valor poderá ser menor que <paramref name="count" /> se houver menos estruturas disponíveis ou zero se o final do acessador for atingido.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> não é grande o suficiente para conter <paramref name="count" /> de estruturas (começando em <paramref name="position" />).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à leitura.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)">
      <summary>Lê um valor booliano do acessador.</summary>
      <param name="position">O número de bytes no acessador em que a leitura começará.</param>
      <returns>
        <see langword="true" /> ou <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">Não existem bytes suficientes após <paramref name="position" /> para ler um valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à leitura.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)">
      <summary>Lê um valor de byte do acessador.</summary>
      <param name="position">O número de bytes no acessador em que a leitura começará.</param>
      <returns>O valor que foi lido.</returns>
      <exception cref="T:System.ArgumentException">Não existem bytes suficientes após <paramref name="position" /> para ler um valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à leitura.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)">
      <summary>Lê um caractere do acessador.</summary>
      <param name="position">O número de bytes no acessador em que a leitura começará.</param>
      <returns>O valor que foi lido.</returns>
      <exception cref="T:System.ArgumentException">Não existem bytes suficientes após <paramref name="position" /> para ler um valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à leitura.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)">
      <summary>Lê um valor decimal do acessador.</summary>
      <param name="position">O número de bytes no acessador em que a leitura começará.</param>
      <returns>O valor que foi lido.</returns>
      <exception cref="T:System.ArgumentException">Não existem bytes suficientes após <paramref name="position" /> para ler um valor.  

ou - 
O decimal a ser lido é inválido.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à leitura.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)">
      <summary>Lê um valor de ponto flutuante de precisão dupla do acessador.</summary>
      <param name="position">O número de bytes no acessador em que a leitura começará.</param>
      <returns>O valor que foi lido.</returns>
      <exception cref="T:System.ArgumentException">Não existem bytes suficientes após <paramref name="position" /> para ler um valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à leitura.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)">
      <summary>Lê um inteiro de 16 bits do acessador.</summary>
      <param name="position">O número de bytes no acessador em que a leitura começará.</param>
      <returns>O valor que foi lido.</returns>
      <exception cref="T:System.ArgumentException">Não existem bytes suficientes após <paramref name="position" /> para ler um valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à leitura.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)">
      <summary>Lê um inteiro de 32 bits do acessador.</summary>
      <param name="position">O número de bytes no acessador em que a leitura começará.</param>
      <returns>O valor que foi lido.</returns>
      <exception cref="T:System.ArgumentException">Não existem bytes suficientes após <paramref name="position" /> para ler um valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à leitura.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)">
      <summary>Lê um inteiro de 64 bits do acessador.</summary>
      <param name="position">O número de bytes no acessador em que a leitura começará.</param>
      <returns>O valor que foi lido.</returns>
      <exception cref="T:System.ArgumentException">Não existem bytes suficientes após <paramref name="position" /> para ler um valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à leitura.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)">
      <summary>Lê um inteiro com sinal de 8 bits do acessador.</summary>
      <param name="position">O número de bytes no acessador em que a leitura começará.</param>
      <returns>O valor que foi lido.</returns>
      <exception cref="T:System.ArgumentException">Não existem bytes suficientes após <paramref name="position" /> para ler um valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à leitura.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)">
      <summary>Lê um valor de ponto flutuante de precisão simples do acessador.</summary>
      <param name="position">O número de bytes no acessador em que a leitura começará.</param>
      <returns>O valor que foi lido.</returns>
      <exception cref="T:System.ArgumentException">Não existem bytes suficientes após <paramref name="position" /> para ler um valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à leitura.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)">
      <summary>Lê um inteiro de 16 bits sem sinal do acessador.</summary>
      <param name="position">O número de bytes no acessador em que a leitura começará.</param>
      <returns>O valor que foi lido.</returns>
      <exception cref="T:System.ArgumentException">Não existem bytes suficientes após <paramref name="position" /> para ler um valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à leitura.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)">
      <summary>Lê um inteiro de 32 bits sem sinal do acessador.</summary>
      <param name="position">O número de bytes no acessador em que a leitura começará.</param>
      <returns>O valor que foi lido.</returns>
      <exception cref="T:System.ArgumentException">Não existem bytes suficientes após <paramref name="position" /> para ler um valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à leitura.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)">
      <summary>Lê um inteiro de 64 bits sem sinal do acessador.</summary>
      <param name="position">O número de bytes no acessador em que a leitura começará.</param>
      <returns>O valor que foi lido.</returns>
      <exception cref="T:System.ArgumentException">Não existem bytes suficientes após <paramref name="position" /> para ler um valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à leitura.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)">
      <summary>Grava um valor booliano no acessador.</summary>
      <param name="position">O número de bytes no acessador no qual a gravação começará.</param>
      <param name="value">O valor a ser gravado.</param>
      <exception cref="T:System.ArgumentException">Não existem bytes suficientes após <paramref name="position" /> para gravar um valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à gravação.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)">
      <summary>Grava um valor de byte no acessador.</summary>
      <param name="position">O número de bytes no acessador no qual a gravação começará.</param>
      <param name="value">O valor a ser gravado.</param>
      <exception cref="T:System.ArgumentException">Não existem bytes suficientes após <paramref name="position" /> para gravar um valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à gravação.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)">
      <summary>Grava um caractere no acessador.</summary>
      <param name="position">O número de bytes no acessador no qual a gravação começará.</param>
      <param name="value">O valor a ser gravado.</param>
      <exception cref="T:System.ArgumentException">Não existem bytes suficientes após <paramref name="position" /> para gravar um valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à gravação.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)">
      <summary>Grava um valor decimal no acessador.</summary>
      <param name="position">O número de bytes no acessador no qual a gravação começará.</param>
      <param name="value">O valor a ser gravado.</param>
      <exception cref="T:System.ArgumentException">Não existem bytes suficientes após <paramref name="position" /> para gravar um valor.  

ou - 
O decimal é inválido.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à gravação.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)">
      <summary>Grava um valor <see langword="Double" /> no acessador.</summary>
      <param name="position">O número de bytes no acessador no qual a gravação começará.</param>
      <param name="value">O valor a ser gravado.</param>
      <exception cref="T:System.ArgumentException">Não existem bytes suficientes após <paramref name="position" /> para gravar um valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à gravação.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)">
      <summary>Grava um inteiro de 16 bits no acessador.</summary>
      <param name="position">O número de bytes no acessador no qual a gravação começará.</param>
      <param name="value">O valor a ser gravado.</param>
      <exception cref="T:System.ArgumentException">Não existem bytes suficientes após <paramref name="position" /> para gravar um valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à gravação.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)">
      <summary>Grava um inteiro de 32 bits no acessador.</summary>
      <param name="position">O número de bytes no acessador no qual a gravação começará.</param>
      <param name="value">O valor a ser gravado.</param>
      <exception cref="T:System.ArgumentException">Não existem bytes suficientes após <paramref name="position" /> para gravar um valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à gravação.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)">
      <summary>Grava um inteiro de 64 bits no acessador.</summary>
      <param name="position">O número de bytes no acessador no qual a gravação começará.</param>
      <param name="value">O valor a ser gravado.</param>
      <exception cref="T:System.ArgumentException">Não existem bytes suficientes após a posição para gravar um valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à gravação.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)">
      <summary>Grava um inteiro de 8 bits no acessador.</summary>
      <param name="position">O número de bytes no acessador no qual a gravação começará.</param>
      <param name="value">O valor a ser gravado.</param>
      <exception cref="T:System.ArgumentException">Não existem bytes suficientes após <paramref name="position" /> para gravar um valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à gravação.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)">
      <summary>Grava um <see langword="Single" /> no acessador.</summary>
      <param name="position">O número de bytes no acessador no qual a gravação começará.</param>
      <param name="value">O valor a ser gravado.</param>
      <exception cref="T:System.ArgumentException">Não existem bytes suficientes após <paramref name="position" /> para gravar um valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à gravação.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)">
      <summary>Grava um inteiro de 16 bits sem sinal no acessador.</summary>
      <param name="position">O número de bytes no acessador no qual a gravação começará.</param>
      <param name="value">O valor a ser gravado.</param>
      <exception cref="T:System.ArgumentException">Não existem bytes suficientes após <paramref name="position" /> para gravar um valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à gravação.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)">
      <summary>Grava um inteiro de 32 bits sem sinal no acessador.</summary>
      <param name="position">O número de bytes no acessador no qual a gravação começará.</param>
      <param name="value">O valor a ser gravado.</param>
      <exception cref="T:System.ArgumentException">Não existem bytes suficientes após <paramref name="position" /> para gravar um valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à gravação.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)">
      <summary>Grava um inteiro de 64 bits sem sinal no acessador.</summary>
      <param name="position">O número de bytes no acessador no qual a gravação começará.</param>
      <param name="value">O valor a ser gravado.</param>
      <exception cref="T:System.ArgumentException">Não existem bytes suficientes após <paramref name="position" /> para gravar um valor.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à gravação.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)">
      <summary>Grava uma estrutura no acessador.</summary>
      <param name="position">O número de bytes no acessador no qual a gravação começará.</param>
      <param name="structure">A estrutura a ser gravada.</param>
      <typeparam name="T">O tipo de estrutura.</typeparam>
      <exception cref="T:System.ArgumentException">Não há bytes suficientes no acessador após <paramref name="position" /> para gravar uma estrutura do tipo <paramref name="T" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à gravação.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary>Grava estruturas de uma matriz do tipo <paramref name="T" /> no acessador.</summary>
      <param name="position">O número de bytes no acessador no qual a gravação começará.</param>
      <param name="array">A matriz para gravar no acessador.</param>
      <param name="offset">O índice em <paramref name="array" /> do qual iniciar a gravação.</param>
      <param name="count">O número de estruturas em <paramref name="array" /> a serem gravadas.</param>
      <typeparam name="T">O tipo de estrutura.</typeparam>
      <exception cref="T:System.ArgumentException">Não há bytes suficientes no acessador após <paramref name="position" /> para gravar o número de estruturas especificadas por <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> é menor que zero ou maior que a capacidade do acessador.  

ou - 
<paramref name="offset" /> ou <paramref name="count" /> é menor que zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">O acessador não dá suporte à gravação.</exception>
      <exception cref="T:System.ObjectDisposedException">O acessador foi descartado.</exception>
    </member>
    <member name="T:System.IO.UnmanagedMemoryStream">
      <summary>Fornece acesso aos blocos de memória não gerenciados a partir de código gerenciado.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.IO.UnmanagedMemoryStream" />.</summary>
      <exception cref="T:System.Security.SecurityException">O usuário não tem a permissão necessária.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.IO.UnmanagedMemoryStream" /> usando o tamanho da memória e o local especificados.</summary>
      <param name="pointer">Um ponteiro para um local da memória não gerenciado.</param>
      <param name="length">O tamanho da memória a ser usado.</param>
      <exception cref="T:System.Security.SecurityException">O usuário não tem a permissão necessária.</exception>
      <exception cref="T:System.ArgumentNullException">O valor <paramref name="pointer" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O valor <paramref name="length" /> é menor que zero.  

ou - 
O <paramref name="length" /> é grande o suficiente para causar um estouro.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.IO.UnmanagedMemoryStream" /> usando o local, o tamanho da memória, a quantidade total de memória e os valores de acesso ao arquivo.</summary>
      <param name="pointer">Um ponteiro para um local da memória não gerenciado.</param>
      <param name="length">O tamanho da memória a ser usado.</param>
      <param name="capacity">A quantidade total de memória atribuída ao fluxo.</param>
      <param name="access">Um dos valores de <see cref="T:System.IO.FileAccess" />.</param>
      <exception cref="T:System.Security.SecurityException">O usuário não tem a permissão necessária.</exception>
      <exception cref="T:System.ArgumentNullException">O valor <paramref name="pointer" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O valor <paramref name="length" /> é menor que zero.  

ou - 
O valor <paramref name="capacity" /> é menor que zero.  

ou - 
O valor <paramref name="length" /> é maior que o valor <paramref name="capacity" />.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.IO.UnmanagedMemoryStream" /> em um buffer seguro com deslocamento e comprimento especificados.</summary>
      <param name="buffer">O buffer que conterá o fluxo de memória não gerenciada.</param>
      <param name="offset">A posição de bytes no buffer na qual o fluxo de memória não gerenciada será iniciado.</param>
      <param name="length">O tamanho do fluxo de memória não gerenciada.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.IO.UnmanagedMemoryStream" /> em um buffer seguro com um deslocamento, tamanho e acesso a arquivos especificados.</summary>
      <param name="buffer">O buffer que conterá o fluxo de memória não gerenciada.</param>
      <param name="offset">A posição de bytes no buffer na qual o fluxo de memória não gerenciada será iniciado.</param>
      <param name="length">O tamanho do fluxo de memória não gerenciada.</param>
      <param name="access">O modo de acesso ao arquivo para o fluxo de memória não gerenciada.</param>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanRead">
      <summary>Obtém um valor que indica se um fluxo oferece suporte à leitura.</summary>
      <returns>
        <see langword="false" />Se o objeto foi criado por um construtor com um <paramref name="access" /> parâmetro que não inclui a leitura do fluxo e se o fluxo está fechado; caso contrário <see langword="true" />,.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanSeek">
      <summary>Obtém um valor que indica se um fluxo oferece suporte à busca.</summary>
      <returns>
        <see langword="false" />Se o fluxo for fechado; caso contrário <see langword="true" />,.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanWrite">
      <summary>Obtém um valor que indica se um fluxo oferece suporte à gravação.</summary>
      <returns>
        <see langword="false" />Se o objeto foi criado por um construtor com um <paramref name="access" /> valor de parâmetro que dá suporte à gravação ou foi criado por um construtor que não tinha parâmetros, ou se o fluxo estiver fechado <see langword="true" />; caso contrário,.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Capacity">
      <summary>Obtém o comprimento do fluxo (tamanho) ou a quantidade total de memória atribuída a um fluxo (capacidade).</summary>
      <returns>O tamanho ou a capacidade do fluxo.</returns>
      <exception cref="T:System.ObjectDisposedException">O fluxo está fechado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
      <summary>Libera os recursos não gerenciados usados pelo <see cref="T:System.IO.UnmanagedMemoryStream" /> e opcionalmente libera os recursos gerenciados.</summary>
      <param name="disposing">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Flush">
      <summary>Substitui o método <see cref="M:System.IO.Stream.Flush" /> para que nenhuma ação seja executada.</summary>
      <exception cref="T:System.ObjectDisposedException">O fluxo está fechado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>Substitui o método <see cref="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)" /> para que a operação seja cancelada se especificado, mas nenhuma outra ação seja executada.</summary>
      <param name="cancellationToken">O token a se monitorar para solicitações de cancelamento. O valor padrão é <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Uma tarefa que representa a operação de liberação assíncrona.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.IO.UnmanagedMemoryStream" /> usando um ponteiro para um local de memória não gerenciada.</summary>
      <param name="pointer">Um ponteiro para um local da memória não gerenciado.</param>
      <param name="length">O tamanho da memória a ser usado.</param>
      <param name="capacity">A quantidade total de memória atribuída ao fluxo.</param>
      <param name="access">Um dos valores de <see cref="T:System.IO.FileAccess" />.</param>
      <exception cref="T:System.Security.SecurityException">O usuário não tem a permissão necessária.</exception>
      <exception cref="T:System.ArgumentNullException">O valor <paramref name="pointer" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O valor <paramref name="length" /> é menor que zero.  

ou - 
O valor <paramref name="capacity" /> é menor que zero.  

ou - 
O valor <paramref name="length" /> é grande o suficiente para causar um estouro.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.IO.UnmanagedMemoryStream" /> em um buffer seguro com um deslocamento, tamanho e acesso a arquivos especificados.</summary>
      <param name="buffer">O buffer que conterá o fluxo de memória não gerenciada.</param>
      <param name="offset">A posição de bytes no buffer na qual o fluxo de memória não gerenciada será iniciado.</param>
      <param name="length">O tamanho do fluxo de memória não gerenciada.</param>
      <param name="access">O modo de acesso ao arquivo para o fluxo de memória não gerenciada.</param>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Length">
      <summary>Obtém o comprimento dos dados em um fluxo.</summary>
      <returns>O comprimento dos dados no fluxo.</returns>
      <exception cref="T:System.ObjectDisposedException">O fluxo está fechado.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Position">
      <summary>Obtém ou define a posição atual em um fluxo.</summary>
      <returns>A posição atual no fluxo.</returns>
      <exception cref="T:System.ObjectDisposedException">O fluxo está fechado.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">A posição é definida como um valor menor que zero ou a posição é maior que <see cref="F:System.Int32.MaxValue" /> ou resulta em estouro quando adicionada ao ponteiro atual.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.PositionPointer">
      <summary>Obtém ou define um ponteiro de bytes em um fluxo com base na posição atual no fluxo.</summary>
      <returns>Um ponteiro de byte.</returns>
      <exception cref="T:System.IndexOutOfRangeException">A posição atual é maior do que a capacidade do fluxo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">A posição que está sendo definida não é uma posição válida no fluxo atual.</exception>
      <exception cref="T:System.IO.IOException">O ponteiro está sendo definido como um valor menor que a posição inicial do fluxo.</exception>
      <exception cref="T:System.NotSupportedException">O fluxo foi inicializado para uso com um <see cref="T:System.Runtime.InteropServices.SafeBuffer" />. A propriedade <see cref="P:System.IO.UnmanagedMemoryStream.PositionPointer" /> é válida apenas para fluxos que são inicializados com um ponteiro <see cref="T:System.Byte" />.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Lê o número de bytes especificado na matriz especificada.</summary>
      <param name="buffer">Quando este método retorna, ele contém a matriz de bytes especificada com os valores entre <paramref name="offset" /> e (<paramref name="offset" /> + <paramref name="count" /> -1) substituídos pelos bytes lidos da fonte atual. Este parâmetro é passado não inicializado.</param>
      <param name="offset">O deslocamento de bytes baseado em zero em <paramref name="buffer" /> no qual será iniciada a leitura de dados no fluxo atual.</param>
      <param name="count">O número máximo de bytes a serem lidos do fluxo atual.</param>
      <returns>O número total de bytes lidos do buffer. Isso poderá ser menor que o número de bytes solicitado se esses muitos bytes não estiverem disponíveis no momento, ou zero (0) se o final do fluxo tiver sido atingido.</returns>
      <exception cref="T:System.ObjectDisposedException">O fluxo está fechado.</exception>
      <exception cref="T:System.NotSupportedException">A memória subjacente não dá suporte a leitura.  

ou - 
A propriedade <see cref="P:System.IO.UnmanagedMemoryStream.CanRead" /> é definida como <see langword="false" />.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="buffer" /> é definido como <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="offset" /> é menor que zero.  

ou - 
O parâmetro <paramref name="count" /> é menor que zero.</exception>
      <exception cref="T:System.ArgumentException">O comprimento da matriz de buffer menos o parâmetro <paramref name="offset" /> é menor do que o parâmetro <paramref name="count" />.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Read(System.Span{System.Byte})">
      <summary>Lê todos os bytes desse fluxo de memória não gerenciado no intervalo especificado de bytes.</summary>
      <param name="destination">Quando esse método é retornado, esse intervalo contém todos os bytes do fluxo de memória não gerenciado.</param>
      <returns>O número total de bytes lidos no destino.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Lê de forma assíncrona o número de bytes especificado na matriz especificada.</summary>
      <param name="buffer">O buffer no qual os dados serão gravados.</param>
      <param name="offset">O deslocamento de bytes no <paramref name="buffer" /> no qual será iniciada a gravação de dados no fluxo.</param>
      <param name="count">O número máximo de bytes a serem lidos.</param>
      <param name="cancellationToken">O token a se monitorar para solicitações de cancelamento. O valor padrão é <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Uma tarefa que representa a operação de leitura assíncrona. O valor do parâmetro <paramref name="TResult" /> contém o número total de bytes lidos no buffer. O valor do resultado poderá ser menor que o número de bytes solicitados se o número de bytes disponíveis no momento for menor que o número solicitado ou poderá ser 0 (zero) se o final do fluxo foi atingido.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <summary>Lê de forma assíncrona os bytes de fluxo de memória não gerenciado na região de memória.</summary>
      <param name="buffer">Quando o método assíncrono é concluído, essa região de memória contém todos os bytes lidos do fluxo de memória não gerenciado.</param>
      <param name="cancellationToken">O token a se monitorar para solicitações de cancelamento. O valor padrão é <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Uma tarefa que representa a operação de leitura assíncrona e encapsula o número total de bytes lidos no buffer.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.ReadByte">
      <summary>Lê um byte de um fluxo e avança a posição no fluxo em um byte ou retorna -1 caso esteja no final do fluxo.</summary>
      <returns>O byte sem sinal é convertido em um objeto <see cref="T:System.Int32" /> ou -1 se estiver no final do fluxo.</returns>
      <exception cref="T:System.ObjectDisposedException">O fluxo está fechado.</exception>
      <exception cref="T:System.NotSupportedException">A memória subjacente não dá suporte a leitura.  

ou -

 A posição atual está no final do fluxo.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Define a posição atual do fluxo atual como o valor determinado.</summary>
      <param name="offset">O ponto relativo à <c>origem</c> no qual iniciar a busca.</param>
      <param name="loc">Especifica a posição inicial, final ou atual como um ponto de referência para <c>origin</c> usando um valor do tipo <see cref="T:System.IO.SeekOrigin" />.</param>
      <returns>A nova posição no fluxo.</returns>
      <exception cref="T:System.IO.IOException">Tentativa de buscar antes do início do fluxo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O valor <paramref name="offset" /> é maior que o tamanho máximo do fluxo.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="loc" /> é inválido.</exception>
      <exception cref="T:System.ObjectDisposedException">O fluxo está fechado.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
      <summary>Define o comprimento de um fluxo como um valor especificado.</summary>
      <param name="value">O comprimento do fluxo.</param>
      <exception cref="T:System.IO.IOException">Ocorreu um erro de E/S.</exception>
      <exception cref="T:System.ObjectDisposedException">O fluxo está fechado.</exception>
      <exception cref="T:System.NotSupportedException">A memória subjacente não oferece suporte à gravação.  

ou - 
É feita uma tentativa de gravar no fluxo e a propriedade <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> é <see langword="false" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O <paramref name="value" /> especificado excede a capacidade do fluxo.  

ou - 
O <paramref name="value" /> especificado é negativo.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Grava um bloco de bytes no fluxo atual usando os dados de um buffer.</summary>
      <param name="buffer">A matriz de bytes da qual copiar bytes para o fluxo atual.</param>
      <param name="offset">O deslocamento do buffer no qual começar a copiar bytes para o fluxo atual.</param>
      <param name="count">O número de bytes a serem gravados no fluxo atual.</param>
      <exception cref="T:System.ObjectDisposedException">O fluxo está fechado.</exception>
      <exception cref="T:System.NotSupportedException">A memória subjacente não oferece suporte à gravação.  

ou - 
É feita uma tentativa de gravar no fluxo e a propriedade <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> é <see langword="false" />.  

ou - 
O valor <paramref name="count" /> é maior que a capacidade do fluxo.  

ou - 
A posição está no final da capacidade do fluxo.</exception>
      <exception cref="T:System.IO.IOException">Ocorre um erro de E/S.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Um dos parâmetros especificados é menor que zero.</exception>
      <exception cref="T:System.ArgumentException">O parâmetro <paramref name="offset" /> menos o comprimento do parâmetro <paramref name="buffer" /> é menor que o parâmetro <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="buffer" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Write(System.ReadOnlySpan{System.Byte})">
      <summary>Grava um bloco de bytes no fluxo de memória não gerenciado atual usando dados do intervalo de bytes fornecido.</summary>
      <param name="source">O intervalo de bytes do qual os bytes serão copiados para o fluxo de memória não gerenciado atual.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Grava uma sequência de bytes no fluxo atual assincronamente, avança a posição atual dentro desse fluxo pelo número de bytes gravados e monitora as solicitações de cancelamento.</summary>
      <param name="buffer">O buffer do qual os dados serão gravados.</param>
      <param name="offset">O deslocamento de bytes baseado em zero em <paramref name="buffer" /> do qual será iniciada a cópia de bytes no fluxo.</param>
      <param name="count">O número máximo de bytes a serem gravados.</param>
      <param name="cancellationToken">O token a se monitorar para solicitações de cancelamento. O valor padrão é <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Uma tarefa que representa a operação de gravação assíncrona.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
      <summary>Grava de forma assíncrona um intervalo de bytes no fluxo atual, avança a posição atual nesse fluxo até o número de bytes gravados e monitora as solicitações de cancelamento.</summary>
      <param name="buffer">O buffer do qual os dados serão gravados.</param>
      <param name="cancellationToken">O token a se monitorar para solicitações de cancelamento. O valor padrão é <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Uma tarefa que representa a operação de gravação assíncrona.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
      <summary>Grava um byte na posição atual no fluxo de arquivos.</summary>
      <param name="value">Um valor de bytes gravado no fluxo.</param>
      <exception cref="T:System.ObjectDisposedException">O fluxo está fechado.</exception>
      <exception cref="T:System.NotSupportedException">A memória subjacente não oferece suporte à gravação.  

ou - 
É feita uma tentativa de gravar no fluxo e a propriedade <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> é <see langword="false" />.  

ou - 
A posição atual está no fim da capacidade do fluxo.</exception>
      <exception cref="T:System.IO.IOException">O <paramref name="value" /> fornecido faz com que o fluxo exceda sua capacidade máxima.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.IDispatchConstantAttribute">
      <summary>Indica que o valor padrão para o campo ou o parâmetro atribuído é uma instância de <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />, em que <see cref="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject" /> é <see langword="null" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IDispatchConstantAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.CompilerServices.IDispatchConstantAttribute" />.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IDispatchConstantAttribute.Value">
      <summary>Obtém a constante <see langword="IDispatch" /> armazenada nesse atributo.</summary>
      <returns>A <see langword="IDispatch" /> constante armazenada neste atributo. Somente <see langword="null" /> é permitido para um <see langword="IDispatch" /> valor constante.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IUnknownConstantAttribute">
      <summary>Indica que o valor padrão para o campo ou o parâmetro atribuído é uma instância de <see cref="T:System.Runtime.InteropServices.UnknownWrapper" />, em que <see cref="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject" /> é <see langword="null" />. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IUnknownConstantAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.CompilerServices.IUnknownConstantAttribute" />.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IUnknownConstantAttribute.Value">
      <summary>Obtém a constante <see langword="IUnknown" /> armazenada nesse atributo.</summary>
      <returns>A <see langword="IUnknown" /> constante armazenada neste atributo. Somente <see langword="null" /> é permitido para um <see langword="IUnknown" /> valor constante.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute">
      <summary>Permite que um método não gerenciado chame um método gerenciado.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ArrayWithOffset">
      <summary>Encapsula uma matriz e um deslocamento dentro da matriz especificada.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.#ctor(System.Object,System.Int32)">
      <summary>Inicializa uma nova instância da estrutura <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</summary>
      <param name="array">Uma matriz gerenciada.</param>
      <param name="offset">O deslocamento, em bytes, do elemento a ser passado pela invocação de plataforma.</param>
      <exception cref="T:System.ArgumentException">A matriz é maior que 2 gigabytes (GB).</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Object)">
      <summary>Indica se o objeto especificado corresponde ao objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> atual.</summary>
      <param name="obj">O objeto a ser comparado com essa instância.</param>
      <returns>
        <see langword="true" /> se o objeto corresponde a este <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>Indica se o objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> especificado corresponde à instância atual.</summary>
      <param name="obj">Um objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> a ser comparado com essa instância.</param>
      <returns>
        <see langword="true" /> se o objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> especificado corresponde à instância atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetArray">
      <summary>Retorna a matriz gerenciada referenciada por este <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</summary>
      <returns>A matriz gerenciada à qual essa instância faz referência.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetHashCode">
      <summary>Retorna um código hash para este tipo de valor.</summary>
      <returns>O código hash para essa instância.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetOffset">
      <summary>Retorna o deslocamento que foi fornecido quando esse <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> foi construído.</summary>
      <returns>O deslocamento para esta instância.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Equality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>Determina se dois objetos <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> especificados têm o mesmo valor.</summary>
      <param name="a">Um objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> a ser comparado com o parâmetro <paramref name="b" />.</param>
      <param name="b">Um objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> a ser comparado com o parâmetro <paramref name="a" />.</param>
      <returns>
        <see langword="true" /> se o valor de <paramref name="a" /> for o mesmo que o valor de <paramref name="b" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Inequality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>Determina se dois objetos <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> especificados não têm o mesmo valor.</summary>
      <param name="a">Um objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> a ser comparado com o parâmetro <paramref name="b" />.</param>
      <param name="b">Um objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> a ser comparado com o parâmetro <paramref name="a" />.</param>
      <returns>
        <see langword="true" /> se o valor de <paramref name="a" /> não for o mesmo que o valor de <paramref name="b" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.AutomationProxyAttribute">
      <summary>Especifica se o tipo deve ter o marshaling realizado usando o marshaler de Automação ou um proxy e stub personalizados.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AutomationProxyAttribute.#ctor(System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.AutomationProxyAttribute" />.</summary>
      <param name="val">
        <see langword="true" /> se a classe deve passar por marshaling usando o Marshaler de Automação; <see langword="false" /> se um marshaler de stub de proxy deve ser usado.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.AutomationProxyAttribute.Value">
      <summary>Obtém um valor que indica o tipo de marshaler a ser usado.</summary>
      <returns>
        <see langword="true" /> se a classe deve passar por marshaling usando o Marshaler de Automação; <see langword="false" /> se um marshaler de stub de proxy deve ser usado.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.BestFitMappingAttribute">
      <summary>Controla se os caracteres Unicode são convertidos em caracteres ANSI correspondentes mais próximos.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BestFitMappingAttribute.#ctor(System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.BestFitMappingAttribute" /> definida com o valor da propriedade <see cref="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping" />.</summary>
      <param name="BestFitMapping">
        <see langword="true" /> para indicar que o mapeamento de melhor ajuste está habilitado; caso contrário, <see langword="false" />. O padrão é <see langword="true" />.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping">
      <summary>Obtém o comportamento de mapeamento de melhor ajuste ao converter caracteres Unicode em caracteres ANSI.</summary>
      <returns>
        <see langword="true" />Se o mapeamento de melhor ajuste estiver habilitado; caso contrário <see langword="false" />,. O padrão é <see langword="true" />.</returns>
    </member>
    <member name="F:System.Runtime.InteropServices.BestFitMappingAttribute.ThrowOnUnmappableChar">
      <summary>Habilita ou desabilita a geração de uma exceção em um caractere Unicode não mapeável que é convertido em um caractere "?" ANSI.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.BStrWrapper">
      <summary>Realiza marshaling de dados do tipo <see langword="VT_BSTR" /> de código gerenciado para código não gerenciado. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.Object)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> com o objeto <see cref="T:System.Object" /> especificado.</summary>
      <param name="value">O objeto a ser encapsulado e a ser realizado marshaling como <see langword="VT_BSTR" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> com o objeto <see cref="T:System.String" /> especificado.</summary>
      <param name="value">O objeto a ser encapsulado e a ser realizado marshaling como <see langword="VT_BSTR" />.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BStrWrapper.WrappedObject">
      <summary>Obtém o objeto <see cref="T:System.String" /> encapsulado para realizar marshaling como o tipo <see langword="VT_BSTR" />.</summary>
      <returns>O objeto que é encapsulado <see cref="T:System.Runtime.InteropServices.BStrWrapper" />pelo.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CallingConvention">
      <summary>Especifica a convenção de chamada necessária para chamar os métodos implementados em código não gerenciado.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Cdecl">
      <summary>O chamador limpa a pilha. Isso permite chamar funções com <see langword="varargs" />, o que o torna apropriado para usar para métodos que aceitam um número variável de parâmetros, como <see langword="Printf" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.FastCall">
      <summary>Não há suporte para essa convenção de chamada.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.StdCall">
      <summary>O computador chamado limpa a pilha. Essa é a convenção padrão para chamar funções não gerenciadas com a invocação da plataforma.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.ThisCall">
      <summary>O primeiro parâmetro é o ponteiro <see langword="this" /> e é armazenado no ECX de registro. Outros parâmetros são enviados por push na pilha. Esta convenção de chamada é usada para chamar métodos em classes exportadas de uma DLL não gerenciada.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Winapi">
      <summary>Este membro não é realmente uma convenção de chamada, mas usa a convenção de chamada da plataforma padrão. Por exemplo, no Windows o padrão é <see cref="F:System.Runtime.InteropServices.CallingConvention.StdCall" /> e no Windows CE.NET é <see cref="F:System.Runtime.InteropServices.CallingConvention.Cdecl" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
      <summary>Indica o tipo de interface de classe a ser gerado para uma classe exposta ao COM, se uma interface for de fato gerada.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> com o valor de enumeração <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> especificado.</summary>
      <param name="classInterfaceType">Descreve o tipo de interface que é gerado para uma classe.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> com o membro de enumeração <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> especificado.</summary>
      <param name="classInterfaceType">Um dos valores <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> que descreve o tipo de interface que é gerado para uma classe.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ClassInterfaceAttribute.Value">
      <summary>Obtém o valor <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> que descreve que tipo de interface deverá ser gerado para a classe.</summary>
      <returns>O <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> valor que descreve qual tipo de interface deve ser gerado para a classe.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceType">
      <summary>Identifica o tipo de interface de classe que é gerado para uma classe.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch">
      <summary>Indica que a classe só dá suporte à associação tardia para clientes COM. Um <see langword="dispinterface" /> para a classe é exposto automaticamente aos clientes COM na solicitação. A biblioteca de tipos produzida por Tlbexp.exe (Exportador da Biblioteca de Tipos) não contém informações de tipo para o <see langword="dispinterface" /> para evitar que os clientes armazenem em cache os DISPIDs da interface. O <see langword="dispinterface" /> não apresenta os problemas de controle de versão descritos em <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> porque os clientes podem apenas fazer a associação tardia com a interface.
Essa é a configuração padrão para <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDual">
      <summary>Indica que uma interface de classe dupla é automaticamente gerada para a classe e exposta a COM. Informações de tipo são geradas para a interface de classe e publicadas na biblioteca de tipos. Usar <see langword="AutoDual" /> não é recomendável devido a restrições de controle de versão descritas em <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.None">
      <summary>Indica que nenhuma interface de classe é gerada para a classe. Se nenhuma interface for implementada explicitamente, a classe só poderá fornecer acesso de associação tardia por meio da interface <see langword="IDispatch" />. Essa é a configuração recomendada para <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />. Usar <see langword="ClassInterfaceType.None" /> é a única maneira de expor a funcionalidade por meio de interfaces explicitamente implementadas pela classe.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CoClassAttribute">
      <summary>Especifica o identificador de classe de coclass importado de uma biblioteca de tipos.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CoClassAttribute.#ctor(System.Type)">
      <summary>Inicializa a nova instância do <see cref="T:System.Runtime.InteropServices.CoClassAttribute" /> com o identificador de classe de do coclass original.</summary>
      <param name="coClass">Um <see cref="T:System.Type" /> que contém o identificador de classe do coclass original.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.CoClassAttribute.CoClass">
      <summary>Obtém o identificador de classe do coclass original.</summary>
      <returns>Um <see cref="T:System.Type" /> que contém o identificador de classe da coclasse original.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAliasNameAttribute">
      <summary>Indica o alias COM de um parâmetro ou tipo de campo.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAliasNameAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.ComAliasNameAttribute" /> com o alias do parâmetro ou do campo atribuído.</summary>
      <param name="alias">O alias do campo ou do parâmetro, como encontrado na biblioteca de tipos quando ela foi importada.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAliasNameAttribute.Value">
      <summary>Obtém o alias do campo ou do parâmetro, como encontrado na biblioteca de tipos quando ela foi importada.</summary>
      <returns>O alias do campo ou do parâmetro, como encontrado na biblioteca de tipos quando ela foi importada.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAwareEventInfo">
      <summary>Permite o registro de associação tardia de um manipulador de eventos.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.#ctor(System.Type,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> usando o tipo especificado e um nome do evento no tipo.</summary>
      <param name="type">O tipo de objeto.</param>
      <param name="eventName">O nome de um evento em <paramref name="type" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary>Anexa um manipulador de eventos a um objeto COM.</summary>
      <param name="target">O objeto de destino ao qual o delegado de evento deve ser associado.</param>
      <param name="handler">O delegado do evento.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Attributes">
      <summary>Obtém os atributos desse evento.</summary>
      <returns>Os atributos somente leitura para este evento.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.DeclaringType">
      <summary>Obtém a classe que declara esse membro.</summary>
      <returns>O objeto <see cref="T:System.Type" /> para a classe que declara esse membro.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetAddMethod(System.Boolean)">
      <summary>Obtém o método que foi usado para adicionar um delegado de manipulador de eventos à origem do evento.</summary>
      <param name="nonPublic">
        <see langword="true" /> para retornar métodos não públicos; caso contrário, <see langword="false" />.</param>
      <returns>O método que foi usado para adicionar um delegado de manipulador de eventos à origem do evento.</returns>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> é <see langword="true" /> e o método usado para adicionar um delegado de manipulador de eventos é não público, mas o chamador não tem permissão para refletir nos métodos não públicos.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
      <summary>Quando substituído em uma classe derivada, obtém uma matriz que contém todos os atributos personalizados aplicados a esse membro.</summary>
      <param name="inherit">
        <see langword="true" /> para pesquisar a cadeia de herança desse membro para encontrar os atributos; caso contrário, <see langword="false" />.</param>
      <returns>Uma matriz que contém todos os atributos personalizados ou uma que não tem elementos se nenhum atributo tiver sido definido.</returns>
      <exception cref="T:System.InvalidOperationException">Esse membro pertence a um tipo carregado no contexto somente reflexão. Confira Como carregar assemblies no contexto somente de reflexão.</exception>
      <exception cref="T:System.TypeLoadException">Um tipo de atributo personalizado não pode ser carregado.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Quando substituído em uma classe derivada, obtém uma matriz que contém todos os atributos personalizados do tipo especificado aplicados a esse membro.</summary>
      <param name="attributeType">O tipo de atributo a ser pesquisado. Somente os atributos que podem ser atribuídos a esse tipo podem ser retornados.</param>
      <param name="inherit">
        <see langword="true" /> para pesquisar a cadeia de herança desse membro para encontrar os atributos; caso contrário, <see langword="false" />.</param>
      <returns>Uma matriz que contém todos os atributos personalizados de um tipo especificado, ou uma matriz que não tem elementos se nenhum atributo tiver sido definido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Esse membro pertence a um tipo carregado no contexto somente reflexão. Confira Como Carregar assemblies no contexto somente de reflexão</exception>
      <exception cref="T:System.TypeLoadException">Um tipo de atributo personalizado não pode ser carregado.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributesData">
      <summary>Retorna uma lista de objetos <see cref="T:System.Reflection.CustomAttributeData" /> para o <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> atual.</summary>
      <returns>Uma lista genérica de objetos <see cref="T:System.Reflection.CustomAttributeData" /> que representam dados sobre os atributos que foram aplicados ao <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> atual.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetOtherMethods(System.Boolean)">
      <summary>Retorna os métodos públicos ou não públicos que foram associados um evento em metadados.</summary>
      <param name="nonPublic">
        <see langword="true" /> para incluir os métodos não públicos; caso contrário, <see langword="false" />.</param>
      <returns>Uma matriz representando os métodos que foram associados ao evento em metadados. Se não há nenhum desses métodos, uma matriz vazia é retornada.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
      <summary>Quando substituído em uma classe derivada, retorna o método que foi chamado quando o evento foi gerado.</summary>
      <param name="nonPublic">
        <see langword="true" /> para retornar métodos não públicos; caso contrário, <see langword="false" />.</param>
      <returns>O objeto que foi chamado quando o evento foi acionado.</returns>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> é <see langword="true" /> e o método usado para adicionar um delegado de manipulador de eventos é não público, mas o chamador não tem permissão para refletir nos métodos não públicos.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)">
      <summary>Quando substituído em uma classe derivada, recupera o objeto <see cref="T:System.Reflection.MethodInfo" /> para remover um método do evento.</summary>
      <param name="nonPublic">
        <see langword="true" /> para retornar métodos não públicos; caso contrário, <see langword="false" />.</param>
      <returns>O método que foi usado para remover um delegado de manipulador de eventos da origem do evento.</returns>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> é <see langword="true" /> e o método usado para adicionar um delegado de manipulador de eventos é não público, mas o chamador não tem permissão para refletir nos métodos não públicos.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)">
      <summary>Indica se uma ou mais instâncias do atributo especificado será aplicada a esse membro.</summary>
      <param name="attributeType">O tipo de atributo a ser pesquisado.</param>
      <param name="inherit">
        <see langword="true" /> para pesquisar a cadeia de herança desse membro para encontrar os atributos; caso contrário, <see langword="false" />.</param>
      <returns>
        <see langword="true" /> se o atributo especificado tiver sido aplicado a este membro; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.MetadataToken">
      <summary>Obtém o token de metadados associado ao objeto <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> atual.</summary>
      <returns>Um inteiro de 32 bits que representa o token de metadados.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Module">
      <summary>Obtém o módulo associado ao objeto <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> atual.</summary>
      <returns>O módulo associado ao objeto atual <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> .</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Name">
      <summary>Obtém o nome do membro atual.</summary>
      <returns>O nome desse membro.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.ReflectedType">
      <summary>Obtém o objeto de classe que foi usado para inicializar esta instância.</summary>
      <returns>O <see cref="T:System.Type" /> objeto que foi usado para inicializar o objeto atual.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>Desanexa um manipulador de eventos de um objeto COM.</summary>
      <param name="target">O objeto de destino ao qual o delegado do evento está associado.</param>
      <param name="handler">O delegado do evento.</param>
      <exception cref="T:System.InvalidOperationException">O evento não tem um acessador <see langword="remove" /> público.</exception>
      <exception cref="T:System.ArgumentException">O manipulador passado não pode ser usado.</exception>
      <exception cref="T:System.Reflection.TargetException">No .NET para aplicativos da Windows Store ou na Biblioteca de Classes Portátil, capture <see cref="T:System.Exception" /> em vez disso.  


            

 O parâmetro <paramref name="target" /> é <see langword="null" /> e o evento não é estático.  

ou - 
O <see cref="T:System.Reflection.EventInfo" /> não está declarado no destino.</exception>
      <exception cref="T:System.MethodAccessException">Em vez disso, no .NET para aplicativos da Windows Store ou na Biblioteca de Classes Portátil, capture a exceção de classe base, <see cref="T:System.MemberAccessException" />.  


            

 O chamador não tem permissão de acesso ao membro.</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute">
      <summary>Indica a um cliente COM que todas as classes na versão atual de um assembly são compatíveis com as classes em uma versão anterior do assembly.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComCompatibleVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute" /> com os números da versão principal, da versão secundária, de build e de revisão do assembly.</summary>
      <param name="major">O número de versão principal do assembly.</param>
      <param name="minor">O número de versão secundária do assembly.</param>
      <param name="build">O número de build do assembly.</param>
      <param name="revision">O número de revisão do assembly.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.BuildNumber">
      <summary>Obtém o número de build do assembly.</summary>
      <returns>O número de build do assembly.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MajorVersion">
      <summary>Obtém o número de versão principal do assembly.</summary>
      <returns>O número de versão principal do assembly.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MinorVersion">
      <summary>Obtém o número de versão secundária do assembly.</summary>
      <returns>O número de versão secundária do assembly.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.RevisionNumber">
      <summary>Obtém o número de revisão do assembly.</summary>
      <returns>O número de revisão do assembly.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComConversionLossAttribute">
      <summary>Indica que informações sobre uma classe ou interface foram perdidas quando foram importadas de uma biblioteca de tipos para um assembly.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComConversionLossAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see langword="ComConversionLossAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute">
      <summary>Especifica uma interface padrão para expor ao COM. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute" /> com o objeto <see cref="T:System.Type" /> especificado como a interface padrão exposta ao COM.</summary>
      <param name="defaultInterface">Um valor <see cref="T:System.Type" /> que indica a interface padrão a ser exposta ao COM.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.Value">
      <summary>Obtém o objeto <see cref="T:System.Type" /> que especifica a interface padrão a ser exposta ao COM.</summary>
      <returns>O <see cref="T:System.Type" /> objeto que especifica a interface padrão para expor ao com.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
      <summary>Identifica a interface de origem e a classe que implementa os métodos da interface do evento é gerado quando uma coclass é importada de uma biblioteca de tipos COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.ComEventInterfaceAttribute" /> com a interface de origem e a classe do provedor especificados.</summary>
      <param name="SourceInterface">Um <see cref="T:System.Type" /> que contém a interface de origem original da biblioteca de tipos. COM usa essa interface para fazer o retorno de chamada para a classe gerenciada.</param>
      <param name="EventProvider">Um <see cref="T:System.Type" /> que contém a classe que implementa os métodos da interface do evento.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.EventProvider">
      <summary>Obtém a classe que implementa os métodos da interface do evento.</summary>
      <returns>Um <see cref="T:System.Type" /> que contém a classe que implementa os métodos da interface do evento.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.SourceInterface">
      <summary>Obtém a interface de origem original da biblioteca de tipos.</summary>
      <returns>Um <see cref="T:System.Type" /> que contém a interface de origem.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventsHelper">
      <summary>Fornece métodos que permitem que os delegados do .NET Framework que tratam os eventos sejam adicionados e removidos dos objetos COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Combine(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary>Adiciona um delegado à lista de invocação de eventos provenientes de um objeto COM.</summary>
      <param name="rcw">O objeto COM que dispara os eventos a que o chamador gostaria de responder.</param>
      <param name="iid">O identificador da interface de origem usada pelo objeto COM para disparar eventos.</param>
      <param name="dispid">O identificador de expedição do método na interface de origem.</param>
      <param name="d">O delegado a ser invocado quando o evento COM é acionado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Remove(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary>Remove um delegado da lista de invocação de eventos provenientes de um objeto COM.</summary>
      <param name="rcw">O objeto COM a que o delegado está anexado.</param>
      <param name="iid">O identificador da interface de origem usada pelo objeto COM para disparar eventos.</param>
      <param name="dispid">O identificador de expedição do método na interface de origem.</param>
      <param name="d">O delegado a ser removido da lista de invocação.</param>
      <returns>Um delegado que foi removido da lista de invocação.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.COMException">
      <summary>A exceção é lançada quando um HRESULT não reconhecido retorna de uma chamada de método COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.COMException" /> com valores padrão.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.COMException" /> dos dados de serialização.</summary>
      <param name="info">O objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que mantém os dados de objeto serializados.</param>
      <param name="context">O objeto <see cref="T:System.Runtime.Serialization.StreamingContext" /> que fornece as informações contextuais sobre a origem ou o destino.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.COMException" /> com uma mensagem especificada.</summary>
      <param name="message">A mensagem que indica o motivo da exceção.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.COMException" /> com uma mensagem de erro especificada e uma referência à exceção interna que é a causa da exceção.</summary>
      <param name="message">A mensagem de erro que explica a razão da exceção.</param>
      <param name="inner">A exceção que é a causa da exceção atual. Caso o parâmetro <paramref name="inner" /> não seja <see langword="null" />, a exceção atual é acionada em um bloco <see langword="catch" /> que identifica a exceção interna.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.COMException" /> com uma mensagem e um código de erro especificados.</summary>
      <param name="message">A mensagem que indica o motivo pelo qual a exceção ocorreu.</param>
      <param name="errorCode">O valor do código de erro (HRESULT) associado a essa exceção.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.ToString">
      <summary>Converte o conteúdo da exceção em uma cadeia de caracteres.</summary>
      <returns>Uma cadeia de caracteres que contém as propriedades <see cref="P:System.Exception.HResult" />, <see cref="P:System.Exception.Message" />, <see cref="P:System.Exception.InnerException" /> e <see cref="P:System.Exception.StackTrace" /> da exceção.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComImportAttribute">
      <summary>Indica que o tipo de atributo foi definido anteriormente na COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComImportAttribute.#ctor">
      <summary>Inicializa uma nova instância do <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComInterfaceType">
      <summary>Identifica como expor uma interface a COM.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual">
      <summary>Indica que a interface é exposta a COM como uma interface dupla, que habilita a associação antecipada e tardia. <see cref="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual" /> é o valor padrão.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch">
      <summary>Indica que a interface é exposta a COM como uma dispinterface, que habilita somente a associação tardia.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIInspectable">
      <summary>Indica que uma interface é exposta a COM como uma interface Tempo de Execução do Windows.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown">
      <summary>Indica que uma interface é exposta a COM como uma interface derivada de IUnknown, o que habilita somente a associação antecipada.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComMemberType">
      <summary>Descreve o tipo de um membro de COM.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.Method">
      <summary>O membro é um método normal.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropGet">
      <summary>O membro obtém propriedades.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropSet">
      <summary>O membro define propriedades.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute">
      <summary>Especifica o método a ser chamado quando você registra um assembly para ser usado de COM. Isso habilita a execução de código escrito pelo usuário durante o processo de registro.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComRegisterFunctionAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute">
      <summary>Identifica uma lista de interfaces que são expostas como origens de evento COM para a classe atribuída.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> com o nome da interface de origem do evento.</summary>
      <param name="sourceInterfaces">Uma lista delimitada por valores nulos de nomes totalmente qualificados da interface de origem do evento.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> com o tipo a ser usado como interface de origem.</summary>
      <param name="sourceInterface">O <see cref="T:System.Type" /> da interface de origem.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> com os tipos a serem usados como interfaces de origem.</summary>
      <param name="sourceInterface1">O <see cref="T:System.Type" /> da interface de origem padrão.</param>
      <param name="sourceInterface2">O <see cref="T:System.Type" /> da interface de origem.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type)">
      <summary>Inicializa uma nova instância da classe <see langword="ComSourceInterfacesAttribute" /> com os tipos a serem usados como interfaces de origem.</summary>
      <param name="sourceInterface1">O <see cref="T:System.Type" /> da interface de origem padrão.</param>
      <param name="sourceInterface2">O <see cref="T:System.Type" /> da interface de origem.</param>
      <param name="sourceInterface3">O <see cref="T:System.Type" /> da interface de origem.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type,System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> com os tipos a serem usados como interfaces de origem.</summary>
      <param name="sourceInterface1">O <see cref="T:System.Type" /> da interface de origem padrão.</param>
      <param name="sourceInterface2">O <see cref="T:System.Type" /> da interface de origem.</param>
      <param name="sourceInterface3">O <see cref="T:System.Type" /> da interface de origem.</param>
      <param name="sourceInterface4">O <see cref="T:System.Type" /> da interface de origem.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComSourceInterfacesAttribute.Value">
      <summary>Obtém o nome totalmente qualificado da interface de origem do evento.</summary>
      <returns>O nome totalmente qualificado da interface de origem do evento.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ADVF">
      <summary>Especifica o comportamento solicitado ao configurar um coletor de aviso ou uma conexão de armazenamento em cache com um objeto.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_DATAONSTOP">
      <summary>Para conexões de consultoria de dados, garanta a acessibilidade aos dados.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_NODATA">
      <summary>Para conexões de consultoria de dados (<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> ou <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />), esse sinalizador solicita que o objeto de dados não envie dados quando ele chamar <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_ONLYONCE">
      <summary>Solicita que o objeto faça apenas uma notificação de alteração ou atualização de cache antes de excluir a conexão.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_PRIMEFIRST">
      <summary>Solicita que o objeto não espere os dados ou a exibição mudarem antes de fazer uma chamada inicial para <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> (para conexões de consultoria de exibição ou dados) ou atualizar o cache (para conexões de cache).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN">
      <summary>Esse valor é usado por aplicativos de objeto DLL e manipuladores de objeto que executam o desenho de seus objetos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_NOHANDLER">
      <summary>Sinônimo de <see cref="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN" />, que é usado com mais frequência.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_ONSAVE">
      <summary>Para conexões de cache, esse sinalizador atualiza a representação armazenada em cache apenas quando o objeto que contém o cache é salvo.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BIND_OPTS">
      <summary>Armazena os parâmetros que são usados durante uma operação de associação de moniker.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.cbStruct">
      <summary>Especifica o tamanho, em bytes, da estrutura <see langword="BIND_OPTS" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.dwTickCountDeadline">
      <summary>Indica a quantidade de tempo (tempo de relógio, em milissegundos, conforme retornado pela função <see langword="GetTickCount" />) que o chamador especificou para concluir a operação de associação.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfFlags">
      <summary>Controla os aspectos das operações de associação de moniker.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfMode">
      <summary>Representa sinalizadores que devem ser usados ao abrir o arquivo que contém o objeto identificado pelo moniker.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BINDPTR">
      <summary>Contém um ponteiro para uma estrutura associada a <see cref="T:System.Runtime.InteropServices.FUNCDESC" />, a <see cref="T:System.Runtime.InteropServices.VARDESC" /> ou a uma interface <see langword="ITypeComp" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpfuncdesc">
      <summary>Representa um ponteiro para uma estrutura <see cref="T:System.Runtime.InteropServices.FUNCDESC" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lptcomp">
      <summary>Representa um ponteiro para uma interface <see cref="T:System.Runtime.InteropServices.ComTypes.ITypeComp" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpvardesc">
      <summary>Representa um ponteiro para uma estrutura <see cref="T:System.Runtime.InteropServices.VARDESC" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CALLCONV">
      <summary>Identifica a convenção de chamada usada por um método descrito em uma estrutura de METHODDATA.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_CDECL">
      <summary>Indica que a convenção de chamada CDECL (declaração C) é usada para um método.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MACPASCAL">
      <summary>Indica que a convenção de chamada MACPASCAL (Macintosh Pascal) é usada para um método.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MAX">
      <summary>Indica o fim da enumeração <see cref="T:System.Runtime.InteropServices.ComTypes.CALLCONV" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWCDECL">
      <summary>Indica que a convenção de chamada CDECL MPW (Workbench de programadores Macintosh) é usada para um método.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWPASCAL">
      <summary>Indica que a convenção de chamada PASCAL MPW (Workbench de programadores Macintosh) é usada para um método.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MSCPASCAL">
      <summary>Indica que a convenção de chamada MSCPASCAL (MSC Pascal) é usada para um método.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_PASCAL">
      <summary>Indica que a convenção de chamada Pascal é usada para um método.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_RESERVED">
      <summary>Este valor está reservado para uso futuro.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_STDCALL">
      <summary>Indica que a convenção de chamada STDCALL (Padrão) é usada para um método.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_SYSCALL">
      <summary>Indica que a convenção de chamada SYSCALL padrão é usada para um método.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CONNECTDATA">
      <summary>Descreve uma conexão existente para um ponto de conexão específico.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.dwCookie">
      <summary>Representa um token de conexão que é retornado de uma chamada para <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.pUnk">
      <summary>Representa um ponteiro para a interface <see langword="IUnknown" /> em um coletor de consultoria conectado. O chamador deve chamar <see langword="IUnknown::Release" /> nesse ponteiro quando a estrutura <see langword="CONNECTDATA" /> não é mais necessária.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DATADIR">
      <summary>Especifica a direção do fluxo de dados no parâmetro <paramref name="dwDirection" /> do método <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" />. Isso determina os formatos que o enumerador resultante pode enumerar.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_GET">
      <summary>Solicita que <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> forneça um enumerador para os formatos que podem ser especificados em <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_SET">
      <summary>Solicita que <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> forneça um enumerador para os formatos que podem ser especificados em <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DESCKIND">
      <summary>Identifica a descrição do tipo associado.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_FUNCDESC">
      <summary>Indica que uma estrutura <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> foi retornada.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_IMPLICITAPPOBJ">
      <summary>Indica que um <see langword="IMPLICITAPPOBJ" /> foi retornado.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_MAX">
      <summary>Indica um marcador de fim de enumeração.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_NONE">
      <summary>Indica que nenhuma correspondência foi encontrada.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_TYPECOMP">
      <summary>Indica que um <see langword="TYPECOMP" /> foi retornado.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_VARDESC">
      <summary>Indica que um <see langword="VARDESC" /> foi retornado.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DISPPARAMS">
      <summary>Contém os argumentos passados para um método ou uma propriedade pelo <see langword="IDispatch::Invoke" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cArgs">
      <summary>Representa a contagem de argumentos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cNamedArgs">
      <summary>Representa a contagem de argumentos nomeados</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgdispidNamedArgs">
      <summary>Representa as IDs de expedição de argumentos nomeados.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgvarg">
      <summary>Representa uma referência para a matriz de argumentos.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DVASPECT">
      <summary>Especifica os dados desejados ou o aspecto de exibição do objeto ao desenhar ou obter dados.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_CONTENT">
      <summary>Uma representação de um objeto que permite que esse objeto seja exibido como um objeto inserido dentro de um contêiner. Geralmente, esse valor é especificado para objetos de documento composto. A apresentação pode ser fornecida para a tela ou impressora.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_DOCPRINT">
      <summary>Uma representação de um objeto na tela como se fosse imprimível em uma impressora usando o comando Imprimir do menu Arquivo. Os dados descritos podem representar uma sequência de páginas.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_ICON">
      <summary>Uma representação icônica de um objeto.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_THUMBNAIL">
      <summary>Uma representação em miniatura de um objeto que permite que esse objeto seja exibido em uma ferramenta de navegação. A miniatura é aproximadamente um bitmap independente de dispositivo de 120 por 120 pixels, 16 cores (recomendado) potencialmente encapsulado em um meta-arquivo.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC">
      <summary>Contém a descrição do tipo e informações de transferência de processo para uma variável, função ou um parâmetro de função.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.desc">
      <summary>Contém informações sobre um elemento.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION">
      <summary>Contém informações sobre um elemento.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.idldesc">
      <summary>Contém informações para comunicação remota com o elemento.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.paramdesc">
      <summary>Contém informações sobre o parâmetro.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.tdesc">
      <summary>Identifica o tipo de um elemento.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.EXCEPINFO">
      <summary>Descreve as exceções que ocorrem durante <see langword="IDispatch::Invoke" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrDescription">
      <summary>Descreve o erro voltado para o cliente.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrHelpFile">
      <summary>Contém a unidade totalmente qualificada, o caminho e o nome do arquivo de Ajuda contendo mais informações sobre o erro.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrSource">
      <summary>Indica o nome da origem da exceção. Normalmente, isso é um nome de aplicativo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.dwHelpContext">
      <summary>Indica a ID do contexto de Ajuda do tópico no arquivo de Ajuda.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pfnDeferredFillIn">
      <summary>Representa um ponteiro para uma função que usa uma estrutura <see cref="T:System.Runtime.InteropServices.EXCEPINFO" /> como um argumento e retorna um valor HRESULT. Se preenchimento adiado não for desejado, esse campo será definido como <see langword="null" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pvReserved">
      <summary>Este campo é reservado e deve ser definido como <see langword="null" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.scode">
      <summary>Um valor retornado que descreve o erro.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wCode">
      <summary>Representa um código de erro que identifica o erro.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wReserved">
      <summary>Este campo é reservado e deve ser definido como 0.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FILETIME">
      <summary>Representa o número de intervalos de 100 nanossegundos desde 1º de janeiro de 1601. Essa estrutura é um valor de 64 bits.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwHighDateTime">
      <summary>Especifica os 32 bits altos do <see langword="FILETIME" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwLowDateTime">
      <summary>Especifica os 32 bits baixos do <see langword="FILETIME" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FORMATETC">
      <summary>Representa um formato generalizado de área de transferência.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.cfFormat">
      <summary>Especifica o formato da área de transferência específico de interesse.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect">
      <summary>Especifica uma das constantes de enumeração <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" /> que indica o nível de detalhes que a renderização deve conter.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex">
      <summary>Especifica a parte do aspecto de quando os dados devem ser divididos em limites de página.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.ptd">
      <summary>Especifica um ponteiro para uma estrutura <see langword="DVTARGETDEVICE" /> que contém informações sobre o dispositivo de destino para os quais os dados estão sendo compostos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed">
      <summary>Especifica uma das constantes de enumeração <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> que indica o tipo de mídia de armazenamento usado para transferir os dados do objeto.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCDESC">
      <summary>Define uma descrição da função.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.callconv">
      <summary>Especifica a convenção de chamada de uma função.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParams">
      <summary>Conta o número total de parâmetros.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParamsOpt">
      <summary>Conta os parâmetros opcionais.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cScodes">
      <summary>Conta os valor retornados permitidos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.elemdescFunc">
      <summary>Contém o tipo de retorno da função.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.funckind">
      <summary>Especifica se a função é virtual, estática ou somente de expedição.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.invkind">
      <summary>Especifica o tipo de uma função de propriedade.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgelemdescParam">
      <summary>Indica o tamanho de <see cref="F:System.Runtime.InteropServices.FUNCDESC.cParams" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgscode">
      <summary>Armazena a contagem de erros de que uma função pode retornar em um sistema de 16 bits.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.memid">
      <summary>Identifica a ID de membro da função.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.oVft">
      <summary>Especifica o deslocamento no VTBL para <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.wFuncFlags">
      <summary>Indica o <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" /> de uma função.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCFLAGS">
      <summary>Identifica as constantes que definem as propriedades de uma função.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FBINDABLE">
      <summary>A função que dá suporte à associação de dados.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTBIND">
      <summary>A função que melhor representa o objeto. Apenas uma função em um tipo pode ter este atributo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTCOLLELEM">
      <summary>Permite uma otimização em que o compilador procura um membro chamado "xyz" no tipo de "abc". Se esse membro for encontrado e marcado como uma função de acessador de um elemento da coleção padrão, uma chamada será gerada para essa função de membro. Permitido em membros em dispinterfaces e interfaces; não é permitida em módulos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDISPLAYBIND">
      <summary>A função que é exibida ao usuário como associável. <see cref="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE" /> também deve ser definido.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FHIDDEN">
      <summary>A função não deve ser exibida para o usuário, embora ele exista e seja associável.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FIMMEDIATEBIND">
      <summary>Mapeado como propriedades associáveis individuais.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FNONBROWSABLE">
      <summary>A propriedade aparece em um Pesquisador de Objetos, mas não em um navegador de propriedades.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREPLACEABLE">
      <summary>Marca a interface como tendo comportamentos padrão.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREQUESTEDIT">
      <summary>Quando definido, qualquer chamada para um método que define os resultados da propriedade primeiro em uma chamada para <see langword="IPropertyNotifySink::OnRequestEdit" />. A implementação de <see langword="OnRequestEdit" /> determina se a chamada tem permissão para definir a propriedade.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FRESTRICTED">
      <summary>A função não deve ser acessível de linguagens de macro. Esse sinalizador é destinado a funções no nível de sistema ou a funções que navegadores de tipo não devem exibir.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FSOURCE">
      <summary>A função retorna um objeto que é uma origem de eventos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUIDEFAULT">
      <summary>O membro de informações de tipo é o membro padrão para exibição na interface do usuário.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUSESGETLASTERROR">
      <summary>A função dá suporte a <see langword="GetLastError" />. Se ocorrer um erro durante a função, o chamador poderá chamar <see langword="GetLastError" /> para recuperar o código de erro.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCKIND">
      <summary>Define como acessar uma função.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_DISPATCH">
      <summary>A função pode ser acessada somente por meio de <see langword="IDispatch" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_NONVIRTUAL">
      <summary>A função é acessada pelo endereço <see langword="static" /> e aceita um ponteiro <see langword="this" /> implícito.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_PUREVIRTUAL">
      <summary>A função é acessada pela VTBL (tabela de função virtual) e usa um ponteiro <see langword="this" /> implícito.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_STATIC">
      <summary>A função é acessada pelo endereço <see langword="static" /> e não aceita um ponteiro <see langword="this" /> implícito.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_VIRTUAL">
      <summary>A função é acessada da mesma forma que <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL" />, exceto pelo fato de que a função tem uma implementação.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IAdviseSink">
      <summary>Fornece uma definição gerenciada da interface <see langword="IAdviseSink" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnClose">
      <summary>Notifica todos os coletores de supervisão registrados de que o objeto mudou do estado de execução para o estado carregado.  Este método é chamado por um servidor.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>Notifica todos os objetos de dados de coletores de supervisão atualmente registrados de que os dados no objeto mudaram.</summary>
      <param name="format">Um <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, passado por referência, que descreve as informações de formato, dispositivo de destino, renderização e armazenamento do objeto de dados de chamada.</param>
      <param name="stgmedium">Um <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />, passada por referência, que define a mídia de armazenamento (memória global, arquivo de disco, o objeto de armazenamento, objeto de fluxo, objeto de GDI [Graphics Device Interface] ou indefinido) e a propriedade de mídia para o objeto de dados de chamada.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnRename(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>Notifica os coletores de supervisão registrados de que o objeto foi renomeado. Este método é chamado por um servidor.</summary>
      <param name="moniker">Um ponteiro para a interface <see langword="IMoniker" /> no novo moniker completo do objeto.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnSave">
      <summary>Notifica os coletores de supervisão registrados de que o objeto foi salvo. Este método é chamado por um servidor.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnViewChange(System.Int32,System.Int32)">
      <summary>Notifica os coletores de supervisão registrados de um objeto de que sua exibição mudou. Este método é chamado por um servidor.</summary>
      <param name="aspect">O aspecto ou a exibição do objeto. Contém um valor obtido da enumeração <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" />.</param>
      <param name="index">A parte da exibição que mudou. Atualmente, somente -1 é válido.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IBindCtx">
      <summary>Fornece a definição gerenciada da interface <see langword="IBindCtx" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.EnumObjectParam(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary>Enumera as cadeias de caracteres que são as chaves da tabela de parâmetros de objeto contextuais mantida internamente.</summary>
      <param name="ppenum">Quando este método retorna, contém uma referência ao enumerador de parâmetro de objeto. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary>Retorna as opções de associação atuais armazenadas no contexto de associação atual.</summary>
      <param name="pbindopts">Um ponteiro para a estrutura que receberá as opções de associação.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetObjectParam(System.String,System.Object@)">
      <summary>Pesquisa a chave especificada na tabela de parâmetros de objeto contextuais mantida internamente e retorna o objeto correspondente, se houver.</summary>
      <param name="pszKey">O nome do objeto a ser pesquisado.</param>
      <param name="ppunk">Quando este método retorna, contém o ponteiro de interface do objeto. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetRunningObjectTable(System.Runtime.InteropServices.ComTypes.IRunningObjectTable@)">
      <summary>Retorna o acesso à ROT (Running Object Table) relevante a esse processo de associação.</summary>
      <param name="pprot">Quando este método retorna, contém uma referência à ROT (Running Object Table). Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)">
      <summary>Registra o objeto passado como um dos objetos que foi associado durante uma operação de moniker e que deve ser liberado quando a operação é concluída.</summary>
      <param name="punk">O objeto a ser registrado para liberação.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectParam(System.String,System.Object)">
      <summary>Registra o ponteiro de objeto especificado sob o nome informado na tabela de ponteiros do objeto mantida internamente.</summary>
      <param name="pszKey">O nome com o qual registrar <paramref name="punk" />.</param>
      <param name="punk">O objeto a ser registrado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.ReleaseBoundObjects">
      <summary>Libera todos os objetos atualmente registrados com o contexto de associação usando o método <see cref="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectBound(System.Object)">
      <summary>Remove o objeto do conjunto de objetos registrados que precisam ser liberados.</summary>
      <param name="punk">O objeto que terá o registro de liberação cancelado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectParam(System.String)">
      <summary>Revoga o registro do objeto atualmente encontrado na chave especificada da tabela de parâmetros de objeto contextuais mantida internamente, se tal chave estiver registrada no momento.</summary>
      <param name="pszKey">A chave cujo registro será cancelado.</param>
      <returns>Um valor <see langword="S_OK" /><see langword="HRESULT" /> se a chave especificada tiver sido removida com sucesso da tabela; caso contrário, um valor <see langword="S_FALSE" /><see langword="HRESULT" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.SetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary>Armazena um bloco de parâmetros no contexto de associação. Esses parâmetros se aplicarão posteriormente a operações <see langword="UCOMIMoniker" /> que usam este contexto de associação.</summary>
      <param name="pbindopts">A estrutura que contém as opções de associação a serem definidas.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPoint">
      <summary>Fornece a definição gerenciada da interface <see langword="IConnectionPoint" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)">
      <summary>Estabelece uma conexão de consultoria entre o ponto de conexão e o objeto do coletor do chamador.</summary>
      <param name="pUnkSink">Referência ao coletor para receber chamadas para a interface de saída gerenciada por esse ponto de conexão.</param>
      <param name="pdwCookie">Quando este método retorna, ele contém o cookie de conexão. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.EnumConnections(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary>Cria um objeto enumerador para iteração por meio de conexões existentes nesse ponto de conexão.</summary>
      <param name="ppEnum">Quando este método retorna, ele contém o enumerador recém-criado. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionInterface(System.Guid@)">
      <summary>Retorna o IID da interface de saída gerenciada por esse ponto de conexão.</summary>
      <param name="pIID">Quando esse parâmetro retorna, ele contém o IID da interface de saída gerenciada por esse ponto de conexão. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionPointContainer(System.Runtime.InteropServices.ComTypes.IConnectionPointContainer@)">
      <summary>Recupera o ponteiro de interface <see langword="IConnectionPointContainer" /> do objeto conectável que tem esse ponto de conexão conceitualmente.</summary>
      <param name="ppCPC">Quando este parâmetro retorna, ele contém a interface <see langword="IConnectionPointContainer" /> do objeto conectável. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Unadvise(System.Int32)">
      <summary>Encerra uma conexão de consultoria estabelecida anteriormente por meio do método <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />.</summary>
      <param name="dwCookie">O cookie de conexão retornado anteriormente do método <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer">
      <summary>Fornece a definição gerenciada da interface <see langword="IConnectionPointContainer" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.EnumConnectionPoints(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary>Cria um enumerador de todos os pontos de conexão com suporte no objeto conectável, um ponto de conexão por IID.</summary>
      <param name="ppEnum">Quando este método retorna, ele contém o ponteiro de interface do enumerador. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.FindConnectionPoint(System.Guid@,System.Runtime.InteropServices.ComTypes.IConnectionPoint@)">
      <summary>Pergunta ao o objeto conectável se ele tem um ponto de conexão para um IID específico e, nesse caso, retorna o ponteiro de interface <see langword="IConnectionPoint" /> desse ponto de conexão.</summary>
      <param name="riid">Uma referência para a interface de saída IID cujo ponto de conexão está sendo solicitado.</param>
      <param name="ppCP">Quando este método retorna, ele contém o ponto de conexão que gerencia o <paramref name="riid" /> da interface de saída. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDataObject">
      <summary>Fornece a definição gerenciada da interface <see langword="IDataObject" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)">
      <summary>Cria uma conexão entre um objeto de dados e um coletor de consultoria. Este método é chamado por um objeto compatível com um coletor de consultoria e o habilita para ser notificado sobre alterações nos dados do objeto.</summary>
      <param name="pFormatetc">Uma estrutura <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, passada por referência, que define o formato, dispositivo de destino, aspecto e meio que serão usados para notificações futuras.</param>
      <param name="advf">Um dos valores <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> que especifica um grupo de sinalizadores para controlar a conexão de consultoria.</param>
      <param name="adviseSink">Um ponteiro para a interface <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> no coletor de consultoria que receberá a notificação de alteração.</param>
      <param name="connection">Quando esse método retornar, conterá um ponteiro para um token DWORD que identifica esta conexão. É possível usar esse token posteriormente para excluir a conexão de consultoria, passando-o para <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)" />. Se esse valor for zero, a conexão não terá sido estabelecida. Este parâmetro é passado não inicializado.</param>
      <returns>Este método é compatível com os valores retornados padrão E_INVALIDARG, E_UNEXPECTED e E_OUTOFMEMORY e também com os seguintes: 
  Valor 
  Descrição 
  S_OK 
  A conexão de consultoria foi criada.  
  E_NOTIMPL 
  Este método não é implementado no objeto de dados.  
  DV_E_LINDEX 
  Há um valor inválido para <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />; no momento, apenas -1 é compatível.  
  DV_E_FORMATETC 
  Há um valor inválido para o parâmetro <paramref name="pFormatetc" />.  
  OLE_E_ADVISENOTSUPPORTED 
  O objeto de dados não é compatível com a notificação de alteração.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)">
      <summary>Destrói um conexão de notificação que tinha sido estabelecida anteriormente.</summary>
      <param name="connection">Um token DWORD que especifica a conexão a ser removida. Use o valor retornado por <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> quando a conexão tiver sido estabelecida originalmente.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumDAdvise(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary>Cria um objeto que pode ser usado para enumerar as conexões de consultoria atuais.</summary>
      <param name="enumAdvise">Quando este método retorna, contém um <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA" /> que recebe o ponteiro de interface para o novo objeto de enumerador. Se a implementação definir <paramref name="enumAdvise" /> como <see langword="null" />, não haverá conexões com coletores de consultoria neste momento. Este parâmetro é passado não inicializado.</param>
      <returns>Este método é compatível com os valores retornados padrão E_OUTOFMEMORY e também com os seguintes:  
  Valor  

  Descrição  

  S_OK  

  A instância do objeto de enumerador foi criada com sucesso ou não há conexões.  

  OLE_E_ADVISENOTSUPPORTED  

  Este objeto não é compatível com notificações de consultoria.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)">
      <summary>Cria um objeto para enumerar as estruturas <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> de um objeto de dados. Essas estruturas são usadas em chamadas a <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> ou <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />.</summary>
      <param name="direction">Um dos valores <see cref="T:System.Runtime.InteropServices.ComTypes.DATADIR" /> que especifica a direção dos dados.</param>
      <returns>Este método é compatível com os valores retornados padrão E_INVALIDARG e E_OUTOFMEMORY e também com os seguintes: 
  Valor 
  Descrição 
  S_OK 
  O objeto de enumerador foi criado com êxito.  
  E_NOTIMPL 
  A direção especificada pelo parâmetro <paramref name="direction" /> não é compatível.  
  OLE_S_USEREG 
  Solicita que a OLE enumere os formatos do registro.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>Fornece uma estrutura <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> padrão logicamente equivalente a uma estrutura mais complexa. Use esse método para determinar se duas estruturas <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> diferentes retornariam os mesmos dados, acabando com a necessidade de renderização duplicada.</summary>
      <param name="formatIn">Um ponteiro para uma estrutura <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, passado por referência, que define o formato, o meio e o dispositivo de destino que o chamador gostaria de usar para recuperar dados em uma chamada subsequente, como <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />. O membro <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> não é significativo nesse caso e deve ser ignorado.</param>
      <param name="formatOut">Quando este método retorna, ele contém um ponteiro para uma estrutura <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> com as informações mais gerais possíveis para uma renderização específica, tornando-o canonicamente equivalente a <c>formatetcIn</c>. O chamador deve alocar esta estrutura e o método <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)" /> deve preencher os dados. Para recuperar dados em uma chamada subsequente, como <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />, o chamador usa o valor fornecido de <paramref name="formatOut" />, a menos que o valor fornecido seja <see langword="null" />. Esse valor será <see langword="null" /> se o método retornar <see langword="DATA_S_SAMEFORMATETC" />. O membro <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> não é significativo nesse caso e deve ser ignorado. Este parâmetro é passado não inicializado.</param>
      <returns>Este método é compatível com os valores retornados padrão E_INVALIDARG, E_UNEXPECTED e E_OUTOFMEMORY e também com os seguintes: 
  Valor 
  Descrição 
  S_OK 
  A estrutura <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> retornada é diferente da que foi passada.  
  DATA_S_SAMEFORMATETC 
  As estruturas <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> são iguais e <see langword="null" /> é retornado no parâmetro <paramref name="formatOut" />.  
  DV_E_LINDEX 
  Há um valor inválido para <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />; no momento, apenas -1 é compatível.  
  DV_E_FORMATETC 
  Há um valor inválido para o parâmetro <paramref name="pFormatetc" />.  
  OLE_E_NOTRUNNING 
  O aplicativo não está em execução.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>Obtém dados de um objeto de dados de origem. O método <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />, chamado por um consumidor de dados, renderiza os dados descritos na estrutura <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> especificada e os transfere por meio da estrutura <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> especificada. Em seguida, o chamador assume a responsabilidade por liberar a estrutura <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />.</summary>
      <param name="format">Um ponteiro para uma estrutura <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, passado por referência, que define o formato, meio e dispositivo de destino a serem usados ao passar os dados. É possível especificar mais de um meio usando o operador OR booliano, permitindo que o método escolha o melhor meio entre aqueles especificados.</param>
      <param name="medium">Quando esse método é retornado, contém um ponteiro para a estrutura <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> que indica o meio de armazenamento que contém os dados retornados por meio de seu membro <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed" /> e a responsabilidade para liberar o meio por meio do valor de seu membro <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" />. Se <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> for <see langword="null" />, o receptor do meio será responsável pela liberação; caso contrário, <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> apontará para a interface <see langword="IUnknown" /> no objeto apropriado para que seu método <see langword="Release" /> possa ser chamado. O meio deve ser alocado e preenchido por <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>Obtém dados de um objeto de dados de origem. Esse método, chamado por um consumidor de dados, é diferente do método <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> em que o chamador deve alocar e liberar o meio de armazenamento especificado.</summary>
      <param name="format">Um ponteiro para uma estrutura <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, passado por referência, que define o formato, meio e dispositivo de destino a serem usados ao passar os dados. Apenas um meio pode ser especificado em <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> e apenas os seguintes valores <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> são válidos: <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE" />, <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM" />, <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL" /> ou <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE" />.</param>
      <param name="medium">Um <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />, passado por referência, que define o meio de armazenamento que contém os dados que estão sendo transferidos. O meio deve ser alocado pelo chamador e preenchido pelo <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />. O chamador também deve liberar o meio. A implementação deste método sempre deve fornecer um valor de <see langword="null" /> para o membro <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> da estrutura <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> para a qual que este parâmetro aponta.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.QueryGetData(System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>Determina se o objeto de dados é capaz de renderizar os dados descritos na estrutura <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />. Objetos que tentam uma operação de colar ou de soltar podem chamar este método antes de chamar <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> para obter uma indicação se a operação pode ser bem-sucedida.</summary>
      <param name="format">Um ponteiro para uma estrutura <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, passado por referência, que define o formato, o meio e o dispositivo de destino a serem usados para a consulta.</param>
      <returns>Este método é compatível com os valores retornados padrão E_INVALIDARG, E_UNEXPECTED e E_OUTOFMEMORY e também com os seguintes: 
  Valor 
  Descrição 
  S_OK 
  Uma chamada subsequente a <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> provavelmente seria bem-sucedida.  
  DV_E_LINDEX 
  Um valor inválido para <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />; no momento, apenas -1 é compatível.  
  DV_E_FORMATETC 
  Um valor inválido para o parâmetro <paramref name="pFormatetc" />.  
  DV_E_TYMED 
  Um valor <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed" /> inválido.  
  DV_E_DVASPECT 
  Um valor <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect" /> inválido.  
  OLE_E_NOTRUNNING 
  O aplicativo não está em execução.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)">
      <summary>Transfere dados ao objeto que implementa este método. Este método é chamado por um objeto que contém uma fonte de dados.</summary>
      <param name="formatIn">Uma estrutura <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, passada por referência, que define o formato usado pelo objeto de dados ao interpretar os dados contidos no meio de armazenamento.</param>
      <param name="medium">Uma estrutura <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />, passada por referência, que define o meio de armazenamento no qual os dados estão sendo analisados.</param>
      <param name="release">
        <see langword="true" /> para especificar que o objeto de dados chamado, que implementa <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />, tem o meio de armazenamento após o retorno da chamada. Isso significa que o objeto de dados deverá liberar o meio depois de ter sido usado por meio da chamada à função <see langword="ReleaseStgMedium" />. <see langword="false" /> para especificar que o chamador retém a propriedade do meio de armazenamento e o objeto de dados chamado usa o meio de armazenamento apenas pela duração da chamada.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLDESC">
      <summary>Contém informações necessárias para transferir um elemento, parâmetro ou valor retornado de função de uma estrutura entre processos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.dwReserved">
      <summary>Reservado; definido como <see langword="null" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.wIDLFlags">
      <summary>Indica um valor <see cref="T:System.Runtime.InteropServices.IDLFLAG" /> que descreve o tipo.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLFLAG">
      <summary>Descreve como transferir um elemento de estrutura, parâmetro ou valor retornado da função entre processos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FIN">
      <summary>O parâmetro passa informações do chamador para o computador chamado.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FLCID">
      <summary>O parâmetro é o identificador de local de um aplicativo cliente.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FOUT">
      <summary>O parâmetro retorna informações do computador chamado para o chamador.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FRETVAL">
      <summary>O parâmetro é o valor retornado do membro.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_NONE">
      <summary>Não especifica se o parâmetro passa ou recebe informações.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints">
      <summary>Gerencia a definição da interface <see langword="IEnumConnectionPoints" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary>Cria um novo enumerador que contém o mesmo estado de enumeração que o atual.</summary>
      <param name="ppenum">Quando este método retorna, ele contém uma referência ao enumerador recém-criado. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IConnectionPoint[],System.IntPtr)">
      <summary>Recupera um número especificado de itens na sequência de enumeração.</summary>
      <param name="celt">O número de referências <see langword="IConnectionPoint" /> a serem retornadas em <paramref name="rgelt" />.</param>
      <param name="rgelt">Quando este método retorna, ele contém uma referência às conexões enumeradas. Este parâmetro é passado não inicializado.</param>
      <param name="pceltFetched">Quando este método retorna, ele contém uma referência ao número real de conexões enumeradas em <paramref name="rgelt" />.</param>
      <returns>
        <see langword="S_OK" /> se o parâmetro <paramref name="pceltFetched" /> for igual ao parâmetro <paramref name="celt" />; caso contrário, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Reset">
      <summary>Redefine a sequência de enumeração para o início.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Skip(System.Int32)">
      <summary>Ignora um número especificado de itens na sequência de enumeração.</summary>
      <param name="celt">O número de elementos a serem ignorados na enumeração.</param>
      <returns>
        <see langword="S_OK" /> se o número de elementos ignorados for igual ao parâmetro <paramref name="celt" />; caso contrário, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnections">
      <summary>Gerencia a definição da interface <see langword="IEnumConnections" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary>Cria um novo enumerador que contém o mesmo estado de enumeração que o atual.</summary>
      <param name="ppenum">Quando este método retorna, ele contém uma referência ao enumerador recém-criado. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Next(System.Int32,System.Runtime.InteropServices.ComTypes.CONNECTDATA[],System.IntPtr)">
      <summary>Recupera um número especificado de itens na sequência de enumeração.</summary>
      <param name="celt">O número de estruturas <see cref="T:System.Runtime.InteropServices.CONNECTDATA" /> a serem retornadas em <paramref name="rgelt" />.</param>
      <param name="rgelt">Quando este método retorna, ele contém uma referência às conexões enumeradas. Este parâmetro é passado não inicializado.</param>
      <param name="pceltFetched">Quando este método retorna, ele contém uma referência ao número real de conexões enumeradas em <paramref name="rgelt" />.</param>
      <returns>
        <see langword="S_OK" /> se o parâmetro <paramref name="pceltFetched" /> for igual ao parâmetro <paramref name="celt" />; caso contrário, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Reset">
      <summary>Redefine a sequência de enumeração para o início.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Skip(System.Int32)">
      <summary>Ignora um número especificado de itens na sequência de enumeração.</summary>
      <param name="celt">O número de elementos a serem ignorados na enumeração.</param>
      <returns>
        <see langword="S_OK" /> se o número de elementos ignorados for igual ao parâmetro <paramref name="celt" />; caso contrário, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC">
      <summary>Fornece a definição gerenciada da interface <see langword="IEnumFORMATETC" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Clone(System.Runtime.InteropServices.ComTypes.IEnumFORMATETC@)">
      <summary>Cria um novo enumerador que contém o mesmo estado de enumeração que o enumerador atual.</summary>
      <param name="newEnum">Quando este método retorna, ele contém uma referência ao enumerador recém-criado. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Next(System.Int32,System.Runtime.InteropServices.ComTypes.FORMATETC[],System.Int32[])">
      <summary>Recupera um número especificado de itens na sequência de enumeração.</summary>
      <param name="celt">O número de referências <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> a serem retornadas em <paramref name="rgelt" />.</param>
      <param name="rgelt">Quando este método retorna, ele contém uma referência às referências de <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> enumeradas. Este parâmetro é passado não inicializado.</param>
      <param name="pceltFetched">Quando este método retorna, ele contém uma referência ao número real de referências enumeradas em <paramref name="rgelt" />. Este parâmetro é passado não inicializado.</param>
      <returns>
        <see langword="S_OK" /> se o parâmetro <paramref name="pceltFetched" /> for igual ao parâmetro <paramref name="celt" />; caso contrário, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Reset">
      <summary>Redefine a sequência de enumeração para o início.</summary>
      <returns>Um HRESULT com o valor <see langword="S_OK" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Skip(System.Int32)">
      <summary>Ignora um número especificado de itens na sequência de enumeração.</summary>
      <param name="celt">O número de elementos a serem ignorados na enumeração.</param>
      <returns>
        <see langword="S_OK" /> se o número de elementos ignorados for igual ao parâmetro <paramref name="celt" />; caso contrário, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumMoniker">
      <summary>Gerencia a definição da interface <see langword="IEnumMoniker" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Clone(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>Cria um novo enumerador que contém o mesmo estado de enumeração que o atual.</summary>
      <param name="ppenum">Quando este método retorna, ele contém uma referência ao enumerador recém-criado. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker[],System.IntPtr)">
      <summary>Recupera um número especificado de itens na sequência de enumeração.</summary>
      <param name="celt">O número de monikers a serem retornados em <paramref name="rgelt" />.</param>
      <param name="rgelt">Quando este método retorna, ele contém uma referência aos monikers enumerados. Este parâmetro é passado não inicializado.</param>
      <param name="pceltFetched">Quando este método retorna, ele contém uma referência ao número real de monikers enumerados em <paramref name="rgelt" />.</param>
      <returns>
        <see langword="S_OK" /> se o parâmetro <paramref name="pceltFetched" /> for igual ao parâmetro <paramref name="celt" />; caso contrário, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Reset">
      <summary>Redefine a sequência de enumeração para o início.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Skip(System.Int32)">
      <summary>Ignora um número especificado de itens na sequência de enumeração.</summary>
      <param name="celt">O número de elementos a serem ignorados na enumeração.</param>
      <returns>
        <see langword="S_OK" /> se o número de elementos ignorados for igual ao parâmetro <paramref name="celt" />; caso contrário, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA">
      <summary>Fornece a definição gerenciada da interface <see langword="IEnumSTATDATA" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Clone(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary>Cria um novo enumerador que contém o mesmo estado de enumeração que o enumerador atual.</summary>
      <param name="newEnum">Quando este método retorna, ele contém uma referência ao enumerador recém-criado. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Next(System.Int32,System.Runtime.InteropServices.ComTypes.STATDATA[],System.Int32[])">
      <summary>Recupera um número especificado de itens na sequência de enumeração.</summary>
      <param name="celt">O número de referências <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" /> a serem retornadas em <paramref name="rgelt" />.</param>
      <param name="rgelt">Quando este método retorna, ele contém uma referência às referências de <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" /> enumeradas. Este parâmetro é passado não inicializado.</param>
      <param name="pceltFetched">Quando este parâmetro retorna, ele contém uma referência ao número real de referências enumeradas em <paramref name="rgelt" />. Este parâmetro é passado não inicializado.</param>
      <returns>
        <see langword="S_OK" /> se o parâmetro <paramref name="pceltFetched" /> for igual ao parâmetro <paramref name="celt" />; caso contrário, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Reset">
      <summary>Redefine a sequência de enumeração para o início.</summary>
      <returns>Um HRESULT com o valor <see langword="S_OK" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Skip(System.Int32)">
      <summary>Ignora um número especificado de itens na sequência de enumeração.</summary>
      <param name="celt">O número de elementos a serem ignorados na enumeração.</param>
      <returns>
        <see langword="S_OK" /> se o número de elementos ignorados for igual ao parâmetro <paramref name="celt" />; caso contrário, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumString">
      <summary>Gerencia a definição da interface <see langword="IEnumString" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Clone(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary>Cria um novo enumerador que contém o mesmo estado de enumeração que o atual.</summary>
      <param name="ppenum">Quando este método retorna, ele contém uma referência ao enumerador recém-criado. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Next(System.Int32,System.String[],System.IntPtr)">
      <summary>Recupera um número especificado de itens na sequência de enumeração.</summary>
      <param name="celt">O número de cadeias de caracteres a serem retornadas em <paramref name="rgelt" />.</param>
      <param name="rgelt">Quando este método retorna, ele contém uma referência às cadeias de caracteres enumeradas. Este parâmetro é passado não inicializado.</param>
      <param name="pceltFetched">Quando este método retorna, ele contém uma referência ao número real de cadeias de caracteres enumeradas em <paramref name="rgelt" />.</param>
      <returns>
        <see langword="S_OK" /> se o parâmetro <paramref name="pceltFetched" /> for igual ao parâmetro <paramref name="celt" />; caso contrário, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Reset">
      <summary>Redefine a sequência de enumeração para o início.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Skip(System.Int32)">
      <summary>Ignora um número especificado de itens na sequência de enumeração.</summary>
      <param name="celt">O número de elementos a serem ignorados na enumeração.</param>
      <returns>
        <see langword="S_OK" /> se o número de elementos ignorados for igual ao parâmetro <paramref name="celt" />; caso contrário, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT">
      <summary>Gerencia a definição da interface <see langword="IEnumVARIANT" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Clone">
      <summary>Cria um novo enumerador que contém o mesmo estado de enumeração que o atual.</summary>
      <returns>Uma referência <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT" /> ao enumerador recém-criado.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Next(System.Int32,System.Object[],System.IntPtr)">
      <summary>Recupera um número especificado de itens na sequência de enumeração.</summary>
      <param name="celt">O número de elementos a serem retornados em <c>rgelt</c>.</param>
      <param name="rgVar">Quando este método retorna, ele contém uma referência aos elementos enumerados. Este parâmetro é passado não inicializado.</param>
      <param name="pceltFetched">Quando este método retorna, ele contém uma referência ao número real de elementos enumerados em <c>rgelt</c>.</param>
      <returns>
        <see langword="S_OK" /> se o parâmetro <paramref name="pceltFetched" /> for igual ao parâmetro <paramref name="celt" />; caso contrário, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Reset">
      <summary>Redefine a sequência de enumeração para o início.</summary>
      <returns>Um HRESULT com o valor <see langword="S_OK" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Skip(System.Int32)">
      <summary>Ignora um número especificado de itens na sequência de enumeração.</summary>
      <param name="celt">O número de elementos a serem ignorados na enumeração.</param>
      <returns>
        <see langword="S_OK" /> se o número de elementos ignorados for igual ao parâmetro <paramref name="celt" />; caso contrário, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMoniker">
      <summary>Fornece a definição gerenciada da interface <see langword="IMoniker" />, com a funcionalidade COM de <see langword="IPersist" /> e <see langword="IPersistStream" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToObject(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary>Usa o moniker para se associar ao objeto identificado por ele.</summary>
      <param name="pbc">Uma referência à interface <see langword="IBindCtx" /> no objeto de contexto de associação usada nessa operação de associação.</param>
      <param name="pmkToLeft">Uma referência ao moniker à esquerda do moniker atual, caso o moniker faça parte de um moniker de composição.</param>
      <param name="riidResult">O IID (identificador de interface) da interface que o cliente pretende usar para se comunicar com o objeto identificado pelo moniker.</param>
      <param name="ppvResult">Quando esse método é retornado, contém uma referência à interface solicitada por <paramref name="riidResult" />. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToStorage(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary>Recupera um ponteiro de interface para o armazenamento que contém o objeto identificado pelo moniker.</summary>
      <param name="pbc">Uma referência à interface <see langword="IBindCtx" /> no objeto de contexto de associação usada durante essa operação de associação.</param>
      <param name="pmkToLeft">Uma referência ao moniker à esquerda do moniker atual, caso o moniker faça parte de um moniker de composição.</param>
      <param name="riid">O IID (identificador de interface) da interface de armazenamento solicitada.</param>
      <param name="ppvObj">Quando esse método é retornado, contém uma referência à interface solicitada por <paramref name="riid" />. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.CommonPrefixWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Cria um novo moniker com base no prefixo comum que esse moniker compartilha com outro moniker.</summary>
      <param name="pmkOther">Uma referência à interface <see langword="IMoniker" /> em outro moniker a ser comparada com o moniker atual para um prefixo comum.</param>
      <param name="ppmkPrefix">Quando esse método retorna, ele contém o moniker que é o prefixo comum do moniker atual e <paramref name="pmkOther" />. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ComposeWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Boolean,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Combina o moniker atual com outro moniker, criando um novo moniker de composição.</summary>
      <param name="pmkRight">Uma referência à interface <see langword="IMoniker" /> em um moniker a ser acrescentada ao final do moniker atual.</param>
      <param name="fOnlyIfNotGeneric">
        <see langword="true" /> para indicar que o chamador requer uma composição não genérica. A operação continuará somente se <paramref name="pmkRight" /> for uma classe moniker com a qual o moniker atual poderá combinar de alguma maneira que não seja formando uma composição genérica. <see langword="false" /> para indicar que o método pode criar uma composição genérica, se necessário.</param>
      <param name="ppmkComposite">Quando este método retorna, ele contém uma referência ao moniker de composição resultante. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Enum(System.Boolean,System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>Fornece um ponteiro a um enumerador que pode enumerar os componentes de um moniker de composição.</summary>
      <param name="fForward">
        <see langword="true" /> para enumerar os monikers da esquerda para a direita. <see langword="false" /> para enumerar da direita para esquerda.</param>
      <param name="ppenumMoniker">Quando este método retorna, ele contém uma referência ao objeto enumerador do moniker. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetClassID(System.Guid@)">
      <summary>Recupera o CLSID (identificador de classe) de um objeto.</summary>
      <param name="pClassID">Quando este método retorna, ele contém o CLSID. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String@)">
      <summary>Obtém o nome de exibição, que é uma representação legível para o usuário do moniker atual.</summary>
      <param name="pbc">Uma referência ao contexto de associação a ser usado nessa operação.</param>
      <param name="pmkToLeft">Uma referência ao moniker à esquerda do moniker atual, caso o moniker faça parte de um moniker de composição.</param>
      <param name="ppszDisplayName">Quando este método retorna, ele contém a cadeia de caracteres do nome de exibição. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetSizeMax(System.Int64@)">
      <summary>Retorna o tamanho em bytes do fluxo necessário para salvar o objeto.</summary>
      <param name="pcbSize">Quando esse método retorna, ele contém um valor <see langword="long" /> que indica o tamanho em bytes do fluxo necessário para salvar esse objeto. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>Fornece um número que representa a hora em que o objeto identificado pelo moniker atual foi alterado pela última vez.</summary>
      <param name="pbc">Uma referência ao contexto de associação a ser usado nessa operação de associação.</param>
      <param name="pmkToLeft">Uma referência ao moniker à esquerda do moniker atual, caso o moniker faça parte de um moniker de composição.</param>
      <param name="pFileTime">Quando este método retorna, ele contém a hora da última alteração. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Hash(System.Int32@)">
      <summary>Calcula um inteiro de 32 bits usando o estado interno do moniker.</summary>
      <param name="pdwHash">Quando esse método retorna, ele contém o valor de hash desse moniker. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Inverse(System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Fornece um moniker que, quando composto à direita do moniker atual ou de uma estrutura semelhante, compõe com nada.</summary>
      <param name="ppmk">Quando esse método retorna, ele contém o moniker que é o inverso do moniker atual. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsDirty">
      <summary>Verifica se há alterações no objeto desde que foi salvo pela última vez.</summary>
      <returns>Um valor <see langword="S_OK" /><see langword="HRESULT" /> se o objeto tiver sido alterado; caso contrário, um valor <see langword="S_FALSE" /><see langword="HRESULT" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsEqual(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>Compara o moniker atual com um moniker especificado e indica se eles são idênticos.</summary>
      <param name="pmkOtherMoniker">Uma referência ao moniker a ser usado para comparação.</param>
      <returns>Um valor <see langword="S_OK" /><see langword="HRESULT" /> se os identificadores forem idênticos, caso contrário, um valor <see langword="S_FALSE" /><see langword="HRESULT" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsRunning(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>Determina se o objeto identificado pelo moniker atual está sendo carregado e executado no momento.</summary>
      <param name="pbc">Uma referência ao contexto de associação a ser usado nessa operação de associação.</param>
      <param name="pmkToLeft">Uma referência ao moniker à esquerda do moniker atual, caso o moniker atual faça parte de uma composição.</param>
      <param name="pmkNewlyRunning">Uma referência ao moniker adicionado mais recentemente à ROT (Tabela de Objetos em Execução).</param>
      <returns>Um valor <see langword="S_OK" /><see langword="HRESULT" /> se o moniker estiver em execução, um valor <see langword="S_FALSE" /><see langword="HRESULT" /> se o moniker não estiver em execução ou um valor <see langword="E_UNEXPECTED" /><see langword="HRESULT" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsSystemMoniker(System.Int32@)">
      <summary>Indica se esse moniker é de uma das classes moniker fornecidas pelo sistema.</summary>
      <param name="pdwMksys">Quando esse método retorna, ele contém um ponteiro para um inteiro que é um dos valores da enumeração <see langword="MKSYS" /> e faz referência a uma das classes COM do moniker. Este parâmetro é passado não inicializado.</param>
      <returns>Um valor <see langword="S_OK" /><see langword="HRESULT" /> se o moniker for um moniker de sistema, caso contrário, um valor <see langword="S_FALSE" /><see langword="HRESULT" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Load(System.Runtime.InteropServices.ComTypes.IStream)">
      <summary>Inicializa um objeto do fluxo de onde ele foi salvo anteriormente.</summary>
      <param name="pStm">O fluxo do qual o objeto é carregado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Lê o máximo de caracteres do nome de exibição especificado que o <see cref="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)" /> entende e cria um moniker correspondente à parte lida.</summary>
      <param name="pbc">Uma referência ao contexto de associação a ser usado nessa operação de associação.</param>
      <param name="pmkToLeft">Uma referência ao moniker que foi criado do nome de exibição até este ponto.</param>
      <param name="pszDisplayName">Uma referência à cadeia de caracteres que contém o nome de exibição restante a ser analisado.</param>
      <param name="pchEaten">Quando este método retorna, ele contém o número de caracteres que foram consumidos na análise de <paramref name="pszDisplayName" />. Este parâmetro é passado não inicializado.</param>
      <param name="ppmkOut">Quando esse método retorna, ele contém uma referência ao moniker criado de <paramref name="pszDisplayName" />. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Reduce(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Retorna um moniker reduzido, que é outro moniker que se refere ao mesmo objeto do moniker atual, mas pode ser associado com eficiência igual ou maior.</summary>
      <param name="pbc">Uma referência à interface <see langword="IBindCtx" /> no contexto de associação a ser usada nessa operação de associação.</param>
      <param name="dwReduceHowFar">Um valor que especifica o quanto o moniker atual deve ser reduzido.</param>
      <param name="ppmkToLeft">Uma referência ao moniker à esquerda do moniker atual.</param>
      <param name="ppmkReduced">Quando esse método retorna, ele contém uma referência à forma reduzida do moniker atual, que pode ser <see langword="null" /> se ocorrer um erro ou se o moniker atual for reduzido a nada. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.RelativePathTo(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Fornece um moniker que, quando acrescentado ao moniker atual (ou uma com uma estrutura semelhante), gera o moniker especificado.</summary>
      <param name="pmkOther">Uma referência ao moniker em que um caminho relativo deve ser adotado.</param>
      <param name="ppmkRelPath">Quando este método retorna, ele contém uma referência ao moniker relativo. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Save(System.Runtime.InteropServices.ComTypes.IStream,System.Boolean)">
      <summary>Salva um objeto no fluxo especificado.</summary>
      <param name="pStm">O fluxo no qual o objeto é salvo.</param>
      <param name="fClearDirty">
        <see langword="true" /> para limpar o sinalizador modificado após a conclusão do salvamento, caso contrário, <see langword="false" /></param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS">
      <summary>Define os atributos de uma interface implementada ou herdada de um tipo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULT">
      <summary>A interface ou dispinterface representa o padrão para a origem ou o coletor.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULTVTABLE">
      <summary>Coletores recebem eventos pela VTBL (tabela de funções virtuais).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FRESTRICTED">
      <summary>O membro não deve ser exibido nem programável por usuários.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FSOURCE">
      <summary>Este membro de uma coclass é chamado em vez de implementado.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND">
      <summary>Especifica como invocar uma função por <see langword="IDispatch::Invoke" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_FUNC">
      <summary>O membro é chamado usando uma sintaxe de invocação de função normal.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYGET">
      <summary>A função é invocada usando uma sintaxe de acesso de propriedade normal.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUT">
      <summary>A função é invocada usando uma sintaxe de atribuição de valor da propriedade.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUTREF">
      <summary>A função é invocada usando uma sintaxe de atribuição de referência de propriedade.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IPersistFile">
      <summary>Fornece a definição gerenciada da interface <see langword="IPersistFile" />, com a funcionalidade de <see langword="IPersist" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetClassID(System.Guid@)">
      <summary>Recupera o CLSID (identificador de classe) de um objeto.</summary>
      <param name="pClassID">Quando retorna, este método contém uma referência ao CLSID. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetCurFile(System.String@)">
      <summary>Recupera o caminho absoluto para o arquivo de trabalho atual do objeto ou, se não houver um arquivo de trabalho atual, o prompt de nome de arquivo padrão do objeto.</summary>
      <param name="ppszFileName">Quando retorna, este método contém o endereço de um ponteiro para uma cadeia de caracteres terminada em zero que contém o caminho para o arquivo atual ou o prompt de nome de arquivo padrão (por exemplo, *.txt). Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.IsDirty">
      <summary>Verifica se há alterações no objeto desde que foi salvo no arquivo atual.</summary>
      <returns>
        <see langword="S_OK" /> se o arquivo foi alterado desde que foi salvo pela última vez; <see langword="S_FALSE" /> se o arquivo não foi alterado desde que foi salvo pela última vez.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Load(System.String,System.Int32)">
      <summary>Abre o arquivo especificado e inicializa um objeto do conteúdo do arquivo.</summary>
      <param name="pszFileName">Uma cadeia de caracteres terminada em zero que contém o caminho absoluto do arquivo a ser aberto.</param>
      <param name="dwMode">Uma combinação de valores da enumeração <see langword="STGM" /> para indicar o modo de acesso para abrir <paramref name="pszFileName" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Save(System.String,System.Boolean)">
      <summary>Salva uma cópia do objeto no arquivo especificado.</summary>
      <param name="pszFileName">Uma cadeia terminada em zero que contém o caminho absoluto do arquivo no qual o objeto é salvo.</param>
      <param name="fRemember">
        <see langword="true" /> a ser usado com o parâmetro <paramref name="pszFileName" /> como o arquivo de trabalho atual; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.SaveCompleted(System.String)">
      <summary>Notifica o objeto de que ele pode gravar no seu arquivo.</summary>
      <param name="pszFileName">O caminho absoluto do arquivo em que o objeto foi salvo anteriormente.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IRunningObjectTable">
      <summary>Fornece a definição gerenciada da interface <see langword="IRunningObjectTable" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.EnumRunning(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>Enumera os objetos registrados atualmente como em execução.</summary>
      <param name="ppenumMoniker">Quando retorna, este método contém o novo enumerador para a ROT (tabela de objetos em execução). Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetObject(System.Runtime.InteropServices.ComTypes.IMoniker,System.Object@)">
      <summary>Retorna o objeto registrado se o nome do objeto fornecido for registrado como em execução.</summary>
      <param name="pmkObjectName">Uma referência ao moniker a ser pesquisado na ROT (tabela de objetos em execução).</param>
      <param name="ppunkObject">Quando retorna, este método contém o objeto em execução solicitado. Este parâmetro é passado não inicializado.</param>
      <returns>Um valor <see langword="HRESULT" /> que indica o êxito ou a falha da operação.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>Pesquisa esse moniker na ROT (tabela de objetos em execução) e relata o tempo registrado da alteração, se houver.</summary>
      <param name="pmkObjectName">Uma referência ao moniker a ser pesquisado na ROT (tabela de objetos em execução).</param>
      <param name="pfiletime">Quando retorna, esse objeto contém a hora da última alteração do objeto. Este parâmetro é passado não inicializado.</param>
      <returns>Um valor <see langword="HRESULT" /> que indica o êxito ou a falha da operação.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.IsRunning(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>Determina se o moniker especificado está registrado atualmente na ROT (tabela de objetos em execução).</summary>
      <param name="pmkObjectName">Uma referência ao moniker a ser pesquisado na ROT (tabela de objetos em execução).</param>
      <returns>Um valor <see langword="HRESULT" /> que indica o êxito ou a falha da operação.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>Anota a hora em que um determinado objeto foi alterado, para que <see langword="IMoniker::GetTimeOfLastChange" /> possa relatar uma hora de alteração adequada.</summary>
      <param name="dwRegister">A entrada da ROT (tabela de objetos em execução) do objeto alterado.</param>
      <param name="pfiletime">Uma referência a hora da última alteração do objeto.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Register(System.Int32,System.Object,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>Registra que o objeto fornecido entrou no estado de execução.</summary>
      <param name="grfFlags">Especifica se a referência de ROT (Tabela de Objetos em Execução) à <paramref name="punkObject" /> é fraca ou forte e controla o acesso ao objeto por meio de sua entrada na ROT.</param>
      <param name="punkObject">Uma referência ao objeto que está sendo registrado como em execução.</param>
      <param name="pmkObjectName">Uma referência ao moniker que identifica <paramref name="punkObject" />.</param>
      <returns>Um valor que pode ser usado para identificar essa entrada da ROT nas chamadas subsequentes a <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)" /> ou <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)">
      <summary>Cancela o registro do objeto especificado da ROT (tabela de objetos em execução).</summary>
      <param name="dwRegister">A entrada da ROT (tabela de objetos em execução) a ser revogada.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IStream">
      <summary>Fornece a definição gerenciada da interface <see langword="IStream" />, com a funcionalidade <see langword="ISequentialStream" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Clone(System.Runtime.InteropServices.ComTypes.IStream@)">
      <summary>Cria um novo objeto de fluxo com seu próprio ponteiro de busca que faz referência aos mesmos bytes do fluxo original.</summary>
      <param name="ppstm">Quando retorna, este método contém o novo objeto de fluxo. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)">
      <summary>Garante que todas as alterações feitas em um objeto de fluxo, que esteja aberto no modo de transação, sejam refletidas no armazenamento pai.</summary>
      <param name="grfCommitFlags">Um valor que controla como as alterações no objeto de fluxo são confirmadas.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.CopyTo(System.Runtime.InteropServices.ComTypes.IStream,System.Int64,System.IntPtr,System.IntPtr)">
      <summary>Copia um número especificado de bytes do ponteiro de busca atual no fluxo para o ponteiro de busca atual em outro fluxo.</summary>
      <param name="pstm">Uma referência ao fluxo de destino.</param>
      <param name="cb">O número de bytes a serem copiados do fluxo de origem.</param>
      <param name="pcbRead">No retorno bem-sucedido, contém o número real de bytes lidos da origem.</param>
      <param name="pcbWritten">No retorno bem-sucedido, contém o número real de bytes gravados no destino.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)">
      <summary>Restringe o acesso a um intervalo especificado de bytes no fluxo.</summary>
      <param name="libOffset">O deslocamento de byte para o início do intervalo.</param>
      <param name="cb">O comprimento do intervalo, em bytes, a ser restringido.</param>
      <param name="dwLockType">As restrições solicitadas no acesso ao intervalo.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Read(System.Byte[],System.Int32,System.IntPtr)">
      <summary>Lê um número especificado de bytes do objeto de fluxo na memória, iniciando no ponteiro de busca atual.</summary>
      <param name="pv">Quando este método for retornado, ele conterá os dados lidos do fluxo. Este parâmetro é passado não inicializado.</param>
      <param name="cb">O número de bytes a serem lidos do objeto de fluxo.</param>
      <param name="pcbRead">Um ponteiro para uma variável <see langword="ULONG" /> que recebe o número real de bytes lidos do objeto de fluxo.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Revert">
      <summary>Descarta todas as alterações feitas em um fluxo transacionado desde a última chamada <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Seek(System.Int64,System.Int32,System.IntPtr)">
      <summary>Altera o ponteiro de busca para um novo local relativo ao início do fluxo, ao final do fluxo ou ao ponteiro de busca atual.</summary>
      <param name="dlibMove">O deslocamento a ser adicionado ao <paramref name="dwOrigin" />.</param>
      <param name="dwOrigin">A origem a ser buscada. A origem pode ser o início do arquivo, ponteiro de busca atual ou o fim do arquivo.</param>
      <param name="plibNewPosition">No retorno bem-sucedido, contém o deslocamento do ponteiro de busca do início do fluxo.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.SetSize(System.Int64)">
      <summary>Altera o tamanho do objeto de fluxo.</summary>
      <param name="libNewSize">O novo tamanho do fluxo como um número de bytes.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
      <summary>Recupera a estrutura <see cref="T:System.Runtime.InteropServices.STATSTG" /> desse fluxo.</summary>
      <param name="pstatstg">Quando retorna, este método contém uma estrutura <see langword="STATSTG" /> que descreve este objeto de fluxo. Este parâmetro é passado não inicializado.</param>
      <param name="grfStatFlag">Membros da estrutura <see langword="STATSTG" /> que esse método não retorna, economizando operações de alocação de memória.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.UnlockRegion(System.Int64,System.Int64,System.Int32)">
      <summary>Remove a restrição de acesso em um intervalo de bytes anteriormente restringido com o método <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)" />.</summary>
      <param name="libOffset">O deslocamento de byte para o início do intervalo.</param>
      <param name="cb">O comprimento, em bytes, do intervalo a ser restringido.</param>
      <param name="dwLockType">As restrições de acesso colocadas anteriormente no intervalo.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Write(System.Byte[],System.Int32,System.IntPtr)">
      <summary>Grava um número especificado de bytes no objeto de fluxo, iniciando no ponteiro de busca atual.</summary>
      <param name="pv">O buffer no qual gravar esse fluxo.</param>
      <param name="cb">O número de bytes a ser gravado no fluxo.</param>
      <param name="pcbWritten">No retorno bem-sucedido, contém o número real de bytes gravados no objeto de fluxo. Se o chamador define esse ponteiro como <see cref="F:System.IntPtr.Zero" />, esse método não fornece o número real de bytes gravados.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeComp">
      <summary>Fornece a definição gerenciada da interface <see langword="ITypeComp" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.Bind(System.String,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.DESCKIND@,System.Runtime.InteropServices.ComTypes.BINDPTR@)">
      <summary>Mapeia um nome de um membro de um tipo ou associa variáveis globais e funções contidas em uma biblioteca de tipos.</summary>
      <param name="szName">O nome a ser associado.</param>
      <param name="lHashVal">Um valor de hash para <paramref name="szName" /> computado por <see langword="LHashValOfNameSys" />.</param>
      <param name="wFlags">Uma palavra de sinalizadores que contém um ou mais dos sinalizadores de invocação definidos na enumeração <see langword="INVOKEKIND" />.</param>
      <param name="ppTInfo">Quando retorna, este método contém uma referência à descrição de tipo que contém o item ao qual ele está associado, se um <see langword="FUNCDESC" /> ou <see langword="VARDESC" /> foi retornado. Este parâmetro é passado não inicializado.</param>
      <param name="pDescKind">Quando retorna, este método contém uma referência a um enumerador <see langword="DESCKIND" /> que indica se o nome associado é um <see langword="VARDESC" />, <see langword="FUNCDESC" /> ou <see langword="TYPECOMP" />. Este parâmetro é passado não inicializado.</param>
      <param name="pBindPtr">Quando retorna, este método contém uma referência à interface <see langword="VARDESC" />, <see langword="FUNCDESC" /> ou <see langword="ITypeComp" /> associada. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.BindType(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>Associa-se às descrições de tipo contidas em uma biblioteca de tipos.</summary>
      <param name="szName">O nome a ser associado.</param>
      <param name="lHashVal">Um valor de hash para <paramref name="szName" /> determinado por <see langword="LHashValOfNameSys" />.</param>
      <param name="ppTInfo">Quando retorna, este método contém uma referência a um <see langword="ITypeInfo" /> do tipo ao qual <paramref name="szName" /> foi associado. Este parâmetro é passado não inicializado.</param>
      <param name="ppTComp">Quando retorna, este método contém uma referência a uma variável <see langword="ITypeComp" />. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo">
      <summary>Fornece a definição gerenciada da interface ITypeInfo de automação de componente.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary>Recupera os endereços de funções estáticas ou variáveis, como aquelas definidas em uma DLL.</summary>
      <param name="memid">A ID do membro do endereço do membro <see langword="static" /> a ser recuperada.</param>
      <param name="invKind">Um dos valores <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> que especifica se o membro é uma propriedade e, nesse caso, o tipo.</param>
      <param name="ppv">Quando este método é retornado, contém uma referência ao membro <see langword="static" />. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary>Cria uma nova instância de um tipo que descreve uma classe de componente (coclass).</summary>
      <param name="pUnkOuter">O objeto que atua como a <see langword="IUnknown" /> controladora.</param>
      <param name="riid">A IID da interface que o chamador usa para se comunicar com o objeto resultante.</param>
      <param name="ppvObj">Quando este método é retornado, contém uma referência ao objeto criado. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary>Recupera a biblioteca de tipos que contém essa descrição de tipo e seu índice dentro dessa biblioteca de tipos.</summary>
      <param name="ppTLB">Quando este método é retornado, contém uma referência à biblioteca de tipos contida. Este parâmetro é passado não inicializado.</param>
      <param name="pIndex">Quando este método é retornado, contém uma referência ao índice da descrição de tipo na biblioteca de tipos contida. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Recupera uma descrição ou especificação de um ponto de entrada de uma função em uma DLL.</summary>
      <param name="memid">A ID da função de membro cuja descrição de entrada da DLL será retornada.</param>
      <param name="invKind">Um dos valores <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> que especifica o tipo de membro identificado por <paramref name="memid" />.</param>
      <param name="pBstrDllName">Se não for <see langword="null" />, a função definirá <paramref name="pBstrDllName" /> para um <see langword="BSTR" /> que contém o nome da DLL.</param>
      <param name="pBstrName">Se não for <see langword="null" />, a função definirá <c>lpbstrName</c> para um <see langword="BSTR" /> que contém o nome do ponto de entrada.</param>
      <param name="pwOrdinal">Se não for <see langword="null" /> e a função for definida por um ordinal, então, <c>lpwOrdinal</c> está definido para apontar para o ordinal.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>Recupera a cadeia de caracteres de documentação, o nome e o caminho completos do arquivo de Ajuda e a ID de contexto do tópico da Ajuda de uma descrição de tipo especificada.</summary>
      <param name="index">A ID do membro cuja documentação será retornada.</param>
      <param name="strName">Quando este método é retornado, contém o nome do método do item. Este parâmetro é passado não inicializado.</param>
      <param name="strDocString">Quando este método é retornado, contém a cadeia de caracteres de documentação do item especificado. Este parâmetro é passado não inicializado.</param>
      <param name="dwHelpContext">Quando este método é retornado, contém uma referência ao contexto de Ajuda associado ao item especificado. Este parâmetro é passado não inicializado.</param>
      <param name="strHelpFile">Quando este método é retornado, contém o nome totalmente qualificado do arquivo de Ajuda. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary>Recupera a estrutura <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> que contém informações sobre uma função especificada.</summary>
      <param name="index">O índice da descrição da função a ser retornado.</param>
      <param name="ppFuncDesc">Quando este método é retornado, contém uma referência a uma estrutura <see langword="FUNCDESC" /> que descreve a função especificada. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary>Mapeia entre nomes e IDs de membro e nomes e IDs de parâmetro.</summary>
      <param name="rgszNames">Uma matriz de nomes a ser mapeada.</param>
      <param name="cNames">A contagem de nomes a serem mapeados.</param>
      <param name="pMemId">Quando este método é retornado, contém uma referência a uma matriz na qual os mapeamentos de nome são colocados. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary>Recupera o valor <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> para uma interface ou interface base implementada em uma descrição de tipo.</summary>
      <param name="index">O índice da interface base ou da interface implementada.</param>
      <param name="pImplTypeFlags">Quando este método é retornado, contém uma referência à enumeração <see langword="IMPLTYPEFLAGS" />. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetMops(System.Int32,System.String@)">
      <summary>Recupera informações de marshaling.</summary>
      <param name="memid">A ID de membro que indica quais informações de marshaling são necessárias.</param>
      <param name="pBstrMops">Quando este método é retornado, contém uma referência à cadeia de caracteres <see langword="opcode" /> usada no marshaling de campos da estrutura descrita pela descrição de tipo referenciada ou retorna <see langword="null" /> se não há nenhuma informação a ser retornada. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary>Recupera a variável com a ID do membro especificada (ou o nome da propriedade ou método e seus parâmetros) que corresponde à ID da função especificada.</summary>
      <param name="memid">A ID do membro cujo nome (ou nomes) é retornado.</param>
      <param name="rgBstrNames">Quando este método é retornado, contém o nome (ou os nomes) associado ao membro. Este parâmetro é passado não inicializado.</param>
      <param name="cMaxNames">O comprimento da matriz <paramref name="rgBstrNames" />.</param>
      <param name="pcNames">Quando este método é retornado, contém o número de nomes na matriz <paramref name="rgBstrNames" />. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Recupera as descrições de tipo referenciadas se uma descrição de tipo referencia outras descrições de tipo.</summary>
      <param name="hRef">Um identificador para a descrição do tipo referenciado a ser retornado.</param>
      <param name="ppTI">Quando este método é retornado, contém a descrição de tipo referenciada. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary>Recupera a descrição de tipo dos tipos de interface implementados se uma descrição de tipo descreve uma classe COM.</summary>
      <param name="index">O índice do tipo implementado cujo identificador é retornado.</param>
      <param name="href">Quando este método é retornado, contém uma referência a um identificador para a interface implementada. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)">
      <summary>Recupera uma estrutura <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> que contém os atributos da descrição de tipo.</summary>
      <param name="ppTypeAttr">Quando este método é retornado, contém uma referência à estrutura que contém os atributos desta descrição de tipo. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>Recupera a interface <see langword="ITypeComp" /> da descrição de tipo, o que permite a um compilador do cliente associar os membros da descrição de tipo.</summary>
      <param name="ppTComp">Quando este método é retornado, contém uma referência à interface <see langword="ITypeComp" /> da biblioteca de tipos contida. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary>Recupera uma estrutura <see langword="VARDESC" /> que descreve a variável especificada.</summary>
      <param name="index">O índice da descrição da variável a ser retornado.</param>
      <param name="ppVarDesc">Quando este método é retornado, contém uma referência à estrutura <see langword="VARDESC" /> que descreve a variável especificada. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary>Invoca um método ou acessa uma propriedade de um objeto que implementa a interface descrita pela descrição do tipo.</summary>
      <param name="pvInstance">Uma referência à interface descrita por esta descrição de tipo.</param>
      <param name="memid">Um valor que identifica o membro de interface.</param>
      <param name="wFlags">Sinalizadores que descrevem o contexto da chamada invoke.</param>
      <param name="pDispParams">Uma referência a uma estrutura que contém uma matriz de argumentos, uma matriz de DISPIDs para argumentos nomeados e contagens do número de elementos em cada matriz.</param>
      <param name="pVarResult">Uma referência ao local em que o resultado será armazenado. Se <paramref name="wFlags" /> especificar <see langword="DISPATCH_PROPERTYPUT" /> ou <see langword="DISPATCH_PROPERTYPUTREF" />, <paramref name="pVarResult" /> será ignorado. Definido como <see langword="null" /> se nenhum resultado for desejado.</param>
      <param name="pExcepInfo">Um ponteiro para uma estrutura de informações de exceção, que é preenchida somente se <see langword="DISP_E_EXCEPTION" /> é retornado.</param>
      <param name="puArgErr">Se <see langword="Invoke" /> retornar <see langword="DISP_E_TYPEMISMATCH" />, <paramref name="puArgErr" /> indicará o índice em <c>rgvarg</c> do argumento com o tipo incorreto. Se mais de um argumento retornar um erro, <paramref name="puArgErr" /> indicará somente o primeiro argumento com um erro. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseFuncDesc(System.IntPtr)">
      <summary>Libera uma estrutura <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> retornada anteriormente pelo método <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" />.</summary>
      <param name="pFuncDesc">Uma referência à estrutura <see langword="FUNCDESC" /> a ser liberada.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseTypeAttr(System.IntPtr)">
      <summary>Libera uma estrutura <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> retornada anteriormente pelo método <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" />.</summary>
      <param name="pTypeAttr">Uma referência à estrutura <see langword="TYPEATTR" /> a ser liberada.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseVarDesc(System.IntPtr)">
      <summary>Libera uma estrutura <see langword="VARDESC" /> retornada anteriormente pelo método <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" />.</summary>
      <param name="pVarDesc">Uma referência à estrutura <see langword="VARDESC" /> a ser liberada.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo2">
      <summary>Fornece a definição gerenciada da interface <see langword="ITypeInfo2" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary>Recupera os endereços de funções estáticas ou variáveis, como aquelas definidas em uma DLL.</summary>
      <param name="memid">A ID do membro do endereço do membro <see langword="static" /> a ser recuperada.</param>
      <param name="invKind">Um dos valores <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> que especifica se o membro é uma propriedade e, nesse caso, o tipo.</param>
      <param name="ppv">Quando este método é retornado, contém uma referência ao membro <see langword="static" />. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary>Cria uma nova instância de um tipo que descreve uma classe de componente (coclass).</summary>
      <param name="pUnkOuter">Um objeto que atua como a <see langword="IUnknown" /> controladora.</param>
      <param name="riid">A IID da interface que o chamador usa para se comunicar com o objeto resultante.</param>
      <param name="ppvObj">Quando este método é retornado, contém uma referência ao objeto criado. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllCustData(System.IntPtr)">
      <summary>Obtém todos os itens de dados personalizados para a biblioteca.</summary>
      <param name="pCustData">Um ponteiro para <see langword="CUSTDATA" />, que contém todos os itens de dados personalizados.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllFuncCustData(System.Int32,System.IntPtr)">
      <summary>Obtém todos os dados personalizados da função especificada.</summary>
      <param name="index">O índice da função para o qual obter os dados personalizados.</param>
      <param name="pCustData">Um ponteiro para <see langword="CUSTDATA" />, que contém todos os itens de dados personalizados.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllImplTypeCustData(System.Int32,System.IntPtr)">
      <summary>Obtém todos os dados personalizados para o tipo de implementação especificado.</summary>
      <param name="index">O índice do tipo de implementação para os dados personalizados.</param>
      <param name="pCustData">Um ponteiro para <see langword="CUSTDATA" /> que contém todos os itens de dados personalizados.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllParamCustData(System.Int32,System.Int32,System.IntPtr)">
      <summary>Obtém todos os dados personalizados para o parâmetro de função especificado.</summary>
      <param name="indexFunc">O índice da função para o qual obter os dados personalizados.</param>
      <param name="indexParam">O índice do parâmetro desta função para o qual obter os dados personalizados.</param>
      <param name="pCustData">Um ponteiro para <see langword="CUSTDATA" />, que contém todos os itens de dados personalizados.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllVarCustData(System.Int32,System.IntPtr)">
      <summary>Obtém a variável para os dados personalizados.</summary>
      <param name="index">O índice da variável para o qual obter os dados personalizados.</param>
      <param name="pCustData">Um ponteiro para <see langword="CUSTDATA" />, que contém todos os itens de dados personalizados.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary>Recupera a biblioteca de tipos que contém essa descrição de tipo e seu índice dentro dessa biblioteca de tipos.</summary>
      <param name="ppTLB">Quando este método é retornado, contém uma referência à biblioteca de tipos contida. Este parâmetro é passado não inicializado.</param>
      <param name="pIndex">Quando este método é retornado, contém uma referência ao índice da descrição de tipo na biblioteca de tipos contida. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetCustData(System.Guid@,System.Object@)">
      <summary>Obtém os dados personalizados.</summary>
      <param name="guid">O GUID usado para identificar os dados.</param>
      <param name="pVarVal">Quando este método é retornado, ele contém um <see langword="Object" /> que especifica o local em que colocar os dados recuperados. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Recupera uma descrição ou especificação de um ponto de entrada de uma função em uma DLL.</summary>
      <param name="memid">A ID da função de membro cuja descrição de entrada da DLL será retornada.</param>
      <param name="invKind">Um dos valores <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> que especifica o tipo de membro identificado por <paramref name="memid" />.</param>
      <param name="pBstrDllName">Se não for <see langword="null" />, a função definirá <paramref name="pBstrDllName" /> para um <see langword="BSTR" /> que contém o nome da DLL.</param>
      <param name="pBstrName">Se não for <see langword="null" />, a função definirá <c>lpbstrName</c> para um <see langword="BSTR" /> que contém o nome do ponto de entrada.</param>
      <param name="pwOrdinal">Se não for <see langword="null" /> e a função for definida por um ordinal, então, <c>lpwOrdinal</c> está definido para apontar para o ordinal.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>Recupera a cadeia de caracteres de documentação, o nome e o caminho completos do arquivo de Ajuda e a ID de contexto do tópico da Ajuda de uma descrição de tipo especificada.</summary>
      <param name="index">A ID do membro cuja documentação será retornada.</param>
      <param name="strName">Quando este método é retornado, contém o nome do método do item. Este parâmetro é passado não inicializado.</param>
      <param name="strDocString">Quando este método é retornado, contém a cadeia de caracteres de documentação do item especificado. Este parâmetro é passado não inicializado.</param>
      <param name="dwHelpContext">Quando este método é retornado, contém uma referência ao contexto de Ajuda associado ao item especificado. Este parâmetro é passado não inicializado.</param>
      <param name="strHelpFile">Quando este método é retornado, contém o nome totalmente qualificado do arquivo de Ajuda. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary>Recupera a cadeia de caracteres de documentação, o nome e o caminho completos do arquivo de Ajuda, o contexto de localização a ser usado e a ID de contexto para o tópico da Ajuda da biblioteca no arquivo de Ajuda.</summary>
      <param name="memid">O identificador de membro para a descrição do tipo.</param>
      <param name="pbstrHelpString">Quando este método é retornado, contém um <see langword="BSTR" /> que contém o nome do item especificado. Se o chamador não precisar o nome do item, <paramref name="pbstrHelpString" /> poderá ser <see langword="null" />. Este parâmetro é passado não inicializado.</param>
      <param name="pdwHelpStringContext">Quando este método é retornado, contém o contexto de localização da Ajuda. Se o chamador não precisar do contexto da Ajuda, <paramref name="pdwHelpStringContext" /> poderá ser <see langword="null" />. Este parâmetro é passado não inicializado.</param>
      <param name="pbstrHelpStringDll">Quando este método é retornado, contém um <see langword="BSTR" /> que contém o nome totalmente qualificado do arquivo que contém a DLL usada para o arquivo de Ajuda. Se o chamador não precisar do nome do arquivo, <paramref name="pbstrHelpStringDll" /> poderá ser <see langword="null" />. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>Obtém os dados personalizados da função especificada.</summary>
      <param name="index">O índice da função para o qual obter os dados personalizados.</param>
      <param name="guid">O GUID usado para identificar os dados.</param>
      <param name="pVarVal">Quando este método é retornado, contém um <see langword="Object" /> que especifica o local em que colocar os dados. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary>Recupera a estrutura <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> que contém informações sobre uma função especificada.</summary>
      <param name="index">O índice da descrição da função a ser retornado.</param>
      <param name="ppFuncDesc">Quando este método é retornado, contém uma referência a uma estrutura <see langword="FUNCDESC" /> que descreve a função especificada. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncIndexOfMemId(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.Int32@)">
      <summary>Associa a um membro específico com base em um DISPID conhecido, no qual o nome do membro não é conhecido (por exemplo, na associação a um membro padrão).</summary>
      <param name="memid">O identificador de membro.</param>
      <param name="invKind">Um dos valores <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> que especifica o tipo de membro identificado por memid.</param>
      <param name="pFuncIndex">Quando este método é retornado, contém um índice na função. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary>Mapeia entre nomes e IDs de membro e nomes e IDs de parâmetro.</summary>
      <param name="rgszNames">Uma matriz de nomes a ser mapeada.</param>
      <param name="cNames">A contagem de nomes a serem mapeados.</param>
      <param name="pMemId">Quando este método é retornado, contém uma referência a uma matriz na qual os mapeamentos de nome são colocados. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>Obtém o tipo de implementação dos dados personalizados.</summary>
      <param name="index">O índice do tipo de implementação para os dados personalizados.</param>
      <param name="guid">O GUID usado para identificar os dados.</param>
      <param name="pVarVal">Quando este método é retornado, ele contém um <see langword="Object" /> que especifica o local em que colocar os dados recuperados. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary>Recupera o valor <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> para uma interface ou interface base implementada em uma descrição de tipo.</summary>
      <param name="index">O índice da interface base ou da interface implementada.</param>
      <param name="pImplTypeFlags">Quando este método é retornado, contém uma referência à enumeração <see langword="IMPLTYPEFLAGS" />. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetMops(System.Int32,System.String@)">
      <summary>Recupera informações de marshaling.</summary>
      <param name="memid">A ID de membro que indica quais informações de marshaling são necessárias.</param>
      <param name="pBstrMops">Quando este método é retornado, contém uma referência à cadeia de caracteres <see langword="opcode" /> usada no marshaling de campos da estrutura descrita pela descrição de tipo referenciada ou retorna <see langword="null" /> se não há nenhuma informação a ser retornada. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary>Recupera a variável com a ID do membro especificada (ou o nome da propriedade ou método e seus parâmetros) que corresponde à ID da função especificada.</summary>
      <param name="memid">A ID do membro cujo nome (ou nomes) é retornado.</param>
      <param name="rgBstrNames">Quando este método é retornado, contém o nome (ou os nomes) associado ao membro. Este parâmetro é passado não inicializado.</param>
      <param name="cMaxNames">O comprimento da matriz <paramref name="rgBstrNames" />.</param>
      <param name="pcNames">Quando este método é retornado, contém o número de nomes na matriz <paramref name="rgBstrNames" />. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetParamCustData(System.Int32,System.Int32,System.Guid@,System.Object@)">
      <summary>Obtém o parâmetro de dados personalizado especificado.</summary>
      <param name="indexFunc">O índice da função para o qual obter os dados personalizados.</param>
      <param name="indexParam">O índice do parâmetro desta função para o qual obter os dados personalizados.</param>
      <param name="guid">O GUID usado para identificar os dados.</param>
      <param name="pVarVal">Quando este método é retornado, ele contém um <see langword="Object" /> que especifica o local em que colocar os dados recuperados. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Recupera as descrições de tipo referenciadas se uma descrição de tipo referencia outras descrições de tipo.</summary>
      <param name="hRef">Um identificador para a descrição do tipo referenciado a ser retornado.</param>
      <param name="ppTI">Quando este método é retornado, contém a descrição de tipo referenciada. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary>Recupera a descrição de tipo dos tipos de interface implementados se uma descrição de tipo descreve uma classe COM.</summary>
      <param name="index">O índice do tipo implementado cujo identificador é retornado.</param>
      <param name="href">Quando este método é retornado, contém uma referência a um identificador para a interface implementada. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeAttr(System.IntPtr@)">
      <summary>Recupera uma estrutura <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> que contém os atributos da descrição de tipo.</summary>
      <param name="ppTypeAttr">Quando este método é retornado, contém uma referência à estrutura que contém os atributos desta descrição de tipo. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>Recupera a interface <see langword="ITypeComp" /> da descrição de tipo, o que permite a um compilador do cliente associar os membros da descrição de tipo.</summary>
      <param name="ppTComp">Quando este método é retornado, contém uma referência ao <see langword="ITypeComp" /> da biblioteca de tipos contida. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeFlags(System.Int32@)">
      <summary>Retorna os sinalizadores de tipo sem nenhuma alocação. Este método retorna um sinalizador de tipo <see langword="DWORD" />, que expande os sinalizadores de tipo sem aumentar o <see langword="TYPEATTR" /> (atributo de tipo).</summary>
      <param name="pTypeFlags">Quando este método é retornado, contém uma referência <see langword="DWORD" /> a um <see langword="TYPEFLAG" />. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeKind(System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>Retorna a enumeração <see langword="TYPEKIND" /> rapidamente, sem fazer nenhuma alocação.</summary>
      <param name="pTypeKind">Quando este método é retornado, contém uma referência a uma enumeração <see langword="TYPEKIND" />. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>Obtém a variável para os dados personalizados.</summary>
      <param name="index">O índice da variável para o qual obter os dados personalizados.</param>
      <param name="guid">O GUID usado para identificar os dados.</param>
      <param name="pVarVal">Quando este método é retornado, ele contém um <see langword="Object" /> que especifica o local em que colocar os dados recuperados. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary>Recupera uma estrutura <see langword="VARDESC" /> que descreve a variável especificada.</summary>
      <param name="index">O índice da descrição da variável a ser retornado.</param>
      <param name="ppVarDesc">Quando este método é retornado, contém uma referência à estrutura <see langword="VARDESC" /> que descreve a variável especificada. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarIndexOfMemId(System.Int32,System.Int32@)">
      <summary>Associa a um membro específico com base em um <see langword="DISPID" /> conhecido, no qual o nome do membro não é conhecido (por exemplo, na associação a um membro padrão).</summary>
      <param name="memid">O identificador de membro.</param>
      <param name="pVarIndex">Quando este método é retornado, contém um índice do <paramref name="memid" />. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary>Invoca um método ou acessa uma propriedade de um objeto que implementa a interface descrita pela descrição do tipo.</summary>
      <param name="pvInstance">Uma referência à interface descrita por esta descrição de tipo.</param>
      <param name="memid">Identificador do membro de interface.</param>
      <param name="wFlags">Sinalizadores que descrevem o contexto da chamada invoke.</param>
      <param name="pDispParams">Uma referência a uma estrutura que contém uma matriz de argumentos, uma matriz de DISPIDs para argumentos nomeados e contagens do número de elementos em cada matriz.</param>
      <param name="pVarResult">Uma referência ao local em que o resultado será armazenado. Se <paramref name="wFlags" /> especificar <see langword="DISPATCH_PROPERTYPUT" /> ou <see langword="DISPATCH_PROPERTYPUTREF" />, <paramref name="pVarResult" /> será ignorado. Definido como <see langword="null" /> se nenhum resultado for desejado.</param>
      <param name="pExcepInfo">Um ponteiro para uma estrutura de informações de exceção, que é preenchida somente se <see langword="DISP_E_EXCEPTION" /> é retornado.</param>
      <param name="puArgErr">Se <see langword="Invoke" /> retornar <see langword="DISP_E_TYPEMISMATCH" />, <paramref name="puArgErr" /> indicará o índice do argumento com o tipo incorreto. Se mais de um argumento retornar um erro, <paramref name="puArgErr" /> indicará somente o primeiro argumento com um erro.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseFuncDesc(System.IntPtr)">
      <summary>Libera uma estrutura <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> retornada anteriormente pelo método <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" />.</summary>
      <param name="pFuncDesc">Uma referência à estrutura <see langword="FUNCDESC" /> a ser liberada.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseTypeAttr(System.IntPtr)">
      <summary>Libera uma estrutura <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> retornada anteriormente pelo método <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" />.</summary>
      <param name="pTypeAttr">Uma referência à estrutura <see langword="TYPEATTR" /> a ser liberada.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseVarDesc(System.IntPtr)">
      <summary>Libera uma estrutura <see langword="VARDESC" /> retornada anteriormente pelo método <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" />.</summary>
      <param name="pVarDesc">Uma referência à estrutura <see langword="VARDESC" /> a ser liberada.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib">
      <summary>Fornece a definição gerenciada da interface <see langword="ITypeLib" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary>Localiza as ocorrências de uma descrição de tipo em uma biblioteca de tipos.</summary>
      <param name="szNameBuf">O nome a ser procurado. Este é um parâmetro de entrada/saída.</param>
      <param name="lHashVal">Um valor de hash para acelerar a pesquisa, calculado pela função <see langword="LHashValOfNameSys" />. Se <paramref name="lHashVal" /> for 0, um valor será computado.</param>
      <param name="ppTInfo">Quando retorna, este método contém uma matriz de ponteiros para as descrições de tipo que contêm o nome especificado em <paramref name="szNameBuf" />. Este parâmetro é passado não inicializado.</param>
      <param name="rgMemId">Uma matriz do <see langword="MEMBERID" /> dos itens encontrados; <paramref name="rgMemId" /> [i] é o <see langword="MEMBERID" /> que indexa na descrição de tipo especificada pelo <paramref name="ppTInfo" /> [i]. Não pode ser <see langword="null" />.</param>
      <param name="pcFound">Na entrada, indica o número de instâncias a serem pesquisadas. Por exemplo, <paramref name="pcFound" /> = 1 pode ser chamado para localizar a primeira ocorrência. A pesquisa é interrompida quando uma instância é encontrada.  
Na saída, indica o número de instâncias que foram encontradas. Se os valores <see langword="in" /> e <see langword="out" /> de <paramref name="pcFound" /> forem idênticos, poderá haver mais descrições de tipo que contêm o nome.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>Recupera a cadeia de caracteres de documentação da biblioteca, o nome e o caminho completos do arquivo de Ajuda e o identificador de contexto do tópico de Ajuda da biblioteca no arquivo de Ajuda.</summary>
      <param name="index">O índice da descrição de tipo cuja documentação deve ser retornada.</param>
      <param name="strName">Quando retorna, este método contém uma cadeia de caracteres que representa o nome do item especificado. Este parâmetro é passado não inicializado.</param>
      <param name="strDocString">Quando retorna, este método contém uma cadeia de caracteres que representa a cadeia de caracteres de documentação do item especificado. Este parâmetro é passado não inicializado.</param>
      <param name="dwHelpContext">Quando retorna, este método contém o identificador de contexto de Ajuda associado ao item especificado. Este parâmetro é passado não inicializado.</param>
      <param name="strHelpFile">Quando retorna, este método contém uma cadeia de caracteres que representa o nome totalmente qualificado do arquivo de Ajuda. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)">
      <summary>Recupera a estrutura que contém os atributos da biblioteca.</summary>
      <param name="ppTLibAttr">Quando retorna, este método contém uma estrutura com os atributos da biblioteca. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>Permite que um compilador de cliente associe-se a uma biblioteca de tipos, variáveis, constantes e funções globais.</summary>
      <param name="ppTComp">Quando retorna, este método contém uma instância de uma instância <see langword="ITypeComp" /> para este <see langword="ITypeLib" />. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Recupera a descrição de tipo especificada na biblioteca.</summary>
      <param name="index">O índice da interface <see langword="ITypeInfo" /> a ser retornado.</param>
      <param name="ppTI">Quando retorna, este método contém um <see langword="ITypeInfo" /> que descreve o tipo referenciado por <paramref name="index" />. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoCount">
      <summary>Retorna o número de descrições de tipo na biblioteca de tipos.</summary>
      <returns>O número de descrições de tipo na biblioteca de tipos.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Recupera a descrição de tipo que corresponde ao GUID especificado.</summary>
      <param name="guid">O IID da interface ou a CLSID da classe cujas informações de tipo são solicitadas.</param>
      <param name="ppTInfo">Quando retorna, este método contém a interface <see langword="ITypeInfo" /> solicitada. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>Recupera o tipo de uma descrição de tipo.</summary>
      <param name="index">O índice da descrição de tipo da biblioteca de tipo.</param>
      <param name="pTKind">Quando retorna, este método contém uma referência à enumeração <see langword="TYPEKIND" /> para a descrição do tipo. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.IsName(System.String,System.Int32)">
      <summary>Indica se uma cadeia de caracteres passada contém o nome de um tipo ou membro descrito na biblioteca.</summary>
      <param name="szNameBuf">A cadeia de caracteres a ser testada. Este é um parâmetro de entrada/saída.</param>
      <param name="lHashVal">O valor de hash de <paramref name="szNameBuf" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="szNameBuf" /> for encontrado na biblioteca de tipos; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.ReleaseTLibAttr(System.IntPtr)">
      <summary>Libera a estrutura <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> originalmente obtida do método <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" />.</summary>
      <param name="pTLibAttr">A estrutura <see langword="TLIBATTR" /> a ser liberada.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib2">
      <summary>Fornece uma definição gerenciada da interface <see langword="ITypeLib2" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary>Localiza as ocorrências de uma descrição de tipo em uma biblioteca de tipos.</summary>
      <param name="szNameBuf">O nome a ser procurado.</param>
      <param name="lHashVal">Um valor de hash para acelerar a pesquisa, calculado pela função <see langword="LHashValOfNameSys" />. Se <paramref name="lHashVal" /> for 0, um valor será computado.</param>
      <param name="ppTInfo">Quando retorna, este método contém uma matriz de ponteiros para as descrições de tipo que contêm o nome especificado em <paramref name="szNameBuf" />. Este parâmetro é passado não inicializado.</param>
      <param name="rgMemId">Quando esse método é retornado, ele contém uma matriz dos <see langword="MEMBERID" />s dos itens encontrados; <paramref name="rgMemId" /> [i] é o <see langword="MEMBERID" /> que indexa na descrição de tipo especificada pelo <paramref name="ppTInfo" /> [i]. O parâmetro não pode ser <see langword="null" />. Este parâmetro é passado não inicializado.</param>
      <param name="pcFound">Na entrada, um valor, passado por referência, que indica quantas instâncias procurar. Por exemplo, <paramref name="pcFound" /> = 1 pode ser chamado para localizar a primeira ocorrência. A pesquisa é interrompida quando uma instância é encontrada.  
Na saída, indica o número de instâncias que foram encontradas. Se os valores <see langword="in" /> e <see langword="out" /> de <paramref name="pcFound" /> forem idênticos, poderá haver mais descrições de tipo que contêm o nome.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetAllCustData(System.IntPtr)">
      <summary>Obtém todos os itens de dados personalizados para a biblioteca.</summary>
      <param name="pCustData">Um ponteiro para <see langword="CUSTDATA" />, que contém todos os itens de dados personalizados.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetCustData(System.Guid@,System.Object@)">
      <summary>Obtém os dados personalizados.</summary>
      <param name="guid">Um <see cref="T:System.Guid" />, passado por referência, que é usado para identificar os dados.</param>
      <param name="pVarVal">Quando este método é retornado, contém um objeto que especifica o local em que colocar os dados recuperados. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>Recupera a cadeia de caracteres de documentação da biblioteca, o nome e o caminho completos do arquivo de Ajuda e o identificador de contexto do tópico de Ajuda da biblioteca no arquivo de Ajuda.</summary>
      <param name="index">Um índice da descrição de tipo cuja documentação deve ser retornada.</param>
      <param name="strName">Quando este método retorna, contém uma cadeia de caracteres que especifica o nome do item especificado. Este parâmetro é passado não inicializado.</param>
      <param name="strDocString">Quando este método é retornado, contém a cadeia de caracteres de documentação do item especificado. Este parâmetro é passado não inicializado.</param>
      <param name="dwHelpContext">Quando retorna, este método contém o identificador de contexto de Ajuda associado ao item especificado. Este parâmetro é passado não inicializado.</param>
      <param name="strHelpFile">Quando este método retorna, contém uma cadeia de caracteres que especifica o nome totalmente qualificado do arquivo de Ajuda. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary>Recupera a cadeia de caracteres de documentação da biblioteca, o nome e o caminho completos do arquivo de Ajuda, o contexto de localização a ser usado e a ID de contexto para o tópico da Ajuda da biblioteca no arquivo de Ajuda.</summary>
      <param name="index">Um índice da descrição do tipo cuja documentação deve ser retornada; se <paramref name="index" /> for -1, a documentação para a biblioteca será retornada.</param>
      <param name="pbstrHelpString">Quando este método retorna, contém um BSTR que especifica o nome do item especificado. Se o chamador não precisar o nome do item, <paramref name="pbstrHelpString" /> poderá ser <see langword="null" />. Este parâmetro é passado não inicializado.</param>
      <param name="pdwHelpStringContext">Quando este método é retornado, contém o contexto de localização da Ajuda. Se o chamador não precisar do contexto da Ajuda, <paramref name="pdwHelpStringContext" /> poderá ser <see langword="null" />. Este parâmetro é passado não inicializado.</param>
      <param name="pbstrHelpStringDll">Quando este método retorna, contém um BSTR que especifica o nome totalmente qualificado do arquivo que contém a DLL usada para o arquivo de Ajuda. Se o chamador não precisar do nome do arquivo, <paramref name="pbstrHelpStringDll" /> poderá ser <see langword="null" />. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibAttr(System.IntPtr@)">
      <summary>Recupera a estrutura que contém os atributos da biblioteca.</summary>
      <param name="ppTLibAttr">Quando retorna, este método contém uma estrutura com os atributos da biblioteca. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibStatistics(System.IntPtr,System.Int32@)">
      <summary>Retorna estatísticas sobre uma biblioteca de tipos que são necessárias para o dimensionamento eficiente das tabelas de hash.</summary>
      <param name="pcUniqueNames">Um ponteiro para uma contagem de nomes exclusivos. Se o chamador não precisar de informações, definido como <see langword="null" />.</param>
      <param name="pcchUniqueNames">Quando este método retorna, contém um ponteiro para uma alteração na contagem de nomes exclusivos. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>Permite que um compilador de cliente associe-se a uma biblioteca de tipos, variáveis, constantes e funções globais.</summary>
      <param name="ppTComp">Quando este método retorna, contém uma instância <see langword="ITypeComp" /> para este <see langword="ITypeLib" />. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Recupera a descrição de tipo especificada na biblioteca.</summary>
      <param name="index">Um índice da interface <see langword="ITypeInfo" /> a ser retornado.</param>
      <param name="ppTI">Quando retorna, este método contém um <see langword="ITypeInfo" /> que descreve o tipo referenciado por <paramref name="index" />. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoCount">
      <summary>Retorna o número de descrições de tipo na biblioteca de tipos.</summary>
      <returns>O número de descrições de tipo na biblioteca de tipos.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Recupera a descrição de tipo que corresponde ao GUID especificado.</summary>
      <param name="guid">O <see cref="T:System.Guid" />, passado por referência, que representa o IID da interface de <see langword="CLSID" /> da classe cujas informações de tipo são solicitadas.</param>
      <param name="ppTInfo">Quando retorna, este método contém a interface <see langword="ITypeInfo" /> solicitada. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>Recupera o tipo de uma descrição de tipo.</summary>
      <param name="index">O índice da descrição de tipo da biblioteca de tipo.</param>
      <param name="pTKind">Quando retorna, este método contém uma referência à enumeração <see langword="TYPEKIND" /> para a descrição do tipo. Este parâmetro é passado não inicializado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.IsName(System.String,System.Int32)">
      <summary>Indica se uma cadeia de caracteres passada contém o nome de um tipo ou membro descrito na biblioteca.</summary>
      <param name="szNameBuf">A cadeia de caracteres a ser testada.</param>
      <param name="lHashVal">O valor de hash de <paramref name="szNameBuf" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="szNameBuf" /> for encontrado na biblioteca de tipos; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.ReleaseTLibAttr(System.IntPtr)">
      <summary>Libera a estrutura <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> originalmente obtida do método <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" />.</summary>
      <param name="pTLibAttr">A estrutura <see langword="TLIBATTR" /> a ser liberada.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.LIBFLAGS">
      <summary>Define os sinalizadores que se aplicam às bibliotecas de tipos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FCONTROL">
      <summary>A biblioteca de tipos descreve controles e não deve ser exibida em navegadores de tipo destinados a objetos não visuais.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHASDISKIMAGE">
      <summary>A biblioteca de tipos existe de maneira persistente no disco.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHIDDEN">
      <summary>A biblioteca de tipos não deve ser exibida aos usuários, embora seu uso não seja restrito. A biblioteca de tipos deve ser usada por controles. Hosts devem criar uma nova biblioteca de tipos que encapsule o controle com propriedades estendidas.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FRESTRICTED">
      <summary>A biblioteca de tipos é restrita e não deve ser exibida aos usuários.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMDESC">
      <summary>Contém informações sobre como transferir um elemento de estrutura, parâmetro ou valor retornado da função entre processos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.lpVarValue">
      <summary>Representa um ponteiro para um valor que está sendo passado entre processos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.wParamFlags">
      <summary>Representa os valores de máscara de bits que descrevem o elemento, o parâmetro ou o valor retornado da estrutura.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMFLAG">
      <summary>Descreve como transferir um elemento de estrutura, parâmetro ou valor retornado da função entre processos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASCUSTDATA">
      <summary>O parâmetro tem dados personalizados.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASDEFAULT">
      <summary>O parâmetro tem comportamentos padrão definidos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FIN">
      <summary>O parâmetro passa informações do chamador para o computador chamado.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FLCID">
      <summary>O parâmetro é o identificador de local de um aplicativo cliente.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOPT">
      <summary>O parâmetro é opcional.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOUT">
      <summary>O parâmetro retorna informações do computador chamado para o chamador.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FRETVAL">
      <summary>O parâmetro é o valor retornado do membro.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_NONE">
      <summary>Não especifica se o parâmetro passa ou recebe informações.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATDATA">
      <summary>Fornece a definição gerenciada da estrutura <see langword="STATDATA" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advf">
      <summary>Representa o valor de enumeração <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> que determina quando o coletor de consultoria será notificado de alterações nos dados.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advSink">
      <summary>Representa a interface <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> que receberá as notificações de alteração.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.connection">
      <summary>Representa o token que identifica exclusivamente a conexão de consultoria. Este token é retornado pelo método que configura a conexão de consultoria.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.formatetc">
      <summary>Representa a estrutura <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> para os dados de interesse do coletor de avisos. O coletor de avisos recebe a notificação de alterações nos dados especificados por essa estrutura <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATSTG">
      <summary>Contém informações estatísticas sobre um objeto livre de armazenamento, fluxo ou de matriz de bytes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.atime">
      <summary>Especifica a hora do último acesso para este armazenamento, fluxo ou matriz de bytes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.cbSize">
      <summary>Especifica o tamanho, em bytes, da matriz de bytes ou fluxo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.clsid">
      <summary>Indica o identificador de classe do objeto de armazenamento.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.ctime">
      <summary>Indica a hora de criação desse armazenamento, fluxo ou matriz de bytes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfLocksSupported">
      <summary>Indica os tipos de bloqueio de região com suporte do fluxo ou da matriz de bytes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfMode">
      <summary>Indica o modo de acesso especificado quando o objeto foi aberto.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfStateBits">
      <summary>Indica os bits do estado atual do objeto de armazenamento (o valor definido mais recentemente pelo método <see langword="IStorage::SetStateBits" />).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.mtime">
      <summary>Indica a hora da última modificação desse armazenamento, fluxo ou matriz de bytes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.pwcsName">
      <summary>Representa um ponteiro para uma cadeia de caracteres de terminação nula que contém o nome do objeto descrito por essa estrutura.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.reserved">
      <summary>Reservado para uso futuro.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.type">
      <summary>Indica o tipo do objeto de armazenamento que é um dos valores da enumeração <see langword="STGTY" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM">
      <summary>Fornece a definição gerenciada da estrutura <see langword="STGMEDIUM" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease">
      <summary>Representa um ponteiro para uma instância de interface que permite ao processo de envio controlar a maneira como o armazenamento é liberado quando o processo de recebimento chama a função <see langword="ReleaseStgMedium" />. Se <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> for <see langword="null" />, <see langword="ReleaseStgMedium" /> usará procedimentos padrão para liberar o armazenamento; caso contrário, <see langword="ReleaseStgMedium" /> usará a interface <see langword="IUnknown" /> especificada.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed">
      <summary>Especifica o tipo de meio de armazenamento. As rotinas de marshaling e unmarshaling usam este valor para determinar qual membro de união foi usado. Este valor deve ser um dos elementos da enumeração <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.unionmember">
      <summary>Representa um identificador, cadeia de caracteres ou ponteiro de interface que o processo de recebimento pode usar para acessar os dados que estão sendo transferidos.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.SYSKIND">
      <summary>Identifica a plataforma do sistema operacional de destino.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_MAC">
      <summary>O sistema operacional de destino para a biblioteca de tipos é Apple Macintosh. Por padrão, todos os campos de dados são alinhados em limites de byte pares.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN16">
      <summary>O sistema operacional de destino da biblioteca de tipos são sistemas de 16 bits do Windows. Por padrão, os campos de dados são compactados.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN32">
      <summary>O sistema operacional de destino da biblioteca de tipos são sistemas de 32 bits do Windows. Por padrão, os campos de dados são alinhados naturalmente (por exemplo, inteiros de 2 bytes são alinhados em limites de byte pares; inteiros de 4 bytes são alinhados em limites de palavra quádrupla e assim por diante).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN64">
      <summary>O sistema operacional de destino da biblioteca de tipos são sistemas de 64 bits do Windows.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYMED">
      <summary>Fornece a definição gerenciada da estrutura <see langword="TYMED" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ENHMF">
      <summary>A mídia de armazenamento é um metarquivo avançado. Se o membro <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> for <see langword="null" />, o processo de destino deverá usar o <see langword="DeleteEnhMetaFile" /> para excluir o bitmap.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE">
      <summary>A mídia de armazenamento é um arquivo de disco identificado por um caminho. Se o membro <see langword="STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> for <see langword="null" />, o processo de destino deverá usar o <see langword="OpenFile" /> para excluir o arquivo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_GDI">
      <summary>A mídia de armazenamento é um componente de GDI (Graphics Device Interface) (HBITMAP). Se o membro <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> for <see langword="null" />, o processo de destino deverá usar o <see langword="DeleteObject" /> para excluir o bitmap.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL">
      <summary>A mídia de armazenamento é um identificador de memória global (HGLOBAL). Aloca o identificador global com o sinalizador GMEM_SHARE. Se o membro <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> for <see langword="null" />, o processo de destino deverá usar o <see langword="GlobalFree" /> para liberar a memória.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE">
      <summary>A mídia de armazenamento é um componente de armazenamento identificado por um ponteiro <see langword="IStorage" />. Os dados estão no fluxos e armazenamentos contidos por essa instância <see langword="IStorage" />. Se o membro <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> não for <see langword="null" />, o processo de destino deverá usar o <see langword="IStorage::Release" /> para liberar o componente de memória.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM">
      <summary>A mídia de armazenamento é um objeto de fluxo identificado por um ponteiro <see langword="IStream" />. Usa <see langword="ISequentialStream::Read" /> para ler os dados. Se o membro <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> não for <see langword="null" />, o processo de destino deverá usar o <see langword="IStream::Release" /> para liberar o componente de fluxo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_MFPICT">
      <summary>A mídia de armazenamento é um metarquivo (HMETAFILE). Usa as funções do Windows ou WIN32 para acessar os dados do metarquivo. Se o membro <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> for <see langword="null" />, o processo de destino deverá usar o <see langword="DeleteMetaFile" /> para excluir o bitmap.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_NULL">
      <summary>Nenhum dado está sendo passado.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEATTR">
      <summary>Contém atributos de um <see langword="UCOMITypeInfo" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbAlignment">
      <summary>Especifica o alinhamento de bytes para uma instância desse tipo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeInstance">
      <summary>O tamanho de uma instância desse tipo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeVft">
      <summary>O tamanho da tabela de método virtual desse tipo (VTBL).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cFuncs">
      <summary>Indica o número de funções na interface que essa estrutura descreve.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cImplTypes">
      <summary>Indica o número de interfaces implementadas na interface que essa estrutura descreve.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cVars">
      <summary>Indica o número de variáveis e campos de dados na interface descrita por essa estrutura.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.dwReserved">
      <summary>Reservado para uso futuro.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.guid">
      <summary>O GUID das informações de tipo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.idldescType">
      <summary>Os atributos IDL do tipo descrito.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lcid">
      <summary>Local dos nomes de membro e cadeias de caracteres de documentação.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lpstrSchema">
      <summary>Reservado para uso futuro.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.MEMBER_ID_NIL">
      <summary>Uma constante usada com os campos <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidConstructor" /> e <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidDestructor" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidConstructor">
      <summary>ID do construtor ou <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" />, se não houver.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidDestructor">
      <summary>ID do destruidor ou <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" />, se não houver.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.tdescAlias">
      <summary>Se <see cref="F:System.Runtime.InteropServices.TYPEATTR.typekind" /> == <see cref="F:System.Runtime.InteropServices.TYPEKIND.TKIND_ALIAS" /> especificar o tipo para o qual esse tipo é um alias.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.typekind">
      <summary>Um valor <see cref="T:System.Runtime.InteropServices.TYPEKIND" /> que descreve o tipo que essas informações descrevem.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMajorVerNum">
      <summary>Número de versão principal.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMinorVerNum">
      <summary>Número de versão secundária.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wTypeFlags">
      <summary>Um valor <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> que descreve essas informações.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEDESC">
      <summary>Descreve o tipo de uma variável, o tipo de retorno de uma função ou o tipo de um parâmetro de função.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.lpValue">
      <summary>Se a variável for <see langword="VT_SAFEARRAY" /> ou <see langword="VT_PTR" />, o campo <see langword="lpValue" /> conterá um ponteiro para um <see langword="TYPEDESC" /> que especifica o tipo de elemento.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.vt">
      <summary>Indica o tipo de variante do item descrito por este <see langword="TYPEDESC" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEFLAGS">
      <summary>Define as propriedades e os atributos de uma descrição de tipo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAGGREGATABLE">
      <summary>A classe oferece suporte à agregação.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAPPOBJECT">
      <summary>Uma descrição de tipo que descreve um objeto <see langword="Application" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCANCREATE">
      <summary>Instâncias do tipo podem ser criadas por <see langword="ITypeInfo::CreateInstance" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCONTROL">
      <summary>O tipo é um controle do qual outros tipos serão derivados e não deve ser exibido aos usuários.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDISPATCHABLE">
      <summary>Indica que a interface deriva de <see langword="IDispatch" />, direta ou indiretamente. Esse sinalizador é computado, não há uma linguagem ODL para o sinalizador.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDUAL">
      <summary>A interface fornece o <see langword="IDispatch" /> e a associação VTBL.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FHIDDEN">
      <summary>O tipo não deve ser exibido para os navegadores.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FLICENSED">
      <summary>O tipo é licenciado.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FNONEXTENSIBLE">
      <summary>A interface não pode adicionar membros em tempo de execução.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FOLEAUTOMATION">
      <summary>Os tipos usados na interface são totalmente compatíveis com a Automação, incluindo o suporte da associação VTBL. Configuração dupla em uma interface define dois este sinalizador e o <see cref="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FDUAL" />. Este sinalizador não é permitido em dispinterfaces.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPREDECLID">
      <summary>O tipo é predefinido. O aplicativo cliente deve criar automaticamente uma única instância do objeto que tem esse atributo. O nome da variável que aponta para o objeto é o mesmo que o nome de classe do objeto.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPROXY">
      <summary>Indica que a interface usará uma biblioteca de vínculo dinâmico de proxy/stub. Este sinalizador especifica que o proxy da biblioteca de tipos não deve ter o registro cancelado quando a biblioteca de tipos não está registrada.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREPLACEABLE">
      <summary>O objeto oferece suporte a <see langword="IConnectionPointWithDefault" /> e tem comportamentos padrão.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FRESTRICTED">
      <summary>Não deve ser acessível de linguagens de macro. Esse sinalizador é destinado a tipos no nível de sistema ou a tipos que navegadores de tipo não devem exibir.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREVERSEBIND">
      <summary>Indica a interfaces base devem ser verificados para resolução de nomes antes de verificar filhos, que é o inverso do comportamento padrão.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEKIND">
      <summary>Especifica os vários tipos de dados e funções.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ALIAS">
      <summary>Um tipo que é um alias de outro tipo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_COCLASS">
      <summary>Um conjunto de interfaces de componentes implementados.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_DISPATCH">
      <summary>Um conjunto de métodos e propriedades que são acessíveis por meio de <see langword="IDispatch::Invoke" />. Por padrão, as interfaces duplas retornam <see langword="TKIND_DISPATCH" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ENUM">
      <summary>Um conjunto de enumeradores.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_INTERFACE">
      <summary>Um tipo que tem funções virtuais, que são todas puras.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MAX">
      <summary>Marcador de fim de enumeração.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MODULE">
      <summary>Um módulo que pode ter apenas funções estáticas e dados (por exemplo, uma DLL).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_RECORD">
      <summary>Uma estrutura sem métodos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_UNION">
      <summary>Uma união de todos os membros que têm um deslocamento zero.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPELIBATTR">
      <summary>Identifica uma biblioteca de tipo específica e dá suporte à localização para nomes de membros.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.guid">
      <summary>Representa uma ID de biblioteca global exclusivo de uma biblioteca de tipos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.lcid">
      <summary>Representa uma identificação de localidade de uma biblioteca de tipos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.syskind">
      <summary>Representa a plataforma de hardware de destino de uma biblioteca de tipos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wLibFlags">
      <summary>Representa os sinalizadores de biblioteca.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMajorVerNum">
      <summary>Representa o número de versão principal de uma biblioteca de tipos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMinorVerNum">
      <summary>Representa o número de versão secundária de uma biblioteca de tipos.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC">
      <summary>Descreve um membro de dados, constante ou variável.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.desc">
      <summary>Contém informações sobre uma variável.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION">
      <summary>Contém informações sobre uma variável.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.lpvarValue">
      <summary>Descreve uma constante simbólica.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.oInst">
      <summary>Indica o deslocamento dessa variável dentro da instância.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.elemdescVar">
      <summary>Contém o tipo de variável.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.lpstrSchema">
      <summary>Este campo é reservado para uso futuro.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.memid">
      <summary>Indica a ID de membro de uma variável.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.varkind">
      <summary>Define como realizar marshaling de uma variável.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.wVarFlags">
      <summary>Define as propriedades de uma variável.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARFLAGS">
      <summary>Identifica as constantes que definem as propriedades de uma variável.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FBINDABLE">
      <summary>A variável dá suporte à associação de dados.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTBIND">
      <summary>A variável é a única propriedade que melhor representa o objeto. Apenas uma variável em informações de tipo pode ter esse atributo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTCOLLELEM">
      <summary>Permite uma otimização em que o compilador procura um membro chamado "xyz" no tipo de "abc". Se esse membro for encontrado e marcado como uma função de acessador de um elemento da coleção padrão, uma chamada será gerada para essa função de membro. Permitido em membros em dispinterfaces e interfaces; não é permitida em módulos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDISPLAYBIND">
      <summary>A variável é exibida para o usuário como associável. <see cref="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FBINDABLE" /> também deve ser definido.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FHIDDEN">
      <summary>A variável não deve ser exibida para o usuário em um navegador, embora ela exista e seja associável.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FIMMEDIATEBIND">
      <summary>A variável é mapeada como propriedades vinculáveis individuais.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FNONBROWSABLE">
      <summary>A variável é exibida em um Pesquisador de Objetos, mas não em um navegador de propriedades.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREADONLY">
      <summary>Atribuição à variável não deve ser permitida.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREPLACEABLE">
      <summary>Marca a interface como tendo comportamentos padrão.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREQUESTEDIT">
      <summary>Quando definido, qualquer tentativa de alterar diretamente os resultados da propriedade em uma chamada para <see langword="IPropertyNotifySink::OnRequestEdit" />. A implementação de <see langword="OnRequestEdit" /> determina se a alteração é aceita.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FRESTRICTED">
      <summary>A variável não deve ser acessível das linguagens de macro. Esse sinalizador destina-se a variáveis de nível de sistema ou variáveis que você não deseja que os navegadores de tipo para exibam.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FSOURCE">
      <summary>A variável retorna um objeto que é uma origem de eventos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FUIDEFAULT">
      <summary>A variável é a exibição padrão na interface do usuário.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARKIND">
      <summary>Define o tipo de variável.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_CONST">
      <summary>A estrutura <see langword="VARDESC" /> descreve uma constante simbólica. Não há nenhuma memória associada a ela.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_DISPATCH">
      <summary>A variável pode ser acessada somente com <see langword="IDispatch::Invoke" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_PERINSTANCE">
      <summary>A variável é um campo ou membro do tipo. Ela existe em um deslocamento fixo dentro de cada instância do tipo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_STATIC">
      <summary>Há apenas uma instância da variável.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute">
      <summary>Especifica o método a ser chamado quando você cancela o registro de um assembly para uso de COM. Isso possibilita a execução de código escrito pelo usuário durante o processo de cancelamento do registro.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComUnregisterFunctionAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CurrencyWrapper">
      <summary>Encapsula objetos que o empacotador deve realizar marshaling como um <see langword="VT_CY" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Decimal)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> com o <see langword="Decimal" /> a ser encapsulado e que terá marshaling como o tipo <see langword="VT_CY" />.</summary>
      <param name="obj">O parâmetro <see langword="Decimal" /> a ser encapsulado e ter marshaling como <see langword="VT_CY" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Object)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> com o objeto que contém o <see langword="Decimal" /> a ser encapsulado e que terá marshaling como o tipo <see langword="VT_CY" />.</summary>
      <param name="obj">O objeto que contém o <see langword="Decimal" /> a ser encapsulado e ter marshaling como <see langword="VT_CY" />.</param>
      <exception cref="T:System.ArgumentException">O parâmetro <paramref name="obj" /> não é um tipo <see cref="T:System.Decimal" />.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.CurrencyWrapper.WrappedObject">
      <summary>Obtém o objeto encapsulado para realizar marshaling como o tipo <see langword="VT_CY" />.</summary>
      <returns>O objeto encapsulado a ser empacotado como <see langword="VT_CY" />tipo.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceMode">
      <summary>Indica se as chamadas de IUnknown::QueryInterface do método <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> podem usar a interface <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Allow">
      <summary>As chamadas do método IUnknown::QueryInterface podem usar a interface <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" />. Quando você usa esse valor, a sobrecarga do método <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> funciona como a sobrecarga <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Ignore">
      <summary>As chamadas do método IUnknown::QueryInterface devem ignorar a interface <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceResult">
      <summary>Fornece valores retornados para o método <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Failed">
      <summary>A interface para uma ID de interface específica não está disponível. Nesse caso, a interface retornada é <see langword="null" />. E_NOINTERFACE é retornado ao chamador de IUnknown::QueryInterface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled">
      <summary>O ponteiro de interface retornado do método <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> pode ser usado como o resultado de IUnknown::QueryInterface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled">
      <summary>O <see langword="QueryInterface" /> personalizado não foi usado. Em vez disso, a implementação padrão de IUnknown::QueryInterface deve ser usada.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultCharSetAttribute">
      <summary>Especifica o valor da enumeração <see cref="T:System.Runtime.InteropServices.CharSet" />. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultCharSetAttribute.#ctor(System.Runtime.InteropServices.CharSet)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.DefaultCharSetAttribute" /> com o valor <see cref="T:System.Runtime.InteropServices.CharSet" /> especificado.</summary>
      <param name="charSet">Um dos valores de <see cref="T:System.Runtime.InteropServices.CharSet" />.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultCharSetAttribute.CharSet">
      <summary>Obtém o valor padrão de <see cref="T:System.Runtime.InteropServices.CharSet" /> para qualquer chamada para <see cref="T:System.Runtime.InteropServices.DllImportAttribute" />.</summary>
      <returns>O valor padrão de <see cref="T:System.Runtime.InteropServices.CharSet" /> para qualquer chamada para <see cref="T:System.Runtime.InteropServices.DllImportAttribute" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute">
      <summary>Especifica os caminhos que são usados para procurar DLLs que fornecem funções para invocações de plataforma.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.#ctor(System.Runtime.InteropServices.DllImportSearchPath)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" />, especificando os caminhos a serem usados ao pesquisar os destinos de invocações de plataforma.</summary>
      <param name="paths">Uma combinação bit a bit dos valores de enumeração que especifica os caminhos que a função <c>LoadLibraryEx</c> pesquisa durante invocações de plataforma.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.Paths">
      <summary>Obtém uma combinação bit a bit dos valores de enumeração que especifica os caminhos que a função <c>LoadLibraryEx</c> pesquisa durante invocações de plataforma.</summary>
      <returns>Uma combinação de bits de valores de enumeração que especifica caminhos de pesquisa para invocações de plataforma.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultParameterValueAttribute">
      <summary>Define o valor padrão de um parâmetro, quando chamado de uma linguagem que dá suporte a parâmetros padrão. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultParameterValueAttribute.#ctor(System.Object)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.DefaultParameterValueAttribute" /> com o valor padrão de um parâmetro.</summary>
      <param name="value">Um objeto que representa o valor padrão de um parâmetro.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultParameterValueAttribute.Value">
      <summary>Obtém o valor padrão de um parâmetro.</summary>
      <returns>Um objeto que representa o valor padrão de um parâmetro.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispatchWrapper">
      <summary>Encapsula objetos que o empacotador deve realizar marshaling como um <see langword="VT_DISPATCH" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispatchWrapper.#ctor(System.Object)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> com o objeto sendo encapsulado.</summary>
      <param name="obj">O objeto a ser encapsulado e convertido em <see cref="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> não é uma classe ou uma matriz.  

ou - 
<paramref name="obj" /> não dá suporte a <see langword="IDispatch" />.</exception>
      <exception cref="T:System.InvalidOperationException">O parâmetro <paramref name="obj" /> foi marcado com um atributo <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> que foi passado um valor de <see langword="false" />.  

ou - 
O parâmetro <paramref name="obj" /> herda do tipo marcado com um atributo <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> que foi passado um valor de <see langword="false" />.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject">
      <summary>Obtém o objeto encapsulado pelo <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />.</summary>
      <returns>O objeto encapsulado pelo <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispIdAttribute">
      <summary>Especifica o identificador de distribuição (DISPID) COM de um método, campo ou propriedade.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispIdAttribute.#ctor(System.Int32)">
      <summary>Inicializa uma nova instância da classe <see langword="DispIdAttribute" /> com o DISPID especificado.</summary>
      <param name="dispId">O DISPID para o membro.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DispIdAttribute.Value">
      <summary>Obtém DISPID para o membro.</summary>
      <returns>O DISPID para o membro.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportAttribute">
      <summary>Indica que o método atribuído é exposto por uma DLL (biblioteca de vínculo dinâmico) não gerenciada como um ponto de entrada estático.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> com o nome da DLL que contém o método a ser importado.</summary>
      <param name="dllName">O nome da DLL que contém o método não gerenciado. Isso pode incluir um nome de exibição do assembly se a DLL estiver incluída em um assembly.</param>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
      <summary>Habilita ou desabilita o comportamento de mapeamento mais adequado ao converter caracteres Unicode em caracteres ANSI.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
      <summary>Indica a convenção de chamada de um ponto de entrada.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
      <summary>Indica como realizar marshaling de parâmetros de cadeia de caracteres para o método e a desconfiguração de nome de controles.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
      <summary>Indica o nome ou o ordinal do ponto de entrada DLL a ser chamado.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
      <summary>Controla se o campo <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> faz com que a Common Language Runtime pesquise uma DLL não gerenciada quanto a nomes de ponto de entrada diferentes daquele especificado.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
      <summary>Indica se os métodos não gerenciados que têm valores retornados <see langword="HRESULT" /> ou <see langword="retval" /> são traduzidos diretamente ou se os valores retornados <see langword="HRESULT" /> e <see langword="retval" /> são convertidos automaticamente para exceções.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
      <summary>Indica se o computador chamado chama a função de API do Windows <see langword="SetLastError" /> antes de retornar do método atribuído.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
      <summary>Habilita ou desabilita a geração de uma exceção em um caractere Unicode não mapeável que é convertido em um caractere "?" ANSI.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.DllImportAttribute.Value">
      <summary>Obtém o nome do arquivo DLL que contém o ponto de entrada.</summary>
      <returns>O nome do arquivo DLL que contém o ponto de entrada.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportResolver">
      <summary>Fornece um delegado usado para resolver bibliotecas nativas por meio de retorno de chamada.</summary>
      <param name="libraryName">A biblioteca nativa a ser resolvida.</param>
      <param name="assembly">O assembly que solicita a resolução.</param>
      <param name="searchPath">O <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> no PInvoke, se houver. Caso contrário, o <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> no assembly, se houver. Caso contrário, <see langword="null" />.</param>
      <returns>O identificador da biblioteca nativa carregada em caso de êxito ou <see cref="F:System.IntPtr.Zero" /> em caso de falha.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportSearchPath">
      <summary>Especifica os caminhos que são usados para procurar DLLs que fornecem funções para invocações de plataforma.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.ApplicationDirectory">
      <summary>Inclua o diretório de aplicativo no caminho de pesquisa DLL.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory">
      <summary>Ao procurar as dependências do assembly, incluir o diretório que contém o assembly pesquisar o diretório primeiro. Esse valor é usado pelo .NET Framework, antes que os caminhos são passados para a função Win32 LoadLibraryEx.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior">
      <summary>Pesquisar o diretório de aplicativo e, em seguida, chamar a função Win32 LoadLibraryEx com o sinalizador <c>LOAD_WITH_ALTERED_SEARCH_PATH</c>. Esse valor será ignorado se qualquer outro valor for especificado. Sistemas operacionais que não dão suporte a atributo <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> usam esse valor e ignoram os outros valores.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.SafeDirectories">
      <summary>Incluir o diretório de aplicativo, o diretório de <see langword="%WinDir%\System32" /> e diretórios de usuário no caminho de pesquisa DLL.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.System32">
      <summary>Incluir o diretório de <see langword="%WinDir%\System32" /> no caminho de pesquisa DLL.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UseDllDirectoryForDependencies">
      <summary>Pesquisar as dependências de uma DLL na pasta em que a DLL está localizada antes de pesquisar outras pastas.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UserDirectories">
      <summary>Incluir qualquer caminho que tenha sido explicitamente adicionado ao caminho de pesquisa de todo o processo usando a função Win32 <c>AddDllDirectory</c>.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ErrorWrapper">
      <summary>Encapsula objetos que o empacotador deve realizar marshaling como um <see langword="VT_ERROR" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> com o HRESULT que corresponde à exceção fornecida.</summary>
      <param name="e">A exceção a ser convertida em um código de erro.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> com o HRESULT do erro.</summary>
      <param name="errorCode">O HRESULT do erro.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Object)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> com um objeto contendo o HRESULT do erro.</summary>
      <param name="errorCode">Um objeto que contém o HRESULT do erro.</param>
      <exception cref="T:System.ArgumentException">O parâmetro <paramref name="errorCode" /> não é um tipo <see cref="T:System.Int32" />.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ErrorWrapper.ErrorCode">
      <summary>Obtém o código de erro do wrapper.</summary>
      <returns>O HRESULT do erro.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GuidAttribute">
      <summary>Fornece um <see cref="T:System.Guid" /> explícito quando um GUID automático for indesejável.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.GuidAttribute" /> com o GUID especificado.</summary>
      <param name="guid">O <see cref="T:System.Guid" /> a ser atribuído.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.GuidAttribute.Value">
      <summary>Obtém o <see cref="T:System.Guid" /> da classe.</summary>
      <returns>O <see cref="T:System.Guid" /> da classe.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleCollector">
      <summary>Rastreia identificadores pendentes e força uma coleta de lixo quando é atingido o limite especificado.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.HandleCollector" /> usando um nome e um limite no qual iniciar a coleta de identificadores.</summary>
      <param name="name">Um nome para o coletor. Esse parâmetro permite que você nomeie os coletores que acompanham os tipos de identificador separadamente.</param>
      <param name="initialThreshold">Um valor que especifica o ponto em que as coletas devem começar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="initialThreshold" /> é menor que 0.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.HandleCollector" /> usando um nome, um limite no qual iniciar a coleta de identificadores e um limite no qual a coleta de identificadores deve ocorrer.</summary>
      <param name="name">Um nome para o coletor.  Esse parâmetro permite que você nomeie os coletores que acompanham os tipos de identificador separadamente.</param>
      <param name="initialThreshold">Um valor que especifica o ponto em que as coletas devem começar.</param>
      <param name="maximumThreshold">Um valor que especifica o ponto em que as coletas devem ocorrer. Isso deve ser definido como o número máximo de identificadores disponíveis.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="initialThreshold" /> é menor que 0.  

ou - 
O parâmetro <paramref name="maximumThreshold" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException">O parâmetro <paramref name="maximumThreshold" /> é menor do que o parâmetro <paramref name="initialThreshold" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Add">
      <summary>Incrementa a contagem de identificadores atual.</summary>
      <exception cref="T:System.InvalidOperationException">A propriedade <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> é menor que 0.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Count">
      <summary>Obtém o número de identificadores coletados.</summary>
      <returns>O número de identificadores coletados.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.InitialThreshold">
      <summary>Obtém um valor que especifica o ponto em que as coletas devem começar.</summary>
      <returns>Um valor que especifica o ponto em que as coletas devem começar.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.MaximumThreshold">
      <summary>Obtém um valor que especifica o ponto em que as coletas devem ocorrer.</summary>
      <returns>Um valor que especifica o ponto em que as coletas devem ocorrer.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Name">
      <summary>Obtém o nome de um objeto <see cref="T:System.Runtime.InteropServices.HandleCollector" />.</summary>
      <returns>Essa <see cref="P:System.Runtime.InteropServices.HandleCollector.Name" /> propriedade permite que você nomeie os coletores que controlam os tipos de identificadores separadamente.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Remove">
      <summary>Decrementa a contagem de identificadores atual.</summary>
      <exception cref="T:System.InvalidOperationException">A propriedade <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> é menor que 0.</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleRef">
      <summary>Encapsula um objeto gerenciado que contém um identificador para um recurso que é passado para código não gerenciado usando a invocação de plataforma.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.#ctor(System.Object,System.IntPtr)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.HandleRef" /> com o objeto a encapsular e um identificador para o recurso usado pelo código não gerenciado.</summary>
      <param name="wrapper">Retorna um objeto gerenciado que não deve ser finalizado até o retorno da chamada de invocação de plataforma.</param>
      <param name="handle">Um <see cref="T:System.IntPtr" /> que indica um identificador de um recurso.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Handle">
      <summary>Obtém o identificador de um recurso.</summary>
      <returns>O identificador para um recurso.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef)~System.IntPtr">
      <summary>Retorna o identificador de um recurso do objeto <see cref="T:System.Runtime.InteropServices.HandleRef" /> especificado.</summary>
      <param name="value">O objeto que precisa de um identificador.</param>
      <returns>O identificador para um recurso do objeto <see cref="T:System.Runtime.InteropServices.HandleRef" /> especificado.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.ToIntPtr(System.Runtime.InteropServices.HandleRef)">
      <summary>Retorna a representação de número inteiro interna de um <see cref="T:System.Runtime.InteropServices.HandleRef" /> objeto.</summary>
      <param name="value">Um objeto <see cref="T:System.Runtime.InteropServices.HandleRef" /> do qual recuperar uma representação de número inteiro interna.</param>
      <returns>Um objeto <see cref="T:System.IntPtr" /> que representa um objeto <see cref="T:System.Runtime.InteropServices.HandleRef" />.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Wrapper">
      <summary>Obtém o objeto que contém o identificador de um recurso.</summary>
      <returns>O objeto que contém o identificador de um recurso.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomAdapter">
      <summary>Fornece uma maneira para que os clientes acessem o objeto real, em vez do objeto adaptador entregue por um marshaler personalizado.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomAdapter.GetUnderlyingObject">
      <summary>Fornece acesso ao objeto subjacente encapsulado por um marshaler personalizado.</summary>
      <returns>O objeto contido pelo objeto do adaptador.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomFactory">
      <summary>Permite que usuários gravem o código de ativação para os objetos gerenciados que estendem <see cref="T:System.MarshalByRefObject" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomFactory.CreateInstance(System.Type)">
      <summary>Cria uma nova instância do tipo especificado.</summary>
      <param name="serverType">O tipo a ativar.</param>
      <returns>Um <see cref="T:System.MarshalByRefObject" /> associado ao tipo especificado.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomMarshaler">
      <summary>Fornece wrappers personalizados para manipular chamadas de método.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)">
      <summary>Executa a limpeza necessária dos dados gerenciados quando eles não forem mais necessários.</summary>
      <param name="ManagedObj">O objeto gerenciado a ser destruído.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)">
      <summary>Executa a limpeza necessária dos dados não gerenciados quando eles não forem mais necessários.</summary>
      <param name="pNativeData">Um ponteiro para os dados não gerenciados a serem destruídos.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize">
      <summary>Retorna o tamanho dos dados nativos cujo marshaling deve ser realizado.</summary>
      <returns>O tamanho, em bytes, dos dados nativos.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)">
      <summary>Converte os dados gerenciados em dados não gerenciados.</summary>
      <param name="ManagedObj">O objeto gerenciado a ser convertido.</param>
      <returns>Um ponteiro para a exibição COM do objeto gerenciado.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)">
      <summary>Converte os dados não gerenciados em dados gerenciados.</summary>
      <param name="pNativeData">Um ponteiro para os dados não gerenciados a serem encapsulados.</param>
      <returns>Um objeto que representa a exibição gerenciada dos dados COM.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomQueryInterface">
      <summary>Habilita os desenvolvedores a fornecerem uma implementação personalizada gerenciada do método IUnknown::QueryInterface(REFIID riid, void **ppvObject).</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)">
      <summary>Retorna uma interface de acordo com uma ID de interface especificada.</summary>
      <param name="iid">O GUID da interface solicitada.</param>
      <param name="ppv">Uma referência à interface solicitada, quando esse método é retornado.</param>
      <returns>Um dos valores de enumeração que indica se uma implementação personalizada de IUnknown:: QueryInterface foi usada.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute">
      <summary>Indica que os tipos definidos dentro de um assembly foram originalmente definidos em uma biblioteca de tipos.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute" /> com o nome do arquivo de biblioteca de tipo original.</summary>
      <param name="tlbFile">A localização do arquivo de biblioteca de tipo original.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.Value">
      <summary>Obtém o nome do arquivo de biblioteca de tipos original.</summary>
      <returns>O nome do arquivo de biblioteca de tipos original.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InterfaceTypeAttribute">
      <summary>Indica se uma interface gerenciada é dupla, somente de expedição ou somente de <see langword="IUnknown" /> quando exposta à COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Int16)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> com o membro de enumeração <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> especificado.</summary>
      <param name="interfaceType">Descreve como a interface deve ser exposta a clientes COM.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Runtime.InteropServices.ComInterfaceType)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> com o membro de enumeração <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> especificado.</summary>
      <param name="interfaceType">Um dos valores <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> que descreve como a interface deve ser exposta a clientes COM.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.InterfaceTypeAttribute.Value">
      <summary>Obtém o valor <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> que descreve como a interface deve ser exposta a COM.</summary>
      <returns>O <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> valor que descreve como a interface deve ser exposta a com.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidComObjectException">
      <summary>A exceção lançada quando um objeto COM inválido é usado.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor">
      <summary>Inicializa uma nova instância da <see langword="InvalidComObjectException" /> com propriedades padrão.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa uma nova instância da classe <see langword="COMException" /> dos dados de serialização.</summary>
      <param name="info">O objeto que mantém os dados de objeto serializados.</param>
      <param name="context">As informações contextuais sobre a origem ou o destino.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String)">
      <summary>Inicializa uma nova instância da <see langword="InvalidComObjectException" /> com uma mensagem.</summary>
      <param name="message">A mensagem que indica o motivo da exceção.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String,System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.InvalidComObjectException" /> com uma mensagem de erro especificada e uma referência à exceção interna que é a causa da exceção.</summary>
      <param name="message">A mensagem de erro que explica a razão da exceção.</param>
      <param name="inner">A exceção que é a causa da exceção atual. Caso o parâmetro <paramref name="inner" /> não seja <see langword="null" />, a exceção atual é acionada em um bloco <see langword="catch" /> que identifica a exceção interna.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
      <summary>A exceção gerada pelo marshaler quando este encontra um argumento de um tipo variante que não pode ter o marshaling realizado no código gerenciado.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor">
      <summary>Inicializa uma nova instância da classe <see langword="InvalidOleVariantTypeException" /> com valores padrão.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa uma nova instância da classe <see langword="InvalidOleVariantTypeException" /> dos dados de serialização.</summary>
      <param name="info">O objeto que mantém os dados de objeto serializados.</param>
      <param name="context">As informações contextuais sobre a origem ou o destino.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see langword="InvalidOleVariantTypeException" /> com uma mensagem especificada.</summary>
      <param name="message">A mensagem que indica o motivo da exceção.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String,System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" /> com uma mensagem de erro especificada e uma referência à exceção interna que é a causa da exceção.</summary>
      <param name="message">A mensagem de erro que explica a razão da exceção.</param>
      <param name="inner">A exceção que é a causa da exceção atual. Caso o parâmetro <paramref name="inner" /> não seja <see langword="null" />, a exceção atual é acionada em um bloco <see langword="catch" /> que identifica a exceção interna.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.LCIDConversionAttribute">
      <summary>Indica que a assinatura não gerenciada do método espera um parâmetro LCID (identificador de localidade).</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.LCIDConversionAttribute.#ctor(System.Int32)">
      <summary>Inicializa uma nova instância da classe <see langword="LCIDConversionAttribute" /> com a posição do LCID na assinatura não gerenciada.</summary>
      <param name="lcid">Indica a posição do argumento LCID na assinatura não gerenciada, em que 0 é o primeiro argumento.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.LCIDConversionAttribute.Value">
      <summary>Obtém a posição do argumento LCID na assinatura não gerenciada.</summary>
      <returns>A posição do argumento LCID na assinatura não gerenciada, em que 0 é o primeiro argumento.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute">
      <summary>Dá suporte para personalização do usuário de stubs de interoperabilidade em cenários de interoperabilidade gerenciada para COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.#ctor(System.Type,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute" /> com o nome do método e o tipo de classe especificados.</summary>
      <param name="classType">A classe que contém o método de stub necessário.</param>
      <param name="methodName">O nome do método de stub.</param>
      <exception cref="T:System.ArgumentException">Não foi possível localizar <paramref name="methodName" />.  

ou - 
O método é não estático ou não genérico.  

ou - 
A lista de parâmetros do método não corresponde à lista de parâmetros esperados para o stub.</exception>
      <exception cref="T:System.MethodAccessException">A interface que contém o método de interoperabilidade gerenciado não tem acesso ao método de stub porque o método de stub tem acessibilidade privada ou protegida ou porque há um problema de segurança.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.ClassType">
      <summary>Obtém a classe que contém o método de stub necessário.</summary>
      <returns>A classe que contém o stub de interoperabilidade personalizado.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.MethodName">
      <summary>Obtém o nome do método de stub.</summary>
      <returns>O nome de um stub de interoperabilidade personalizado.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshal">
      <summary>Fornece um conjunto de métodos para alocar a memória não gerenciada, copiando os blocos de memória não gerenciada e convertendo tipos gerenciados em não gerenciados, bem como outros diversos métodos usados ao interagir com código não gerenciado.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)">
      <summary>Incrementa a contagem de referência na interface especificada.</summary>
      <param name="pUnk">A contagem de referência da interface a ser incrementada.</param>
      <returns>O novo valor da contagem de referência no parâmetro <paramref name="pUnk" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)">
      <summary>Aloca um bloco de memória do tamanho especificado do alocador de memória de tarefas COM.</summary>
      <param name="cb">O tamanho do bloco de memória a ser alocado.</param>
      <returns>Um inteiro que representa o endereço do bloco de memória alocada. Essa memória deve ser liberada com <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />.</returns>
      <exception cref="T:System.OutOfMemoryException">Não há memória suficiente para atender à solicitação.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)">
      <summary>Aloca memória de memória não gerenciada do processo usando o número de bytes especificado.</summary>
      <param name="cb">O número necessário de bytes na memória.</param>
      <returns>Um ponteiro para a memória recém-alocada. Essa memória deve ser liberada usando o método <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />.</returns>
      <exception cref="T:System.OutOfMemoryException">Não há memória suficiente para atender à solicitação.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)">
      <summary>Aloca memória de memória não gerenciada do processo usando o ponteiro para o número de bytes especificado.</summary>
      <param name="cb">O número necessário de bytes na memória.</param>
      <returns>Um ponteiro para a memória recém-alocada. Essa memória deve ser liberada usando o método <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />.</returns>
      <exception cref="T:System.OutOfMemoryException">Não há memória suficiente para atender à solicitação.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup">
      <summary>Indica se RCWs (Runtime Callable Wrappers) de qualquer contexto estão disponíveis para limpeza.</summary>
      <returns>
        <see langword="true" /> se houver algum RCW disponível para limpeza; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)">
      <summary>Obtém um ponteiro de interface identificado pelo moniker especificado.</summary>
      <param name="monikerName">O moniker correspondente para o ponteiro de interface desejado.</param>
      <returns>Um objeto que contém uma referência para o ponteiro de interface identificado pelo parâmetro <paramref name="monikerName" />. Um moniker é um nome e, nesse caso, o moniker é definido por uma interface.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">Um HRESULT não reconhecido foi retornado pelo método <see langword="BindToMoniker" /> não gerenciado.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)">
      <summary>Altera a intensidade do identificador CCW (COM Callable Wrapper) de um objeto.</summary>
      <param name="otp">O objeto cujo CCW contém um identificador contado de referência. O identificador será forte se a contagem de referência no CCW for maior que zero; caso contrário, será fraca.</param>
      <param name="fIsWeak">
        <see langword="true" /> para alterar a intensidade do identificador no parâmetro <paramref name="otp" /> para fraca, independentemente de sua contagem de referência; <see langword="false" /> para redefinir a intensidade do identificador em <paramref name="otp" /> para ter contagem de referência.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext">
      <summary>Notifica o tempo de execução para limpar todos os RCWs (Runtime Callable Wrappers) alocados no contexto atual.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copia os dados de uma matriz de inteiro sem sinal unidimensional de 8 bits para um ponteiro de memória não gerenciado.</summary>
      <param name="source">A matriz unidimensional a ser copiada.</param>
      <param name="startIndex">O índice baseado em zero na matriz de origem em que a cópia deve iniciar.</param>
      <param name="destination">O ponteiro de memória para o qual copiar.</param>
      <param name="length">O número de elementos da matriz a copiar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> e <paramref name="length" /> não são válidos.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> ou <paramref name="length" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copia os dados de uma matriz de caracteres gerenciada unidimensional para um ponteiro de memória não gerenciada.</summary>
      <param name="source">A matriz unidimensional a ser copiada.</param>
      <param name="startIndex">O índice baseado em zero na matriz de origem em que a cópia deve iniciar.</param>
      <param name="destination">O ponteiro de memória para o qual copiar.</param>
      <param name="length">O número de elementos da matriz a copiar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> e <paramref name="length" /> não são válidos.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="startIndex" />, <paramref name="destination" /> ou <paramref name="length" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copia os dados de uma matriz de número de ponto flutuante de precisão dupla unidimensional gerenciada para um ponteiro de memória não gerenciada.</summary>
      <param name="source">A matriz unidimensional a ser copiada.</param>
      <param name="startIndex">O índice baseado em zero na matriz de origem em que a cópia deve iniciar.</param>
      <param name="destination">O ponteiro de memória para o qual copiar.</param>
      <param name="length">O número de elementos da matriz a copiar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> e <paramref name="length" /> não são válidos.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> ou <paramref name="length" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copia os dados de uma matriz de inteiro com sinal unidimensional de 16 bits para um ponteiro de memória não gerenciada.</summary>
      <param name="source">A matriz unidimensional a ser copiada.</param>
      <param name="startIndex">O índice baseado em zero na matriz de origem em que a cópia deve iniciar.</param>
      <param name="destination">O ponteiro de memória para o qual copiar.</param>
      <param name="length">O número de elementos da matriz a copiar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> e <paramref name="length" /> não são válidos.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> ou <paramref name="length" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copia os dados de uma matriz unidimensional de inteiro com sinal de 32 bits para um ponteiro de memória não gerenciada.</summary>
      <param name="source">A matriz unidimensional a ser copiada.</param>
      <param name="startIndex">O índice baseado em zero na matriz de origem em que a cópia deve iniciar.</param>
      <param name="destination">O ponteiro de memória para o qual copiar.</param>
      <param name="length">O número de elementos da matriz a copiar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> e <paramref name="length" /> não são válidos.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="startIndex" /> ou <paramref name="length" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copia os dados de uma matriz de inteiro com sinal unidimensional de 64 bits para um ponteiro de memória não gerenciada.</summary>
      <param name="source">A matriz unidimensional a ser copiada.</param>
      <param name="startIndex">O índice baseado em zero na matriz de origem em que a cópia deve iniciar.</param>
      <param name="destination">O ponteiro de memória para o qual copiar.</param>
      <param name="length">O número de elementos da matriz a copiar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> e <paramref name="length" /> não são válidos.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> ou <paramref name="length" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
      <summary>Copia os dados de um ponteiro de memória não gerenciada para uma matriz gerenciada de inteiro sem sinal de 8 bits.</summary>
      <param name="source">O ponteiro de memória do qual copiar.</param>
      <param name="destination">A matriz para a qual copiar.</param>
      <param name="startIndex">O índice baseado em zero na matriz de destino em que a cópia deve iniciar.</param>
      <param name="length">O número de elementos da matriz a copiar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> ou <paramref name="length" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)">
      <summary>Copia os dados de um ponteiro de memória não gerenciada em uma matriz gerenciada de caracteres.</summary>
      <param name="source">O ponteiro de memória do qual copiar.</param>
      <param name="destination">A matriz para a qual copiar.</param>
      <param name="startIndex">O índice baseado em zero na matriz de destino em que a cópia deve iniciar.</param>
      <param name="length">O número de elementos da matriz a copiar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> ou <paramref name="length" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)">
      <summary>Copia os dados de um ponteiro de memória não gerenciada para uma matriz de número de ponto flutuante de precisão dupla gerenciada.</summary>
      <param name="source">O ponteiro de memória do qual copiar.</param>
      <param name="destination">A matriz para a qual copiar.</param>
      <param name="startIndex">O índice baseado em zero na matriz de destino em que a cópia deve iniciar.</param>
      <param name="length">O número de elementos da matriz a copiar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> ou <paramref name="length" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)">
      <summary>Copia os dados de um ponteiro de memória não gerenciada em uma matriz gerenciada de inteiro com sinal de 16 bits.</summary>
      <param name="source">O ponteiro de memória do qual copiar.</param>
      <param name="destination">A matriz para a qual copiar.</param>
      <param name="startIndex">O índice baseado em zero na matriz de destino em que a cópia deve iniciar.</param>
      <param name="length">O número de elementos da matriz a copiar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> ou <paramref name="length" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)">
      <summary>Copia os dados de um ponteiro de memória não gerenciado em uma matriz gerenciada de inteiro com sinal de 32 bits.</summary>
      <param name="source">O ponteiro de memória do qual copiar.</param>
      <param name="destination">A matriz para a qual copiar.</param>
      <param name="startIndex">O índice baseado em zero na matriz de destino em que a cópia deve iniciar.</param>
      <param name="length">O número de elementos da matriz a copiar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> ou <paramref name="length" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)">
      <summary>Copia os dados de um ponteiro de memória não gerenciada em uma matriz gerenciada de inteiro com sinal de 64 bits.</summary>
      <param name="source">O ponteiro de memória do qual copiar.</param>
      <param name="destination">A matriz para a qual copiar.</param>
      <param name="startIndex">O índice baseado em zero na matriz de destino em que a cópia deve iniciar.</param>
      <param name="length">O número de elementos da matriz a copiar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> ou <paramref name="length" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
      <summary>Copia os dados de um ponteiro de memória não gerenciada em uma matriz gerenciada <see cref="T:System.IntPtr" />.</summary>
      <param name="source">O ponteiro de memória do qual copiar.</param>
      <param name="destination">A matriz para a qual copiar.</param>
      <param name="startIndex">O índice baseado em zero na matriz de destino em que a cópia deve iniciar.</param>
      <param name="length">O número de elementos da matriz a copiar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> ou <paramref name="length" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)">
      <summary>Copia os dados de um ponteiro de memória não gerenciada para uma matriz de número de ponto flutuante de precisão simples gerenciada.</summary>
      <param name="source">O ponteiro de memória do qual copiar.</param>
      <param name="destination">A matriz para a qual copiar.</param>
      <param name="startIndex">O índice baseado em zero na matriz de destino em que a cópia deve iniciar.</param>
      <param name="length">O número de elementos da matriz a copiar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> ou <paramref name="length" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copia os dados de uma matriz gerenciada unidimensional <see cref="T:System.IntPtr" /> para um ponteiro de memória não gerenciado.</summary>
      <param name="source">A matriz unidimensional a ser copiada.</param>
      <param name="startIndex">O índice baseado em zero na matriz de origem em que a cópia deve iniciar.</param>
      <param name="destination">O ponteiro de memória para o qual copiar.</param>
      <param name="length">O número de elementos da matriz a copiar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> ou <paramref name="length" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copia os dados de uma matriz de número de ponto flutuante de precisão simples unidimensional gerenciada para um ponteiro de memória não gerenciada.</summary>
      <param name="source">A matriz unidimensional a ser copiada.</param>
      <param name="startIndex">O índice baseado em zero na matriz de origem em que a cópia deve iniciar.</param>
      <param name="destination">O ponteiro de memória para o qual copiar.</param>
      <param name="length">O número de elementos da matriz a copiar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> e <paramref name="length" /> não são válidos.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> ou <paramref name="length" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)">
      <summary>Agrega um objeto gerenciado com o objeto COM especificado.</summary>
      <param name="pOuter">O ponteiro <see langword="IUnknown" /> externo.</param>
      <param name="o">Um objeto a agregar.</param>
      <returns>O ponteiro <see langword="IUnknown" /> interno do objeto gerenciado.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> é um objeto Tempo de Execução do Windows.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)">
      <summary>[Suporte somente no .NET Framework 4.5.1 e versões posteriores]  
 Agrega um objeto gerenciado do tipo especificado com o objeto COM especificado.</summary>
      <param name="pOuter">O ponteiro IUnknown externo.</param>
      <param name="o">O objeto gerenciado a agregar.</param>
      <typeparam name="T">O tipo do objeto gerenciado a ser agregado.</typeparam>
      <returns>O ponteiro IUnknown interno do objeto gerenciado.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> é um objeto Tempo de Execução do Windows.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)">
      <summary>Encapsula o objeto COM indicado em um objeto do tipo especificado.</summary>
      <param name="o">O objeto a ser encapsulado.</param>
      <param name="t">O tipo de wrapper a criar.</param>
      <returns>O objeto encapsulado recém-encapsulado é uma instância do tipo desejado.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> deve derivar de <see langword="__ComObject" />.  

ou - 
<paramref name="t" /> é um tipo Tempo de Execução do Windows.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="t" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> não pode ser convertido no tipo de destino porque ele não dá suporte a todas as interfaces necessárias.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)">
      <summary>[Suporte somente no .NET Framework 4.5.1 e versões posteriores]  
 Encapsula o objeto COM indicado em um objeto do tipo especificado.</summary>
      <param name="o">O objeto a ser encapsulado.</param>
      <typeparam name="T">O tipo de objeto a ser encapsulado.</typeparam>
      <typeparam name="TWrapper">O tipo de objeto a ser retornado.</typeparam>
      <returns>O objeto recém-encapsulado.</returns>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" /> deve derivar de <see langword="__ComObject" />.  

ou - 
<typeparamref name="T" /> é um tipo Tempo de Execução do Windows.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> não pode ser convertido no <paramref name="TWrapper" /> porque ele não dá suporte a todas as interfaces necessárias.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)">
      <summary>Libera todas as subestruturas para as quais o bloco de memória não gerenciada especificado aponta.</summary>
      <param name="ptr">Um ponteiro para um bloco não gerenciado de memória.</param>
      <param name="structuretype">Tipo de uma classe formatada. Isso fornece as informações de layout necessárias para excluir o buffer no parâmetro <paramref name="ptr" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="structureType" /> tem um layout automático. Use explícito ou sequencial no seu lugar.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)">
      <summary>[Suporte somente no .NET Framework 4.5.1 e versões posteriores]  
 Libera todas as subestruturas de um tipo especificado para as quais o bloco de memória não gerenciado especificado aponta.</summary>
      <param name="ptr">Um ponteiro para um bloco não gerenciado de memória.</param>
      <typeparam name="T">O tipo da estrutura formatada. Isso fornece as informações de layout necessárias para excluir o buffer no parâmetro <paramref name="ptr" />.</typeparam>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" /> tem um layout automático. Use explícito ou sequencial no seu lugar.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)">
      <summary>Libera todas as referências a um Runtime Callable Wrapper (RCW), definindo sua contagem de referência como 0.</summary>
      <param name="o">O RCW a ser liberado.</param>
      <returns>O novo valor da contagem de referência do RCW associado ao parâmetro <paramref name="o" />, que será 0 (zero) se a versão for bem-sucedida.</returns>
      <exception cref="T:System.ArgumentException">O <paramref name="o" /> não é um objeto COM válido.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)">
      <summary>Libera um <see langword="BSTR" /> usando a função SysFreeString do COM.</summary>
      <param name="ptr">O endereço do BSTR a ser liberado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)">
      <summary>Libera um bloco de memória alocado pelo alocador de memória de tarefa COM não gerenciado.</summary>
      <param name="ptr">O endereço da memória a ser liberada.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)">
      <summary>Libera memória anteriormente alocada da memória não gerenciada do processo.</summary>
      <param name="hglobal">O identificador retornado pela chamada original correspondente para <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)">
      <summary>Retorna o GUID (identificador global exclusivo) para o tipo especificado ou gera um GUID usando o algoritmo usado pelo Exportador da Biblioteca de Tipos (Tlbexp.exe).</summary>
      <param name="type">O tipo para o qual gerar um GUID.</param>
      <returns>Um identificador para o tipo especificado.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)">
      <summary>Retorna um ProgID (identificador programático) para o tipo especificado.</summary>
      <param name="type">O tipo para o qual obter um ProgID.</param>
      <returns>O ProgID do tipo especificado.</returns>
      <exception cref="T:System.ArgumentException">O parâmetro <paramref name="type" /> não é uma classe que pode ser criada por COM. A classe precisa ser pública, ter um construtor público sem parâmetros e estar visível no COM.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="type" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)">
      <summary>Retorna um ponteiro para uma interface IUnknown que representa a interface especificada no objeto especificado. O acesso à interface de consulta personalizada é habilitada por padrão.</summary>
      <param name="o">O objeto que fornece a interface.</param>
      <param name="T">O tipo de interface solicitado.</param>
      <returns>O ponteiro da interface que representa a interface especificada para o objeto.</returns>
      <exception cref="T:System.ArgumentException">O parâmetro <typeparamref name="T" /> não é uma interface.  

ou - 
O tipo não é visível para COM.  

ou - 
O parâmetro <typeparamref name="T" /> é uma definição de tipo genérico.</exception>
      <exception cref="T:System.InvalidCastException">O parâmetro <paramref name="o" /> não dá suporte à interface solicitada.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="o" /> é <see langword="null" />.  

ou - 
O parâmetro <typeparamref name="T" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)">
      <summary>Retorna um ponteiro para uma interface IUnknown que representa a interface especificada no objeto especificado. O acesso à interface de consulta personalizada é controlado pelo modo de personalização especificado.</summary>
      <param name="o">O objeto que fornece a interface.</param>
      <param name="T">O tipo de interface solicitado.</param>
      <param name="mode">Um dos valores de enumeração que indica se é necessário aplicar uma personalização <see langword="IUnknown::QueryInterface" /> fornecida por um <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" />.</param>
      <returns>O ponteiro de interface que representa a interface para o objeto.</returns>
      <exception cref="T:System.ArgumentException">O parâmetro <typeparamref name="T" /> não é uma interface.  

ou - 
O tipo não é visível para COM.  

ou - 
O parâmetro <typeparamref name="T" /> é uma definição de tipo genérico.</exception>
      <exception cref="T:System.InvalidCastException">O objeto <paramref name="o" /> não dá suporte à interface solicitada.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="o" /> é <see langword="null" />.  

ou - 
O parâmetro <typeparamref name="T" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)">
      <summary>[Suporte somente no .NET Framework 4.5.1 e versões posteriores] 
Retorna um ponteiro para uma interface IUnknown que representa a interface especificada em um objeto do tipo especificado. O acesso à interface de consulta personalizada é habilitada por padrão.</summary>
      <param name="o">O objeto que fornece a interface.</param>
      <typeparam name="T">O tipo de <paramref name="o" />.</typeparam>
      <typeparam name="TInterface">O tipo de interface a ser retornado.</typeparam>
      <returns>O ponteiro de interface que representa a interface <paramref name="TInterface" />.</returns>
      <exception cref="T:System.ArgumentException">O parâmetro <paramref name="TInterface" /> não é uma interface.  

ou - 
O tipo não é visível para COM.  

ou - 
O parâmetro <typeparamref name="T" /> é um tipo genérico aberto.</exception>
      <exception cref="T:System.InvalidCastException">O parâmetro <paramref name="o" /> não dá suporte à interface <paramref name="TInterface" />.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="o" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)">
      <summary>Recupera os dados que são referenciados pela chave especificada do objeto COM especificado.</summary>
      <param name="obj">O objeto COM que contém os dados que você deseja.</param>
      <param name="key">A chave na tabela de hash interna do <paramref name="obj" /> da qual recuperar os dados.</param>
      <returns>Os dados representados pelo parâmetro <paramref name="key" /> na tabela de hash interna do parâmetro <paramref name="obj" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> é <see langword="null" />.  

ou - 
<paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> não é um objeto COM.  

ou - 
<paramref name="obj" /> é um objeto Tempo de Execução do Windows.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)">
      <summary>Converte um ponteiro de função não gerenciada em um delegado.</summary>
      <param name="ptr">O ponteiro de função não gerenciada a ser convertido.</param>
      <param name="t">O tipo do delegado a ser retornado.</param>
      <returns>Uma instância de delegado que pode ser convertida para o tipo de delegado apropriado.</returns>
      <exception cref="T:System.ArgumentException">O parâmetro <paramref name="t" /> não é um delegado ou é genérico.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="ptr" /> é <see langword="null" />.  

ou - 
O parâmetro <paramref name="t" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)">
      <summary>[Suporte somente no .NET Framework 4.5.1 e versões posteriores]  
 Converte um ponteiro de função não gerenciada em um delegado de um tipo especificado.</summary>
      <param name="ptr">O ponteiro de função não gerenciada a ser convertido.</param>
      <typeparam name="TDelegate">O tipo do delegado a ser retornado.</typeparam>
      <returns>Uma instância do tipo de delegado especificado.</returns>
      <exception cref="T:System.ArgumentException">O parâmetro genérico <paramref name="TDelegate" /> não é um delegado ou é um tipo genérico aberto.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="ptr" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)">
      <summary>Recupera o último slot na tabela de função virtual (v-table ou VTBL) de um tipo quando exposto ao COM.</summary>
      <param name="t">Um tipo que representa uma interface ou classe.</param>
      <returns>O último slot VTBL da interface quando exposto ao COM. Se o parâmetro <paramref name="t" /> for uma classe, o slot VTBL retornado será o último slot na interface gerada da classe.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionCode">
      <summary>Recupera um código que identifica o tipo da exceção ocorrido.</summary>
      <returns>O tipo da exceção.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)">
      <summary>Converte o código de erro HRESULT especificado em um objeto <see cref="T:System.Exception" /> correspondente.</summary>
      <param name="errorCode">O HRESULT a ser convertido.</param>
      <returns>Um objeto que representa o HRESULT convertido ou <see langword="null" /> se o valor de HRESULT não representar um código de erro (por exemplo, <see langword="S_OK" /> ou <see langword="S_FALSE" />).</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)">
      <summary>Converte o código de erro HRESULT especificado em um objeto <see cref="T:System.Exception" /> correspondente, com informações de erro adicionais passadas em uma interface IErrorInfo para o objeto de exceção.</summary>
      <param name="errorCode">O HRESULT a ser convertido.</param>
      <param name="errorInfo">Um ponteiro para a interface <see langword="IErrorInfo" /> que fornece mais informações sobre o erro. Você pode especificar <c>IntPtr(0)</c> para usar a interface <see langword="IErrorInfo" /> atual ou <c>IntPtr(-1)</c> para ignorar a interface <see langword="IErrorInfo" /> atual e construir a exceção apenas do código de erro.</param>
      <returns>Um objeto que representa o HRESULT convertido e informações obtidas de <paramref name="errorInfo" /> ou <see langword="null" /> se um valor HRESULT não representar um código de erro (por exemplo, <see langword="S_OK" /> ou <see langword="S_FALSE" />).</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionPointers">
      <summary>Recupera uma descrição independente de computador de uma exceção e as informações sobre o estado que existia para o thread quando ocorreu a exceção.</summary>
      <returns>Um ponteiro para uma estrutura EXCEPTION_POINTERS.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)">
      <summary>Converte um delegado em um ponteiro de função que pode ser chamado do código não gerenciado.</summary>
      <param name="d">O delegado a ser passado para código não gerenciado.</param>
      <returns>Um valor que pode ser passado para código não gerenciado, que, por sua vez, pode ser usado para chamar o delegado subjacente gerenciado.</returns>
      <exception cref="T:System.ArgumentException">O parâmetro <paramref name="d" /> é uma definição de tipo genérico.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="d" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)">
      <summary>[Suporte somente no .NET Framework 4.5.1 e versões posteriores]  
 Converte um delegado de um tipo especificado em um ponteiro de função que pode ser chamado do código não gerenciado.</summary>
      <param name="d">O delegado a ser passado para código não gerenciado.</param>
      <typeparam name="TDelegate">O tipo de delegado para converter.</typeparam>
      <returns>Um valor que pode ser passado para código não gerenciado, que, por sua vez, pode ser usado para chamar o delegado subjacente gerenciado.</returns>
      <exception cref="T:System.ArgumentException">O parâmetro <paramref name="d" /> é uma definição de tipo genérico.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="d" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)">
      <summary>Retorna o identificador de instância (HINSTANCE) do módulo especificado.</summary>
      <param name="m">O módulo cujo HINSTANCE é desejado.</param>
      <returns>O HINSTANCE de <paramref name="m" />; ou -1 se o módulo não tiver um HINSTANCE.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="m" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)">
      <summary>Converte a exceção especificada para um HRESULT.</summary>
      <param name="e">A exceção que será convertida em um HRESULT.</param>
      <returns>O HRESULT mapeado para a exceção fornecida.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error">
      <summary>Retorna o HRESULT que corresponde ao último erro incorrido pelo código Win32 executado usando <see cref="T:System.Runtime.InteropServices.Marshal" />.</summary>
      <returns>O HRESULT que corresponde ao último código de erro Win32.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)">
      <summary>Retorna uma interface IDispatch de um objeto gerenciado.</summary>
      <param name="o">O objeto cuja interface <see langword="IDispatch" /> é solicitada.</param>
      <returns>O ponteiro <see langword="IDispatch" /> para o parâmetro <paramref name="o" />.</returns>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> não dá suporte à interface solicitada.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)">
      <summary>Retorna uma interface IUnknown de um objeto gerenciado.</summary>
      <param name="o">O objeto cuja interface <see langword="IUnknown" /> é solicitada.</param>
      <returns>O ponteiro <see langword="IUnknown" /> para o parâmetro <paramref name="o" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error">
      <summary>Retorna o código de erro retornado pela última função não gerenciada chamada com a invocação da plataforma que tem o sinalizador <see cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" /> definido.</summary>
      <returns>O último código de erro definido por uma chamada para a função SetLastError do Win32.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)">
      <summary>Converte um objeto em um COM VARIANT.</summary>
      <param name="obj">O objeto para o qual obter um COM VARIANT.</param>
      <param name="pDstNativeVariant">Um ponteiro que receberá o VARIANT que corresponde ao parâmetro <paramref name="obj" />.</param>
      <exception cref="T:System.ArgumentException">O parâmetro <paramref name="obj" /> é uma instância de um tipo genérico.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)">
      <summary>[Suporte somente no .NET Framework 4.5.1 e versões posteriores]  
 Converte um objeto de um tipo especificado em uma VARIANTE do COM.</summary>
      <param name="obj">O objeto para o qual obter um COM VARIANT.</param>
      <param name="pDstNativeVariant">Um ponteiro que receberá o VARIANT que corresponde ao parâmetro <paramref name="obj" />.</param>
      <typeparam name="T">O tipo do objeto a ser convertido.</typeparam>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)">
      <summary>Retorna uma instância de um tipo que representa um objeto COM de um ponteiro para sua interface IUnknown.</summary>
      <param name="pUnk">Um ponteiro para a interface <see langword="IUnknown" />.</param>
      <returns>Um objeto que representa o objeto COM não gerenciado especificado.</returns>
      <exception cref="">
        <paramref name="pUnk" /> é <see cref="F:System.IntPtr.Zero" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)">
      <summary>Converte um COM VARIANT em um objeto.</summary>
      <param name="pSrcNativeVariant">Um ponteiro para um COM VARIANT.</param>
      <returns>Um objeto que corresponde ao parâmetro <paramref name="pSrcNativeVariant" />.</returns>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
        <paramref name="pSrcNativeVariant" /> não é um tipo VARIANT válido.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pSrcNativeVariant" /> tem um tipo sem suporte.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)">
      <summary>[Suporte somente no .NET Framework 4.5.1 e versões posteriores]  
 Converte uma VARIANTE do COM em um objeto de um tipo especificado.</summary>
      <param name="pSrcNativeVariant">Um ponteiro para um COM VARIANT.</param>
      <typeparam name="T">O tipo para o qual converter a variante COM.</typeparam>
      <returns>Um objeto do tipo especificado que corresponde ao parâmetro <paramref name="pSrcNativeVariant" />.</returns>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
        <paramref name="pSrcNativeVariant" /> não é um tipo VARIANT válido.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pSrcNativeVariant" /> tem um tipo sem suporte.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)">
      <summary>Converte uma matriz de VARIANTEs do COM em uma matriz de objetos.</summary>
      <param name="aSrcNativeVariant">Um ponteiro para o primeiro elemento de uma matriz de VARIANTES do COM.</param>
      <param name="cVars">A contagem de VARIANTES COM em <paramref name="aSrcNativeVariant" />.</param>
      <returns>Uma matriz de objetos que corresponde a <paramref name="aSrcNativeVariant" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cVars" /> é um número negativo.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)">
      <summary>[Suporte somente no .NET Framework 4.5.1 e versões posteriores]  
 Converte uma matriz de VARIANTEs do COM em uma matriz de um tipo especificado.</summary>
      <param name="aSrcNativeVariant">Um ponteiro para o primeiro elemento de uma matriz de VARIANTES do COM.</param>
      <param name="cVars">A contagem de VARIANTES COM em <paramref name="aSrcNativeVariant" />.</param>
      <typeparam name="T">O tipo da matriz a ser retornada.</typeparam>
      <returns>Uma matriz de objetos <typeparamref name="T" /> que corresponde a <paramref name="aSrcNativeVariant" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cVars" /> é um número negativo.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)">
      <summary>Obtém o primeiro slot na tabela de função virtual (v-table ou VTBL) que contém os métodos definidos pelo usuário.</summary>
      <param name="t">Um tipo que representa uma interface ou uma classe.</param>
      <returns>O primeiro slot VTBL que contém os métodos definidos pelo usuário. O primeiro slot será 3 se a interface for baseada em IUnknown e 7, se a interface for baseada em IDispatch.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> não é visível do COM.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)">
      <summary>Retorna um objeto gerenciado de um tipo especificado que representa um objeto COM.</summary>
      <param name="pUnk">Um ponteiro para a interface <see langword="IUnknown" /> do objeto não gerenciado.</param>
      <param name="t">O tipo da classe gerenciada solicitada.</param>
      <returns>Uma instância da classe correspondente ao objeto <see cref="T:System.Type" /> que representa o objeto COM não gerenciado solicitado.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> não está atribuído com <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />.  

ou - 
<paramref name="t" /> é um tipo Tempo de Execução do Windows.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)">
      <summary>Retorna o tipo associado ao CLSID (identificador de classe) especificado.</summary>
      <param name="clsid">O CLSID do tipo a ser retornado.</param>
      <returns>
        <see langword="System.__ComObject" /> independentemente do CLSID ser válido.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)">
      <summary>Recupera o nome do tipo representado por um objeto ITypeInfo.</summary>
      <param name="typeInfo">Um objeto que representa um ponteiro <see langword="ITypeInfo" />.</param>
      <returns>O nome do tipo para o qual o parâmetro <paramref name="typeInfo" /> aponta.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="typeInfo" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)">
      <summary>Cria um único objeto RCW (Runtime Callable Wrapper) para uma determinada interface IUnknown.</summary>
      <param name="unknown">Um ponteiro gerenciado para uma interface <see langword="IUnknown" />.</param>
      <returns>Um RCW exclusivo para a interface <see langword="IUnknown" /> especificada.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsComObject(System.Object)">
      <summary>Indica se um objeto especificado representa um objeto COM.</summary>
      <param name="o">O objeto a ser verificado.</param>
      <returns>
        <see langword="true" /> se o parâmetro <paramref name="o" /> for um tipo COM; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom(System.Type)">
      <summary>Indica se um tipo é visível para clientes do COM.</summary>
      <param name="t">O tipo para verificar se há visibilidade do COM.</param>
      <returns>
        <see langword="true" /> se o tipo for visível para COM; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)">
      <summary>Retorna o deslocamento de campo do formulário não gerenciado da classe gerenciada.</summary>
      <param name="t">Um tipo de valor ou tipo de referência formatada que especifica a classe gerenciada. Você deve aplicar o <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> à classe.</param>
      <param name="fieldName">O campo dentro do parâmetro <paramref name="t" />.</param>
      <returns>O deslocamento, em bytes, para o parâmetro <paramref name="fieldName" /> dentro da classe especificada que é declarado pela invocação de plataforma.</returns>
      <exception cref="T:System.ArgumentException">A classe não pode ser exportada, visto que uma estrutura ou o campo é confidencial. A partir do .NET Framework versão 2.0, o campo pode ser privado.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="t" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)">
      <summary>[Suporte somente no .NET Framework 4.5.1 e versões posteriores]  
 Retorna o deslocamento de campo do formulário não gerenciado de uma classe gerenciada especificada.</summary>
      <param name="fieldName">O nome do campo no tipo <paramref name="T" />.</param>
      <typeparam name="T">Um tipo de valor gerenciado ou tipo de referência formatado. Você deve aplicar o <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> atributo à classe.</typeparam>
      <returns>O deslocamento, em bytes, para o parâmetro <paramref name="fieldName" /> dentro da classe especificada que é declarado pela invocação de plataforma.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)">
      <summary>Executa tarefas de configuração de método de uso único sem chamar o método.</summary>
      <param name="m">O método a ser verificado.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="m" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">O parâmetro <paramref name="m" /> não é um objeto <see cref="T:System.Reflection.MethodInfo" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)">
      <summary>Executa uma verificação de pré-vínculo para todos os métodos em uma classe.</summary>
      <param name="c">A classe cujos métodos devem ser verificados.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="c" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)">
      <summary>Copia todos os caracteres até o primeiro caractere nulo de uma cadeia de caracteres ANSI não gerenciada para um <see cref="T:System.String" /> gerenciado e amplia cada caractere ANSI para Unicode.</summary>
      <param name="ptr">O endereço do primeiro caractere da cadeia de caracteres não gerenciada.</param>
      <returns>Uma cadeia de caracteres gerenciada que mantém uma cópia da cadeia de caracteres ANSI não gerenciada. Se <paramref name="ptr" /> for <see langword="null" />, o método retornará uma cadeia de caracteres nula.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)">
      <summary>Aloca um <see cref="T:System.String" /> gerenciado, copia um número especificado de caracteres de uma cadeia de caracteres ANSI não gerenciada para ele e amplia cada caractere ANSI para Unicode.</summary>
      <param name="ptr">O endereço do primeiro caractere da cadeia de caracteres não gerenciada.</param>
      <param name="len">O número de bytes da cadeia de caracteres de entrada a ser copiado.</param>
      <returns>Uma cadeia de caracteres gerenciada que mantém uma cópia da cadeia de caracteres ANSI nativa se o valor do parâmetro <paramref name="ptr" /> não for <see langword="null" />; caso contrário, esse método retornará <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="len" /> é menor que zero.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr)">
      <summary>Aloca um <see cref="T:System.String" /> gerenciado e copia todos os caracteres até o primeiro caractere nulo de uma cadeia de caracteres armazenada na memória não gerenciada para ele.</summary>
      <param name="ptr">Para plataformas Unicode, o endereço do primeiro caractere Unicode.  

ou -  

 Para plataformas ANSI, o endereço do primeiro caractere ANSI.</param>
      <returns>Uma cadeia de caracteres gerenciada que mantém uma cópia da cadeia de caracteres não gerenciada, se o valor do <paramref name="ptr" /> parâmetro não é <see langword="null" />; caso contrário, esse método retornará <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)">
      <summary>Aloca um <see cref="T:System.String" /> gerenciado e copia para ele o número especificado de caracteres de uma cadeia de caracteres armazenada na memória não gerenciada.</summary>
      <param name="ptr">Para plataformas Unicode, o endereço do primeiro caractere Unicode.  

ou -  

 Para plataformas ANSI, o endereço do primeiro caractere ANSI.</param>
      <param name="len">O número de caracteres a serem copiados.</param>
      <returns>Uma cadeia de caracteres gerenciada que mantém uma cópia da cadeia de caracteres nativa se o valor do parâmetro <paramref name="ptr" /> não for <see langword="null" />; caso contrário, esse método retornará <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="len" /> é menor que zero.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)">
      <summary>Aloca um <see cref="T:System.String" /> gerenciado e copia para ele uma BSTR (cadeia de caracteres binária) armazenada na memória não gerenciada.</summary>
      <param name="ptr">O endereço do primeiro caractere da cadeia de caracteres não gerenciada.</param>
      <returns>Uma cadeia de caracteres gerenciada que contém uma cópia da cadeia de caracteres não gerenciada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ptr" /> é igual a <see cref="F:System.IntPtr.Zero" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)">
      <summary>Aloca uma <see cref="T:System.String" /> gerenciada e copia para ela todos os caracteres até o primeiro caractere nulo de uma cadeia de caracteres Unicode não gerenciada.</summary>
      <param name="ptr">O endereço do primeiro caractere da cadeia de caracteres não gerenciada.</param>
      <returns>Uma cadeia de caracteres gerenciada que mantém uma cópia da cadeia de caracteres não gerenciada, se o valor do <paramref name="ptr" /> parâmetro não é <see langword="null" />; caso contrário, esse método retornará <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)">
      <summary>Aloca uma <see cref="T:System.String" /> gerenciada e copia nela um número especificado de caracteres de uma cadeia de caracteres Unicode não gerenciada.</summary>
      <param name="ptr">O endereço do primeiro caractere da cadeia de caracteres não gerenciada.</param>
      <param name="len">O número de caracteres Unicode a ser copiado.</param>
      <returns>Uma cadeia de caracteres gerenciada que mantém uma cópia da cadeia de caracteres não gerenciada, se o valor do <paramref name="ptr" /> parâmetro não é <see langword="null" />; caso contrário, esse método retornará <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)">
      <param name="ptr" />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)">
      <param name="ptr" />
      <param name="byteLen" />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)">
      <summary>Realizar o marshaling de dados de um bloco de memória não gerenciado para um objeto gerenciado.</summary>
      <param name="ptr">Um ponteiro para um bloco não gerenciado de memória.</param>
      <param name="structure">O objeto para o qual os dados serão copiados. Isso deve ser uma instância de uma classe formatada.</param>
      <exception cref="T:System.ArgumentException">O layout da estrutura não é sequencial nem explícito.  

ou -  

 Estrutura é um tipo de valor demarcado.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)">
      <summary>Realiza marshal de dados de um bloco não gerenciado de memória para um objeto gerenciado recém-alocado do tipo especificado.</summary>
      <param name="ptr">Um ponteiro para um bloco não gerenciado de memória.</param>
      <param name="structureType">O tipo de objeto a ser criado. Esse objeto deve representar uma classe ou estrutura formatada.</param>
      <returns>Um objeto gerenciado que contém os dados apontados pelo parâmetro <paramref name="ptr" />.</returns>
      <exception cref="T:System.ArgumentException">O layout do parâmetro <paramref name="structureType" /> não é sequencial ou explícito.  

ou - 
O parâmetro <paramref name="structureType" /> é uma definição de tipo genérico.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="structureType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.MissingMethodException">A classe especificada por <paramref name="structureType" /> não tem um construtor sem parâmetros acessível.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)">
      <summary>[Suporte somente no .NET Framework 4.5.1 e versões posteriores]  
 Realiza marshaling de dados de um bloco não gerenciado de memória para um objeto gerenciado recém-alocado do tipo especificado por um parâmetro de tipo genérico.</summary>
      <param name="ptr">Um ponteiro para um bloco não gerenciado de memória.</param>
      <typeparam name="T">O tipo do objeto para o qual os dados serão copiados. Isso deve ser uma classe formatada ou uma estrutura.</typeparam>
      <returns>Um objeto gerenciado que contém os dados que o parâmetro <paramref name="ptr" /> aponta.</returns>
      <exception cref="T:System.ArgumentException">O layout do <typeparamref name="T" /> não é sequencial nem explícito.</exception>
      <exception cref="T:System.MissingMethodException">A classe especificada por <typeparamref name="T" /> não tem um construtor sem parâmetros acessível.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)">
      <summary>[Suporte somente no .NET Framework 4.5.1 e versões posteriores]  
 Realiza marshaling de dados de um bloco não gerenciado de memória para um objeto gerenciado do tipo especificado.</summary>
      <param name="ptr">Um ponteiro para um bloco não gerenciado de memória.</param>
      <param name="structure">O objeto para o qual os dados serão copiados.</param>
      <typeparam name="T">O tipo de <paramref name="structure" />. Isso deve ser uma classe formatada.</typeparam>
      <exception cref="T:System.ArgumentException">O layout da estrutura não é sequencial nem explícito.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)">
      <summary>Solicita um ponteiro para uma interface especificada de um objeto COM.</summary>
      <param name="pUnk">A interface a ser consultada.</param>
      <param name="iid">O IID (identificador de interface) da interface solicitada.</param>
      <param name="ppv">Quando este método retorna, ele contém uma referência à interface retornada.</param>
      <returns>Um HRESULT que indica o êxito ou falha da chamada.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)">
      <summary>Lê um único byte da memória não gerenciada.</summary>
      <param name="ptr">O endereço na memória não gerenciada do qual ler.</param>
      <returns>O byte lido da memória não gerenciada.</returns>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> não é um formato reconhecido.  

ou - 
<paramref name="ptr" /> é <see langword="null" />.  

ou - 
<paramref name="ptr" /> é inválido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)">
      <summary>Lê um único byte em um determinado deslocamento (ou índice) de memória não gerenciada.</summary>
      <param name="ptr">O endereço básico na memória não gerenciada no qual a leitura será realizada.</param>
      <param name="ofs">Um deslocamento de byte adicional, adicionado ao parâmetro <paramref name="ptr" /> antes de ler.</param>
      <returns>O byte lido da memória não gerenciada em um determinado deslocamento.</returns>
      <exception cref="T:System.AccessViolationException">O endereço básico (<paramref name="ptr" />) e o deslocamento de byte (<paramref name="ofs" />) produz um endereço nulo ou inválido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)">
      <summary>Lê um único byte em um determinado deslocamento (ou índice) de memória não gerenciada.</summary>
      <param name="ptr">O endereço básico em memória não gerenciada do objeto de origem.</param>
      <param name="ofs">Um deslocamento de byte adicional, adicionado ao parâmetro <paramref name="ptr" /> antes de ler.</param>
      <returns>O byte lido da memória não gerenciada em um determinado deslocamento.</returns>
      <exception cref="T:System.AccessViolationException">O endereço básico (<paramref name="ptr" />) e o deslocamento de byte (<paramref name="ofs" />) produz um endereço nulo ou inválido.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> é um objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Esse método não aceita parâmetros <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)">
      <summary>Lê um inteiro com sinal de 16 bits da memória não gerenciada.</summary>
      <param name="ptr">O endereço na memória não gerenciada do qual ler.</param>
      <returns>O inteiro com sinal de 16 bits da memória não gerenciada.</returns>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> não é um formato reconhecido.  

ou - 
<paramref name="ptr" /> é <see langword="null" />.  

ou - 
<paramref name="ptr" /> é inválido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)">
      <summary>Lê um inteiro com sinal de 16 bits em um determinado deslocamento da memória não gerenciada.</summary>
      <param name="ptr">O endereço básico na memória não gerenciada no qual a leitura será realizada.</param>
      <param name="ofs">Um deslocamento de byte adicional, adicionado ao parâmetro <paramref name="ptr" /> antes de ler.</param>
      <returns>O inteiro com sinal de 16 bits lido da memória não gerenciada no deslocamento especificado.</returns>
      <exception cref="T:System.AccessViolationException">O endereço básico (<paramref name="ptr" />) e o deslocamento de byte (<paramref name="ofs" />) produz um endereço nulo ou inválido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)">
      <summary>Lê um inteiro com sinal de 16 bits em um determinado deslocamento da memória não gerenciada.</summary>
      <param name="ptr">O endereço básico em memória não gerenciada do objeto de origem.</param>
      <param name="ofs">Um deslocamento de byte adicional, adicionado ao parâmetro <paramref name="ptr" /> antes de ler.</param>
      <returns>O inteiro com sinal de 16 bits lido da memória não gerenciada no deslocamento especificado.</returns>
      <exception cref="T:System.AccessViolationException">O endereço básico (<paramref name="ptr" />) e o deslocamento de byte (<paramref name="ofs" />) produz um endereço nulo ou inválido.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> é um objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Esse método não aceita parâmetros <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)">
      <summary>Lê um inteiro com sinal de 32 bits da memória não gerenciada.</summary>
      <param name="ptr">O endereço na memória não gerenciada do qual ler.</param>
      <returns>O inteiro com sinal de 32 bits da memória não gerenciada.</returns>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> não é um formato reconhecido.  

ou - 
<paramref name="ptr" /> é <see langword="null" />.  

ou - 
<paramref name="ptr" /> é inválido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)">
      <summary>Lê um inteiro com sinal de 32 bits em um deslocamento fornecido na memória não gerenciada.</summary>
      <param name="ptr">O endereço básico na memória não gerenciada no qual a leitura será realizada.</param>
      <param name="ofs">Um deslocamento de byte adicional, adicionado ao parâmetro <paramref name="ptr" /> antes de ler.</param>
      <returns>O inteiro com sinal de 32 bits da memória não gerenciada.</returns>
      <exception cref="T:System.AccessViolationException">O endereço básico (<paramref name="ptr" />) e o deslocamento de byte (<paramref name="ofs" />) produz um endereço nulo ou inválido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)">
      <summary>Lê um inteiro com sinal de 32 bits em um deslocamento fornecido na memória não gerenciada.</summary>
      <param name="ptr">O endereço básico em memória não gerenciada do objeto de origem.</param>
      <param name="ofs">Um deslocamento de byte adicional, adicionado ao parâmetro <paramref name="ptr" /> antes de ler.</param>
      <returns>O inteiro com sinal de 32 bits lido da memória não gerenciada no deslocamento especificado.</returns>
      <exception cref="T:System.AccessViolationException">O endereço básico (<paramref name="ptr" />) e o deslocamento de byte (<paramref name="ofs" />) produz um endereço nulo ou inválido.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> é um objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Esse método não aceita parâmetros <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)">
      <summary>Lê um inteiro com sinal de 64 bits da memória não gerenciada.</summary>
      <param name="ptr">O endereço na memória não gerenciada do qual ler.</param>
      <returns>O inteiro com sinal de 64 bits da memória não gerenciada.</returns>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> não é um formato reconhecido.  

ou - 
<paramref name="ptr" /> é <see langword="null" />.  

ou - 
<paramref name="ptr" /> é inválido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)">
      <summary>Lê um inteiro com sinal de 64 bits em um determinado deslocamento da memória não gerenciada.</summary>
      <param name="ptr">O endereço básico na memória não gerenciada no qual a leitura será realizada.</param>
      <param name="ofs">Um deslocamento de byte adicional, adicionado ao parâmetro <paramref name="ptr" /> antes de ler.</param>
      <returns>O inteiro com sinal de 64 bits lido da memória não gerenciada no deslocamento especificado.</returns>
      <exception cref="T:System.AccessViolationException">O endereço básico (<paramref name="ptr" />) e o deslocamento de byte (<paramref name="ofs" />) produz um endereço nulo ou inválido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)">
      <summary>Lê um inteiro com sinal de 64 bits em um determinado deslocamento da memória não gerenciada.</summary>
      <param name="ptr">O endereço básico em memória não gerenciada do objeto de origem.</param>
      <param name="ofs">Um deslocamento de byte adicional, adicionado ao parâmetro <paramref name="ptr" /> antes de ler.</param>
      <returns>O inteiro com sinal de 64 bits lido da memória não gerenciada no deslocamento especificado.</returns>
      <exception cref="T:System.AccessViolationException">O endereço básico (<paramref name="ptr" />) e o deslocamento de byte (<paramref name="ofs" />) produz um endereço nulo ou inválido.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> é um objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Esse método não aceita parâmetros <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)">
      <summary>Lê um inteiro de tamanho nativo de processador da memória não gerenciada.</summary>
      <param name="ptr">O endereço na memória não gerenciada do qual ler.</param>
      <returns>O inteiro lido da memória não gerenciada. Um inteiro de 32 bits é retornado em computadores de 32 bits e um inteiro de 64 bits é retornado em computadores de 64 bits.</returns>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> não é um formato reconhecido.  

ou - 
<paramref name="ptr" /> é <see langword="null" />.  

ou - 
<paramref name="ptr" /> é inválido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)">
      <summary>Lê um inteiro de tamanho nativo de processador em um determinado deslocamento da memória não gerenciada.</summary>
      <param name="ptr">O endereço básico na memória não gerenciada no qual a leitura será realizada.</param>
      <param name="ofs">Um deslocamento de byte adicional, adicionado ao parâmetro <paramref name="ptr" /> antes de ler.</param>
      <returns>O inteiro lido da memória não gerenciada no deslocamento especificado.</returns>
      <exception cref="T:System.AccessViolationException">O endereço básico (<paramref name="ptr" />) e o deslocamento de byte (<paramref name="ofs" />) produz um endereço nulo ou inválido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)">
      <summary>Lê um inteiro dimensionado nativo do processador da memória não gerenciada.</summary>
      <param name="ptr">O endereço básico em memória não gerenciada do objeto de origem.</param>
      <param name="ofs">Um deslocamento de byte adicional, adicionado ao parâmetro <paramref name="ptr" /> antes de ler.</param>
      <returns>O inteiro lido da memória não gerenciada no deslocamento especificado.</returns>
      <exception cref="T:System.AccessViolationException">O endereço básico (<paramref name="ptr" />) e o deslocamento de byte (<paramref name="ofs" />) produz um endereço nulo ou inválido.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> é um objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Esse método não aceita parâmetros <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)">
      <summary>Redimensiona um bloco de memória alocado anteriormente com <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />.</summary>
      <param name="pv">Um ponteiro para a memória alocada com <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />.</param>
      <param name="cb">O novo tamanho do bloco alocado.</param>
      <returns>Um inteiro que representa o endereço do bloco de memória realocado. Essa memória deve ser liberada com <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />.</returns>
      <exception cref="T:System.OutOfMemoryException">Não há memória suficiente para atender à solicitação.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)">
      <summary>Redimensiona um bloco de memória alocado anteriormente com <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />.</summary>
      <param name="pv">Um ponteiro para a memória alocada com <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />.</param>
      <param name="cb">O novo tamanho do bloco alocado. Este não é um ponteiro; é a contagem de bytes que você está solicitando, convertido para tipo <see cref="T:System.IntPtr" />. Se você transmitir um ponteiro, ele será tratado como um tamanho.</param>
      <returns>Um ponteiro para a memória realocada. Essa memória deve ser liberada usando <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />.</returns>
      <exception cref="T:System.OutOfMemoryException">Não há memória suficiente para atender à solicitação.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)">
      <summary>Diminui a contagem de referência na interface especificada.</summary>
      <param name="pUnk">A interface a ser liberada.</param>
      <returns>O novo valor da contagem de referência na interface especificada pelo parâmetro <paramref name="pUnk" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)">
      <summary>Diminui a contagem de referência do RCW (Runtime Callable Wrapper) associado ao objeto COM especificado.</summary>
      <param name="o">O objeto COM a ser liberado.</param>
      <returns>O novo valor da contagem de referência do RCW associado ao <paramref name="o" />. Normalmente, esse valor é zero, pois o RCW mantém apenas uma referência ao objeto COM encapsulado, independentemente do número de clientes gerenciados que estejam chamando-o.</returns>
      <exception cref="T:System.ArgumentException">O <paramref name="o" /> não é um objeto COM válido.</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="o" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)">
      <summary>Aloca uma BSTR (cadeia de caracteres binária) não gerenciada copia os conteúdos de um objeto <see cref="T:System.Security.SecureString" /> gerenciado para ela.</summary>
      <param name="s">O objeto gerenciado a se copiar.</param>
      <returns>O endereço, na memória não gerenciada, para o qual o parâmetro <paramref name="s" /> foi copiado ou 0 se um objeto nulo foi fornecido.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="s" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">O computador atual não está executando o Windows 2000 Service Pack 3 ou posterior.</exception>
      <exception cref="T:System.OutOfMemoryException">Memória insuficiente.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary>Copia o conteúdo de um objeto <see cref="T:System.Security.SecureString" /> gerenciado para um bloco de memória alocado do alocador de tarefas COM não gerenciado.</summary>
      <param name="s">O objeto gerenciado a se copiar.</param>
      <returns>O endereço, na memória não gerenciada, para o qual o parâmetro <paramref name="s" /> foi copiado ou 0 se um objeto nulo foi fornecido.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="s" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">O computador atual não está executando o Windows 2000 Service Pack 3 ou posterior.</exception>
      <exception cref="T:System.OutOfMemoryException">Memória insuficiente.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary>Copia o conteúdo de um objeto <see cref="T:System.Security.SecureString" /> gerenciado para um bloco de memória alocado do alocador de tarefas COM não gerenciado.</summary>
      <param name="s">O objeto gerenciado a se copiar.</param>
      <returns>O endereço, na memória não gerenciada, para o qual o parâmetro <paramref name="s" /> foi copiado ou 0 se um objeto nulo foi fornecido.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="s" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">O computador atual não está executando o Windows 2000 Service Pack 3 ou posterior.</exception>
      <exception cref="T:System.OutOfMemoryException">Memória insuficiente.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary>Copia o conteúdo de um <see cref="T:System.Security.SecureString" /> gerenciado para a memória não gerenciada, convertendo em formato ANSI durante a cópia.</summary>
      <param name="s">O objeto gerenciado a se copiar.</param>
      <returns>O endereço, na memória não gerenciada, para o qual o parâmetro <paramref name="s" /> foi copiado ou 0 se um objeto nulo foi fornecido.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="s" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">O computador atual não está executando o Windows 2000 Service Pack 3 ou posterior.</exception>
      <exception cref="T:System.OutOfMemoryException">Memória insuficiente.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary>Copia o conteúdo de um objeto <see cref="T:System.Security.SecureString" /> gerenciado para uma memória não gerenciada.</summary>
      <param name="s">O objeto gerenciado a se copiar.</param>
      <returns>O endereço, na memória não gerenciada, para o qual <paramref name="s" /> foi copiado ou 0, se <paramref name="s" /> for um objeto <see cref="T:System.Security.SecureString" /> cujo tamanho é 0.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="s" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">O computador atual não está executando o Windows 2000 Service Pack 3 ou posterior.</exception>
      <exception cref="T:System.OutOfMemoryException">Memória insuficiente.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)">
      <summary>Define os dados referenciados pela chave especificada no objeto COM especificado.</summary>
      <param name="obj">O objeto COM no qual armazenar os dados.</param>
      <param name="key">A chave na tabela de hash interna do objeto COM na qual armazenar os dados.</param>
      <param name="data">Os dados a serem definidos.</param>
      <returns>
        <see langword="true" /> se os dados tiverem sido definidos com êxito; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> é <see langword="null" />.  

ou - 
<paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> não é um objeto COM.  

ou - 
<paramref name="obj" /> é um objeto Tempo de Execução do Windows.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)">
      <summary>Retorna o tamanho não gerenciado de um objeto em bytes.</summary>
      <param name="structure">O objeto cujo tamanho deve ser retornado.</param>
      <returns>O tamanho do objeto especificado em código não gerenciado.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="structure" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)">
      <summary>Retorna o tamanho de um tipo não gerenciado em bytes.</summary>
      <param name="t">O tipo cujo tamanho deve ser retornado.</param>
      <returns>O tamanho do tipo especificado no código não gerenciado.</returns>
      <exception cref="T:System.ArgumentException">O parâmetro <paramref name="t" /> é uma definição de tipo genérico.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="t" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1">
      <summary>[Suporte somente no .NET Framework 4.5.1 e versões posteriores]  
 Retorna o tamanho de um tipo não gerenciado em bytes.</summary>
      <typeparam name="T">O tipo cujo tamanho deve ser retornado.</typeparam>
      <returns>O tamanho, em bytes, do tipo especificado pelo parâmetro de tipo genérico <typeparamref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1(``0)">
      <summary>[Suporte somente no .NET Framework 4.5.1 e versões posteriores]  
 Retorna o tamanho não gerenciado de um objeto de um tipo especificado em bytes.</summary>
      <param name="structure">O objeto cujo tamanho deve ser retornado.</param>
      <typeparam name="T">O tipo do parâmetro <paramref name="structure" />.</typeparam>
      <returns>O tamanho, em bytes, do objeto especificado em código não gerenciado.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="structure" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)">
      <summary>Aloca um BSTR e copia o conteúdo de um <see cref="T:System.String" /> gerenciado para ele.</summary>
      <param name="s">A cadeia de caracteres gerenciada a ser copiada.</param>
      <returns>Um ponteiro não gerenciado para o <see langword="BSTR" /> ou 0, se <paramref name="s" /> for nulo.</returns>
      <exception cref="T:System.OutOfMemoryException">Memória insuficiente.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O tamanho de <paramref name="s" /> está fora do intervalo.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)">
      <summary>Copia o conteúdo de um <see cref="T:System.String" /> gerenciado para um bloco de memória alocado do alocador de tarefas COM não gerenciado.</summary>
      <param name="s">Uma cadeia de caracteres gerenciada a ser copiada.</param>
      <returns>Um inteiro que representa um ponteiro para o bloco de memória alocado na cadeia de caracteres ou 0, se <paramref name="s" /> for <see langword="null" />.</returns>
      <exception cref="T:System.OutOfMemoryException">Memória insuficiente.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="s" /> excede o tamanho máximo permitido pelo sistema operacional.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)">
      <summary>Copia o conteúdo de um <see cref="T:System.String" /> gerenciado para um bloco de memória alocado do alocador de tarefas COM não gerenciado.</summary>
      <param name="s">Uma cadeia de caracteres gerenciada a ser copiada.</param>
      <returns>O bloco de memória alocada ou 0, se <paramref name="s" /> for <see langword="null" />.</returns>
      <exception cref="T:System.OutOfMemoryException">Memória insuficiente.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O tamanho de <paramref name="s" /> está fora do intervalo.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)">
      <summary>Copia o conteúdo de um <see cref="T:System.String" /> gerenciado para um bloco de memória alocado do alocador de tarefas COM não gerenciado.</summary>
      <param name="s">Uma cadeia de caracteres gerenciada a ser copiada.</param>
      <returns>Um inteiro que representa um ponteiro para o bloco de memória alocado na cadeia de caracteres ou 0, se s for <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="s" /> excede o tamanho máximo permitido pelo sistema operacional.</exception>
      <exception cref="T:System.OutOfMemoryException">Memória insuficiente.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)">
      <param name="s" />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)">
      <summary>Copia o conteúdo de um <see cref="T:System.String" /> gerenciado para a memória não gerenciada, convertendo em formato ANSI durante a cópia.</summary>
      <param name="s">Uma cadeia de caracteres gerenciada a ser copiada.</param>
      <returns>O endereço, na memória não gerenciada, para o qual <paramref name="s" /> foi copiado ou 0 se <paramref name="s" /> for <see langword="null" />.</returns>
      <exception cref="T:System.OutOfMemoryException">Memória insuficiente.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="s" /> excede o tamanho máximo permitido pelo sistema operacional.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)">
      <summary>Copia o conteúdo de um <see cref="T:System.String" /> gerenciado para a memória não gerenciada, convertendo para formato ANSI, se necessário.</summary>
      <param name="s">Uma cadeia de caracteres gerenciada a ser copiada.</param>
      <returns>O endereço, na memória não gerenciada, para o qual a cadeia de caracteres foi copiada ou 0, se <paramref name="s" /> for <see langword="null" />.</returns>
      <exception cref="T:System.OutOfMemoryException">Memória insuficiente.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)">
      <summary>Copia o conteúdo de um <see cref="T:System.String" /> gerenciado para uma memória não gerenciada.</summary>
      <param name="s">Uma cadeia de caracteres gerenciada a ser copiada.</param>
      <returns>O endereço, na memória não gerenciada, para o qual <paramref name="s" /> foi copiado ou 0 se <paramref name="s" /> for <see langword="null" />.</returns>
      <exception cref="T:System.OutOfMemoryException">Não foi possível para o método alocar memória suficiente de heap nativo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="s" /> excede o tamanho máximo permitido pelo sistema operacional.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)">
      <summary>Realizar o marshaling de dados de um objeto gerenciado para um bloco não gerenciado de memória.</summary>
      <param name="structure">Um objeto gerenciado que mantém os dados que terão o marshaling realizado. Este objeto deve ser uma estrutura ou uma instância de uma classe formatada.</param>
      <param name="ptr">Um ponteiro para um bloco não gerenciado de memória, que deve ser alocado antes que este método seja chamado.</param>
      <param name="fDeleteOld">
        <see langword="true" /> para chamar o método <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)" /> no parâmetro <paramref name="ptr" /> antes de esse método copiar os dados. O bloco deve conter dados válidos. Observe que passar <see langword="false" /> quando o bloco de memória já contém dados pode levar a um vazamento de memória.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="structure" /> é um tipo de referência que não é uma classe formatada.  

ou - 
<paramref name="structure" /> é uma instância de um tipo genérico (somente no .NET Framework 4.5 e versões anteriores).</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)">
      <summary>[Suporte somente no .NET Framework 4.5.1 e versões posteriores]  
 Realiza marshaling de dados de um objeto gerenciado de um tipo especificado para um bloco de memória não gerenciado.</summary>
      <param name="structure">Um objeto gerenciado que mantém os dados que terão o marshaling realizado. O objeto deve ser uma estrutura ou uma instância de uma classe formatada.</param>
      <param name="ptr">Um ponteiro para um bloco não gerenciado de memória, que deve ser alocado antes que este método seja chamado.</param>
      <param name="fDeleteOld">
        <see langword="true" /> para chamar o método <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)" /> no parâmetro <paramref name="ptr" /> antes de esse método copiar os dados. O bloco deve conter dados válidos. Observe que passar <see langword="false" /> quando o bloco de memória já contém dados pode levar a um vazamento de memória.</param>
      <typeparam name="T">O tipo do objeto gerenciado.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="structure" /> é um tipo de referência que não é uma classe formatada.</exception>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize">
      <summary>Representa o tamanho de caractere padrão do sistema; o padrão é 2 para sistemas Unicode e 1 para sistemas ANSI. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize">
      <summary>Representa o tamanho máximo de um tamanho DBCS (conjunto de caracteres de byte duplo), em bytes, para o sistema operacional atual. Este campo é somente leitura.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)">
      <summary>Aciona uma exceção com uma valor HRESULT de falha específico.</summary>
      <param name="errorCode">O HRESULT correspondente à exceção desejada.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)">
      <summary>Gera uma exceção com uma falha específica HRESULT com base na interface IErrorInfo.aspx) especificada.</summary>
      <param name="errorCode">O HRESULT correspondente à exceção desejada.</param>
      <param name="errorInfo">Um ponteiro para a interface IErrorInfo que fornece mais informações sobre o erro. Você pode especificar <c>IntPtr(0)</c> para usar a interface IErrorInfo atual ou <c>IntPtr(-1)</c> para ignorar a interface IErrorInfo atual e construir a exceção com base apenas no código de erro.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)">
      <summary>Obtém o endereço do elemento no índice especificado na matriz especificada.</summary>
      <param name="arr">A matriz que contém o elemento desejado.</param>
      <param name="index">O índice no parâmetro <paramref name="arr" /> do elemento desejado.</param>
      <returns>O endereço de <paramref name="index" /> dentro de <paramref name="arr" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)">
      <summary>[Suporte somente no .NET Framework 4.5.1 e versões posteriores]  
 Obtém o endereço do elemento no índice especificado em uma matriz de um tipo especificado.</summary>
      <param name="arr">A matriz que contém o elemento desejado.</param>
      <param name="index">O índice do elemento desejado na matriz <paramref name="arr" />.</param>
      <typeparam name="T">O tipo da matriz.</typeparam>
      <returns>O endereço de <paramref name="index" /> em <paramref name="arr" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)">
      <summary>Grava um valor de byte único na memória não gerenciada.</summary>
      <param name="ptr">O endereço a ser gravado na memória não gerenciada.</param>
      <param name="val">O valor a ser gravado.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> não é um formato reconhecido.  

ou - 
<paramref name="ptr" /> é <see langword="null" />.  

ou - 
<paramref name="ptr" /> é inválido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)">
      <summary>Grava um valor de byte único na memória não gerenciada em um deslocamento especificado.</summary>
      <param name="ptr">O endereço básico na memória não gerenciada no qual gravar.</param>
      <param name="ofs">Um deslocamento de byte adicional, que é adicionado para o parâmetro <paramref name="ptr" /> antes de gravar.</param>
      <param name="val">O valor a ser gravado.</param>
      <exception cref="T:System.AccessViolationException">O endereço básico (<paramref name="ptr" />) e o deslocamento de byte (<paramref name="ofs" />) produz um endereço nulo ou inválido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)">
      <summary>Grava um valor de byte único na memória não gerenciada em um deslocamento especificado.</summary>
      <param name="ptr">O endereço básico em memória não gerenciada do objeto de destino.</param>
      <param name="ofs">Um deslocamento de byte adicional, que é adicionado para o parâmetro <paramref name="ptr" /> antes de gravar.</param>
      <param name="val">O valor a ser gravado.</param>
      <exception cref="T:System.AccessViolationException">O endereço básico (<paramref name="ptr" />) e o deslocamento de byte (<paramref name="ofs" />) produz um endereço nulo ou inválido.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> é um objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Esse método não aceita parâmetros <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)">
      <summary>Grava um caractere como um valor inteiro de 16 bits na memória não gerenciada.</summary>
      <param name="ptr">O endereço a ser gravado na memória não gerenciada.</param>
      <param name="val">O valor a ser gravado.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> não é um formato reconhecido.  

ou - 
<paramref name="ptr" /> é <see langword="null" />.  

ou - 
<paramref name="ptr" /> é inválido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)">
      <summary>Grava um valor inteiro de 16 bits na memória não gerenciada.</summary>
      <param name="ptr">O endereço a ser gravado na memória não gerenciada.</param>
      <param name="val">O valor a ser gravado.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> não é um formato reconhecido.  

ou - 
<paramref name="ptr" /> é <see langword="null" />.  

ou - 
<paramref name="ptr" /> é inválido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)">
      <summary>Grava um valor inteiro com sinal de 16 bits na memória não gerenciada em um deslocamento especificado.</summary>
      <param name="ptr">O endereço básico no heap nativo no qual gravar.</param>
      <param name="ofs">Um deslocamento de byte adicional, que é adicionado para o parâmetro <paramref name="ptr" /> antes de gravar.</param>
      <param name="val">O valor a ser gravado.</param>
      <exception cref="T:System.AccessViolationException">O endereço básico (<paramref name="ptr" />) e o deslocamento de byte (<paramref name="ofs" />) produz um endereço nulo ou inválido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)">
      <summary>Grava um valor inteiro com sinal de 16 bits na memória não gerenciada em um deslocamento especificado.</summary>
      <param name="ptr">O endereço básico na memória não gerenciada no qual gravar.</param>
      <param name="ofs">Um deslocamento de byte adicional, que é adicionado para o parâmetro <paramref name="ptr" /> antes de gravar.</param>
      <param name="val">O valor a ser gravado.</param>
      <exception cref="T:System.AccessViolationException">O endereço básico (<paramref name="ptr" />) e o deslocamento de byte (<paramref name="ofs" />) produz um endereço nulo ou inválido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)">
      <summary>Grava um valor inteiro com sinal de 16 bits na memória não gerenciada em um deslocamento especificado.</summary>
      <param name="ptr">O endereço básico em memória não gerenciada do objeto de destino.</param>
      <param name="ofs">Um deslocamento de byte adicional, que é adicionado para o parâmetro <paramref name="ptr" /> antes de gravar.</param>
      <param name="val">O valor a ser gravado.</param>
      <exception cref="T:System.AccessViolationException">O endereço básico (<paramref name="ptr" />) e o deslocamento de byte (<paramref name="ofs" />) produz um endereço nulo ou inválido.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> é um objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Esse método não aceita parâmetros <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)">
      <summary>Grava um valor inteiro com sinal de 16 bits na memória não gerenciada em um deslocamento especificado.</summary>
      <param name="ptr">O endereço básico em memória não gerenciada do objeto de destino.</param>
      <param name="ofs">Um deslocamento de byte adicional, que é adicionado para o parâmetro <paramref name="ptr" /> antes de gravar.</param>
      <param name="val">O valor a ser gravado.</param>
      <exception cref="T:System.AccessViolationException">O endereço básico (<paramref name="ptr" />) e o deslocamento de byte (<paramref name="ofs" />) produz um endereço nulo ou inválido.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> é um objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Esse método não aceita parâmetros <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)">
      <summary>Grava um valor inteiro com sinal de 32 bits na memória não gerenciada.</summary>
      <param name="ptr">O endereço a ser gravado na memória não gerenciada.</param>
      <param name="val">O valor a ser gravado.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> não é um formato reconhecido.  

ou - 
<paramref name="ptr" /> é <see langword="null" />.  

ou - 
<paramref name="ptr" /> é inválido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)">
      <summary>Grava um valor inteiro com sinal de 32 bits na memória não gerenciada em um deslocamento especificado.</summary>
      <param name="ptr">O endereço básico na memória não gerenciada no qual gravar.</param>
      <param name="ofs">Um deslocamento de byte adicional, que é adicionado para o parâmetro <paramref name="ptr" /> antes de gravar.</param>
      <param name="val">O valor a ser gravado.</param>
      <exception cref="T:System.AccessViolationException">O endereço básico (<paramref name="ptr" />) e o deslocamento de byte (<paramref name="ofs" />) produz um endereço nulo ou inválido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)">
      <summary>Grava um valor inteiro com sinal de 32 bits na memória não gerenciada em um deslocamento especificado.</summary>
      <param name="ptr">O endereço básico em memória não gerenciada do objeto de destino.</param>
      <param name="ofs">Um deslocamento de byte adicional, que é adicionado para o parâmetro <paramref name="ptr" /> antes de gravar.</param>
      <param name="val">O valor a ser gravado.</param>
      <exception cref="T:System.AccessViolationException">O endereço básico (<paramref name="ptr" />) e o deslocamento de byte (<paramref name="ofs" />) produz um endereço nulo ou inválido.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> é um objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Esse método não aceita parâmetros <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)">
      <summary>Grava um valor inteiro com sinal de 64 bits na memória não gerenciada em um deslocamento especificado.</summary>
      <param name="ptr">O endereço básico na memória não gerenciada a gravar.</param>
      <param name="ofs">Um deslocamento de byte adicional, que é adicionado para o parâmetro <paramref name="ptr" /> antes de gravar.</param>
      <param name="val">O valor a ser gravado.</param>
      <exception cref="T:System.AccessViolationException">O endereço básico (<paramref name="ptr" />) e o deslocamento de byte (<paramref name="ofs" />) produz um endereço nulo ou inválido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)">
      <summary>Grava um valor inteiro com sinal de 64 bits na memória não gerenciada.</summary>
      <param name="ptr">O endereço a ser gravado na memória não gerenciada.</param>
      <param name="val">O valor a ser gravado.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> não é um formato reconhecido.  

ou - 
<paramref name="ptr" /> é <see langword="null" />.  

ou - 
<paramref name="ptr" /> é inválido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)">
      <summary>Grava um valor inteiro com sinal de 64 bits na memória não gerenciada em um deslocamento especificado.</summary>
      <param name="ptr">O endereço básico em memória não gerenciada do objeto de destino.</param>
      <param name="ofs">Um deslocamento de byte adicional, que é adicionado para o parâmetro <paramref name="ptr" /> antes de gravar.</param>
      <param name="val">O valor a ser gravado.</param>
      <exception cref="T:System.AccessViolationException">O endereço básico (<paramref name="ptr" />) e o deslocamento de byte (<paramref name="ofs" />) produz um endereço nulo ou inválido.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> é um objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Esse método não aceita parâmetros <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)">
      <summary>Grava um valor de inteiro de tamanho nativo de processador na memória não gerenciada em um deslocamento especificado.</summary>
      <param name="ptr">O endereço básico na memória não gerenciada no qual gravar.</param>
      <param name="ofs">Um deslocamento de byte adicional, que é adicionado para o parâmetro <paramref name="ptr" /> antes de gravar.</param>
      <param name="val">O valor a ser gravado.</param>
      <exception cref="T:System.AccessViolationException">O endereço básico (<paramref name="ptr" />) e o deslocamento de byte (<paramref name="ofs" />) produz um endereço nulo ou inválido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)">
      <summary>Grava um valor de inteiro de tamanho nativo de processador na memória não gerenciada.</summary>
      <param name="ptr">O endereço a ser gravado na memória não gerenciada.</param>
      <param name="val">O valor a ser gravado.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> não é um formato reconhecido.  

ou - 
<paramref name="ptr" /> é <see langword="null" />.  

ou - 
<paramref name="ptr" /> é inválido.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)">
      <summary>Grava um valor de inteiro de tamanho nativo de processador na memória não gerenciada.</summary>
      <param name="ptr">O endereço básico em memória não gerenciada do objeto de destino.</param>
      <param name="ofs">Um deslocamento de byte adicional, que é adicionado para o parâmetro <paramref name="ptr" /> antes de gravar.</param>
      <param name="val">O valor a ser gravado.</param>
      <exception cref="T:System.AccessViolationException">O endereço básico (<paramref name="ptr" />) e o deslocamento de byte (<paramref name="ofs" />) produz um endereço nulo ou inválido.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> é um objeto <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Esse método não aceita parâmetros <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)">
      <summary>Libera um ponteiro BSTR que foi alocado usando o método <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)" />.</summary>
      <param name="s">O endereço do <see langword="BSTR" /> a ser liberado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)">
      <summary>Libera um ponteiro de cadeia de caracteres não gerenciado alocado usando o método <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)" />.</summary>
      <param name="s">O endereço da cadeia de caracteres não gerenciada a liberar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)">
      <summary>Libera um ponteiro de cadeia de caracteres não gerenciado alocado usando o método <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)" />.</summary>
      <param name="s">O endereço da cadeia de caracteres não gerenciada a liberar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)">
      <param name="s" />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)">
      <summary>Libera um ponteiro de cadeia de caracteres não gerenciado alocado usando o método <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)" />.</summary>
      <param name="s">O endereço da cadeia de caracteres não gerenciada a liberar.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)">
      <summary>Libera um ponteiro de cadeia de caracteres não gerenciado alocado usando o método <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)" />.</summary>
      <param name="s">O endereço da cadeia de caracteres não gerenciada a liberar.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalAsAttribute">
      <summary>Indica como realizar marshaling de dados entre código gerenciado e não gerenciado.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Int16)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> com o valor <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> especificado.</summary>
      <param name="unmanagedType">O valor com o qual deve ser realizado o marshalling dos dados.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> com o membro de enumeração <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> especificado.</summary>
      <param name="unmanagedType">O valor com o qual deve ser realizado o marshalling dos dados.</param>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType">
      <summary>Especifica o tipo de elemento do <see cref="F:System.Runtime.InteropServices.UnmanagedType.LPArray" /> não gerenciado ou <see cref="F:System.Runtime.InteropServices.UnmanagedType.ByValArray" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex">
      <summary>Especifica o índice do parâmetro do atributo <see langword="iid_is" /> não gerenciado usado por COM.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie">
      <summary>Fornece informações adicionais para um marshaler personalizado.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType">
      <summary>Especifica o nome totalmente qualificado de um marshaler personalizado.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef">
      <summary>Implementa <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> como um tipo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType">
      <summary>Indica o tipo de elemento de <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArrayUserDefinedSubType">
      <summary>Indica o tipo de elemento definido pelo usuário do <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst">
      <summary>Indica o número de elementos na matriz de comprimento fixo ou o número de caracteres (não em bytes) em uma cadeia de caracteres a importar.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex">
      <summary>Indica o parâmetro baseado em zero que contém a contagem de elementos da matriz, semelhante a <see langword="size_is" /> em COM.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.MarshalAsAttribute.Value">
      <summary>Obtém o valor <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> como o qual deve ser realizado o mashal dos dados.</summary>
      <returns>O <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> valor como os dados serão empacotados como.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalDirectiveException">
      <summary>A exceção que é lançada pelo marshaler quando este encontra um <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> ao qual não oferece suporte.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor">
      <summary>Inicializa uma nova instância da classe <see langword="MarshalDirectiveException" /> com propriedades padrão.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa uma nova instância da classe <see langword="MarshalDirectiveException" /> dos dados de serialização.</summary>
      <param name="info">O objeto que mantém os dados de objeto serializados.</param>
      <param name="context">As informações contextuais sobre a origem ou o destino.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see langword="MarshalDirectiveException" /> com uma mensagem de erro especificada.</summary>
      <param name="message">A mensagem de erro que especifica a razão da exceção.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String,System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.MarshalDirectiveException" /> com uma mensagem de erro especificada e uma referência à exceção interna que é a causa da exceção.</summary>
      <param name="message">A mensagem de erro que explica a razão da exceção.</param>
      <param name="inner">A exceção que é a causa da exceção atual. Caso o parâmetro <paramref name="inner" /> não seja <see langword="null" />, a exceção atual é acionada em um bloco <see langword="catch" /> que identifica a exceção interna.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.NativeLibrary">
      <summary>Fornece APIs para gerenciar bibliotecas nativas.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Free(System.IntPtr)">
      <summary>Liberará um determinado identificador de biblioteca carregada ou não executará nenhuma ação se o identificador de entrada for <see cref="F:System.IntPtr.Zero" />.</summary>
      <param name="handle">O identificador de biblioteca nativa a ser liberado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.GetExport(System.IntPtr,System.String)">
      <summary>Obtém o endereço de um símbolo exportado.</summary>
      <param name="handle">O identificador de biblioteca nativa.</param>
      <param name="name">O nome do símbolo exportado.</param>
      <returns>O endereço do símbolo.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handle" /> ou <paramref name="name" /> é <see langword="null" />.</exception>
      <exception cref="T:System.EntryPointNotFoundException">O símbolo não é encontrado.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String)">
      <summary>Fornece uma API de exemplo para carregar uma biblioteca nativa que encapsula o carregador do sistema operacional e usa sinalizadores padrão.</summary>
      <param name="libraryPath">O nome da biblioteca nativa a ser carregada.</param>
      <returns>O identificador da biblioteca nativa carregada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="libraryPath" /> é <see langword="null" />.</exception>
      <exception cref="T:System.DllNotFoundException">A biblioteca não pode ser encontrada.</exception>
      <exception cref="T:System.BadImageFormatException">A biblioteca não é válida.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath})">
      <summary>Fornece uma API de alto nível para carregar uma biblioteca nativa.</summary>
      <param name="libraryName">O nome da biblioteca nativa a ser carregada.</param>
      <param name="assembly">O assembly que está carregando a biblioteca nativa.</param>
      <param name="searchPath">O caminho de pesquisa.</param>
      <returns>O identificador da biblioteca carregada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="libraryName" /> ou <paramref name="assembly" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assembly" /> não é um <see langword="RuntimeAssembly" />.</exception>
      <exception cref="T:System.DllNotFoundException">A biblioteca não pode ser encontrada.</exception>
      <exception cref="T:System.BadImageFormatException">A biblioteca não é válida.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.SetDllImportResolver(System.Reflection.Assembly,System.Runtime.InteropServices.DllImportResolver)">
      <summary>Define um retorno de chamada para resolver importações de biblioteca nativa de um assembly.</summary>
      <param name="assembly">O assembly para o qual o resolvedor está registrado.</param>
      <param name="resolver">O retorno de chamada do resolvedor a ser registrado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> ou paramref name="resolver" /&gt; é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Um resolvedor já foi definido para este assembly.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryGetExport(System.IntPtr,System.String,System.IntPtr@)">
      <summary>Obtém o endereço de um símbolo exportado e retorna um valor que indica se a chamada do método foi bem-sucedida.</summary>
      <param name="handle">O identificador de biblioteca nativa.</param>
      <param name="name">O nome do símbolo exportado.</param>
      <param name="address">Quando o método for retornado, conterá o endereço do símbolo, se existir.</param>
      <returns>
        <see langword="true" /> se o método foi retornado com êxito; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handle" /> ou <paramref name="name" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.IntPtr@)">
      <summary>Fornece uma API simples para carregar uma biblioteca nativa e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="libraryPath">O nome da biblioteca nativa a ser carregada.</param>
      <param name="handle">Quando o método é retornado, o identificador da biblioteca nativa carregada.</param>
      <returns>
        <see langword="true" /> se a biblioteca nativa foi carregada com êxito; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="libraryPath" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath},System.IntPtr@)">
      <summary>Fornece uma API de alto nível que carrega uma biblioteca nativa e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="libraryName">O nome da biblioteca nativa a ser carregada.</param>
      <param name="assembly">O assembly que está carregando a biblioteca nativa.</param>
      <param name="searchPath">O caminho de pesquisa.</param>
      <param name="handle">Quando o método é retornado, o identificador da biblioteca nativa carregada.</param>
      <returns>
        <see langword="true" /> se a operação de carregamento foi bem-sucedida; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="libraryPath" /> ou <paramref name="assembly" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assembly" /> não é um <see langword="RuntimeAssembly" />.</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.OptionalAttribute">
      <summary>Indica que um parâmetro é opcional.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OptionalAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see langword="OptionalAttribute" /> com valores padrão.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PreserveSigAttribute">
      <summary>Indica que o HRESULT ou a transformação de assinatura de <see langword="retval" /> que ocorre durante as chamadas de interoperabilidade COM deve ser suprimida.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PreserveSigAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.PreserveSigAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute">
      <summary>Indica que o assembly atribuído é um assembly de interoperabilidade primário.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.#ctor(System.Int32,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute" /> com os números de versão primária e secundária da biblioteca de tipos para a qual este assembly é o assembly de interoperabilidade primário.</summary>
      <param name="major">A versão principal da biblioteca de tipos para a qual este assembly é o assembly de interoperabilidade primário.</param>
      <param name="minor">A versão secundária da biblioteca de tipos para a qual este assembly é o assembly de interoperabilidade primário.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MajorVersion">
      <summary>Obtém o número de versão principal da biblioteca de tipos para a qual este assembly é o assembly de interoperabilidade primário.</summary>
      <returns>O número de versão principal da biblioteca de tipos para a qual esse assembly é o assembly de interoperabilidade primário.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MinorVersion">
      <summary>Obtém o número de versão secundária da biblioteca de tipos para a qual este assembly é o assembly de interoperabilidade primário.</summary>
      <returns>O número de versão secundária da biblioteca de tipos para a qual esse assembly é o assembly de interoperabilidade primário.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ProgIdAttribute">
      <summary>Permite que o usuário especifique o ProgID de uma classe.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ProgIdAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância do <see langword="ProgIdAttribute" /> com a ProgID especificada.</summary>
      <param name="progId">A ProgID a ser atribuída à classe.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ProgIdAttribute.Value">
      <summary>Obtém a ProgID da classe.</summary>
      <returns>O ProgID da classe.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.RuntimeEnvironment">
      <summary>Fornece uma coleção de métodos <see langword="static" /> que retornam informações sobre o ambiente de Common Language Runtime.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.FromGlobalAccessCache(System.Reflection.Assembly)">
      <summary>Testa se o assembly especificado é carregado no cache de assembly global.</summary>
      <param name="a">O assembly a ser testado.</param>
      <returns>
        <see langword="true" /> se o assembly for carregado no cache de assembly global; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory">
      <summary>Retorna o diretório no qual o Common Language Runtime está instalado.</summary>
      <returns>Uma cadeia de caracteres que contém o caminho para o diretório no qual o Common Language Runtime está instalado.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsIntPtr(System.Guid,System.Guid)">
      <summary>Retorna a interface especificada na classe especificada.</summary>
      <param name="clsid">O identificador da classe desejada.</param>
      <param name="riid">O identificador da interface desejado.</param>
      <returns>Um ponteiro não gerenciado para a interface solicitada.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">Falha IUnknown::QueryInterface.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsObject(System.Guid,System.Guid)">
      <summary>Retorna uma instância de um tipo que representa um objeto COM de um ponteiro para sua interface <see langword="IUnknown" />.</summary>
      <param name="clsid">O identificador da classe desejada.</param>
      <param name="riid">O identificador da interface desejado.</param>
      <returns>Um objeto que representa o objeto COM não gerenciado especificado.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">Falha IUnknown::QueryInterface.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetSystemVersion">
      <summary>Obtém o número de versão do Common Language Runtime que executa o processo atual.</summary>
      <returns>Uma cadeia de caracteres que contém o número de versão do Common Language Runtime.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.RuntimeEnvironment.SystemConfigurationFile">
      <summary>Obtém o caminho para o arquivo de configuração do sistema.</summary>
      <returns>O caminho para o arquivo de configuração do sistema.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayRankMismatchException">
      <summary>A exceção gerada quando a classificação de um <see langword="SAFEARRAY" /> de entrada não corresponde à classificação especificada na assinatura gerenciada.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor">
      <summary>Inicializa uma nova instância da classe <see langword="SafeArrayTypeMismatchException" /> com valores padrão.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa uma nova instância da classe <see langword="SafeArrayTypeMismatchException" /> dos dados de serialização.</summary>
      <param name="info">O objeto que mantém os dados de objeto serializados.</param>
      <param name="context">As informações contextuais sobre a origem ou o destino.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see langword="SafeArrayRankMismatchException" /> com a mensagem especificada.</summary>
      <param name="message">A mensagem que indica o motivo da exceção.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String,System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.SafeArrayRankMismatchException" /> com uma mensagem de erro especificada e uma referência à exceção interna que é a causa da exceção.</summary>
      <param name="message">A mensagem de erro que explica a razão da exceção.</param>
      <param name="inner">A exceção que é a causa da exceção atual. Caso o parâmetro <paramref name="inner" /> não seja <see langword="null" />, a exceção atual é acionada em um bloco <see langword="catch" /> que identifica a exceção interna.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException">
      <summary>A exceção gerada quando o tipo de <see langword="SAFEARRAY" /> de entrada não corresponde ao tipo especificado na assinatura gerenciada.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor">
      <summary>Inicializa uma nova instância da classe <see langword="SafeArrayTypeMismatchException" /> com valores padrão.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa uma nova instância da classe <see langword="SafeArrayTypeMismatchException" /> dos dados de serialização.</summary>
      <param name="info">O objeto que mantém os dados de objeto serializados.</param>
      <param name="context">As informações contextuais sobre a origem ou o destino.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see langword="SafeArrayTypeMismatchException" /> com a mensagem especificada.</summary>
      <param name="message">A mensagem que indica o motivo da exceção.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException" /> com uma mensagem de erro especificada e uma referência à exceção interna que é a causa da exceção.</summary>
      <param name="message">A mensagem de erro que explica a razão da exceção.</param>
      <param name="inner">A exceção que é a causa da exceção atual. Caso o parâmetro <paramref name="inner" /> não seja <see langword="null" />, a exceção atual é acionada em um bloco <see langword="catch" /> que identifica a exceção interna.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeBuffer">
      <summary>Fornece um buffer de memória controlado que pode ser usado para leitura e gravação. Tentativas de acessar a memória fora do buffer controlado (falhas e estouros) geram exceções.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)">
      <summary>Cria uma nova instância da classe <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> e especifica se o identificador do buffer deve ser liberado com confiança.</summary>
      <param name="ownsHandle">
        <see langword="true" /> para liberar de forma confiável o identificador durante a fase de finalização; <see langword="false" /> para impedir a liberação confiável (não recomendado).</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
      <summary>Obtém um ponteiro de um objeto <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> para um bloco de memória.</summary>
      <param name="pointer">Um ponteiro de bytes, transmitido pela referência, para receber o ponteiro de dentro do objeto <see cref="T:System.Runtime.InteropServices.SafeBuffer" />. É necessário definir esse ponteiro como <see langword="null" /> antes de chamar este método.</param>
      <exception cref="T:System.InvalidOperationException">O método <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> não foi chamado.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeBuffer.ByteLength">
      <summary>Obtém o tamanho do buffer, em bytes.</summary>
      <returns>O número de bytes no buffer de memória.</returns>
      <exception cref="T:System.InvalidOperationException">O método <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> não foi chamado.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
      <summary>Especifica o tamanho de alocação do buffer de memória usando o número especificado de elementos e o tamanho do elemento. É necessário chamar esse método antes de usar a instância <see cref="T:System.Runtime.InteropServices.SafeBuffer" />.</summary>
      <param name="numElements">O número de elementos no buffer.</param>
      <param name="sizeOfEachElement">O tamanho de cada elemento no buffer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numElements" /> é menor que zero.  

ou - 
<paramref name="sizeOfEachElement" /> é menor que zero.  

ou - 
<paramref name="numElements" /> multiplicado por <paramref name="sizeOfEachElement" /> é maior que o espaço de endereço disponível.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)">
      <summary>Define o tamanho de alocação da região de memória em bytes. É necessário chamar esse método antes de usar a instância <see cref="T:System.Runtime.InteropServices.SafeBuffer" />.</summary>
      <param name="numBytes">O número de bytes no buffer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numBytes" /> é menor que zero.  

ou - 
<paramref name="numBytes" /> é maior que o espaço de endereço disponível.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)">
      <summary>Define o tamanho de alocação da região de memória especificando o número dos tipos de valor. É necessário chamar esse método antes de usar a instância <see cref="T:System.Runtime.InteropServices.SafeBuffer" />.</summary>
      <param name="numElements">O número de elementos do tipo de valor para o qual a memória será alocada.</param>
      <typeparam name="T">O tipo de valor para o qual alocar memória.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numElements" /> é menor que zero.  

ou - 
<paramref name="numElements" /> multiplicado pelo tamanho de cada elemento é maior que o espaço de endereço disponível.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)">
      <summary>Lê um tipo de valor na memória no deslocamento especificado.</summary>
      <param name="byteOffset">O local do qual o tipo de valor será lido. Talvez seja necessário considerar problemas de alinhamento.</param>
      <typeparam name="T">O tipo de valor a ser lido.</typeparam>
      <returns>O tipo de valor que foi lido na memória.</returns>
      <exception cref="T:System.InvalidOperationException">O método <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> não foi chamado.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
      <summary>Lê o número de tipos de valor especificado do início da memória no deslocamento e os grava no início de uma matriz no índice.</summary>
      <param name="byteOffset">O local do qual a leitura será iniciada.</param>
      <param name="array">A matriz de saída na qual gravar.</param>
      <param name="index">O local na matriz de saída no qual começar a gravação.</param>
      <param name="count">O número de tipos de valor a serem lidos da matriz de entrada e a serem gravados na matriz de saída.</param>
      <typeparam name="T">O tipo de valor a ser lido.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que zero.  

ou - 
<paramref name="count" /> é menor que zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">O comprimento da matriz menos o índice é menor que <paramref name="count" />.</exception>
      <exception cref="T:System.InvalidOperationException">O método <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> não foi chamado.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.ReleasePointer">
      <summary>Libera um ponteiro que foi obtido pelo método <see cref="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)" />.</summary>
      <exception cref="T:System.InvalidOperationException">O método <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> não foi chamado.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)">
      <summary>Grava um tipo de valor na memória no local determinado.</summary>
      <param name="byteOffset">O local no qual a gravação será iniciada. Talvez seja necessário considerar problemas de alinhamento.</param>
      <param name="value">O valor a ser gravado.</param>
      <typeparam name="T">O tipo de valor a ser gravado.</typeparam>
      <exception cref="T:System.InvalidOperationException">O método <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> não foi chamado.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
      <summary>Grava o número de tipos de valor especificado em um local de memória lendo bytes começando do local especificado na matriz de entrada.</summary>
      <param name="byteOffset">O local na memória no qual gravar.</param>
      <param name="array">A matriz de entrada.</param>
      <param name="index">O deslocamento na matriz da qual a leitura será iniciada.</param>
      <param name="count">O número de tipos de valor a serem gravados.</param>
      <typeparam name="T">O tipo de valor a ser gravado.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ou <paramref name="count" /> é menor que zero.</exception>
      <exception cref="T:System.ArgumentException">O comprimento da matriz de entrada menos <paramref name="index" /> é menor que <paramref name="count" />.</exception>
      <exception cref="T:System.InvalidOperationException">O método <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> não foi chamado.</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.SEHException">
      <summary>Representa erros de SEH (Manipulação de Exceção Estruturada).</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.SEHException" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.SEHException" /> dos dados de serialização.</summary>
      <param name="info">O objeto que mantém os dados de objeto serializados.</param>
      <param name="context">As informações contextuais sobre a origem ou o destino.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.SEHException" /> com uma mensagem especificada.</summary>
      <param name="message">A mensagem que indica o motivo da exceção.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.SEHException" /> com uma mensagem de erro especificada e uma referência à exceção interna que é a causa da exceção.</summary>
      <param name="message">A mensagem de erro que explica a razão da exceção.</param>
      <param name="inner">A exceção que é a causa da exceção atual. Caso o parâmetro <paramref name="inner" /> não seja <see langword="null" />, a exceção atual é acionada em um bloco <see langword="catch" /> que identifica a exceção interna.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.CanResume">
      <summary>Indica se a exceção pode ser recuperada e se o código pode continuar do ponto no qual a exceção foi gerada.</summary>
      <returns>Sempre <see langword="false" />, pois exceções retomáveis não são implementadas.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.StandardOleMarshalObject">
      <summary>Substitui o marshaler free-thread padrão do CLR (Common Language Runtime) pelo marshaler OLE STA padrão.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.StandardOleMarshalObject.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.StandardOleMarshalObject" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeIdentifierAttribute">
      <summary>Dá suporte à equivalência de tipo.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor">
      <summary>Cria uma nova instância da classe <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)">
      <summary>Cria uma nova instância da classe <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /> com o escopo especificado e o identificador.</summary>
      <param name="scope">A primeira cadeia de caracteres de equivalência de tipo.</param>
      <param name="identifier">A segunda cadeia de caracteres de equivalência de tipo.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Identifier">
      <summary>Obtém o valor do parâmetro <paramref name="identifier" /> que foi passado ao construtor <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" />.</summary>
      <returns>O valor do parâmetro do <paramref name="identifier" /> Construtor.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Scope">
      <summary>Obtém o valor do parâmetro <paramref name="scope" /> que foi passado ao construtor <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" />.</summary>
      <returns>O valor do parâmetro do <paramref name="scope" /> Construtor.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncAttribute">
      <summary>Contém o <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" /> que foi originalmente importado para esse método da biblioteca de tipos COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Int16)">
      <summary>Inicializa uma nova instância da classe <see langword="TypeLibFuncAttribute" /> com o valor <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> especificado.</summary>
      <param name="flags">O valor <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> para o método atribuído como encontrado na biblioteca de tipos do qual foi importado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Runtime.InteropServices.TypeLibFuncFlags)">
      <summary>Inicializa uma nova instância da classe <see langword="TypeLibFuncAttribute" /> com o valor <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> especificado.</summary>
      <param name="flags">O valor <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> para o método atribuído como encontrado na biblioteca de tipos do qual foi importado.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibFuncAttribute.Value">
      <summary>Obtém o valor <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> para este método.</summary>
      <returns>O <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> valor deste método.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncFlags">
      <summary>Descreve as configurações originais do <see langword="FUNCFLAGS" /> na biblioteca de tipos COM da qual esse método foi importado.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable">
      <summary>A função que dá suporte à associação de dados.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultBind">
      <summary>A função que melhor representa o objeto. Apenas uma função em uma informação de tipo pode ter esse atributo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultCollelem">
      <summary>Permite uma otimização em que o compilador procura um membro chamado "xyz" no tipo "abc". Se esse membro for encontrado e marcado como uma função de acessador de um elemento da coleção padrão, uma chamada será gerada para essa função de membro.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDisplayBind">
      <summary>A função que é exibida ao usuário como associável. <see cref="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable" /> também deve ser definido.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FHidden">
      <summary>A função não deve ser exibida para o usuário, embora ele exista e seja associável.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FImmediateBind">
      <summary>A função é mapeada como propriedades vinculáveis individuais.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FNonBrowsable">
      <summary>A propriedade aparece em um Pesquisador de Objetos, mas não em um navegador de propriedades.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FReplaceable">
      <summary>Marca a interface como tendo comportamentos padrão.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRequestEdit">
      <summary>Quando definido, qualquer chamada para um método que define os resultados da propriedade primeiro em uma chamada para <see langword="IPropertyNotifySink::OnRequestEdit" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRestricted">
      <summary>Esse sinalizador é destinado a funções no nível de sistema ou a funções que navegadores de tipo não devem exibir.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FSource">
      <summary>A função retorna um objeto que é uma origem de eventos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUiDefault">
      <summary>O membro de informações de tipo é o membro padrão para exibição na interface do usuário.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUsesGetLastError">
      <summary>A função dá suporte a <see langword="GetLastError" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibImportClassAttribute">
      <summary>Especifica qual <see cref="T:System.Type" /> usa exclusivamente uma interface. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibImportClassAttribute.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.TypeLibImportClassAttribute" />, especificando o <see cref="T:System.Type" /> que usa exclusivamente uma interface.</summary>
      <param name="importClass">O objeto <see cref="T:System.Type" /> que usa exclusivamente uma interface.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibImportClassAttribute.Value">
      <summary>Obtém o nome de um objeto <see cref="T:System.Type" /> que usa exclusivamente uma interface.</summary>
      <returns>O nome de um <see cref="T:System.Type" /> objeto que usa exclusivamente uma interface.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeAttribute">
      <summary>Contém o <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> que foi originalmente importado para esse tipo da biblioteca de tipos COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Int16)">
      <summary>Inicializa uma nova instância da classe <see langword="TypeLibTypeAttribute" /> com o valor <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> especificado.</summary>
      <param name="flags">O valor <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> para o tipo atribuído como encontrado na biblioteca de tipos do qual foi importado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Runtime.InteropServices.TypeLibTypeFlags)">
      <summary>Inicializa uma nova instância da classe <see langword="TypeLibTypeAttribute" /> com o valor <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> especificado.</summary>
      <param name="flags">O valor <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> para o tipo atribuído como encontrado na biblioteca de tipos do qual foi importado.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibTypeAttribute.Value">
      <summary>Obtém o valor <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> desse tipo.</summary>
      <returns>O <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> valor deste tipo.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeFlags">
      <summary>Descreve as configurações originais do <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> na biblioteca de tipos COM da qual esse tipo foi importado.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAggregatable">
      <summary>A classe oferece suporte à agregação.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAppObject">
      <summary>Uma descrição de tipo que descreve um objeto <see langword="Application" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FCanCreate">
      <summary>Instâncias do tipo podem ser criadas por <see langword="ITypeInfo::CreateInstance" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FControl">
      <summary>O tipo é um controle do qual outros tipos serão derivados e não deve ser exibido aos usuários.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDispatchable">
      <summary>Indica que a interface deriva de <see langword="IDispatch" />, direta ou indiretamente.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDual">
      <summary>A interface fornece <see langword="IDispatch" /> e a associação de tabela V.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FHidden">
      <summary>O tipo não deve ser exibido para os navegadores.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FLicensed">
      <summary>O tipo é licenciado.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FNonExtensible">
      <summary>A interface não pode adicionar membros em tempo de execução.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FOleAutomation">
      <summary>Os tipos usados na interface são totalmente compatíveis com a Automação, incluindo o suporte da associação vtable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FPreDeclId">
      <summary>O tipo é predefinido. O aplicativo cliente deve criar automaticamente uma única instância do objeto que tem esse atributo. O nome da variável que aponta para o objeto é o mesmo que o nome de classe do objeto.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReplaceable">
      <summary>O objeto oferece suporte a <see langword="IConnectionPointWithDefault" /> e tem comportamentos padrão.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FRestricted">
      <summary>Esse sinalizador é destinado a tipos no nível de sistema ou a tipos que navegadores de tipo não devem exibir.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReverseBind">
      <summary>Indica que a resolução de nome das interfaces base deve ser verificada antes da verificação das interfaces filhas. Esse é o inverso do comportamento padrão.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarAttribute">
      <summary>Contém o <see cref="T:System.Runtime.InteropServices.VARFLAGS" /> que foi originalmente importado para esse campo da biblioteca de tipos COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Int16)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute" /> com o valor <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> especificado.</summary>
      <param name="flags">O valor <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> para o campo atribuído como encontrado na biblioteca de tipos do qual foi importado.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Runtime.InteropServices.TypeLibVarFlags)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute" /> com o valor <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> especificado.</summary>
      <param name="flags">O valor <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> para o campo atribuído como encontrado na biblioteca de tipos do qual foi importado.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVarAttribute.Value">
      <summary>Obtém o valor <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> desse campo.</summary>
      <returns>O <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> valor deste campo.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarFlags">
      <summary>Descreve as configurações originais do <see cref="T:System.Runtime.InteropServices.VARFLAGS" /> na biblioteca de tipos COM de que a variável foi importada.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable">
      <summary>A variável dá suporte à associação de dados.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultBind">
      <summary>A variável é a única propriedade que melhor representa o objeto. Apenas uma variável em informações de tipo pode ter esse valor.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultCollelem">
      <summary>Permite uma otimização em que o compilador procura um membro chamado "xyz" no tipo "abc". Se esse membro for encontrado e marcado como uma função de acessador de um elemento da coleção padrão, uma chamada será gerada para essa função de membro.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDisplayBind">
      <summary>A variável é exibida como associável. <see cref="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable" /> também deve ser definido.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FHidden">
      <summary>A variável não deve ser exibida em um navegador, embora ela exista e seja associável.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FImmediateBind">
      <summary>A variável é mapeada como propriedades vinculáveis individuais.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FNonBrowsable">
      <summary>A variável é exibida em um Pesquisador de Objetos, mas não em um navegador de propriedades.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReadOnly">
      <summary>Atribuição à variável não deve ser permitida.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReplaceable">
      <summary>Marca a interface como tendo comportamentos padrão.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRequestEdit">
      <summary>Indica que a propriedade oferece suporte à notificação COM <see langword="OnRequestEdit" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRestricted">
      <summary>Esse sinalizador é destinado a funções no nível de sistema ou a funções que navegadores de tipo não devem exibir.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FSource">
      <summary>A variável retorna um objeto que é uma origem de eventos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FUiDefault">
      <summary>A exibição padrão na interface do usuário.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVersionAttribute">
      <summary>Especifica o número de versão de uma biblioteca de tipos exportada.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVersionAttribute.#ctor(System.Int32,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.TypeLibVersionAttribute" /> com os números da versão primária e secundária da biblioteca de tipos.</summary>
      <param name="major">O número de versão principal da biblioteca de tipos.</param>
      <param name="minor">O número de versão secundária da biblioteca de tipos.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MajorVersion">
      <summary>Obtém o número de versão principal da biblioteca de tipos.</summary>
      <returns>O número de versão principal da biblioteca de tipos.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MinorVersion">
      <summary>Obtém o número de versão secundária da biblioteca de tipos.</summary>
      <returns>O número de versão secundária da biblioteca de tipos.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnknownWrapper">
      <summary>Encapsula objetos que o empacotador deve realizar marshaling como um <see langword="VT_UNKNOWN" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnknownWrapper.#ctor(System.Object)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.UnknownWrapper" /> com o objeto a ser encapsulado.</summary>
      <param name="obj">O objeto que está sendo encapsulado.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject">
      <summary>Obtém o objeto contido por esse wrapper.</summary>
      <returns>O objeto encapsulado.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute">
      <summary>Controla o comportamento de marshaling de uma assinatura do delegado passado como um ponteiro de função não gerenciada de ou para código não gerenciado. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute" /> com convenção de chamada especificada.</summary>
      <param name="callingConvention">A convenção de chamada especificada.</param>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.BestFitMapping">
      <summary>Habilita ou desabilita o comportamento de mapeamento mais adequado ao converter caracteres Unicode em caracteres ANSI.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CallingConvention">
      <summary>Obtém o valor da convenção de chamada.</summary>
      <returns>O valor da Convenção de chamada especificada pelo <see cref="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)" /> Construtor.</returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CharSet">
      <summary>Indica como realizar marshaling de parâmetros de cadeia de caracteres para o método e a desconfiguração de nome de controles.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.SetLastError">
      <summary>Indica se o computador chamado chama a função de API do Windows <see langword="SetLastError" /> antes de retornar do método atribuído.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.ThrowOnUnmappableChar">
      <summary>Habilita ou desabilita a geração de uma exceção em um caractere Unicode não mapeável que é convertido em um caractere "?" ANSI.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedType">
      <summary>Identifica como realizar marshaling de parâmetros ou campos para código não gerenciado.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AnsiBStr">
      <summary>Uma cadeia de caracteres ANSI que é um byte único com tamanho prefixado. Use esse membro no tipo de dados <see cref="T:System.String" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AsAny">
      <summary>Um tipo dinâmico que determina o tipo de um objeto em tempo de execução e realiza marshaling do objeto como esse tipo. Esse membro é válido apenas para métodos de invocação de plataforma.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Bool">
      <summary>Um valor booliano de quatro bytes (<see langword="true" /> != 0, <see langword="false" /> = 0). Esse é o tipo BOOL Win32.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.BStr">
      <summary>Uma cadeia de caracteres Unicode que é um byte duplo com tamanho prefixado. Use esse membro, que é a cadeia de caracteres padrão em COM, no tipo de dados <see cref="T:System.String" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValArray">
      <summary>Quando a propriedade <see cref="P:System.Runtime.InteropServices.MarshalAsAttribute.Value" /> estiver definida como <see langword="ByValArray" />, o campo <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> deve ser definido para indicar o número de elementos na matriz. O campo <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" /> pode conter, opcionalmente, o <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> dos elementos da matriz quando for necessário diferenciar entre os tipos de cadeia de caracteres. Use esse <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> somente em uma matriz cujos elementos aparecem como campos em uma estrutura.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValTStr">
      <summary>Usado para matrizes de caracteres em linha e de comprimento fixo que aparecem em uma estrutura. Os tipos <see langword="ByValTStr" /> se comportam como cadeias de caracteres de tamanho fixo e estilo C dentro de uma estrutura (por exemplo, <c>char s[5]</c>). O tipo de caractere usado com <see langword="ByValTStr" /> é determinado pelo argumento <see cref="T:System.Runtime.InteropServices.CharSet" /> do atributo <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> aplicado à estrutura contida. Sempre use o campo <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> para indicar o tamanho da matriz.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Currency">
      <summary>Um tipo de moeda. Usado em um <see cref="T:System.Decimal" /> para realizar marshaling do valor decimal como um tipo de moeda COM em vez de como um <see langword="Decimal" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler">
      <summary>Especifica a classe do realizador de marshaling personalizado quando usado com o campo <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> ou <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef" />. O campo <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie" /> pode ser usado para passar informações adicionais para o realizador de marshaling personalizado. Você pode usar esse membro em qualquer tipo de referência. Esse membro é válido somente para parâmetros e valores retornado. Ele não pode ser usado em campos.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Error">
      <summary>Um tipo nativo associado a um <see cref="F:System.Runtime.InteropServices.UnmanagedType.I4" /> ou a um <see cref="F:System.Runtime.InteropServices.UnmanagedType.U4" />, e que faz com que o parâmetro seja exportado como um HRESULT na biblioteca de tipos exportada.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.FunctionPtr">
      <summary>Um inteiro que pode ser usado como um ponteiro de função de estilo C. Use esse membro em um tipo de dados <see cref="T:System.Delegate" /> ou em um tipo que herda de um <see cref="T:System.Delegate" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.HString">
      <summary>Uma cadeia de caracteres Tempo de Execução do Windows. Use esse membro no tipo de dados <see cref="T:System.String" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I1">
      <summary>Um inteiro de um byte com sinal. Use esse membro para transformar um valor booliano em um byte, estilo C <see langword="bool" /> (<see langword="true" /> = 1, <see langword="false" /> = 0).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I2">
      <summary>Um inteiro de dois bytes com sinal.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I4">
      <summary>Um inteiro de quatro bytes com sinal.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I8">
      <summary>Um inteiro de oito bytes com sinal.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IDispatch">
      <summary>Um ponteiro COM <see langword="IDispatch" /> (<see langword="Object" /> no Microsoft Visual Basic 6.0).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IInspectable">
      <summary>Um ponteiro de interface Tempo de Execução do Windows. Use esse membro no tipo de dados <see cref="T:System.Object" /> .</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Interface">
      <summary>Um ponteiro de interface COM. O <see cref="T:System.Guid" /> da interface é obtido dos metadados da classe. Use este membro para especificar o tipo exato de interface ou o tipo de interface padrão se você aplicá-lo a uma classe. Esse membro produz o mesmo comportamento que <see cref="F:System.Runtime.InteropServices.UnmanagedType.IUnknown" /> quando você o aplica ao tipo de dados <see cref="T:System.Object" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IUnknown">
      <summary>Um ponteiro COM <see langword="IUnknown" />. Use esse membro no tipo de dados <see cref="T:System.Object" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPArray">
      <summary>Um ponteiro para o primeiro elemento da matriz de estilo C. Ao realizar marshaling do código gerenciado para código não gerenciado, o comprimento da matriz é determinado pelo comprimento da matriz gerenciado. Ao realizar o marshaling do código não gerenciado para o código gerenciado, o tamanho da matriz é determinado pelos campos <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> e <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" />, seguidos opcionalmente pelo tipo não gerenciado dos elementos dentro da matriz quando é necessário diferenciar entre os tipos de cadeia de caracteres.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStr">
      <summary>Uma cadeia de caracteres ANSI terminada em nulo e byte único. Use esse membro nos tipos de dados <see cref="T:System.String" /> e <see cref="T:System.Text.StringBuilder" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStruct">
      <summary>Um ponteiro para uma estrutura de estilo C que você usa para realizar marshaling de classes formatadas gerenciadas. Esse membro é válido apenas para métodos de invocação de plataforma.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPTStr">
      <summary>Uma cadeia de caracteres dependente de plataforma: ANSI no Windows 98 e Unicode no Windows NT e Windows XP. Esse valor tem suporte apenas para invocação de plataforma e não para interoperabilidade COM, pois não há suporte para a exportação de uma cadeia de caracteres do tipo <see langword="LPTStr" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPUTF8Str">
      <summary>Um ponteiro para uma cadeia de caracteres codificada em UTF-8.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPWStr">
      <summary>Uma cadeia de caracteres ANSI terminada em nulo e dois bytes. Não é possível usar o valor <see langword="LPWStr" /> com uma cadeia de caracteres não gerenciada, a menos que a cadeia de caracteres tenha sido criada usando a função <see langword="CoTaskMemAlloc" /> não gerenciada.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R4">
      <summary>Um número de ponto flutuante de quatro bytes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R8">
      <summary>Um número de ponto flutuante de oito bytes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SafeArray">
      <summary>Um <see langword="SafeArray" />, que é uma matriz autodescritiva que leva o tipo, a classificação e os limites dos dados de matriz associada. Usar esse membro com o campo <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType" /> para substituir o tipo de elemento padrão.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Struct">
      <summary>Uma VARIANTE, que é usada para realizar marshaling em classes formatadas gerenciadas e tipos de valor.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysInt">
      <summary>Um inteiro com sinal dependente de plataforma: 4 bytes em Windows de 32 bits, 8 bytes no Windows de 64 bits.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysUInt">
      <summary>Um inteiro sem sinal dependente de plataforma: 4 bytes em Windows de 32 bits, 8 bytes no Windows de 64 bits.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.TBStr">
      <summary>Uma cadeia de caracteres <see langword="char" /> dependente de plataforma com tamanho prefixado: ANSI no Windows 98, Unicode no Windows NT. Você usa raramente esse membro semelhante a BSTR.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U1">
      <summary>Um inteiro de um byte sem sinal.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U2">
      <summary>Um inteiro de dois bytes sem sinal.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U4">
      <summary>Um inteiro de quatro bytes sem sinal.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U8">
      <summary>Um inteiro de oito bytes sem sinal.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VariantBool">
      <summary>Um tipo VARIANT_BOOL de dois bytes e definido por OLE (<see langword="true" /> = -1, <see langword="false" /> = 0).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VBByRefStr">
      <summary>Um valor que permite que o Visual Basic altere uma cadeia de caracteres no código não gerenciado e reflita os resultados no código gerenciado. Esse valor só tem suporte para invocação de plataforma.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VarEnum">
      <summary>Indica como realizar marshaling dos elementos da matriz quando uma matriz passa por marshaling do código gerenciado para não gerenciado como um <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ARRAY">
      <summary>Indica um ponteiro <see langword="SAFEARRAY" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB">
      <summary>Indica os bytes prefixados do comprimento.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB_OBJECT">
      <summary>Indica que um blob contém um objeto.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BOOL">
      <summary>Indica um valor booliano.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BSTR">
      <summary>Indica uma cadeia de caracteres BSTR.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BYREF">
      <summary>Indica que um valor é uma referência.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CARRAY">
      <summary>Indica uma matriz de estilo C.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CF">
      <summary>Indica o formato da área de transferência.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CLSID">
      <summary>Indica uma ID de classe.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CY">
      <summary>Indica um valor de moeda.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DATE">
      <summary>Indica um valor DATE.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DECIMAL">
      <summary>Indica um valor <see langword="decimal" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH">
      <summary>Indica um ponteiro <see langword="IDispatch" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_EMPTY">
      <summary>Indica que não foi especificado um valor.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ERROR">
      <summary>Indica um SCODE.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_FILETIME">
      <summary>Indica um valor FILETIME.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_HRESULT">
      <summary>Indica um ponteiro HRESULT.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I1">
      <summary>Indica um valor <see langword="char" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I2">
      <summary>Indica um inteiro <see langword="short" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I4">
      <summary>Indica um inteiro <see langword="long" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I8">
      <summary>Indica um inteiro de 64 bits.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_INT">
      <summary>Indica um valor inteiro.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPSTR">
      <summary>Indica uma cadeia de caracteres terminada em nulo.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPWSTR">
      <summary>Indica uma cadeia de caracteres larga terminada por <see langword="null" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_NULL">
      <summary>Indica um valor nulo, semelhante a um valor nulo no SQL.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_PTR">
      <summary>Indica um tipo de ponteiro.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R4">
      <summary>Indica um valor <see langword="float" /> .</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R8">
      <summary>Indica um valor <see langword="double" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_RECORD">
      <summary>Indica um tipo definido pelo usuário.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_SAFEARRAY">
      <summary>Indica um SAFEARRAY. Inválido em uma VARIANT.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORAGE">
      <summary>Indica que o nome de um armazenamento segue.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORED_OBJECT">
      <summary>Indica que um armazenamento contém um objeto.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAM">
      <summary>Indica que o nome de um fluxo segue.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAMED_OBJECT">
      <summary>Indica que um fluxo contém um objeto.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI1">
      <summary>Indica um <see langword="byte" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI2">
      <summary>Indica um <see langword="unsigned" /><see langword="short" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI4">
      <summary>Indica um <see langword="unsigned" /><see langword="long" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI8">
      <summary>Indica um inteiro sem sinal de 64 bits.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UINT">
      <summary>Indica um valor inteiro <see langword="unsigned" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UNKNOWN">
      <summary>Indica um ponteiro <see langword="IUnknown" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_USERDEFINED">
      <summary>Indica um tipo definido pelo usuário.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VARIANT">
      <summary>Indica um ponteiro <see langword="far" /> VARIANT.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VECTOR">
      <summary>Indica uma matriz simples contada.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VOID">
      <summary>Indica um estilo C <see langword="void" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VariantWrapper">
      <summary>Realiza marshaling de dados do tipo <see langword="VT_VARIANT | VT_BYREF" /> de código gerenciado para código não gerenciado. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> do parâmetro <see cref="T:System.Object" /> especificado.</summary>
      <param name="obj">O objeto a se realizar marshaling.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.VariantWrapper.WrappedObject">
      <summary>Obtém o objeto encapsulado pelo objeto <see cref="T:System.Runtime.InteropServices.VariantWrapper" />.</summary>
      <returns>O objeto encapsulado pelo <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> objeto.</returns>
    </member>
    <member name="T:System.Security.SecureString">
      <summary>Representa o texto que deve ser mantido como confidencial, como excluindo-o da memória do computador quando ele não for mais necessário. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.Security.SecureString.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.SecureString" />.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Ocorreu um erro ao proteger ou ao desproteger o valor dessa instância.</exception>
      <exception cref="T:System.NotSupportedException">Não há suporte para esta operação nesta plataforma.</exception>
    </member>
    <member name="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.SecureString" /> de uma submatriz de objetos <see cref="T:System.Char" />.  
Este construtor não é compatível com CLS. A alternativa compatível com CLS é <see cref="M:System.Security.SecureString.#ctor" />.</summary>
      <param name="value">Um ponteiro para uma matriz de objetos <see cref="T:System.Char" />.</param>
      <param name="length">O número de elementos de <paramref name="value" /> a ser incluído na nova instância.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> é menor que zero ou maior que 65.536.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Ocorreu um erro ao proteger ou desproteger o valor dessa cadeia de caracteres segura.</exception>
      <exception cref="T:System.NotSupportedException">Não há suporte para esta operação nesta plataforma.</exception>
    </member>
    <member name="M:System.Security.SecureString.AppendChar(System.Char)">
      <summary>Acrescenta um caractere ao final da cadeia de caracteres segura atual.</summary>
      <param name="c">Um caractere para acrescentar a essa cadeia de caracteres segura.</param>
      <exception cref="T:System.ObjectDisposedException">Essa cadeia de caracteres segura já foi descartada.</exception>
      <exception cref="T:System.InvalidOperationException">Essa cadeia de caracteres segura é somente leitura.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Executar esta operação fará com que o tamanho dessa cadeia de caracteres segura seja maior que 65.536 caracteres.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Ocorreu um erro ao proteger ou desproteger o valor dessa cadeia de caracteres segura.</exception>
    </member>
    <member name="M:System.Security.SecureString.Clear">
      <summary>Exclui o valor da cadeia de caracteres segura atual.</summary>
      <exception cref="T:System.ObjectDisposedException">Essa cadeia de caracteres segura já foi descartada.</exception>
      <exception cref="T:System.InvalidOperationException">Essa cadeia de caracteres segura é somente leitura.</exception>
    </member>
    <member name="M:System.Security.SecureString.Copy">
      <summary>Cria uma cópia da cadeia de caracteres segura atual.</summary>
      <returns>Uma cópia dessa cadeia de caracteres segura.</returns>
      <exception cref="T:System.ObjectDisposedException">Essa cadeia de caracteres segura já foi descartada.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Ocorreu um erro ao proteger ou desproteger o valor dessa cadeia de caracteres segura.</exception>
    </member>
    <member name="M:System.Security.SecureString.Dispose">
      <summary>Libera todos os recursos usados pelo objeto <see cref="T:System.Security.SecureString" /> atual.</summary>
    </member>
    <member name="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
      <summary>Insere um caractere nesta cadeia de caracteres segura na posição de índice especificada.</summary>
      <param name="index">A posição do índice em que o parâmetro <paramref name="c" /> é inserido.</param>
      <param name="c">O caractere a ser inserido.</param>
      <exception cref="T:System.ObjectDisposedException">Essa cadeia de caracteres segura já foi descartada.</exception>
      <exception cref="T:System.InvalidOperationException">Essa cadeia de caracteres segura é somente leitura.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que zero ou maior que o comprimento dessa cadeia de caracteres segura.  

ou - 
Executar esta operação fará com que o tamanho dessa cadeia de caracteres segura seja maior que 65.536 caracteres.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Ocorreu um erro ao proteger ou desproteger o valor dessa cadeia de caracteres segura.</exception>
    </member>
    <member name="M:System.Security.SecureString.IsReadOnly">
      <summary>Indica se essa cadeia de caracteres segura é marcada como somente leitura.</summary>
      <returns>
        <see langword="true" /> se essa cadeia de caracteres segura for marcada como somente leitura; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ObjectDisposedException">Essa cadeia de caracteres segura já foi descartada.</exception>
    </member>
    <member name="P:System.Security.SecureString.Length">
      <summary>Obtém o número de caracteres na cadeia de caracteres atual.</summary>
      <returns>O número de <see cref="T:System.Char" /> objetos nesta cadeia de caracteres segura.</returns>
      <exception cref="T:System.ObjectDisposedException">Essa cadeia de caracteres segura já foi descartada.</exception>
    </member>
    <member name="M:System.Security.SecureString.MakeReadOnly">
      <summary>Torna o valor de texto da cadeia de caracteres segura em somente leitura.</summary>
      <exception cref="T:System.ObjectDisposedException">Essa cadeia de caracteres segura já foi descartada.</exception>
    </member>
    <member name="M:System.Security.SecureString.RemoveAt(System.Int32)">
      <summary>Remove o caractere na posição de índice especificada dessa cadeia de caracteres segura.</summary>
      <param name="index">A posição de índice de um caractere nessa cadeia de caracteres segura.</param>
      <exception cref="T:System.ObjectDisposedException">Essa cadeia de caracteres segura já foi descartada.</exception>
      <exception cref="T:System.InvalidOperationException">Essa cadeia de caracteres segura é somente leitura.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que zero ou maior ou igual ao tamanho dessa cadeia de caracteres segura.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Ocorreu um erro ao proteger ou desproteger o valor dessa cadeia de caracteres segura.</exception>
    </member>
    <member name="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
      <summary>Substitui o caractere existente na posição de índice especificada por outro caractere.</summary>
      <param name="index">A posição de índice de um caractere existente nessa cadeia de caracteres segura</param>
      <param name="c">Um caractere que substitui o caractere existente.</param>
      <exception cref="T:System.ObjectDisposedException">Essa cadeia de caracteres segura já foi descartada.</exception>
      <exception cref="T:System.InvalidOperationException">Essa cadeia de caracteres segura é somente leitura.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que zero ou maior ou igual ao tamanho dessa cadeia de caracteres segura.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Ocorreu um erro ao proteger ou desproteger o valor dessa cadeia de caracteres segura.</exception>
    </member>
    <member name="T:System.Security.SecureStringMarshal">
      <summary>Fornece uma coleção de métodos para alocar a memória não gerenciada e copiar os blocos de memória não gerenciada.</summary>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary>Copia o conteúdo de um objeto <see cref="T:System.Security.SecureString" /> gerenciado para um bloco de memória alocado do alocador de tarefas COM não gerenciado.</summary>
      <param name="s">O objeto gerenciado a se copiar.</param>
      <returns>O endereço, na memória não gerenciada, para o qual o parâmetro <paramref name="s" /> foi copiado ou 0 se um objeto nulo foi fornecido.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="s" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">O computador atual não está executando o Windows 2000 Service Pack 3 ou posterior.</exception>
      <exception cref="T:System.OutOfMemoryException">Memória insuficiente.</exception>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary>Copia o conteúdo de um objeto <see cref="T:System.Security.SecureString" /> gerenciado para um bloco de memória alocado do alocador de tarefas COM não gerenciado.</summary>
      <param name="s">O objeto gerenciado a se copiar.</param>
      <returns>O endereço, na memória não gerenciada, para o qual o parâmetro <paramref name="s" /> foi copiado ou 0 se um objeto nulo foi fornecido.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="s" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">O computador atual não está executando o Windows 2000 Service Pack 3 ou posterior.</exception>
      <exception cref="T:System.OutOfMemoryException">Memória insuficiente.</exception>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary>Copia o conteúdo de um <see cref="T:System.Security.SecureString" /> gerenciado para a memória não gerenciada, convertendo em formato ANSI durante a cópia.</summary>
      <param name="s">O objeto gerenciado a se copiar.</param>
      <returns>O endereço, na memória não gerenciada, para o qual o parâmetro <paramref name="s" /> foi copiado ou 0 se um objeto nulo foi fornecido.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="s" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">O computador atual não está executando o Windows 2000 Service Pack 3 ou posterior.</exception>
      <exception cref="T:System.OutOfMemoryException">Memória insuficiente.</exception>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary>Copia o conteúdo de um objeto <see cref="T:System.Security.SecureString" /> gerenciado para uma memória não gerenciada.</summary>
      <param name="s">O objeto gerenciado a se copiar.</param>
      <returns>O endereço, na memória não gerenciada, para o qual <paramref name="s" /> foi copiado ou 0, se <paramref name="s" /> for um objeto <see cref="T:System.Security.SecureString" /> cujo tamanho é 0.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="s" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">O computador atual não está executando o Windows 2000 Service Pack 3 ou posterior.</exception>
      <exception cref="T:System.OutOfMemoryException">Memória insuficiente.</exception>
    </member>
  </members>
</doc>
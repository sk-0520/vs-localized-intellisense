<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ObjectModel</name>
  </assembly>
  <members>
    <member name="T:System.Collections.ObjectModel.KeyedCollection`2">
      <summary>Fornece a classe base abstrata para uma coleção cujas chaves são incorporadas nos valores.</summary>
      <typeparam name="TKey">O tipo das chaves da coleção.</typeparam>
      <typeparam name="TItem">O tipo de itens na coleção.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> que usa o comparador de igualdade padrão.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> que usa o comparador de igualdade especificado.</summary>
      <param name="comparer">A implementação da interface genérica <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para uso na comparação de chaves ou para <see langword="null" /> usar o comparador de igualdade padrão para o tipo da chave, obtido em <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> que usa o comparador de igualdade especificado e cria um dicionário de pesquisa quando o limite especificado é excedido.</summary>
      <param name="comparer">A implementação da interface genérica <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para uso na comparação de chaves ou para <see langword="null" /> usar o comparador de igualdade padrão para o tipo da chave, obtido em <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</param>
      <param name="dictionaryCreationThreshold">O número de elementos que a coleção pode conter sem criar um dicionário de pesquisa (0 cria o dicionário de pesquisa quando o primeiro item é adicionado), ou -1 para especificar que um dicionário de pesquisa nunca é criado.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dictionaryCreationThreshold" /> é menor que -1.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
      <summary>Altera a chave associada ao elemento especificado no dicionário de pesquisa.</summary>
      <param name="item">O elemento do qual alterar a chave.</param>
      <param name="newKey">A nova chave para <paramref name="item" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> é <see langword="null" />.  

ou - 
<paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> não foi encontrado.  

ou - 
A <paramref name="key" /> já existe em <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
      <summary>Remove todos os elementos do <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</summary>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer">
      <summary>Obtém o comparador de igualdade genérico que é usado para determinar a igualdade de chaves na coleção.</summary>
      <returns>A implementação da <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> interface genérica que é usada para determinar a igualdade de chaves na coleção.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
      <summary>Determina se a coleção contém um elemento com a chave especificada.</summary>
      <param name="key">A chave a ser localizada no <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> contiver um elemento com a chave especificada; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
      <summary>Obtém o dicionário de pesquisa do <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</summary>
      <returns>O dicionário de pesquisa do <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />, se existir; caso contrário, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
      <summary>Quando implementado em uma classe derivada, extrai a chave do elemento especificado.</summary>
      <param name="item">O elemento do qual a chave será extraída.</param>
      <returns>A chave do elemento especificado.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
      <summary>Insere um elemento no <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />, no índice especificado.</summary>
      <param name="index">O índice de base zero no qual o <paramref name="item" /> deve ser inserido.</param>
      <param name="item">O objeto a ser inserido.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que 0.  

ou - 
<paramref name="index" /> é maior que <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
      <summary>Obtém o elemento com a chave especificada.</summary>
      <param name="key">A chave do elemento a obter.</param>
      <returns>O elemento com a chave especificada. Se um elemento com a chave especificada não for encontrado, uma exceção será lançada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Um elemento com a chave especificada não existe na coleção.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
      <summary>Remove o elemento com a chave especificada do <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</summary>
      <param name="key">A chave do elemento a ser removido.</param>
      <returns>
        <see langword="true" /> se o elemento for removido com êxito; caso contrário, <see langword="false" />.  Esse método também retornará <see langword="false" />, se <paramref name="key" /> não tiver sido localizado no <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
      <summary>Remove o elemento no índice especificado do <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</summary>
      <param name="index">O índice do elemento a ser removido.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
      <summary>Substitui o item no índice especificado pelo item especificado.</summary>
      <param name="index">O índice de base zero do item a ser substituído.</param>
      <param name="item">O novo item.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.TryGetValue(`0,`1@)">
      <param name="key" />
      <param name="item" />
    </member>
    <member name="T:System.Collections.ObjectModel.ObservableCollection`1">
      <summary>Representa uma coleção de dados dinâmicos que oferece notificações quando itens são adicionados, removidos ou quando toda a lista é atualizada.</summary>
      <typeparam name="T">O tipo dos elementos na coleção.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> que contém elementos copiados da coleção especificada.</summary>
      <param name="collection">A coleção da qual os elementos são copiados.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="collection" /> não pode ser <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.List{`0})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> que contém elementos copiados da lista especificada.</summary>
      <param name="list">A lista da qual os elementos são copiados.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="list" /> não pode ser <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy">
      <summary>Não permite tentativas reentrantes de alterar essa coleção.</summary>
      <returns>Um objeto <see cref="T:System.IDisposable" /> que pode ser usado para descartar o objeto.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.CheckReentrancy">
      <summary>Verifica se há tentativas reentrantes de alterar essa coleção.</summary>
      <exception cref="T:System.InvalidOperationException">Se houve uma chamada para <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy" /> da qual o valor retornado <see cref="T:System.IDisposable" /> ainda não foi descartado. Normalmente, isso significa quando há tentativas adicionais para alterar essa coleção durante um evento <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" />. No entanto, isso depende de quando as classes derivadas escolhem chamar <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.ClearItems">
      <summary>Remove todos os itens da coleção.</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged">
      <summary>Ocorre quando um item é adicionado, removido, alterado, movido ou toda a lista é atualizada.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.InsertItem(System.Int32,`0)">
      <summary>Insere um item na coleção no índice especificado.</summary>
      <param name="index">O índice de base zero no qual o <paramref name="item" /> deve ser inserido.</param>
      <param name="item">O objeto a ser inserido.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.Move(System.Int32,System.Int32)">
      <summary>Move o item no índice especificado para um novo local na coleção.</summary>
      <param name="oldIndex">O índice baseado em zero, especificando o local do item a ser movido.</param>
      <param name="newIndex">O índice baseado em zero, especificando o novo local do item.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.MoveItem(System.Int32,System.Int32)">
      <summary>Move o item no índice especificado para um novo local na coleção.</summary>
      <param name="oldIndex">O índice baseado em zero, especificando o local do item a ser movido.</param>
      <param name="newIndex">O índice baseado em zero, especificando o novo local do item.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>Cria o evento <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> com os argumentos fornecidos.</summary>
      <param name="e">Argumentos do evento que está sendo criado.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Cria o evento <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> com os argumentos fornecidos.</summary>
      <param name="e">Argumentos do evento que está sendo criado.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged">
      <summary>Ocorre quando um valor de propriedade é alterado.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.RemoveItem(System.Int32)">
      <summary>Remove o item no índice especificado da coleção.</summary>
      <param name="index">O índice de base zero do elemento a ser removido.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.SetItem(System.Int32,`0)">
      <summary>Substitui o elemento no índice especificado.</summary>
      <param name="index">O índice de base zero do elemento a ser substituído.</param>
      <param name="item">O novo valor para o elemento no índice especificado.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Ocorre quando um valor de propriedade é alterado.</summary>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyDictionary`2">
      <summary>Representa uma coleção somente leitura genérica de pares chave/valor.</summary>
      <typeparam name="TKey">O tipo de chaves no dicionário.</typeparam>
      <typeparam name="TValue">O tipo de valores no dicionário.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> que é um wrapper do dicionário especificado.</summary>
      <param name="dictionary">O dicionário a ser encapsulado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ContainsKey(`0)">
      <summary>Determina se o dicionário contém um elemento que tem a chave especificada.</summary>
      <param name="key">A chave a ser localizada no dicionário.</param>
      <returns>
        <see langword="true" /> se o dicionário contiver um elemento que tem a chave especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Count">
      <summary>Obtém o número de itens no dicionário.</summary>
      <returns>O número de itens no dicionário.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Dictionary">
      <summary>Obtém o dicionário que é encapsulado por este objeto <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</summary>
      <returns>O dicionário que é encapsulado por este objeto.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.GetEnumerator">
      <summary>Retorna um enumerador que itera por meio de <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</summary>
      <returns>Um enumerador que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Item(`0)">
      <summary>Obtém o elemento que tem a chave especificada.</summary>
      <param name="key">A chave do elemento a obter.</param>
      <returns>O elemento que tem a chave especificada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">A propriedade é recuperada e <paramref name="key" /> não foi encontrado.</exception>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection">
      <summary>Representa uma coleção somente leitura das chaves de um objeto <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>Copia os elementos da coleção para uma matriz, começando em um índice de matriz específico.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados da coleção. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> é multidimensional.  

ou - 
O número de elementos na coleção de origem é maior do que o espaço disponível do <paramref name="arrayIndex" /> até o final do <paramref name="array" /> de destino.  

ou - 
O tipo <paramref name="T" /> não pode ser convertido automaticamente no tipo de destino <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.Count">
      <summary>Obtém o número de elementos na coleção.</summary>
      <returns>O número de elementos na coleção.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.GetEnumerator">
      <summary>Retorna um enumerador que itera pela coleção.</summary>
      <returns>Um enumerador que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
      <summary>Gera uma exceção <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <param name="item">O objeto a ser adicionado à coleção.</param>
      <exception cref="T:System.NotSupportedException">Em todos os casos.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
      <summary>Gera uma exceção <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <exception cref="T:System.NotSupportedException">Em todos os casos.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
      <summary>Determina se a coleção contém um valor específico.</summary>
      <param name="item">O objeto a ser localizado na coleção.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> for encontrado na coleção; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
      <summary>Obtém um valor que indica se o dicionário é somente leitura.</summary>
      <returns>
        <see langword="true" /> em todos os casos.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
      <summary>Gera uma exceção <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <param name="item">O objeto a ser removido da coleção.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> foi removido da coleção com êxito; caso contrário, <see langword="false" />. Esse método também retornará <see langword="false" /> se <paramref name="item" /> não tiver sido encontrado na coleção original.</returns>
      <exception cref="T:System.NotSupportedException">Em todos os casos.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia os elementos da coleção para uma matriz, começando em um índice de matriz específico.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados da coleção. A matriz deve ter indexação com base em zero.</param>
      <param name="index">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> é multidimensional.  

ou - 
O número de elementos na coleção de origem é maior do que o espaço disponível do <paramref name="index" /> até o final do <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtém um valor que indica se o acesso à coleção é sincronizado (thread-safe).</summary>
      <returns>
        <see langword="true" />Se o acesso à coleção for sincronizado (thread-safe); caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtém um objeto que pode ser usado para sincronizar o acesso à coleção.</summary>
      <returns>Um objeto que pode ser usado para sincronizar o acesso à coleção.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera pela coleção.</summary>
      <returns>Um enumerador que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Keys">
      <summary>Obtém uma coleção de chaves que contém as chaves do dicionário.</summary>
      <returns>Uma coleção de chaves que contém as chaves do dicionário.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Gera uma exceção <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <param name="item">O objeto a ser adicionado ao dicionário.</param>
      <exception cref="T:System.NotSupportedException">Em todos os casos.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear">
      <summary>Gera uma exceção <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <exception cref="T:System.NotSupportedException">Em todos os casos.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determina se o dicionário contém um valor específico.</summary>
      <param name="item">O objeto a ser localizado no dicionário.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> for encontrada no dicionário; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>Copia os elementos do dicionário para uma matriz, começando no índice da matriz especificada.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados do dicionário. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> é multidimensional.

ou - 
O número de elementos no dicionário de origem é maior do que o espaço disponível de <paramref name="arrayIndex" /> até o final do <paramref name="array" /> de destino.

ou - 
O tipo <paramref name="T" /> não pode ser convertido automaticamente no tipo de destino <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>Obtém um valor que indica se o dicionário é somente leitura.</summary>
      <returns>Sempre retorna <see langword="true" /> para indicar que o dicionário é somente leitura.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Gera uma exceção <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <param name="item">O objeto a ser removido do dicionário.</param>
      <returns>Gera uma exceção <see cref="T:System.NotSupportedException" /> em todos os casos.</returns>
      <exception cref="T:System.NotSupportedException">Em todos os casos.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <summary>Gera uma exceção <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <param name="key">O objeto a ser usado como chave do elemento a ser adicionado.</param>
      <param name="value">O objeto a ser usado como o valor do elemento a ser adicionado.</param>
      <exception cref="T:System.NotSupportedException">Em todos os casos.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <summary>Obtém o elemento que tem a chave especificada.</summary>
      <param name="key">A chave do elemento a ser obtida ou adicionada.</param>
      <returns>O elemento que tem a chave especificada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">A propriedade é recuperada e <paramref name="key" /> não foi encontrado.</exception>
      <exception cref="T:System.NotSupportedException">A propriedade foi definida.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>Obtém uma coleção que contém as chaves do dicionário.</summary>
      <returns>Uma coleção que contém as chaves do objeto que implementa <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <summary>Gera uma exceção <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <param name="key">A chave do elemento a ser removido.</param>
      <returns>Gera uma exceção <see cref="T:System.NotSupportedException" /> em todos os casos.</returns>
      <exception cref="T:System.NotSupportedException">Em todos os casos.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>Obtém uma coleção que contém os valores no dicionário.</summary>
      <returns>Uma coleção que contém os valores no objeto que implementa <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary>Obtém uma coleção enumerável que contém as chaves no dicionário somente leitura.</summary>
      <returns>Uma coleção enumerável que contém as chaves no dicionário somente leitura.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary>Obtém uma coleção enumerável que contém os valores no dicionário somente leitura.</summary>
      <returns>Uma coleção enumerável que contém os valores no dicionário somente leitura.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia os elementos do dicionário para uma matriz, começando no índice da matriz especificada.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados do dicionário. A matriz deve ter indexação com base em zero.</param>
      <param name="index">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> é multidimensional.  

ou - 
O número de elementos no dicionário de origem é maior do que o espaço disponível de <paramref name="index" /> até o final do <paramref name="array" /> de destino.  

ou - 
O tipo do dicionário de origem não pode ser convertido automaticamente no tipo do <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>Obtém um valor que indica se o acesso ao dicionário é sincronizado (thread-safe).</summary>
      <returns>
        <see langword="true" />Se o acesso ao dicionário for sincronizado (seguro para thread); caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>Obtém um objeto que pode ser usado para sincronizar o acesso ao dicionário.</summary>
      <returns>Um objeto que pode ser usado para sincronizar o acesso ao dicionário.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Gera uma exceção <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <param name="key">A chave do elemento a ser adicionada.</param>
      <param name="value">O valor do elemento a ser adicionado.</param>
      <exception cref="T:System.NotSupportedException">Em todos os casos.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Clear">
      <summary>Gera uma exceção <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <exception cref="T:System.NotSupportedException">Em todos os casos.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determina se o dicionário contém um elemento que tem a chave especificada.</summary>
      <param name="key">A chave a ser localizada no dicionário.</param>
      <returns>
        <see langword="true" /> se o dicionário contiver um elemento que tem a chave especificada; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>Retorna um enumerador para o dicionário.</summary>
      <returns>Um enumerador para o dicionário.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>Obtém um valor que indica se o dicionário tem um tamanho fixo.</summary>
      <returns>
        <see langword="true" />Se o dicionário tiver um tamanho fixo; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>Obtém um valor que indica se o dicionário é somente leitura.</summary>
      <returns>
        <see langword="true" /> em todos os casos.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>Obtém o elemento que tem a chave especificada.</summary>
      <param name="key">A chave do elemento a ser obtida ou adicionada.</param>
      <returns>O elemento que tem a chave especificada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">A propriedade foi definida.  

ou - 
A propriedade foi definida, <paramref name="key" /> não existe na coleção e o dicionário tem um tamanho fixo.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Keys">
      <summary>Obtém uma coleção que contém as chaves do dicionário.</summary>
      <returns>Uma coleção que contém as chaves do dicionário.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Gera uma exceção <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <param name="key">A chave do elemento a ser removido.</param>
      <exception cref="T:System.NotSupportedException">Em todos os casos.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Values">
      <summary>Obtém uma coleção que contém os valores no dicionário.</summary>
      <returns>Uma coleção que contém os valores no dicionário.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um enumerador que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
      <summary>Recupera o valor associado à chave especificada.</summary>
      <param name="key">A chave cujo valor será recuperado.</param>
      <param name="value">Quando esse método for retornado, o valor associado à chave especificada, se a chave for encontrada; caso contrário, o valor padrão do tipo do parâmetro <paramref name="value" />. Este parâmetro é passado não inicializado.</param>
      <returns>
        <see langword="true" /> se o objeto que implementa o <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> contiver um elemento com a chave especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection">
      <summary>Representa uma coleção somente leitura dos valores de um objeto <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>Copia os elementos da coleção para uma matriz, começando em um índice de matriz específico.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados da coleção. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> é multidimensional.  

ou - 
O número de elementos na coleção de origem é maior do que o espaço disponível do <paramref name="arrayIndex" /> até o final do <paramref name="array" /> de destino.  

ou - 
O tipo <paramref name="T" /> não pode ser convertido automaticamente no tipo de destino <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.Count">
      <summary>Obtém o número de elementos na coleção.</summary>
      <returns>O número de elementos na coleção.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.GetEnumerator">
      <summary>Retorna um enumerador que itera pela coleção.</summary>
      <returns>Um enumerador que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
      <summary>Gera uma exceção <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <param name="item">O objeto a ser adicionado à coleção.</param>
      <exception cref="T:System.NotSupportedException">Em todos os casos.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
      <summary>Gera uma exceção <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <exception cref="T:System.NotSupportedException">Em todos os casos.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
      <summary>Determina se a coleção contém um valor específico.</summary>
      <param name="item">O objeto a ser localizado na coleção.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> for encontrado na coleção; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
      <summary>Obtém um valor que indica se a coleção é somente leitura.</summary>
      <returns>
        <see langword="true" /> em todos os casos.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
      <summary>Gera uma exceção <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <param name="item">O objeto a ser removido da coleção.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> foi removido da coleção com êxito; caso contrário, <see langword="false" />. Esse método também retornará <see langword="false" /> se o item não for encontrado na coleção original.</returns>
      <exception cref="T:System.NotSupportedException">Em todos os casos.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia os elementos da coleção para uma matriz, começando em um índice de matriz específico.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados da coleção. A matriz deve ter indexação com base em zero.</param>
      <param name="index">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> é multidimensional.  

ou - 
O número de elementos na coleção de origem é maior do que o espaço disponível do <paramref name="index" /> até o final do <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtém um valor que indica se o acesso à coleção é sincronizado (thread-safe).</summary>
      <returns>
        <see langword="true" />Se o acesso à coleção for sincronizado (thread-safe); caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtém um objeto que pode ser usado para sincronizar o acesso à coleção.</summary>
      <returns>Um objeto que pode ser usado para sincronizar o acesso à coleção.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera pela coleção.</summary>
      <returns>Um enumerador que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Values">
      <summary>Obtém uma coleção que contém os valores no dicionário.</summary>
      <returns>Uma coleção que contém os valores no objeto que implementa <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</returns>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1">
      <summary>Representa um <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> somente leitura.</summary>
      <typeparam name="T">O tipo dos elementos na coleção.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" /> que funciona como um wrapper em torno do <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> especificado.</summary>
      <param name="list">O <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> com o qual criar esta instância da classe <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> é <see langword="null" />.</exception>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged">
      <summary>Ocorre quando um item é adicionado ou removido.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>Aciona o evento <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged" /> usando os argumentos fornecidos.</summary>
      <param name="args">Argumentos do evento que está sendo criado.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Aciona o evento <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged" /> usando os argumentos fornecidos.</summary>
      <param name="args">Argumentos do evento que está sendo criado.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged">
      <summary>Ocorre quando um valor de propriedade é alterado.</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>Ocorre quando a coleção é alterada.</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Ocorre quando um valor de propriedade é alterado.</summary>
    </member>
    <member name="T:System.Collections.Specialized.INotifyCollectionChanged">
      <summary>Notifica os ouvintes de alterações dinâmicas, como quando um item é adicionado e removido ou toda a lista é limpa.</summary>
    </member>
    <member name="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged">
      <summary>Ocorre quando a coleção é alterada.</summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedAction">
      <summary>Descreve a ação que causou um evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add">
      <summary>O item foi adicionado à coleção.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move">
      <summary>O item foi movido dentro da coleção.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove">
      <summary>O item foi removido da coleção.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace">
      <summary>O item foi substituído na coleção.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset">
      <summary>O conteúdo da coleção foi limpo.</summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs">
      <summary>Fornece dados para o evento de <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> .</summary>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que descreve uma alteração <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />.</summary>
      <param name="action">A ação que causou o evento. Isso deve ser definido como <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />.</param>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que descreve uma alteração de vários itens.</summary>
      <param name="action">A ação que causou o evento. Pode ser definido como <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> ou <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</param>
      <param name="changedItems">Os itens que são afetados pela alteração.</param>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que descreve uma alteração <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> de vários itens.</summary>
      <param name="action">A ação que causou o evento. Isso pode ser definido apenas como <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</param>
      <param name="newItems">Os novos itens que estão substituindo os itens originais.</param>
      <param name="oldItems">Os itens originais que são substituídos.</param>
      <exception cref="T:System.ArgumentException">Se <paramref name="action" /> não for Replace.</exception>
      <exception cref="T:System.ArgumentNullException">Se <paramref name="oldItems" /> ou <paramref name="newItems" /> for nulo.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que descreve uma alteração <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> de vários itens.</summary>
      <param name="action">A ação que causou o evento. Isso pode ser definido apenas como <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</param>
      <param name="newItems">Os novos itens que estão substituindo os itens originais.</param>
      <param name="oldItems">Os itens originais que são substituídos.</param>
      <param name="startingIndex">O índice do primeiro item dos itens que estão sendo substituídos.</param>
      <exception cref="T:System.ArgumentException">Se <paramref name="action" /> não for Replace.</exception>
      <exception cref="T:System.ArgumentNullException">Se <paramref name="oldItems" /> ou <paramref name="newItems" /> for nulo.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que descreve uma alteração de vários itens ou uma alteração de <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />.</summary>
      <param name="action">A ação que causou o evento. Isso pode ser definido como <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> ou <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</param>
      <param name="changedItems">Os itens afetados pela alteração.</param>
      <param name="startingIndex">O índice no qual ocorreu a alteração.</param>
      <exception cref="T:System.ArgumentException">Se <paramref name="action" /> não for Reset, Add ou Remove, se <paramref name="action" /> for Reset e <paramref name="changedItems" /> não for nulo ou <paramref name="startingIndex" /> não for -1 ou se a ação for Add ou Remove e <paramref name="startingIndex" /> for menor que -1.</exception>
      <exception cref="T:System.ArgumentNullException">Se <paramref name="action" /> for Add ou Remove e <paramref name="changedItems" /> for nulo.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que descreve uma alteração <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" /> de vários itens.</summary>
      <param name="action">A ação que causou o evento. Isso pode ser definido apenas como <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />.</param>
      <param name="changedItems">Os itens afetados pela alteração.</param>
      <param name="index">O novo índice para os itens alterados.</param>
      <param name="oldIndex">O índice antigo para os itens alterados.</param>
      <exception cref="T:System.ArgumentException">Se <paramref name="action" /> não for Mover ou se <paramref name="index" /> for menor que 0.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que descreve uma alteração de um item.</summary>
      <param name="action">A ação que causou o evento. Isso pode ser definido como <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> ou <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</param>
      <param name="changedItem">O item afetado pela alteração.</param>
      <exception cref="T:System.ArgumentException">Se <paramref name="action" /> não for Reset, Add nem Remove ou se <paramref name="action" /> for Reset e <paramref name="changedItem" /> não for nulo.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que descreve uma alteração de um item.</summary>
      <param name="action">A ação que causou o evento. Isso pode ser definido como <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> ou <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</param>
      <param name="changedItem">O item afetado pela alteração.</param>
      <param name="index">O índice no qual ocorreu a alteração.</param>
      <exception cref="T:System.ArgumentException">Se <paramref name="action" /> não for Reset, Add nem Remove ou se <paramref name="action" /> for Reset e <paramref name="changedItems" /> não for nulo ou <paramref name="index" /> não for -1.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que descreve uma alteração <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" /> de um item.</summary>
      <param name="action">A ação que causou o evento. Isso pode ser definido apenas como <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />.</param>
      <param name="changedItem">O item afetado pela mudança.</param>
      <param name="index">O novo índice para o item alterado.</param>
      <param name="oldIndex">O índice antigo para o item alterado.</param>
      <exception cref="T:System.ArgumentException">Se <paramref name="action" /> não for Mover ou se <paramref name="index" /> for menor que 0.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que descreve uma alteração <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> de um item.</summary>
      <param name="action">A ação que causou o evento. Isso pode ser definido apenas como <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</param>
      <param name="newItem">O novo item que está substituindo o item original.</param>
      <param name="oldItem">O item original que é substituído.</param>
      <exception cref="T:System.ArgumentException">Se <paramref name="action" /> não for Replace.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que descreve uma alteração <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> de um item.</summary>
      <param name="action">A ação que causou o evento. Isso pode ser definido como <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</param>
      <param name="newItem">O novo item que está substituindo o item original.</param>
      <param name="oldItem">O item original que é substituído.</param>
      <param name="index">O índice do item que está sendo substituído.</param>
      <exception cref="T:System.ArgumentException">Se <paramref name="action" /> não for Replace.</exception>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.Action">
      <summary>Obtém a ação que causou o evento.</summary>
      <returns>Um valor de <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction" /> que descreve a ação que causou o evento.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems">
      <summary>Obtém a lista de novos itens envolvidos na alteração.</summary>
      <returns>A lista de novos itens envolvidos na alteração.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewStartingIndex">
      <summary>Obtém o índice no qual a alteração ocorreu.</summary>
      <returns>O índice baseado em zero no qual a alteração ocorreu.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldItems">
      <summary>Obtém a lista de itens afetados por uma ação de <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />, Remover ou Mover.</summary>
      <returns>A lista de itens afetados por uma ação de <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />, Remover ou Mover.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldStartingIndex">
      <summary>Obtém o índice no qual ocorreu uma ação <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />, Remove ou Replace.</summary>
      <returns>O índice baseado em zero no qual ocorreu uma ação <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />, Remove ou Replace.</returns>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventHandler">
      <summary>Representa o método que manipula o evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
      <param name="sender">O objeto que gerencie o evento.</param>
      <param name="e">Informações sobre o evento.</param>
    </member>
    <member name="T:System.ComponentModel.DataErrorsChangedEventArgs">
      <summary>Fornece dados para o evento de <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.DataErrorsChangedEventArgs.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DataErrorsChangedEventArgs" />.</summary>
      <param name="propertyName">O nome da propriedade que contém um erro.  <see langword="null" /> ou <see cref="F:System.String.Empty" /> se o erro está no nível do objeto.</param>
    </member>
    <member name="P:System.ComponentModel.DataErrorsChangedEventArgs.PropertyName">
      <summary>Obtém o nome da propriedade que tem um erro.</summary>
      <returns>O nome da propriedade que contém um erro. <see langword="null" /> ou <see cref="F:System.String.Empty" /> se o erro está no nível do objeto.</returns>
    </member>
    <member name="T:System.ComponentModel.INotifyDataErrorInfo">
      <summary>Define os membros que classes de entidade de dados podem implementar para dar suporte à validação personalizada síncrona e assíncrona.</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged">
      <summary>Ocorre quando os erros de validação foram alterados para uma propriedade ou para a entidade inteira.</summary>
    </member>
    <member name="M:System.ComponentModel.INotifyDataErrorInfo.GetErrors(System.String)">
      <summary>Obtém os erros de validação para uma propriedade especificada ou para a entidade inteira.</summary>
      <param name="propertyName">O nome da propriedade para a qual recuperar os erros de validação ou então <see langword="null" /> ou <see cref="F:System.String.Empty" />, para recuperar os erros de nível de entidade.</param>
      <returns>Os erros de validação para a propriedade ou entidade.</returns>
    </member>
    <member name="P:System.ComponentModel.INotifyDataErrorInfo.HasErrors">
      <summary>Obtém um valor que indica se a entidade tem erros de validação.</summary>
      <returns>
        <see langword="true" /> se a entidade tiver erros de validação no momento; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanged">
      <summary>Notifica os clientes que um valor da propriedade foi alterado.</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
      <summary>Ocorre quando um valor de propriedade é alterado.</summary>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanging">
      <summary>Notifica os clientes que um valor de propriedade está sendo alterado.</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging">
      <summary>Ocorre quando um valor da propriedade está sendo alterado.</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventArgs">
      <summary>Fornece dados para o evento de <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventArgs.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />.</summary>
      <param name="propertyName">O nome da propriedade que foi modificada.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName">
      <summary>Obtém o nome da propriedade que foi modificada.</summary>
      <returns>O nome da propriedade que foi modificada.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventHandler">
      <summary>Representa o método que manipulará o evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> gerado quando uma propriedade é alterada em um componente.</summary>
      <param name="sender">A fonte do evento.</param>
      <param name="e">Um <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.PropertyChangingEventArgs">
      <summary>Fornece dados para o evento de <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangingEventArgs.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.PropertyChangingEventArgs" />.</summary>
      <param name="propertyName">O nome da propriedade cujo valor está sendo alterado.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangingEventArgs.PropertyName">
      <summary>Obtém o nome da propriedade cujo valor está sendo alterado.</summary>
      <returns>O nome da propriedade cujo valor está sendo alterado.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyChangingEventHandler">
      <summary>Representa o método que manipulará o evento <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging" /> de uma interface <see cref="T:System.ComponentModel.INotifyPropertyChanging" />.</summary>
      <param name="sender">A fonte do evento.</param>
      <param name="e">Um <see cref="T:System.ComponentModel.PropertyChangingEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary>Especifica o tipo a ser usado como um conversor para o objeto ao qual este atributo está associado.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TypeConverterAttribute" /> com o conversor de tipo padrão, que é uma cadeia de caracteres vazia ("").</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TypeConverterAttribute" /> usando o nome de tipo especificado como o conversor de dados do objeto ao qual esse atributo está associado.</summary>
      <param name="typeName">O nome totalmente qualificado da classe a ser usada para conversão de dados do objeto ao qual esse atributo está associado.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TypeConverterAttribute" /> usando o tipo especificado como o conversor de dados do objeto ao qual esse atributo está associado.</summary>
      <param name="type">Um <see cref="T:System.Type" /> que representa o tipo da classe de conversão a ser usada para conversão de dados do objeto ao qual esse atributo está associado.</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary>Obtém o nome de tipo totalmente qualificado da <see cref="T:System.Type" /> a ser usada como conversor do objeto ao qual esse atributo está associado.</summary>
      <returns>O nome de tipo totalmente qualificado do <see cref="T:System.Type" /> a ser usado como um conversor para o objeto ao qual este atributo está associado ou uma cadeia de caracteres vazia (""), se não houver nenhum. O valor padrão é uma cadeia de caracteres vazia ("").</returns>
    </member>
    <member name="F:System.ComponentModel.TypeConverterAttribute.Default">
      <summary>Especifica o tipo a ser usado como um conversor para o objeto ao qual este atributo está associado.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.Equals(System.Object)">
      <summary>Retorna se o valor do objeto especificado é igual ao <see cref="T:System.ComponentModel.TypeConverterAttribute" /> atual.</summary>
      <param name="obj">O objeto cuja igualdade de valor deve ser testada.</param>
      <returns>
        <see langword="true" /> se o valor do objeto fornecido for igual ao do <see cref="T:System.ComponentModel.TypeConverterAttribute" /> atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código hash do <see cref="T:System.ComponentModel.TypeConverterAttribute" /> atual.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProviderAttribute">
      <summary>Especifica o provedor de descrição de tipo personalizado para uma classe. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> usando o nome do tipo especificado.</summary>
      <param name="typeName">O nome qualificado do tipo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> usando o tipo especificado.</summary>
      <param name="type">O tipo a ser armazenado no atributo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptionProviderAttribute.TypeName">
      <summary>Obtém o nome de tipo do provedor de descrição de tipo.</summary>
      <returns>Um <see cref="T:System.String" /> valor que contém o nome do tipo <see cref="T:System.ComponentModel.TypeDescriptionProvider" />qualificado para.</returns>
    </member>
    <member name="T:System.Reflection.ICustomTypeProvider">
      <summary>Representa um objeto que fornece um tipo personalizado.</summary>
    </member>
    <member name="M:System.Reflection.ICustomTypeProvider.GetCustomType">
      <summary>Obtém o tipo personalizado fornecido por esse objeto.</summary>
      <returns>O tipo personalizado.</returns>
    </member>
    <member name="T:System.Windows.Input.ICommand">
      <summary>Define um comando.</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.CanExecute(System.Object)">
      <summary>Define o método que determina se o comando pode ser executado em seu estado atual.</summary>
      <param name="parameter">Dados usados pelo comando.  Se o comando não exigir que dados sejam passados, esse objeto poderá ser definido como <see langword="null" />.</param>
      <returns>
        <see langword="true" /> se esse comando puder ser executado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="E:System.Windows.Input.ICommand.CanExecuteChanged">
      <summary>Ocorre em caso de alterações que afetam se o comando deve ser executado ou não.</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.Execute(System.Object)">
      <summary>Define o método a ser chamado quando o comando for invocado.</summary>
      <param name="parameter">Dados usados pelo comando.  Se o comando não exigir que dados sejam passados, esse objeto poderá ser definido como <see langword="null" />.</param>
    </member>
    <member name="T:System.Windows.Markup.ValueSerializerAttribute">
      <summary>Identifica a classe <see cref="T:System.Windows.Markup.ValueSerializer" /> que um tipo ou propriedade devem usar quando são serializados.</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Markup.ValueSerializerAttribute" /> usando uma cadeia de caracteres de nome qualificado do assembly de tipo.</summary>
      <param name="valueSerializerTypeName">A cadeia de caracteres de nome qualificado do assembly de tipo da classe <see cref="T:System.Windows.Markup.ValueSerializer" /> a ser usada.</param>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Markup.ValueSerializerAttribute" /> usando o tipo especificado.</summary>
      <param name="valueSerializerType">Um tipo que representa o tipo da classe <see cref="T:System.Windows.Markup.ValueSerializer" />.</param>
    </member>
    <member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerType">
      <summary>Obtém o tipo da classe <see cref="T:System.Windows.Markup.ValueSerializer" /> informado por esse atributo.</summary>
      <returns>O tipo do <see cref="T:System.Windows.Markup.ValueSerializer" />.</returns>
    </member>
    <member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerTypeName">
      <summary>Obtém nome qualificado do assembly do tipo <see cref="T:System.Windows.Markup.ValueSerializer" /> para esse tipo ou a propriedade.</summary>
      <returns>O nome qualificado do assembly do tipo.</returns>
    </member>
  </members>
</doc>
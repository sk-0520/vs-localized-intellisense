<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Runtime.Numerics</name>
  </assembly>
  <members>
    <member name="T:System.Numerics.BigInteger">
      <summary vsli:raw="Represents an arbitrarily large signed integer.">Representa um inteiro com sinal arbitrariamente grande.</summary>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Byte[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; structure using the values in a byte array.">Inicializa uma nova instância da estrutura <see cref="T:System.Numerics.BigInteger" /> usando os valores de uma matriz de bytes.</summary>
      <param name="value" vsli:raw="An array of byte values in little-endian order.">Uma matriz de valores de bytes em ordem little endian.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Decimal)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; structure using a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value.">Inicializa uma nova instância da estrutura <see cref="T:System.Numerics.BigInteger" /> usando um valor <see cref="T:System.Decimal" />.</summary>
      <param name="value" vsli:raw="A decimal number.">Um número decimal.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; structure using a double-precision floating-point value.">Inicializa uma nova instância de estrutura <see cref="T:System.Numerics.BigInteger" /> usando um valor de ponto flutuante de precisão dupla.</summary>
      <param name="value" vsli:raw="A double-precision floating-point value.">Um valor de ponto flutuante de precisão dupla.</param>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see cref=&quot;F:System.Double.NaN&quot; /&gt;, &lt;see cref=&quot;F:System.Double.NegativeInfinity&quot; /&gt;, or &lt;see cref=&quot;F:System.Double.PositiveInfinity&quot; /&gt;.">
        <paramref name="value" /> é <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> ou <see cref="F:System.Double.PositiveInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; structure using a 32-bit signed integer value.">Inicializa uma nova instância da estrutura <see cref="T:System.Numerics.BigInteger" /> usando um valor inteiro com sinal de 32 bits.</summary>
      <param name="value" vsli:raw="A 32-bit signed integer.">Um inteiro com sinal de 32 bits.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Int64)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; structure using a 64-bit signed integer value.">Inicializa uma nova instância da estrutura <see cref="T:System.Numerics.BigInteger" /> usando um valor inteiro com sinal de 64 bits.</summary>
      <param name="value" vsli:raw="A 64-bit signed integer.">Um inteiro com sinal de 64 bits.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Boolean)">
      <param name="value" vsli:raw="A read-only span of bytes representing the big integer." />
      <param name="isUnsigned" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate &lt;paramref name=&quot;value&quot; /&gt; uses unsigned encoding; otherwise, &lt;see langword=&quot;false&quot; /&gt; (the default value)." />
      <param name="isBigEndian" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate &lt;paramref name=&quot;value&quot; /&gt; is in big-endian byte order; otherwise, &lt;see langword=&quot;false&quot; /&gt;  (the default value)." />
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Single)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; structure using a single-precision floating-point value.">Inicializa uma nova instância da estrutura <see cref="T:System.Numerics.BigInteger" /> usando um valor de ponto flutuante de precisão simples.</summary>
      <param name="value" vsli:raw="A single-precision floating-point value.">Um valor de ponto flutuante de precisão simples.</param>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see cref=&quot;F:System.Single.NaN&quot; /&gt;, &lt;see cref=&quot;F:System.Single.NegativeInfinity&quot; /&gt;, or &lt;see cref=&quot;F:System.Single.PositiveInfinity&quot; /&gt;.">
        <paramref name="value" /> é <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" /> ou <see cref="F:System.Single.PositiveInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.UInt32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; structure using an unsigned 32-bit integer value.">Inicializa uma nova instância da estrutura <see cref="T:System.Numerics.BigInteger" /> usando um valor inteiro de 32 bits sem sinal.</summary>
      <param name="value" vsli:raw="An unsigned 32-bit integer value.">Um valor inteiro de 32 bits sem sinal.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.UInt64)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; structure with an unsigned 64-bit integer value.">Inicializa uma nova instância da estrutura <see cref="T:System.Numerics.BigInteger" /> com um valor inteiro de 64 bits sem sinal.</summary>
      <param name="value" vsli:raw="An unsigned 64-bit integer.">Um inteiro de 64 bits sem sinal.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)">
      <summary vsli:raw="Gets the absolute value of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object.">Obtém o valor absoluto de um objeto <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value" vsli:raw="A number.">Um número.</param>
      <returns vsli:raw="The absolute value of &lt;paramref name=&quot;value&quot; /&gt;.">O valor absoluto de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Adds two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values and returns the result.">Adiciona dois valores de <see cref="T:System.Numerics.BigInteger" /> e retorna o resultado.</summary>
      <param name="left" vsli:raw="The first value to add.">O primeiro valor a ser adicionado.</param>
      <param name="right" vsli:raw="The second value to add.">O segundo valor a ser adicionado.</param>
      <returns vsli:raw="The sum of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">A soma de <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Compares two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values and returns an integer that indicates whether the first value is less than, equal to, or greater than the second value.">Compara dois valores <see cref="T:System.Numerics.BigInteger" /> e retorna um inteiro que indica se o primeiro valor é menor que, igual a ou maior que o segundo valor.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="A signed integer that indicates the relative values of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;, as shown in the following table.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Condition&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Less than zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;left&quot; /&gt; is less than &lt;paramref name=&quot;right&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;left&quot; /&gt; equals &lt;paramref name=&quot;right&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Greater than zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Um inteiro assinado que indica os valores relativos de <paramref name="left" /> e <paramref name="right" />, conforme mostrado na tabela a seguir.  
  Valor 
  Condição 
  Menor que zero 
 <paramref name="left" /> é menor que <paramref name="right" />.  

  Zero 
 <paramref name="left" /> é igual a <paramref name="right" />.  

  Maior que zero 
 <paramref name="left" /> é maior que <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Int64)">
      <summary vsli:raw="Compares this instance to a signed 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the signed 64-bit integer.">Compara essa instância a um inteiro com sinal de 64 bits e retorna um inteiro que indica se o valor dessa instância é menor, igual ou maior que o valor do inteiro com sinal de 64 bits.</summary>
      <param name="other" vsli:raw="The signed 64-bit integer to compare.">O inteiro com sinal de 64 bits para comparar.</param>
      <returns vsli:raw="A signed integer value that indicates the relationship of this instance to &lt;paramref name=&quot;other&quot; /&gt;, as shown in the following table.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Return value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Less than zero&lt;/term&gt;&lt;description&gt; The current instance is less than &lt;paramref name=&quot;other&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Zero&lt;/term&gt;&lt;description&gt; The current instance equals &lt;paramref name=&quot;other&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Greater than zero&lt;/term&gt;&lt;description&gt; The current instance is greater than &lt;paramref name=&quot;other&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Um valor de inteiro com sinal que indica a relação desta instância com <paramref name="other" />, conforme mostrado na tabela a seguir.  
  Valor retornado 
  Descrição 
  Menor que zero 
  A instância atual é menor que <paramref name="other" />.  

  Zero 
  A instância atual é igual a <paramref name="other" />.  

  Maior que zero 
  A instância atual é maior que <paramref name="other" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)">
      <summary vsli:raw="Compares this instance to a second &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.">Compara esta instância a um segundo <see cref="T:System.Numerics.BigInteger" /> e retorna um inteiro que indica se o valor desta instância é menor, igual ou maior que o valor do objeto especificado.</summary>
      <param name="other" vsli:raw="The object to compare.">O objeto a ser comparado.</param>
      <returns vsli:raw="A signed integer value that indicates the relationship of this instance to &lt;paramref name=&quot;other&quot; /&gt;, as shown in the following table.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Return value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Less than zero&lt;/term&gt;&lt;description&gt; The current instance is less than &lt;paramref name=&quot;other&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Zero&lt;/term&gt;&lt;description&gt; The current instance equals &lt;paramref name=&quot;other&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Greater than zero&lt;/term&gt;&lt;description&gt; The current instance is greater than &lt;paramref name=&quot;other&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Um valor de inteiro com sinal que indica a relação desta instância com <paramref name="other" />, conforme mostrado na tabela a seguir.  
  Valor retornado 
  Descrição 
  Menor que zero 
  A instância atual é menor que <paramref name="other" />.  

  Zero 
  A instância atual é igual a <paramref name="other" />.  

  Maior que zero 
  A instância atual é maior que <paramref name="other" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Object)">
      <summary vsli:raw="Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.">Compara esta instância a um objeto especificado e retorna um inteiro que indica se o valor desta instância é menor, igual ou maior que o valor do objeto especificado.</summary>
      <param name="obj" vsli:raw="The object to compare.">O objeto a ser comparado.</param>
      <returns vsli:raw="A signed integer that indicates the relationship of the current instance to the &lt;paramref name=&quot;obj&quot; /&gt; parameter, as shown in the following table.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Return value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Less than zero&lt;/term&gt;&lt;description&gt; The current instance is less than &lt;paramref name=&quot;obj&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Zero&lt;/term&gt;&lt;description&gt; The current instance equals &lt;paramref name=&quot;obj&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Greater than zero&lt;/term&gt;&lt;description&gt; The current instance is greater than &lt;paramref name=&quot;obj&quot; /&gt;, or the &lt;paramref name=&quot;obj&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Um inteiro com sinal que indica a relação da instância atual com o parâmetro <paramref name="obj" />, conforme mostrado na tabela a seguir.  
  Valor retornado 
  Descrição 
  Menor que zero 
  A instância atual é menor que <paramref name="obj" />.  

  Zero 
  A instância atual é igual a <paramref name="obj" />.  

  Maior que zero 
  A instância atual é maior do que <paramref name="obj" /> ou o parâmetro <paramref name="obj" /> é <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is not a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">
        <paramref name="obj" /> não é um <see cref="T:System.Numerics.BigInteger" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.UInt64)">
      <summary vsli:raw="Compares this instance to an unsigned 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the unsigned 64-bit integer.">Compara essa instância a um inteiro sem sinal de 64 bits e retorna um inteiro que indica se o valor dessa instância é menor, igual ou maior que o valor do inteiro sem sinal de 64 bits.</summary>
      <param name="other" vsli:raw="The unsigned 64-bit integer to compare.">O inteiro sem sinal de 64 bits para comparar.</param>
      <returns vsli:raw="A signed integer that indicates the relative value of this instance and &lt;paramref name=&quot;other&quot; /&gt;, as shown in the following table.&#xA;          &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt;Return value&lt;/term&gt;&lt;description&gt;Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt;Less than zero&lt;/term&gt;&lt;description&gt;The current instance is less than &lt;paramref name=&quot;other&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;Zero&lt;/term&gt;&lt;description&gt;The current instance equals &lt;paramref name=&quot;other&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;Greater than zero&lt;/term&gt;&lt;description&gt;The current instance is greater than &lt;paramref name=&quot;other&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Um inteiro com sinal que indica o valor relativo dessa instância e <paramref name="other" />, conforme mostrado na tabela a seguir.  
  Valor retornado 
  Descrição 
  Menor que zero 
  A instância atual é menor que <paramref name="other" />.  

  Zero 
  A instância atual é igual a <paramref name="other" />.  

  Maior que zero 
  A instância atual é maior que <paramref name="other" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Divides one &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value by another and returns the result.">Divide um valor <see cref="T:System.Numerics.BigInteger" /> em outro e retorna o resultado.</summary>
      <param name="dividend" vsli:raw="The value to be divided.">O valor a ser dividido.</param>
      <param name="divisor" vsli:raw="The value to divide by.">O valor pelo qual dividir.</param>
      <returns vsli:raw="The quotient of the division.">O quociente da divisão.</returns>
      <exception cref="T:System.DivideByZeroException" vsli:raw="&lt;paramref name=&quot;divisor&quot; /&gt; is 0 (zero).">
        <paramref name="divisor" /> é 0 (zero).</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)">
      <summary vsli:raw="Divides one &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value by another, returns the result, and returns the remainder in an output parameter.">Divide um valor <see cref="T:System.Numerics.BigInteger" /> por outro, retorna o resultado e retorna o restante em um parâmetro de saída.</summary>
      <param name="dividend" vsli:raw="The value to be divided.">O valor a ser dividido.</param>
      <param name="divisor" vsli:raw="The value to divide by.">O valor pelo qual dividir.</param>
      <param name="remainder" vsli:raw="When this method returns, contains a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value that represents the remainder from the division. This parameter is passed uninitialized.">Quando este método retorna, contém um valor <see cref="T:System.Numerics.BigInteger" /> que representa o restante da divisão. Este parâmetro é passado não inicializado.</param>
      <returns vsli:raw="The quotient of the division.">O quociente da divisão.</returns>
      <exception cref="T:System.DivideByZeroException" vsli:raw="&lt;paramref name=&quot;divisor&quot; /&gt; is 0 (zero).">
        <paramref name="divisor" /> é 0 (zero).</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Int64)">
      <summary vsli:raw="Returns a value that indicates whether the current instance and a signed 64-bit integer have the same value.">Retorna um valor que indica se a instância atual e um inteiro com sinal de 64 bits têm o mesmo valor.</summary>
      <param name="other" vsli:raw="The signed 64-bit integer value to compare.">O valor inteiro com sinal de 64 bits para comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the signed 64-bit integer and the current instance have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o inteiro com sinal de 64 bits e a instância atual tiverem o mesmo valor; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether the current instance and a specified &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object have the same value.">Retorna um valor que indica se a instância atual e um objeto <see cref="T:System.Numerics.BigInteger" /> especificado têm o mesmo valor.</summary>
      <param name="other" vsli:raw="The object to compare.">O objeto a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object and &lt;paramref name=&quot;other&quot; /&gt; have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se este objeto <see cref="T:System.Numerics.BigInteger" /> e <paramref name="other" /> tiverem o mesmo valor; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the current instance and a specified object have the same value.">Retorna um valor que indica se a instância atual e um objeto especificado têm o mesmo valor.</summary>
      <param name="obj" vsli:raw="The object to compare.">O objeto a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;obj&quot; /&gt; argument is a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object, and its value is equal to the value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <paramref name="obj" /> argumento for um objeto <see cref="T:System.Numerics.BigInteger" /> e seu valor for igual ao valor da instância <see cref="T:System.Numerics.BigInteger" /> atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.UInt64)">
      <summary vsli:raw="Returns a value that indicates whether the current instance and an unsigned 64-bit integer have the same value.">Retorna um valor que indica se a instância atual e um inteiro sem sinal de 64 bits têm o mesmo valor.</summary>
      <param name="other" vsli:raw="The unsigned 64-bit integer to compare.">O inteiro sem sinal de 64 bits para comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and the unsigned 64-bit integer have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a instância atual e o inteiro sem sinal de 64 bits tiverem o mesmo valor; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GetByteCount(System.Boolean)">
      <summary vsli:raw="Gets the number of bytes that will be output by &lt;see cref=&quot;M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)&quot; /&gt; and &lt;see cref=&quot;M:System.Numerics.BigInteger.TryWriteBytes(System.Span{System.Byte},System.Int32@,System.Boolean,System.Boolean)&quot; /&gt;.">Obtém o número de bytes que serão gerados por <see cref="M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)" /> e <see cref="M:System.Numerics.BigInteger.TryWriteBytes(System.Span{System.Byte},System.Int32@,System.Boolean,System.Boolean)" />.</summary>
      <param name="isUnsigned" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use unsigned encoding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para usar a codificação sem sinal; caso contrário, <see langword="false" />.</param>
      <returns vsli:raw="The number of bytes.">O número de bytes.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GetHashCode">
      <summary vsli:raw="Returns the hash code for the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object.">Retorna o código hash para o objeto <see cref="T:System.Numerics.BigInteger" /> atual.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Finds the greatest common divisor of two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values.">Localiza o maior divisor comum de dois valores <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value.">O primeiro valor.</param>
      <param name="right" vsli:raw="The second value.">O segundo valor.</param>
      <returns vsli:raw="The greatest common divisor of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">O maior divisor comum de <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsEven">
      <summary vsli:raw="Indicates whether the value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object is an even number.">Indica se o valor do objeto <see cref="T:System.Numerics.BigInteger" /> atual é um número par.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object is an even number; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor do objeto <see cref="T:System.Numerics.BigInteger" /> é um número par; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsOne">
      <summary vsli:raw="Indicates whether the value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object is &lt;see cref=&quot;P:System.Numerics.BigInteger.One&quot; /&gt;.">Indica se o valor do objeto <see cref="T:System.Numerics.BigInteger" /> atual é <see cref="P:System.Numerics.BigInteger.One" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object is &lt;see cref=&quot;P:System.Numerics.BigInteger.One&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o valor do <see cref="T:System.Numerics.BigInteger" /> objeto for <see cref="P:System.Numerics.BigInteger.One" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsPowerOfTwo">
      <summary vsli:raw="Indicates whether the value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object is a power of two.">Indica se o valor do objeto <see cref="T:System.Numerics.BigInteger" /> atual é uma potência de dois.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object is a power of two; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o valor do <see cref="T:System.Numerics.BigInteger" /> objeto for uma potência de dois; caso contrário,. <see langword="false" /></returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsZero">
      <summary vsli:raw="Indicates whether the value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object is &lt;see cref=&quot;P:System.Numerics.BigInteger.Zero&quot; /&gt;.">Indica se o valor do objeto <see cref="T:System.Numerics.BigInteger" /> atual é <see cref="P:System.Numerics.BigInteger.Zero" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object is &lt;see cref=&quot;P:System.Numerics.BigInteger.Zero&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o valor do <see cref="T:System.Numerics.BigInteger" /> objeto for <see cref="P:System.Numerics.BigInteger.Zero" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger)">
      <summary vsli:raw="Returns the natural (base &lt;see langword=&quot;e&quot; /&gt;) logarithm of a specified number.">Retorna o logaritmo natural (de base <see langword="e" />) de um número especificado.</summary>
      <param name="value" vsli:raw="The number whose logarithm is to be found.">O número cujo logaritmo deve ser encontrado.</param>
      <returns vsli:raw="The natural (base &lt;see langword=&quot;e&quot; /&gt;) logarithm of &lt;paramref name=&quot;value&quot; /&gt;, as shown in the table in the Remarks section.">O logaritmo natural (base <see langword="e" />) de <paramref name="value" />, conforme mostrado na tabela na seção Comentários.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The natural log of &lt;paramref name=&quot;value&quot; /&gt; is out of range of the &lt;see cref=&quot;T:System.Double&quot; /&gt; data type.">O log natural de <paramref name="value" /> está fora do intervalo do tipo de dados <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)">
      <summary vsli:raw="Returns the logarithm of a specified number in a specified base.">Retorna o logaritmo de um número especificado em uma base especificada.</summary>
      <param name="value" vsli:raw="A number whose logarithm is to be found.">Um número cujo logaritmo deve ser localizado.</param>
      <param name="baseValue" vsli:raw="The base of the logarithm.">A base do logaritmo.</param>
      <returns vsli:raw="The base &lt;paramref name=&quot;baseValue&quot; /&gt; logarithm of &lt;paramref name=&quot;value&quot; /&gt;, as shown in the table in the Remarks section.">O logaritmo de base <paramref name="baseValue" /> de <paramref name="value" />, conforme mostrado na tabela na seção Comentários.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The log of &lt;paramref name=&quot;value&quot; /&gt; is out of range of the &lt;see cref=&quot;T:System.Double&quot; /&gt; data type.">O log de <paramref name="value" /> está fora do intervalo do tipo de dados <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)">
      <summary vsli:raw="Returns the base 10 logarithm of a specified number.">Retorna o logaritmo de base 10 de um número especificado.</summary>
      <param name="value" vsli:raw="A number whose logarithm is to be found.">Um número cujo logaritmo deve ser localizado.</param>
      <returns vsli:raw="The base 10 logarithm of &lt;paramref name=&quot;value&quot; /&gt;, as shown in the table in the Remarks section.">O logaritmo de base 10 de <paramref name="value" />, conforme mostrado na tabela na seção Comentários.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The base 10 log of &lt;paramref name=&quot;value&quot; /&gt; is out of range of the &lt;see cref=&quot;T:System.Double&quot; /&gt; data type.">O log de base 10 de <paramref name="value" /> está fora do intervalo do tipo de dados <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns the larger of two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values.">Retorna o maior dos dois valores <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="The &lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; parameter, whichever is larger.">O parâmetro <paramref name="left" /> ou <paramref name="right" />, o que for maior.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns the smaller of two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values.">Retorna o menor de dois valores <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="The &lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; parameter, whichever is smaller.">O parâmetro <paramref name="left" /> ou <paramref name="right" />, o que for menor.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.MinusOne">
      <summary vsli:raw="Gets a value that represents the number negative one (-1).">Obtém um valor que representa o número um negativo (-1).</summary>
      <returns vsli:raw="An integer whose value is negative one (-1).">Um inteiro cujo valor é negativo (-1).</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Performs modulus division on a number raised to the power of another number.">Executa a divisão de módulo em um número elevado à potência de outro número.</summary>
      <param name="value" vsli:raw="The number to raise to the &lt;paramref name=&quot;exponent&quot; /&gt; power.">O número a ser elevado à potência <paramref name="exponent" />.</param>
      <param name="exponent" vsli:raw="The exponent to raise &lt;paramref name=&quot;value&quot; /&gt; by.">O expoente pelo qual <paramref name="value" /> será elevado.</param>
      <param name="modulus" vsli:raw="The number by which to divide &lt;paramref name=&quot;value&quot; /&gt; raised to the &lt;paramref name=&quot;exponent&quot; /&gt; power.">O número pelo qual dividir o <paramref name="value" /> elevado à potência <paramref name="exponent" />.</param>
      <returns vsli:raw="The remainder after dividing &lt;paramref name=&quot;value&quot; /&gt;exponent by &lt;paramref name=&quot;modulus&quot; /&gt;.">O resto após dividir o <paramref name="value" />exponente por <paramref name="modulus" />.</returns>
      <exception cref="T:System.DivideByZeroException" vsli:raw="&lt;paramref name=&quot;modulus&quot; /&gt; is zero.">
        <paramref name="modulus" /> é zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;exponent&quot; /&gt; is negative.">
        <paramref name="exponent" /> é negativo.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns the product of two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values.">Retorna o produto de dois valores <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first number to multiply.">O primeiro número a multiplicar.</param>
      <param name="right" vsli:raw="The second number to multiply.">O segundo número a multiplicar.</param>
      <returns vsli:raw="The product of the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters.">O produto dos parâmetros <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)">
      <summary vsli:raw="Negates a specified &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Nega um valor <see cref="T:System.Numerics.BigInteger" /> especificado.</summary>
      <param name="value" vsli:raw="The value to negate.">O valor a ser negado.</param>
      <returns vsli:raw="The result of the &lt;paramref name=&quot;value&quot; /&gt; parameter multiplied by negative one (-1).">O resultado do parâmetro <paramref name="value" /> multiplicado por um negativo (-1).</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.One">
      <summary vsli:raw="Gets a value that represents the number one (1).">Obtém um valor que representa o número um (1).</summary>
      <returns vsli:raw="An object whose value is one (1).">Um objeto cujo valor é um (1).</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Adds the values of two specified &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; objects.">Adiciona os valores dos dois objetos <see cref="T:System.Numerics.BigInteger" /> especificados.</summary>
      <param name="left" vsli:raw="The first value to add.">O primeiro valor a ser adicionado.</param>
      <param name="right" vsli:raw="The second value to add.">O segundo valor a ser adicionado.</param>
      <returns vsli:raw="The sum of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">A soma de <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Performs a bitwise &lt;see langword=&quot;And&quot; /&gt; operation on two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values.">Executa uma operação <see langword="And" /> bit a bit em dois valores <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value.">O primeiro valor.</param>
      <param name="right" vsli:raw="The second value.">O segundo valor.</param>
      <returns vsli:raw="The result of the bitwise &lt;see langword=&quot;And&quot; /&gt; operation.">O resultado da operação <see langword="And" /> bit a bit.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Performs a bitwise &lt;see langword=&quot;Or&quot; /&gt; operation on two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values.">Executa uma operação <see langword="Or" /> bit a bit em dois valores <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value.">O primeiro valor.</param>
      <param name="right" vsli:raw="The second value.">O segundo valor.</param>
      <returns vsli:raw="The result of the bitwise &lt;see langword=&quot;Or&quot; /&gt; operation.">O resultado da operação <see langword="Or" /> bit a bit.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)">
      <summary vsli:raw="Decrements a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value by 1.">Diminui um valor <see cref="T:System.Numerics.BigInteger" /> em 1.</summary>
      <param name="value" vsli:raw="The value to decrement.">O valor a ser diminuído.</param>
      <returns vsli:raw="The value of the &lt;paramref name=&quot;value&quot; /&gt; parameter decremented by 1.">O valor do parâmetro <paramref name="value" /> diminuído em 1.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Divides a specified &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value by another specified &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value by using integer division.">Divide um valor <see cref="T:System.Numerics.BigInteger" /> especificado por outro valor <see cref="T:System.Numerics.BigInteger" /> especificado usando a divisão de inteiros.</summary>
      <param name="dividend" vsli:raw="The value to be divided.">O valor a ser dividido.</param>
      <param name="divisor" vsli:raw="The value to divide by.">O valor pelo qual dividir.</param>
      <returns vsli:raw="The integral result of the division.">O resultado integral da divisão.</returns>
      <exception cref="T:System.DivideByZeroException" vsli:raw="&lt;paramref name=&quot;divisor&quot; /&gt; is 0 (zero).">
        <paramref name="divisor" /> é 0 (zero).</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a signed long integer value and a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value are equal.">Retorna um valor que indica se um valor inteiro longo com sinal e um valor <see cref="T:System.Numerics.BigInteger" /> são iguais.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se os parâmetros <paramref name="left" /> e <paramref name="right" /> tiverem o mesmo valor; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value and a signed long integer value are equal.">Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> e um valor inteiro longo com sinal são iguais.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se os parâmetros <paramref name="left" /> e <paramref name="right" /> tiverem o mesmo valor; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether the values of two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; objects are equal.">Retorna um valor que indica se os valores de dois objetos <see cref="T:System.Numerics.BigInteger" /> são iguais.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se os parâmetros <paramref name="left" /> e <paramref name="right" /> tiverem o mesmo valor; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value and an unsigned long integer value are equal.">Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> e um valor inteiro longo sem sinal são iguais.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se os parâmetros <paramref name="left" /> e <paramref name="right" /> tiverem o mesmo valor; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether an unsigned long integer value and a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value are equal.">Retorna um valor que indica se um valor inteiro longo sem sinal e um valor <see cref="T:System.Numerics.BigInteger" /> são iguais.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se os parâmetros <paramref name="left" /> e <paramref name="right" /> tiverem o mesmo valor; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Performs a bitwise exclusive &lt;see langword=&quot;Or&quot; /&gt; (&lt;see langword=&quot;XOr&quot; /&gt;) operation on two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values.">Executa uma operação exclusiva <see langword="Or" /> bit a bit (<see langword="XOr" />) em dois valores <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value.">O primeiro valor.</param>
      <param name="right" vsli:raw="The second value.">O segundo valor.</param>
      <returns vsli:raw="The result of the bitwise &lt;see langword=&quot;Or&quot; /&gt; operation.">O resultado da operação <see langword="Or" /> bit a bit.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; object to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Define uma conversão explícita de um objeto <see cref="T:System.Decimal" /> em um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">O valor a ser convertido para um <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Double)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Double&quot; /&gt; value to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Define uma conversão explícita de um valor <see cref="T:System.Double" /> para um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">O valor a ser convertido para um <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see cref=&quot;F:System.Double.NaN&quot; /&gt;, &lt;see cref=&quot;F:System.Double.PositiveInfinity&quot; /&gt;, or &lt;see cref=&quot;F:System.Double.NegativeInfinity&quot; /&gt;.">
        <paramref name="value" /> é <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" /> ou <see cref="F:System.Double.NegativeInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Byte">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to an unsigned byte value.">Define uma conversão explícita de um objeto <see cref="T:System.Numerics.BigInteger" /> em um valor de byte sem sinal.</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">O valor a ser convertido para um <see cref="T:System.Byte" />.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is less than &lt;see cref=&quot;F:System.Byte.MinValue&quot;&gt;Byte.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Byte.MaxValue&quot;&gt;Byte.MaxValue&lt;/see&gt;.">
        <paramref name="value" /> é menor que <see cref="F:System.Byte.MinValue" /> ou maior que <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Decimal">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value.">Define uma conversão explícita de um objeto <see cref="T:System.Numerics.BigInteger" /> em um valor <see cref="T:System.Decimal" />.</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">O valor a ser convertido para um <see cref="T:System.Decimal" />.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is less than &lt;see cref=&quot;F:System.Decimal.MinValue&quot;&gt;Decimal.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">
        <paramref name="value" /> é menor que <see cref="F:System.Decimal.MinValue" /> ou maior que <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Double">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to a &lt;see cref=&quot;T:System.Double&quot; /&gt; value.">Define uma conversão explícita de um objeto <see cref="T:System.Numerics.BigInteger" /> em um valor <see cref="T:System.Double" />.</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">O valor a ser convertido para um <see cref="T:System.Double" />.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int16">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to a 16-bit signed integer value.">Define uma conversão explícita de um objeto <see cref="T:System.Numerics.BigInteger" /> em um valor inteiro com sinal de 16 bits.</summary>
      <param name="value" vsli:raw="The value to convert to a 16-bit signed integer.">O valor a ser convertido em um inteiro com sinal de 16 bits.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is less than &lt;see cref=&quot;F:System.Int16.MinValue&quot;&gt;Int16.MinValue&lt;/see&gt; or is greater than &lt;see cref=&quot;F:System.Int16.MaxValue&quot;&gt;Int16.MaxValue&lt;/see&gt;.">
        <paramref name="value" /> é menor que <see cref="F:System.Int16.MinValue" /> ou maior que <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int32">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to a 32-bit signed integer value.">Define uma conversão explícita de um objeto <see cref="T:System.Numerics.BigInteger" /> para um valor inteiro com sinal de 32 bits.</summary>
      <param name="value" vsli:raw="The value to convert to a 32-bit signed integer.">O valor a ser convertido em um inteiro com sinal de 32 bits.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is less than &lt;see cref=&quot;F:System.Int32.MinValue&quot;&gt;Int32.MinValue&lt;/see&gt; or is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="value" /> é menor que <see cref="F:System.Int32.MinValue" /> ou maior que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int64">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to a 64-bit signed integer value.">Define uma conversão explícita de um objeto <see cref="T:System.Numerics.BigInteger" /> para um valor inteiro com sinal de 64 bits.</summary>
      <param name="value" vsli:raw="The value to convert to a 64-bit signed integer.">O valor a ser convertido em um inteiro com sinal de 64 bits.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is less than &lt;see cref=&quot;F:System.Int64.MinValue&quot;&gt;Int64.MinValue&lt;/see&gt; or is greater than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">
        <paramref name="value" /> é menor que <see cref="F:System.Int64.MinValue" /> ou maior que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.SByte">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to a signed 8-bit value.  &#xA;  &#xA; This API is not CLS-compliant. The compliant alternative is &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Define uma conversão explícita de um objeto <see cref="T:System.Numerics.BigInteger" /> em um valor de 8 bits com sinal.  
Esta API não compatível com CLS. A alternativa em conformidade é <see cref="T:System.Int16" />.</summary>
      <param name="value" vsli:raw="The value to convert to a signed 8-bit value.">O valor a ser convertido em um valor de 8 bits com sinal.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is less than &lt;see cref=&quot;F:System.SByte.MinValue&quot;&gt;SByte.MinValue&lt;/see&gt; or is greater than &lt;see cref=&quot;F:System.SByte.MaxValue&quot;&gt;SByte.MaxValue&lt;/see&gt;.">
        <paramref name="value" /> é menor que <see cref="F:System.SByte.MinValue" /> ou maior que <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Single">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to a single-precision floating-point value.">Define uma conversão explícita de um objeto <see cref="T:System.Numerics.BigInteger" /> em um valor de ponto flutuante de precisão simples.</summary>
      <param name="value" vsli:raw="The value to convert to a single-precision floating-point value.">O valor a ser convertido em um ponto flutuante de precisão simples.</param>
      <returns vsli:raw="An object that contains the closest possible representation of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Um objeto que contém a representação mais próxima possível do parâmetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt16">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to an unsigned 16-bit integer value.  &#xA;  &#xA; This API is not CLS-compliant. The compliant alternative is &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Define uma conversão explícita de um objeto <see cref="T:System.Numerics.BigInteger" /> em um valor inteiro sem sinal de 16 bits.  
Esta API não compatível com CLS. A alternativa em conformidade é <see cref="T:System.Int32" />.</summary>
      <param name="value" vsli:raw="The value to convert to an unsigned 16-bit integer.">O valor a ser convertido em um inteiro sem sinal de 16 bits.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is less than &lt;see cref=&quot;F:System.UInt16.MinValue&quot;&gt;UInt16.MinValue&lt;/see&gt; or is greater than &lt;see cref=&quot;F:System.UInt16.MaxValue&quot;&gt;UInt16.MaxValue&lt;/see&gt;.">
        <paramref name="value" /> é menor que <see cref="F:System.UInt16.MinValue" /> ou maior que <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt32">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to an unsigned 32-bit integer value.  &#xA;  &#xA; This API is not CLS-compliant. The compliant alternative is &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Define uma conversão explícita de um objeto <see cref="T:System.Numerics.BigInteger" /> em um valor inteiro sem sinal de 32 bits.  
Esta API não compatível com CLS. A alternativa em conformidade é <see cref="T:System.Int64" />.</summary>
      <param name="value" vsli:raw="The value to convert to an unsigned 32-bit integer.">O valor a ser convertido em um inteiro sem sinal de 32 bits.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is less than &lt;see cref=&quot;F:System.UInt32.MinValue&quot;&gt;UInt32.MinValue&lt;/see&gt; or is greater than &lt;see cref=&quot;F:System.UInt32.MaxValue&quot;&gt;UInt32.MaxValue&lt;/see&gt;.">
        <paramref name="value" /> é menor que <see cref="F:System.UInt32.MinValue" /> ou maior que <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt64">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to an unsigned 64-bit integer value.  &#xA;  &#xA; This API is not CLS-compliant. The compliant alternative is &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Define uma conversão explícita de um objeto <see cref="T:System.Numerics.BigInteger" /> em um valor inteiro sem sinal de 64 bits.  
Esta API não compatível com CLS. A alternativa em conformidade é <see cref="T:System.Double" />.</summary>
      <param name="value" vsli:raw="The value to convert to an unsigned 64-bit integer.">O valor a ser convertido em um inteiro sem sinal de 64 bits.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is less than &lt;see cref=&quot;F:System.UInt64.MinValue&quot;&gt;UInt64.MinValue&lt;/see&gt; or is greater than &lt;see cref=&quot;F:System.UInt64.MaxValue&quot;&gt;UInt64.MaxValue&lt;/see&gt;.">
        <paramref name="value" /> é menor que <see cref="F:System.UInt64.MinValue" /> ou maior que <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Single)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Single&quot; /&gt; value to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Define uma conversão explícita de um valor <see cref="T:System.Single" /> para um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">O valor a ser convertido para um <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see cref=&quot;F:System.Single.NaN&quot; /&gt;, &lt;see cref=&quot;F:System.Single.PositiveInfinity&quot; /&gt;, or &lt;see cref=&quot;F:System.Single.NegativeInfinity&quot; /&gt;.">
        <paramref name="value" /> é <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.PositiveInfinity" /> ou <see cref="F:System.Single.NegativeInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a 64-bit signed integer is greater than a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Retorna um valor que indica se um inteiro com sinal de 64 bits é maior que um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso <paramref name="left" /> seja maior que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; is greater than a 64-bit signed integer value.">Retorna um valor que indica se um <see cref="T:System.Numerics.BigInteger" /> é maior que um valor inteiro com sinal de 64 bits.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso <paramref name="left" /> seja maior que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is greater than another &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> é maior que outro valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso <paramref name="left" /> seja maior que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is greater than a 64-bit unsigned integer.">Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> é maior que um inteiro sem sinal de 64 bits.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso <paramref name="left" /> seja maior que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is greater than a 64-bit unsigned integer.">Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> é maior que um inteiro sem sinal de 64 bits.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso <paramref name="left" /> seja maior que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a 64-bit signed integer is greater than or equal to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Retorna um valor que indica se um inteiro com sinal de 64 bits é maior ou igual a um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso <paramref name="left" /> seja maior que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is greater than or equal to a 64-bit signed integer value.">Retorna um valor que indica se um valor de <see cref="T:System.Numerics.BigInteger" /> é maior ou igual a um valor inteiro com sinal de 64 bits.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso <paramref name="left" /> seja maior que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is greater than or equal to another &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> é maior ou igual a outro valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso <paramref name="left" /> seja maior que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is greater than or equal to a 64-bit unsigned integer value.">Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> é maior ou igual a um valor inteiro sem sinal de 64 bits.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso <paramref name="left" /> seja maior que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a 64-bit unsigned integer is greater than or equal to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Retorna um valor que indica se um inteiro sem sinal de 64 bits é maior ou igual a um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso <paramref name="left" /> seja maior que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an implicit conversion of an unsigned byte to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Define uma conversão implícita de um byte sem sinal em um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">O valor a ser convertido para um <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int16)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an implicit conversion of a signed 16-bit integer to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Define uma conversão implícita de um inteiro com sinal de 16 bits em um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">O valor a ser convertido para um <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an implicit conversion of a signed 32-bit integer to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Define uma conversão implícita de um inteiro com sinal de 32 bits em um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">O valor a ser convertido para um <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an implicit conversion of a signed 64-bit integer to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Define uma conversão implícita de um inteiro com sinal de 64 bits em um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">O valor a ser convertido para um <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.SByte)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an implicit conversion of an 8-bit signed integer to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.  &#xA;  &#xA; This API is not CLS-compliant. The compliant alternative is &lt;see cref=&quot;M:System.Numerics.BigInteger.#ctor(System.Int32)&quot; /&gt;.">Define uma conversão implícita de um inteiro com sinal de 8 bits em um valor <see cref="T:System.Numerics.BigInteger" />.  
Esta API não compatível com CLS. A alternativa em conformidade é <see cref="M:System.Numerics.BigInteger.#ctor(System.Int32)" />.</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">O valor a ser convertido para um <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt16)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an implicit conversion of a 16-bit unsigned integer to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.  &#xA;  &#xA; This API is not CLS-compliant. The compliant alternative is &lt;see cref=&quot;M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger&quot; /&gt;.">Define uma conversão implícita de um inteiro sem sinal de 16 bits em um valor <see cref="T:System.Numerics.BigInteger" />.  
Esta API não compatível com CLS. A alternativa em conformidade é <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />.</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">O valor a ser convertido para um <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an implicit conversion of a 32-bit unsigned integer to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.  &#xA;  &#xA; This API is not CLS-compliant. The compliant alternative is &lt;see cref=&quot;M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger&quot; /&gt;.">Define uma conversão implícita de um inteiro sem sinal de 32 bits em um valor <see cref="T:System.Numerics.BigInteger" />.  
Esta API não compatível com CLS. A alternativa em conformidade é <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />.</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">O valor a ser convertido para um <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an implicit conversion of a 64-bit unsigned integer to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.  &#xA;  &#xA; This API is not CLS-compliant. The compliant alternative is &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Define uma conversão implícita de um inteiro sem sinal de 64 bits em um valor <see cref="T:System.Numerics.BigInteger" />.  
Esta API não compatível com CLS. A alternativa em conformidade é <see cref="T:System.Double" />.</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">O valor a ser convertido para um <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)">
      <summary vsli:raw="Increments a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value by 1.">Incrementa um valor <see cref="T:System.Numerics.BigInteger" /> em 1.</summary>
      <param name="value" vsli:raw="The value to increment.">O valor a ser incrementado.</param>
      <returns vsli:raw="The value of the &lt;paramref name=&quot;value&quot; /&gt; parameter incremented by 1.">O valor do parâmetro <paramref name="value" /> incrementado em 1.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a 64-bit signed integer and a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value are not equal.">Retorna um valor que indica se um inteiro com sinal de 64 bits e um valor <see cref="T:System.Numerics.BigInteger" /> não são iguais.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value and a 64-bit signed integer are not equal.">Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> e um inteiro com sinal de 64 bits não são iguais.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; objects have different values.">Retorna um valor que indica se dois objetos <see cref="T:System.Numerics.BigInteger" /> têm valores diferentes.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value and a 64-bit unsigned integer are not equal.">Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> e um inteiro sem sinal de 64 bits não são iguais.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a 64-bit unsigned integer and a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value are not equal.">Retorna um valor que indica se um inteiro sem sinal de 64 bits e um valor <see cref="T:System.Numerics.BigInteger" /> não são iguais.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)">
      <summary vsli:raw="Shifts a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value a specified number of bits to the left.">Desloca um valor <see cref="T:System.Numerics.BigInteger" /> um número especificado de bits para a esquerda.</summary>
      <param name="value" vsli:raw="The value whose bits are to be shifted.">O valor cujos bits devem ser deslocados.</param>
      <param name="shift" vsli:raw="The number of bits to shift &lt;paramref name=&quot;value&quot; /&gt; to the left.">O número de bits a deslocar <paramref name="value" /> para a esquerda.</param>
      <returns vsli:raw="A value that has been shifted to the left by the specified number of bits.">Um valor que foi sido deslocado para a esquerda pelo número especificado de bits.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a 64-bit signed integer is less than a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Retorna um valor que indica se um inteiro com sinal de 64 bits é menor que um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso <paramref name="left" /> seja menor que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is less than a 64-bit signed integer.">Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> é menor que um inteiro com sinal de 64 bits.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso <paramref name="left" /> seja menor que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is less than another &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> é menor que outro valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso <paramref name="left" /> seja menor que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is less than a 64-bit unsigned integer.">Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> é menor que um inteiro sem sinal de 64 bits.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso <paramref name="left" /> seja menor que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a 64-bit unsigned integer is less than a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Retorna um valor que indica se um inteiro sem sinal de 64 bits é menor que um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso <paramref name="left" /> seja menor que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a 64-bit signed integer is less than or equal to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Retorna um valor que indica se um inteiro com sinal de 64 bits é menor ou igual a um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than or equal to &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="left" /> for menor ou igual a <paramref name="right" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is less than or equal to a 64-bit signed integer.">Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> é menor ou igual a um inteiro com sinal de 64 bits.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than or equal to &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="left" /> for menor ou igual a <paramref name="right" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is less than or equal to another &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> é menor ou igual a outro valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than or equal to &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="left" /> for menor ou igual a <paramref name="right" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is less than or equal to a 64-bit unsigned integer.">Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> é menor ou igual a um inteiro sem sinal de 64 bits.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than or equal to &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="left" /> for menor ou igual a <paramref name="right" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a 64-bit unsigned integer is less than or equal to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Retorna um valor que indica se um inteiro sem sinal de 64 bits é menor ou igual a um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than or equal to &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="left" /> for menor ou igual a <paramref name="right" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns the remainder that results from division with two specified &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values.">Retorna o resto que resulta da divisão com dois valores especificados <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="dividend" vsli:raw="The value to be divided.">O valor a ser dividido.</param>
      <param name="divisor" vsli:raw="The value to divide by.">O valor pelo qual dividir.</param>
      <returns vsli:raw="The remainder that results from the division.">O resto que resulta da divisão.</returns>
      <exception cref="T:System.DivideByZeroException" vsli:raw="&lt;paramref name=&quot;divisor&quot; /&gt; is 0 (zero).">
        <paramref name="divisor" /> é 0 (zero).</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Multiplies two specified &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values.">Multiplica dois valores <see cref="T:System.Numerics.BigInteger" /> especificados.</summary>
      <param name="left" vsli:raw="The first value to multiply.">O primeiro valor a ser multiplicado.</param>
      <param name="right" vsli:raw="The second value to multiply.">O segundo valor a ser multiplicado.</param>
      <returns vsli:raw="The product of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">O produto de <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)">
      <summary vsli:raw="Returns the bitwise one's complement of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Retorna o complemento bit a bit de um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value" vsli:raw="An integer value.">Um valor inteiro.</param>
      <returns vsli:raw="The bitwise one's complement of &lt;paramref name=&quot;value&quot; /&gt;.">O complemento bit a bit de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)">
      <summary vsli:raw="Shifts a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value a specified number of bits to the right.">Desloca um valor <see cref="T:System.Numerics.BigInteger" /> um número especificado de bits para a direita.</summary>
      <param name="value" vsli:raw="The value whose bits are to be shifted.">O valor cujos bits devem ser deslocados.</param>
      <param name="shift" vsli:raw="The number of bits to shift &lt;paramref name=&quot;value&quot; /&gt; to the right.">O número de bits a deslocar <paramref name="value" /> para a direita.</param>
      <returns vsli:raw="A value that has been shifted to the right by the specified number of bits.">Um valor que foi sido deslocado para a direita pelo número especificado de bits.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Subtracts a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value from another &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Subtrai um valor <see cref="T:System.Numerics.BigInteger" /> de outro valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left" vsli:raw="The value to subtract from (the minuend).">O valor do qual um valor será subtraído (o minuendo).</param>
      <param name="right" vsli:raw="The value to subtract (the subtrahend).">O valor a ser subtraído (o subtraendo).</param>
      <returns vsli:raw="The result of subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;.">O resultado da subtração de <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)">
      <summary vsli:raw="Negates a specified BigInteger value.">Nega um valor BigInteger especificado.</summary>
      <param name="value" vsli:raw="The value to negate.">O valor a ser negado.</param>
      <returns vsli:raw="The result of the &lt;paramref name=&quot;value&quot; /&gt; parameter multiplied by negative one (-1).">O resultado do parâmetro <paramref name="value" /> multiplicado por um negativo (-1).</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)">
      <summary vsli:raw="Returns the value of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; operand. (The sign of the operand is unchanged.)">Retorna o valor do operando <see cref="T:System.Numerics.BigInteger" />. (O sinal do operando permanece inalterado).</summary>
      <param name="value" vsli:raw="An integer value.">Um valor inteiro.</param>
      <returns vsli:raw="The value of the &lt;paramref name=&quot;value&quot; /&gt; operand.">O valor do operando <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="value" vsli:raw="A read-only span of characters that contains the number to convert." />
      <param name="style" vsli:raw="A bitwise combination of the enumeration values that specify the permitted format of &lt;paramref name=&quot;value&quot; /&gt;." />
      <param name="provider" vsli:raw="An object that provides culture-specific formatting information about &lt;paramref name=&quot;value&quot; /&gt;." />
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String)">
      <summary vsli:raw="Converts the string representation of a number to its &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent.">Converte a representação da cadeia de caracteres de um número no <see cref="T:System.Numerics.BigInteger" /> equivalente.</summary>
      <param name="value" vsli:raw="A string that contains the number to convert.">Uma cadeia de caracteres que contém o número a ser convertido.</param>
      <returns vsli:raw="A value that is equivalent to the number specified in the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Um valor equivalente ao número especificado no parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not in the correct format.">
        <paramref name="value" /> não está no formato correto.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)">
      <summary vsli:raw="Converts the string representation of a number in a specified style to its &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent.">Converte a representação de cadeia de caracteres de um número em um estilo especificado em seu <see cref="T:System.Numerics.BigInteger" /> equivalente.</summary>
      <param name="value" vsli:raw="A string that contains a number to convert.">Uma cadeia de caracteres que contém um número a ser convertido.</param>
      <param name="style" vsli:raw="A bitwise combination of the enumeration values that specify the permitted format of &lt;paramref name=&quot;value&quot; /&gt;.">Um combinação bit a bit de valores de enumeração que especificam o formato permitido de <paramref name="value" />.</param>
      <returns vsli:raw="A value that is equivalent to the number specified in the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Um valor equivalente ao número especificado no parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;style&quot; /&gt; is not a &lt;see cref=&quot;T:System.Globalization.NumberStyles&quot; /&gt; value.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;style&quot; /&gt; includes the &lt;see cref=&quot;F:System.Globalization.NumberStyles.AllowHexSpecifier&quot; /&gt; or &lt;see cref=&quot;F:System.Globalization.NumberStyles.HexNumber&quot; /&gt; flag along with another value.">
        <paramref name="style" /> não é um valor <see cref="T:System.Globalization.NumberStyles" />.  

ou - 
<paramref name="style" /> inclui o sinalizador <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> ou <see cref="F:System.Globalization.NumberStyles.HexNumber" /> em conjunto com outro valor.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; does not comply with the input pattern specified by &lt;see cref=&quot;T:System.Globalization.NumberStyles&quot; /&gt;.">
        <paramref name="value" /> não é compatível com o padrão de entrada especificado por <see cref="T:System.Globalization.NumberStyles" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary vsli:raw="Converts the string representation of a number in a specified style and culture-specific format to its &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent.">Converte a representação de cadeia de caracteres de um número com um estilo especificado e um formato específico à cultura para seu <see cref="T:System.Numerics.BigInteger" /> equivalente.</summary>
      <param name="value" vsli:raw="A string that contains a number to convert.">Uma cadeia de caracteres que contém um número a ser convertido.</param>
      <param name="style" vsli:raw="A bitwise combination of the enumeration values that specify the permitted format of &lt;paramref name=&quot;value&quot; /&gt;.">Um combinação bit a bit de valores de enumeração que especificam o formato permitido de <paramref name="value" />.</param>
      <param name="provider" vsli:raw="An object that provides culture-specific formatting information about &lt;paramref name=&quot;value&quot; /&gt;.">Um objeto que fornece informações de formatação específicas à cultura sobre <paramref name="value" />.</param>
      <returns vsli:raw="A value that is equivalent to the number specified in the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Um valor equivalente ao número especificado no parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;style&quot; /&gt; is not a &lt;see cref=&quot;T:System.Globalization.NumberStyles&quot; /&gt; value.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;style&quot; /&gt; includes the &lt;see cref=&quot;F:System.Globalization.NumberStyles.AllowHexSpecifier&quot; /&gt; or &lt;see cref=&quot;F:System.Globalization.NumberStyles.HexNumber&quot; /&gt; flag along with another value.">
        <paramref name="style" /> não é um valor <see cref="T:System.Globalization.NumberStyles" />.  

ou - 
<paramref name="style" /> inclui o sinalizador <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> ou <see cref="F:System.Globalization.NumberStyles.HexNumber" /> em conjunto com outro valor.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; does not comply with the input pattern specified by &lt;paramref name=&quot;style&quot; /&gt;.">
        <paramref name="value" /> não é compatível com o padrão de entrada especificado por <paramref name="style" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)">
      <summary vsli:raw="Converts the string representation of a number in a specified culture-specific format to its &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent.">Converte a representação de cadeia de caracteres de um número em um formato específico da cultura especificado em seu equivalente de <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value" vsli:raw="A string that contains a number to convert.">Uma cadeia de caracteres que contém um número a ser convertido.</param>
      <param name="provider" vsli:raw="An object that provides culture-specific formatting information about &lt;paramref name=&quot;value&quot; /&gt;.">Um objeto que fornece informações de formatação específicas à cultura sobre <paramref name="value" />.</param>
      <returns vsli:raw="A value that is equivalent to the number specified in the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Um valor equivalente ao número especificado no parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not in the correct format.">
        <paramref name="value" /> não está no formato correto.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)">
      <summary vsli:raw="Raises a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value to the power of a specified value.">Gera um valor <see cref="T:System.Numerics.BigInteger" /> à potência de um valor especificado.</summary>
      <param name="value" vsli:raw="The number to raise to the &lt;paramref name=&quot;exponent&quot; /&gt; power.">O número a ser elevado à potência <paramref name="exponent" />.</param>
      <param name="exponent" vsli:raw="The exponent to raise &lt;paramref name=&quot;value&quot; /&gt; by.">O expoente pelo qual <paramref name="value" /> será elevado.</param>
      <returns vsli:raw="The result of raising &lt;paramref name=&quot;value&quot; /&gt; to the &lt;paramref name=&quot;exponent&quot; /&gt; power.">O resultado da elevação <paramref name="value" /> para a potência <paramref name="exponent" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;exponent&quot; /&gt; is negative.">
        <paramref name="exponent" /> é negativo.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Performs integer division on two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values and returns the remainder.">Executa a divisão do inteiro em dois valores <see cref="T:System.Numerics.BigInteger" /> e retorna o restante.</summary>
      <param name="dividend" vsli:raw="The value to be divided.">O valor a ser dividido.</param>
      <param name="divisor" vsli:raw="The value to divide by.">O valor pelo qual dividir.</param>
      <returns vsli:raw="The remainder after dividing &lt;paramref name=&quot;dividend&quot; /&gt; by &lt;paramref name=&quot;divisor&quot; /&gt;.">O resto após dividir <paramref name="dividend" /> por <paramref name="divisor" />.</returns>
      <exception cref="T:System.DivideByZeroException" vsli:raw="&lt;paramref name=&quot;divisor&quot; /&gt; is 0 (zero).">
        <paramref name="divisor" /> é 0 (zero).</exception>
    </member>
    <member name="P:System.Numerics.BigInteger.Sign">
      <summary vsli:raw="Gets a number that indicates the sign (negative, positive, or zero) of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object.">Obtém um número que indica o sinal (negativo, positivo ou zero) do objeto <see cref="T:System.Numerics.BigInteger" /> atual.</summary>
      <returns vsli:raw="A number that indicates the sign of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object, as shown in the following table.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Number&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; -1&lt;/term&gt;&lt;description&gt; The value of this object is negative.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; 0&lt;/term&gt;&lt;description&gt; The value of this object is 0 (zero).&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; 1&lt;/term&gt;&lt;description&gt; The value of this object is positive.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Um número que indica o sinal do objeto <see cref="T:System.Numerics.BigInteger" />, conforme mostrado na tabela a seguir.  
  Número 
  Descrição 
  -1 
  O valor desse objeto é negativo.  

  0 
  O valor desse objeto é 0 (zero).  

  1 
  O valor desse objeto é positivo.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Subtracts one &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value from another and returns the result.">Subtrai um valor <see cref="T:System.Numerics.BigInteger" /> de outro e retorna o resultado.</summary>
      <param name="left" vsli:raw="The value to subtract from (the minuend).">O valor do qual um valor será subtraído (o minuendo).</param>
      <param name="right" vsli:raw="The value to subtract (the subtrahend).">O valor a ser subtraído (o subtraendo).</param>
      <returns vsli:raw="The result of subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;.">O resultado da subtração de <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToByteArray">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value to a byte array.">Converte um valor de <see cref="T:System.Numerics.BigInteger" /> em uma matriz de bytes.</summary>
      <returns vsli:raw="The value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object converted to an array of bytes.">O valor do objeto <see cref="T:System.Numerics.BigInteger" /> atual convertido em uma matriz de bytes.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)">
      <summary vsli:raw="Returns the value of this &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; as a byte array using the fewest number of bytes possible. If the value is zero, returns an array of one byte whose element is 0x00.">Retorna o valor deste <see cref="T:System.Numerics.BigInteger" /> como uma matriz de bytes usando o menor número possível de bytes. Se o valor é zero, retorna uma matriz de um byte cujo elemento é 0x00.</summary>
      <param name="isUnsigned" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use unsigned encoding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para usar a codificação sem sinal; caso contrário, <see langword="false" />.</param>
      <param name="isBigEndian" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to write the bytes in a big-endian byte order; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para gravar os bytes em uma ordem de byte big endian; caso contrário, <see langword="false" />.</param>
      <returns vsli:raw="The value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object converted to an array of bytes.">O valor do objeto <see cref="T:System.Numerics.BigInteger" /> atual convertido em uma matriz de bytes.</returns>
      <exception cref="T:System.OverflowException" vsli:raw="If &lt;paramref name=&quot;isUnsigned&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and &lt;see cref=&quot;P:System.Numerics.BigInteger.Sign&quot; /&gt; is negative.">Se <paramref name="isUnsigned" /> é <see langword="true" />, e <see cref="P:System.Numerics.BigInteger.Sign" /> é negativo.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString">
      <summary vsli:raw="Converts the numeric value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to its equivalent string representation.">Converte o valor numérico do objeto <see cref="T:System.Numerics.BigInteger" /> atual na representação da cadeia de caracteres equivalente.</summary>
      <returns vsli:raw="The string representation of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">Uma representação de cadeia de caracteres do valor <see cref="T:System.Numerics.BigInteger" /> atual.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.IFormatProvider)">
      <summary vsli:raw="Converts the numeric value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to its equivalent string representation by using the specified culture-specific formatting information.">Converte o valor numérico do objeto <see cref="T:System.Numerics.BigInteger" /> atual em sua representação de cadeia de caracteres equivalente usando as informações especificadas de formatação específicas de cultura.</summary>
      <param name="provider" vsli:raw="An object that supplies culture-specific formatting information.">Um objeto que fornece informações de formatação específicas de cultura.</param>
      <returns vsli:raw="The string representation of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value in the format specified by the &lt;paramref name=&quot;provider&quot; /&gt; parameter.">A representação de cadeia de caracteres do valor <see cref="T:System.Numerics.BigInteger" /> atual no formato especificado pelo parâmetro <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.String)">
      <summary vsli:raw="Converts the numeric value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to its equivalent string representation by using the specified format.">Converte o valor numérico do objeto <see cref="T:System.Numerics.BigInteger" /> atual para sua representação de cadeia de caracteres equivalente usando o formato especificado.</summary>
      <param name="format" vsli:raw="A standard or custom numeric format string.">Uma cadeia de caracteres padrão ou de formato numérico personalizado.</param>
      <returns vsli:raw="The string representation of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value in the format specified by the &lt;paramref name=&quot;format&quot; /&gt; parameter.">A representação de cadeia de caracteres do valor <see cref="T:System.Numerics.BigInteger" /> atual no formato especificado pelo parâmetro <paramref name="format" />.</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;format&quot; /&gt; is not a valid format string.">
        <paramref name="format" /> não é uma cadeia de caracteres de formato válida.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)">
      <summary vsli:raw="Converts the numeric value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to its equivalent string representation by using the specified format and culture-specific format information.">Converte o valor numérico do objeto <see cref="T:System.Numerics.BigInteger" /> atual em sua representação de cadeia de caracteres equivalente usando o formato especificado e as informações de formato específicas de cultura.</summary>
      <param name="format" vsli:raw="A standard or custom numeric format string.">Uma cadeia de caracteres padrão ou de formato numérico personalizado.</param>
      <param name="provider" vsli:raw="An object that supplies culture-specific formatting information.">Um objeto que fornece informações de formatação específicas de cultura.</param>
      <returns vsli:raw="The string representation of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value as specified by the &lt;paramref name=&quot;format&quot; /&gt; and &lt;paramref name=&quot;provider&quot; /&gt; parameters.">A representação de cadeia de caracteres do valor <see cref="T:System.Numerics.BigInteger" /> atual, conforme especificado pelos parâmetros <paramref name="format" /> e <paramref name="provider" />.</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;format&quot; /&gt; is not a valid format string.">
        <paramref name="format" /> não é uma cadeia de caracteres de formato válida.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" vsli:raw="The span of characters into which this instance will be written." />
      <param name="charsWritten" vsli:raw="When the method returns, contains the length of the span in number of characters." />
      <param name="format" vsli:raw="A read-only span of characters that specifies the format for the formatting operation." />
      <param name="provider" vsli:raw="An object that supplies culture-specific formatting information about &lt;paramref name=&quot;value&quot; /&gt;." />
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)">
      <param name="value" vsli:raw="The representation of a number as a read-only span of characters." />
      <param name="style" vsli:raw="A bitwise combination of enumeration values that indicates the style elements that can be present in &lt;paramref name=&quot;value&quot; /&gt;. A typical value to specify is &lt;see cref=&quot;F:System.Globalization.NumberStyles.Integer&quot; /&gt;." />
      <param name="provider" vsli:raw="An object that supplies culture-specific formatting information about &lt;paramref name=&quot;value&quot; /&gt;." />
      <param name="result" vsli:raw="When this method returns, contains the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent to the number that is contained in &lt;paramref name=&quot;value&quot; /&gt;, or &lt;see cref=&quot;P:System.Numerics.BigInteger.Zero&quot; /&gt; if the conversion failed. The conversion fails if the &lt;paramref name=&quot;value&quot; /&gt; parameter is an empty character span or is not in a format that is compliant with &lt;paramref name=&quot;style&quot; /&gt;. This parameter is passed uninitialized." />
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.ReadOnlySpan{System.Char},System.Numerics.BigInteger@)">
      <param name="value" vsli:raw="The representation of a number as a read-only span of characters." />
      <param name="result" vsli:raw="When this method returns, contains the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent to the number that is contained in &lt;paramref name=&quot;value&quot; /&gt;, or zero (0) if the conversion fails. The conversion fails if the &lt;paramref name=&quot;value&quot; /&gt; parameter is an empty character span or is not of the correct format. This parameter is passed uninitialized." />
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)">
      <summary vsli:raw="Tries to convert the string representation of a number in a specified style and culture-specific format to its &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent, and returns a value that indicates whether the conversion succeeded.">Tenta converter a representação de cadeia de caracteres de um número em um estilo e formato específico à cultura especificados no equivalente <see cref="T:System.Numerics.BigInteger" /> e retorna um valor que indica se a conversão foi bem-sucedida.</summary>
      <param name="value" vsli:raw="The string representation of a number. The string is interpreted using the style specified by &lt;paramref name=&quot;style&quot; /&gt;.">A representação de cadeia de caracteres de um número. A cadeia de caracteres é interpretada usando-se o estilo especificado por <paramref name="style" />.</param>
      <param name="style" vsli:raw="A bitwise combination of enumeration values that indicates the style elements that can be present in &lt;paramref name=&quot;value&quot; /&gt;. A typical value to specify is &lt;see cref=&quot;F:System.Globalization.NumberStyles.Integer&quot; /&gt;.">Um combinação bit a bit de valores de enumeração que indica os elementos de estilo que podem estar presentes em <paramref name="value" />. Um valor típico a ser especificado é <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider" vsli:raw="An object that supplies culture-specific formatting information about &lt;paramref name=&quot;value&quot; /&gt;.">Um objeto que fornece informações de formatação específicas de cultura sobre <paramref name="value" />.</param>
      <param name="result" vsli:raw="When this method returns, contains the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent to the number that is contained in &lt;paramref name=&quot;value&quot; /&gt;, or &lt;see cref=&quot;P:System.Numerics.BigInteger.Zero&quot; /&gt; if the conversion failed. The conversion fails if the &lt;paramref name=&quot;value&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt; or is not in a format that is compliant with &lt;paramref name=&quot;style&quot; /&gt;. This parameter is passed uninitialized.">Quando esse método é retornado, contém o equivalente <see cref="T:System.Numerics.BigInteger" /> do número contido em <paramref name="value" /> ou <see cref="P:System.Numerics.BigInteger.Zero" /> se a conversão falhou. A conversão falhará se o parâmetro <paramref name="value" /> for <see langword="null" /> ou não estiver em um formato em conformidade com <paramref name="style" />. Este parâmetro é passado não inicializado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;value&quot; /&gt; parameter was converted successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso o parâmetro <paramref name="value" /> tenha sido convertido com êxito; do contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;style&quot; /&gt; is not a &lt;see cref=&quot;T:System.Globalization.NumberStyles&quot; /&gt; value.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;style&quot; /&gt; includes the &lt;see cref=&quot;F:System.Globalization.NumberStyles.AllowHexSpecifier&quot; /&gt; or &lt;see cref=&quot;F:System.Globalization.NumberStyles.HexNumber&quot; /&gt; flag along with another value.">
        <paramref name="style" /> não é um valor <see cref="T:System.Globalization.NumberStyles" />.  

ou - 
<paramref name="style" /> inclui o sinalizador <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> ou <see cref="F:System.Globalization.NumberStyles.HexNumber" /> em conjunto com outro valor.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)">
      <summary vsli:raw="Tries to convert the string representation of a number to its &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent, and returns a value that indicates whether the conversion succeeded.">Tenta converter a representação de cadeia de caracteres de seu equivalente de <see cref="T:System.Numerics.BigInteger" /> e retorna um valor que indica se a conversão foi bem-sucedida.</summary>
      <param name="value" vsli:raw="The string representation of a number.">A representação de cadeia de caracteres de um número.</param>
      <param name="result" vsli:raw="When this method returns, contains the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent to the number that is contained in &lt;paramref name=&quot;value&quot; /&gt;, or zero (0) if the conversion fails. The conversion fails if the &lt;paramref name=&quot;value&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt; or is not of the correct format. This parameter is passed uninitialized.">Quando este método retorna, ele contém o <see cref="T:System.Numerics.BigInteger" /> equivalente ao número contido em <paramref name="value" /> ou zero (0) quando a conversão falha. A conversão falhará se o parâmetro de <paramref name="value" /> for <see langword="null" /> ou não estiver no formato correto. Este parâmetro é passado não inicializado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; was converted successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso <paramref name="value" /> tenha sido convertido com êxito; do contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.TryWriteBytes(System.Span{System.Byte},System.Int32@,System.Boolean,System.Boolean)">
      <summary vsli:raw="Copies the value of this &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; as little-endian twos-complement bytes, using the fewest number of bytes possible. If the value is zero, outputs one byte whose element is 0x00.">Copia o valor deste <see cref="T:System.Numerics.BigInteger" /> como bytes de dois complementos little endian usando o menor número possível de bytes. Se o valor é zero, produz um byte cujo elemento é 0x00.</summary>
      <param name="destination" vsli:raw="The destination span to which the resulting bytes should be written.">O intervalo de destino no qual os bytes resultantes devem ser gravados.</param>
      <param name="bytesWritten" vsli:raw="The number of bytes written to &lt;paramref name=&quot;destination&quot; /&gt;.">O número de bytes gravados em <paramref name="destination" />.</param>
      <param name="isUnsigned" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use unsigned encoding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para usar a codificação sem sinal; caso contrário, <see langword="false" />.</param>
      <param name="isBigEndian" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to write the bytes in a big-endian byte order; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para gravar os bytes em uma ordem de byte big endian; caso contrário, <see langword="false" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the bytes fit in &lt;paramref name=&quot;destination&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if not all bytes could be written due to lack of space.">
        <see langword="true" /> se os bytes se ajustam em <paramref name="destination" />; <see langword="false" /> se nem todos os bytes podem ser gravados devido à falta de espaço.</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;isUnsigned&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and &lt;see cref=&quot;P:System.Numerics.BigInteger.Sign&quot; /&gt; is negative.">
        <paramref name="isUnsigned" /> é <see langword="true" />, e <see cref="P:System.Numerics.BigInteger.Sign" /> é negativo.</exception>
    </member>
    <member name="P:System.Numerics.BigInteger.Zero">
      <summary vsli:raw="Gets a value that represents the number 0 (zero).">Obtém um valor que representa o número 0 (zero).</summary>
      <returns vsli:raw="An integer whose value is 0 (zero).">Um inteiro cujo valor é 0 (zero).</returns>
    </member>
    <member name="T:System.Numerics.Complex">
      <summary vsli:raw="Represents a complex number.">Representa um número complexo.</summary>
    </member>
    <member name="M:System.Numerics.Complex.#ctor(System.Double,System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; structure using the specified real and imaginary values.">Inicializa uma nova instância da estrutura <see cref="T:System.Numerics.Complex" /> usando os valores reais e imaginários especificados.</summary>
      <param name="real" vsli:raw="The real part of the complex number.">A parte real do número complexo.</param>
      <param name="imaginary" vsli:raw="The imaginary part of the complex number.">A parte imaginária do número complexo.</param>
    </member>
    <member name="M:System.Numerics.Complex.Abs(System.Numerics.Complex)">
      <summary vsli:raw="Gets the absolute value (or magnitude) of a complex number.">Obtém o valor absoluto (ou magnitude) de um número complexo.</summary>
      <param name="value" vsli:raw="A complex number.">Um número complexo.</param>
      <returns vsli:raw="The absolute value of &lt;paramref name=&quot;value&quot; /&gt;.">O valor absoluto de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Acos(System.Numerics.Complex)">
      <summary vsli:raw="Returns the angle that is the arc cosine of the specified complex number.">Retorna o ângulo que é o arco cosseno do número complexo especificado.</summary>
      <param name="value" vsli:raw="A complex number that represents a cosine.">Um número complexo que representa um cosseno.</param>
      <returns vsli:raw="The angle, measured in radians, which is the arc cosine of &lt;paramref name=&quot;value&quot; /&gt;.">O ângulo, medido em radianos, que é o arco cosseno de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Add(System.Double,System.Numerics.Complex)">
      <summary vsli:raw="Adds a double-precision real number to a complex number and returns the result.">Adiciona um número real de precisão dupla a um número complexo e retorna o resultado.</summary>
      <param name="left" vsli:raw="The double-precision real value to add.">O valor real de precisão dupla a ser adicionado.</param>
      <param name="right" vsli:raw="The complex value to add.">O valor complexo a ser adicionado.</param>
      <returns vsli:raw="The sum of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">A soma de <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Adds a complex number to a double-precision real number and returns the result.">Adiciona um número complexo a um número real de precisão dupla e retorna o resultado.</summary>
      <param name="left" vsli:raw="The complex value to add.">O valor complexo a ser adicionado.</param>
      <param name="right" vsli:raw="The double-precision real value to add.">O valor real de precisão dupla a ser adicionado.</param>
      <returns vsli:raw="The sum of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">A soma de <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Adds two complex numbers and returns the result.">Adiciona dois números complexos e retorna o resultado.</summary>
      <param name="left" vsli:raw="The first complex number to add.">O primeiro número complexo a ser adicionado.</param>
      <param name="right" vsli:raw="The second complex number to add.">O segundo número complexo a ser adicionado.</param>
      <returns vsli:raw="The sum of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">A soma de <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Asin(System.Numerics.Complex)">
      <summary vsli:raw="Returns the angle that is the arc sine of the specified complex number.">Retorna o ângulo que é o arco seno do número complexo especificado.</summary>
      <param name="value" vsli:raw="A complex number.">Um número complexo.</param>
      <returns vsli:raw="The angle which is the arc sine of &lt;paramref name=&quot;value&quot; /&gt;.">O ângulo que é o arco seno de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Atan(System.Numerics.Complex)">
      <summary vsli:raw="Returns the angle that is the arc tangent of the specified complex number.">Retorna o ângulo que é o arco tangente do número complexo especificado.</summary>
      <param name="value" vsli:raw="A complex number.">Um número complexo.</param>
      <returns vsli:raw="The angle that is the arc tangent of &lt;paramref name=&quot;value&quot; /&gt;.">O ângulo que é o arco tangente de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Conjugate(System.Numerics.Complex)">
      <summary vsli:raw="Computes the conjugate of a complex number and returns the result.">Calcula o conjugado de um número complexo e retorna o resultado.</summary>
      <param name="value" vsli:raw="A complex number.">Um número complexo.</param>
      <returns vsli:raw="The conjugate of &lt;paramref name=&quot;value&quot; /&gt;.">O conjugado de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Cos(System.Numerics.Complex)">
      <summary vsli:raw="Returns the cosine of the specified complex number.">Retorna o cosseno do número complexo especificado.</summary>
      <param name="value" vsli:raw="A complex number.">Um número complexo.</param>
      <returns vsli:raw="The cosine of &lt;paramref name=&quot;value&quot; /&gt;.">O cosseno de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Cosh(System.Numerics.Complex)">
      <summary vsli:raw="Returns the hyperbolic cosine of the specified complex number.">Retorna o cosseno hiperbólico do número complexo especificado.</summary>
      <param name="value" vsli:raw="A complex number.">Um número complexo.</param>
      <returns vsli:raw="The hyperbolic cosine of &lt;paramref name=&quot;value&quot; /&gt;.">O cosseno hiperbólico de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Divide(System.Double,System.Numerics.Complex)">
      <summary vsli:raw="Divides one double-precision real number by a complex number and returns the result.">Divide um número real de precisão dupla por um número complexo e retorna o resultado.</summary>
      <param name="dividend" vsli:raw="The double-precision real number to be divided.">O número real de precisão dupla a ser dividido.</param>
      <param name="divisor" vsli:raw="The complex number to divide by.">O número complexo pelo qual dividir.</param>
      <returns vsli:raw="The quotient of the division.">O quociente da divisão.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Divides one complex number by a double-precision real number and returns the result.">Divide um número complexo por um número real de precisão dupla e retorna o resultado.</summary>
      <param name="dividend" vsli:raw="The complex number to be divided.">O número complexo a ser dividido.</param>
      <param name="divisor" vsli:raw="The double-precision real number to divide by.">O número real de precisão dupla pelo qual dividir.</param>
      <returns vsli:raw="The quotient of the division.">O quociente da divisão.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Divides one complex number by another and returns the result.">Divide um número complexo por outro e retorna o resultado.</summary>
      <param name="dividend" vsli:raw="The complex number to be divided.">O número complexo a ser dividido.</param>
      <param name="divisor" vsli:raw="The complex number to divide by.">O número complexo pelo qual dividir.</param>
      <returns vsli:raw="The quotient of the division.">O quociente da divisão.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Equals(System.Numerics.Complex)">
      <summary vsli:raw="Returns a value that indicates whether the current instance and a specified complex number have the same value.">Retorna um valor que indica se a instância atual e um número complexo especificado têm o mesmo valor.</summary>
      <param name="value" vsli:raw="The complex number to compare.">O número complexo a comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this complex number and &lt;paramref name=&quot;value&quot; /&gt; have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se este número complexo <paramref name="value" /> tiverem o mesmo valor; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the current instance and a specified object have the same value.">Retorna um valor que indica se a instância atual e um objeto especificado têm o mesmo valor.</summary>
      <param name="obj" vsli:raw="The object to compare.">O objeto a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;obj&quot; /&gt; parameter is a &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; object or a type capable of implicit conversion to a &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; object, and its value is equal to the current &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o parâmetro <paramref name="obj" /> for um objeto <see cref="T:System.Numerics.Complex" /> ou um tipo capaz de conversão implícita para um objeto <see cref="T:System.Numerics.Complex" /> e seu valor for igual ao objeto <see cref="T:System.Numerics.Complex" /> atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Exp(System.Numerics.Complex)">
      <summary vsli:raw="Returns &lt;see langword=&quot;e&quot; /&gt; raised to the power specified by a complex number.">Retorna <see langword="e" /> elevado à potência especificada por um número complexo.</summary>
      <param name="value" vsli:raw="A complex number that specifies a power.">Um número complexo que especifica uma potência.</param>
      <returns vsli:raw="The number &lt;see langword=&quot;e&quot; /&gt; raised to the power &lt;paramref name=&quot;value&quot; /&gt;.">O número <see langword="e" /> elevado à potência <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)">
      <summary vsli:raw="Creates a complex number from a point's polar coordinates.">Cria um número complexo de coordenadas polares de um ponto.</summary>
      <param name="magnitude" vsli:raw="The magnitude, which is the distance from the origin (the intersection of the x-axis and the y-axis) to the number.">A magnitude, que é a distância da origem (a interseção entre os eixos x e y) para o número.</param>
      <param name="phase" vsli:raw="The phase, which is the angle from the line to the horizontal axis, measured in radians.">A fase, que é o ângulo da para o eixo horizontal, medido em radianos.</param>
      <returns vsli:raw="A complex number.">Um número complexo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.GetHashCode">
      <summary vsli:raw="Returns the hash code for the current &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; object.">Retorna o código hash para o objeto <see cref="T:System.Numerics.Complex" /> atual.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Imaginary">
      <summary vsli:raw="Gets the imaginary component of the current &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; object.">Obtém o componente imaginário do objeto <see cref="T:System.Numerics.Complex" /> atual.</summary>
      <returns vsli:raw="The imaginary component of a complex number.">O componente imaginário de um número complexo.</returns>
    </member>
    <member name="F:System.Numerics.Complex.ImaginaryOne">
      <summary vsli:raw="Returns a new &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; instance with a real number equal to zero and an imaginary number equal to one.">Retorna uma nova instância do <see cref="T:System.Numerics.Complex" /> com um número real igual a zero e um número imaginário igual a um.</summary>
    </member>
    <member name="F:System.Numerics.Complex.Infinity">
      <summary vsli:raw="Represents infinity as a complex number.">Representa infinito como um número complexo.</summary>
    </member>
    <member name="M:System.Numerics.Complex.IsFinite(System.Numerics.Complex)">
      <summary vsli:raw="Determines whether the specified complex number is finite.">Determina se o número complexo especificado é finito.</summary>
      <param name="value" vsli:raw="A complex number.">Um número complexo.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if both, the real and imaginary parts are finite (zero, subnormal or normal); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se ambas as partes, a real e a imaginária, forem finitas (zero, subnormal ou normal). Caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsInfinity(System.Numerics.Complex)">
      <summary vsli:raw="Returns a value indicating whether the specified complex number evaluates to infinity.">Retorna um valor que indica se o número complexo especificado é avaliado como infinito.</summary>
      <param name="value" vsli:raw="A complex number.">Um número complexo.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if either, the real or imaginary part are &lt;see cref=&quot;F:System.Double.PositiveInfinity&quot; /&gt; or &lt;see cref=&quot;F:System.Double.NegativeInfinity&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se qualquer uma das partes, a real ou a imaginária, for <see cref="F:System.Double.PositiveInfinity" /> ou <see cref="F:System.Double.NegativeInfinity" />. Caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsNaN(System.Numerics.Complex)">
      <summary vsli:raw="Returns a value that indicates whether the specified complex instance is not a number (NaN).">Retorna um valor que indica se a instância complexa especificada é NaN (não é um número).</summary>
      <param name="value" vsli:raw="A complex number.">Um número complexo.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is not finite or infinite; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor especificado não for finito nem infinito. Caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Log(System.Numerics.Complex)">
      <summary vsli:raw="Returns the natural (base &lt;see langword=&quot;e&quot; /&gt;) logarithm of a specified complex number.">Retorna o logaritmo natural (de base <see langword="e" />) de um número complexo especificado.</summary>
      <param name="value" vsli:raw="A complex number.">Um número complexo.</param>
      <returns vsli:raw="The natural (base &lt;see langword=&quot;e&quot; /&gt;) logarithm of &lt;paramref name=&quot;value&quot; /&gt;.">O logaritmo natural (de base <see langword="e" />) de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Returns the logarithm of a specified complex number in a specified base.">Retorna o logaritmo de um número complexo especificado em uma base especificada.</summary>
      <param name="value" vsli:raw="A complex number.">Um número complexo.</param>
      <param name="baseValue" vsli:raw="The base of the logarithm.">A base do logaritmo.</param>
      <returns vsli:raw="The logarithm of &lt;paramref name=&quot;value&quot; /&gt; in base &lt;paramref name=&quot;baseValue&quot; /&gt;.">O logaritmo de <paramref name="value" /> na base <paramref name="baseValue" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Log10(System.Numerics.Complex)">
      <summary vsli:raw="Returns the base-10 logarithm of a specified complex number.">Retorna o logaritmo de base 10 de um número complexo especificado.</summary>
      <param name="value" vsli:raw="A complex number.">Um número complexo.</param>
      <returns vsli:raw="The base-10 logarithm of &lt;paramref name=&quot;value&quot; /&gt;.">O logaritmo de base 10 de <paramref name="value" />.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Magnitude">
      <summary vsli:raw="Gets the magnitude (or absolute value) of a complex number.">Obtém a magnitude (ou valor absoluto) de um número complexo.</summary>
      <returns vsli:raw="The magnitude of the current instance.">A magnitude da instância atual.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Multiply(System.Double,System.Numerics.Complex)">
      <summary vsli:raw="Returns the product of a double-precision real number and a complex number.">Retorna o produto de um número real de precisão dupla e um número complexo.</summary>
      <param name="left" vsli:raw="The double-precision real number to multiply.">O número real de precisão dupla a multiplicar.</param>
      <param name="right" vsli:raw="The complex number to multiply.">O número complexo a multiplicar.</param>
      <returns vsli:raw="The product of the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters.">O produto dos parâmetros <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Returns the product of a complex number and a double-precision real number.">Retorna o produto de um número complexo e um número real de precisão dupla.</summary>
      <param name="left" vsli:raw="The complex number to multiply.">O número complexo a multiplicar.</param>
      <param name="right" vsli:raw="The double-precision real number to multiply.">O número real de precisão dupla a multiplicar.</param>
      <returns vsli:raw="The product of the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters.">O produto dos parâmetros <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Returns the product of two complex numbers.">Retorna o produto de dois números complexos.</summary>
      <param name="left" vsli:raw="The first complex number to multiply.">O primeiro número complexo a multiplicar.</param>
      <param name="right" vsli:raw="The second complex number to multiply.">O segundo número complexo a multiplicar.</param>
      <returns vsli:raw="The product of the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters.">O produto dos parâmetros <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="F:System.Numerics.Complex.NaN">
      <summary vsli:raw="Represents a complex instance that is not a number (NaN).">Representa uma instância complexa que é NaN (não é um número).</summary>
    </member>
    <member name="M:System.Numerics.Complex.Negate(System.Numerics.Complex)">
      <summary vsli:raw="Returns the additive inverse of a specified complex number.">Retorna o inverso aditivo de um número complexo especificado.</summary>
      <param name="value" vsli:raw="A complex number.">Um número complexo.</param>
      <returns vsli:raw="The result of the &lt;see cref=&quot;P:System.Numerics.Complex.Real&quot; /&gt; and &lt;see cref=&quot;P:System.Numerics.Complex.Imaginary&quot; /&gt; components of the &lt;paramref name=&quot;value&quot; /&gt; parameter multiplied by -1.">O resultado dos componentes <see cref="P:System.Numerics.Complex.Real" /> e <see cref="P:System.Numerics.Complex.Imaginary" /> do parâmetro <paramref name="value" /> multiplicado por -1.</returns>
    </member>
    <member name="F:System.Numerics.Complex.One">
      <summary vsli:raw="Returns a new &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; instance with a real number equal to one and an imaginary number equal to zero.">Retorna uma nova instância do <see cref="T:System.Numerics.Complex" /> com um número real igual a um e um número imaginário igual a zero.</summary>
    </member>
    <member name="M:System.Numerics.Complex.op_Addition(System.Double,System.Numerics.Complex)">
      <summary vsli:raw="Adds a double-precision real number to a complex number.">Adiciona um número real de precisão dupla a um número complexo.</summary>
      <param name="left" vsli:raw="The double-precision real value to add.">O valor real de precisão dupla a ser adicionado.</param>
      <param name="right" vsli:raw="The complex value to add.">O valor complexo a ser adicionado.</param>
      <returns vsli:raw="The sum of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; as a complex number.">A soma de <paramref name="left" /> e <paramref name="right" /> como um número complexo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Adds a complex number to a double-precision real number.">Adiciona um número complexo a um número real de precisão dupla.</summary>
      <param name="left" vsli:raw="The complex value to add.">O valor complexo a ser adicionado.</param>
      <param name="right" vsli:raw="The double-precision real value to add.">O valor real de precisão dupla a ser adicionado.</param>
      <returns vsli:raw="The sum of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; as a complex number.">A soma de <paramref name="left" /> e <paramref name="right" /> como um número complexo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Adds two complex numbers.">Adiciona dois números complexos.</summary>
      <param name="left" vsli:raw="The first complex value to add.">O primeiro valor complexo a ser adicionado.</param>
      <param name="right" vsli:raw="The second complex value to add.">O segundo valor complexo a ser adicionado.</param>
      <returns vsli:raw="The sum of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">A soma de <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Division(System.Double,System.Numerics.Complex)">
      <summary vsli:raw="Divides a specified double-precision real number by a specified complex number.">Divide um número real de precisão dupla especificado por um número complexo especificado.</summary>
      <param name="left" vsli:raw="The double-precision real value to be divided.">O valor real de precisão dupla a ser dividido.</param>
      <param name="right" vsli:raw="The complex value to divide by.">O valor complexo pelo qual dividir.</param>
      <returns vsli:raw="The result of dividing &lt;paramref name=&quot;left&quot; /&gt; by &lt;paramref name=&quot;right&quot; /&gt;, as a complex number.">O resultado da divisão de <paramref name="left" /> por <paramref name="right" />, como um número complexo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Divides a specified complex number by a specified double-precision real number.">Divide um número complexo especificado por um número real de precisão dupla especificado.</summary>
      <param name="left" vsli:raw="The complex value to be divided.">O valor complexo a ser dividido.</param>
      <param name="right" vsli:raw="The double-precision real value to divide by.">O valor real de precisão dupla pelo qual dividir.</param>
      <returns vsli:raw="The result of dividing &lt;paramref name=&quot;left&quot; /&gt; by &lt;paramref name=&quot;right&quot; /&gt;, as a complex number.">O resultado da divisão de <paramref name="left" /> por <paramref name="right" />, como um número complexo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Divides a specified complex number by another specified complex number.">Divide um número complexo especificado por outro número complexo especificado.</summary>
      <param name="left" vsli:raw="The complex value to be divided.">O valor complexo a ser dividido.</param>
      <param name="right" vsli:raw="The complex value to divide by.">O valor complexo pelo qual dividir.</param>
      <returns vsli:raw="The result of dividing &lt;paramref name=&quot;left&quot; /&gt; by &lt;paramref name=&quot;right&quot; /&gt;.">O resultado da divisão de <paramref name="left" /> por <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Returns a value that indicates whether two complex numbers are equal.">Retorna um valor que indica se dois números complexos são iguais.</summary>
      <param name="left" vsli:raw="The first complex number to compare.">O primeiro número complexo a ser comparado.</param>
      <param name="right" vsli:raw="The second complex number to compare.">O segundo número complexo a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se os parâmetros <paramref name="left" /> e <paramref name="right" /> tiverem o mesmo valor; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Explicit(System.Decimal)~System.Numerics.Complex">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value to a complex number.">Define uma conversão explícita de um valor <see cref="T:System.Decimal" /> para um número complexo.</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">O valor a ser convertido em um número complexo.</param>
      <returns vsli:raw="A complex number that has a real component equal to &lt;paramref name=&quot;value&quot; /&gt; and an imaginary component equal to zero.">Um número complexo que tem um componente real igual a <paramref name="value" /> e um componente imaginário igual a zero.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger)~System.Numerics.Complex">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value to a complex number.">Define uma conversão explícita de um valor <see cref="T:System.Numerics.BigInteger" /> para um número complexo.</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">O valor a ser convertido em um número complexo.</param>
      <returns vsli:raw="A complex number that has a real component equal to &lt;paramref name=&quot;value&quot; /&gt; and an imaginary component equal to zero.">Um número complexo que tem um componente real igual a <paramref name="value" /> e um componente imaginário igual a zero.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Byte)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of an unsigned byte to a complex number.">Define uma conversão implícita de um byte sem sinal em um número complexo.</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">O valor a ser convertido em um número complexo.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">Um objeto que contém o valor do parâmetro <paramref name="value" /> como sua parte real e zero como sua parte imaginária.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Double)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of a double-precision floating-point number to a complex number.">Define uma conversão explícita de um número de ponto flutuante de precisão dupla como um número complexo.</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">O valor a ser convertido em um número complexo.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">Um objeto que contém o valor do parâmetro <paramref name="value" /> como sua parte real e zero como sua parte imaginária.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int16)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of a 16-bit signed integer to a complex number.">Define uma conversão implícita de um inteiro com sinal de 16 bits em um número complexo.</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">O valor a ser convertido em um número complexo.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">Um objeto que contém o valor do parâmetro <paramref name="value" /> como sua parte real e zero como sua parte imaginária.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int32)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of a 32-bit signed integer to a complex number.">Define uma conversão implícita de um inteiro com sinal de 32 bits em um número complexo.</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">O valor a ser convertido em um número complexo.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">Um objeto que contém o valor do parâmetro <paramref name="value" /> como sua parte real e zero como sua parte imaginária.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int64)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of a 64-bit signed integer to a complex number.">Define uma conversão implícita de um inteiro com sinal de 64 bits em um número complexo.</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">O valor a ser convertido em um número complexo.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">Um objeto que contém o valor do parâmetro <paramref name="value" /> como sua parte real e zero como sua parte imaginária.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.SByte)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of a signed byte to a complex number.   &#xA;           &#xA;This API is not CLS-compliant.">Define uma conversão implícita de um byte com sinal em um número complexo.   
Esta API não compatível com CLS.</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">O valor a ser convertido em um número complexo.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">Um objeto que contém o valor do parâmetro <paramref name="value" /> como sua parte real e zero como sua parte imaginária.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Single)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of a single-precision floating-point number to a complex number.">Define uma conversão explícita de um número de ponto flutuante de precisão simples como um número complexo.</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">O valor a ser convertido em um número complexo.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">Um objeto que contém o valor do parâmetro <paramref name="value" /> como sua parte real e zero como sua parte imaginária.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt16)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of a 16-bit unsigned integer to a complex number.   &#xA;           &#xA;This API is not CLS-compliant.">Define uma conversão implícita de um inteiro sem sinal de 16 bits em um número complexo.   
Esta API não compatível com CLS.</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">O valor a ser convertido em um número complexo.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">Um objeto que contém o valor do parâmetro <paramref name="value" /> como sua parte real e zero como sua parte imaginária.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt32)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of a 32-bit unsigned integer to a complex number.   &#xA;           &#xA;This API is not CLS-compliant.">Define uma conversão implícita de um inteiro sem sinal de 32 bits em um número complexo.   
Esta API não compatível com CLS.</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">O valor a ser convertido em um número complexo.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">Um objeto que contém o valor do parâmetro <paramref name="value" /> como sua parte real e zero como sua parte imaginária.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt64)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of a 64-bit unsigned integer to a complex number.   &#xA;           &#xA;This API is not CLS-compliant.">Define uma conversão implícita de um inteiro sem sinal de 64 bits em um número complexo.   
Esta API não compatível com CLS.</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">O valor a ser convertido em um número complexo.</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">Um objeto que contém o valor do parâmetro <paramref name="value" /> como sua parte real e zero como sua parte imaginária.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Returns a value that indicates whether two complex numbers are not equal.">Retorna um valor que indica se dois números complexos não são iguais.</summary>
      <param name="left" vsli:raw="The first value to compare.">O primeiro valor a ser comparado.</param>
      <param name="right" vsli:raw="The second value to compare.">O segundo valor a ser comparado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Multiply(System.Double,System.Numerics.Complex)">
      <summary vsli:raw="Multiplies a specified double-precision real number by a specified complex number.">Multiplica um número real de precisão dupla especificado por um número complexo especificado.</summary>
      <param name="left" vsli:raw="The double-precision real value to multiply.">O valor real de precisão dupla a ser multiplicado.</param>
      <param name="right" vsli:raw="The complex value to multiply.">O valor complexo a ser multiplicado.</param>
      <returns vsli:raw="The product of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;, as a complex number.">O produto de <paramref name="left" /> e <paramref name="right" />, como um número complexo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Multiplies the specified complex number by a specified double-precision real number.">Multiplica o número complexo especificado por um número real de precisão dupla especificado.</summary>
      <param name="left" vsli:raw="The complex value to multiply.">O valor complexo a ser multiplicado.</param>
      <param name="right" vsli:raw="The double-precision real value to multiply.">O valor real de precisão dupla a ser multiplicado.</param>
      <returns vsli:raw="The product of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;, as a complex number.">O produto de <paramref name="left" /> e <paramref name="right" />, como um número complexo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Multiplies two specified complex numbers.">Multiplica dois números complexos especificados.</summary>
      <param name="left" vsli:raw="The first complex value to multiply.">O primeiro valor complexo a ser multiplicado.</param>
      <param name="right" vsli:raw="The second complex value to multiply.">O segundo valor complexo a ser multiplicado.</param>
      <returns vsli:raw="The product of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">O produto de <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Subtraction(System.Double,System.Numerics.Complex)">
      <summary vsli:raw="Subtracts a complex number from a double-precision real number.">Subtrai um número complexo de um número real de precisão dupla.</summary>
      <param name="left" vsli:raw="The double-precision real value to subtract from (the minuend).">O valor real de precisão dupla do qual subtrair (o minuendo).</param>
      <param name="right" vsli:raw="The complex value to subtract (the subtrahend).">O valor complexo a ser subtraído (o subtraendo).</param>
      <returns vsli:raw="The result of subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;, as a complex number.">O resultado da subtração de <paramref name="right" /> de <paramref name="left" />, como um número complexo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Subtracts a double-precision real number from a complex number.">Subtrai um número real de precisão dupla de um número complexo.</summary>
      <param name="left" vsli:raw="The complex value to subtract from (the minuend).">O valor complexo do qual subtrair (o minuendo).</param>
      <param name="right" vsli:raw="The double-precision real value to subtract (the subtrahend).">O valor real de precisão dupla a ser subtraído (o subtraendo).</param>
      <returns vsli:raw="The result of subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;, as a complex number.">O resultado da subtração de <paramref name="right" /> de <paramref name="left" />, como um número complexo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Subtracts a complex number from another complex number.">Subtrai um número complexo de outro número complexo.</summary>
      <param name="left" vsli:raw="The value to subtract from (the minuend).">O valor do qual um valor será subtraído (o minuendo).</param>
      <param name="right" vsli:raw="The value to subtract (the subtrahend).">O valor a ser subtraído (o subtraendo).</param>
      <returns vsli:raw="The result of subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;.">O resultado da subtração de <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)">
      <summary vsli:raw="Returns the additive inverse of a specified complex number.">Retorna o inverso aditivo de um número complexo especificado.</summary>
      <param name="value" vsli:raw="The value to negate.">O valor a ser negado.</param>
      <returns vsli:raw="The result of the &lt;see cref=&quot;P:System.Numerics.Complex.Real&quot; /&gt; and &lt;see cref=&quot;P:System.Numerics.Complex.Imaginary&quot; /&gt; components of the &lt;paramref name=&quot;value&quot; /&gt; parameter multiplied by -1.">O resultado dos componentes <see cref="P:System.Numerics.Complex.Real" /> e <see cref="P:System.Numerics.Complex.Imaginary" /> do parâmetro <paramref name="value" /> multiplicado por -1.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Phase">
      <summary vsli:raw="Gets the phase of a complex number.">Obtém a fase de um número complexo.</summary>
      <returns vsli:raw="The phase of a complex number, in radians.">A fase de um número complexo, em radianos.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Returns a specified complex number raised to a power specified by a double-precision floating-point number.">Retorna um número complexo especificado elevado a uma potência especificada por um número de ponto flutuante de precisão dupla.</summary>
      <param name="value" vsli:raw="A complex number to be raised to a power.">Um número complexo a ser elevado a uma potência.</param>
      <param name="power" vsli:raw="A double-precision floating-point number that specifies a power.">Um número de ponto flutuante de precisão dupla que especifica uma potência.</param>
      <returns vsli:raw="The complex number &lt;paramref name=&quot;value&quot; /&gt; raised to the power &lt;paramref name=&quot;power&quot; /&gt;.">O número complexo <paramref name="value" /> elevado à potência <paramref name="power" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Returns a specified complex number raised to a power specified by a complex number.">Retorna um número complexo especificado elevado a uma potência especificada por um número complexo.</summary>
      <param name="value" vsli:raw="A complex number to be raised to a power.">Um número complexo a ser elevado a uma potência.</param>
      <param name="power" vsli:raw="A complex number that specifies a power.">Um número complexo que especifica uma potência.</param>
      <returns vsli:raw="The complex number &lt;paramref name=&quot;value&quot; /&gt; raised to the power &lt;paramref name=&quot;power&quot; /&gt;.">O número complexo <paramref name="value" /> elevado à potência <paramref name="power" />.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Real">
      <summary vsli:raw="Gets the real component of the current &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; object.">Obtém o componente real do objeto <see cref="T:System.Numerics.Complex" /> atual.</summary>
      <returns vsli:raw="The real component of a complex number.">O componente real de um número complexo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Reciprocal(System.Numerics.Complex)">
      <summary vsli:raw="Returns the multiplicative inverse of a complex number.">Retorna o inverso multiplicativo de um número complexo.</summary>
      <param name="value" vsli:raw="A complex number.">Um número complexo.</param>
      <returns vsli:raw="The reciprocal of &lt;paramref name=&quot;value&quot; /&gt;.">O recíproco de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Sin(System.Numerics.Complex)">
      <summary vsli:raw="Returns the sine of the specified complex number.">Retorna o seno do número complexo especificado.</summary>
      <param name="value" vsli:raw="A complex number.">Um número complexo.</param>
      <returns vsli:raw="The sine of &lt;paramref name=&quot;value&quot; /&gt;.">O seno de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Sinh(System.Numerics.Complex)">
      <summary vsli:raw="Returns the hyperbolic sine of the specified complex number.">Retorna o seno hiperbólico do número complexo especificado.</summary>
      <param name="value" vsli:raw="A complex number.">Um número complexo.</param>
      <returns vsli:raw="The hyperbolic sine of &lt;paramref name=&quot;value&quot; /&gt;.">O seno hiperbólico de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Sqrt(System.Numerics.Complex)">
      <summary vsli:raw="Returns the square root of a specified complex number.">Retorna a raiz quadrada de um número complexo especificado.</summary>
      <param name="value" vsli:raw="A complex number.">Um número complexo.</param>
      <returns vsli:raw="The square root of &lt;paramref name=&quot;value&quot; /&gt;.">A raiz quadrada de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Subtract(System.Double,System.Numerics.Complex)">
      <summary vsli:raw="Subtracts one complex number from a double-precision real number and returns the result.">Subtrai um número complexo de um número real de precisão dupla e retorna o resultado.</summary>
      <param name="left" vsli:raw="The double-precision real value to subtract from (the minuend).">O valor real de precisão dupla do qual subtrair (o minuendo).</param>
      <param name="right" vsli:raw="The complex value to subtract (the subtrahend).">O valor complexo a ser subtraído (o subtraendo).</param>
      <returns vsli:raw="The result of subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;, as a complex number.">O resultado da subtração de <paramref name="right" /> de <paramref name="left" />, como um número complexo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Subtracts one double-precision real number from a complex number and returns the result.">Subtrai um número real de precisão dupla de um número complexo e retorna o resultado.</summary>
      <param name="left" vsli:raw="The complex value to subtract from (the minuend).">O valor complexo do qual subtrair (o minuendo).</param>
      <param name="right" vsli:raw="The double-precision real value to subtract (the subtrahend).">O valor real de precisão dupla a ser subtraído (o subtraendo).</param>
      <returns vsli:raw="The result of subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;, as a complex number.">O resultado da subtração de <paramref name="right" /> de <paramref name="left" />, como um número complexo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Subtracts one complex number from another and returns the result.">Subtrai um número complexo de outro e retorna o resultado.</summary>
      <param name="left" vsli:raw="The value to subtract from (the minuend).">O valor do qual um valor será subtraído (o minuendo).</param>
      <param name="right" vsli:raw="The value to subtract (the subtrahend).">O valor a ser subtraído (o subtraendo).</param>
      <returns vsli:raw="The result of subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;.">O resultado da subtração de <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Tan(System.Numerics.Complex)">
      <summary vsli:raw="Returns the tangent of the specified complex number.">Retorna a tangente do número complexo especificado.</summary>
      <param name="value" vsli:raw="A complex number.">Um número complexo.</param>
      <returns vsli:raw="The tangent of &lt;paramref name=&quot;value&quot; /&gt;.">A tangente de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Tanh(System.Numerics.Complex)">
      <summary vsli:raw="Returns the hyperbolic tangent of the specified complex number.">Retorna a tangente hiperbólico do número complexo especificado.</summary>
      <param name="value" vsli:raw="A complex number.">Um número complexo.</param>
      <returns vsli:raw="The hyperbolic tangent of &lt;paramref name=&quot;value&quot; /&gt;.">A tangente hiperbólica de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString">
      <summary vsli:raw="Converts the value of the current complex number to its equivalent string representation in Cartesian form.">Converte o valor do número complexo atual em sua representação de cadeia de caracteres equivalente usando o formato cartesiano.</summary>
      <returns vsli:raw="The string representation of the current instance in Cartesian form.">A representação de cadeia de caracteres da instância atual em formato cartesiano.</returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.IFormatProvider)">
      <summary vsli:raw="Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified culture-specific formatting information.">Converte o valor do número complexo atual na representação de cadeia de caracteres equivalente em formato cartesiano usando as informações especificadas de formatação específica à cultura.</summary>
      <param name="provider" vsli:raw="An object that supplies culture-specific formatting information.">Um objeto que fornece informações de formatação específicas de cultura.</param>
      <returns vsli:raw="The string representation of the current instance in Cartesian form, as specified by &lt;paramref name=&quot;provider&quot; /&gt;.">A representação de cadeia de caracteres da instância atual em formato cartesiano, conforme especificado por <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.String)">
      <summary vsli:raw="Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format for its real and imaginary parts.">Converte o valor do número complexo atual na representação de cadeia de caracteres equivalente em formato cartesiano, usando o formato especificado para suas partes reais e imaginárias.</summary>
      <param name="format" vsli:raw="A standard or custom numeric format string.">Uma cadeia de caracteres padrão ou de formato numérico personalizado.</param>
      <returns vsli:raw="The string representation of the current instance in Cartesian form.">A representação de cadeia de caracteres da instância atual em formato cartesiano.</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;format&quot; /&gt; is not a valid format string.">
        <paramref name="format" /> não é uma cadeia de caracteres de formato válida.</exception>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.String,System.IFormatProvider)">
      <summary vsli:raw="Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format and culture-specific format information for its real and imaginary parts.">Converte o valor do número complexo atual na representação de cadeia de caracteres equivalente em formato cartesiano, usando o formato especificado e as informações de formato específicas à cultura para suas partes reais e imaginárias.</summary>
      <param name="format" vsli:raw="A standard or custom numeric format string.">Uma cadeia de caracteres padrão ou de formato numérico personalizado.</param>
      <param name="provider" vsli:raw="An object that supplies culture-specific formatting information.">Um objeto que fornece informações de formatação específicas de cultura.</param>
      <returns vsli:raw="The string representation of the current instance in Cartesian form, as specified by &lt;paramref name=&quot;format&quot; /&gt; and &lt;paramref name=&quot;provider&quot; /&gt;.">A representação de cadeia de caracteres da instância atual em formato cartesiano, conforme especificado por <paramref name="format" /> e <paramref name="provider" />.</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;format&quot; /&gt; is not a valid format string.">
        <paramref name="format" /> não é uma cadeia de caracteres de formato válida.</exception>
    </member>
    <member name="F:System.Numerics.Complex.Zero">
      <summary vsli:raw="Returns a new &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; instance with a real number equal to zero and an imaginary number equal to zero.">Retorna uma nova instância do <see cref="T:System.Numerics.Complex" /> com um número real igual a zero e um número imaginário igual a zero.</summary>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Collections.Immutable</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Immutable.IImmutableDictionary`2">
      <summary vsli:raw="Represents an immutable collection of key/value pairs.  &#xA;&#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa uma coleção imutável de pares chave/valor.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">O tipo de chaves no dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">O tipo de valores no dicionário.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the dictionary.">Adiciona um elemento com a chave e o valor especificados ao dicionário.</summary>
      <param name="key" vsli:raw="The key of the element to add.">A chave do elemento a ser adicionada.</param>
      <param name="value" vsli:raw="The value of the element to add.">O valor do elemento a ser adicionado.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pair.">Um novo dicionário imutável que contém o par chave/valor adicional.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">A chave especificada já existe no dicionário, mas tem um valor diferente.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specified key/value pairs to the dictionary.">Adiciona os pares chave/valor especificados ao dicionário.</summary>
      <param name="pairs" vsli:raw="The key/value pairs to add.">Os pares chave/valor a serem adicionados.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">Um novo dicionário imutável que contém os pares chave/valor adicionais.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">Uma das chaves fornecidas já existe no dicionário, mas tem um valor diferente.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">Recupera um dicionário vazio que tem a mesma ordenação e regras de comparação de chave/valor que essa instância de dicionário.</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">Um dicionário vazio com ordenação e regras de comparação de chave/valor equivalentes.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable dictionary contains the specified key/value pair.">Determina se o dicionário imutável contém o par chave/valor especificado.</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">O par chave/valor a ser localizado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o par chave/valor especificado for encontrado no dicionário; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">Remove o elemento com a chave especificada do dicionário imutável.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">A chave do elemento a ser removido.</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary.">Um novo dicionário imutável com o elemento especificado removido; ou esta instância, se a chave especificada não puder ser encontrada no dicionário.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable dictionary.">Remove os elementos do dicionário imutável com as chaves especificadas.</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">As chaves dos elementos a serem removidos.</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">Um novo dicionário imutável com as chaves especificadas removidas; ou esta instância, se a chave especificada não puder ser encontrada no dicionário.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.">Define a chave especificada e o valor no dicionário imutável, possivelmente substituindo um valor existente para a chave.</summary>
      <param name="key" vsli:raw="The key of the entry to add.">A chave da entrada a ser adicionada.</param>
      <param name="value" vsli:raw="The key value to set.">O valor de chave a ser definido.</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pair.">Um novo dicionário imutável que contém o par chave/valor especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys.">Define os pares chave/valor especificados no dicionário imutável, possivelmente substituindo valores existente para as chaves.</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">Os pares chave/valor a serem definidos no dicionário. Se qualquer uma das chaves já existir no dicionário, este método substituirá os respectivos valores anteriores.</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pairs.">Um novo dicionário imutável que contém os pares chave/valor especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Determina se este dicionário contém uma chave especificada.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">A chave a ser pesquisada.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">A chave correspondente localizada no dicionário, se encontrada, ou <c>equalkey</c> se nenhuma correspondência for encontrada.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se uma correspondência para <paramref name="equalKey" /> for encontrada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableList`1">
      <summary vsli:raw="Represents a list of elements that cannot be modified.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa uma lista de elementos que não pode ser modificada.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">O tipo dos elementos na lista.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Add(`0)">
      <summary vsli:raw="Makes a copy of the list, and adds the specified object to the end of the copied list.">Faz uma cópia da lista e adiciona o objeto especificado ao final da lista copiada.</summary>
      <param name="value" vsli:raw="The object to add to the list.">O objeto a ser adicionado à lista.</param>
      <returns vsli:raw="A new list with the object added.">Uma nova lista com o objeto adicionado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Makes a copy of the list and adds the specified objects to the end of the copied list.">Faz uma cópia da lista e adiciona os objetos especificados ao final da lista copiada.</summary>
      <param name="items" vsli:raw="The objects to add to the list.">Os objetos a serem adicionados à lista.</param>
      <returns vsli:raw="A new list with the elements added.">Uma nova lista com os elementos adicionados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Clear">
      <summary vsli:raw="Creates  a list with all the items removed, but with the same sorting and ordering semantics as this list.">Cria uma lista com todos os itens removidos, mas com a mesma semântica de classificação e ordenação desta lista.</summary>
      <returns vsli:raw="An empty list that has the same sorting and ordering semantics as this instance.">Uma lista vazia que tem as mesmas semânticas de classificação e ordenação que essa instância.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that starts at the specified index and contains the specified number of elements.">Pesquisa o objeto especificado e retorna o índice baseado em zero da primeira ocorrência em um intervalo de elementos no <see cref="T:System.Collections.Immutable.IImmutableList`1" /> que começa no índice especificado e contém o número de elementos especificado.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt;. This value can be null for reference types.">O objeto a ser localizado no <see cref="T:System.Collections.Immutable.IImmutableList`1" />. Esse valor pode ser nulo para tipos de referência.</param>
      <param name="index" vsli:raw="The zero-based starting indexes of the search. 0 (zero) is valid in an empty list.">Os índices iniciais com base em zero da pesquisa. 0 (zero) é válido em uma lista vazia.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">O número de elementos na seção a ser pesquisada.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to locate &lt;paramref name=&quot;item&quot; /&gt;.">O comparador de igualdade a ser usado para localizar <paramref name="item" />.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements if found; otherwise -1.">O índice baseado em zero da primeira ocorrência de <paramref name="item" /> no intervalo de elementos na <see cref="T:System.Collections.Immutable.IImmutableList`1" /> que começa em <paramref name="index" /> e contém o número de elementos <paramref name="count" />, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified element at the specified index in the immutable list.">Insere o elemento especificado no índice especificado na lista imutável.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the value.">O índice baseado em zero no qual inserir o valor.</param>
      <param name="element" vsli:raw="The object to insert.">O objeto a ser inserido.</param>
      <returns vsli:raw="A new immutable list that includes the specified element.">Uma nova lista imutável que inclui o elemento especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified elements at the specified index in the immutable list.">Insere os elementos especificados no índice especificado na lista imutável.</summary>
      <param name="index" vsli:raw="The zero-based index at which the new elements should be inserted.">O índice baseado em zero no qual os novos elementos devem ser inseridos.</param>
      <param name="items" vsli:raw="The elements to insert.">Os elementos a serem inseridos.</param>
      <returns vsli:raw="A new immutable list that includes the specified elements.">Uma nova lista imutável que inclui os elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that contains the specified number of elements and ends at the specified index.">Pesquisa o objeto especificado e retorna o índice baseado em zero da última ocorrência no intervalo de elementos na <see cref="T:System.Collections.Immutable.IImmutableList`1" /> que contém o número de elementos especificado e termina no índice especificado.</summary>
      <param name="item" vsli:raw="The object to locate in the list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">O objeto a ser localizado na lista. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">O índice inicial com base em zero da pesquisa. 0 (zero) é válido em uma lista vazia.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">O número de elementos na seção a ser pesquisada.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to match &lt;paramref name=&quot;item&quot; /&gt;.">O comparador de igualdade para corresponder a <paramref name="item" />.</param>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Retorna <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the first occurrence of a specified object from this immutable list.">Remove a primeira ocorrência de um objeto especificado dessa lista imutável.</summary>
      <param name="value" vsli:raw="The object to remove from the list.">O objeto a ser removido da lista.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to locate &lt;paramref name=&quot;value&quot; /&gt;.">O comparador de igualdade a ser usado para localizar <paramref name="value" />.</param>
      <returns vsli:raw="A new list with the specified object removed.">Uma nova lista com o objeto especificado removido.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">Remove todos os elementos que correspondem às condições definidas pelo predicado especificado.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">O delegado que define as condições dos elementos a serem removidos.</param>
      <returns vsli:raw="A new immutable list with the elements removed.">Uma nova lista imutável com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the immutable list.">Remove o elemento no índice especificado da lista imutável.</summary>
      <param name="index" vsli:raw="The index of the element to remove.">O índice do elemento a ser removido.</param>
      <returns vsli:raw="A new list with the element removed.">Uma nova lista com o elemento removido.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified object from the list.">Remove o objeto especificado da lista.</summary>
      <param name="items" vsli:raw="The objects to remove from the list.">Os objetos a serem removidos da lista.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to determine if &lt;paramref name=&quot;items&quot; /&gt; match any objects in the list.">O comparador de igualdade a ser usado para determinar se <paramref name="items" /> corresponde a todos os objetos na lista.</param>
      <returns vsli:raw="A new immutable list with the specified objects removed, if &lt;paramref name=&quot;items&quot; /&gt; matched objects in the list.">Uma nova lista imutável com os objetos especificados removidos, se <paramref name="items" /> tiver correspondido a objetos na lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes a range of elements from the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt;.">Remove um intervalo de elementos do <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range of elements to remove.">O índice inicial baseado em zero do intervalo de elementos a serem removidos.</param>
      <param name="count" vsli:raw="The number of elements to remove.">O número de elementos a serem removidos.</param>
      <returns vsli:raw="A new immutable list with the elements removed.">Uma nova lista imutável com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns a new list with the first matching element in the list replaced with the specified element.">Retorna uma nova lista com o elemento de primeira correspondência na lista substituída pelo elemento especificado.</summary>
      <param name="oldValue" vsli:raw="The element to be replaced.">O elemento a ser substituído.</param>
      <param name="newValue" vsli:raw="The element to replace the first occurrence of &lt;paramref name=&quot;oldValue&quot; /&gt; with.">O elemento pelo qual substituir a primeira ocorrência de <paramref name="oldValue" /></param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use for matching &lt;paramref name=&quot;oldValue&quot; /&gt;.">O comparador de igualdade a ser usado para a correspondência com <paramref name="oldValue" />.</param>
      <returns vsli:raw="A new list that contains &lt;paramref name=&quot;newValue&quot; /&gt;, even if &lt;paramref name=&quot;oldvalue&quot; /&gt; is the same as &lt;paramref name=&quot;newValue&quot; /&gt;.">Uma nova lista que contém <paramref name="newValue" />, mesmo que <paramref name="oldvalue" /> seja o mesmo que <paramref name="newValue" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">
        <paramref name="oldValue" /> não existe na lista.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element in the list at a given position with the specified element.">Substitui um elemento na lista na posição especificada, pelo elemento especificado.</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">A posição na lista do elemento a ser substituído.</param>
      <param name="value" vsli:raw="The element to replace the old element with.">O elemento pelo qual substituir o elemento antigo.</param>
      <returns vsli:raw="A new list that contains the new element, even if the element at the specified location is the same as the new element.">Uma nova lista que contém o novo elemento, mesmo que o elemento no local especificado seja o mesmo que o novo elemento.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableQueue`1">
      <summary vsli:raw="Represents an immutable first-in, first-out collection of objects.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa uma coleção imutável de objetos primeiro a entrar, primeiro a sair.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">O tipo de elementos na fila.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Clear">
      <summary vsli:raw="Returns a new queue with all the elements removed.">Retorna uma nova fila com todos os elementos removidos.</summary>
      <returns vsli:raw="An empty immutable queue.">Uma fila imutável vazia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Dequeue">
      <summary vsli:raw="Removes the first element in the immutable queue, and returns the new queue.">Remove o primeiro elemento na fila imutável e retorna a nova fila.</summary>
      <returns vsli:raw="The new immutable queue with the first element removed. This value is never &lt;see langword=&quot;null&quot; /&gt;.">A nova fila imutável com o primeiro elemento removido. Esse valor nunca é <c>null</c>.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">A fila está vazia.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">Adiciona um elemento ao final da fila imutável e retorna a nova fila.</summary>
      <param name="value" vsli:raw="The element to add.">O elemento a ser adicionado.</param>
      <returns vsli:raw="The new immutable queue with the specified element added.">A nova fila imutável com o elemento especificado adicionado.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableQueue`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable queue is empty.">Obtém um valor que indica se essa fila imutável está vazia.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this queue is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se essa fila estiver vazia; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Peek">
      <summary vsli:raw="Returns the element at the beginning of the immutable queue without removing it.">Retorna o elemento no início da fila imutável sem removê-lo.</summary>
      <returns vsli:raw="The element at the beginning of the queue.">O elemento no início da fila.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">A fila está vazia.</exception>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableSet`1">
      <summary vsli:raw="Represents a set of elements that can only be modified by creating a new instance of the set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa um conjunto de elementos que só pode ser modificado por meio da criação de uma nova instância do conjunto.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" vsli:raw="The type of element stored in the set.">O tipo de elemento armazenado no conjunto.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">Adiciona o elemento especificado a este conjunto imutável.</summary>
      <param name="value" vsli:raw="The element to add.">O elemento a ser adicionado.</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">Um novo conjunto com o elemento adicionado ou esse conjunto se o elemento já está estiver nele.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Clear">
      <summary vsli:raw="Retrieves an empty immutable set that has the same sorting and ordering semantics as this instance.">Recupera um conjunto imutável vazio que tem as mesmas semânticas de classificação e ordenação que essa instância.</summary>
      <returns vsli:raw="An empty set that has the same sorting and ordering semantics as this instance.">Um conjunto vazio que tem as mesmas semânticas de classificação e ordenação que essa instância.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable set contains a specified element.">Determina se este conjunto imutável contém um elemento especificado.</summary>
      <param name="value" vsli:raw="The element to locate in the set.">O elemento a ser localizado no conjunto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conjunto contém o valor especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable set.">Remove os elementos na coleção especificada do conjunto imutável atual.</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">A coleção de itens a serem removidos desse conjunto.</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">Um novo conjunto com os itens removidos; ou o conjunto original se nenhum dos itens tiverem sido encontrados no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that exist in this set and the specified set.">Cria um conjunto imutável que contenha somente elementos que existam nesse conjunto e no conjunto especificado.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableSet`1&quot; /&gt;.">A coleção a ser comparada com o <see cref="T:System.Collections.Immutable.IImmutableSet`1" /> atual.</param>
      <returns vsli:raw="A new immutable set that contains elements that exist in both sets.">Um novo conjunto imutável que contém elementos que existem nos dois conjuntos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a proper (strict) subset of the specified collection.">Determina se o conjunto imutável atual é um subconjunto apropriado (estrito) da coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conjunto atual for um subconjunto apropriado da coleção especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a proper (strict) superset of the specified collection.">Determina se o conjunto imutável atual é um superconjunto apropriado (estrito) da coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conjunto atual for um superconjunto apropriado da coleção especificada; caso contrário, falso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a subset of a specified collection.">Determina se o conjunto imutável atual é um subconjunto de uma coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conjunto atual for um subconjunto da coleção especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a superset of a specified collection.">Determina se o conjunto imutável atual é um superconjunto de uma coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conjunto atual for um superconjunto da coleção especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set overlaps with the specified collection.">Determina se o conjunto imutável atual se sobrepõe à coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and the specified collection share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conjunto atual e a coleção especificada compartilharem pelo menos um elemento comum; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">Remove o elemento especificado desse conjunto imutável.</summary>
      <param name="value" vsli:raw="The element to remove.">O elemento a ser removido.</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">Um novo conjunto com o elemento especificado removido ou o conjunto atual se o elemento não puder ser encontrado no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set and the specified collection contain the same elements.">Determina se o conjunto imutável atual e a coleção especificada contêm os mesmos elementos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se os conjuntos forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">Cria um conjunto imutável que contém somente os elementos que estão presentes no conjunto atual ou na coleção especificada, mas não em ambos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">Um novo conjunto que contém os elementos que estão presentes somente no conjunto atual ou na coleção especificada, mas não em ambos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Determines whether the set contains a specified value.">Determina se o conjunto contém um valor especificado.</summary>
      <param name="equalValue" vsli:raw="The value to search for.">O valor a ser procurado.</param>
      <param name="actualValue" vsli:raw="The matching value from the set, if found, or &lt;c&gt;equalvalue&lt;/c&gt; if there are no matches.">O valor correspondente do conjunto, se encontrado, ou <c>equalvalue</c> se não houver nenhuma correspondência.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a matching value was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se um valor correspondente for encontrado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">Cria um novo conjunto imutável que contém todos os elementos que estão presentes no conjunto atual ou na coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to add elements from.">A coleção da qual os elementos serão adicionados.</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">Um novo conjunto imutável com os itens adicionados; ou o conjunto original se todos os itens já estiverem no conjunto.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableStack`1">
      <summary vsli:raw="Represents an immutable last-in-first-out (LIFO) collection.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa uma coleção imutável LIFO (último a entrar, primeiro a sair).  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the stack.">O tipo de elementos na pilha.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable stack.">Remove todos os objetos da pilha imutável.</summary>
      <returns vsli:raw="An empty immutable stack.">Uma pilha imutável vazia.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableStack`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable stack is empty.">Obtém um valor que indica se essa pilha imutável está vazia.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this stack is empty; otherwise,&lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se essa pilha estiver vazia; caso contrário<see langword="false" />,.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Peek">
      <summary vsli:raw="Returns the element at the top of the immutable stack without removing it.">Retorna o elemento da parte superior da pilha imutável sem removê-lo.</summary>
      <returns vsli:raw="The element at the top of the stack.">O elemento na parte superior da pilha.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">A pilha está vazia.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the new stack.">Remove o elemento que está na parte superior da pilha imutável e retorna a nova pilha.</summary>
      <returns vsli:raw="The new stack; never &lt;see langword=&quot;null&quot; /&gt;.">A nova pilha; nunca <c>null</c></returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">A pilha está vazia.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Push(`0)">
      <summary vsli:raw="Inserts an element at the top of the immutable stack and returns the new stack.">Insere um elemento na parte superior da pilha imutável e retorna a nova pilha.</summary>
      <param name="value" vsli:raw="The element to push onto the stack.">O elemento a ser enviado por push para a pilha.</param>
      <returns vsli:raw="The new stack.">A nova pilha.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray">
      <summary vsli:raw="Provides methods for creating an array that is immutable; meaning it cannot be changed once it is created.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Fornece métodos para criar uma matriz que é imutável, o que significa que ela não pode ser alterada depois de criada.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)">
      <summary vsli:raw="Searches the sorted immutable array for a specified element using the default comparer and returns the zero-based index of the element, if it's found.">Pesquisa um elemento especificado na matriz classificada imutável usando o comparador padrão e retorna o índice baseado em zero do elemento, se ele é encontrado.</summary>
      <param name="array" vsli:raw="The sorted array to search.">A matriz classificada para pesquisar.</param>
      <param name="value" vsli:raw="The object to search for.">O objeto a ser procurado.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">O tipo de elemento armazenado na matriz.</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">O índice baseado em zero do item na matriz, se o item for encontrado; caso contrário, um número negativo que é o complemento bit a bit do índice do próximo elemento maior que <paramref name="value" /> ou, se não houver nenhum elemento maior, o complemento bit a bit de <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="value" /> não implementa <see cref="T:System.IComparable" /> ou a pesquisa encontra um elemento que não implementa <see cref="T:System.IComparable" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it's found.">Pesquisa um elemento especificado em uma matriz classificada imutável e retorna o índice baseado em zero do elemento, se ele é encontrado.</summary>
      <param name="array" vsli:raw="The sorted array to search.">A matriz classificada para pesquisar.</param>
      <param name="value" vsli:raw="The object to search for.">O objeto a ser procurado.</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements, or null to use the default comparer.">A implementação de comparador a ser usada na comparação de elementos ou nulo para usar o comparador padrão.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">O tipo de elemento armazenado na matriz.</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">O índice baseado em zero do item na matriz, se o item for encontrado; caso contrário, um número negativo que é o complemento bit a bit do índice do próximo elemento maior que <paramref name="value" /> ou, se não houver nenhum elemento maior, o complemento bit a bit de <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is null and &lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="comparer" /> é nulo e <paramref name="value" /> não implementa <see cref="T:System.IComparable" /> ou a pesquisa encontra um elemento que não implementa <see cref="T:System.IComparable" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it's found.">Pesquisa um elemento especificado em uma matriz classificada imutável e retorna o índice baseado em zero do elemento, se ele é encontrado.</summary>
      <param name="array" vsli:raw="The sorted array to search.">A matriz classificada para pesquisar.</param>
      <param name="index" vsli:raw="The starting index of the range to search.">O índice inicial do intervalo a ser procurado.</param>
      <param name="length" vsli:raw="The length of the range to search.">O tamanho do intervalo a ser procurado.</param>
      <param name="value" vsli:raw="The object to search for.">O objeto a ser procurado.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">O tipo de elemento armazenado na matriz.</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">O índice baseado em zero do item na matriz, se o item for encontrado; caso contrário, um número negativo que é o complemento bit a bit do índice do próximo elemento maior que <paramref name="value" /> ou, se não houver nenhum elemento maior, o complemento bit a bit de <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="value" /> não implementa <see cref="T:System.IComparable" /> ou a pesquisa encontra um elemento que não implementa <see cref="T:System.IComparable" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; do not specify a valid range in &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> e <paramref name="length" /> não especificam um intervalo válido em <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the lower bound of &lt;paramref name=&quot;array&quot; /&gt;.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;length&quot; /&gt; is less than zero.">
        <paramref name="index" /> é menor que o limite inferior de <paramref name="array" />.

ou -

<paramref name="length" /> é menor que zero.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element.">Pesquisa um elemento especificado em uma matriz classificada imutável e retorna o índice baseado em zero do elemento.</summary>
      <param name="array" vsli:raw="The sorted array to search.">A matriz classificada para pesquisar.</param>
      <param name="index" vsli:raw="The starting index of the range to search.">O índice inicial do intervalo a ser procurado.</param>
      <param name="length" vsli:raw="The length of the range to search.">O tamanho do intervalo a ser procurado.</param>
      <param name="value" vsli:raw="The object to search for.">O objeto a ser procurado.</param>
      <param name="comparer" vsli:raw="The comparer to use when comparing elements for equality or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">O comparador a ser usado na comparação da igualdade de elementos ou <see langword="null" /> para usar o comparador padrão.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">O tipo de elemento armazenado na matriz.</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">O índice baseado em zero do item na matriz, se o item for encontrado; caso contrário, um número negativo que é o complemento bit a bit do índice do próximo elemento maior que <paramref name="value" /> ou, se não houver nenhum elemento maior, o complemento bit a bit de <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is null and &lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="comparer" /> é nulo e <paramref name="value" /> não implementa <see cref="T:System.IComparable" /> ou a pesquisa encontra um elemento que não implementa <see cref="T:System.IComparable" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; do not specify a valid range in &lt;paramref name=&quot;array&quot; /&gt;.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not compatible with the elements of &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> e <paramref name="length" /> não especificam um intervalo válido em <paramref name="array" />.

ou -

<paramref name="comparer" /> é <see langword="null" />, e <paramref name="value" /> é de um tipo que não é compatível com os elementos de <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the lower bound of &lt;paramref name=&quot;array&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;length&quot; /&gt; is less than zero.">
        <paramref name="index" /> é menor que o limite inferior de <paramref name="array" />.

ou -

<paramref name="length" /> é menor que zero.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1">
      <summary vsli:raw="Creates an empty immutable array.">Cria uma matriz imutável vazia.</summary>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">O tipo de elementos armazenados na matriz.</typeparam>
      <returns vsli:raw="An empty immutable array.">Uma matriz imutável vazia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified object.">Cria uma matriz imutável que contém o objeto especificado.</summary>
      <param name="item" vsli:raw="The object to store in the array.">O objeto a ser armazenado na matriz.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">O tipo de elementos armazenados na matriz.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified object.">Uma matriz imutável que contém o objeto especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">Cria uma matriz imutável que contém os objetos especificados.</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">O primeiro objeto a ser armazenado na matriz.</param>
      <param name="item2" vsli:raw="The second object to store in the array.">O segundo objeto a ser armazenado na matriz.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">O tipo de elementos armazenados na matriz.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">Uma matriz imutável que contém os objetos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">Cria uma matriz imutável que contém os objetos especificados.</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">O primeiro objeto a ser armazenado na matriz.</param>
      <param name="item2" vsli:raw="The second object to store in the array.">O segundo objeto a ser armazenado na matriz.</param>
      <param name="item3" vsli:raw="The third object to store in the array.">O terceiro objeto a ser armazenado na matriz.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">O tipo de elementos armazenados na matriz.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">Uma matriz imutável que contém os objetos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">Cria uma matriz imutável que contém os objetos especificados.</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">O primeiro objeto a ser armazenado na matriz.</param>
      <param name="item2" vsli:raw="The second object to store in the array.">O segundo objeto a ser armazenado na matriz.</param>
      <param name="item3" vsli:raw="The third object to store in the array.">O terceiro objeto a ser armazenado na matriz.</param>
      <param name="item4" vsli:raw="The fourth object to store in the array.">O quarto objeto a ser armazenado na matriz.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">O tipo de elementos armazenados na matriz.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">Uma matriz imutável que contém os objetos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[])">
      <summary vsli:raw="Creates an immutable array from the specified array of objects.">Cria uma matriz imutável com base na matriz de objetos especificada.</summary>
      <param name="items" vsli:raw="The array of objects to populate the array with.">A matriz de objetos com os quais preencher a matriz.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">O tipo de elementos armazenados na matriz.</typeparam>
      <returns vsli:raw="An immutable array that contains the array of items.">Uma matriz imutável que contém a matriz de itens.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates an immutable array with specified objects from another array.">Cria uma matriz imutável com objetos especificados de outra matriz.</summary>
      <param name="items" vsli:raw="The source array of objects.">A matriz de origem dos objetos.</param>
      <param name="start" vsli:raw="The index of the first element to copy from &lt;paramref name=&quot;items&quot; /&gt;.">O índice do primeiro elemento a ser copiado de <paramref name="items" />.</param>
      <param name="length" vsli:raw="The number of elements from &lt;paramref name=&quot;items&quot; /&gt; to include in this immutable array.">O número de elementos de <paramref name="items" /> a ser incluído nessa matriz imutável.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">O tipo de elementos armazenados na matriz.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects from the source array.">Uma matriz imutável que contém os objetos especificados da matriz de origem.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)">
      <summary vsli:raw="Creates an immutable array with the specified objects from another immutable array.">Cria uma matriz imutável com os objetos especificados de outra matriz imutável.</summary>
      <param name="items" vsli:raw="The source array of objects.">A matriz de origem dos objetos.</param>
      <param name="start" vsli:raw="The index of the first element to copy from &lt;paramref name=&quot;items&quot; /&gt;.">O índice do primeiro elemento a ser copiado de <paramref name="items" />.</param>
      <param name="length" vsli:raw="The number of elements from &lt;paramref name=&quot;items&quot; /&gt; to include in this immutable array.">O número de elementos de <paramref name="items" /> a ser incluído nessa matriz imutável.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">O tipo de elementos armazenados na matriz.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects from the source array.">Uma matriz imutável que contém os objetos especificados da matriz de origem.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1">
      <summary vsli:raw="Creates a mutable array that can be converted to an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray&quot; /&gt; without allocating new memory.">Cria uma matriz mutável que pode ser convertida em uma <see cref="T:System.Collections.Immutable.ImmutableArray" /> sem alocação de nova memória.</summary>
      <typeparam name="T" vsli:raw="The type of elements stored in the builder.">O tipo de elementos armazenados no construtor.</typeparam>
      <returns vsli:raw="A mutable array of the specified type that can be efficiently converted to an immutable array.">Uma matriz mutável do tipo especificado que pode ser convertida com eficiência em uma matriz imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)">
      <summary vsli:raw="Creates a mutable array that can be converted to an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray&quot; /&gt; without allocating new memory.">Cria uma matriz mutável que pode ser convertida em uma <see cref="T:System.Collections.Immutable.ImmutableArray" /> sem alocação de nova memória.</summary>
      <param name="initialCapacity" vsli:raw="The initial capacity of the builder.">A capacidade inicial do construtor.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the builder.">O tipo de elementos armazenados no construtor.</typeparam>
      <returns vsli:raw="A mutable array of the specified type that can be efficiently converted to an immutable array.">Uma matriz mutável do tipo especificado que pode ser convertida com eficiência em uma matriz imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; populated with the specified items.">Cria uma nova <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> preenchida com os itens especificados.</summary>
      <param name="items" vsli:raw="The elements to add to the array.">Os elementos a serem adicionados à matriz.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">O tipo de elemento armazenado na matriz.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified items.">Uma matriz imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">Inicializa uma nova instância do struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">A matriz de origem com a qual inicializar a matriz resultante.</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array.">A função a ser aplicada a cada elemento da matriz de origem.</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">Inicializa uma nova instância do struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">A matriz de origem com a qual inicializar a matriz resultante.</param>
      <param name="start" vsli:raw="The index of the first element in the source array to include in the resulting array.">O índice do primeiro elemento da matriz de origem a ser incluído na matriz resultante.</param>
      <param name="length" vsli:raw="The number of elements from the source array to include in the resulting array.">O número de elementos da matriz de origem a ser incluído na matriz resultante.</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array included in the resulting array.">A função a ser aplicada a cada elemento da matriz de origem incluído na matriz resultante.</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">Inicializa uma nova instância do struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">A matriz de origem com a qual inicializar a matriz resultante.</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array.">A função a ser aplicada a cada elemento da matriz de origem.</param>
      <param name="arg" vsli:raw="An argument to be passed to the selector mapping function.">Um argumento a ser passado para a função de mapeamento do seletor.</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TArg" vsli:raw="The type of argument to pass to the selector mapping function." />
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">Inicializa uma nova instância do struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">A matriz de origem com a qual inicializar a matriz resultante.</param>
      <param name="start" vsli:raw="The index of the first element in the source array to include in the resulting array.">O índice do primeiro elemento da matriz de origem a ser incluído na matriz resultante.</param>
      <param name="length" vsli:raw="The number of elements from the source array to include in the resulting array.">O número de elementos da matriz de origem a ser incluído na matriz resultante.</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array included in the resulting array.">A função a ser aplicada a cada elemento da matriz de origem incluído na matriz resultante.</param>
      <param name="arg" vsli:raw="An argument to be passed to the selector mapping function.">Um argumento a ser passado para a função de mapeamento do seletor.</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TArg" vsli:raw="The type of argument to be passed to the selector mapping function." />
      <typeparam name="TResult" vsli:raw="The type of element to be stored in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates an immutable array from the specified collection.">Cria uma matriz imutável com base na coleção especificada.</summary>
      <param name="items" vsli:raw="The collection of objects to copy to the immutable array.">A coleção de objetos a serem copiados na matriz imutável.</param>
      <typeparam name="TSource" vsli:raw="The type of elements contained in &lt;paramref name=&quot;items&quot; /&gt;.">O tipo de elementos contidos em <paramref name="items" />.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified collection of objects.">Uma matriz imutável que contém a coleção especificada de objetos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Creates an immutable array from the current contents of the builder's array.">Cria uma matriz imutável do conteúdo atual da matriz do construtor.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable array from.">O construtor para o qual criar a matriz imutável.</param>
      <typeparam name="TSource" vsli:raw="The type of elements contained in the immutable array.">O tipo de elementos contidos na matriz imutável.</typeparam>
      <returns vsli:raw="An immutable array that contains the current contents of the builder's array.">Uma matriz imutável que é preenchida com o conteúdo atual da matriz do construtor.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1">
      <summary vsli:raw="Represents an array that is immutable; meaning it cannot be changed once it is created.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa uma matriz que é imutável, o que significa que ela não pode ser alterada depois de criada.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">O tipo de elemento armazenado pela matriz.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Add(`0)">
      <summary vsli:raw="Returns a copy of the original array with the specified item added to the end.">Retorna uma cópia da matriz original com o item especificado adicionado ao final.</summary>
      <param name="item" vsli:raw="The item to be added to the end of the array.">O item a ser adicionado ao final da matriz.</param>
      <returns vsli:raw="A new array with the specified item added to the end.">Uma nova matriz com o item especificado adicionado ao final.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">Retorna uma cópia da matriz original com os elementos especificados adicionados ao final da matriz.</summary>
      <param name="items" vsli:raw="The elements to add to the array.">Os elementos a serem adicionados à matriz.</param>
      <returns vsli:raw="A new array with the elements added.">Uma nova matriz com os elementos adicionados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">Retorna uma cópia da matriz original com os elementos especificados adicionados ao final da matriz.</summary>
      <param name="items" vsli:raw="The elements to add to the array.">Os elementos a serem adicionados à matriz.</param>
      <returns vsli:raw="A new array with the elements added.">Uma nova matriz com os elementos adicionados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.As``1">
      <summary vsli:raw="Returns a new immutable array that contains the elements of this array cast to a different type.">Retorna uma nova matriz imutável que contém os elementos dessa matriz convertidos em um tipo diferente.</summary>
      <typeparam name="TOther" vsli:raw="The type of array element to return.">O tipo de elemento de matriz a ser retornado.</typeparam>
      <returns vsli:raw="An immutable array that contains the elements of this array, cast to a different type. If the cast fails, returns an array whose &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Uma matriz imutável que contém os elementos dessa matriz convertidos em um tipo diferente. Se a conversão falhar, retorna uma matriz cuja propriedade <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retorna <see langword="true" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsMemory">
      <summary vsli:raw="Creates a new read-only memory region over this immutable array.">Cria uma nova região de memória somente leitura sobre essa matriz imutável.</summary>
      <returns vsli:raw="The read-only memory representation of this immutable array.">A representação de memória somente leitura dessa matriz imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsSpan">
      <summary vsli:raw="Creates a new read-only span over this immutable array.">Cria uma novo intervalo somente leitura sobre essa matriz imutável.</summary>
      <returns vsli:raw="The read-only span representation of this immutable array.">A representação de intervalo somente leitura dessa matriz imutável.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Builder">
      <summary vsli:raw="A writable array accessor that can be converted into an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; instance without allocating extra memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Um acessador de matriz gravável que pode ser convertido em uma instância <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> sem alocar memória extra.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Add(`0)">
      <summary vsli:raw="Adds the specified item to the array.">Adiciona o item especificado à matriz.</summary>
      <param name="item" vsli:raw="The object to add to the array.">O objeto a ser adicionado à matriz.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[])">
      <summary vsli:raw="Adds the specified items to the end of the array.">Adiciona os itens especificados ao final da matriz.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Os itens a serem adicionados à matriz.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[],System.Int32)">
      <summary vsli:raw="Adds the specified items to the end of the array.">Adiciona os itens especificados ao final da matriz.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Os itens a serem adicionados à matriz.</param>
      <param name="length" vsli:raw="The number of elements from the source array to add.">O número de elementos da matriz de origem a serem adicionados.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the specified items to the end of the array.">Adiciona os itens especificados ao final da matriz.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Os itens a serem adicionados à matriz.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Adds the specified items to the end of the array.">Adiciona os itens especificados ao final da matriz.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Os itens a serem adicionados à matriz.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0},System.Int32)">
      <summary vsli:raw="Adds the specified items to the end of the array.">Adiciona os itens especificados ao final da matriz.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Os itens a serem adicionados à matriz.</param>
      <param name="length" vsli:raw="The number of elements from the source array to add.">O número de elementos da matriz de origem a serem adicionados.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0}.Builder)">
      <summary vsli:raw="Adds the specified items to the end of the array.">Adiciona os itens especificados ao final da matriz.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Os itens a serem adicionados à matriz.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(``0[])">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">Adiciona ao final da matriz os itens especificados que derivam do tipo atualmente na matriz.</summary>
      <param name="items" vsli:raw="The items to add to end of the array.">Os itens a serem adicionados ao final da matriz.</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">O tipo que deriva do tipo de item que já está na matriz.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">Adiciona ao final da matriz os itens especificados que derivam do tipo atualmente na matriz</summary>
      <param name="items" vsli:raw="The items to add to the end of the array.">Os itens a serem adicionados ao final da matriz.</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">O tipo que deriva do tipo de item que já está na matriz.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">Adiciona ao final da matriz os itens especificados que derivam do tipo atualmente na matriz.</summary>
      <param name="items" vsli:raw="The items to add to the end of the array.">Os itens a serem adicionados ao final da matriz.</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">O tipo que deriva do tipo de item que já está na matriz.</typeparam>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">
      <summary vsli:raw="Gets or sets the length of the internal array. When set, the internal array is reallocated to the given capacity if it is not already the specified length.">Obtém ou define o comprimento da matriz interna. Quando definido, a matriz interna será realocada para a capacidade determinada se ainda não tiver o tamanho especificado.</summary>
      <returns vsli:raw="The length of the internal array.">O comprimento da matriz interna.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the array.">Remove todos os itens da matriz.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the array contains a specific value.">Determina se a matriz contém um valor específico.</summary>
      <param name="item" vsli:raw="The object to locate in the array.">O objeto a ser localizado na matriz.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o objeto for encontrado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the current contents to the specified array.">Copia o conteúdo atual na matriz especificada.</summary>
      <param name="array" vsli:raw="The array to copy to.">A matriz para a qual copiar.</param>
      <param name="index" vsli:raw="The index to start the copy operation.">O índice para iniciar a operação de cópia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">
      <summary vsli:raw="Gets or sets the number of items in the array.">Obtém ou define o número de itens na matriz.</summary>
      <returns vsli:raw="The number of items in the array.">O número de itens na matriz.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.GetEnumerator">
      <summary vsli:raw="Gets an object that can be used to iterate through the collection.">Obtém um objeto que pode ser usado para iterar na coleção.</summary>
      <returns vsli:raw="An object that can be used to iterate through the collection.">Um objeto que pode ser usado para iterar na coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0)">
      <summary vsli:raw="Determines the index of a specific item in the array.">Determina o índice de um item específico na matriz.</summary>
      <param name="item" vsli:raw="The item to locate in the array.">O item a ser localizado na matriz.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">O índice de <paramref name="item" /> se for encontrado na lista; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Determines the index of the specified item.">Determina o índice do item especificado.</summary>
      <param name="item" vsli:raw="The item to locate in the array.">O item a ser localizado na matriz.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">A posição inicial da pesquisa.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">O índice de <paramref name="item" /> se for encontrado na lista; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Determines the index of the specified item.">Determina o índice do item especificado.</summary>
      <param name="item" vsli:raw="The item to locate in the array.">O item a ser localizado na matriz.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">A posição inicial da pesquisa.</param>
      <param name="count" vsli:raw="The number of elements to search.">O número de elementos a serem pesquisados.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">O índice de <paramref name="item" /> se for encontrado na lista; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Determines the index for the specified item.">Determina o índice para o item especificado.</summary>
      <param name="item" vsli:raw="The item to locate in the array.">O item a ser localizado na matriz.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">O índice no qual iniciar a pesquisa.</param>
      <param name="count" vsli:raw="The starting position of the search.">A posição inicial da pesquisa.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">O comparador de igualdade a ser usado na pesquisa</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">O índice de <paramref name="item" /> se for encontrado na lista; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item in the array at the specified index.">Insere um item na matriz no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the item.">O índice baseado em zero no qual inserir o item.</param>
      <param name="item" vsli:raw="The object to insert into the array.">O objeto a ser inserido na matriz.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the item at the specified index.">Obtém ou define o item no índice especificado.</summary>
      <param name="index" vsli:raw="The index of the item to get or set.">O índice do item a ser obtido ou definido.</param>
      <returns vsli:raw="The item at the specified index.">O item no índice especificado.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="The specified index is not in the array.">O índice especificado não está na matriz.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element at the specified index.">Obtém uma referência somente leitura ao elemento no índice especificado.</summary>
      <param name="index" vsli:raw="The item index.">O índice do item.</param>
      <returns vsli:raw="The read-only reference to the element at the specified index.">A referência somente leitura ao elemento no índice especificado.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is greater or equal to the array count.">
        <paramref name="index" /> é maior ou igual à contagem de matriz.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">Determina o índice baseado em zero da última ocorrência do item especificado nessa matriz.</summary>
      <param name="item" vsli:raw="The item to search for.">O item a ser procurado.</param>
      <returns vsli:raw="The 0-based index where the item was found; or -1 if it could not be found.">O índice baseado em zero em que o item foi encontrado; ou -1 se não puder ser encontrado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">Determina o índice baseado em zero da última ocorrência do item especificado nessa matriz.</summary>
      <param name="item" vsli:raw="The item to search for.">O item a ser procurado.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">A posição inicial da pesquisa.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">O índice baseado em zero na matriz em que o item foi encontrado; ou -1 se não puder ser encontrado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">Determina o índice baseado em zero da última ocorrência do item especificado nessa matriz.</summary>
      <param name="item" vsli:raw="The item to search for.">O item a ser procurado.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">A posição inicial da pesquisa.</param>
      <param name="count" vsli:raw="The number of elements to search.">O número de elementos a serem pesquisados.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">O índice baseado em zero na matriz em que o item foi encontrado; ou -1 se não puder ser encontrado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">Determina o índice baseado em zero da última ocorrência do item especificado nessa matriz.</summary>
      <param name="item" vsli:raw="The item to search for.">O item a ser procurado.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">A posição inicial da pesquisa.</param>
      <param name="count" vsli:raw="The number of elements to search.">O número de elementos a serem pesquisados.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">O comparador de igualdade a ser usado na pesquisa.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">O índice baseado em zero na matriz em que o item foi encontrado; ou -1 se não puder ser encontrado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.MoveToImmutable">
      <summary vsli:raw="Extracts the internal array as an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; and replaces it              with a zero length array.">Extrai a matriz interna como uma <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> e a substitui por uma matriz de comprimento zero.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="When &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.Builder.Count&quot; /&gt; doesn't              equal &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity&quot; /&gt;.">Quando <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count" /> não é igual a <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the specified element.">Remove o elemento especificado.</summary>
      <param name="element" vsli:raw="The item to remove.">O item a ser removido.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;element&quot; /&gt; was found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="element" /> for encontrado e removido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index from the array.">Remove o item no índice especificado da matriz.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">O índice com base em zero do item a ser removido.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Reverse">
      <summary vsli:raw="Reverses the order of elements in the collection.">Inverte a ordem de elementos na coleção.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort">
      <summary vsli:raw="Sorts the contents of the array.">Classifica o conteúdo da matriz.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the contents of the array.">Classifica o conteúdo da matriz.</summary>
      <param name="comparer" vsli:raw="The comparer to use for sorting. If comparer is &lt;see langword=&quot;null&quot; /&gt;, the default comparer for the elements type in the array is used.">O comparador a ser usado para classificação. Se o comparador for <see langword="null" />, o comparador padrão para o tipo de elementos na matriz será usado.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire array using the specified &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt;.">Classifica os elementos em toda a matriz usando a <see cref="T:System.Comparison`1" /> especificada.</summary>
      <param name="comparison" vsli:raw="The &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt; to use when comparing elements.">O <see cref="T:System.Comparison`1" /> a ser usado na comparação de elementos.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is null.">
        <paramref name="comparison" /> é nulo.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the contents of the array.">Classifica o conteúdo da matriz.</summary>
      <param name="index" vsli:raw="The starting index for the sort.">O índice inicial para a classificação.</param>
      <param name="count" vsli:raw="The number of elements to include in the sort.">O número de elementos a serem incluídos na classificação.</param>
      <param name="comparer" vsli:raw="The comparer to use for sorting. If comparer is &lt;see langword=&quot;null&quot; /&gt;, the default comparer for the elements type in the array is used.">O comparador a ser usado para classificação. Se o comparador for <see langword="null" />, o comparador padrão para o tipo de elementos na matriz será usado.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">Retorna um enumerador que itera na matriz.</summary>
      <returns vsli:raw="An enumerator that iterates through the array.">Um enumerador que itera na matriz.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">Retorna um enumerador que itera na matriz.</summary>
      <returns vsli:raw="An enumerator that iterates through the array.">Um enumerador que itera na matriz.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToArray">
      <summary vsli:raw="Creates a new array with the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">Cria uma nova matriz com o conteúdo atual deste <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</summary>
      <returns vsli:raw="A new array with the contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">Uma nova matriz com o conteúdo deste <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable">
      <summary vsli:raw="Returns an immutable array that contains the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">Retorna uma matriz imutável que contém o conteúdo atual deste <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</summary>
      <returns vsli:raw="An immutable array that contains the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">Uma matriz imutável que contém o conteúdo atual deste <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastArray``1">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct by casting the underlying array to an array of type &lt;typeparamref name=&quot;TOther&quot; /&gt;.">Inicializa uma nova instância do struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> convertendo a matriz subjacente em uma matriz do tipo <paramref name="TOther" />.</summary>
      <typeparam name="TOther" vsli:raw="The type of array element to return." />
      <exception cref="T:System.InvalidCastException" vsli:raw="The cast is illegal.">Gerada se a conversão for inválida.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct based on the contents of an existing instance, allowing a covariant static cast to efficiently reuse the existing array.">Inicializa uma nova instância do struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> com base no conteúdo de uma instância existente, permitindo que uma conversão estática covariante reutilize eficientemente a matriz existente.</summary>
      <param name="items" vsli:raw="The array to initialize the array with. No copy is made.">A matriz com a qual inicializar a matriz. Nenhuma cópia é feita.</param>
      <typeparam name="TDerived" vsli:raw="The type of array element to return." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Clear">
      <summary vsli:raw="Returns an array with all the elements removed.">Retorna uma matriz com todos os elementos removidos.</summary>
      <returns vsli:raw="An array with all of the elements removed.">Uma matriz com todos os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Contains(`0)">
      <summary vsli:raw="Determines whether the specified item exists in the array.">Determina se o item especificado existe na matriz.</summary>
      <param name="item" vsli:raw="The item to search for.">O item a ser procurado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified item was found in the array; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o item especificado foi encontrado na matriz; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the contents of this array to the specified array.">Copia o conteúdo dessa matriz na matriz especificada.</summary>
      <param name="destination" vsli:raw="The array to copy to.">A matriz para a qual copiar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the contents of this array to the specified array starting at the specified destination index.">Copia o conteúdo dessa matriz para a matriz especificada, começando no índice de destino especificado.</summary>
      <param name="destination" vsli:raw="The array to copy to.">A matriz para a qual copiar.</param>
      <param name="destinationIndex" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; where copying begins.">O índice em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies the specified items in this array to the specified array at the specified starting index.">Copia os itens especificados nessa matriz para a matriz especificada, no índice inicial especificado.</summary>
      <param name="sourceIndex" vsli:raw="The index of this array where copying begins.">O índice em que a cópia começa nessa matriz.</param>
      <param name="destination" vsli:raw="The array to copy to.">A matriz para a qual copiar.</param>
      <param name="destinationIndex" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; where copying begins.">O índice em <paramref name="array" /> no qual a cópia começa.</param>
      <param name="length" vsli:raw="The number of elements to copy from this array.">O número de elementos a serem copiados dessa matriz.</param>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableArray`1.Empty">
      <summary vsli:raw="Gets an empty immutable array.">Obtém uma matriz imutável vazia.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Enumerator">
      <summary vsli:raw="An array enumerator.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Um enumerador de matriz.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Enumerator.Current">
      <summary vsli:raw="Gets the current item.">Obtém a item atual.</summary>
      <returns vsli:raw="The current item.">O item atual.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances to the next value in the array.">Avança para o próximo valor na matriz.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if another item exists in the array; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se existe outro item na matriz; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Indicates whether specified array is equal to this array.">Indica se a matriz especificada é igual a essa matriz.</summary>
      <param name="other" vsli:raw="An object to compare with this object.">Um objeto para comparação com esse objeto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;other&quot; /&gt; is equal to this array; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="other" /> for igual a essa matriz; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)">
      <summary vsli:raw="Determines if this array is equal to the specified object.">Determina se essa matriz é igual ao objeto especificado.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this array.">O <see cref="T:System.Object" /> para comparar com essa matriz.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this array is equal to &lt;paramref name=&quot;obj&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se essa matriz for igual a <paramref name="obj" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the contents of the array.">Retorna um enumerador que itera no conteúdo da matriz.</summary>
      <returns vsli:raw="An enumerator.">Um enumerador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetHashCode">
      <summary vsli:raw="Returns a hash code for this instance.">Retorna um código hash para essa instância.</summary>
      <returns vsli:raw="A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.">Um código hash para essa instância, adequado para uso em algoritmos de hash e estruturas de dados como uma tabela de hash.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)">
      <summary vsli:raw="Searches the array for the specified item.">Procura o item especificado na matriz.</summary>
      <param name="item" vsli:raw="The item to search for.">O item a ser procurado.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">A posição do índice baseado em zero do item caso seja encontrado, ou -1 caso não seja.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item.">Procura o item especificado na matriz.</summary>
      <param name="item" vsli:raw="The item to search for.">O item a ser procurado.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">O índice no qual iniciar a pesquisa.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">A posição do índice baseado em zero do item caso seja encontrado, ou -1 caso não seja.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item.">Procura o item especificado na matriz.</summary>
      <param name="item" vsli:raw="The item to search for.">O item a ser procurado.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">O índice no qual iniciar a pesquisa.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">O comparador de igualdade a ser usado na pesquisa.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">A posição do índice baseado em zero do item caso seja encontrado, ou -1 caso não seja.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item.">Procura o item especificado na matriz.</summary>
      <param name="item" vsli:raw="The item to search for.">O item a ser procurado.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">O índice no qual iniciar a pesquisa.</param>
      <param name="count" vsli:raw="The number of elements to search.">O número de elementos a serem pesquisados.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">A posição do índice baseado em zero do item caso seja encontrado, ou -1 caso não seja.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item.">Procura o item especificado na matriz.</summary>
      <param name="item" vsli:raw="The item to search for.">O item a ser procurado.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">O índice no qual iniciar a pesquisa.</param>
      <param name="count" vsli:raw="The number of elements to search.">O número de elementos a serem pesquisados.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">O comparador de igualdade a ser usado na pesquisa.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">A posição do índice baseado em zero do item caso seja encontrado, ou -1 caso não seja.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Returns a new array with the specified value inserted at the specified position.">Retorna uma nova matriz com o valor especificado inserido na posição especificada.</summary>
      <param name="index" vsli:raw="The 0-based index into the array at which the new item should be added.">O índice baseado em zero na matriz no qual o novo item deve ser adicionado.</param>
      <param name="item" vsli:raw="The item to insert at the start of the array.">O item a ser inserido no início da matriz.</param>
      <returns vsli:raw="A new array with the item inserted at the specified index.">Uma nova matriz com o item inserido no índice especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">Insere os valores especificados no índice especificado.</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">O índice no qual inserir o valor.</param>
      <param name="items" vsli:raw="The elements to insert.">Os elementos a serem inseridos.</param>
      <returns vsli:raw="A new immutable array with the items inserted at the specified index.">Uma nova matriz imutável com os itens inseridos no índice especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">Insere os valores especificados no índice especificado.</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">O índice no qual inserir o valor.</param>
      <param name="items" vsli:raw="The elements to insert.">Os elementos a serem inseridos.</param>
      <returns vsli:raw="A new immutable array with the items inserted at the specified index.">Uma nova matriz imutável com os itens inseridos no índice especificado.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefault">
      <summary vsli:raw="Gets a value indicating whether this array was declared but not initialized.">Obtém um valor que indica se essa matriz foi declarada mas não inicializada.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> for <see langword="null" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty">
      <summary vsli:raw="Gets a value indicating whether this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty or is not initialized.">Obtém um valor que indica se essa <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> está vazia ou não foi inicializada.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.Collections.Immutable.ImmutableArray`1.Empty&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> for <see langword="null" /> ou <see cref="F:System.Collections.Immutable.ImmutableArray`1.Empty" />; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsEmpty">
      <summary vsli:raw="Gets a value indicating whether this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty.">Obtém um valor que indica se este <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> está vazio.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> estiver vazio; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index in the immutable array.">Obtém o elemento no índice especificado na matriz imutável.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get.">O índice baseado em zero do elemento a ser obtido.</param>
      <returns vsli:raw="The element at the specified index in the immutable array.">O elemento no índice especificado na matriz imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element at the specified &lt;paramref name=&quot;index&quot; /&gt; in the read-only list.">Obtém uma referência somente leitura ao elemento no <paramref name="index" /> especificado na lista somente leitura.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get a reference to.">O índice baseado em zero do elemento do qual uma referência deve ser obtida.</param>
      <returns vsli:raw="A read-only reference to the element at the specified &lt;paramref name=&quot;index&quot; /&gt; in the read-only list.">Uma referência somente leitura ao elemento no <paramref name="index" /> especificado na lista somente leitura.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">Procura o item especificado na matriz, iniciando no final da matriz.</summary>
      <param name="item" vsli:raw="The item to search for.">O item a ser procurado.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">O índice baseado em zero na matriz em que o item foi encontrado; ou -1 se não puder ser encontrado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">Procura o item especificado na matriz, iniciando no final da matriz.</summary>
      <param name="item" vsli:raw="The item to search for.">O item a ser procurado.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">O índice no qual iniciar a pesquisa.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">O índice baseado em zero na matriz em que o item foi encontrado; ou -1 se não puder ser encontrado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">Procura o item especificado na matriz, iniciando no final da matriz.</summary>
      <param name="item" vsli:raw="The item to search for.">O item a ser procurado.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">O índice no qual iniciar a pesquisa.</param>
      <param name="count" vsli:raw="The number of elements to search.">O número de elementos a serem pesquisados.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">O índice baseado em zero na matriz em que o item foi encontrado; ou -1 se não puder ser encontrado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">Procura o item especificado na matriz, iniciando no final da matriz.</summary>
      <param name="item" vsli:raw="The item to search for.">O item a ser procurado.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">O índice no qual iniciar a pesquisa.</param>
      <param name="count" vsli:raw="The number of elements to search.">O número de elementos a serem pesquisados.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">O comparador de igualdade a ser usado na pesquisa.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">O índice baseado em zero na matriz em que o item foi encontrado; ou -1 se não puder ser encontrado.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Length">
      <summary vsli:raw="Gets the number of elements in the array.">Obtém o número de elementos na matriz.</summary>
      <returns vsli:raw="The number of elements in the array.">O número de elementos na matriz</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.OfType``1">
      <summary vsli:raw="Filters the elements of this array to those assignable to the specified type.">Filtra os elementos dessa matriz, naqueles que são atribuíveis ao tipo especificado.</summary>
      <typeparam name="TResult" vsli:raw="The type to filter the elements of the sequence on.">O tipo no qual filtrar os elementos da sequência.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; that contains elements from the input sequence of type of &lt;paramref name=&quot;TResult&quot; /&gt;.">Um <see cref="T:System.Collections.IEnumerable" /> que contém elementos da sequência de entrada do tipo de <paramref name="TResult" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a value that indicates if two arrays are equal.">Retorna um valor que indica se as duas matrizes são iguais.</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">A matriz à esquerda do operador.</param>
      <param name="right" vsli:raw="The array to the right of the operator.">A matriz à direita do operador.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se as matrizes forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary vsli:raw="Returns a value that indicates if two arrays are equal.">Retorna um valor que indica se as duas matrizes são iguais.</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">A matriz à esquerda do operador.</param>
      <param name="right" vsli:raw="The array to the right of the operator.">A matriz à direita do operador.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se as matrizes forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a value that indicates whether two arrays are not equal.">Retorna um valor que indica se duas matrizes não são iguais.</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">A matriz à esquerda do operador.</param>
      <param name="right" vsli:raw="The array to the right of the operator.">A matriz à direita do operador.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se as matrizes não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary vsli:raw="Checks for inequality between two array.">Verifica a desigualdade entre duas matrizes.</summary>
      <param name="left" vsli:raw="The object to the left of the operator.">O objeto à esquerda do operador.</param>
      <param name="right" vsli:raw="The object to the right of the operator.">O objeto à direita do operador.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two arrays are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se as duas matrizes não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0)">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array. If no match is found, the current array is returned.">Retorna uma matriz com a primeira ocorrência do elemento especificado removido da matriz. Se nenhuma correspondência for encontrada, a matriz atual será retornada.</summary>
      <param name="item" vsli:raw="The item to remove.">O item a ser removido.</param>
      <returns vsli:raw="A new array with the item removed.">Uma nova matriz com o item removido.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array.  &#xA;  &#xA; If no match is found, the current array is returned.">Retorna uma matriz com a primeira ocorrência do elemento especificado removido da matriz.  
 Se nenhuma correspondência for encontrada, a matriz atual será retornada.</summary>
      <param name="item" vsli:raw="The item to remove.">O item a ser removido.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">O comparador de igualdade a ser usado na pesquisa.</param>
      <returns vsli:raw="A new array with the specified item removed.">Uma nova matriz com o item especificado removido.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the items from the array that meet the specified condition.">Remove todos os itens da matriz que atendem à condição especificada.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">O delegado que define as condições dos elementos a serem removidos.</param>
      <returns vsli:raw="A new array with items that meet the specified condition removed.">Uma nova matriz com os itens removidos que atendem à condição especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Returns an array with the element at the specified position removed.">Retorna uma matriz com o elemento na posição especificada removido.</summary>
      <param name="index" vsli:raw="The 0-based index of the element to remove from the returned array.">O índice baseado em zero do elemento a ser removido da matriz retornada.</param>
      <returns vsli:raw="A new array with the item at the specified index removed.">Uma nova matriz com o item removido no índice especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the specified items from this array.">Remove os itens especificados dessa matriz.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Os itens a serem removidos se correspondências forem encontradas nessa lista.</param>
      <returns vsli:raw="A new array with the elements removed.">Uma nova matriz com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this array.">Remove os itens especificados dessa matriz.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Os itens a serem removidos se correspondências forem encontradas nessa lista.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">O comparador de igualdade a ser usado na pesquisa.</param>
      <returns vsli:raw="A new array with the elements removed.">Uma nova matriz com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Removes the specified values from this list.">Remove os valores especificados dessa lista.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Os itens a serem removidos se correspondências forem encontradas nessa lista.</param>
      <returns vsli:raw="A new list with the elements removed.">Uma nova lista com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this list.">Remove os itens especificados dessa lista.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Os itens a serem removidos se correspondências forem encontradas nessa lista.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">O comparador de igualdade a ser usado na pesquisa.</param>
      <returns vsli:raw="A new array with the elements removed.">Uma nova matriz com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Returns an array with the elements at the specified position removed.">Retorna uma matriz com os elementos removidos na posição especificada.</summary>
      <param name="index" vsli:raw="The 0-based index of the starting element to remove from the array.">O índice baseado em zero do elemento inicial a ser removido da matriz.</param>
      <param name="length" vsli:raw="The number of elements to remove from the array.">O número de elementos a serem removidos da matriz.</param>
      <returns vsli:raw="The new array with the specified elements removed.">A nova matriz com os elementos especificados removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">Localiza o primeiro elemento na matriz igual ao valor especificado e substitui o valor pelo novo valor especificado.</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">O valor para localizar e substituir na matriz.</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">O valor pelo qual substituir o <c>oldvalue</c>.</param>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">Uma nova matriz que contém <paramref name="newValue" /> mesmo se os valores novos e antigos forem os mesmos.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">
        <paramref name="oldValue" /> não se encontra na matriz.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">Localiza o primeiro elemento na matriz igual ao valor especificado e substitui o valor pelo novo valor especificado.</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">O valor para localizar e substituir na matriz.</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">O valor pelo qual substituir o <c>oldvalue</c>.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare values.">O comparador de igualdade a ser usado para comparar os valores.</param>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">Uma nova matriz que contém <paramref name="newValue" /> mesmo se os valores novos e antigos forem os mesmos.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">
        <paramref name="oldValue" /> não se encontra na matriz.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">Substitui o item no índice especificado pelo item especificado.</summary>
      <param name="index" vsli:raw="The index of the item to replace.">O índice do item a ser substituído.</param>
      <param name="item" vsli:raw="The item to add to the list.">O item a ser adicionado à lista.</param>
      <returns vsli:raw="The new array that contains &lt;paramref name=&quot;item&quot; /&gt; at the specified index.">A nova matriz que contém <paramref name="item" /> no índice especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort">
      <summary vsli:raw="Sorts the elements in the immutable array using the default comparer.">Classifica os elementos na matriz imutável usando o comparador padrão.</summary>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">Uma nova matriz imutável que contém os itens nessa matriz, em ordem de classificação.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the immutable array using the specified comparer.">Classifica os elementos na matriz imutável usando o comparador especificado.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">A implementação a ser usada na comparação de elementos ou <see langword="null" /> para usar o comparador padrão</param>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">Uma nova matriz imutável que contém os itens nessa matriz, em ordem de classificação.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; using             the specified &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt;.">Classifica os elementos em todo a <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> usando o <see cref="T:System.Comparison`1" /> especificado.</summary>
      <param name="comparison" vsli:raw="The &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt; to use when comparing elements.">O <see cref="T:System.Comparison`1" /> a ser usado na comparação de elementos.</param>
      <returns vsli:raw="The sorted list.">A lista classificada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is null.">
        <paramref name="comparison" /> é nulo.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the specified elements in the immutable array using the specified comparer.">Classifica os elementos especificados na matriz imutável usando o comparador especificado.</summary>
      <param name="index" vsli:raw="The index of the first element to sort.">O índice do primeiro elemento a ser classificado.</param>
      <param name="count" vsli:raw="The number of elements to include in the sort.">O número de elementos a serem incluídos na classificação.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">A implementação a ser usada na comparação de elementos ou <see langword="null" /> para usar o comparador padrão</param>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">Uma nova matriz imutável que contém os itens nessa matriz, em ordem de classificação.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Gera <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <param name="item" vsli:raw="The item to add to the end of the array.">O item a ser adicionado ao final da matriz.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Gera <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count">
      <summary vsli:raw="Gets the number of items in the collection.">Obtém o número de matrizes na coleção.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Gera se a propriedade <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retorna true.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this instance is read only.">Obtém um valor que indica se essa instância é somente leitura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is read only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <c>true</c> se esta instância for somente leitura; caso contrário, <c>false</c>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Gera <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <param name="item" vsli:raw="The object to remove from the array.">O objeto a ser removido da matriz.</param>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Gera <see cref="T:System.NotSupportedException" /> em todos os casos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">Retorna um enumerador que itera na matriz.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the array.">Um enumerador que pode ser usado para iterar na matriz.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Gera <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <param name="index" vsli:raw="The index of the location to insert the item.">O índice do local para inserir o item.</param>
      <param name="item" vsli:raw="The item to insert.">O item a ser inserido.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index in the read-only list.">Obtém ou define o elemento no índice especificado na lista somente leitura.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get.">O índice baseado em zero do elemento a ser obtido.</param>
      <returns vsli:raw="The element at the specified index in the read-only list.">O elemento no índice especificado na lista somente leitura.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">Sempre lançado de setter.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Gera se a propriedade <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retorna true.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Gera <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <param name="index" vsli:raw="The index.">O índice.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count">
      <summary vsli:raw="Gets the number of items in the collection.">Obtém o número de matrizes na coleção.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Gera se a propriedade <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retorna true.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index.">Obtém o elemento no índice especificado.</summary>
      <param name="index" vsli:raw="The index.">O índice.</param>
      <returns vsli:raw="The element.">O elemento.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Gera se a propriedade <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retorna true.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies this array to another array starting at the specified index.">Copia essa matriz em outra matriz, iniciando no índice especificado.</summary>
      <param name="array" vsli:raw="The array to copy this array to.">A matriz para a qual copiar essa matriz.</param>
      <param name="index" vsli:raw="The index in the destination array to start the copy operation.">O índice na matriz de destino no qual iniciar a operação de cópia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the size of the array.">Obtém o tamanho da matriz.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Gera se a propriedade <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retorna true.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface. Always returns &lt;see langword=&quot;true&quot; /&gt; since since immutable collections are thread-safe.">Consulte a interface <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets the sync root.">Obtém a raiz de sincronização.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable array.">Retorna um enumerador que itera na matriz imutável.</summary>
      <returns vsli:raw="An enumerator that iterates through the immutable array.">Um enumerador que itera na matriz imutável.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">A propriedade <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retorna <see langword="true" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Gera <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <param name="value" vsli:raw="The value to add to the array.">O valor a ser adicionado à matriz.</param>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Gera <see cref="T:System.NotSupportedException" /> em todos os casos.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Gerada em todos os casos.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Gera <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Gerada em todos os casos.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Gera <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <param name="value" vsli:raw="The value to check for.">O valor a ser verificado.</param>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Gera <see cref="T:System.NotSupportedException" /> em todos os casos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Gets the value at the specified index.">Obtém o valor no índice especificado.</summary>
      <param name="value" vsli:raw="The value to return the index of.">O valor do qual retornar o índice.</param>
      <returns vsli:raw="The value of the element at the specified index.">O valor do elemento no índice especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Gera <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <param name="index" vsli:raw="Index that indicates where to insert the item.">Índice que indica o local para inserir o item.</param>
      <param name="value" vsli:raw="The value to insert.">O valor a ser inserido.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Gerada em todos os casos.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether this instance is fixed size.">Obtém um valor que indica se esta instância é de tamanho fixo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <c>true</c> se esta instância for de tamanho fixo; caso contrário, <c>false</c>.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this instance is read only.">Obtém um valor que indica se essa instância é somente leitura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is read only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <c>true</c> se esta instância for somente leitura; caso contrário, <c>false</c>.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">Obtém ou define o <see cref="T:System.Object" /> no índice especificado.</summary>
      <param name="index" vsli:raw="The index.">O índice.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">Sempre lançado de setter.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Gera se a propriedade <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retorna true.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Gera <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <param name="value" vsli:raw="The value to remove from the array.">O valor a ser removido da matriz.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Gerada em todos os casos.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Gera <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <param name="index" vsli:raw="The index of the item to remove.">O índice do item a ser removido.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Gerada em todos os casos.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary vsli:raw="Returns a copy of the original array with the specified item added to the end.">Retorna uma cópia da matriz original com o item especificado adicionado ao final.</summary>
      <param name="value" vsli:raw="The value to add to the end of the array.">O valor a ser adicionado ao final da matriz.</param>
      <returns vsli:raw="A new array with the specified item added to the end.">Uma nova matriz com o item especificado adicionado ao final.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">Retorna uma cópia da matriz original com os elementos especificados adicionados ao final da matriz.</summary>
      <param name="items" vsli:raw="The elements to add to the end of the array.">Os elementos a serem adicionados ao final da matriz.</param>
      <returns vsli:raw="A new array with the elements added to the end.">Uma nova matriz com os elementos adicionados ao final.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary vsli:raw="Returns an array with all the elements removed.">Retorna uma matriz com todos os elementos removidos.</summary>
      <returns vsli:raw="An array with all the elements removed.">Uma matriz com todos os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Returns a new array with the specified value inserted at the specified position.">Retorna uma nova matriz com o valor especificado inserido na posição especificada.</summary>
      <param name="index" vsli:raw="The 0-based index into the array at which the new item should be added.">O índice baseado em zero na matriz no qual o novo item deve ser adicionado.</param>
      <param name="element" vsli:raw="The item to insert at the start of the array.">O item a ser inserido no início da matriz.</param>
      <returns vsli:raw="A new array with the specified value inserted.">Uma nova matriz com o valor especificado inserido.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">Insere os valores especificados no índice especificado</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">O índice no qual inserir o valor.</param>
      <param name="items" vsli:raw="The elements to insert.">Os elementos a serem inseridos.</param>
      <returns vsli:raw="A new array with the specified values inserted.">Uma nova matriz com os valores especificados inseridos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array; if no match is found, the current array is returned.">Retorna uma matriz com a primeira ocorrência do elemento especificado removido da matriz; se nenhuma correspondência for encontrada, a matriz atual será retornada.</summary>
      <param name="value" vsli:raw="The value to remove from the array.">O valor a ser removido da matriz.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">O comparador de igualdade a ser usado na pesquisa.</param>
      <returns vsli:raw="A new array with the value removed.">Uma nova matriz com o valor removido.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the items from the array that meet the specified condition.">Remove todos os itens da matriz que atendem à condição especificada.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">O delegado que define as condições dos elementos a serem removidos.</param>
      <returns vsli:raw="A new array with items that meet the specified condition removed.">Uma nova matriz com os itens removidos que atendem à condição especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Returns an array with the element at the specified position removed.">Retorna uma matriz com o elemento na posição especificada removido.</summary>
      <param name="index" vsli:raw="The 0-based index of the element to remove from the returned array.">O índice baseado em zero do elemento a ser removido da matriz retornada.</param>
      <returns vsli:raw="A new array with the specified item removed.">Uma nova matriz com o item especificado removido.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this array.">Remove os itens especificados dessa matriz.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Os itens a serem removidos se correspondências forem encontradas nessa lista.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">O comparador de igualdade a ser usado na pesquisa.</param>
      <returns vsli:raw="A new array with the elements removed.">Uma nova matriz com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Returns an array with the elements at the specified position removed.">Retorna uma matriz com os elementos removidos na posição especificada.</summary>
      <param name="index" vsli:raw="The 0-based index of the starting element to remove from the array.">O índice baseado em zero do elemento inicial a ser removido da matriz.</param>
      <param name="count" vsli:raw="The number of elements to remove from the array.">O número de elementos a serem removidos da matriz.</param>
      <returns vsli:raw="The new array with the specified elements removed.">A nova matriz com os elementos especificados removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">Localiza o primeiro elemento na matriz igual ao valor especificado e substitui o valor pelo novo valor especificado.</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">O valor para localizar e substituir na matriz.</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">O valor pelo qual substituir o <c>oldvalue</c>.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare values.">O comparador de igualdade a ser usado para comparar os valores.</param>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">Uma nova matriz que contém <paramref name="newValue" /> mesmo se os valores novos e antigos forem os mesmos.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">
        <paramref name="oldValue" /> não se encontra na matriz.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">Substitui o item no índice especificado pelo item especificado.</summary>
      <param name="index" vsli:raw="The index of the item to replace.">O índice do item a ser substituído.</param>
      <param name="value" vsli:raw="The value to add to the list.">O valor a ser adicionado à lista.</param>
      <returns vsli:raw="The new array that contains &lt;paramref name=&quot;item&quot; /&gt; at the specified index.">A nova matriz que contém <paramref name="item" /> no índice especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary vsli:raw="Determines whether the current collection element precedes, occurs in the same position as, or follows another element in the sort order.">Determina se o elemento da coleção atual precede, ocorre na mesma posição ou segue a outro elemento na ordem de classificação.</summary>
      <param name="other" vsli:raw="The element to compare with the current instance.">O elemento a ser comparado com a instância atual.</param>
      <param name="comparer" vsli:raw="The object used to compare members of the current array with the corresponding members of other array.">O objeto usado para comparar os membros da matriz atual com os membros correspondentes de outra matriz.</param>
      <returns vsli:raw="An integer that indicates whether the current element precedes, is in the same position or follows the other element.">Um inteiro que indica se o elemento atual precede, está na mesma posição ou segue o outro elemento.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The arrays are not the same length.">As matrizes não são do mesmo comprimento.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary vsli:raw="Determines whether this array is structurally equal to the specified array.">Determina se essa matriz é estruturalmente igual à matriz especificada.</summary>
      <param name="other" vsli:raw="The array to compare with the current instance.">A matriz a ser comparada com a instância atual.</param>
      <param name="comparer" vsli:raw="An object that determines whether the current instance and other are structurally equal.">Um objeto que determina se a instância atual e outra instância são estruturalmente iguais.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two arrays are structurally equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se as duas matrizes forem estruturalmente iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary vsli:raw="Returns a hash code for the current instance.">Retorna um código hash para a instância atual.</summary>
      <param name="comparer" vsli:raw="An object that computes the hash code of the current object.">Um objeto que calcula o código hash do objeto atual.</param>
      <returns vsli:raw="The hash code for the current instance.">O código hash da instância atual.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ToBuilder">
      <summary vsli:raw="Creates a mutable array that has the same contents as this array and can be efficiently mutated across multiple operations using standard mutable interfaces.">Cria uma matriz mutável que tem o mesmo conteúdo que essa matriz e pode ser modificada com eficiência em várias operações usando interfaces mutáveis padrão.</summary>
      <returns vsli:raw="The new builder with the same contents as this array.">O novo construtor com o mesmo conteúdo que essa matriz.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableDictionary`2&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Fornece um conjunto de métodos de inicialização para instâncias da classe <see cref="T:System.Collections.Immutable.ImmutableDictionary`2" />.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Contains``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary vsli:raw="Determines whether the specified immutable dictionary contains the specified key/value pair.">Determina se o dicionário imutável especificado contém o par chave/valor especificado.</summary>
      <param name="map" vsli:raw="The immutable dictionary to search.">O dicionário imutável a ser pesquisado.</param>
      <param name="key" vsli:raw="The key to locate in the immutable dictionary.">A chave a ser localizada no dicionário imutável.</param>
      <param name="value" vsli:raw="The value to locate on the specified key, if the key is found.">O valor a ser localizado na chave especificada, se a chave for encontrada.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the immutable dictionary.">O tipo das chaves no dicionário imutável.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the immutable dictionary.">O tipo dos valores no dicionário imutável.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this map contains the specified key/value pair; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o mapa contiver o par chave/valor especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2">
      <summary vsli:raw="Creates an empty immutable dictionary.">Cria um dicionário imutável vazio.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">O tipo de chaves armazenadas pelo dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">O tipo de valores armazenados pelo dicionário.</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">Um dicionário imutável vazio.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates an empty immutable dictionary that uses the specified key comparer.">Cria um dicionário imutável vazio que usa o comparador de chave especificado.</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">A implementação a ser usada para determinar a igualdade de chaves no dicionário.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">O tipo de chaves armazenadas pelo dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">O tipo de valores armazenados pelo dicionário.</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">Um dicionário imutável vazio.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates an empty immutable dictionary that uses the specified key and value comparers.">Cria um dicionário imutável vazio que usa os comparadores de chave e valor especificados.</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">A implementação a ser usada para determinar a igualdade de chaves no dicionário.</param>
      <param name="valueComparer" vsli:raw="The implementation to use to determine the equality of values in the dictionary.">A implementação a ser usada para determinar igualdade de valores no dicionário.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">O tipo de chaves armazenadas pelo dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">O tipo de valores armazenados pelo dicionário.</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">Um dicionário imutável vazio.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2">
      <summary vsli:raw="Creates a new immutable dictionary builder.">Cria um novo construtor de dicionário imutável.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">O tipo de chaves armazenadas pelo dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">O tipo de valores armazenados pelo dicionário.</typeparam>
      <returns vsli:raw="The new builder.">O novo construtor.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a new immutable dictionary builder.">Cria um novo construtor de dicionário imutável.</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">O comparador de chave.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">O tipo de chaves armazenadas pelo dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">O tipo de valores armazenados pelo dicionário.</typeparam>
      <returns vsli:raw="The new builder.">O novo construtor.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates a new immutable dictionary builder.">Cria um novo construtor de dicionário imutável.</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">O comparador de chave.</param>
      <param name="valueComparer" vsli:raw="The value comparer.">O comparador de valor.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">O tipo de chaves armazenadas pelo dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">O tipo de valores armazenados pelo dicionário.</typeparam>
      <returns vsli:raw="The new builder.">O novo construtor.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items.">Cria um novo dicionário imutável que contém os itens especificados.</summary>
      <param name="items" vsli:raw="The items used to populate the dictionary before it's immutable.">Os itens usados para preencher o dicionário antes de que ele seja imutável.</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">O tipo de chaves no dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">O tipo de valores no dicionário.</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items.">Um novo dicionário imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items and uses the specified key comparer.">Cria um novo dicionário imutável que contém os itens especificados e usa o comparador de chave especificado.</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality.">A implementação de comparador a ser usada para comparar as chaves quanto à igualdade.</param>
      <param name="items" vsli:raw="The items to add to the dictionary before it's immutable.">Os itens a serem adicionados ao dicionário antes que ele seja imutável.</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">O tipo de chaves no dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">O tipo de valores no dicionário.</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items and uses the specified comparer.">Um novo dicionário imutável que contém os itens especificados e usa o comparador especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items and uses the specified key comparer.">Cria um novo dicionário imutável que contém os itens especificados e usa o comparador de chave especificado.</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality.">A implementação de comparador a ser usada para comparar as chaves quanto à igualdade.</param>
      <param name="valueComparer" vsli:raw="The comparer implementation to use to compare values for equality.">A implementação de comparador a ser usada para comparar os valores quanto à igualdade.</param>
      <param name="items" vsli:raw="The items to add to the dictionary before it's immutable.">Os itens a serem adicionados ao dicionário antes que ele seja imutável.</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">O tipo de chaves no dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">O tipo de valores no dicionário.</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items and uses the specified comparer.">Um novo dicionário imutável que contém os itens especificados e usa o comparador especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">Obtém o valor de uma determinada chave, se uma chave correspondente existir no dicionário.</summary>
      <param name="dictionary" vsli:raw="The dictionary to retrieve the value from.">O dicionário do qual recuperar o valor.</param>
      <param name="key" vsli:raw="The key to search for.">A chave a ser pesquisada.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Tipo da chave.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value.">Tipo do valor.</typeparam>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">O valor da chave ou <c>default(TValue)</c> se nenhuma chave correspondente for encontrada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">Obtém o valor de uma determinada chave, se uma chave correspondente existir no dicionário.</summary>
      <param name="dictionary" vsli:raw="The dictionary to retrieve the value from.">O dicionário do qual recuperar o valor.</param>
      <param name="key" vsli:raw="The key to search for.">A chave a ser pesquisada.</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">O valor padrão a ser retornado se nenhuma chave correspondente for encontrada no dicionário.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Tipo da chave.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value.">Tipo do valor.</typeparam>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">O valor da chave ou <paramref name="defaultValue" /> se nenhuma chave correspondente for encontrada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Constructs an immutable dictionary from an existing collection of elements, applying a transformation function to the source keys.">Constrói um dicionário imutável de uma coleção existente de elementos, aplicando uma função de transformação nas chaves de origem.</summary>
      <param name="source" vsli:raw="The source collection used to generate the immutable dictionary.">A coleção de origem usada para gerar o dicionário imutável.</param>
      <param name="keySelector" vsli:raw="The function used to transform keys for the immutable dictionary.">A função usada para transformar chaves para o dicionário imutável.</param>
      <typeparam name="TSource" vsli:raw="The type of element in the source collection.">O tipo de elemento na coleção de origem.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of key in the resulting immutable dictionary.">O tipo de chave no dicionário imutável resultante.</typeparam>
      <returns vsli:raw="The immutable dictionary that contains elements from &lt;paramref name=&quot;source&quot; /&gt;, with keys transformed by applying &lt;paramref name=&quot;keySelector&quot; /&gt;.">O dicionário imutável que contém elementos de <paramref name="source" />, com chaves transformadas pela aplicação de <paramref name="keySelector" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Constructs an immutable dictionary based on some transformation of a sequence.">Constrói um dicionário imutável com base em alguma transformação de uma sequência.</summary>
      <param name="source" vsli:raw="The source collection used to generate the immutable dictionary.">A coleção de origem usada para gerar o dicionário imutável.</param>
      <param name="keySelector" vsli:raw="The function used to transform keys for the immutable dictionary.">A função usada para transformar chaves para o dicionário imutável.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">O comparador de chave a ser usado para o dicionário.</param>
      <typeparam name="TSource" vsli:raw="The type of element in the source collection.">O tipo de elemento na coleção de origem.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of key in the resulting immutable dictionary.">O tipo de chave no dicionário imutável resultante.</typeparam>
      <returns vsli:raw="The immutable dictionary that contains elements from &lt;paramref name=&quot;source&quot; /&gt;, with keys transformed by applying &lt;paramref name=&quot;keySelector&quot; /&gt;.">O dicionário imutável que contém elementos de <paramref name="source" />, com chaves transformadas pela aplicação de <paramref name="keySelector" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents.">Enumera uma sequência de pares chave/valor e produz um dicionário imutável de seu conteúdo.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">A sequência de pares chave/valor a ser enumerada.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">O tipo das chaves no dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">O tipo dos valores no dicionário.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">Um dicionário imutável que contém os pares chave/valor na sequência especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key comparer.">Enumera uma sequência de pares chave/valor e produz um dicionário imutável de seu conteúdo, usando o comparador de chave especificado.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">A sequência de pares chave/valor a ser enumerada.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">O comparador de chave a ser usado ao criar o dicionário imutável.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">O tipo das chaves no dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">O tipo dos valores no dicionário.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">Um dicionário imutável que contém os pares chave/valor na sequência especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key and value comparers.">Enumera uma sequência de pares chave/valor e produz um dicionário imutável de seu conteúdo, usando os comparadores de chave e valor especificados.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">A sequência de pares chave/valor a ser enumerada.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">O comparador de chave a ser usado ao criar o dicionário imutável.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the immutable dictionary.">O comparador de valor a ser usado para o dicionário imutável.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">O tipo das chaves no dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">O tipo dos valores no dicionário.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">Um dicionário imutável que contém os pares chave/valor na sequência especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}.Builder)">
      <summary vsli:raw="Creates an immutable dictionary from the current contents of the builder's dictionary.">Cria um dicionário imutável do conteúdo atual do dicionário do construtor.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable dictionary from.">O construtor para o qual criar o dicionário imutável.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">O tipo das chaves no dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">O tipo dos valores no dicionário.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the current contents in the builder's dictionary.">Cria um dicionário imutável preenchido com o conteúdo atual do dicionário do construtor.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents.">Enumera e transforma uma sequência e produz um dicionário imutável com base em seu conteúdo.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">A sequência a ser enumerada para gerar o dicionário.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">A função que produzirá a chave para o dicionário de cada elemento de sequência.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">A função que produzirá o valor para o dicionário de cada elemento de sequência.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">O tipo dos elementos na sequência.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">O tipo das chaves no dicionário resultante.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">O tipo dos valores no dicionário resultante.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">Um dicionário imutável que contém os itens na sequência especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents by using the specified key comparer.">Enumera e transforma uma sequência e produz um dicionário imutável com base em seu conteúdo usando o comparador de chave especificado.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">A sequência a ser enumerada para gerar o dicionário.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">A função que produzirá a chave para o dicionário de cada elemento de sequência.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">A função que produzirá o valor para o dicionário de cada elemento de sequência.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">O comparador de chave a ser usado para o dicionário.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">O tipo dos elementos na sequência.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">O tipo das chaves no dicionário resultante.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">O tipo dos valores no dicionário resultante.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">Um dicionário imutável que contém os itens na sequência especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents by using the specified key and value comparers.">Enumera e transforma uma sequência e produz um dicionário imutável com base em seu conteúdo usando os comparadores de chave e valor especificados.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">A sequência a ser enumerada para gerar o dicionário.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">A função que produzirá a chave para o dicionário de cada elemento de sequência.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">A função que produzirá o valor para o dicionário de cada elemento de sequência.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">O comparador de chave a ser usado para o dicionário.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the dictionary.">O comparador de valor a ser usado para o dicionário.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">O tipo dos elementos na sequência.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">O tipo das chaves no dicionário resultante.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">O tipo dos valores no dicionário resultante.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">Um dicionário imutável que contém os itens na sequência especificada.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2">
      <summary vsli:raw="Represents an immutable, unordered collection of keys and values.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa uma coleção imutável, não ordenada de chaves e valores.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">O tipo das chaves no dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">O tipo dos valores no dicionário.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the immutable dictionary.">Adiciona um elemento com a chave e o valor especificados ao dicionário imutável.</summary>
      <param name="key" vsli:raw="The key of the element to add.">A chave do elemento a ser adicionada.</param>
      <param name="value" vsli:raw="The value of the element to add.">O valor do elemento a ser adicionado.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pair.">Um novo dicionário imutável que contém o par chave/valor adicional.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">A chave especificada já existe no dicionário, mas tem um valor diferente.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specified key/value pairs to the immutable dictionary.">Adiciona os pares chave/valor especificados ao dicionário imutável.</summary>
      <param name="pairs" vsli:raw="The key/value pairs to add.">Os pares chave/valor a serem adicionados.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">Um novo dicionário imutável que contém os pares chave/valor adicionais.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">Uma das chaves fornecidas já existe no dicionário, mas tem um valor diferente.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Builder">
      <summary vsli:raw="Represents a hash map that mutates with little or no memory allocations and that can produce or build on immutable hash map instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa um mapa de hash que se modifica com pouca ou nenhuma alocação de memória e que pode produzir ou criar instâncias de mapa de hash imutáveis de maneira muito eficiente.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(`0,`1)">
      <summary vsli:raw="Adds an element that has the specified key and value to the immutable dictionary.">Adiciona um elemento que tem a chave e o valor especificados ao dicionário imutável.</summary>
      <param name="key" vsli:raw="The key of the element to add.">A chave do elemento a ser adicionada.</param>
      <param name="value" vsli:raw="The value of the element to add.">O valor do elemento a ser adicionado.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> é nulo.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the dictionary.">Já existe um elemento com a mesma chave no dicionário.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">O dicionário é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds the specified item to the immutable dictionary.">Adiciona o item especificado ao dicionário imutável.</summary>
      <param name="item" vsli:raw="The object to add to the dictionary.">O objeto a ser adicionado ao dicionário.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">O dicionário é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds a sequence of values to this collection.">Adiciona uma sequência de valores a essa coleção.</summary>
      <param name="items" vsli:raw="The items to add to this collection.">Os itens a serem adicionados a esta coleção.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable dictionary.">Remove todos os itens do dicionário imutável.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">O dicionário é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable dictionary contains a specific value.">Determina se o dicionário imutável contém um valor específico.</summary>
      <param name="item" vsli:raw="The object to locate in the dictionary.">O objeto a ser localizado no dicionário.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="item" /> for encontrada no dicionário; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element that has the specified key.">Determina se o dicionário imutável contém um elemento que tem a chave especificada.</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary.">A chave a ser localizada no dicionário.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o dicionário contiver um elemento com a chave; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> é nulo.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element that has the specified value.">Determina se o dicionário imutável contém um elemento que tem o valor especificado.</summary>
      <param name="value" vsli:raw="The value to locate in the immutable dictionary. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">O valor a ser localizado no dicionário imutável. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o dicionário contiver um elemento com o valor especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Count">
      <summary vsli:raw="Gets the number of elements contained in the immutable dictionary.">Obtém o número de elementos contidos no dicionário imutável.</summary>
      <returns vsli:raw="The number of elements contained in the immutable dictionary.">O número de elementos contidos no dicionário imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable dictionary.">Retorna um enumerador que itera no dicionário imutável.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Um enumerador que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">Obtém o valor de uma determinada chave, se uma chave correspondente existir no dicionário.</summary>
      <param name="key" vsli:raw="The key to search for.">A chave a ser pesquisada.</param>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">O valor da chave ou <c>default(TValue)</c> se nenhuma chave correspondente for encontrada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">Obtém o valor de uma determinada chave, se uma chave correspondente existir no dicionário.</summary>
      <param name="key" vsli:raw="The key to search for.">A chave a ser pesquisada.</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">O valor padrão a ser retornado se nenhuma chave correspondente for encontrada no dicionário.</param>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">O valor da chave ou <paramref name="defaultValue" /> se nenhuma chave correspondente for encontrada.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Item(`0)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Obtém ou define o elemento com a chave especificada.</summary>
      <param name="key" vsli:raw="The element to get or set.">Elemento a ser obtido ou definido.</param>
      <returns vsli:raw="The element that has the specified key.">O elemento que tem a chave especificada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The property is being retrieved, and &lt;paramref name=&quot;key&quot; /&gt; is not found.">A propriedade está sendo recuperada e <paramref name="key" /> não foi encontrado.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The property is being set, and the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; is read-only.">A propriedade está sendo definida e o <see cref="T:System.Collections.Generic.IDictionary`2" /> é somente leitura.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">Obtém ou define o comparador de chave.</summary>
      <returns vsli:raw="The key comparer.">O comparador de chave.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Keys">
      <summary vsli:raw="Gets a collection that contains the keys of the immutable dictionary.">Obtém uma coleção que contém as chaves do dicionário imutável.</summary>
      <returns vsli:raw="A collection that contains the keys of the object that implements the immutable dictionary.">Uma coleção que contém as chaves do objeto que implementa o dicionário imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">Remove o elemento com a chave especificada do dicionário imutável.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">A chave do elemento a ser removido.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; was not found in the dictionary.">
        <see langword="true" /> se o elemento for removido com êxito; caso contrário, <see langword="false" />.  Esse método também retornará <see langword="false" /> se o <paramref name="key" /> não tiver sido encontrado no dicionário.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> é nulo.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">O dicionário é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable dictionary.">Remove a primeira ocorrência de um objeto específico do dicionário imutável.</summary>
      <param name="item" vsli:raw="The object to remove from the dictionary.">O objeto a ser removido do dicionário.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns false if &lt;paramref name=&quot;item&quot; /&gt; is not found in the dictionary.">
        <see langword="true" /> se <paramref name="item" /> tiver sido removido com êxito do dicionário; caso contrário, <see langword="false" />. Esse método também retornará falso se o <paramref name="item" /> não for encontrado no dicionário.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">O dicionário é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes any entries with keys that match those found in the specified sequence from the immutable dictionary.">Remove todas as entradas com chaves que correspondam àquelas encontradas na sequência especificada do dicionário imutável.</summary>
      <param name="keys" vsli:raw="The keys for entries to remove from the dictionary.">As chaves das entradas a serem removidas do dicionário.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt;, starting at the specified array index.">Copia os elementos do dicionário para uma matriz do tipo <see cref="T:System.Collections.Generic.KeyValuePair`2" />, começando no índice da matriz especificada.</summary>
      <param name="array" vsli:raw="The one-dimensional array of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">A matriz unidimensional do tipo <see cref="T:System.Collections.Generic.KeyValuePair`2" /> que é o destino dos elementos copiados do dicionário. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtém um valor que indica se o acesso ao <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso o acesso ao <see cref="T:System.Collections.ICollection" /> seja sincronizado (thread-safe); do contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">Adiciona um elemento com a chave e o valor fornecidos ao objeto de dicionário.</summary>
      <param name="key" vsli:raw="The key of the element to add.">A chave do elemento a ser adicionada.</param>
      <param name="value" vsli:raw="The value of the element to add.">O valor do elemento a ser adicionado.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the dictionary object contains an element with the specified key.">Determina se o objeto de dicionário contém um elemento com a chave especificada.</summary>
      <param name="key" vsli:raw="The key to locate.">A chave a ser localizada.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o dicionário contiver um elemento com a chave; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">Retorna um objeto <see cref="T:System.Collections.IDictionaryEnumerator" /> para o dicionário.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">Um objeto <see cref="T:System.Collections.IDictionaryEnumerator" /> para o dicionário.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">Obtém um valor que indica se o objeto <see cref="T:System.Collections.IDictionary" /> tem um tamanho fixo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o <see cref="T:System.Collections.IDictionary" /> objeto tiver um tamanho fixo; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Obtém ou define o elemento com a chave especificada.</summary>
      <param name="key" vsli:raw="The key.">A chave.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtém um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém as chaves do <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém as chaves do objeto que implementa <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the dictionary.">Remove o elemento com a chave especificada do dicionário.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">A chave do elemento a ser removido.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtém um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém os valores no <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém os valores no objeto que implementa <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retorna um enumerador que itera em uma coleção.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Um objeto enumerador que pode ser usado para iterar na coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable dictionary based on the contents of this instance.">Cria um dicionário imutável de acordo com o conteúdo desta instância.</summary>
      <returns vsli:raw="An immutable dictionary.">Um dicionário imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Determina se este dicionário contém uma chave especificada.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">A chave a ser pesquisada.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">A chave correspondente localizada no dicionário, se encontrada, ou <c>equalkey</c> se nenhuma correspondência for encontrada.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se uma correspondência para <paramref name="equalKey" /> for encontrada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary vsli:raw="Returns the value associated with the specified key.">Retorna o valor associado à chave especificada.</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">A chave cujo valor será recuperado.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, returns the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">Quando esse método retorna, ele contém o valor associado à chave especificada, caso a chave seja encontrada; caso contrário, retorna o valor padrão para o tipo do parâmetro <paramref name="value" />. Este parâmetro é passado não inicializado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the immutable dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o objeto que implementa o dicionário imutável contiver um elemento com a chave especificada; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> é nulo.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.ValueComparer">
      <summary vsli:raw="Gets or sets the value comparer.">Obtém ou define o comparador de valor.</summary>
      <returns vsli:raw="The value comparer.">O comparador de valor.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Values">
      <summary vsli:raw="Gets a collection that contains the values of the immutable dictionary.">Obtém uma coleção que contém os valores do dicionário imutável.</summary>
      <returns vsli:raw="A collection that contains the values of the object that implements the dictionary.">Uma coleção que contém os valores do objeto que implementa o dicionário.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty immutable dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">Recupera um dicionário imutável vazio que tem a mesma ordenação e regras de comparação de chave/valor que essa instância de dicionário.</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">Um dicionário vazio com ordenação e regras de comparação de chave/valor equivalentes.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether this immutable dictionary contains the specified key/value pair.">Determina se esse dicionário imutável contém o par chave/valor especificado.</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">O par chave/valor a ser localizado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o par chave/valor especificado for encontrado no dicionário; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element with the specified key.">Determina se o dicionário imutável contém um elemento com a chave especificada.</summary>
      <param name="key" vsli:raw="The key to locate.">A chave a ser localizada.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o dicionário imutável contiver um elemento com a chave especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element with the specified value.">Determina se o dicionário imutável contém um elemento com o valor especificado.</summary>
      <param name="value" vsli:raw="The value to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">O valor a ser localizado. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o dicionário contiver um elemento com o valor especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs in the immutable dictionary.">Obtém o número de pares chave/valor no dicionário imutável.</summary>
      <returns vsli:raw="The number of key/value pairs in the dictionary.">O número de pares de chave/valor no dicionário.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableDictionary`2.Empty">
      <summary vsli:raw="Gets an empty immutable dictionary.">Obtém um dicionário imutável vazio</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator">
      <summary vsli:raw="Enumerates the contents of the immutable dictionary without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Enumera o conteúdo do dicionário imutável sem qualquer alocação de memória.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtém o elemento na posição atual do enumerador.</summary>
      <returns vsli:raw="The element in the dictionary at the current position of the enumerator.">O elemento no dicionário na posição atual do enumerador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator&quot; /&gt; class.">Libera os recursos usados pela instância atual da classe <see cref="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable dictionary.">Avança o enumerador para o próximo elemento do dicionário imutável.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the dictionary.">
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final do dicionário.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dictionary was modified after the enumerator was created.">O dicionário foi modificado depois da criação do enumerador.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the dictionary.">Define o enumerador com sua posição inicial, que é antes do primeiro elemento do dicionário.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dictionary was modified after the enumerator was created.">O dicionário foi modificado depois da criação do enumerador.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the current element.">Obtém o elemento atual.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable dictionary.">Retorna um enumerador que itera no dicionário imutável.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">Um enumerador que pode ser usado para iterar no dicionário.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable dictionary is empty.">Obtém um valor que indica se essa instância do dicionário imutável está vazia.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se esta instância estiver vazia; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Item(`0)">
      <summary vsli:raw="Gets the &lt;paramref name=&quot;TValue&quot; /&gt; associated with the specified key.">Obtém o <paramref name="TValue" /> associado à chave especificada.</summary>
      <param name="key" vsli:raw="The type of the key.">Tipo da chave.</param>
      <returns vsli:raw="The value associated with the specified key. If no results are found, the operation throws an exception.">O valor associado à chave especificada. Se nenhum resultado for encontrado, a operação lançará uma exceção.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.KeyComparer">
      <summary vsli:raw="Gets the key comparer for the immutable dictionary.">Obtém o comparador de chave para o dicionário imutável.</summary>
      <returns vsli:raw="The key comparer.">O comparador de chave.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Keys">
      <summary vsli:raw="Gets the keys in the immutable dictionary.">Obtém as chaves no dicionário imutável.</summary>
      <returns vsli:raw="The keys in the immutable dictionary.">As chaves no dicionário imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">Remove o elemento com a chave especificada do dicionário imutável.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">A chave do elemento a ser removido.</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary.">Um novo dicionário imutável com o elemento especificado removido; ou esta instância, se a chave especificada não puder ser encontrada no dicionário.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable dictionary.">Remove os elementos do dicionário imutável com as chaves especificadas.</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">As chaves dos elementos a serem removidos.</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">Um novo dicionário imutável com as chaves especificadas removidas; ou esta instância, se a chave especificada não puder ser encontrada no dicionário.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.">Define a chave especificada e o valor no dicionário imutável, possivelmente substituindo um valor existente para a chave.</summary>
      <param name="key" vsli:raw="The key of the entry to add.">A chave da entrada a ser adicionada.</param>
      <param name="value" vsli:raw="The key value to set.">O valor de chave a ser definido.</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pair.">Um novo dicionário imutável que contém o par chave/valor especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys.">Define os pares chave/valor especificados no dicionário imutável, possivelmente substituindo valores existente para as chaves.</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">Os pares chave/valor a serem definidos no dicionário. Se qualquer uma das chaves já existir no dicionário, este método substituirá os respectivos valores anteriores.</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pairs.">Um novo dicionário imutável que contém os pares chave/valor especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="The object to use as the key of the element to add." />
      <param name="value" vsli:raw="The object to use as the value of the element to add." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" vsli:raw="The type of the key." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="The key of the element to remove." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.">Copia os elementos do dicionário em uma matriz, começando em um índice de matriz específico.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">A matriz unidimensional que é o destino dos elementos copiados do dicionário. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtém um valor que indica se o acesso à <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso o acesso ao <see cref="T:System.Collections.ICollection" /> seja sincronizado (thread-safe); do contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the immutable dictionary object.">Adiciona um elemento com a chave e o valor fornecidos ao objeto de dicionário imutável.</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to add.">O objeto a ser usado como chave do elemento a ser adicionado.</param>
      <param name="value" vsli:raw="The object to use as the value of the element to add.">O objeto a ser usado como o valor do elemento a ser adicionado.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Clear">
      <summary vsli:raw="Clears this instance.">Limpa essa instância.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary object is read-only.">O objeto de dicionário é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable dictionary object contains an element with the specified key.">Determina se o objeto dicionário imutável contém um elemento com a chave especificada.</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary object.">A chave a ser localizada no objeto de dicionário.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o dicionário contiver um elemento com a chave; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the immutable dictionary object.">Retorna um objeto <see cref="T:System.Collections.IDictionaryEnumerator" /> para o objeto de dicionário imutável.</summary>
      <returns vsli:raw="An enumerator object for the dictionary object.">Um objeto enumerador para o objeto de dicionário.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">Obtém um valor que indica se o objeto <see cref="T:System.Collections.IDictionary" /> tem um tamanho fixo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o <see cref="T:System.Collections.IDictionary" /> objeto tiver um tamanho fixo; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Obtém ou define o elemento com a chave especificada.</summary>
      <param name="key" vsli:raw="The key.">A chave.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtém um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém as chaves do <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém as chaves do objeto que implementa <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary object.">Remove o elemento com a chave especificada do objeto de dicionário imutável.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">A chave do elemento a ser removido.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtém um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém os valores no <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém os valores no objeto que implementa <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retorna um enumerador que itera em uma coleção.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Um objeto enumerador que pode ser usado para iterar na coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="Key of the entry to be added." />
      <param name="value" vsli:raw="Value of the entry to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" vsli:raw="Sequence of key/value pairs to be added to the dictionary." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="Key of the entry to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" vsli:raw="Sequence of keys to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" vsli:raw="Key of entry to be added." />
      <param name="value" vsli:raw="Value of the entry to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" vsli:raw="The key-value pairs to set on the map. Any keys that conflict with existing keys will replace the previous values." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ToBuilder">
      <summary vsli:raw="Creates an immutable dictionary with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">Cria um dicionário imutável com o mesmo conteúdo deste dicionário que pode ser modificado com eficiência em várias operações usando interfaces mutáveis padrão.</summary>
      <returns vsli:raw="A collection with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">Uma coleção com o mesmo conteúdo deste dicionário que pode ser modificada com eficiência em várias operações usando interfaces mutáveis padrão.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Determina se este dicionário contém uma chave especificada.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">A chave a ser pesquisada.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">A chave correspondente localizada no dicionário, se encontrada, ou <c>equalkey</c> se nenhuma correspondência for encontrada.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se uma correspondência para <paramref name="equalKey" /> for encontrada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">Obtém o valor associado à chave especificada.</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">A chave cujo valor será recuperado.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">Quando esse método retorna, ele contém o valor associado à chave especificada, caso a chave seja encontrada; caso contrário, conterá o valor padrão para o tipo do parâmetro <paramref name="value" />. Este parâmetro é passado não inicializado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o objeto que implementa o dicionário contiver um elemento com a chave especificada; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> é nulo.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.ValueComparer">
      <summary vsli:raw="Gets the value comparer used to determine whether values are equal.">Obtém o comparador de valor usado para determinar se os valores são iguais.</summary>
      <returns vsli:raw="The value comparer used to determine whether values are equal.">O comparador de valor usado para determinar se os valores são iguais.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Values">
      <summary vsli:raw="Gets the values in the immutable dictionary.">Obtém os valores no dicionário imutável.</summary>
      <returns vsli:raw="The values in the immutable dictionary.">Os valores no dicionário imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable dictionary that uses the specified key comparer.">Obtém uma instância do dicionário imutável que usa o comparador de chave especificado.</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">O comparador de chave a ser usado.</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparer.">Uma instância do dicionário imutável que usa o comparador especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary vsli:raw="Gets an instance of the immutable dictionary that uses the specified key and value comparers.">Obtém uma instância do dicionário imutável que usa o comparador de chave e valor especificados.</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">O comparador de chave a ser usado.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use.">O comparador de valor a ser usado.</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparers.">Uma instância do dicionário imutável que usa os comparadores especificados.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Fornece um conjunto de métodos de inicialização para instâncias da classe <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1">
      <summary vsli:raw="Creates an empty immutable hash set.">Cria um conjunto de hash imutável vazio.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable hash set.">O tipo de itens a serem armazenados no conjunto de hash imutável.</typeparam>
      <returns vsli:raw="An empty immutable hash set.">Um conjunto de hash imutável vazio.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified item.">Cria um novo conjunto de hash imutável que contém o item especificado.</summary>
      <param name="item" vsli:raw="The item to prepopulate the hash set with.">O item com o qual preencher previamente o conjunto de hash.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">O tipo de itens no conjunto de hash imutável.</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified item.">Um novo conjunto de hash imutável que contém o item especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified array of items.">Cria um novo conjunto de hash imutável que contém a matriz de itens especificada.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the hash set with.">Uma matriz que contém os itens com os quais preencher previamente o conjunto de hash.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">O tipo de itens no conjunto de hash imutável.</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified items.">Um novo conjunto de hash imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates an empty immutable hash set that uses the specified equality comparer.">Cria um conjunto de hash imutável vazio que usa o comparador de igualdade especificado.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">O objeto a ser usado para a comparação dos objetos no conjunto quanto à igualdade.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">O tipo de itens no conjunto de hash imutável.</typeparam>
      <returns vsli:raw="An empty immutable hash set.">Um conjunto de hash imutável vazio.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0)">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified item and uses the specified equality comparer for the set type.">Cria um novo conjunto de hash imutável que contém o item especificado e usa o comparador de igualdade especificado para o tipo de conjunto.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">O objeto a ser usado para a comparação dos objetos no conjunto quanto à igualdade.</param>
      <param name="item" vsli:raw="The item to prepopulate the hash set with.">O item com o qual preencher previamente o conjunto de hash.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">O tipo de itens no conjunto de hash imutável.</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified item.">Um novo conjunto de hash imutável que contém o item especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0[])">
      <summary vsli:raw="Creates a new immutable hash set that contains the items in the specified collection and uses the specified equality comparer for the set type.">Cria um novo conjunto de hash imutável que contém os itens na coleção especificada e usa o comparador de igualdade especificado para o tipo de conjunto.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">O objeto a ser usado para a comparação dos objetos no conjunto quanto à igualdade.</param>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the hash set with.">Uma matriz que contém os itens com os quais preencher previamente o conjunto de hash.</param>
      <typeparam name="T" vsli:raw="The type of items stored in the immutable hash set.">O tipo de itens armazenados no conjunto de hash imutável.</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified items.">Um novo conjunto de hash imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1">
      <summary vsli:raw="Creates a new immutable hash set builder.">Cria um novo construtor de conjunto de hash imutável.</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">O tipo de itens armazenados pela coleção.</typeparam>
      <returns vsli:raw="The immutable hash set builder.">O construtor de conjunto de hash imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a new immutable hash set builder.">Cria um novo construtor de conjunto de hash imutável.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">O objeto a ser usado para a comparação dos objetos no conjunto quanto à igualdade.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">O tipo de itens armazenados pela coleção.</typeparam>
      <returns vsli:raw="The new immutable hash set builder.">O novo construtor de conjunto de hash imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable hash set prefilled with the specified items.">Cria um novo conjunto de hash imutável previamente preenchido com os itens especificados.</summary>
      <param name="items" vsli:raw="The items to add to the hash set.">Os itens a serem adicionados ao conjunto de hash.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">O tipo de itens armazenados pela coleção.</typeparam>
      <returns vsli:raw="The new immutable hash set that contains the specified items.">O novo conjunto de hash imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified items and uses the specified equality comparer for the set type.">Cria um novo conjunto de hash imutável que contém os itens especificados e usa o comparador de igualdade especificado para o tipo de conjunto.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">O objeto a ser usado para a comparação dos objetos no conjunto quanto à igualdade.</param>
      <param name="items" vsli:raw="The items add to the collection before immutability is applied.">Os itens adicionados à coleção antes que a imutabilidade é aplicada.</param>
      <typeparam name="T" vsli:raw="The type of items stored in the collection.">O tipo de itens armazenados na coleção.</typeparam>
      <returns vsli:raw="The new immutable hash set.">O novo conjunto de hash imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable hash set of its contents.">Enumera uma sequência e produz um conjunto de hash imutável de seu conteúdo.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">A sequência a ser enumerada.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">O tipo dos elementos na sequência.</typeparam>
      <returns vsli:raw="An immutable hash set that contains the items in the specified sequence.">Um conjunto de hash imutável que contém os itens na sequência especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Enumerates a sequence, produces an immutable hash set of its contents, and uses the specified equality comparer for the set type.">Enumera uma sequência, produz um conjunto de hash imutável de seu conteúdo e usa o comparador de igualdade especificado para o tipo de conjunto.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">A sequência a ser enumerada.</param>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">O objeto a ser usado para a comparação dos objetos no conjunto quanto à igualdade.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">O tipo dos elementos na sequência.</typeparam>
      <returns vsli:raw="An immutable hash set that contains the items in the specified sequence and uses the specified equality comparer.">Um conjunto de hash imutável que contém os itens na sequência especificada e usa o comparador de igualdade especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Immutable.ImmutableHashSet{``0}.Builder)">
      <summary vsli:raw="Creates an immutable hash set from the current contents of the builder's set.">Cria um conjunto hash imutável do conteúdo atual do conjunto do construtor.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable hash set from.">O construtor para o qual criar o conjunto hash imutável.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the hash set.">O tipo dos elementos no conjunto de hash.</typeparam>
      <returns vsli:raw="An immutable hash set that contains the current contents in the builder's set.">Cria um conjunto hash imutável preenchido com o conteúdo atual do conjunto do construtor.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1">
      <summary vsli:raw="Represents an immutable, unordered hash set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa um conjunto de hash imutável não ordenado.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the hash set.">O tipo dos elementos no conjunto de hash.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified element to the hash set.">Adiciona o elemento especificado ao conjunto de hash.</summary>
      <param name="item" vsli:raw="The element to add to the set.">O elemento a ser adicionado ao conjunto.</param>
      <returns vsli:raw="A hash set that contains the added value and any values previously held by the  &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt; object.">Um conjunto de hash que contém o valor adicionado e quaisquer valores mantidos anteriormente pelo objeto <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Builder">
      <summary vsli:raw="Represents a hash set that mutates with little or no memory allocations and that can produce or build on immutable hash set instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa um conjunto de hash que se modifica com pouca ou nenhuma alocação de memória e que pode produzir ou criar instâncias de conjunto de hash imutáveis de maneira muito eficiente.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Add(`0)">
      <summary vsli:raw="Adds the specified item to the immutable hash set.">Adiciona o item especificado ao conjunto de hash imutável.</summary>
      <param name="item" vsli:raw="The item to add.">O item a ser adicionado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item did not already belong to the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o item ainda não pertence à coleção; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable hash set.">Remove todos os itens do conjunto de hash imutável.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The hash set is read-only.">O conjunto de hash é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the immutable hash set contains a specific value.">Determina se o conjunto de hash imutável contém um valor específico.</summary>
      <param name="item" vsli:raw="The object to locate in the hash set.">O objeto a ser localizado no conjunto de hash.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the hash set ; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="item" /> for encontrado no conjunto de hash; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements contained in the immutable hash set.">Obtém o número de elementos contidos no conjunto de hash imutável.</summary>
      <returns vsli:raw="The number of elements contained in the immutable hash set.">O número de elementos contidos no conjunto de hash imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current hash set.">Remove todos os elementos na coleção especificada do conjunto de hash atual.</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">A coleção de itens a serem removidos do conjunto.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable hash set.">Retorna um enumerador que itera no conjunto de hash imutável.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">Um enumerador que pode ser usado para iterar no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">Modifica o conjunto atual para que ele contenha apenas elementos que também estejam em uma coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) subset of a specified collection.">Determina se o conjunto atual é um subconjunto apropriado (estrito) de uma coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conjunto atual for um subconjunto apropriado do <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) superset of a specified collection.">Determina se o conjunto atual é um superconjunto apropriado (estrito) de uma coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conjunto atual for um superconjunto apropriado de <paramref name="other" />, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a subset of a specified collection.">Determina se o conjunto atual é um subconjunto de uma coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conjunto atual for um subconjunto de <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a superset of a specified collection.">Determina se o conjunto atual é um superconjunto de uma coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conjunto atual for um superconjunto de <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">Obtém ou define o comparador de chave.</summary>
      <returns vsli:raw="The key comparer.">O comparador de chave.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set overlaps with the specified collection.">Determina se o conjunto atual se sobrepõe à coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conjunto atual e <paramref name="other" /> compartilharem pelo menos um elemento comum; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable hash set.">Remove a primeira ocorrência de um objeto específico do conjunto de hash imutável.</summary>
      <param name="item" vsli:raw="The object to remove from the set.">O objeto a ser removido do conjunto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the set ; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the original set.">
        <see langword="true" /> se <paramref name="item" /> tiver sido removido com êxito do conjunto; caso contrário, <see langword="false" />. Esse método também retornará <see langword="false" /> se o <paramref name="item" /> não for encontrado no conjunto original.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">O conjunto é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set and the specified collection contain the same elements.">Determina se o conjunto atual e a coleção especificada contêm os mesmos elementos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is equal to &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conjunto atual for igual a <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">Modifica o conjunto atual para que ele contenha somente os elementos presentes no conjunto atual ou na coleção especificada, mas não em ambos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item to the hash set.">Adiciona um item ao conjunto de hash.</summary>
      <param name="item" vsli:raw="The object to add to the set.">O objeto a ser adicionado ao conjunto.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">O conjunto é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the hash set to an array, starting at a particular array index.">Copia os elementos do conjunto de hash em uma matriz, começando em um índice de matriz específico.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the hash set. The array must have zero-based indexing.">A matriz unidimensional que é o destino dos elementos copiados do conjunto de hash. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retorna um enumerador que itera pela coleção.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Um enumerador que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retorna um enumerador que itera em uma coleção.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Um enumerador que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable hash set based on the contents of this instance.">Cria um conjunto de hash imutável de acordo com o conteúdo desta instância.</summary>
      <returns vsli:raw="An immutable set.">Um conjunto imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.">Modifica o conjunto atual para que ele contenha todos os elementos que estão presentes no conjunto atual e na coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Clear">
      <summary vsli:raw="Retrieves an empty immutable hash set that has the same sorting and ordering semantics as this instance.">Recupera um conjunto de hash imutável vazio que tem as mesmas semânticas de classificação e ordenação que essa instância.</summary>
      <returns vsli:raw="An empty hash set that has the same sorting and ordering semantics as this instance.">Um conjunto de hash vazio que tem as mesmas semânticas de classificação e ordenação que essa instância.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable hash set contains the specified element.">Determina se este conjunto de hash imutável contém o elemento especificado.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable hash set.">O objeto a ser localizado no conjunto de hash imutável.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="item" /> for encontrado no <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Count">
      <summary vsli:raw="Gets the number of elements in the immutable hash set.">Obtém o número de elementos no conjunto de hash imutável.</summary>
      <returns vsli:raw="The number of elements in the hash set.">O número de elementos no conjunto de hash.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableHashSet`1.Empty">
      <summary vsli:raw="Gets an immutable hash set for this type that uses the default &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Obtém um conjunto de hash imutável para este tipo que usa o <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> padrão.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of the immutable hash set without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Enumera o conteúdo do conjunto de hash imutável sem qualquer alocação de memória.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtém o elemento na posição atual do enumerador.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">O elemento na posição atual do enumerador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator&quot; /&gt; class.">Libera os recursos usados pela instância atual da classe <see cref="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable hash set.">Avança o enumerador para o próximo elemento do conjunto de hash imutável.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the hash set.">
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final do conjunto de hash imutável.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The hash set was modified after the enumerator was created.">O conjunto de hash foi modificado depois da criação do enumerador.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the hash set.">Define o enumerador com sua posição inicial, que é antes do primeiro elemento do conjunto de hash.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The hash set was modified after the enumerator was created.">O conjunto de hash foi modificado depois da criação do enumerador.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the current element.">Obtém o elemento atual.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable hash set.">Remove os elementos na coleção especificada do conjunto de hash imutável atual.</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">A coleção de itens a serem removidos desse conjunto.</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">Um novo conjunto com os itens removidos; ou o conjunto original se nenhum dos itens tiverem sido encontrados no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retorna um enumerador que itera pela coleção.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Um enumerador que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable hash set that contains elements that exist in both this set and the specified set.">Cria um conjunto de hash imutável que contém elementos que existem em ambos: nesse conjunto e no conjunto especificado.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">Um novo conjunto imutável que contém quaisquer elementos que existam nos dois conjuntos.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether the current immutable hash set is empty.">Obtém um valor que indica se o conjunto de hash imutável atual está vazio.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se esta instância estiver vazia; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a proper (strict) subset of a specified collection.">Determina se o conjunto de hash imutável atual é um subconjunto apropriado (estrito) de uma coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conjunto atual for um subconjunto apropriado da coleção especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a proper (strict) superset of a specified collection.">Determina se o conjunto de hash imutável atual é um superconjunto apropriado (estrito) de uma coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conjunto atual for um superconjunto apropriado da coleção especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a subset of a specified collection.">Determina se o conjunto de hash imutável atual é um subconjunto de uma coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conjunto atual for um subconjunto da coleção especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a superset of a specified collection.">Determina se o conjunto de hash imutável atual é um superconjunto de uma coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conjunto atual for um superconjunto da coleção especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.KeyComparer">
      <summary vsli:raw="Gets the object that is used to obtain hash codes for the keys and to check the equality of values in the immutable hash set.">Obtém o objeto que é usado para obter códigos hash para as chaves e verificar a igualdade de valores no conjunto de hash imutável.</summary>
      <returns vsli:raw="The comparer used to obtain hash codes for the keys and check equality.">O comparador usado para obter códigos de hash para as chaves e a igualdade de verificação.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set overlaps with the specified collection.">Determina se o conjunto de hash imutável atual se sobrepõe à coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and the specified collection share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conjunto atual e a coleção especificada compartilharem pelo menos um elemento comum; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable hash set.">Remove o elemento especificado desse conjunto de hash imutável.</summary>
      <param name="item" vsli:raw="The element to remove.">O elemento a ser removido.</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">Um novo conjunto com o elemento especificado removido ou o conjunto atual se o elemento não puder ser encontrado no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set and the specified collection contain the same elements.">Determina se o conjunto de hash imutável atual e a coleção especificada contêm os mesmos elementos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se os conjuntos forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable hash set that contains only elements that are present either in the current set or in the specified collection, but not both.">Cria um conjunto de hash imutável que contém somente os elementos que estão presentes no conjunto atual ou na coleção especificada, mas não em ambos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">Um novo conjunto que contém os elementos que estão presentes somente no conjunto atual ou na coleção especificada, mas não em ambos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item to the set.">Adiciona um item ao conjunto.</summary>
      <param name="item" vsli:raw="The object to add to the set.">O objeto a ser adicionado ao conjunto.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">O conjunto é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all items from this set.">Remove todos os itens desse conjunto.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">O conjunto é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular index.">Copia os elementos do conjunto em uma matriz, começando em um índice específico.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">A matriz unidimensional que é o destino dos elementos copiados do conjunto. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; interface.">Consulte a interface <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the set.">Remove a primeira ocorrência de um objeto específico do conjunto.</summary>
      <param name="item" vsli:raw="The object to remove from the set.">O objeto a ser removido do conjunto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o elemento for removido com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retorna um enumerador que itera pela coleção.</summary>
      <returns vsli:raw="An enumerator that iterates through the collection.">Um enumerador que itera por meio da coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value that indicates whether the element was successfully added.">Adiciona um elemento ao conjunto atual e retorna um valor que indica se o elemento foi adicionado com êxito.</summary>
      <param name="item" vsli:raw="The element to add to the collection.">O elemento a ser adicionado à coleção.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">
        <see langword="true" /> se o elemento for adicionado ao conjunto; <see langword="false" /> se o elemento já estiver no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current set.">Remove todos os elementos na coleção especificada do conjunto atual.</summary>
      <param name="other" vsli:raw="The collection of items to remove.">A coleção de itens a serem removidos.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">Modifica o conjunto atual para que ele contenha apenas elementos que também estejam em uma coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current collection.">A coleção a ser comparada com a coleção atual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">Modifica o conjunto atual para que ele contenha somente os elementos presentes no conjunto atual ou na coleção especificada, mas não em ambos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in either the current set or in the specified collection.">Modifica o conjunto atual para que ele contenha todos os elementos que estão presentes no conjunto atual ou na coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular index.">Copia os elementos do conjunto em uma matriz, começando em um índice específico.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">A matriz unidimensional que é o destino dos elementos copiados do conjunto. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">Consulte a interface <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Consulte <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a set.">Retorna um enumerador que itera em um conjunto.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">Um enumerador que pode ser usado para iterar no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">Adiciona o elemento especificado a este conjunto imutável.</summary>
      <param name="item" vsli:raw="The element to add.">O elemento a ser adicionado.</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">Um novo conjunto com o elemento adicionado ou esse conjunto se o elemento já está estiver nele.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary vsli:raw="Retrieves an empty set that has the same sorting and ordering semantics as this instance.">Recupera um conjunto vazio que tem as mesmas semânticas de classificação e ordenação que essa instância.</summary>
      <returns vsli:raw="An empty set that has the same sorting or ordering semantics as this instance.">Um conjunto vazio que tem as mesmas semânticas de classificação ou ordenação que essa instância.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current set.">Remove os elementos na coleção especificada do conjunto atual.</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">A coleção de itens a serem removidos desse conjunto.</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">Um novo conjunto com os itens removidos; ou o conjunto original se nenhum dos itens tiverem sido encontrados no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains elements that exist in both this set and the specified set.">Cria um conjunto imutável que contém elementos que existem em ambos: nesse conjunto e no conjunto especificado.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">Um novo conjunto imutável que contém quaisquer elementos que existam nos dois conjuntos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">Remove o elemento especificado desse conjunto imutável.</summary>
      <param name="item" vsli:raw="The element to remove.">O elemento a ser removido.</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">Um novo conjunto com o elemento especificado removido ou o conjunto atual se o elemento não puder ser encontrado no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">Cria um conjunto imutável que contém somente os elementos que estão presentes no conjunto atual ou na coleção especificada, mas não em ambos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">Um novo conjunto que contém os elementos que estão presentes somente no conjunto atual ou na coleção especificada, mas não em ambos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">Cria um novo conjunto imutável que contém todos os elementos que estão presentes no conjunto atual ou na coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to add elements from.">A coleção da qual os elementos serão adicionados.</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">Um novo conjunto imutável com os itens adicionados; ou o conjunto original se todos os itens já estiverem no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.ToBuilder">
      <summary vsli:raw="Creates an immutable hash set that has the same contents as this set and can be efficiently mutated across multiple operations by using standard mutable interfaces.">Cria um conjunto de hash imutável que tem o mesmo conteúdo que esse conjunto e pode ser modificado com eficiência em várias operações usando interfaces mutáveis padrão.</summary>
      <returns vsli:raw="A set with the same contents as this set that can be efficiently mutated across multiple operations by using standard mutable interfaces.">Um conjunto com o mesmo conteúdo que esse conjunto, que pode ser modificado com eficiência em várias operações usando interfaces mutáveis padrão.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">Pesquisa um determinado valor no conjunto e retorna o valor igual que for encontrado, se houver.</summary>
      <param name="equalValue" vsli:raw="The value to search for.">O valor a ser procurado.</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the original value if the search yielded no match.">O valor do conjunto que foi encontrado pela pesquisa ou o valor original, se a pesquisa não gerou correspondência.</param>
      <returns vsli:raw="A value indicating whether the search was successful.">Um valor que indica se a pesquisa foi bem-sucedida.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable hash set that contains all elements that are present in either the current set or in the specified collection.">Cria um novo conjunto de hash imutável que contém todos os elementos que estão presentes no conjunto atual ou na coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to add elements from.">A coleção da qual os elementos serão adicionados.</param>
      <returns vsli:raw="A new immutable hash set with the items added; or the original set if all the items were already in the set.">Um novo conjunto de hash imutável com os itens adicionados; ou o conjunto original se todos os itens já estiverem no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.WithComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable hash set that uses the specified equality comparer for its search methods.">Obtém uma instância do conjunto de hash imutável que usa o comparador de igualdade especificado para seus métodos de pesquisa.</summary>
      <param name="equalityComparer" vsli:raw="The equality comparer to use.">O comparador de igualdade a ser usado.</param>
      <returns vsli:raw="An instance of this immutable hash set that uses the given comparer.">Uma instância desse conjunto de hash imutável que usa o comparador especificado.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableInterlocked">
      <summary vsli:raw="Contains interlocked exchange mechanisms for immutable collections.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Contém mecanismos de troca encaixados para coleções imutáveis.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})">
      <summary vsli:raw="Obtains the value from a dictionary after having added it or updated an existing entry.">Obtém o valor de um dicionário depois de ter adicionado ou atualizado uma entrada existente.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">A variável ou o campo a ser atomicamente atualizado se o especificado não estiver no dicionário.</param>
      <param name="key" vsli:raw="The key for the value to add or update.">A chave para o valor a ser adicionado ou atualizado.</param>
      <param name="addValue" vsli:raw="The value to use if no previous value exists.">O valor a ser usado se não houver nenhum valor anterior.</param>
      <param name="updateValueFactory" vsli:raw="The function that receives the key and prior value and returns the new value with which to update the dictionary.">A função que recebe a chave e o valor anterior e retorna o novo valor com o qual atualizar o dicionário.</param>
      <typeparam name="TKey" vsli:raw="The type of key stored by the dictionary.">O tipo de chave armazenada pelo dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of value stored by the dictionary.">O tipo de valor armazenado pelo dicionário.</typeparam>
      <returns vsli:raw="The added or updated value.">O valor adicionado ou atualizado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
      <summary vsli:raw="Obtains the value from a dictionary after having added it or updated an existing entry.">Obtém o valor de um dicionário depois de ter adicionado ou atualizado uma entrada existente.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">A variável ou o campo a ser atomicamente atualizado se o especificado não estiver no dicionário.</param>
      <param name="key" vsli:raw="The key for the value to add or update.">A chave para o valor a ser adicionado ou atualizado.</param>
      <param name="addValueFactory" vsli:raw="The function that receives the key and returns a new value to add to the dictionary when no value previously exists.">A função que recebe a chave e retorna um novo valor para adicionar ao dicionário quando não existir nenhum valor anteriormente.</param>
      <param name="updateValueFactory" vsli:raw="The function that receives the key and prior value and returns the new value with which to update the dictionary.">A função que recebe a chave e o valor anterior e retorna o novo valor com o qual atualizar o dicionário.</param>
      <typeparam name="TKey" vsli:raw="The type of key stored by the dictionary.">O tipo de chave armazenada pelo dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of value stored by the dictionary.">O tipo de valor armazenado pelo dicionário.</typeparam>
      <returns vsli:raw="The added or updated value.">O valor adicionado ou atualizado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)">
      <summary vsli:raw="Atomically enqueues an element to the end of a queue.">Enfileira atomicamente um elemento ao final de uma fila.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update.">A variável ou o campo para atualizar atomicamente.</param>
      <param name="value" vsli:raw="The value to enqueue.">O valor a ser enfileirado.</param>
      <typeparam name="T" vsli:raw="The type of items contained in the collection.">O tipo de itens contidos na coleção</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">Obtém do dicionário o valor da chave especificada ou, se a chave não foi encontrada, adiciona um novo valor ao dicionário.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified key is not in the dictionary.">A variável ou o campo a ser atomicamente atualizado se a chave especificada não estiver no dicionário.</param>
      <param name="key" vsli:raw="The key for the value to get or add.">A chave para o valor a ser obtido ou adicionado.</param>
      <param name="value" vsli:raw="The value to add to the dictionary the key is not found.">O valor a ser adicionado ao dicionário se a chave não for encontrada.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">O tipo das chaves contidas na coleção.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">O tipo dos valores contidos na coleção.</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">O valor na chave especificada ou <paramref name="valueFactory" /> se a chave não estava presente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">Obtém do dicionário o valor da chave especificada ou, se a chave não foi encontrada, adiciona um novo valor ao dicionário.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">A variável ou o campo a ser atomicamente atualizado se o especificado não estiver no dicionário.</param>
      <param name="key" vsli:raw="The key for the value to retrieve or add.">A chave do valor a ser recuperado ou adicionado.</param>
      <param name="valueFactory" vsli:raw="The function to execute to obtain the value to insert into the dictionary if the key is not found. This delegate will not be invoked more than once.">A função a ser executada para obter o valor a ser inserido no dicionário se a chave não for encontrada. Este delegado não será invocado mais de uma vez.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">O tipo das chaves contidas na coleção.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">O tipo dos valores contidos na coleção.</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">O valor na chave especificada ou <paramref name="valueFactory" /> se a chave não estava presente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">Obtém do dicionário o valor da chave especificada ou, se a chave não foi encontrada, adiciona um novo valor ao dicionário.</summary>
      <param name="location" vsli:raw="The variable or field to update if the specified is not in the dictionary.">A variável ou o campo a ser atualizado se o especificado não estiver no dicionário.</param>
      <param name="key" vsli:raw="The key for the value to retrieve or add.">A chave do valor a ser recuperado ou adicionado.</param>
      <param name="valueFactory" vsli:raw="The function to execute to obtain the value to insert into the dictionary if the key is not found.">A função a ser executada para obter o valor a ser inserido no dicionário se a chave não for encontrada.</param>
      <param name="factoryArgument" vsli:raw="The argument to pass to the value factory.">O argumento a ser passado para o alocador de valor.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">O tipo das chaves contidas na coleção.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">O tipo dos valores contidos na coleção.</typeparam>
      <typeparam name="TArg" vsli:raw="The type of the argument supplied to the value factory.">O tipo do argumento fornecido para a fábrica de valores.</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">O valor na chave especificada ou <paramref name="valueFactory" /> se a chave não estava presente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Compares two immutable arrays for equality and, if they are equal, replaces one of the arrays.">Compara duas matrizes imutáveis quanto à igualdade e, se elas forem iguais, substitui uma das matrizes.</summary>
      <param name="location" vsli:raw="The destination, whose value is compared with &lt;paramref name=&quot;comparand&quot; /&gt; and possibly replaced.">O destino, cujo valor é comparado com <paramref name="comparand" /> e possivelmente substituído.</param>
      <param name="value" vsli:raw="The value that replaces the destination value if the comparison results in equality.">O valor que substitui o valor de destino quando a comparação resulta em igualdade.</param>
      <param name="comparand" vsli:raw="The value that is compared to the value at &lt;paramref name=&quot;location&quot; /&gt;.">O valor comparado ao valor em <paramref name="location" />.</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">O tipo de elemento armazenado pela matriz.</typeparam>
      <returns vsli:raw="The original value in &lt;paramref name=&quot;location&quot; /&gt;.">O valor original em <paramref name="location" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Sets an array to the specified array and returns a reference to the original array, as an atomic operation.">Define uma matriz para a matriz especificada e retorna uma referência à matriz original, como uma operação atômica.</summary>
      <param name="location" vsli:raw="The array to set to the specified value.">A matriz a ser definida com o valor especificado.</param>
      <param name="value" vsli:raw="The value to which the &lt;paramref name=&quot;location&quot; /&gt; parameter is set.">O valor para o qual o parâmetro <paramref name="location" /> é definido.</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">O tipo de elemento armazenado pela matriz.</typeparam>
      <returns vsli:raw="The original value of &lt;paramref name=&quot;location&quot; /&gt;.">O valor original de <paramref name="location" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Sets an array to the specified array if the array has not been initialized.">Define uma matriz para a matriz especificada se a matriz não foi inicializada.</summary>
      <param name="location" vsli:raw="The array to set to the specified value.">A matriz a ser definida com o valor especificado.</param>
      <param name="value" vsli:raw="The value to which the &lt;paramref name=&quot;location&quot; /&gt; parameter is set, if it's not initialized.">O valor para o qual o parâmetro <paramref name="location" /> está definido, se ele não foi inicializado.</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">O tipo de elemento armazenado pela matriz.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array was assigned the specified value;  otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor especificado foi atribuído à matriz; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)">
      <summary vsli:raw="Pushes a new element onto the stack.">Envia um novo elemento por push para a pilha.</summary>
      <param name="location" vsli:raw="The stack to update.">A pilha a ser atualizada.</param>
      <param name="value" vsli:raw="The value to push on the stack.">O valor a ser enviado por push na pilha.</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">O tipo de itens na pilha.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary vsli:raw="Adds the specified key and value to the dictionary if the key is not in the dictionary.">Adiciona a chave especificada e o valor ao dicionário se a chave não estiver no dicionário.</summary>
      <param name="location" vsli:raw="The dictionary to update with the specified key and value.">O dicionário a ser atualizado com a chave e o valor especificados.</param>
      <param name="key" vsli:raw="The key to add, if is not already defined in the dictionary.">A chave a ser adicionada, se ainda não estiver definida no dicionário.</param>
      <param name="value" vsli:raw="The value to add.">O valor a ser adicionado.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">O tipo das chaves contidas na coleção.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">O tipo dos valores contidos na coleção.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key is not in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a chave não estiver no dicionário; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)">
      <summary vsli:raw="Atomically removes and returns the specified element at the head of the queue, if the queue is not empty.">Remove atomicamente e retorna o elemento especificado no cabeçalho da fila, se a fila não estiver vazia.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update.">A variável ou o campo para atualizar atomicamente.</param>
      <param name="value" vsli:raw="Set to the value from the head of the queue, if the queue not empty.">Definido como o valor do cabeçalho da fila, se a fila não estiver vazia.</param>
      <typeparam name="T" vsli:raw="The type of items in the queue.">O tipo de itens na fila.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the queue is not empty and the head element is removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a fila não estiver vazia e o elemento de cabeçalho for removido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)">
      <summary vsli:raw="Removes an element from the top of the stack, if there is an element to remove.">Remove um elemento da parte superior da pilha, se houver um elemento a ser removido.</summary>
      <param name="location" vsli:raw="The stack to update.">A pilha a ser atualizada.</param>
      <param name="value" vsli:raw="Receives the value removed from the stack, if the stack is not empty.">Recebe o valor removido da pilha, se a pilha não estiver vazia.</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">O tipo de itens na pilha.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element is removed from the stack; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se um elemento for removido da pilha; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)">
      <summary vsli:raw="Removes the element with the specified key, if the key exists.">Remove o elemento com a chave especificada, se a chave existir.</summary>
      <param name="location" vsli:raw="The dictionary to update.">O dicionário a ser atualizado.</param>
      <param name="key" vsli:raw="The key to remove.">A chave a ser removida.</param>
      <param name="value" vsli:raw="Receives the value of the removed item, if the dictionary is not empty.">Recebe o valor do item removido, se o dicionário não estiver vazio.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">O tipo das chaves contidas na coleção.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">O tipo dos valores contidos na coleção.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key was found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a chave for encontrada e removida; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)">
      <summary vsli:raw="Sets the specified key to the specified value if the specified key already is set to a specific value.">Define a chave especificada com o valor especificado se a chave especificada já estiver definida com um valor específico.</summary>
      <param name="location" vsli:raw="The dictionary to update.">O dicionário a ser atualizado.</param>
      <param name="key" vsli:raw="The key to update.">A chave a ser atualizada.</param>
      <param name="newValue" vsli:raw="The new value to set.">O novo valor a ser definido.</param>
      <param name="comparisonValue" vsli:raw="The current value for &lt;paramref name=&quot;key&quot; /&gt; in order for the update to succeed.">O valor atual para <paramref name="key" /> para que a atualização seja bem-sucedida.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">O tipo das chaves contidas na coleção.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">O tipo dos valores contidos na coleção.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; and &lt;paramref name=&quot;comparisonValue&quot; /&gt; are present in the dictionary and comparison was updated to &lt;paramref name=&quot;newValue&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="key" /> e <paramref name="comparisonValue" /> estiverem presentes no dicionário e a comparação for atualizada para <paramref name="newValue" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})">
      <summary vsli:raw="Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.             The transformation is retried as many times as necessary to win the optimistic locking race.">Modifica um valor no local com semântica de transação de bloqueio otimista por meio de uma função de transformação especificada.             A transformação será repetida tantas vezes quanto forem necessárias para ganhar a concorrência de bloqueio otimista.</summary>
      <param name="location" vsli:raw="The variable or field to be changed, which may be accessed by multiple threads.">A variável ou o campo a ser alterado, que pode ser acessado por vários threads.</param>
      <param name="transformer" vsli:raw="A function that mutates the value. This function should be side-effect free,              as it may run multiple times when races occur with other threads.">Uma função que modifica o valor. Essa função deverá ser livre de efeito colateral, pois poderá ser executada várias vezes quando ocorrerem concorrências com outros threads.</param>
      <typeparam name="T" vsli:raw="The type of data.">O tipo de dados.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the location's value is changed by applying the result of the &lt;paramref name=&quot;transformer&quot; /&gt; function; &lt;see langword=&quot;false&quot; /&gt; if the location's value remained the same because the last invocation of &lt;paramref name=&quot;transformer&quot; /&gt; returned the existing value.">
        <see langword="true" /> se o valor do local foi alterado aplicando o resultado da função <paramref name="transformer" />; <see langword="false" /> se o valor do local permaneceu o mesmo porque a última invocação de <paramref name="transformer" /> retornou o valor existente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)">
      <summary vsli:raw="Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.             The transformation is retried as many times as necessary to win the optimistic locking race.">Modifica um valor no local com semântica de transação de bloqueio otimista por meio de uma função de transformação especificada.             A transformação será repetida tantas vezes quanto forem necessárias para ganhar a concorrência de bloqueio otimista.</summary>
      <param name="location" vsli:raw="The variable or field to be changed, which may be accessed by multiple threads.">A variável ou o campo a ser alterado, que pode ser acessado por vários threads.</param>
      <param name="transformer" vsli:raw="A function that mutates the value. This function should be side-effect free,              as it may run multiple times when races occur with other threads.">Uma função que modifica o valor. Essa função deverá ser livre de efeito colateral, pois poderá ser executada várias vezes quando ocorrerem concorrências com outros threads.</param>
      <param name="transformerArgument" vsli:raw="The argument to pass to &lt;paramref name=&quot;transformer&quot; /&gt;.">O argumento a passar para <paramref name="transformer" />.</param>
      <typeparam name="T" vsli:raw="The type of data.">O tipo de dados.</typeparam>
      <typeparam name="TArg" vsli:raw="The type of argument passed to the &lt;paramref name=&quot;transformer&quot; /&gt;.">O tipo de argumento passado para o <paramref name="transformer" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the location's value is changed by applying the result of the &lt;paramref name=&quot;transformer&quot; /&gt; function; &lt;see langword=&quot;false&quot; /&gt; if the location's value remained the same because the last invocation of &lt;paramref name=&quot;transformer&quot; /&gt; returned the existing value.">
        <see langword="true" /> se o valor do local foi alterado aplicando o resultado da função <paramref name="transformer" />; <see langword="false" /> se o valor do local permaneceu o mesmo porque a última invocação de <paramref name="transformer" /> retornou o valor existente.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Fornece um conjunto de métodos de inicialização para instâncias da classe <see cref="T:System.Collections.Immutable.ImmutableList`1" />.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1">
      <summary vsli:raw="Creates an empty immutable list.">Cria uma lista imutável vazia.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the .">O tipo de itens a serem armazenados no.</typeparam>
      <returns vsli:raw="An empty immutable list.">Uma lista imutável vazia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable list that contains the specified item.">Cria uma nova lista imutável que contém o item especificado.</summary>
      <param name="item" vsli:raw="The item to prepopulate the list with.">O item com o qual preencher previamente a lista.</param>
      <typeparam name="T" vsli:raw="The type of items in the .">O tipo de itens no.</typeparam>
      <returns vsli:raw="A new  that contains the specified item.">Uma nova lista imutável que contém o item especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable list that contains the specified array of items.">Cria uma nova lista imutável que contém a matriz especificada de itens.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the list with.">Uma matriz que contém os itens com os quais preencher previamente a lista.</param>
      <typeparam name="T" vsli:raw="The type of items in the .">O tipo de itens no.</typeparam>
      <returns vsli:raw="A new immutable list that contains the specified items.">Uma nova lista imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateBuilder``1">
      <summary vsli:raw="Creates a new immutable list builder.">Cria um novo construtor de lista imutável.</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">O tipo de itens armazenados pela coleção.</typeparam>
      <returns vsli:raw="The immutable collection builder.">O construtor de coleção imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable list that contains the specified items.">Cria uma nova lista imutável que contém os itens especificados.</summary>
      <param name="items" vsli:raw="The items to add to the list.">Os itens a serem adicionados à lista.</param>
      <typeparam name="T" vsli:raw="The type of items in the .">O tipo de itens no.</typeparam>
      <returns vsli:raw="An immutable list that contains the specified items.">Uma lista imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the list.">Pesquisa o objeto especificado e retorna o índice baseado em zero da primeira ocorrência dentro da lista.</summary>
      <param name="list" vsli:raw="The list to search.">A lista a ser pesquisada.</param>
      <param name="item" vsli:raw="The object to locate in the list. The value can be null for reference types.">O objeto a ser localizado na lista. O valor pode ser nulo para tipos de referência.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">O tipo de itens na lista.</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the list that extends from index to the last element, if found; otherwise, -1.">O índice baseado em zero da primeira ocorrência do item dentro do intervalo de elementos na lista que se estende do índice até o último elemento, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the list.">Pesquisa o objeto especificado e retorna o índice baseado em zero da primeira ocorrência dentro da lista.</summary>
      <param name="list" vsli:raw="The list to search.">A lista a ser pesquisada.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">O objeto a ser localizado na lista imutável. O valor pode ser nulo para tipos de referência.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">O comparador de igualdade a ser usado na pesquisa.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">O tipo de itens na lista.</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that extends from index to the last element, if found; otherwise, -1.">O índice baseado em zero da primeira ocorrência do item dentro do intervalo de elementos na lista Immutable que se estende do índice até o último elemento, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Procura o objeto especificado e retorna o índice baseado em zero da primeira ocorrência dentro do intervalo de elementos na lista imutável que se estende do índice especificado até o último elemento.</summary>
      <param name="list" vsli:raw="The list to search.">A lista a ser pesquisada.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">O objeto a ser localizado na lista imutável. O valor pode ser nulo para tipos de referência.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">O índice inicial com base em zero da pesquisa. 0 (zero) é válido em uma lista vazia.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">O tipo de itens na lista.</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, -1.">O índice baseado em zero da primeira ocorrência do item dentro do intervalo de elementos na lista Immutable que se estende do índice até o último elemento, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Procura o objeto especificado e retorna o índice baseado em zero da primeira ocorrência dentro do intervalo de elementos na lista imutável que se estende do índice especificado até o último elemento.</summary>
      <param name="list" vsli:raw="The list to search.">A lista a ser pesquisada.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">O objeto a ser localizado na lista imutável. O valor pode ser nulo para tipos de referência.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">O índice inicial com base em zero da pesquisa. 0 (zero) é válido em uma lista vazia.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">O número de elementos na seção a ser pesquisada.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">O tipo de itens na lista.</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, -1.">O índice baseado em zero da primeira ocorrência do item dentro do intervalo de elementos na lista Immutable que se estende do índice até o último elemento, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">Pesquisa o objeto especificado e retorna o índice baseado em zero da última ocorrência dentro de toda a lista imutável.</summary>
      <param name="list" vsli:raw="The list to search.">A lista a ser pesquisada.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">O objeto a ser localizado na lista imutável. O valor pode ser nulo para tipos de referência.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">O tipo de itens na lista.</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, -1.">O índice baseado em zero da última ocorrência do item em toda a lista Immutable, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">Pesquisa o objeto especificado e retorna o índice baseado em zero da última ocorrência dentro de toda a lista imutável.</summary>
      <param name="list" vsli:raw="The list to search.">A lista a ser pesquisada.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">O objeto a ser localizado na lista imutável. O valor pode ser nulo para tipos de referência.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">O comparador de igualdade a ser usado na pesquisa.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">O tipo de itens na lista.</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, -1.">O índice baseado em zero da última ocorrência do item em toda a lista Immutable, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Procura o objeto especificado e retorna o índice baseado em zero da última ocorrência dentro do intervalo de elementos na lista imutável que se estende do primeiro elemento ao índice especificado.</summary>
      <param name="list" vsli:raw="The list to search.">A lista a ser pesquisada.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">O objeto a ser localizado na lista imutável. O valor pode ser nulo para tipos de referência.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">O índice inicial com base em zero da pesquisa inversa.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">O tipo de itens na lista.</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, -1.">O índice baseado em zero da última ocorrência do item dentro do intervalo de elementos na lista Immutable que se estende do primeiro elemento até o índice, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Procura o objeto especificado e retorna o índice baseado em zero da última ocorrência dentro do intervalo de elementos na lista imutável que se estende do primeiro elemento ao índice especificado.</summary>
      <param name="list" vsli:raw="The list to search.">A lista a ser pesquisada.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">O objeto a ser localizado na lista imutável. O valor pode ser nulo para tipos de referência.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">O índice inicial com base em zero da pesquisa inversa.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">O número de elementos na seção a ser pesquisada.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">O tipo de itens na lista.</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, -1.">O índice baseado em zero da última ocorrência do item dentro do intervalo de elementos na lista Immutable que se estende do primeiro elemento até o índice, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Removes the specified value from this list.">Remove o valor especificado dessa lista.</summary>
      <param name="list" vsli:raw="The list to search.">A lista a ser pesquisada.</param>
      <param name="value" vsli:raw="The value to remove.">O valor a ser removido.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">O tipo de itens na lista.</typeparam>
      <returns vsli:raw="A new immutable list with the element removed, or this list if the element is not in this list.">Uma nova lista imutável com o elemento removido ou essa lista se o elemento não estiver nela.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Removes the specified values from this list.">Remove os valores especificados dessa lista.</summary>
      <param name="list" vsli:raw="The list to search.">A lista a ser pesquisada.</param>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Os itens a serem removidos se correspondências forem encontradas nessa lista.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">O tipo de itens na lista.</typeparam>
      <returns vsli:raw="A new immutable list with the elements removed.">Uma nova lista imutável com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)">
      <summary vsli:raw="Replaces the first equal element in the list with the specified element.">Substitui o primeiro elemento igual na lista pelo elemento especificado.</summary>
      <param name="list" vsli:raw="The list to search.">A lista a ser pesquisada.</param>
      <param name="oldValue" vsli:raw="The element to replace.">O elemento a ser substituído.</param>
      <param name="newValue" vsli:raw="The element to replace the old element with.">O elemento pelo qual substituir o elemento antigo.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">O tipo de itens na lista.</typeparam>
      <returns vsli:raw="The new list -- even if the value being replaced is equal to the new value for that position.">A nova lista – mesmo que o valor que está sendo substituído seja igual ao novo valor daquela posição.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">Gerado quando o valor antigo não existe na lista.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable list of its contents.">Enumera uma sequência e produz uma lista imutável de seu conteúdo.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">A sequência a ser enumerada.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">O tipo dos elementos na sequência.</typeparam>
      <returns vsli:raw="An immutable list that contains the items in the specified sequence.">Uma lista imutável que contém os itens na sequência especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Immutable.ImmutableList{``0}.Builder)">
      <summary vsli:raw="Creates an immutable list from the current contents of the builder's collection.">Cria uma lista imutável do conteúdo atual da coleção do construtor.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable list from.">O construtor para o qual criar a lista imutável.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the list.">O tipo dos elementos na lista.</typeparam>
      <returns vsli:raw="An immutable list that contains the current contents in the builder's collection.">Cria uma lista imutável preenchida com o conteúdo atual da coleção do construtor.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1">
      <summary vsli:raw="Represents an immutable list, which is a strongly typed list of objects that can be accessed by index.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa uma lista imutável, que é uma lista fortemente tipada de objetos que podem ser acessados por índice.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">O tipo dos elementos na lista.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Add(`0)">
      <summary vsli:raw="Adds the specified object to the end of the immutable list.">Adiciona o objeto especificado ao final da lista imutável.</summary>
      <param name="value" vsli:raw="The object to add.">O objeto a adicionar.</param>
      <returns vsli:raw="A new immutable list with the object added.">Uma nova lista imutável com o objeto adicionado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the elements of the specified collection to the end of the immutable list.">Adiciona os elementos da coleção especificada ao final da lista imutável.</summary>
      <param name="items" vsli:raw="The collection whose elements will be added to the end of the list.">A coleção cujos elementos serão adicionados ao final da lista.</param>
      <returns vsli:raw="A new immutable list with the elements added.">Uma nova lista imutável com os elementos adicionados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)">
      <summary vsli:raw="Searches the entire sorted list for an element using the default comparer and returns the zero-based index of the element.">Pesquisa todo a lista classificada para um elemento usando o comparador padrão e retorna o índice baseado em zero do elemento.</summary>
      <param name="item" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">O objeto a ser localizado. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <returns vsli:raw="The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.ICollection.Count&quot; /&gt;.">O índice baseado em zero do item na Lista classificada, se o item for encontrado; caso contrário, um número negativo que é o complemento bit a bit do índice do próximo elemento que é maior que o item ou, se não houver nenhum elemento maior, o complemento bit a bit de <see cref="P:System.Collections.ICollection.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The default comparer cannot find a comparer implementation of the for type T.">O comparador padrão não é capaz de encontrar uma implementação de comparador para o tipo T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the entire sorted list for an element using the specified comparer and returns the zero-based index of the element.">Pesquisa um elemento em toda a lista classificada usando o comparador especificado e retorna o índice baseado em zero do elemento.</summary>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">O objeto a ser localizado. O valor pode ser nulo para tipos de referência.</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements or null to use the default comparer.">A implementação de comparador a ser usada na comparação de elementos ou nulo para usar o comparador padrão.</param>
      <returns vsli:raw="The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.ICollection.Count&quot; /&gt;.">O índice baseado em zero do item na Lista classificada, se o item for encontrado; caso contrário, um número negativo que é o complemento bit a bit do índice do próximo elemento que é maior que o item ou, se não houver nenhum elemento maior, o complemento bit a bit de <see cref="P:System.Collections.ICollection.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="comparer is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer cannot find an comparer implementation for type T.">O comparador é <see langword="null" /> e o comparador padrão não é capaz de encontrar uma implementação de comparador para o tipo T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches a range of elements in the sorted list for an element using the specified comparer and returns the zero-based index of the element.">Pesquisa um intervalo de elementos na lista classificada para encontrar um elemento que usa o comparador especificado e retorna o índice baseado em zero do elemento.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to search.">O índice baseado em zero inicial do intervalo a ser pesquisado.</param>
      <param name="count" vsli:raw="The length of the range to search.">O tamanho do intervalo a ser procurado.</param>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">O objeto a ser localizado. O valor pode ser nulo para tipos de referência.</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">A implementação de comparador a ser usada na comparação de elementos ou <see langword="null" /> para usar o comparador padrão.</param>
      <returns vsli:raw="The zero-based index of item in the sorted list, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;paramref name=&quot;count&quot; /&gt;.">O índice baseado em zero do item na lista classificada, se o item for encontrado; caso contrário, um número negativo que é o complemento bit a bit do índice do próximo elemento que é maior que o item ou, se não houver nenhum elemento maior, o complemento bit a bit de <paramref name="count" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="index is less than 0 or &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">índice é menor que 0 ou <paramref name="count" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="index and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range in the list.">índice e <paramref name="count" /> não denotam um intervalo válido na lista.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer cannot find an comparer implementation for type T.">O <see langword="null" /> é <paramref name="comparer" /> e o comparador padrão não é capaz de encontrar uma implementação de comparador para o tipo T.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Builder">
      <summary vsli:raw="Represents a list that mutates with little or no memory allocations and that can produce or build on immutable list instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa uma lista que muda com pouca ou nenhuma alocação de memória e que pode produzir ou criar instâncias de lista imutável de maneira muito eficiente.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Add(`0)">
      <summary vsli:raw="Adds an item to the immutable list.">Adiciona um item à lista imutável.</summary>
      <param name="item" vsli:raw="The item to add to the list.">O item a ser adicionado à lista.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds a series of elements to the end of this list.">Adiciona uma série de elementos no final dessa lista.</summary>
      <param name="items" vsli:raw="The elements to add to the end of the list.">Os elementos a serem adicionados ao final da lista.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0)">
      <summary vsli:raw="Searches the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the default comparer and returns the zero-based index of the element.">Pesquisa um elemento em toda a <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> usando o comparador padrão e retorna o índice baseado em zero do elemento.</summary>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">O objeto a ser localizado. O valor pode ser nulo para tipos de referência.</param>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">O índice baseado em zero do item na <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, se o item for encontrado; caso contrário, um número negativo que seja o complemento bit a bit do índice do próximo elemento que for maior que <paramref name="item" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">O comparador padrão <see cref="P:System.Collections.Generic.Comparer`1.Default" /> não consegue encontrar uma implementação da interface genérica <see cref="T:System.IComparable`1" /> ou da interface <see cref="T:System.IComparable" /> para o tipo T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the specified comparer and returns the zero-based index of the element.">Pesquisa um elemento em toda a <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> usando o comparador especificado e retorna o índice baseado em zero do elemento.</summary>
      <param name="item" vsli:raw="The object to locate. This value can be null for reference types.">O objeto a ser localizado. Esse valor pode ser nulo para tipos de referência.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; for the default comparer.">A implementação a ser usada na comparação de elementos ou <see langword="null" /> para o comparador padrão.</param>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">O índice baseado em zero do item na <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, se o item for encontrado; caso contrário, um número negativo que seja o complemento bit a bit do índice do próximo elemento que for maior que <paramref name="item" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">
        <paramref name="comparer" /> é <see langword="null" />, e o comparador padrão <see cref="P:System.Collections.Generic.Comparer`1.Default" /> não pode encontrar uma implementação da interface genérica <see cref="T:System.IComparable`1" /> ou da interface <see cref="T:System.IComparable" /> para o tipo T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the specified range of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the specified comparer and returns the zero-based index of the element.">Pesquisa um elemento no intervalo especificado da <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> usando o comparador especificado e retorna o índice baseado em zero do elemento.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to search.">O índice baseado em zero inicial do intervalo a ser pesquisado.</param>
      <param name="count" vsli:raw="The length of the range to search.">O tamanho do intervalo a ser procurado.</param>
      <param name="item" vsli:raw="The object to locate. This value can be null for reference types.">O objeto a ser localizado. Esse valor pode ser nulo para tipos de referência.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; for the default comparer.">A implementação a ser usada na comparação de elementos ou <see langword="null" /> para o comparador padrão.</param>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">O índice baseado em zero do item na <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, se o item for encontrado; caso contrário, um número negativo que seja o complemento bit a bit do índice do próximo elemento que for maior que <paramref name="item" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" /> é menor que 0.

ou -

<paramref name="count" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> e <paramref name="count" /> não denotam um intervalo válido em <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">
        <paramref name="comparer" /> é <see langword="null" />, e o comparador padrão <see cref="P:System.Collections.Generic.Comparer`1.Default" /> não pode encontrar uma implementação da interface genérica <see cref="T:System.IComparable`1" /> ou da interface <see cref="T:System.IComparable" /> para o tipo T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable list.">Remove todos os itens da lista imutável.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the immutable list contains a specific value.">Determina se a lista imutável contém um valor específico.</summary>
      <param name="item" vsli:raw="The object to locate in the list.">O objeto a ser localizado na lista.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o item for encontrado na lista; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ConvertAll``1(System.Func{`0,``0})">
      <summary vsli:raw="Creates a new immutable list from the list represented by this builder by using the converter function.">Cria uma nova lista imutável com base na lista representada por esse construtor, usando a função de conversor.</summary>
      <param name="converter" vsli:raw="The converter function.">A função de conversor.</param>
      <typeparam name="TOutput" vsli:raw="The type of the output of the delegate converter function.">O tipo da saída da função de conversor de representante.</typeparam>
      <returns vsli:raw="A new immutable list from the list represented by this builder.">Uma nova lista imutável com base na lista representada por este construtor.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[])">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the beginning of the target array.">Copia toda a lista imutável em uma matriz unidimensional compatível, começando pelo início da matriz de destino.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">A matriz unidimensional que é o destino dos elementos copiados da lista imutável. A matriz deve ter indexação com base em zero.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">Copia toda a lista imutável para uma matriz unidimensional compatível, iniciando no índice especificado da matriz de destino.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">A matriz unidimensional que é o destino dos elementos copiados da lista imutável. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in array at which copying begins.">O índice de base zero na matriz no qual a cópia começa.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">Copia toda a lista imutável para uma matriz unidimensional compatível, iniciando no índice especificado da matriz de destino.</summary>
      <param name="index" vsli:raw="The zero-based index in the source immutable list at which copying begins.">O índice baseado em zero na lista imutável de origem em que a cópia começa.</param>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">A matriz unidimensional que é o destino dos elementos copiados da lista imutável. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <param name="count" vsli:raw="The number of elements to copy.">O número de elementos a serem copiados.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements in this immutable list.">Obtém o número de elementos nessa lista imutável.</summary>
      <returns vsli:raw="The number of elements in this list.">O número de elementos nesta lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Exists(System.Predicate{`0})">
      <summary vsli:raw="Determines whether the immutable list contains elements that match the conditions defined by the specified predicate.">Determina se a lista imutável contém elementos que correspondem às condições definidas pelo predicado especificado.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">O delegado que define as condições dos elementos a serem pesquisados.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable list contains one or more elements that match the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a lista imutável contiver um ou mais elementos que correspondem às condições definidas pelo predicado especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Find(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire immutable list.">Pesquisa um elemento que corresponde às condições definidas pelo predicado especificado e retorna a primeira ocorrência em toda a lista imutável.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns vsli:raw="The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">O primeiro elemento que corresponde às condições definidas pelo predicado especificado, se encontrado; caso contrário, o valor padrão para o tipo <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindAll(System.Predicate{`0})">
      <summary vsli:raw="Retrieves all the elements that match the conditions defined by the specified predicate.">Recupera todos os elementos que correspondem às condições definidas pelo predicado especificado.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">O delegado que define as condições dos elementos a serem pesquisados.</param>
      <returns vsli:raw="An immutable list containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty immutable list.">Uma lista imutável contendo todos os elementos que correspondem às condições definidas pelo predicado especificado, se encontrado; caso contrário, uma lista imutável vazia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">Pesquisa um elemento que corresponda às condições definidas pelo predicado especificado e retorna o índice baseado em zero da primeira ocorrência dentro do intervalo de elementos na lista imutável, que começa no índice especificado e contém o número de elementos especificado.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">O índice inicial com base em zero da pesquisa.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">O número de elementos na seção a ser pesquisada.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">O índice baseado em zero da primeira ocorrência de um elemento que corresponde às condições definidas por <paramref name="match" />, se for encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Pesquisa um elemento que corresponda às condições definidas pelo predicado especificado e retorna o índice baseado em zero da primeira ocorrência dentro do intervalo de elementos na lista imutável que se estende do índice especificado ao último elemento.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">O índice inicial com base em zero da pesquisa.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">O índice baseado em zero da primeira ocorrência de um elemento que corresponde às condições definidas por <paramref name="match" />, se for encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire immutable list.">Pesquisa um elemento que corresponde às condições definidas pelo predicado especificado e retorna o índice baseado em zero da primeira ocorrência em toda a lista imutável.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">O índice baseado em zero da primeira ocorrência de um elemento que corresponde às condições definidas por <paramref name="match" />, se for encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLast(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire immutable list.">Pesquisa um elemento que corresponda às condições definidas pelo predicado especificado e retorna a primeira ocorrência em toda a lista imutável.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns vsli:raw="The last element that matches the conditions defined by the specified predicate, found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">O último elemento que corresponde às condições definidas pelo predicado especificado, se encontrado; caso contrário, o valor padrão para o tipo <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">Pesquisa por um elemento que corresponda às condições definidas pelo predicado especificado e retorna o índice baseado em zero da última ocorrência no intervalo de elementos na lista imutável que contém o número de elementos especificado e termina no índice especificado.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">O índice inicial com base em zero da pesquisa inversa.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">O número de elementos na seção a ser pesquisada.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">O índice de base zero da última ocorrência de um elemento que corresponde às condições definidas por <paramref name="match" />, se for encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Pesquisa um elemento que corresponde às condições definidas pelo predicado especificado e retorna o índice baseado em zero da última ocorrência dentro do intervalo de elementos na lista imutável que se estende do primeiro elemento ao índice especificado.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">O índice inicial com base em zero da pesquisa inversa.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">O índice de base zero da última ocorrência de um elemento que corresponde às condições definidas por <paramref name="match" />, se for encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire immutable list.">Pesquisa um elemento que corresponde às condições definidas pelo predicado especificado e retorna o índice baseado em zero da última ocorrência em toda a lista imutável.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">O índice de base zero da última ocorrência de um elemento que corresponde às condições definidas por <paramref name="match" />, se for encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ForEach(System.Action{`0})">
      <summary vsli:raw="Performs the specified action on each element of the list.">Executa a ação especificada em cada elemento da lista.</summary>
      <param name="action" vsli:raw="The delegate to perform on each element of the list.">O delegado a ser executado em cada elemento da lista.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retorna um enumerador que itera pela coleção.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">Um enumerador que pode ser usado para iterar na lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetRange(System.Int32,System.Int32)">
      <summary vsli:raw="Creates a shallow copy of a range of elements in the source immutable list.">Cria uma cópia superficial de um intervalo de elementos na lista imutável de origem.</summary>
      <param name="index" vsli:raw="The zero-based index at which the range starts.">O índice baseado em zero no qual é iniciado o intervalo.</param>
      <param name="count" vsli:raw="The number of elements in the range.">O número de elementos no intervalo.</param>
      <returns vsli:raw="A shallow copy of a range of elements in the source immutable list.">Uma cópia superficial de um intervalo de elementos na lista imutável de origem.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list.">Pesquisa o objeto especificado e retorna o índice baseado em zero da primeira ocorrência dentro do intervalo de elementos na lista imutável.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">O objeto a ser localizado na lista imutável. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list, if found; otherwise, -1.">O índice baseado em zero da primeira ocorrência de <paramref name="item" /> dentro do intervalo de elementos na lista imutável, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Procura o objeto especificado e retorna o índice baseado em zero da primeira ocorrência dentro do intervalo de elementos na lista imutável que se estende do índice especificado até o último elemento.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">O objeto a ser localizado na lista imutável. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">O índice inicial com base em zero da pesquisa. 0 (zero) é válido em uma lista vazia.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that extends from &lt;paramref name=&quot;index&quot; /&gt; to the last element, if found; otherwise, -1.">O índice baseado em zero da primeira ocorrência do item dentro do intervalo de elementos na lista imutável que se estende do <paramref name="index" /> até o último elemento, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">Pesquisa o objeto especificado e retorna o índice baseado em zero da primeira ocorrência em um intervalo de elementos na lista imutável que começa no índice especificado e contém o número de elementos especificado.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">O objeto a ser localizado na lista imutável. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">O índice inicial com base em zero da pesquisa. 0 (zero) é válido em uma lista vazia.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">O número de elementos na seção a ser pesquisada.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1.">O índice baseado em zero da primeira ocorrência do item no intervalo de elementos na lista imutável que começa em <paramref name="index" /> e contém a <paramref name="count" /> de número de elementos, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; that starts at the specified index and contains the specified number of elements.">Pesquisa o objeto especificado e retorna o índice baseado em zero da primeira ocorrência em um intervalo de elementos no <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> que começa no índice especificado e contém o número de elementos especificado.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">O objeto a ser localizado na lista imutável. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">O índice inicial com base em zero da pesquisa. 0 (zero) é válido em uma lista vazia.</param>
      <param name="count" vsli:raw="The number of elements to search.">O número de elementos a serem pesquisados.</param>
      <param name="equalityComparer" vsli:raw="The value comparer to use for comparing elements for equality.">O comparador de valor a ser usado para comparar a igualdade de elementos.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1">O índice baseado em zero da primeira ocorrência do item no intervalo de elementos na lista imutável que começa em <paramref name="index" /> e contém a <paramref name="count" /> de número de elementos, se encontrado; caso contrário, -1</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item to the immutable list at the specified index.">Insere um item na lista imutável no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">O índice de base zero no qual o <paramref name="item" /> deve ser inserido.</param>
      <param name="item" vsli:raw="The object to insert into the immutable list.">O objeto a ser inserido na lista imutável.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the elements of a collection into the immutable list at the specified index.">Insere os elementos de uma coleção na lista imutável no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index at which the new elements should be inserted.">O índice baseado em zero no qual os novos elementos devem ser inseridos.</param>
      <param name="items" vsli:raw="The collection whose elements should be inserted into the immutable list. The collection itself cannot be &lt;see langword=&quot;null&quot; /&gt;, but it can contain elements that are null, if type &lt;c&gt;T&lt;/c&gt; is a reference type.">A coleção cujos elementos devem ser inseridos na lista imutável. A coleção em si não pode ser <see langword="null" />, mas pode conter elementos que sejam nulos se o tipo <c>T</c> for um tipo de referência.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the value for a given index in the list.">Obtém ou define o valor de um determinado índice na lista.</summary>
      <param name="index" vsli:raw="The index of the item to get or set.">O índice do item a ser obtido ou definido.</param>
      <returns vsli:raw="The value at the specified index.">O valor no índice especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the value for a given &lt;paramref name=&quot;index&quot; /&gt; into the list.">Obtém uma referência somente leitura ao valor de <paramref name="index" /> determinado na lista.</summary>
      <param name="index" vsli:raw="The index of the desired element.">O índice do elemento desejado.</param>
      <returns vsli:raw="A read-only reference to the value at the specified &lt;paramref name=&quot;index&quot; /&gt;.">Uma referência somente leitura ao valor no <paramref name="index" /> especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">Pesquisa o objeto especificado e retorna o índice baseado em zero da última ocorrência dentro de toda a lista imutável.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">O objeto a ser localizado na lista imutável. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the entire immutable list, if found; otherwise, -1.">O índice baseado em zero da última ocorrência de <paramref name="item" /> em toda a lista imutável, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Procura o objeto especificado e retorna o índice baseado em zero da última ocorrência dentro do intervalo de elementos na lista imutável que se estende do primeiro elemento ao índice especificado.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">O objeto a ser localizado na lista imutável. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">O índice inicial com base em zero da pesquisa inversa.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list that extends from the first element to &lt;paramref name=&quot;index&quot; /&gt;, if found; otherwise, -1.">O índice baseado em zero da última ocorrência de <paramref name="item" /> dentro do intervalo de elementos na lista imutável que se estende do primeiro elemento até <paramref name="index" />, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">Pesquisa o objeto especificado e retorna o índice baseado em zero da última ocorrência no intervalo de elementos na lista imutável que contém o número de elementos especificado e termina no índice especificado.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">O objeto a ser localizado na lista imutável. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">O índice inicial com base em zero da pesquisa inversa.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">O número de elementos na seção a ser pesquisada.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list that contains &lt;paramref name=&quot;count&quot; /&gt; number of elements and ends at &lt;paramref name=&quot;index&quot; /&gt;, if found; otherwise, -1.">O índice baseado em zero da última ocorrência de <paramref name="item" /> dentro do intervalo de elementos na lista imutável que contém a <paramref name="count" /> de número de elementos e termina no <paramref name="index" />, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">Pesquisa o objeto especificado e retorna o índice baseado em zero da última ocorrência no intervalo de elementos na lista imutável que contém o número de elementos especificado e termina no índice especificado.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">O objeto a ser localizado na lista imutável. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">O índice inicial com base em zero da pesquisa. 0 (zero) é válido em uma lista vazia.</param>
      <param name="count" vsli:raw="The number of elements to search.">O número de elementos a serem pesquisados.</param>
      <param name="equalityComparer" vsli:raw="The value comparer to use for comparing elements for equality.">O comparador de valor a ser usado para comparar a igualdade de elementos.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1">O índice baseado em zero da primeira ocorrência do item no intervalo de elementos na lista imutável que começa em <paramref name="index" /> e contém a <paramref name="count" /> de número de elementos, se encontrado; caso contrário, -1</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">Remove a primeira ocorrência de um objeto específico da lista imutável.</summary>
      <param name="item" vsli:raw="The object to remove from the list.">O objeto a ser removido da lista.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item was successfully removed from the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if item is not found in the list.">
        <see langword="true" /> se o item tiver sido removido com êxito da lista; caso contrário, <see langword="false" />. Esse método também retornará <see langword="false" /> se o item não for encontrado na lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">Remove todos os elementos que correspondem às condições definidas pelo predicado especificado.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">O delegado que define as condições dos elementos a serem removidos.</param>
      <returns vsli:raw="The number of elements removed from the immutable list.">O número de elementos removidos da lista imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the immutable list.">Remove o item no índice especificado da lista imutável.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove from the list.">O índice baseado em zero do item a ser removido da lista.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse">
      <summary vsli:raw="Reverses the order of the elements in the entire immutable list.">Inverte a ordem dos elementos em toda a lista imutável.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse(System.Int32,System.Int32)">
      <summary vsli:raw="Reverses the order of the elements in the specified range of the immutable list.">Inverte a ordem dos elementos no intervalo especificado da lista imutável.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to reverse.">O índice inicial baseado em zero do intervalo a ser revertido.</param>
      <param name="count" vsli:raw="The number of elements in the range to reverse.">O número de elementos no intervalo a serem revertidos.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the default comparer.">Classifica os elementos em toda a lista imutável usando o comparador padrão.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the specified comparer.">Classifica os elementos em toda a lista imutável usando o comparador especificado.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">A implementação a ser usada na comparação de elementos ou <see langword="null" /> para usar o comparador padrão (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the specified comparison object.">Classifica os elementos em toda a lista imutável usando o objeto de comparação especificado.</summary>
      <param name="comparison" vsli:raw="The object to use when comparing elements.">O objeto a ser usado na comparação de elementos.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparison" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in a range of elements in the immutable list  by using the specified comparer.">Classifica os elementos em um intervalo de elementos na lista imutável usando o comparador especificado.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to sort.">O índice inicial baseado em zero do intervalo a ser classificado.</param>
      <param name="count" vsli:raw="The length of the range to sort.">O tamanho do intervalo a ser classificado.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">A implementação a ser usada na comparação de elementos ou <see langword="null" /> para usar o comparador padrão (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether this instance is read-only.">Obtém um valor que indica se esta instância é somente leitura.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;.">
        <c>é sempre</c>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retorna um enumerador que itera pela coleção.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Um enumerador que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the list to an array, starting at a particular array index.">Copia os elementos da lista em uma matriz, começando em um índice de matriz específico.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the list. The array must have zero-based indexing.">A matriz unidimensional que é o destino dos elementos copiados da lista. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtém um valor que indica se o acesso ao <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso o acesso ao <see cref="T:System.Collections.ICollection" /> seja sincronizado (thread-safe); do contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retorna um enumerador que itera pela coleção.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Um enumerador que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the list.">Adiciona um item à lista.</summary>
      <param name="value" vsli:raw="The object to add to the list.">O objeto a ser adicionado à lista.</param>
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.">A posição na qual o novo elemento foi inserido, ou -1 para indicar que o item não foi inserido na coleção.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the list.">Remove todos os itens da lista.</summary>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the list contains a specific value.">Determina se a lista contém um valor específico.</summary>
      <param name="value" vsli:raw="The object to locate in the list.">O objeto a ser localizado na lista.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Object" /> for encontrado na lista; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the list.">Determina o índice de um item específico na lista.</summary>
      <param name="value" vsli:raw="The object to locate in the list.">O objeto a ser localizado na lista.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">O índice de <paramref name="value" /> se encontrado na lista; caso contrário, -1.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item to the list at the specified index.">Insere um item na lista no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">O índice de base zero no qual o <paramref name="value" /> deve ser inserido.</param>
      <param name="value" vsli:raw="The object to insert into the list.">O objeto a ser inserido na lista.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">Obtém um valor que indica se o <see cref="T:System.Collections.IList" /> tem um tamanho fixo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.IList" /> tiver um valor fixo; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">Obtém ou define o <see cref="T:System.Object" /> no índice especificado.</summary>
      <param name="index" vsli:raw="The index.">O índice.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the list.">Remove a primeira ocorrência de um objeto específico da lista.</summary>
      <param name="value" vsli:raw="The object to remove from the list.">O objeto a ser removido da lista.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable list based on the contents of this instance.">Cria uma lista imutável de acordo com o conteúdo dessa instância.</summary>
      <returns vsli:raw="An immutable list.">Uma lista imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.TrueForAll(System.Predicate{`0})">
      <summary vsli:raw="Determines whether every element in the immutable list matches the conditions defined by the specified predicate.">Determina se cada elemento da lista imutável coincide com as condições definidas pelo predicado especificado.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions to check against the elements.">O delegado que define as condições a serem verificadas nos elementos.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element in the immutable list matches the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If the list has no elements, the return value is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> se cada elemento da lista imutável corresponder às condições definidas pelo predicado especificado; caso contrário, <see langword="false" />. Se a lista não tiver elementos, o valor retornado será <see langword="true" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Clear">
      <summary vsli:raw="Removes all elements from the immutable list.">Remove todos os elementos da lista imutável.</summary>
      <returns vsli:raw="An empty list that retains the same sort or unordered semantics that this instance has.">Uma lista vazia que mantém a mesma classificação ou semântica não ordenada que esta instância tem.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable list contains the specified value.">Determina se esta lista imutável contém o valor especificado.</summary>
      <param name="value" vsli:raw="The value to locate.">O valor a ser localizado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a lista contém o valor especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})">
      <summary vsli:raw="Converts the elements in the current immutable list to another type, and returns a list containing the converted elements.">Converte os elementos na lista imutável atual em outro tipo e retorna uma lista contendo os elementos convertidos.</summary>
      <param name="converter" vsli:raw="A delegate that converts each element from one type to another type.">Um delegado que converte cada elemento de um tipo em outro tipo.</param>
      <typeparam name="TOutput" vsli:raw="The type of the elements of the target array.">O tipo dos elementos da matriz de destino.</typeparam>
      <returns vsli:raw="A list of the target type containing the converted elements from the current &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt;.">Uma lista do tipo de destino que contém os elementos convertidos da <see cref="T:System.Collections.Immutable.ImmutableList`1" /> atual.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the beginning of the target array.">Copia toda a lista imutável em uma matriz unidimensional compatível, começando pelo início da matriz de destino.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">A matriz unidimensional que é o destino dos elementos copiados da lista imutável. A matriz deve ter indexação com base em zero.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">Copia toda a lista imutável para uma matriz unidimensional compatível, iniciando no índice especificado da matriz de destino.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">A matriz unidimensional que é o destino dos elementos copiados da lista imutável. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies a range of elements from the immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">Copia um intervalo de elementos da lista imutável para uma matriz unidimensional compatível, começando pelo índice especificado da matriz de destino.</summary>
      <param name="index" vsli:raw="The zero-based index in the source immutable list at which copying begins.">O índice baseado em zero na lista imutável de origem em que a cópia começa.</param>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">A matriz unidimensional que é o destino dos elementos copiados da lista imutável. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in array at which copying begins.">O índice de base zero na matriz no qual a cópia começa.</param>
      <param name="count" vsli:raw="The number of elements to copy.">O número de elementos a serem copiados.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the list.">Obtém o número de elementos contidos na lista.</summary>
      <returns vsli:raw="The number of elements in the list.">O número de elementos na lista.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableList`1.Empty">
      <summary vsli:raw="Gets an empty immutable list.">Obtém um conjunto vazio com o comparador de classificação padrão.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Enumera o conteúdo de uma árvore binária.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtém o elemento na posição atual do enumerador.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">O elemento na posição atual do enumerador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Enumerator&quot; /&gt; class.">Libera os recursos usados pela instância atual da classe <see cref="T:System.Collections.Immutable.ImmutableList`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances enumeration to the next element of the immutable list.">Avança a enumeração para o próximo elemento da lista imutável.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the list.">
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final da lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable list.">Define o enumerador com sua posição inicial, que é antes do primeiro elemento da lista imutável.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">O elemento atual.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})">
      <summary vsli:raw="Determines whether the immutable list contains elements that match the conditions defined by the specified predicate.">Determina se a lista imutável contém elementos que correspondem às condições definidas pelo predicado especificado.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">O delegado que define as condições dos elementos a serem pesquisados.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable list contains one or more elements that match the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a lista imutável contiver um ou mais elementos que correspondem às condições definidas pelo predicado especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire immutable list.">Pesquisa um elemento que corresponde às condições definidas pelo predicado especificado e retorna a primeira ocorrência em toda a lista imutável.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns vsli:raw="The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">O primeiro elemento que corresponde às condições definidas pelo predicado especificado, se encontrado; caso contrário, o valor padrão para o tipo <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})">
      <summary vsli:raw="Retrieves all the elements that match the conditions defined by the specified predicate.">Recupera todos os elementos que correspondem às condições definidas pelo predicado especificado.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">O delegado que define as condições dos elementos a serem pesquisados.</param>
      <returns vsli:raw="An immutable list that contains all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty immutable list.">Uma lista imutável que contém todos os elementos que correspondem às condições definidas pelo predicado especificado, se encontrado; caso contrário, uma lista imutável vazia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">Pesquisa um elemento que corresponda às condições definidas pelo predicado especificado e retorna o índice baseado em zero da primeira ocorrência dentro do intervalo de elementos na lista imutável, que começa no índice especificado e contém o número de elementos especificado.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">O índice inicial com base em zero da pesquisa.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">O número de elementos na seção a ser pesquisada.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.">O índice baseado em zero da primeira ocorrência de um elemento que corresponde às condições definidas por correspondência, se for encontrado; caso contrário, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Pesquisa um elemento que corresponda às condições definidas pelo predicado especificado e retorna o índice baseado em zero da primeira ocorrência dentro do intervalo de elementos na lista imutável que se estende do índice especificado ao último elemento.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">O índice inicial com base em zero da pesquisa.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.">O índice baseado em zero da primeira ocorrência de um elemento que corresponde às condições definidas por correspondência, se for encontrado; caso contrário, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire immutable list.">Pesquisa um elemento que corresponde às condições definidas pelo predicado especificado e retorna o índice baseado em zero da primeira ocorrência em toda a lista imutável.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, -1.">O índice baseado em zero da primeira ocorrência de um elemento que corresponde às condições definidas por correspondência, se for encontrado; caso contrário, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire immutable list.">Pesquisa um elemento que corresponda às condições definidas pelo predicado especificado e retorna a primeira ocorrência em toda a lista imutável.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns vsli:raw="The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">O último elemento que corresponde às condições definidas pelo predicado especificado, se encontrado; caso contrário, o valor padrão para o tipo <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">Pesquisa por um elemento que corresponda às condições definidas pelo predicado especificado e retorna o índice baseado em zero da última ocorrência no intervalo de elementos na lista imutável que contém o número de elementos especificado e termina no índice especificado.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">O índice inicial com base em zero da pesquisa inversa.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">O número de elementos na seção a ser pesquisada.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">O índice baseado em zero da última ocorrência de um elemento que corresponde às condições definidas por <paramref name="match" />, se for encontrado; caso contrário, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Pesquisa um elemento que corresponde às condições definidas pelo predicado especificado e retorna o índice baseado em zero da última ocorrência dentro do intervalo de elementos na lista imutável que se estende do primeiro elemento ao índice especificado.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">O índice inicial com base em zero da pesquisa inversa.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">O índice baseado em zero da última ocorrência de um elemento que corresponde às condições definidas por <paramref name="match" />, se for encontrado; caso contrário, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire immutable list.">Pesquisa um elemento que corresponde às condições definidas pelo predicado especificado e retorna o índice baseado em zero da última ocorrência em toda a lista imutável.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">O índice baseado em zero da última ocorrência de um elemento que corresponde às condições definidas por <paramref name="match" />, se for encontrado; caso contrário, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})">
      <summary vsli:raw="Performs the specified action on each element of the immutable list.">Executa a ação especificada em cada elemento da lista imutável.</summary>
      <param name="action" vsli:raw="The delegate to perform on each element of the immutable list.">O delegado a ser executado em cada elemento da lista imutável.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">Retorna um enumerador que itera na lista imutável.</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the immutable list.">Um enumerador que pode ser usado para iterar na lista imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)">
      <summary vsli:raw="Creates a shallow copy of a range of elements in the source immutable list.">Cria uma cópia superficial de um intervalo de elementos na lista imutável de origem.</summary>
      <param name="index" vsli:raw="The zero-based index at which the range starts.">O índice baseado em zero no qual é iniciado o intervalo.</param>
      <param name="count" vsli:raw="The number of elements in the range.">O número de elementos no intervalo.</param>
      <returns vsli:raw="A shallow copy of a range of elements in the source immutable list.">Uma cópia superficial de um intervalo de elementos na lista imutável de origem.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the entire immutable list.">Pesquisa o objeto especificado e retorna o índice baseado em zero da primeira ocorrência dentro de toda a lista imutável.</summary>
      <param name="value" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">O objeto a ser localizado na lista imutável. O valor pode ser <c>nulo</c> para tipos de referência.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;value&quot; /&gt; within the entire immutable list, if found; otherwise, ?1.">O índice baseado em zero da primeira ocorrência de <paramref name="value" /> em toda a lista imutável, se encontrado; caso contrário, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the list that starts at the specified index and contains the specified number of elements.">Pesquisa o objeto especificado e retorna o índice baseado em zero da primeira ocorrência em um intervalo de elementos na lista que começa no índice especificado e contém o número de elementos especificado.</summary>
      <param name="item" vsli:raw="The object to locate in the list The value can be null for reference types.">O objeto a ser localizado na lista; o valor pode ser nulo para tipos de referência.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">O índice inicial com base em zero da pesquisa. 0 (zero) é válido em uma lista vazia.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">O número de elementos na seção a ser pesquisada.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">O comparador de igualdade a ser usado na pesquisa.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the list that starts at index and contains count number of elements, if found; otherwise, -1.">O índice baseado em zero da primeira ocorrência do item no intervalo de elementos na lista que começa no índice e contém a contagem de número de elementos, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified object into the immutable list at the specified index.">Insere o objeto especificado na lista imutável no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the object.">O índice baseado em zero no qual inserir o objeto.</param>
      <param name="item" vsli:raw="The object to insert.">O objeto a ser inserido.</param>
      <returns vsli:raw="The new immutable list after the object is inserted.">A nova lista imutável depois que o objeto é inserido.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the elements of a collection into the immutable list at the specified index.">Insere os elementos de uma coleção na lista imutável no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the elements.">O índice baseado em zero no qual inserir os elementos.</param>
      <param name="items" vsli:raw="The collection whose elements should be inserted.">A coleção cujos elementos devem ser inseridos.</param>
      <returns vsli:raw="The new immutable list after the elements are inserted.">A nova lista imutável depois que os elementos foram inseridos.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this list is empty.">Obtém um valor que indica se essa lista está vazia.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />se a lista estiver vazia; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index of the list.">Obtém o elemento no índice especificado da lista.</summary>
      <param name="index" vsli:raw="The index of the element to retrieve.">O índice do elemento a ser recuperado.</param>
      <returns vsli:raw="The element at the specified index.">O elemento no índice especificado.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="In a get operation, &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">Em uma operação get, <paramref name="index" /> é negativo ou não menor que <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">Obtém uma referência somente leitura ao elemento do conjunto no <paramref name="index" /> especificado.</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">O índice baseado em zero do elemento no conjunto a ser retornado.</param>
      <returns vsli:raw="A read-only reference to the element at the given position.">Uma referência somente leitura ao elemento na posição especificada.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">
        <paramref name="index" /> é negativo ou não é menor que <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the list that contains the specified number of elements and ends at the specified index.">Pesquisa o objeto especificado e retorna o índice baseado em zero da última ocorrência no intervalo de elementos na lista que contém o número de elementos especificado e termina no índice especificado.</summary>
      <param name="item" vsli:raw="The object to locate in the list. The value can be null for reference types.">O objeto a ser localizado na lista. O valor pode ser nulo para tipos de referência.</param>
      <param name="index" vsli:raw="The zero-based starting index of the backward search.">O índice inicial com base em zero da pesquisa inversa.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">O número de elementos na seção a ser pesquisada.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">O comparador de igualdade a ser usado na pesquisa.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the list that contains count number of elements and ends at index, if found; otherwise, -1.">O índice baseado em zero da última ocorrência do item dentro do intervalo de elementos na lista que contém a contagem de número de elementos e termina no índice, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of the specified object from this immutable list.">Remove a primeira ocorrência do objeto especificado dessa lista imutável.</summary>
      <param name="value" vsli:raw="The object to remove.">O objeto a ser removido.</param>
      <returns vsli:raw="A new list with the object removed, or this list if the specified object is not in this list.">Uma nova lista com o objeto removido ou essa lista se o objeto especificado não estiver nessa lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the first occurrence of the object that matches the specified value from this immutable list.">Remove a primeira ocorrência do objeto que corresponde ao valor especificado dessa lista imutável.</summary>
      <param name="value" vsli:raw="The value of the element to remove from the list.">O valor do elemento a ser removido da lista.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">O comparador de igualdade a ser usado na pesquisa.</param>
      <returns vsli:raw="A new list with the object removed, or this list if the specified object is not in this list.">Uma nova lista com o objeto removido ou essa lista se o objeto especificado não estiver nessa lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">Remove todos os elementos que correspondem às condições definidas pelo predicado especificado.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">O delegado que define as condições dos elementos a serem removidos.</param>
      <returns vsli:raw="The new list with the elements removed.">A nova lista com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index.">Remove o elemento no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">O índice de base zero do elemento a ser removido.</param>
      <returns vsli:raw="A new list with the element removed.">Uma nova lista com o elemento removido.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes a range of elements from this immutable list.">Remove um intervalo de elementos dessa lista imutável.</summary>
      <param name="items" vsli:raw="The collection whose elements should be removed if matches are found in this list.">A coleção cujos elementos devem ser removidos se correspondências forem encontradas nessa lista.</param>
      <returns vsli:raw="A new list with the elements removed.">Uma nova lista com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified values from this list.">Remove os valores especificados dessa lista.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Os itens a serem removidos se correspondências forem encontradas nessa lista.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">O comparador de igualdade a ser usado na pesquisa.</param>
      <returns vsli:raw="A new list with the elements removed.">Uma nova lista com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes a range of elements, starting from the specified index and containing the specified number of elements, from this immutable list.">Remove um intervalo de elementos dessa lista imutável, começando pelo índice especificado e que contém o número especificado de elementos.</summary>
      <param name="index" vsli:raw="The starting index to begin removal.">O índice inicial para iniciar a remoção.</param>
      <param name="count" vsli:raw="The number of elements to remove.">O número de elementos a serem removidos.</param>
      <returns vsli:raw="A new list with the elements removed.">Uma nova lista com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)">
      <summary vsli:raw="Replaces the specified element in the immutable list with a new element.">Substitui o elemento especificado na lista imutável por um novo elemento.</summary>
      <param name="oldValue" vsli:raw="The element to replace.">O elemento a ser substituído.</param>
      <param name="newValue" vsli:raw="The element to replace &lt;paramref name=&quot;oldValue&quot; /&gt; with.">O elemento com o qual substituir <paramref name="oldValue" />.</param>
      <returns vsli:raw="The new list with the replaced element, even if it is equal to the old element.">A nova lista com o elemento substituído, mesmo que ele seja igual ao elemento antigo.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the immutable list.">
        <paramref name="oldValue" /> não existe na lista imutável.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Replaces the specified element in the immutable list with a new element.">Substitui o elemento especificado na lista imutável por um novo elemento.</summary>
      <param name="oldValue" vsli:raw="The element to replace in the list.">O elemento a ser substituído na lista.</param>
      <param name="newValue" vsli:raw="The element to replace &lt;paramref name=&quot;oldValue&quot; /&gt; with.">O elemento com o qual substituir <paramref name="oldValue" />.</param>
      <param name="equalityComparer" vsli:raw="The comparer to use to check for equality.">O comparador a ser usado para verificar quanto à igualdade.</param>
      <returns vsli:raw="A new list with the object replaced, or this list if the specified object is not in this list.">Uma nova lista com o objeto substituído ou essa lista se o objeto especificado não estiver nessa lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse">
      <summary vsli:raw="Reverses the order of the elements in the entire immutable list.">Inverte a ordem dos elementos em toda a lista imutável.</summary>
      <returns vsli:raw="The reversed list.">A lista invertida.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)">
      <summary vsli:raw="Reverses the order of the elements in the specified range of the immutable list.">Inverte a ordem dos elementos no intervalo especificado da lista imutável.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to reverse.">O índice inicial baseado em zero do intervalo a ser revertido.</param>
      <param name="count" vsli:raw="The number of elements in the range to reverse.">O número de elementos no intervalo a serem revertidos.</param>
      <returns vsli:raw="The reversed list.">A lista invertida.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element at a given position in the immutable list with the specified element.">Substitui um elemento em uma posição especificada na lista imutável pelo elemento especificado.</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">A posição na lista do elemento a ser substituído.</param>
      <param name="value" vsli:raw="The element to replace the old element with.">O elemento pelo qual substituir o elemento antigo.</param>
      <returns vsli:raw="The new list with the replaced element, even if it is equal to the old element at that position.">A nova lista com o elemento substituído, mesmo que ele seja igual ao elemento antigo naquela posição.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the default comparer.">Classifica os elementos em toda a lista imutável usando o comparador padrão.</summary>
      <returns vsli:raw="The sorted list.">A lista classificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the specified comparer.">Classifica os elementos em toda a lista imutável usando o comparador especificado.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">A implementação a ser usada na comparação de elementos ou <see langword="null" /> para usar o comparador padrão (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
      <returns vsli:raw="The sorted list.">A lista classificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the specified comparer.">Classifica os elementos em toda a lista imutável usando o comparador especificado.</summary>
      <param name="comparison" vsli:raw="The delegate to use when comparing elements.">O delegado a ser usado na comparação de elementos.</param>
      <returns vsli:raw="The sorted list.">A lista classificada.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparison" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts a range of elements in the immutable list using the specified comparer.">Classifica um intervalo de elementos na lista imutável usando o comparador especificado.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to sort.">O índice inicial baseado em zero do intervalo a ser classificado.</param>
      <param name="count" vsli:raw="The length of the range to sort.">O tamanho do intervalo a ser classificado.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">A implementação a ser usada na comparação de elementos ou <see langword="null" /> para usar o comparador padrão (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
      <returns vsli:raw="The sorted list.">A lista classificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds the specified item to the immutable list.">Adiciona o item especificado à lista imutável.</summary>
      <param name="item" vsli:raw="The item to add.">O item a ser adicionado.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all items from the immutable list.">Remove todos os itens da lista imutável.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">Remove a primeira ocorrência de um objeto específico da lista imutável.</summary>
      <param name="item" vsli:raw="The object to remove.">O objeto a ser removido.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the original list.">
        <see langword="true" /> se <paramref name="item" /> tiver sido removido com êxito da lista; caso contrário, <see langword="false" />. Esse método também retornará <see langword="false" /> se o <paramref name="item" /> não for encontrado na lista original.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">Retorna um enumerador que itera na lista imutável.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">Um enumerador que pode ser usado para iterar na lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an object in the immutable list at the specified index.">Insere um objeto na lista imutável no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">O índice de base zero no qual o <paramref name="item" /> deve ser inserido.</param>
      <param name="item" vsli:raw="The object to insert.">O objeto a ser inserido.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the value at the specified index.">Obtém ou define o valor no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to access." />
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="Thrown from getter when &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">Gerado de getter quando <paramref name="index" /> for negativo ou não for menor que <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">Sempre lançado de setter.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the value at the specified index.">Remove o valor no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">O índice com base em zero do item a ser removido.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified array index.">Copia toda a lista imutável para uma matriz unidimensional compatível, iniciando no índice especificado da matriz.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from immutable list.">A matriz unidimensional que é o destino dos elementos copiados da lista imutável.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="This type is immutable, so it is always thread-safe. See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">Consulte a interface <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Consulte <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">Retorna um enumerador que itera na lista imutável.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">Um enumerador que pode ser usado para iterar na lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the immutable list.">Adiciona um item à lista imutável.</summary>
      <param name="value" vsli:raw="The object to add to the list.">O objeto a ser adicionado à lista.</param>
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the list.">A posição na qual o novo elemento foi inserido ou -1 para indicar que o item não foi inserido na lista.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Sempre lançada.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the immutable list.">Remove todos os itens da lista imutável.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Sempre lançada.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable list contains a specific value.">Determina se a lista imutável contém um valor específico.</summary>
      <param name="value" vsli:raw="The object to locate in the list.">O objeto a ser localizado na lista.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o objeto for encontrado na lista; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the immutable list.">Determina o índice de um item específico na lista imutável.</summary>
      <param name="value" vsli:raw="The object to locate in the list.">O objeto a ser localizado na lista.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">O índice de <paramref name="value" /> se encontrado na lista; caso contrário, -1.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the immutable list at the specified index.">Insere um item na lista imutável no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">O índice de base zero no qual o <paramref name="value" /> deve ser inserido.</param>
      <param name="value" vsli:raw="The object to insert into the list.">O objeto a ser inserido na lista.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Sempre lançada.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">Obtém um valor que indica se o <see cref="T:System.Collections.IList" /> tem um tamanho fixo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.IList" /> tiver um valor fixo; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">Obtém ou define o <see cref="T:System.Object" /> no índice especificado.</summary>
      <param name="index" vsli:raw="The index.">O índice.</param>
      <returns vsli:raw="The value at the specified index.">O valor no índice especificado.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="Thrown from getter when &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">Gerado de getter quando <paramref name="index" /> for negativo ou não for menor que <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">Sempre lançado de setter.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">Remove a primeira ocorrência de um objeto específico da lista imutável.</summary>
      <param name="value" vsli:raw="The object to remove from the list.">O objeto a ser removido da lista.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Sempre lançada.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the immutable list.">Remove o item no índice especificado da lista imutável.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">O índice com base em zero do item a ser removido.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Sempre lançada.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary vsli:raw="Adds the specified value to this immutable list.">Adiciona o valor especificado a essa lista imutável.</summary>
      <param name="value" vsli:raw="The value to add.">O valor a ser adicionado.</param>
      <returns vsli:raw="A new list with the element added.">Uma nova lista com o elemento adicionado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the specified values to this immutable list.">Adiciona os valores especificados a essa lista imutável.</summary>
      <param name="items" vsli:raw="The values to add.">Os valores a serem adicionados.</param>
      <returns vsli:raw="A new list with the elements added.">Uma nova lista com os elementos adicionados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary vsli:raw="Retrieves an empty list that has the same sorting and ordering semantics as this instance.">Recupera uma lista vazia que tem as mesmas semânticas de classificação e ordenação que essa instância.</summary>
      <returns vsli:raw="An empty list that has the same sorting and ordering semantics as this instance.">Uma lista vazia que tem as mesmas semânticas de classificação e ordenação que essa instância.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified element at the specified index in the immutable list.">Insere o elemento especificado no índice especificado na lista imutável.</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">O índice no qual inserir o valor.</param>
      <param name="item" vsli:raw="The element to insert.">O elemento a ser inserido.</param>
      <returns vsli:raw="A new immutable list that includes the specified element.">Uma nova lista imutável que inclui o elemento especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified elements at the specified index in the immutable list.">Insere os elementos especificados no índice especificado na lista imutável.</summary>
      <param name="index" vsli:raw="The index at which to insert the elements.">O índice no qual inserir os elementos.</param>
      <param name="items" vsli:raw="The elements to insert.">Os elementos a serem inseridos.</param>
      <returns vsli:raw="A new immutable list that includes the specified elements.">Uma nova lista imutável que inclui os elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the element with the specified value from the list.">Remove o elemento com o valor especificado da lista.</summary>
      <param name="value" vsli:raw="The value of the element to remove from the list.">O valor do elemento a ser removido da lista.</param>
      <param name="equalityComparer" vsli:raw="The comparer to use to compare elements for equality.">O comparador a ser usado para comparar elementos quanto à igualdade.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt; with the specified element removed.">Um novo <see cref="T:System.Collections.Immutable.ImmutableList`1" /> com o elemento especificado removido.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">Remove todos os elementos que correspondem às condições definidas pelo predicado especificado.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">O delegado que define as condições dos elementos a serem removidos.</param>
      <returns vsli:raw="A new immutable list with the elements removed.">Uma nova lista imutável com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the immutable list.">Remove o elemento no índice especificado da lista imutável.</summary>
      <param name="index" vsli:raw="The index of the element to remove.">O índice do elemento a ser removido.</param>
      <returns vsli:raw="A new list with the element removed.">Uma nova lista com o elemento removido.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes a range of elements from this immutable list that match the items specified.">Remove um intervalo de elementos dessa lista imutável que correspondem aos itens especificados.</summary>
      <param name="items" vsli:raw="The range of items to remove from the list, if found.">O intervalo de itens a serem removidos da lista, se encontrado.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare elements.">O comparador de igualdade a ser usado para comparar os elementos.</param>
      <returns vsli:raw="An immutable list with the items removed.">Uma lista imutável com os itens removidos.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;items&quot; /&gt; or &lt;paramref name=&quot;equalityComparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="items" /> ou <paramref name="equalityComparer" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes the specified number of elements at the specified location from this list.">Remove o número especificado de elementos no local especificado dessa lista.</summary>
      <param name="index" vsli:raw="The starting index of the range of elements to remove.">O índice inicial do intervalo de elementos a serem removidos.</param>
      <param name="count" vsli:raw="The number of elements to remove.">O número de elementos a serem removidos.</param>
      <returns vsli:raw="A new list with the elements removed.">Uma nova lista com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Replaces an element in the list with the specified element.">Substitui um elemento na lista pelo elemento especificado.</summary>
      <param name="oldValue" vsli:raw="The element to replace.">O elemento a ser substituído.</param>
      <param name="newValue" vsli:raw="The element to replace the old element with.">O elemento pelo qual substituir o elemento antigo.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">O comparador de igualdade a ser usado na pesquisa.</param>
      <returns vsli:raw="The new list.">A nova lista.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">Gerado quando o valor antigo não existe na lista.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element in the list at a given position with the specified element.">Substitui um elemento na lista na posição especificada, pelo elemento especificado.</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">A posição na lista do elemento a ser substituído.</param>
      <param name="value" vsli:raw="The element to replace the old element with.">O elemento pelo qual substituir o elemento antigo.</param>
      <returns vsli:raw="The new list.">A nova lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ToBuilder">
      <summary vsli:raw="Creates a list that has the same contents as this list and can be efficiently mutated across multiple operations using standard mutable interfaces.">Cria uma lista que tem o mesmo conteúdo que essa lista e pode ser modificada com eficiência em várias operações usando interfaces mutáveis padrão.</summary>
      <returns vsli:raw="The created list with the same contents as this list.">A lista criada com o mesmo conteúdo que essa lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})">
      <summary vsli:raw="Determines whether every element in the immutable list matches the conditions defined by the specified predicate.">Determina se cada elemento da lista imutável coincide com as condições definidas pelo predicado especificado.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions to check against the elements.">O delegado que define as condições a serem verificadas nos elementos.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element in the immutable list matches the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If the list has no elements, the return value is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> se cada elemento da lista imutável corresponder às condições definidas pelo predicado especificado; caso contrário, <see langword="false" />. Se a lista não tiver elementos, o valor retornado será <see langword="true" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableQueue`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Fornece um conjunto de métodos de inicialização para instâncias da classe <see cref="T:System.Collections.Immutable.ImmutableQueue`1" />.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1">
      <summary vsli:raw="Creates an empty immutable queue.">Cria uma fila imutável vazia.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable queue.">O tipo de itens a serem armazenados na fila imutável.</typeparam>
      <returns vsli:raw="An empty immutable queue.">Uma fila imutável vazia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable queue that contains the specified item.">Cria uma nova fila imutável que contém o item especificado.</summary>
      <param name="item" vsli:raw="The item to prepopulate the queue with.">O item com o qual preencher previamente a fila.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable queue.">O tipo de itens na fila imutável.</typeparam>
      <returns vsli:raw="A new immutable queue that contains the specified item.">Uma nova fila imutável que contém o item especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable queue that contains the specified array of items.">Cria uma nova fila imutável que contém a matriz especificada de itens.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the queue with.">Uma matriz que contém os itens com os quais preencher previamente a fila.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable queue.">O tipo de itens na fila imutável.</typeparam>
      <returns vsli:raw="A new immutable queue that contains the specified items.">Uma nova fila imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable queue that contains the specified items.">Cria uma nova fila imutável que contém os itens especificados.</summary>
      <param name="items" vsli:raw="The items to add to the queue before immutability is applied.">Os itens a serem adicionados à fila antes que a imutabilidade seja aplicada.</param>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">O tipo de elementos na fila.</typeparam>
      <returns vsli:raw="An immutable queue that contains the specified items.">Uma fila imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Dequeue``1(System.Collections.Immutable.IImmutableQueue{``0},``0@)">
      <summary vsli:raw="Removes the item at the beginning of the immutable queue, and returns the new queue.">Remove o item no início da fila imutável e retorna a nova fila.</summary>
      <param name="queue" vsli:raw="The queue to remove the item from.">A fila da qual remover o item.</param>
      <param name="value" vsli:raw="When this method returns, contains the item from the beginning of the queue.">Quando este método retorna, ele contém o item do início da fila.</param>
      <typeparam name="T" vsli:raw="The type of elements in the immutable queue.">O tipo de elementos na fila imutável.</typeparam>
      <returns vsli:raw="The new queue with the item removed.">A nova fila com o item removido.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">A pilha está vazia.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1">
      <summary vsli:raw="Represents an immutable queue.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa uma fila imutável.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">O tipo de elementos na fila.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable queue.">Remove todos os objetos da fila imutável.</summary>
      <returns vsli:raw="The empty immutable queue.">A fila imutável vazia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue">
      <summary vsli:raw="Removes the element at the beginning of the immutable queue, and returns the new queue.">Remove o elemento no início da fila imutável e retorna a nova fila.</summary>
      <returns vsli:raw="The new immutable queue; never &lt;see langword=&quot;null&quot; /&gt;.">A nova fila imutável; nunca <c>null</c>.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">A fila está vazia.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue(`0@)">
      <summary vsli:raw="Removes the item at the beginning of the immutable queue, and returns the new queue.">Remove o item no início da fila imutável e retorna a nova fila.</summary>
      <param name="value" vsli:raw="When this method returns, contains the element from the beginning of the queue.">Quando este método retorna, ele contém o elemento do início da fila.</param>
      <returns vsli:raw="The new immutable queue with the beginning element removed.">A nova fila imutável com o elemento de início removido.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">A fila está vazia.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Empty">
      <summary vsli:raw="Gets an empty immutable queue.">Obtém uma fila imutável vazia.</summary>
      <returns vsli:raw="An empty immutable queue.">Uma fila imutável vazia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">Adiciona um elemento ao final da fila imutável e retorna a nova fila.</summary>
      <param name="value" vsli:raw="The element to add.">O elemento a ser adicionado.</param>
      <returns vsli:raw="The new immutable queue.">A nova fila imutável.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of an immutable queue without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Enumera o conteúdo de uma fila imutável sem qualquer alocação de memória.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtém o elemento na posição atual do enumerador.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">O elemento na posição atual do enumerador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable queue.">Avança o enumerador para o próximo elemento da fila imutável.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the queue.">
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final da fila.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable queue.">Retorna um enumerador que itera na fila imutável.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the queue.">Um enumerador que pode ser usado para iterar na fila.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable queue is empty.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Obtém um valor que indica se essa fila imutável está vazia.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this queue is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se essa fila estiver vazia; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Peek">
      <summary vsli:raw="Returns the element at the beginning of the immutable queue without removing it.">Retorna o elemento no início da fila imutável sem removê-lo.</summary>
      <returns vsli:raw="The element at the beginning of the queue.">O elemento no início da fila.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">A fila está vazia.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.PeekRef">
      <summary vsli:raw="Gets a read-only reference to the element at the front of the queue.">Obtém uma referência somente leitura ao elemento no início da fila.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">A fila está vazia.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retorna um enumerador que itera pela coleção.</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the collection.">Um enumerador que pode ser usado para iterar na coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retorna um enumerador que itera em uma coleção.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object that can be used to iterate through the collection.">Um objeto <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Clear">
      <summary vsli:raw="Removes all elements from the immutable queue.">Remove todos os elementos da fila imutável.</summary>
      <returns vsli:raw="The empty immutable queue.">A fila imutável vazia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Dequeue">
      <summary vsli:raw="Removes the element at the beginning of the immutable queue, and returns the new queue.">Remove o elemento no início da fila imutável e retorna a nova fila.</summary>
      <returns vsli:raw="The new immutable queue; never &lt;see langword=&quot;null&quot; /&gt;.">A nova fila imutável; nunca <c>null</c>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">Adiciona um elemento ao final da fila imutável e retorna a nova fila.</summary>
      <param name="value" vsli:raw="The element to add.">O elemento a ser adicionado.</param>
      <returns vsli:raw="The new immutable queue.">A nova fila imutável.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedDictionary`2&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Fornece um conjunto de métodos de inicialização para instâncias da classe <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2" />.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2">
      <summary vsli:raw="Creates an empty immutable sorted dictionary.">Cria um dicionário classificado imutável vazio.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">O tipo de chaves armazenadas pelo dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">O tipo de valores armazenados pelo dicionário.</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">Um dicionário classificado imutável vazio.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates an empty immutable sorted dictionary that uses the specified key comparer.">Cria um dicionário classificado imutável vazio que usa o comparador de chave especificado.</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">A implementação a ser usada para determinar a igualdade de chaves no dicionário.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">O tipo de chaves armazenadas pelo dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">O tipo de valores armazenados pelo dicionário.</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">Um dicionário classificado imutável vazio.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates an empty immutable sorted dictionary that uses the specified key and value comparers.">Cria um dicionário classificado imutável vazio que usa os comparadores de chave e valor especificados.</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">A implementação a ser usada para determinar a igualdade de chaves no dicionário.</param>
      <param name="valueComparer" vsli:raw="The implementation to use to determine the equality of values in the dictionary.">A implementação a ser usada para determinar igualdade de valores no dicionário.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">O tipo de chaves armazenadas pelo dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">O tipo de valores armazenados pelo dicionário.</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">Um dicionário classificado imutável vazio.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">Cria um novo construtor de dicionário classificado imutável.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">O tipo de chaves armazenadas pelo dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">O tipo de valores armazenados pelo dicionário.</typeparam>
      <returns vsli:raw="The immutable collection builder.">O construtor de coleção imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">Cria um novo construtor de dicionário classificado imutável.</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">O comparador de chave.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">O tipo de chaves armazenadas pelo dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">O tipo de valores armazenados pelo dicionário.</typeparam>
      <returns vsli:raw="The immutable collection builder.">O construtor de coleção imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">Cria um novo construtor de dicionário classificado imutável.</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">O comparador de chave.</param>
      <param name="valueComparer" vsli:raw="The value comparer.">O comparador de valor.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">O tipo de chaves armazenadas pelo dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">O tipo de valores armazenados pelo dicionário.</typeparam>
      <returns vsli:raw="The immutable collection builder.">O construtor de coleção imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable sorted dictionary from the specified range of items with the specified key comparer.">Cria um novo dicionário classificado imutável com base no intervalo especificado de itens com o comparador de chave especificado.</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to evaluate keys for equality and sorting.">A implementação de comparador a ser usada para avaliar as chaves quanto à igualdade e classificação.</param>
      <param name="items" vsli:raw="The items to add to the sorted dictionary.">Os itens a serem adicionados ao dicionário classificado.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">O tipo de chaves armazenadas no dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">O tipo de valores armazenados no dicionário.</typeparam>
      <returns vsli:raw="The new immutable sorted dictionary that contains the specified items and uses the specified key comparer.">O novo dicionário classificado imutável que contém os itens especificados e usa o comparador de chave especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable sorted dictionary from the specified range of items with the specified key and value comparers.">Cria um novo dicionário classificado imutável com base no intervalo especificado de itens com os comparadores de chave e valor especificados.</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality and sorting.">A implementação de comparador a ser usada para comparar as chaves quanto à igualdade e classificação.</param>
      <param name="valueComparer" vsli:raw="The comparer implementation to use to compare values for equality.">A implementação de comparador a ser usada para comparar valores quanto à igualdade e classificação.</param>
      <param name="items" vsli:raw="The items to add to the sorted dictionary before it's immutable.">Os itens a serem adicionados ao dicionário classificado antes que ele seja imutável.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">O tipo de chaves armazenadas no dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">O tipo de valores armazenados no dicionário.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the specified items and uses the specified comparers.">Um dicionário classificado imutável que contém os itens especificados e usa os comparadores especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates an immutable sorted dictionary that contains the specified items and uses the default comparer.">Cria um dicionário classificado imutável que contém os itens especificados e usa o comparador padrão.</summary>
      <param name="items" vsli:raw="The items to add to the sorted dictionary before it's immutable.">Os itens a serem adicionados ao dicionário classificado antes que ele seja imutável.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">O tipo de chaves armazenadas no dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">O tipo de valores armazenados no dicionário.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the specified items.">Um dicionário classificado imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable sorted dictionary of its contents.">Enumera uma sequência de pares chave/valor e produz um dicionário classificado imutável de seu conteúdo.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">A sequência de pares chave/valor a ser enumerada.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">O tipo das chaves no dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">O tipo dos valores no dicionário.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">Um dicionário classificado imutável que contém os pares chave/valor na sequência especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key comparer.">Enumera uma sequência de pares chave/valor e produz um dicionário imutável de seu conteúdo, usando o comparador de chave especificado.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">A sequência de pares chave/valor a ser enumerada.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">O comparador de chave a ser usado ao criar o dicionário imutável.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">O tipo das chaves no dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">O tipo dos valores no dicionário.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">Um dicionário classificado imutável que contém os pares chave/valor na sequência especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable sorted dictionary of its contents by using the specified key and value comparers.">Enumera uma sequência de pares chave/valor e produz um dicionário classificado imutável de seu conteúdo, usando os comparadores de chave e valor especificados.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">A sequência de pares chave/valor a ser enumerada.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">O comparador de chave a ser usado ao criar o dicionário imutável.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the immutable dictionary.">O comparador de valor a ser usado para o dicionário imutável.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">O tipo das chaves no dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">O tipo dos valores no dicionário.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">Um dicionário classificado imutável que contém os pares chave/valor na sequência especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Immutable.ImmutableSortedDictionary{``0,``1}.Builder)">
      <summary vsli:raw="Creates an immutable sorted dictionary from the current contents of the builder's dictionary.">Cria um dicionário classificado imutável do conteúdo atual do dicionário do construtor.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable sorted dictionary from.">O construtor para o qual criar o dicionário classificado imutável.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">O tipo das chaves no dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">O tipo dos valores no dicionário.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the current contents in the builder's dictionary.">Cria um dicionário classificado imutável preenchido com o conteúdo atual do dicionário do construtor.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents.">Enumera e transforma uma sequência e produz um dicionário classificado imutável com base em seu conteúdo.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">A sequência a ser enumerada para gerar o dicionário.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">A função que produzirá a chave para o dicionário de cada elemento de sequência.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">A função que produzirá o valor para o dicionário de cada elemento de sequência.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">O tipo dos elementos na sequência.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">O tipo das chaves no dicionário resultante.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">O tipo dos valores no dicionário resultante.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the items in the specified sequence.">Um dicionário classificado imutável que contém os itens na sequência especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents by using the specified key comparer.">Enumera e transforma uma sequência e produz um dicionário classificado imutável com base em seu conteúdo usando o comparador de chave especificado.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">A sequência a ser enumerada para gerar o dicionário.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">A função que produzirá a chave para o dicionário de cada elemento de sequência.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">A função que produzirá o valor para o dicionário de cada elemento de sequência.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">O comparador de chave a ser usado para o dicionário.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">O tipo dos elementos na sequência.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">O tipo das chaves no dicionário resultante.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">O tipo dos valores no dicionário resultante.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">Um dicionário imutável que contém os itens na sequência especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents by using the specified key and value comparers.">Enumera e transforma uma sequência e produz um dicionário classificado imutável com base em seu conteúdo usando os comparadores de chave e valor especificados.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">A sequência a ser enumerada para gerar o dicionário.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">A função que produzirá a chave para o dicionário de cada elemento de sequência.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">A função que produzirá o valor para o dicionário de cada elemento de sequência.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">O comparador de chave a ser usado para o dicionário.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the dictionary.">O comparador de valor a ser usado para o dicionário.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">O tipo dos elementos na sequência.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">O tipo das chaves no dicionário resultante.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">O tipo dos valores no dicionário resultante.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the items in the specified sequence.">Um dicionário classificado imutável que contém os itens na sequência especificada.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2">
      <summary vsli:raw="Represents an immutable sorted dictionary.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa um dicionário classificado imutável.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="TKey" vsli:raw="The type of the key contained in the dictionary.">O tipo da chave contida no dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value contained in the dictionary.">O tipo do valor contido no dicionário.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the immutable sorted dictionary.">Adiciona um elemento com a chave e o valor especificados ao dicionário classificado imutável.</summary>
      <param name="key" vsli:raw="The key of the entry to add.">A chave da entrada a ser adicionada.</param>
      <param name="value" vsli:raw="The value of entry to add.">O valor da entrada a ser adicionada.</param>
      <returns vsli:raw="A new immutable sorted dictionary that contains the additional key/value pair.">Um novo dicionário classificado imutável que contém o par chave/valor adicional.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">A chave especificada já existe no dicionário, mas tem um valor diferente.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specific key/value pairs to the immutable sorted dictionary.">Adiciona os pares chave/valor específicos ao dicionário classificado imutável.</summary>
      <param name="items" vsli:raw="The key/value pairs to add.">Os pares chave/valor a serem adicionados.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">Um novo dicionário imutável que contém os pares chave/valor adicionais.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">Uma das chaves fornecidas já existe no dicionário, mas tem um valor diferente.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder">
      <summary vsli:raw="Represents a sorted dictionary that mutates with little or no memory allocations and that can produce or build on immutable sorted dictionary instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa um dicionário classificado que se modifica com pouca ou nenhuma alocação de memória e que pode produzir ou criar instâncias de dicionário classificado imutável de maneira muito eficiente.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(`0,`1)">
      <summary vsli:raw="Adds an element that has the specified key and value to the immutable sorted dictionary.">Adiciona um elemento que tem a chave e o valor especificados ao dicionário classificado imutável.</summary>
      <param name="key" vsli:raw="The key of the element to add.">A chave do elemento a ser adicionada.</param>
      <param name="value" vsli:raw="The value of the element to add.">O valor do elemento a ser adicionado.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds the specified item to the immutable sorted dictionary.">Adiciona o item especificado ao dicionário classificado imutável.</summary>
      <param name="item" vsli:raw="The object to add to the dictionary.">O objeto a ser adicionado ao dicionário.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds a sequence of values to the immutable sorted dictionary.">Adiciona uma sequência de valores ao dicionário classificado imutável.</summary>
      <param name="items" vsli:raw="The items to add to the dictionary.">Os itens a serem adicionados ao dicionário.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable sorted dictionary.">Remove todos os itens do dicionário classificado imutável.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains a specific value.">Determina se o dicionário classificado imutável contém um valor específico.</summary>
      <param name="item" vsli:raw="The object to locate in the dictionary.">O objeto a ser localizado no dicionário.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="item" /> for encontrada no dicionário; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified key.">Determina se o dicionário classificado imutável contém um elemento com a chave especificada.</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary.">A chave a ser localizada no dicionário.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o dicionário contiver um elemento com a chave; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified value.">Determina se o dicionário classificado imutável contém um elemento com o valor especificado.</summary>
      <param name="value" vsli:raw="The value to locate in the dictionary. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">O valor a ser localizado no dicionário. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable sorted dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o dicionário classificado imutável contém um elemento com o valor especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Count">
      <summary vsli:raw="Gets the number of elements in this immutable sorted dictionary.">Obtém o número de elementos neste dicionário classificado imutável.</summary>
      <returns vsli:raw="The number of elements in this dictionary.">O número de elementos neste dicionário.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted dictionary.">Retorna um enumerador que itera no dicionário classificado imutável.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">Um enumerador que pode ser usado para iterar no dicionário.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary; otherwise the default value.">Obtém o valor de uma determinada chave, se uma chave correspondente existir no dicionário; caso contrário, o valor padrão.</summary>
      <param name="key" vsli:raw="The key to search for.">A chave a ser pesquisada.</param>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">O valor da chave ou <c>default(TValue)</c> se nenhuma chave correspondente for encontrada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary; otherwise the default value.">Obtém o valor de uma determinada chave, se uma chave correspondente existir no dicionário; caso contrário, o valor padrão.</summary>
      <param name="key" vsli:raw="The key to search for.">A chave a ser pesquisada.</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">O valor padrão a ser retornado se nenhuma chave correspondente for encontrada no dicionário.</param>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">O valor da chave ou <paramref name="defaultValue" /> se nenhuma chave correspondente for encontrada.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Item(`0)">
      <summary vsli:raw="Gets or sets the value for a specified key in the immutable sorted dictionary.">Obtém ou define o valor de uma chave especificada no dicionário classificado imutável.</summary>
      <param name="key" vsli:raw="The key to retrieve the value for.">A chave para a qual recuperar o valor.</param>
      <returns vsli:raw="The value associated with the given key.">O valor associado à chave especificada.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">Obtém ou define o comparador de chave.</summary>
      <returns vsli:raw="The key comparer.">O comparador de chave.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Keys">
      <summary vsli:raw="Gets a strongly typed, read-only collection of elements.">Obtém uma coleção de elementos fortemente tipada e somente leitura.</summary>
      <returns vsli:raw="A strongly typed, read-only collection of elements.">Uma coleção fortemente tipada de elementos somente leitura.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable sorted dictionary.">Remove o elemento com a chave especificada do dicionário classificado imutável.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">A chave do elemento a ser removido.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; was not found in the original dictionary.">
        <see langword="true" /> se o elemento for removido com êxito; caso contrário, <see langword="false" />. Esse método também retornará <see langword="false" /> se <paramref name="key" /> não tiver sido encontrado no dicionário original.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable sorted dictionary.">Remove a primeira ocorrência de um objeto específico do dicionário classificado imutável.</summary>
      <param name="item" vsli:raw="The object to remove from the dictionary.">O objeto a ser removido do dicionário.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the dictionary.">
        <see langword="true" /> se <paramref name="item" /> tiver sido removido com êxito do dicionário; caso contrário, <see langword="false" />. Esse método também retornará <see langword="false" /> se o <paramref name="item" /> não for encontrado no dicionário.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes any entries with keys that match those found in the specified sequence from the immutable sorted dictionary.">Remove todas as entradas com chaves que correspondam àquelas encontradas na sequência especificada do dicionário classificado imutável.</summary>
      <param name="keys" vsli:raw="The keys for entries to remove from the dictionary.">As chaves das entradas a serem removidas do dicionário.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Copia os elementos do dicionário em uma matriz, começando em um índice de matriz específico.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">A matriz unidimensional que é o destino dos elementos copiados do dicionário. A matriz deve ter indexação com base em zero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtém um valor que indica se o acesso ao <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso o acesso ao <see cref="T:System.Collections.ICollection" /> seja sincronizado (thread-safe); do contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">Adiciona um elemento com a chave e o valor fornecidos ao objeto de dicionário.</summary>
      <param name="key" vsli:raw="The key of the element to add.">A chave do elemento a ser adicionada.</param>
      <param name="value" vsli:raw="The value of the element to add.">O valor do elemento a ser adicionado.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the dictionary object contains an element with the specified key.">Determina se o objeto de dicionário contém um elemento com a chave especificada.</summary>
      <param name="key" vsli:raw="The key to locate.">A chave a ser localizada.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o dicionário contiver um elemento com a chave; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">Retorna um objeto <see cref="T:System.Collections.IDictionaryEnumerator" /> para o dicionário.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">Um objeto <see cref="T:System.Collections.IDictionaryEnumerator" /> para o dicionário.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">Obtém um valor que indica se o objeto <see cref="T:System.Collections.IDictionary" /> tem um tamanho fixo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o <see cref="T:System.Collections.IDictionary" /> objeto tiver um tamanho fixo; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Obtém ou define o elemento com a chave especificada.</summary>
      <param name="key" vsli:raw="The key.">A chave.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtém um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém as chaves do <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém as chaves do objeto que implementa <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the dictionary.">Remove o elemento com a chave especificada do dicionário.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">A chave do elemento a ser removido.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtém um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém os valores no <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém os valores no objeto que implementa <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retorna um enumerador que itera em uma coleção.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Um objeto enumerador que pode ser usado para iterar na coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable sorted dictionary based on the contents of this instance.">Cria um dicionário classificado imutável de acordo com o conteúdo desta instância.</summary>
      <returns vsli:raw="An immutable sorted dictionary.">Um dicionário classificado imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Determina se este dicionário contém uma chave especificada.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">A chave a ser pesquisada.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">A chave correspondente localizada no dicionário, se encontrada, ou <c>equalkey</c> se nenhuma correspondência for encontrada.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se uma correspondência para <paramref name="equalKey" /> for encontrada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">Obtém o valor associado à chave especificada.</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">A chave cujo valor será recuperado.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">Quando esse método retorna, ele contém o valor associado à chave especificada, caso a chave seja encontrada; caso contrário, conterá o valor padrão para o tipo do parâmetro <paramref name="value" />. Este parâmetro é passado não inicializado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o objeto que implementa o dicionário contiver um elemento com a chave especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueComparer">
      <summary vsli:raw="Gets or sets the value comparer.">Obtém ou define o comparador de valor.</summary>
      <returns vsli:raw="The value comparer.">O comparador de valor.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueRef(`0)">
      <summary vsli:raw="Returns a read-only reference to the value associated with the provided &lt;paramref name=&quot;key&quot; /&gt;.">Retorna uma referência somente leitura ao valor associado ao <paramref name="key" /> fornecido.</summary>
      <param name="key" vsli:raw="Key of the entry to be looked up." />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The &lt;paramref name=&quot;key&quot; /&gt; is not present.">O <paramref name="key" /> não está presente.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Values">
      <summary vsli:raw="Gets a collection that contains the values of the immutable sorted dictionary.">Obtém uma coleção que contém os valores do dicionário classificado imutável.</summary>
      <returns vsli:raw="A collection that contains the values of the object that implements the dictionary.">Uma coleção que contém os valores do objeto que implementa o dicionário.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty immutable sorted dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">Recupera um dicionário classificado imutável vazio que tem a mesma ordenação e regras de comparação de chave/valor que essa instância de dicionário.</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">Um dicionário vazio com ordenação e regras de comparação de chave/valor equivalentes.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether this immutable sorted dictionary contains the specified key/value pair.">Determina se esse dicionário classificado imutável contém o par chave/valor especificado.</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">O par chave/valor a ser localizado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o par chave/valor especificado for encontrado no dicionário; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether this immutable sorted map contains the specified key.">Determina se este mapa classificado imutável contém a chave especificada.</summary>
      <param name="key" vsli:raw="The key to locate.">A chave a ser localizada.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable dictionary contains the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o dicionário imutável contiver a chave especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified value.">Determina se o dicionário classificado imutável contém um elemento com o valor especificado.</summary>
      <param name="value" vsli:raw="The value to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">O valor a ser localizado. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o dicionário contiver um elemento com o valor especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs in the immutable sorted dictionary.">Obtém o número de pares chave/valor no dicionário classificado imutável.</summary>
      <returns vsli:raw="The number of key/value pairs in the dictionary.">O número de pares de chave/valor no dicionário.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedDictionary`2.Empty">
      <summary vsli:raw="Gets an empty immutable sorted dictionary.">Obtém um dicionário classificado imutável vazio.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Enumera o conteúdo de uma árvore binária.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtém o elemento na posição atual do enumerador.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">O elemento na posição atual do enumerador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator&quot; /&gt; class.">Libera os recursos usados pela instância atual da classe <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable sorted dictionary.">Avança o enumerador para o próximo elemento do dicionário classificado imutável.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the sorted dictionary.">
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final do dicionário classificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable sorted dictionary.">Define o enumerador com sua posição inicial, que é antes do primeiro elemento do dicionário classificado imutável.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">O elemento atual.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted dictionary.">Retorna um enumerador que itera no dicionário classificado imutável.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">Um enumerador que pode ser usado para iterar no dicionário.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable sorted dictionary is empty.">Obtém um valor que indica se essa instância do dicionário classificado imutável está vazia.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se esta instância estiver vazia; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Item(`0)">
      <summary vsli:raw="Gets the &lt;paramref name=&quot;TValue&quot; /&gt; associated with the specified key.">Obtém o <paramref name="TValue" /> associado à chave especificada.</summary>
      <param name="key" vsli:raw="The key to retrieve the value for.">A chave para a qual recuperar o valor.</param>
      <returns vsli:raw="The value associated with the specified key. If no results are found, the operation throws an exception.">O valor associado à chave especificada. Se nenhum resultado for encontrado, a operação lançará uma exceção.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.KeyComparer">
      <summary vsli:raw="Gets the key comparer for the immutable sorted dictionary.">Obtém o comparador de chave para o dicionário classificado imutável.</summary>
      <returns vsli:raw="The key comparer for the dictionary.">O comparador de chave para o dicionário.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Keys">
      <summary vsli:raw="Gets the keys in the immutable sorted dictionary.">Obtém as chaves no dicionário classificado imutável.</summary>
      <returns vsli:raw="The keys in the immutable dictionary.">As chaves no dicionário imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified value from the immutable sorted dictionary.">Remove o elemento com o valor especificado do dicionário classificado imutável.</summary>
      <param name="value" vsli:raw="The value of the element to remove.">O valor do elemento a ser removido.</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified value cannot be found in the dictionary.">Um novo dicionário imutável com o elemento especificado removido; ou esta instância, se o valor especificado não puder ser encontrado no dicionário.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable sorted dictionary.">Remove os elementos do dicionário classificado imutável com as chaves especificadas.</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">As chaves dos elementos a serem removidos.</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">Um novo dicionário imutável com as chaves especificadas removidas; ou esta instância, se a chave especificada não puder ser encontrada no dicionário.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable sorted dictionary, possibly overwriting an existing value for the given key.">Define a chave especificada e o valor no dicionário classificado imutável, possivelmente substituindo um valor existente para a chave especificada.</summary>
      <param name="key" vsli:raw="The key of the entry to add.">A chave da entrada a ser adicionada.</param>
      <param name="value" vsli:raw="The key value to set.">O valor de chave a ser definido.</param>
      <returns vsli:raw="A new immutable sorted dictionary that contains the specified key/value pair.">Um novo dicionário classificado imutável que contém o par chave/valor especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable sorted dictionary, possibly overwriting existing values for the keys.">Define os pares chave/valor especificados no dicionário classificado imutável, possivelmente substituindo valores existente para as chaves.</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">Os pares chave/valor a serem definidos no dicionário. Se qualquer uma das chaves já existir no dicionário, este método substituirá os respectivos valores anteriores.</param>
      <returns vsli:raw="An immutable dictionary that contains the specified key/value pairs.">Um dicionário imutável que contém os pares chave/valor especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="The object to use as the key of the element to add." />
      <param name="value" vsli:raw="The object to use as the value of the element to add." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" vsli:raw="The object to use as the key of the element to access." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="The key of the element to remove." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.">Copia os elementos do dicionário em uma matriz, começando em um índice de matriz específico.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">A matriz unidimensional que é o destino dos elementos copiados do dicionário. A matriz deve ter indexação com base em zero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtém um valor que indica se o acesso à <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o <see cref="T:System.Collections.ICollection" /> acesso ao for sincronizado (thread-safe); caso <see langword="false" />contrário,.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">Adiciona um elemento com a chave e o valor fornecidos ao objeto de dicionário.</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to add.">O objeto a ser usado como chave do elemento a ser adicionado.</param>
      <param name="value" vsli:raw="The object to use as the value of the element to add.">O objeto a ser usado como o valor do elemento a ser adicionado.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Clear">
      <summary vsli:raw="Clears this instance.">Limpa essa instância.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary object is read-only.">O objeto de dicionário é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable dictionary object contains an element with the specified key.">Determina se o objeto dicionário imutável contém um elemento com a chave especificada.</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary object.">A chave a ser localizada no objeto de dicionário.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o dicionário contiver um elemento com a chave; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the immutable dictionary object.">Retorna um objeto <see cref="T:System.Collections.IDictionaryEnumerator" /> para o objeto de dicionário imutável.</summary>
      <returns vsli:raw="An enumerator object for the dictionary object.">Um objeto enumerador para o objeto de dicionário.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">Obtém um valor que indica se o objeto <see cref="T:System.Collections.IDictionary" /> tem um tamanho fixo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o <see cref="T:System.Collections.IDictionary" /> objeto tiver um tamanho fixo; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Obtém ou define o elemento com a chave especificada.</summary>
      <param name="key" vsli:raw="The key of the element to be accessed.">A chave.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtém um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém as chaves do <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém as chaves do objeto que implementa <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary object.">Remove o elemento com a chave especificada do objeto de dicionário imutável.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">A chave do elemento a ser removido.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtém um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém os valores no <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém os valores no objeto que implementa <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retorna um enumerador que itera em uma coleção.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Um objeto enumerador que pode ser usado para iterar na coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="Key of the entry to be added." />
      <param name="value" vsli:raw="Value of the entry to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" vsli:raw="Sequence of key/value pairs to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="Key of entry to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" vsli:raw="Sequence of keys to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" vsli:raw="Key of entry to be updated." />
      <param name="value" vsli:raw="Value of entry to be updated." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" vsli:raw="A set of key-value pairs to set on the map." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ToBuilder">
      <summary vsli:raw="Creates an immutable sorted dictionary with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">Cria um dicionário classificado imutável com o mesmo conteúdo deste dicionário que pode ser modificado com eficiência em várias operações usando interfaces mutáveis padrão.</summary>
      <returns vsli:raw="A collection with the same contents as this dictionary.">Uma coleção com o mesmo conteúdo deste dicionário.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Determina se este dicionário contém uma chave especificada.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">A chave a ser pesquisada.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">A chave correspondente localizada no dicionário, se encontrada, ou <c>equalkey</c> se nenhuma correspondência for encontrada.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se uma correspondência para <paramref name="equalKey" /> for encontrada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">Obtém o valor associado à chave especificada.</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">A chave cujo valor será recuperado.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Quando esse método retorna, ele contém o valor associado à chave especificada, caso a chave seja encontrada; caso contrário, conterá o valor padrão para o tipo do parâmetro <paramref name="value" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o dicionário contiver um elemento com a chave especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueComparer">
      <summary vsli:raw="Gets the value comparer used to determine whether values are equal.">Obtém o comparador de valor usado para determinar se os valores são iguais.</summary>
      <returns vsli:raw="The value comparer used to determine whether values are equal.">O comparador de valor usado para determinar se os valores são iguais.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueRef(`0)">
      <summary vsli:raw="Returns a read-only reference to the value associated with the provided &lt;paramref name=&quot;key&quot; /&gt;.">Retorna uma referência somente leitura ao valor associado ao <paramref name="key" /> fornecido.</summary>
      <param name="key" vsli:raw="Key of the entry to be looked up." />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The &lt;paramref name=&quot;key&quot; /&gt; is not present.">O <paramref name="key" /> não está presente.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Values">
      <summary vsli:raw="Gets the values in the immutable sorted dictionary.">Obtém os valores no dicionário classificado imutável.</summary>
      <returns vsli:raw="The values in the dictionary.">Os valores no dicionário.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable sorted dictionary that uses the specified key comparer.">Obtém uma instância do dicionário classificado imutável que usa o comparador de chave especificado.</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">O comparador de chave a ser usado.</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparer.">Uma instância do dicionário imutável que usa o comparador especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary vsli:raw="Gets an instance of the immutable sorted dictionary that uses the specified key and value comparers.">Obtém uma instância do dicionário classificado imutável que usa o comparador de chave e valor especificados.</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">O comparador de chave a ser usado.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use.">O comparador de valor a ser usado.</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparers.">Uma instância do dicionário imutável que usa os comparadores especificados.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedSet`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Fornece um conjunto de métodos de inicialização para instâncias da classe <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1" />.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1">
      <summary vsli:raw="Creates an empty immutable sorted set.">Cria um conjunto classificado imutável vazio.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable set.">O tipo de itens a serem armazenados no conjunto imutável.</typeparam>
      <returns vsli:raw="An empty immutable sorted set.">Um conjunto classificado imutável vazio.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified item.">Cria um novo conjunto classificado imutável que contém o item especificado.</summary>
      <param name="item" vsli:raw="The item to prepopulate the set with.">O item com o qual preencher previamente o conjunto.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">O tipo de itens no conjunto imutável.</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified item.">Um novo conjunto imutável que contém o item especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified array of items.">Cria um novo conjunto classificado imutável que contém a matriz de itens especificada.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the set with.">Uma matriz que contém os itens com os quais preencher previamente o conjunto.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">O tipo de itens no conjunto imutável.</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified items.">Um novo conjunto imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates an empty immutable sorted set that uses the specified comparer.">Cria um conjunto classificado imutável vazio que usa o comparador especificado.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">A implementação a ser usada ao comparar os itens no conjunto.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">O tipo de itens no conjunto imutável.</typeparam>
      <returns vsli:raw="An empty immutable set.">Um conjunto imutável vazio.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified item and uses the specified comparer.">Cria um novo conjunto classificado imutável que contém o item especificado e usa o comparador especificado.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">A implementação a ser usada ao comparar os itens no conjunto.</param>
      <param name="item" vsli:raw="The item to prepopulate the set with.">O item com o qual preencher previamente o conjunto.</param>
      <typeparam name="T" vsli:raw="The type of items stored in the immutable set.">O tipo de itens armazenados no conjunto imutável.</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified item.">Um novo conjunto imutável que contém o item especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0[])">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified array of items and uses the specified comparer.">Cria um novo conjunto classificado imutável que contém a matriz de itens especificada e usa o comparador especificado.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">A implementação a ser usada ao comparar os itens no conjunto.</param>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the set with.">Uma matriz que contém os itens com os quais preencher previamente o conjunto.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">O tipo de itens no conjunto imutável.</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified items.">Um novo conjunto imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1">
      <summary vsli:raw="Returns a collection that can be used to build an immutable sorted set.">Retorna uma coleção que pode ser usada para construir um conjunto classificado imutável.</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">O tipo de itens armazenados pela coleção.</typeparam>
      <returns vsli:raw="The immutable collection builder.">O construtor de coleção imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Returns a collection that can be used to build an immutable sorted set.">Retorna uma coleção que pode ser usada para construir um conjunto classificado imutável.</summary>
      <param name="comparer" vsli:raw="The comparer used to compare items in the set for equality.">O comparador usado para comparar os itens no conjunto em relação à igualdade.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">O tipo de itens armazenados pela coleção.</typeparam>
      <returns vsli:raw="The immutable collection.">A coleção imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable collection that contains the specified items.">Cria uma nova coleção imutável que contém os itens especificados.</summary>
      <param name="comparer" vsli:raw="The comparer to use to compare elements in this set.">O comparador a ser usado para comparar elementos neste conjunto.</param>
      <param name="items" vsli:raw="The items to add to the set before it's immutable.">Os itens a serem adicionados ao conjunto antes que ele seja imutável.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">O tipo de itens armazenados pela coleção.</typeparam>
      <returns vsli:raw="The new immutable set that contains the specified items.">O novo conjunto imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable collection that contains the specified items.">Cria uma nova coleção imutável que contém os itens especificados.</summary>
      <param name="items" vsli:raw="The items to add to the set with before it's immutable.">Os itens a serem adicionados antes que ele seja imutável.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">O tipo de itens armazenados pela coleção.</typeparam>
      <returns vsli:raw="The new immutable set that contains the specified items.">O novo conjunto imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable sorted set of its contents.">Enumera uma sequência e produz um conjunto classificado imutável de seu conteúdo.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">A sequência a ser enumerada.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">O tipo dos elementos na sequência.</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the items in the specified sequence.">Um conjunto classificado imutável que contém os itens na sequência especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Enumerates a sequence, produces an immutable sorted set of its contents, and uses the specified comparer.">Enumera uma sequência, produz um conjunto classificado imutável de seu conteúdo e usa o comparador especificado.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">A sequência a ser enumerada.</param>
      <param name="comparer" vsli:raw="The comparer to use for initializing and adding members to the sorted set.">O comparador a ser usado para inicializar e adicionar membros ao conjunto classificado.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">O tipo dos elementos na sequência.</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the items in the specified sequence.">Um conjunto classificado imutável que contém os itens na sequência especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Immutable.ImmutableSortedSet{``0}.Builder)">
      <summary vsli:raw="Creates an immutable sorted set from the current contents of the builder's set.">Cria um conjunto classificado imutável do conteúdo atual do conjunto do construtor.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable sorted set from.">O construtor para o qual criar o conjunto classificado imutável.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the immutable sorted set.">O tipo dos elementos no conjunto classificado imutável.</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the current contents in the builder's set.">Cria um conjunto classificado imutável preenchido com o conteúdo atual do conjunto do construtor.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1">
      <summary vsli:raw="Represents an immutable sorted set implementation.&#xA;&#xA;NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa uma implementação de conjunto classificado imutável.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the set.">O tipo dos elementos no conjunto.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified value to this immutable sorted set.">Adiciona o valor especificado a este conjunto classificado imutável.</summary>
      <param name="value" vsli:raw="The value to add.">O valor a ser adicionado.</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in this set.">Um novo conjunto com o elemento adicionado ou esse conjunto se o elemento já está estiver nele.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Builder">
      <summary vsli:raw="Represents a sorted set that enables changes with little or no memory allocations, and efficiently manipulates or builds immutable sorted sets.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa um conjunto classificado que permite alterações com pouca ou nenhuma alocação de memória e manipula ou cria conjuntos classificados imutáveis com eficiência.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate whether the element was successfully added.">Adiciona um elemento ao conjunto atual e retorna um valor para indicar se ele foi adicionado com êxito.</summary>
      <param name="item" vsli:raw="The element to add to the set.">O elemento a ser adicionado ao conjunto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">
        <see langword="true" /> se o elemento for adicionado ao conjunto; <see langword="false" /> se o elemento já estiver no conjunto</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Clear">
      <summary vsli:raw="Removes all elements from this set.">Remove todos os elementos deste conjunto.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the set contains the specified object.">Determina se o conjunto atual contém o objeto especificado.</summary>
      <param name="item" vsli:raw="The object to locate in the set.">O objeto a ser localizado no conjunto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="item" /> for encontrado no conjunto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements in the immutable sorted set.">Obtém o número de elementos no conjunto classificado imutável.</summary>
      <returns vsli:raw="The number of elements in this set.">O número de elementos neste conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the specified set of items from the current set.">Remove o conjunto especificado de itens do conjunto atual.</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">A coleção de itens a serem removidos do conjunto.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the set.">Retorna um enumerador que itera no conjunto.</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the set.">Um enumerador que pode ser usado para iterar no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">Modifica o conjunto atual para que ele contenha apenas elementos que também estejam em uma coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) subset of a specified collection.">Determina se o conjunto atual é um subconjunto apropriado (estrito) de uma coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conjunto atual for um subconjunto apropriado do <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) superset of a specified collection.">Determina se o conjunto atual é um superconjunto apropriado (estrito) de uma coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conjunto atual for um superconjunto apropriado de <paramref name="other" />, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a subset of a specified collection.">Determina se o conjunto atual é um subconjunto de uma coleção especificada.</summary>
      <param name="other" vsli:raw="The collection is compare to the current set.">A coleção é comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conjunto atual for um subconjunto de <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a superset of a specified collection.">Determina se o conjunto atual é um superconjunto de uma coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conjunto atual for um superconjunto de <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets the element of the set at the given index.">Obtém o elemento do conjunto no índice especificado.</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">O índice baseado em zero do elemento no conjunto a ser retornado.</param>
      <returns vsli:raw="The element at the given position.">O elemento na posição fornecida.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">Obtém uma referência somente leitura ao elemento do conjunto no <paramref name="index" /> especificado.</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">O índice baseado em zero do elemento no conjunto a ser retornado.</param>
      <returns vsli:raw="A read-only reference to the element at the given position.">Uma referência somente leitura ao elemento na posição especificada.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the object that is used to determine equality for the values in the immutable sorted set.">Obtém ou define o objeto que é usado para determinar igualdade para os valores no conjunto classificado imutável.</summary>
      <returns vsli:raw="The comparer that is used to determine equality for the values in the set.">O comparador usado para determinar a igualdade dos valores no conjunto.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Max">
      <summary vsli:raw="Gets the maximum value in the immutable sorted set, as defined by the comparer.">Obtém o valor máximo no conjunto classificado imutável, conforme definido pelo comparador.</summary>
      <returns vsli:raw="The maximum value in the set.">O valor máximo no conjunto.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Min">
      <summary vsli:raw="Gets the minimum value in the immutable sorted set, as defined by the comparer.">Obtém o valor mínimo no conjunto classificado imutável, conforme definido pelo comparador.</summary>
      <returns vsli:raw="The minimum value in the set.">O valor mínimo no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set overlaps with the specified collection.">Determina se o conjunto atual se sobrepõe à coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conjunto atual e <paramref name="other" /> compartilharem pelo menos um elemento comum; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of the specified object from the set.">Remove a primeira ocorrência do objeto especificado do conjunto.</summary>
      <param name="item" vsli:raw="The object to remove from the set.">O objeto a ser removido do conjunto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was removed from the set; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was not found in the set.">
        <see langword="true" /> se <paramref name="item" /> tiver sido removido do conjunto; <see langword="false" /> se <paramref name="item" /> não for encontrado no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Reverse">
      <summary vsli:raw="Returns an enumerator that iterates over the immutable sorted set in reverse order.">Retorna um enumerador que itera no conjunto classificado imutável em ordem inversa.</summary>
      <returns vsli:raw="An enumerator that iterates over the set in reverse order.">Um enumerador iterado no conjunto na ordem inversa.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set and the specified collection contain the same elements.">Determina se o conjunto atual e a coleção especificada contêm os mesmos elementos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is equal to &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conjunto atual for igual a <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">Modifica o conjunto atual para que ele contenha somente os elementos presentes no conjunto atual ou na coleção especificada, mas não em ambos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate whether the element was successfully added.">Adiciona um elemento ao conjunto atual e retorna um valor para indicar se ele foi adicionado com êxito.</summary>
      <param name="item" vsli:raw="The element to add to the set.">O elemento a ser adicionado ao conjunto.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an array, starting at a particular array index.">Copia os elementos da coleção em uma matriz, começando em um índice de matriz específico.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing.">A matriz unidimensional que é o destino dos elementos copiados da coleção. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether this instance is read-only.">Obtém um valor que indica se esta instância é somente leitura.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;.">
        <c>é sempre</c>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retorna um enumerador que itera pela coleção.</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the collection.">Um enumerador que pode ser usado para iterar na coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular array index.">Copia os elementos do conjunto em uma matriz, começando em um índice de matriz específico.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">A matriz unidimensional que é o destino dos elementos copiados do conjunto. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe).">Obtém um valor que indica se o acesso a <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se o <see cref="T:System.Collections.ICollection" /> acesso ao for sincronizado (thread-safe); caso <see langword="false" />contrário,.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retorna um enumerador que itera pela coleção.</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the collection.">Um enumerador que pode ser usado para iterar na coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable sorted set based on the contents of this instance.">Cria um conjunto classificado imutável de acordo com o conteúdo desta instância.</summary>
      <returns vsli:raw="An immutable set.">Um conjunto imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.">Modifica o conjunto atual para que ele contenha todos os elementos que estão presentes no conjunto atual e na coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current state.">A coleção a ser comparada com o estado atual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Clear">
      <summary vsli:raw="Removes all elements from the immutable sorted set.">Remove todos os elementos do conjunto classificado imutável.</summary>
      <returns vsli:raw="An empty set with the elements removed.">Um conjunto vazio com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable sorted set contains the specified value.">Determina se este conjunto classificado imutável contém o valor especificado.</summary>
      <param name="value" vsli:raw="The value to check for.">O valor a ser verificado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conjunto contém o valor especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Count">
      <summary vsli:raw="Gets the number of elements in the immutable sorted set.">Obtém o número de elementos no conjunto classificado imutável.</summary>
      <returns vsli:raw="The number of elements in the immutable sorted set.">O número de elementos no conjunto classificado imutável.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedSet`1.Empty">
      <summary vsli:raw="Gets an empty immutable sorted set.">Obtém um conjunto classificado imutável vazio.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Enumera o conteúdo de uma árvore binária.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Obtém o elemento na posição atual do enumerador.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">O elemento na posição atual do enumerador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Libera os recursos usados pela instância atual da classe <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator" />.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable sorted set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Avança o enumerador para o próximo elemento do conjunto classificado imutável.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the sorted set.">
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final do conjunto classificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable sorted set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Define o enumerador com sua posição inicial, que é antes do primeiro elemento do conjunto classificado imutável.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">O elemento atual.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes a specified set of items from this immutable sorted set.">Remove um conjunto especificado de itens desse conjunto classificado imutável.</summary>
      <param name="other" vsli:raw="The items to remove from this set.">Os itens a serem removidos desse conjunto.</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">Um novo conjunto com os itens removidos; ou o conjunto original se nenhum dos itens tiverem sido encontrados no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted set.">Retorna um enumerador que itera no conjunto classificado imutável.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">Um enumerador que pode ser usado para iterar no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)">
      <summary vsli:raw="Gets the position within this immutable sorted set that the specified value appears in.">Obtém a posição na qual o valor especificado aparece nesse conjunto classificado imutável.</summary>
      <param name="item" vsli:raw="The value whose position is being sought.">O valor cuja posição está sendo procurada.</param>
      <returns vsli:raw="The index of the specified &lt;paramref name=&quot;item&quot; /&gt; in the sorted set, if &lt;paramref name=&quot;item&quot; /&gt; is found. If &lt;paramref name=&quot;item&quot; /&gt; is not found and is less than one or more elements in this set, this method returns a negative number that is the bitwise complement of the index of the first element that is larger than value. If &lt;paramref name=&quot;item&quot; /&gt; is not found and is greater than any of the elements in the set, this method returns a negative number that is the bitwise complement of the index of the last element plus 1.">O índice do <paramref name="item" /> especificado no conjunto classificado, caso <paramref name="item" /> seja encontrado. Caso <paramref name="item" /> não seja encontrado e for menor que um ou mais elementos nesse conjunto, esse método retornará um número negativo que será o complemento bit a bit do índice do primeiro elemento que for maior que o valor. Caso <paramref name="item" /> não seja encontrado e for maior que qualquer elemento no conjunto, esse método retornará um número negativo que será o complemento bit a bit do índice do último elemento mais 1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable sorted set that contains elements that exist both in this set and in the specified set.">Cria um conjunto classificado imutável que contém elementos que existem neste conjunto e no conjunto especificado.</summary>
      <param name="other" vsli:raw="The set to intersect with this one.">O conjunto a ser interceptado por este.</param>
      <returns vsli:raw="A new immutable sorted set that contains any elements that exist in both sets.">Um novo conjunto classificado imutável que contém quaisquer elementos que existam nos dois conjuntos.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable sorted set is empty.">Obtém um valor que indica se esse conjunto classificado imutável está vazio.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this set is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se esse conjunto estiver vazio; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a proper (strict) subset of the specified collection.">Determina se o conjunto classificado imutável atual é um subconjunto apropriado (estrito) da coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conjunto atual for um subconjunto apropriado do <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a proper superset of a specified collection.">Determina se o conjunto classificado imutável atual é um superconjunto apropriado de uma coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conjunto atual for um superconjunto apropriado de <paramref name="other" />, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a subset of a specified collection.">Determina se o conjunto classificado imutável atual é um subconjunto de uma coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conjunto atual for um subconjunto de <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a superset of a specified collection.">Determina se o conjunto classificado imutável atual é um superconjunto de uma coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conjunto atual for um superconjunto de <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element of the immutable sorted set at the given index.">Obtém o elemento do conjunto classificado imutável no índice especificado.</summary>
      <param name="index" vsli:raw="The index of the element to retrieve from the sorted set.">O índice do elemento a ser recuperado do conjunto classificado.</param>
      <returns vsli:raw="The element at the given index.">O elemento no índice fornecido.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference of the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">Obtém uma referência somente leitura do elemento do conjunto no <paramref name="index" /> especificado.</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">O índice baseado em zero do elemento no conjunto a ser retornado.</param>
      <returns vsli:raw="A read-only reference of the element at the given position.">Uma referência somente leitura do elemento na posição especificada.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.KeyComparer">
      <summary vsli:raw="Gets the comparer used to sort keys in the immutable sorted set.">Obtém o comparador usado para classificar chaves no conjunto classificado imutável.</summary>
      <returns vsli:raw="The comparer used to sort keys.">O comparador usado para classificar chaves.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Max">
      <summary vsli:raw="Gets the maximum value in the immutable sorted set, as defined by the comparer.">Obtém o valor máximo no conjunto classificado imutável, conforme definido pelo comparador.</summary>
      <returns vsli:raw="The maximum value in the set.">O valor máximo no conjunto.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Min">
      <summary vsli:raw="Gets the minimum value in the immutable sorted set, as defined by the comparer.">Obtém o valor mínimo no conjunto classificado imutável, conforme definido pelo comparador.</summary>
      <returns vsli:raw="The minimum value in the set.">O valor mínimo no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set and a specified collection share common elements.">Determina se o conjunto classificado imutável atual e uma coleção especificada compartilham elementos comuns.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o conjunto atual e <paramref name="other" /> compartilharem pelo menos um elemento comum; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified value from this immutable sorted set.">Remove o valor especificado desse conjunto classificado imutável.</summary>
      <param name="value" vsli:raw="The element to remove.">O elemento a ser removido.</param>
      <returns vsli:raw="A new immutable sorted set with the element removed, or this set if the element was not found in the set.">Um novo conjunto classificado imutável com o elemento removido ou esse conjunto se o elemento não for encontrado no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Reverse">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that iterates over this immutable sorted set in reverse order.">Retorna um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que itera nesse conjunto classificado imutável em ordem inversa.</summary>
      <returns vsli:raw="An enumerator that iterates over the immutable sorted set in reverse order.">Um enumerador que itera no conjunto classificado imutável em ordem inversa.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set and the specified collection contain the same elements.">Determina se o conjunto classificado imutável atual e a coleção especificada contêm os mesmos elementos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se os conjuntos forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable sorted set that contains elements that exist either in this set or in a given sequence, but not both.">Cria um conjunto classificado imutável que contém elementos que existem nesse conjunto ou em uma determinada sequência, mas não em ambos.</summary>
      <param name="other" vsli:raw="The other sequence of items.">A outra sequência de itens.</param>
      <returns vsli:raw="The new immutable sorted set.">O novo conjunto classificado imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds the specified value to the collection.">Adiciona o valor especificado à coleção.</summary>
      <param name="item" vsli:raw="The value to add.">O valor a ser adicionado.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all the items from the collection.">Remove todos os itens da coleção.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an array, starting at a particular array index.">Copia os elementos da coleção em uma matriz, começando em um índice de matriz específico.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing.">A matriz unidimensional que é o destino dos elementos copiados da coleção. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Returns true, since immutable collections are always read-only. See the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; interface.">Consulte a interface <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the collection.">Remove a primeira ocorrência de um objeto específico da coleção.</summary>
      <param name="item" vsli:raw="The object to remove from the collection.">O objeto a ser removido da coleção.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="item" /> foi removido da coleção com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retorna um enumerador que itera pela coleção.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Um enumerador que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item in the set at the specified index.">Insere um item no conjunto no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">O índice de base zero no qual o <paramref name="item" /> deve ser inserido.</param>
      <param name="item" vsli:raw="The object to insert into the set.">O objeto a ser inserido no conjunto.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; interface.">Consulte a interface <see cref="T:System.Collections.Generic.IList`1" />.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to access." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">Remove o item no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">O índice com base em zero do item a ser removido.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate if the element was successfully added.">Adiciona um elemento ao conjunto atual e retorna um valor para indicar se ele foi adicionado com êxito.</summary>
      <param name="item" vsli:raw="The element to add to the set.">O elemento a ser adicionado ao conjunto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">
        <see langword="true" /> se o elemento for adicionado ao conjunto; <see langword="false" /> se o elemento já estiver no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current set.">Remove todos os elementos na coleção especificada do conjunto atual.</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">A coleção de itens a serem removidos do conjunto.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">Modifica o conjunto atual para que ele contenha apenas elementos que também estejam em uma coleção especificada</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">Modifica o conjunto atual para que ele contenha somente os elementos presentes no conjunto atual ou na coleção especificada, mas não em ambos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in either the current set or the specified collection.">Modifica o conjunto atual para que ele contenha todos os elementos que estão presentes no conjunto atual ou na coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular array index.">Copia os elementos do conjunto em uma matriz, começando em um índice de matriz específico.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">A matriz unidimensional que é o destino dos elementos copiados do conjunto. A matriz deve ter indexação com base em zero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Returns true, since immutable collections are always thread-safe. See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">Consulte a interface <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Consulte <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retorna um enumerador que itera em uma coleção.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Um objeto enumerador que pode ser usado para iterar na coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the set.">Adiciona um item ao conjunto.</summary>
      <param name="value" vsli:raw="The object to add to the set.">O objeto a ser adicionado ao conjunto.</param>
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.">A posição na qual o novo elemento foi inserido, ou -1 para indicar que o item não foi inserido na coleção.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">O conjunto é somente leitura ou tem um tamanho fixo.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the set.">Remove todos os itens do conjunto.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Gerada em todos os casos.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the set contains a specific value.">Determina se o conjunto contém um valor específico.</summary>
      <param name="value" vsli:raw="The object to locate in the set.">O objeto a ser localizado no conjunto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found in the set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o objeto for encontrado no conjunto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the set.">Determina o índice de um item específico no conjunto.</summary>
      <param name="value" vsli:raw="The object to locate in the set.">O objeto a ser localizado no conjunto.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">O índice de <paramref name="value" /> se encontrado na lista; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the set at the specified index.">Insere um item no conjunto no índice especificado.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">O índice de base zero no qual o <paramref name="value" /> deve ser inserido.</param>
      <param name="value" vsli:raw="The object to insert into the set.">O objeto a ser inserido no conjunto.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">O conjunto é somente leitura ou tem um tamanho fixo.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">Obtém um valor que indica se o <see cref="T:System.Collections.IList" /> tem um tamanho fixo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.IList" /> tiver um valor fixo; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">Obtém ou define o <see cref="T:System.Object" /> no índice especificado.</summary>
      <param name="index" vsli:raw="The index.">O índice.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt;.">O <see cref="T:System.Object" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the set.">Remove a primeira ocorrência de um objeto específico do conjunto.</summary>
      <param name="value" vsli:raw="The object to remove from the set.">O objeto a ser removido do conjunto.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">O conjunto é somente leitura ou tem um tamanho fixo.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the set.">Remove o item no índice especificado do conjunto.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">O índice com base em zero do item a ser removido.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">O conjunto é somente leitura ou tem um tamanho fixo.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">Adiciona o elemento especificado a este conjunto imutável.</summary>
      <param name="value" vsli:raw="The element to add.">O elemento a ser adicionado.</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">Um novo conjunto com o elemento adicionado ou esse conjunto se o elemento já está estiver nele.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary vsli:raw="Retrieves an empty immutable set that has the same sorting and ordering semantics as this instance.">Recupera um conjunto imutável vazio que tem as mesmas semânticas de classificação e ordenação que essa instância.</summary>
      <returns vsli:raw="An empty set that has the same sorting and ordering semantics as this instance.">Um conjunto vazio que tem as mesmas semânticas de classificação e ordenação que essa instância.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable set.">Remove os elementos na coleção especificada do conjunto imutável atual.</summary>
      <param name="other" vsli:raw="The items to remove from this set.">Os itens a serem removidos desse conjunto.</param>
      <returns vsli:raw="The new set with the items removed; or the original set if none of the items were in the set.">O novo conjunto com os itens removidos; ou o conjunto original se nenhum dos itens tiverem sido encontrados no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains elements that exist in both this set and the specified set.">Cria um conjunto imutável que contém elementos que existem em ambos: nesse conjunto e no conjunto especificado.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">Um novo conjunto imutável que contém quaisquer elementos que existam nos dois conjuntos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">Remove o elemento especificado desse conjunto imutável.</summary>
      <param name="value" vsli:raw="The element to remove.">O elemento a ser removido.</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">Um novo conjunto com o elemento especificado removido ou o conjunto atual se o elemento não puder ser encontrado no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">Cria um conjunto imutável que contém somente os elementos que estão presentes no conjunto atual ou na coleção especificada, mas não em ambos.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">A coleção a ser comparada com o conjunto atual.</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">Um novo conjunto que contém os elementos que estão presentes somente no conjunto atual ou na coleção especificada, mas não em ambos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">Cria um novo conjunto imutável que contém todos os elementos que estão presentes no conjunto atual ou na coleção especificada.</summary>
      <param name="other" vsli:raw="The collection to add elements from.">A coleção da qual os elementos serão adicionados.</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">Um novo conjunto imutável com os itens adicionados; ou o conjunto original se todos os itens já estiverem no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder">
      <summary vsli:raw="Creates a collection that has the same contents as this immutable sorted set that can be efficiently manipulated by using standard mutable interfaces.">Cria uma coleção que tem o mesmo conteúdo que esse conjunto classificado imutável e que pode ser manipulada com eficiência usando as interfaces mutáveis padrão.</summary>
      <returns vsli:raw="The sorted set builder.">O construtor de conjunto classificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">Pesquisa um determinado valor no conjunto e retorna o valor igual que for encontrado, se houver.</summary>
      <param name="equalValue" vsli:raw="The value to search for.">O valor a ser procurado.</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the original value if the search yielded no match.">O valor do conjunto que foi encontrado pela pesquisa ou o valor original, se a pesquisa não gerou correspondência.</param>
      <returns vsli:raw="A value indicating whether the search was successful.">Um valor que indica se a pesquisa foi bem-sucedida.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds a given set of items to this immutable sorted set.">Adiciona um determinado conjunto de itens a esse conjunto classificado imutável.</summary>
      <param name="other" vsli:raw="The items to add.">Os itens a serem adicionados.</param>
      <returns vsli:raw="The new set with the items added; or the original set if all the items were already in the set.">O novo conjunto com os itens adicionados; ou o conjunto original se todos os itens já estiverem no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Returns the immutable sorted set that has the specified key comparer.">Retorna o conjunto classificado imutável que tem o comparador de chave especificado.</summary>
      <param name="comparer" vsli:raw="The comparer to check for.">O comparador a ser usado para verificar.</param>
      <returns vsli:raw="The immutable sorted set that has the specified key comparer.">O conjunto classificado imutável que tem o comparador de chave especificado.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableStack`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Fornece um conjunto de métodos de inicialização para instâncias da classe <see cref="T:System.Collections.Immutable.ImmutableStack`1" />.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1">
      <summary vsli:raw="Creates an empty immutable stack.">Cria uma pilha imutável vazia.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable stack.">O tipo de itens a serem armazenados na pilha imutável.</typeparam>
      <returns vsli:raw="An empty immutable stack.">Uma pilha imutável vazia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable stack that contains the specified item.">Cria uma nova pilha imutável que contém o item especificado.</summary>
      <param name="item" vsli:raw="The item to prepopulate the stack with.">O item com o qual preencher previamente a pilha.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable stack.">O tipo de itens na pilha imutável.</typeparam>
      <returns vsli:raw="A new immutable collection that contains the specified item.">Uma nova coleção imutável que contém o item especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable stack that contains the specified array of items.">Cria uma nova pilha imutável que contém a matriz especificada de itens.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the stack with.">Uma matriz que contém os itens com os quais preencher previamente a pilha.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable stack.">O tipo de itens na pilha imutável.</typeparam>
      <returns vsli:raw="A new immutable stack that contains the specified items.">Uma nova pilha imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable stack that contains the specified items.">Cria uma nova pilha imutável que contém os itens especificados.</summary>
      <param name="items" vsli:raw="The items to add to the stack before it's immutable.">Os itens a serem adicionados à pilha antes que ela seja imutável.</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">O tipo de itens na pilha.</typeparam>
      <returns vsli:raw="An immutable stack that contains the specified items.">Uma pilha imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Pop``1(System.Collections.Immutable.IImmutableStack{``0},``0@)">
      <summary vsli:raw="Removes the specified item from an immutable stack.">Remove o item especificado de uma pilha imutável.</summary>
      <param name="stack" vsli:raw="The stack to modify.">A pilha a ser modificada.</param>
      <param name="value" vsli:raw="The item to remove from the stack.">O item a ser removido da pilha.</param>
      <typeparam name="T" vsli:raw="The type of items contained in the stack.">O tipo de itens contidos na pilha.</typeparam>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">Uma pilha; nunca <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">A pilha está vazia.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1">
      <summary vsli:raw="Represents an immutable stack.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Representa uma pilha imutável.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" vsli:raw="The type of element on the stack.">O tipo de elemento na pilha.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable stack.">Remove todos os objetos da pilha imutável.</summary>
      <returns vsli:raw="An empty immutable stack.">Uma pilha imutável vazia.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Empty">
      <summary vsli:raw="Gets an empty immutable stack.">Obtém uma pilha imutável vazia.</summary>
      <returns vsli:raw="An empty immutable stack.">Uma pilha imutável vazia.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of an immutable stack without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Enumera o conteúdo de uma pilha imutável sem qualquer alocação de memória.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Obtém o elemento na posição atual do enumerador.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">O elemento na posição atual do enumerador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable stack.">Avança o enumerador para o próximo elemento da pilha imutável.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the stack.">
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final da pilha.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable stack.">Retorna um enumerador que itera na pilha imutável.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the stack.">Um enumerador que pode ser usado para iterar na pilha.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable stack is empty.">Obtém um valor que indica se essa instância da pilha imutável está vazia.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se esta instância estiver vazia; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Peek">
      <summary vsli:raw="Returns the object at the top of the stack without removing it.">Retorna o objeto que está no topo da pilha sem removê-lo.</summary>
      <returns vsli:raw="The object at the top of the stack.">O objeto no topo da pilha.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">A pilha está vazia.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.PeekRef">
      <summary vsli:raw="Gets a read-only reference to the element on the top of the stack.">Obtém uma referência somente leitura ao elemento no início da pilha.</summary>
      <returns vsli:raw="A read-only reference to the element on the top of the stack.">Uma referência somente leitura ao elemento no início da pilha.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">Gerada quando a pilha está vazia.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the stack after the removal.">Remove o elemento que está no topo da pilha imutável e retorna a pilha após a remoção.</summary>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">Uma pilha; nunca <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">A pilha está vazia.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop(`0@)">
      <summary vsli:raw="Removes the specified element from the immutable stack and returns the stack after the removal.">Remove o elemento especificado da pilha imutável e retorna a pilha após a remoção.</summary>
      <param name="value" vsli:raw="The value to remove from the stack.">O valor a ser removido da pilha.</param>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">Uma pilha; nunca <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Push(`0)">
      <summary vsli:raw="Inserts an object at the top of the immutable stack and returns the new stack.">Insere um objeto no topo da pilha imutável e retorna a nova pilha.</summary>
      <param name="value" vsli:raw="The object to push onto the stack.">O objeto a ser enviado por push para a pilha.</param>
      <returns vsli:raw="The new stack.">A nova pilha.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Retorna um enumerador que itera pela coleção.</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the collection.">Um enumerador que pode ser usado para iterar na coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retorna um enumerador que itera em uma coleção.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object that can be used to iterate through the collection.">Um objeto <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Clear">
      <summary vsli:raw="Removes all elements from the immutable stack.">Remove todos os elementos da pilha imutável.</summary>
      <returns vsli:raw="The empty immutable stack.">A pilha imutável vazia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the new stack.">Remove o elemento que está na parte superior da pilha imutável e retorna a nova pilha.</summary>
      <returns vsli:raw="The new stack; never &lt;see langword=&quot;null&quot; /&gt;.">A nova pilha; nunca <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Push(`0)">
      <summary vsli:raw="Inserts an element at the top of the immutable stack and returns the new stack.">Insere um elemento na parte superior da pilha imutável e retorna a nova pilha.</summary>
      <param name="value" vsli:raw="The element to push onto the stack.">O elemento a ser enviado por push para a pilha.</param>
      <returns vsli:raw="The new stack.">A nova pilha.</returns>
    </member>
    <member name="T:System.Linq.ImmutableArrayExtensions">
      <summary vsli:raw="LINQ extension method overrides that offer greater efficiency for &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; than the standard LINQ methods  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Substituições de método de extensão LINQ que oferecem maior eficiência para <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> que os métodos LINQ padrão 
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">Aplica uma função a uma sequência de elementos de uma maneira cumulativa.</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">A coleção à qual aplicar a função.</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">Uma função a ser invocada em cada elemento, de modo cumulativo.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">O tipo de elemento contido na coleção.</typeparam>
      <returns vsli:raw="The final value after the cumulative function has been applied to all elements.">O valor final depois que a função cumulativa foi aplicada a todos os elementos.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">Aplica uma função a uma sequência de elementos de uma maneira cumulativa.</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">A coleção à qual aplicar a função.</param>
      <param name="seed" vsli:raw="The initial accumulator value.">O valor inicial do acumulador.</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">Uma função a ser invocada em cada elemento, de modo cumulativo.</param>
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulated value.">O tipo do valor acumulado.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">O tipo de elemento contido na coleção.</typeparam>
      <returns vsli:raw="The final accumulator value.">O valor final do acumulador.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">Aplica uma função a uma sequência de elementos de uma maneira cumulativa.</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">A coleção à qual aplicar a função.</param>
      <param name="seed" vsli:raw="The initial accumulator value.">O valor inicial do acumulador.</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">Uma função a ser invocada em cada elemento, de modo cumulativo.</param>
      <param name="resultSelector" vsli:raw="A function to transform the final accumulator value into the result type." />
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulated value.">O tipo do valor acumulado.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of result returned by the result selector.">O tipo de resultado retornado pelo seletor de resultado.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">O tipo de elemento contido na coleção.</typeparam>
      <returns vsli:raw="The final accumulator value.">O valor final do acumulador.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Gets a value indicating whether all elements in this array match a given condition.">Obtém um valor que indica se todos os elementos nesta matriz correspondem a uma determinada condição.</summary>
      <param name="immutableArray" vsli:raw="The array to check for matches.">A matriz na qual verificar se há correspondências.</param>
      <param name="predicate" vsli:raw="The predicate.">O predicado.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">O tipo de elemento contido na coleção.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element of the source sequence passes the test in the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se todos os elementos da sequência de origem forem aprovados no teste no predicado especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Gets a value indicating whether the array contains any elements.">Obtém um valor que indica se a matriz contém elementos.</summary>
      <param name="immutableArray" vsli:raw="The array to check for elements.">A matriz na qual verificar se há elementos.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">O tipo de elemento contido na coleção.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array contains an elements; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a matriz contém elementos; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Gets a value indicating whether the array contains any elements that match a specified condition.">Obtém um valor que indica se a matriz contém elementos correspondentes a uma condição especificada.</summary>
      <param name="immutableArray" vsli:raw="The array to check for elements.">A matriz na qual verificar se há elementos.</param>
      <param name="predicate" vsli:raw="The delegate that defines the condition to match to an element.">O delegado que define a condição para corresponder a um elemento.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">O tipo de elemento contido na coleção.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element matches the specified condition; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se um elemento corresponder à condição especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns a value indicating whether this collection contains any elements.">Retorna um valor que indica se esta coleção contém quaisquer elementos.</summary>
      <param name="builder" vsli:raw="The builder to check for matches.">O construtor no qual verificar se há correspondências.</param>
      <typeparam name="T" vsli:raw="The type of elements in the array.">O tipo dos elementos na matriz.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array builder contains any elements; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o construtor da matriz contiver elementos; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in the array.">Retorna o elemento de um índice especificado na matriz.</summary>
      <param name="immutableArray" vsli:raw="The array to find an element in.">A matriz na qual localizar um elemento.</param>
      <param name="index" vsli:raw="The index for the element to retrieve.">O índice do elemento a se recuperar.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">O tipo de elemento contido na coleção.</typeparam>
      <returns vsli:raw="The item at the specified index.">O item no índice especificado.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in a sequence or a default value if the index is out of range.">Retorna o elemento em um índice especificado em uma sequência ou um valor padrão se o índice estiver fora do intervalo.</summary>
      <param name="immutableArray" vsli:raw="The array to find an element in.">A matriz na qual localizar um elemento.</param>
      <param name="index" vsli:raw="The index for the element to retrieve.">O índice do elemento a se recuperar.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">O tipo de elemento contido na coleção.</typeparam>
      <returns vsli:raw="The item at the specified index, or the default value if the index is not found.">O item no índice especificado ou o valor padrão se o índice não for encontrado.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the first element in an array.">Retorna o primeiro elemento em uma matriz.</summary>
      <param name="immutableArray" vsli:raw="The array to get an item from.">A matriz da qual obter um item.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">O tipo de elemento contido na coleção.</typeparam>
      <returns vsli:raw="The first item in the array.">O primeiro item na matriz.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">Se a matriz está vazia.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the first element in a sequence that satisfies a specified condition.">Retorna o primeiro elemento em uma sequência que satisfaz uma condição especificada.</summary>
      <param name="immutableArray" vsli:raw="The array to get an item from.">A matriz da qual obter um item.</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">O delegado que define as condições do elemento a ser pesquisado.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">O tipo de elemento contido na coleção.</typeparam>
      <returns vsli:raw="The first item in the list if it meets the condition specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">O primeiro item na lista se ele atende à condição especificada por <paramref name="predicate" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">Se a matriz está vazia.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the first element in the collection.">Retorna o primeiro elemento na coleção.</summary>
      <param name="builder" vsli:raw="The builder to retrieve an item from.">O construtor do qual recuperar um item.</param>
      <typeparam name="T" vsli:raw="The type of items in the array.">O tipo de itens na matriz.</typeparam>
      <returns vsli:raw="The first item in the list.">O primeiro item na lista.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">Se a matriz está vazia.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the first element of a sequence, or a default value if the sequence contains no elements.">Retorna o primeiro elemento de uma sequência ou um valor padrão se a sequência não contém elementos.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">A matriz da qual recuperar itens.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">O tipo de elemento contido na coleção.</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">O primeiro item na lista, se encontrado; caso contrário, o valor padrão para o tipo de item.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.">Retorna o primeiro elemento da sequência que satisfaz uma condição ou um valor padrão, caso esse elemento não seja encontrado.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve elements from.">A matriz da qual recuperar elementos.</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">O delegado que define as condições do elemento a ser pesquisado.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">O tipo de elemento contido na coleção.</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">O primeiro item na lista, se encontrado; caso contrário, o valor padrão para o tipo de item.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the first element in the collection, or the default value if the collection is empty.">Retorna o primeiro elemento na coleção ou o valor padrão, se a coleção está vazia.</summary>
      <param name="builder" vsli:raw="The builder to retrieve an element from.">O construtor do qual recuperar um elemento.</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">O tipo de item no construtor.</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">O primeiro item na lista, se encontrado; caso contrário, o valor padrão para o tipo de item.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the last element of the array.">Retorna o último elemento da matriz.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">A matriz da qual recuperar itens.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the array.">O tipo de elemento contido na matriz.</typeparam>
      <returns vsli:raw="The last element in the array.">O último elemento na matriz.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">Gerada se a coleção está vazia.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a specified condition.">Retorna o último elemento de uma sequência que satisfaz uma condição especificada.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve elements from.">A matriz da qual recuperar elementos.</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to retrieve.">O delegado que define as condições do elemento a recuperar.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">O tipo de elemento contido na coleção.</typeparam>
      <returns vsli:raw="The last element of the array that satisfies the &lt;paramref name=&quot;predicate&quot; /&gt; condition.">O último elemento da matriz que satisfaz a condição <paramref name="predicate" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">Gerada se a coleção está vazia.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the last element in the collection.">Retorna o último elemento na coleção.</summary>
      <param name="builder" vsli:raw="The builder to retrieve elements from.">O construtor do qual recuperar elementos.</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">O tipo de item no construtor.</typeparam>
      <returns vsli:raw="The last element in the builder.">O último elemento no construtor.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">Gerada se a coleção está vazia.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the last element of a sequence, or a default value if the sequence contains no elements.">Retorna o último elemento de uma sequência ou um valor padrão se a sequência não contém elementos.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">A matriz da qual recuperar itens.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">O tipo de elemento contido na coleção.</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">O último elemento de uma sequência ou um valor padrão se a sequência não contém elementos.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.">Retorna o último elemento de uma sequência que satisfaz uma condição ou um valor padrão, caso esse elemento não seja encontrado.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve an element from.">A matriz da qual recuperar um elemento.</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">O delegado que define as condições do elemento a ser pesquisado.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">O tipo de elemento contido na coleção.</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">O último elemento de uma sequência ou um valor padrão se a sequência não contém elementos.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the last element in the collection, or the default value if the collection is empty.">Retorna o último elemento na coleção, ou o valor padrão se a coleção está vazia.</summary>
      <param name="builder" vsli:raw="The builder to retrieve an element from.">O construtor do qual recuperar um elemento.</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">O tipo de item no construtor.</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">O último elemento de uma sequência ou um valor padrão se a sequência não contém elementos.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary vsli:raw="Projects each element of a sequence into a new form.">Projeta cada elemento de uma sequência em um novo formulário.</summary>
      <param name="immutableArray" vsli:raw="The immutable array to select items from.">A matriz imutável da qual selecionar itens.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">O tipo de elemento contido na coleção.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result element.">O tipo do elemento de resultado.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result of invoking the transform function on each element of source.">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos são o resultado da invocação da função de transformação em cada elemento da origem.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;,             flattens the resulting sequences into one sequence, and invokes a result             selector function on each element therein.">Projeta cada elemento de uma sequência em um <see cref="T:System.Collections.Generic.IEnumerable`1" />, mescla as sequências resultantes em uma sequência e chama uma função de seletor de resultado em cada elemento contido nele.</summary>
      <param name="immutableArray" vsli:raw="The immutable array.">A matriz imutável.</param>
      <param name="collectionSelector" vsli:raw="A transform function to apply to each element of the input sequence.">Uma função de transformação a ser aplicada a cada elemento da sequência de entrada.</param>
      <param name="resultSelector" vsli:raw="A transform function to apply to each element of the intermediate sequence.">Uma função de transformação a ser aplicada a cada elemento da sequência intermediária.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;immutableArray&quot; /&gt;.">O tipo dos elementos de <paramref name="immutableArray" />.</typeparam>
      <typeparam name="TCollection" vsli:raw="The type of the intermediate elements collected by &lt;paramref name=&quot;collectionSelector&quot; /&gt;.">O tipo dos elementos intermediários coletados por <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the resulting sequence.">O tipo dos elementos da sequência resultante.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result             of invoking the one-to-many transform function &lt;paramref name=&quot;collectionSelector&quot; /&gt; on each             element of &lt;paramref name=&quot;immutableArray&quot; /&gt; and then mapping each of those sequence elements and their             corresponding source element to a result element.">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos são o resultado de chamar a função de transformação de um para muitos <paramref name="collectionSelector" /> em cada elemento de <paramref name="immutableArray" /> e, em seguida, mapear cada um desses elementos de sequência e seu elemento de origem correspondente para um elemento de resultado.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">Determina se duas sequências são iguais de acordo com um comparador de igualdade.</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">A matriz a ser usada para comparação.</param>
      <param name="items" vsli:raw="The items to use for comparison.">Os itens a serem usados para comparação.</param>
      <param name="comparer" vsli:raw="The comparer to use to check for equality.">O comparador a ser usado para verificar quanto à igualdade.</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">O tipo de elemento na matriz comparada.</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">O tipo de elemento contido na coleção.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para indicar que as sequências são iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">Determina se duas sequências são iguais de acordo com um comparador de igualdade.</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">A matriz a ser usada para comparação.</param>
      <param name="items" vsli:raw="The items to use for comparison.">Os itens a serem usados para comparação.</param>
      <param name="comparer" vsli:raw="The comparer to use to check for equality.">O comparador a ser usado para verificar quanto à igualdade.</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">O tipo de elemento na matriz comparada.</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">O tipo de elemento contido na coleção.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para indicar que as sequências são iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">Determina se duas sequências são iguais de acordo com um comparador de igualdade.</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">A matriz a ser usada para comparação.</param>
      <param name="items" vsli:raw="The items to use for comparison.">Os itens a serem usados para comparação.</param>
      <param name="predicate" vsli:raw="The comparer to use to check for equality.">O comparador a ser usado para verificar quanto à igualdade.</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">O tipo de elemento na matriz comparada.</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">O tipo de elemento contido na coleção.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para indicar que as sequências são iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.">Retornará o único elemento de uma sequência e lançará uma exceção se não houver exatamente um elemento na sequência.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve the element from.">A matriz da qual recuperar o elemento.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">O tipo de elemento contido na coleção.</typeparam>
      <returns vsli:raw="The element in the sequence.">O elemento na sequência.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.">Retorna o único elemento de uma sequência que satisfaz uma condição especificada e gera uma exceção se houver mais de um tal elemento.</summary>
      <param name="immutableArray" vsli:raw="The immutable array to return a single element from." />
      <param name="predicate" vsli:raw="The function to test whether an element should be returned." />
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">O tipo de elemento contido na coleção.</typeparam>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">Retorna <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the only element of the array, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.">Retorna o único elemento da matriz ou um valor padrão se a sequência é vazia; esse método gera uma exceção se há mais de um elemento na sequência.</summary>
      <param name="immutableArray" vsli:raw="The array.">A matriz.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">O tipo de elemento contido na coleção.</typeparam>
      <returns vsli:raw="The element in the array, or the default value if the array is empty.">O elemento da matriz ou o valor padrão, se a matriz está vazia.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains more than one element.">
        <paramref name="source" /> contém mais de um elemento.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.">Retorna o único elemento de uma sequência que satisfaz uma condição especificada ou um valor padrão se esse elemento não existir. Esse método lança uma exceção se mais de um elemento satisfizer a condição.</summary>
      <param name="immutableArray" vsli:raw="The array to get the element from.">A matriz da qual obter o elemento.</param>
      <param name="predicate" vsli:raw="The condition the element must satisfy.">A condição que o elemento deve satisfazer.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">O tipo de elemento contido na coleção.</typeparam>
      <returns vsli:raw="The element if it satisfies the specified condition; otherwise the default element.">O elemento, se ele atende à condição especificada; caso contrário, o elemento padrão.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="More than one element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.">Mais de um elemento satisfaz a condição na <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Copies the contents of this array to a mutable array.">Copia o conteúdo dessa matriz para uma matriz mutável.</summary>
      <param name="immutableArray" vsli:raw="The immutable array to copy into a mutable one." />
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">O tipo de elemento contido na coleção.</typeparam>
      <returns vsli:raw="The newly instantiated array.">A matriz recém-instanciada.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">Cria um dicionário com base no conteúdo desta matriz.</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">A matriz com base na qual criar um dicionário.</param>
      <param name="keySelector" vsli:raw="The key selector.">O seletor de chave.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Tipo da chave.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">O tipo de elemento contido na coleção.</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">O dicionário recentemente inicializado.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">Cria um dicionário com base no conteúdo desta matriz.</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">A matriz com base na qual criar um dicionário.</param>
      <param name="keySelector" vsli:raw="The key selector.">O seletor de chave.</param>
      <param name="comparer" vsli:raw="The comparer to initialize the dictionary with.">O comparador com o qual inicializar o dicionário.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Tipo da chave.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">O tipo de elemento contido na coleção.</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">O dicionário recentemente inicializado.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">Cria um dicionário com base no conteúdo desta matriz.</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">A matriz com base na qual criar um dicionário.</param>
      <param name="keySelector" vsli:raw="The key selector.">O seletor de chave.</param>
      <param name="elementSelector" vsli:raw="The element selector.">O seletor de elemento.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Tipo da chave.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the element.">O tipo do elemento.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">O tipo de elemento contido na coleção.</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">O dicionário recentemente inicializado.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">Cria um dicionário com base no conteúdo desta matriz.</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">A matriz com base na qual criar um dicionário.</param>
      <param name="keySelector" vsli:raw="The key selector.">O seletor de chave.</param>
      <param name="elementSelector" vsli:raw="The element selector.">O seletor de elemento.</param>
      <param name="comparer" vsli:raw="The comparer to initialize the dictionary with.">O comparador com o qual inicializar o dicionário.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Tipo da chave.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the element.">O tipo do elemento.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">O tipo de elemento contido na coleção.</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">O dicionário recentemente inicializado.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Filters a sequence of values based on a predicate.">Filtra uma sequência de valores com base em um predicado.</summary>
      <param name="immutableArray" vsli:raw="The array to filter.">A matriz a filtrar.</param>
      <param name="predicate" vsli:raw="The condition to use for filtering the array content.">A condição a ser usada para filtrar o conteúdo da matriz.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">O tipo de elemento contido na coleção.</typeparam>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains elements that meet the condition.">Retorna <see cref="T:System.Collections.Generic.IEnumerable`1" />, que contém elementos que atendem à condição.</returns>
    </member>
  </members>
</doc>
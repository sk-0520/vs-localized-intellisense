<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Threading.ThreadPool</name>
  </assembly>
  <members>
    <member name="T:System.Threading.IThreadPoolWorkItem">
      <summary vsli:raw="Represents a work item that can be executed by the &lt;see cref=&quot;T:System.Threading.ThreadPool&quot; /&gt;.">表示可由 <see cref="T:System.Threading.ThreadPool" /> 执行的工作项。</summary>
    </member>
    <member name="M:System.Threading.IThreadPoolWorkItem.Execute">
      <summary vsli:raw="Executes the work item on the thread pool.">在线程池中执行工作项。</summary>
    </member>
    <member name="T:System.Threading.RegisteredWaitHandle">
      <summary vsli:raw="Represents a handle that has been registered when calling &lt;see cref=&quot;M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)&quot; /&gt;. This class cannot be inherited.">表示在调用 <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> 时已注册的句柄。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
      <summary vsli:raw="Cancels a registered wait operation issued by the &lt;see cref=&quot;M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)&quot; /&gt; method.">取消由 <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> 方法发出的已注册等待操作。</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to be signaled.">要发出信号的 <see cref="T:System.Threading.WaitHandle" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the function succeeds; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果函数成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.ThreadPool">
      <summary vsli:raw="Provides a pool of threads that can be used to execute tasks, post work items, process asynchronous I/O, wait on behalf of other threads, and process timers.">提供一个线程池，该线程池可用于执行任务、发送工作项、处理异步 I/O、代表其他线程等待以及处理计时器。</summary>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
      <summary vsli:raw="Binds an operating system handle to the &lt;see cref=&quot;T:System.Threading.ThreadPool&quot; /&gt;.">将操作系统句柄绑定到 <see cref="T:System.Threading.ThreadPool" />。</summary>
      <param name="osHandle" vsli:raw="An &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; that holds the handle. The handle must have been opened for overlapped I/O on the unmanaged side.">持有句柄的 <see cref="T:System.IntPtr" />。 在非托管端必须为重叠 I/O 打开该句柄。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the handle is bound; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果绑定了句柄，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
      <summary vsli:raw="Binds an operating system handle to the &lt;see cref=&quot;T:System.Threading.ThreadPool&quot; /&gt;.">将操作系统句柄绑定到 <see cref="T:System.Threading.ThreadPool" />。</summary>
      <param name="osHandle" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.SafeHandle&quot; /&gt; that holds the operating system handle. The handle must have been opened for overlapped I/O on the unmanaged side.">保存操作系统句柄的 <see cref="T:System.Runtime.InteropServices.SafeHandle" />。 在非托管端必须为重叠 I/O 打开该句柄。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the handle is bound; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果绑定了句柄，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;osHandle&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="osHandle" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Threading.ThreadPool.CompletedWorkItemCount">
      <summary vsli:raw="Gets the number of work items that have been processed so far.">获取迄今为止已处理的工作项数。</summary>
      <returns vsli:raw="The number of work items that have been processed so far.">到目前为止已处理的工作项的数目。</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
      <summary vsli:raw="Retrieves the difference between the maximum number of thread pool threads returned by the &lt;see cref=&quot;M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)&quot; /&gt; method, and the number currently active.">检索由 <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> 方法返回的最大线程池线程数和当前活动线程数之间的差值。</summary>
      <param name="workerThreads" vsli:raw="The number of available worker threads.">可用辅助线程的数目。</param>
      <param name="completionPortThreads" vsli:raw="The number of available asynchronous I/O threads.">可用异步 I/O 线程的数目。</param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
      <summary vsli:raw="Retrieves the number of requests to the thread pool that can be active concurrently. All requests above that number remain queued until thread pool threads become available.">检索可以同时处于活动状态的线程池请求的数目。 所有大于此数目的请求将保持排队状态，直到线程池线程变为可用。</summary>
      <param name="workerThreads" vsli:raw="The maximum number of worker threads in the thread pool.">线程池中辅助线程的最大数目。</param>
      <param name="completionPortThreads" vsli:raw="The maximum number of asynchronous I/O threads in the thread pool.">线程池中异步 I/O 线程的最大数目。</param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
      <summary vsli:raw="Retrieves the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.">发出新的请求时，在切换到管理线程创建和销毁的算法之前检索线程池按需创建的线程的最小数量。</summary>
      <param name="workerThreads" vsli:raw="When this method returns, contains the minimum number of worker threads that the thread pool creates on demand.">当此方法返回时，将包含线程池根据需要创建的最少数量的辅助线程。</param>
      <param name="completionPortThreads" vsli:raw="When this method returns, contains the minimum number of asynchronous I/O threads that the thread pool creates on demand.">当此方法返回时，将包含线程池根据需要创建的最少数量的异步 I/O 线程。</param>
    </member>
    <member name="P:System.Threading.ThreadPool.PendingWorkItemCount">
      <summary vsli:raw="Gets the number of work items that are currently queued to be processed.">获取当前已加入处理队列的工作项数。</summary>
      <returns vsli:raw="The number of work items that are currently queued to be processed.">当前排队等候处理的工作项的数目。</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
      <summary vsli:raw="Queues a method for execution. The method executes when a thread pool thread becomes available.">将方法排入队列以便执行。 此方法在有线程池线程变得可用时执行。</summary>
      <param name="callBack" vsli:raw="A &lt;see cref=&quot;T:System.Threading.WaitCallback&quot; /&gt; that represents the method to be executed.">一个 <see cref="T:System.Threading.WaitCallback" />，表示要执行的方法。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is successfully queued; &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; is thrown if the work item could not be queued.">如果此方法成功排队，则为 <see langword="true" />；如果无法将该工作项排队，则引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;callBack&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="callBack" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The common language runtime (CLR) is hosted, and the host does not support this action.">承载公共语言运行时 (CLR) 的宿主不支持此操作。</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary vsli:raw="Queues a method for execution, and specifies an object containing data to be used by the method. The method executes when a thread pool thread becomes available.">将方法排入队列以便执行，并指定包含该方法所用数据的对象。 此方法在有线程池线程变得可用时执行。</summary>
      <param name="callBack" vsli:raw="A &lt;see cref=&quot;T:System.Threading.WaitCallback&quot; /&gt; representing the method to execute.">
        <see cref="T:System.Threading.WaitCallback" />，它表示要执行的方法。</param>
      <param name="state" vsli:raw="An object containing data to be used by the method.">包含方法所用数据的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is successfully queued; &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; is thrown if the work item could not be queued.">如果此方法成功排队，则为 <see langword="true" />；如果无法将该工作项排队，则引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The common language runtime (CLR) is hosted, and the host does not support this action.">承载公共语言运行时 (CLR) 的宿主不支持此操作。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;callBack&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="callBack" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)">
      <summary vsli:raw="Queues a method specified by an &lt;see cref=&quot;T:System.Action`1&quot; /&gt; delegate for execution, and provides data to be used by the method. The method executes when a thread pool thread becomes available.">将 <see cref="T:System.Action`1" /> 委托指定的方法排入队列以便执行，并提供该方法使用的数据。 此方法在有线程池线程变得可用时执行。</summary>
      <param name="callBack" vsli:raw="An &lt;see cref=&quot;T:System.Action`1&quot; /&gt; representing the method to execute.">
        <see cref="T:System.Action`1" />，它表示要执行的方法。</param>
      <param name="state" vsli:raw="An object containing data to be used by the method.">包含方法所用数据的对象。</param>
      <param name="preferLocal" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to prefer queueing the work item in a queue close to the current thread; &lt;see langword=&quot;false&quot; /&gt; to prefer queueing the work item to the thread pool's shared queue.">
        <see langword="true" /> 表示首选在靠近当前线程的队列中对工作项进行排队；<see langword="false" /> 则表示首选将工作项排队到线程池的共享队列中。</param>
      <typeparam name="TState" vsli:raw="The type of elements of &lt;paramref name=&quot;state&quot; /&gt;.">
        <paramref name="state" /> 的元素类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is successfully queued; &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; is thrown if the work item could not be queued.">如果此方法成功排队，则为 <see langword="true" />；如果无法将该工作项排队，则引发 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, specifying a 32-bit signed integer for the time-out in milliseconds.">注册一个等待 <see cref="T:System.Threading.WaitHandle" /> 的委托，并指定一个 32 位有符号整数来表示超时值（以毫秒为单位）。</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">要注册的 <see cref="T:System.Threading.WaitHandle" />。 使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。</param>
      <param name="callBack" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitOrTimerCallback&quot; /&gt; delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">向 <paramref name="waitObject" /> 参数发出信号时调用的 <see cref="T:System.Threading.WaitOrTimerCallback" /> 委托。</param>
      <param name="state" vsli:raw="The object that is passed to the delegate.">传递给委托的对象。</param>
      <param name="millisecondsTimeOutInterval" vsli:raw="The time-out in milliseconds. If the &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; is -1, the function's time-out interval never elapses.">以毫秒为单位的超时。 如果 <paramref name="millisecondsTimeOutInterval" /> 参数为 0（零），函数将测试对象的状态并立即返回。 如果 <paramref name="millisecondsTimeOutInterval" /> 为 -1，则函数的超时间隔永远不过期。</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <paramref name="waitObject" /> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; that encapsulates the native handle.">封装本机句柄的 <see cref="T:System.Threading.RegisteredWaitHandle" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is less than -1.">
        <paramref name="millisecondsTimeOutInterval" /> 参数小于 -1。</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, specifying a 64-bit signed integer for the time-out in milliseconds.">注册一个等待 <see cref="T:System.Threading.WaitHandle" /> 的委托，并指定一个 64 位有符号整数来表示超时值（以毫秒为单位）。</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">要注册的 <see cref="T:System.Threading.WaitHandle" />。 使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。</param>
      <param name="callBack" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitOrTimerCallback&quot; /&gt; delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">向 <paramref name="waitObject" /> 参数发出信号时调用的 <see cref="T:System.Threading.WaitOrTimerCallback" /> 委托。</param>
      <param name="state" vsli:raw="The object passed to the delegate.">传递给委托的对象。</param>
      <param name="millisecondsTimeOutInterval" vsli:raw="The time-out in milliseconds. If the &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; is -1, the function's time-out interval never elapses.">以毫秒为单位的超时。 如果 <paramref name="millisecondsTimeOutInterval" /> 参数为 0（零），函数将测试对象的状态并立即返回。 如果 <paramref name="millisecondsTimeOutInterval" /> 为 -1，则函数的超时间隔永远不过期。</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <paramref name="waitObject" /> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; that encapsulates the native handle.">封装本机句柄的 <see cref="T:System.Threading.RegisteredWaitHandle" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is less than -1.">
        <paramref name="millisecondsTimeOutInterval" /> 参数小于 -1。</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, specifying a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; value for the time-out.">注册一个等待 <see cref="T:System.Threading.WaitHandle" /> 的委托，并指定一个 <see cref="T:System.TimeSpan" /> 值来表示超时时间。</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">要注册的 <see cref="T:System.Threading.WaitHandle" />。 使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。</param>
      <param name="callBack" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitOrTimerCallback&quot; /&gt; delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">向 <paramref name="waitObject" /> 参数发出信号时调用的 <see cref="T:System.Threading.WaitOrTimerCallback" /> 委托。</param>
      <param name="state" vsli:raw="The object passed to the delegate.">传递给委托的对象。</param>
      <param name="timeout" vsli:raw="The time-out represented by a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt;. If &lt;paramref name=&quot;timeout&quot; /&gt; is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;timeout&quot; /&gt; is -1, the function's time-out interval never elapses.">
        <see cref="T:System.TimeSpan" /> 表示的超时时间。 如果 <paramref name="timeout" /> 为 0（零），则函数将测试对象的状态并立即返回。 如果 <paramref name="timeout" /> 为 -1，则函数的超时间隔永远不过期。</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <paramref name="waitObject" /> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; that encapsulates the native handle.">封装本机句柄的 <see cref="T:System.Threading.RegisteredWaitHandle" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;timeout&quot; /&gt; parameter is less than -1.">
        <paramref name="timeout" /> 参数小于 -1。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;paramref name=&quot;timeout&quot; /&gt; parameter is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="timeout" /> 参数大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, specifying a 32-bit unsigned integer for the time-out in milliseconds.">指定表示超时（以毫秒为单位）的 32 位无符号整数，注册一个委托等待 <see cref="T:System.Threading.WaitHandle" />。</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">要注册的 <see cref="T:System.Threading.WaitHandle" />。 使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。</param>
      <param name="callBack" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitOrTimerCallback&quot; /&gt; delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">向 <paramref name="waitObject" /> 参数发出信号时调用的 <see cref="T:System.Threading.WaitOrTimerCallback" /> 委托。</param>
      <param name="state" vsli:raw="The object passed to the delegate.">传递给委托的对象。</param>
      <param name="millisecondsTimeOutInterval" vsli:raw="The time-out in milliseconds. If the &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; is -1, the function's time-out interval never elapses.">以毫秒为单位的超时。 如果 <paramref name="millisecondsTimeOutInterval" /> 参数为 0（零），函数将测试对象的状态并立即返回。 如果 <paramref name="millisecondsTimeOutInterval" /> 为 -1，则函数的超时间隔永远不过期。</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <paramref name="waitObject" /> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; that can be used to cancel the registered wait operation.">
        <see cref="T:System.Threading.RegisteredWaitHandle" />，可用于取消已注册的等待操作。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is less than -1.">
        <paramref name="millisecondsTimeOutInterval" /> 参数小于 -1。</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
      <summary vsli:raw="Sets the number of requests to the thread pool that can be active concurrently. All requests above that number remain queued until thread pool threads become available.">设置可以同时处于活动状态的线程池的请求数目。 所有大于此数目的请求将保持排队状态，直到线程池线程变为可用。</summary>
      <param name="workerThreads" vsli:raw="The maximum number of worker threads in the thread pool.">线程池中辅助线程的最大数目。</param>
      <param name="completionPortThreads" vsli:raw="The maximum number of asynchronous I/O threads in the thread pool.">线程池中异步 I/O 线程的最大数目。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the change is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果更改成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
      <summary vsli:raw="Sets the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.">发出新的请求时，在切换到管理线程创建和销毁的算法之前设置线程池按需创建的线程的最小数量。</summary>
      <param name="workerThreads" vsli:raw="The minimum number of worker threads that the thread pool creates on demand.">要由线程池根据需要创建的新的最小工作程序线程数。</param>
      <param name="completionPortThreads" vsli:raw="The minimum number of asynchronous I/O threads that the thread pool creates on demand.">要由线程池根据需要创建的新的最小空闲异步 I/O 线程数。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the change is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果更改成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.ThreadPool.ThreadCount">
      <summary vsli:raw="Gets the number of thread pool threads that currently exist.">获取当前存在的线程池线程数。</summary>
      <returns vsli:raw="The number of thread pool threads that currently exist.">当前存在的线程池线程数。</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
      <summary vsli:raw="Queues an overlapped I/O operation for execution.">将重叠的 I/O 操作排队以便执行。</summary>
      <param name="overlapped" vsli:raw="The &lt;see cref=&quot;T:System.Threading.NativeOverlapped&quot; /&gt; structure to queue.">要排队的 <see cref="T:System.Threading.NativeOverlapped" /> 结构。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation was successfully queued to an I/O completion port; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功地将此操作排队到 I/O 完成端口，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.IThreadPoolWorkItem,System.Boolean)">
      <summary vsli:raw="Queues the specified work item object to the thread pool.">将指定的工作项对象排队到线程池。</summary>
      <param name="callBack" vsli:raw="The work item to invoke when a thread in the thread pool picks up the work item.">当线程池中的线程选择工作项时调用的工作项。</param>
      <param name="preferLocal" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to prefer queueing the work item in a queue close to the current thread; &lt;see langword=&quot;false&quot; /&gt; to prefer queueing the work item to the thread pool's shared queue.">
        <see langword="true" /> 表示首选在靠近当前线程的队列中对工作项进行排队；<see langword="false" /> 则表示首选将工作项排队到线程池的共享队列中。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method succeeds; &lt;see cref=&quot;T:System.OutOfMemoryException&quot; /&gt; is thrown if the work item could not be queued.">如果方法成功，则为 <see langword="true" />；如果未能将该工作项排队，则引发 <see cref="T:System.OutOfMemoryException" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="callback" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The work item is a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt;.">该工作项是一个 <see cref="T:System.Threading.Tasks.Task" />。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="The work item could not be queued.">未能将该工作项排队。</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary vsli:raw="Queues the specified delegate to the thread pool, but does not propagate the calling stack to the worker thread.">将指定的委托排队到线程池，但不会将调用堆栈传播到辅助线程。</summary>
      <param name="callBack" vsli:raw="A &lt;see cref=&quot;T:System.Threading.WaitCallback&quot; /&gt; that represents the delegate to invoke when a thread in the thread pool picks up the work item.">一个 <see cref="T:System.Threading.WaitCallback" />，表示当线程池中的线程选择工作项时调用的委托。</param>
      <param name="state" vsli:raw="The object that is passed to the delegate when serviced from the thread pool.">在接受线程池服务时传递给委托的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method succeeds; &lt;see cref=&quot;T:System.OutOfMemoryException&quot; /&gt; is thrown if the work item could not be queued.">如果方法成功，则为 <see langword="true" />；如果未能将该工作项排队，则引发 <see cref="T:System.OutOfMemoryException" />。</returns>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">调用方没有所要求的权限。</exception>
      <exception cref="T:System.ApplicationException" vsli:raw="An out-of-memory condition was encountered.">遇到了内存不足的情况。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="The work item could not be queued.">未能将该工作项排队。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;callBack&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="callBack" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)">
      <summary vsli:raw="Queues a method specified by an &lt;see cref=&quot;T:System.Action`1&quot; /&gt; delegate for execution, and specifies an object containing data to be used by the method. The method executes when a thread pool thread becomes available.">将 <see cref="T:System.Action`1" /> 委托指定的方法排入队列以便执行，并指定包含该方法使用的数据的对象。 此方法在有线程池线程变得可用时执行。</summary>
      <param name="callBack" vsli:raw="A delegate representing the method to execute.">表示要执行的方法的委托。</param>
      <param name="state" vsli:raw="An object containing data to be used by the method.">包含方法所用数据的对象。</param>
      <param name="preferLocal" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to prefer queueing the work item in a queue close to the current thread; &lt;see langword=&quot;false&quot; /&gt; to prefer queueing the work item to the thread pool's shared queue.">
        <see langword="true" /> 表示首选在靠近当前线程的队列中对工作项进行排队；<see langword="false" /> 则表示首选将工作项排队到线程池的共享队列中。</param>
      <typeparam name="TState" vsli:raw="The type of elements of &lt;paramref name=&quot;state&quot; /&gt;.">
        <paramref name="state" /> 的元素类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is successfully queued; &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; is thrown if the work item could not be queued.">如果此方法成功排队，则为 <see langword="true" />；如果无法将该工作项排队，则引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="callback" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The work item could not be queued.">未能将该工作项排队。</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, using a 32-bit signed integer for the time-out in milliseconds. This method does not propagate the calling stack to the worker thread.">注册一个等待 <see cref="T:System.Threading.WaitHandle" /> 的委托，并使用一个 32 位带符号整数来表示超时时间（以毫秒为单位）。 此方法不将调用堆栈传播到辅助线程。</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">要注册的 <see cref="T:System.Threading.WaitHandle" />。 使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。</param>
      <param name="callBack" vsli:raw="The delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">向 <paramref name="waitObject" /> 参数发出信号时调用的委托。</param>
      <param name="state" vsli:raw="The object that is passed to the delegate.">传递给委托的对象。</param>
      <param name="millisecondsTimeOutInterval" vsli:raw="The time-out in milliseconds. If the &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; is -1, the function's time-out interval never elapses.">以毫秒为单位的超时。 如果 <paramref name="millisecondsTimeOutInterval" /> 参数为 0（零），函数将测试对象的状态并立即返回。 如果 <paramref name="millisecondsTimeOutInterval" /> 为 -1，则函数的超时间隔永远不过期。</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <paramref name="waitObject" /> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; object that can be used to cancel the registered wait operation.">
        <see cref="T:System.Threading.RegisteredWaitHandle" /> 对象，可用于取消已注册的等待操作。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is less than -1.">
        <paramref name="millisecondsTimeOutInterval" /> 参数小于 -1。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, specifying a 64-bit signed integer for the time-out in milliseconds. This method does not propagate the calling stack to the worker thread.">注册一个等待 <see cref="T:System.Threading.WaitHandle" /> 的委托，并指定一个 64 位有符号整数来表示超时值（以毫秒为单位）。 此方法不将调用堆栈传播到辅助线程。</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">要注册的 <see cref="T:System.Threading.WaitHandle" />。 使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。</param>
      <param name="callBack" vsli:raw="The delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">向 <paramref name="waitObject" /> 参数发出信号时调用的委托。</param>
      <param name="state" vsli:raw="The object that is passed to the delegate.">传递给委托的对象。</param>
      <param name="millisecondsTimeOutInterval" vsli:raw="The time-out in milliseconds. If the &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; is -1, the function's time-out interval never elapses.">以毫秒为单位的超时。 如果 <paramref name="millisecondsTimeOutInterval" /> 参数为 0（零），函数将测试对象的状态并立即返回。 如果 <paramref name="millisecondsTimeOutInterval" /> 为 -1，则函数的超时间隔永远不过期。</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <paramref name="waitObject" /> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; object that can be used to cancel the registered wait operation.">
        <see cref="T:System.Threading.RegisteredWaitHandle" /> 对象，可用于取消已注册的等待操作。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is less than -1.">
        <paramref name="millisecondsTimeOutInterval" /> 参数小于 -1。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, specifying a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; value for the time-out. This method does not propagate the calling stack to the worker thread.">注册一个等待 <see cref="T:System.Threading.WaitHandle" /> 的委托，并指定一个 <see cref="T:System.TimeSpan" /> 值来表示超时时间。此方法不将调用堆栈传播到辅助线程。</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">要注册的 <see cref="T:System.Threading.WaitHandle" />。 使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。</param>
      <param name="callBack" vsli:raw="The delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">向 <paramref name="waitObject" /> 参数发出信号时调用的委托。</param>
      <param name="state" vsli:raw="The object that is passed to the delegate.">传递给委托的对象。</param>
      <param name="timeout" vsli:raw="The time-out represented by a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt;. If &lt;paramref name=&quot;timeout&quot; /&gt; is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;timeout&quot; /&gt; is -1, the function's time-out interval never elapses.">
        <see cref="T:System.TimeSpan" /> 表示的超时时间。 如果 <paramref name="timeout" /> 为 0（零），则函数将测试对象的状态并立即返回。 如果 <paramref name="timeout" /> 为 -1，则函数的超时间隔永远不过期。</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <paramref name="waitObject" /> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; object that can be used to cancel the registered wait operation.">
        <see cref="T:System.Threading.RegisteredWaitHandle" /> 对象，可用于取消已注册的等待操作。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;timeout&quot; /&gt; parameter is less than -1.">
        <paramref name="timeout" /> 参数小于 -1。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;paramref name=&quot;timeout&quot; /&gt; parameter is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="timeout" /> 参数大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, specifying a 32-bit unsigned integer for the time-out in milliseconds. This method does not propagate the calling stack to the worker thread.">指定表示超时（以毫秒为单位）的 32 位无符号整数，注册一个委托等待 <see cref="T:System.Threading.WaitHandle" />。 此方法不将调用堆栈传播到辅助线程。</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">要注册的 <see cref="T:System.Threading.WaitHandle" />。 使用 <see cref="T:System.Threading.WaitHandle" /> 而非 <see cref="T:System.Threading.Mutex" />。</param>
      <param name="callBack" vsli:raw="The delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">向 <paramref name="waitObject" /> 参数发出信号时调用的委托。</param>
      <param name="state" vsli:raw="The object that is passed to the delegate.">传递给委托的对象。</param>
      <param name="millisecondsTimeOutInterval" vsli:raw="The time-out in milliseconds. If the &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; is -1, the function's time-out interval never elapses.">以毫秒为单位的超时。 如果 <paramref name="millisecondsTimeOutInterval" /> 参数为 0（零），函数将测试对象的状态并立即返回。 如果 <paramref name="millisecondsTimeOutInterval" /> 为 -1，则函数的超时间隔永远不过期。</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">如果为 <see langword="true" />，表示在调用了委托后，线程将不再在 <paramref name="waitObject" /> 参数上等待；如果为 <see langword="false" />，表示每次完成等待操作后都重置计时器，直到注销等待。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; object that can be used to cancel the registered wait operation.">
        <see cref="T:System.Threading.RegisteredWaitHandle" /> 对象，可用于取消已注册的等待操作。</returns>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">调用方没有所要求的权限。</exception>
    </member>
    <member name="T:System.Threading.WaitCallback">
      <summary vsli:raw="Represents a callback method to be executed by a thread pool thread.">表示线程池线程要执行的回调方法。</summary>
      <param name="state" vsli:raw="An object containing information to be used by the callback method.">包含回调方法要使用的信息的对象。</param>
    </member>
    <member name="T:System.Threading.WaitOrTimerCallback">
      <summary vsli:raw="Represents a method to be called when a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; is signaled or times out.">表示当 <see cref="T:System.Threading.WaitHandle" /> 超时或终止时要调用的方法。</summary>
      <param name="state" vsli:raw="An object containing information to be used by the callback method each time it executes.">一个对象，包含回调方法在每次执行时要使用的信息。</param>
      <param name="timedOut" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; timed out; &lt;see langword=&quot;false&quot; /&gt; if it was signaled.">如果 <see cref="T:System.Threading.WaitHandle" /> 超时，则为 <see langword="true" />；如果其终止，则为 <see langword="false" />。</param>
    </member>
  </members>
</doc>
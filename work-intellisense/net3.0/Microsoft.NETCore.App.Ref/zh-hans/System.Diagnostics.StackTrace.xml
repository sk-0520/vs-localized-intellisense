<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Diagnostics.StackTrace</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.StackFrame">
      <summary vsli:raw="Provides information about a &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt;, which represents a function call on the call stack for the current thread.">提供关于 <see cref="T:System.Diagnostics.StackFrame" />（表示当前线程的调用堆栈中的一个函数调用）的信息。</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class.">初始化 <see cref="T:System.Diagnostics.StackFrame" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class, optionally capturing source information.">初始化 <see cref="T:System.Diagnostics.StackFrame" /> 类的新实例，可以选择捕获源信息。</summary>
      <param name="fNeedFileInfo">若要捕获堆栈帧的文件名、行号和列号，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class that corresponds to a frame above the current stack frame.">初始化与当前堆栈帧之上的帧对应的 <see cref="T:System.Diagnostics.StackFrame" /> 类的新实例。</summary>
      <param name="skipFrames" vsli:raw="The number of frames up the stack to skip.">堆栈上要跳过的帧数。</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class that corresponds to a frame above the current stack frame, optionally capturing source information.">初始化与当前堆栈帧之上的帧对应的 <see cref="T:System.Diagnostics.StackFrame" /> 类的新实例，可以选择捕获源信息。</summary>
      <param name="skipFrames" vsli:raw="The number of frames up the stack to skip.">堆栈上要跳过的帧数。</param>
      <param name="fNeedFileInfo">若要捕获堆栈帧的文件名、行号和列号，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class that contains only the given file name and line number.">初始化只包含给定文件名和行号的 <see cref="T:System.Diagnostics.StackFrame" /> 类的新实例。</summary>
      <param name="fileName" vsli:raw="The file name.">文件名。</param>
      <param name="lineNumber" vsli:raw="The line number in the specified file.">指定文件中的行号。</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class that contains only the given file name, line number, and column number.">初始化只包含给定文件名、行号和列号的 <see cref="T:System.Diagnostics.StackFrame" /> 类的新实例。</summary>
      <param name="fileName" vsli:raw="The file name.">文件名。</param>
      <param name="lineNumber" vsli:raw="The line number in the specified file.">指定文件中的行号。</param>
      <param name="colNumber" vsli:raw="The column number in the specified file.">指定文件中的列号。</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileColumnNumber">
      <summary vsli:raw="Gets the column number in the file that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.">获取文件中包含所执行代码的列号。 该信息通常从可执行文件的调试符号中提取。</summary>
      <returns vsli:raw="The file column number, or 0 (zero) if the file column number cannot be determined.">文件列号；如果无法确定文件列号，则为 0（零）。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileLineNumber">
      <summary vsli:raw="Gets the line number in the file that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.">获取文件中包含所执行代码的行号。 该信息通常从可执行文件的调试符号中提取。</summary>
      <returns vsli:raw="The file line number, or 0 (zero) if the file line number cannot be determined.">文件行号；如果无法确定文件行号，则为 0（零）。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileName">
      <summary vsli:raw="Gets the file name that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.">获取包含所执行代码的文件名。 该信息通常从可执行文件的调试符号中提取。</summary>
      <returns vsli:raw="The file name, or &lt;see langword=&quot;null&quot; /&gt; if the file name cannot be determined.">文件名；如果无法确定文件名，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetILOffset">
      <summary vsli:raw="Gets the offset from the start of the Microsoft intermediate language (MSIL) code for the method that is executing. This offset might be an approximation depending on whether or not the just-in-time (JIT) compiler is generating debugging code. The generation of this debugging information is controlled by the &lt;see cref=&quot;T:System.Diagnostics.DebuggableAttribute&quot; /&gt;.">获取离开所执行方法的 Microsoft 中间语言 (Microsoft Intermediate Language, MSIL) 代码开头的偏移量。 根据实时 (JIT) 编译器是否正在生成调试代码，此偏移量可能是近似量。 该调试信息的生成受 <see cref="T:System.Diagnostics.DebuggableAttribute" /> 控制。</summary>
      <returns vsli:raw="The offset from the start of the MSIL code for the method that is executing.">离开所执行方法的 MSIL 代码开头的偏移量。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetMethod">
      <summary vsli:raw="Gets the method in which the frame is executing.">获取在其中执行帧的方法。</summary>
      <returns vsli:raw="The method in which the frame is executing.">在其中执行帧的方法。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetNativeOffset">
      <summary vsli:raw="Gets the offset from the start of the native just-in-time (JIT)-compiled code for the method that is being executed. The generation of this debugging information is controlled by the &lt;see cref=&quot;T:System.Diagnostics.DebuggableAttribute&quot; /&gt; class.">获取相对于所执行方法的本机实时 (JIT) 编译代码开头的偏移量。 该调试信息的生成受 <see cref="T:System.Diagnostics.DebuggableAttribute" /> 类控制。</summary>
      <returns vsli:raw="The offset from the start of the JIT-compiled code for the method that is being executed.">相对于所执行方法的 JIT 编译代码开头的偏移量。</returns>
    </member>
    <member name="F:System.Diagnostics.StackFrame.OFFSET_UNKNOWN">
      <summary vsli:raw="Defines the value that is returned from the &lt;see cref=&quot;M:System.Diagnostics.StackFrame.GetNativeOffset&quot; /&gt; or &lt;see cref=&quot;M:System.Diagnostics.StackFrame.GetILOffset&quot; /&gt; method when the native or Microsoft intermediate language (MSIL) offset is unknown. This field is constant.">定义当本机或 Microsoft 中间语言 (Microsoft Intermediate Language, MSIL) 偏移量未知时从 <see cref="M:System.Diagnostics.StackFrame.GetNativeOffset" /> 或 <see cref="M:System.Diagnostics.StackFrame.GetILOffset" /> 方法返回的值。 此字段为常数。</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.ToString">
      <summary vsli:raw="Builds a readable representation of the stack trace.">生成堆栈跟踪的可读表示形式。</summary>
      <returns vsli:raw="A readable representation of the stack trace.">堆栈帧的可读表示形式。</returns>
    </member>
    <member name="T:System.Diagnostics.StackFrameExtensions">
      <summary vsli:raw="Provides extension methods for the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class, which represents a function call on the call stack for the current thread.">提供用于 <see cref="T:System.Diagnostics.StackFrame" /> 类（表示当前线程的调用堆栈中的一个函数调用）的扩展方法。</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeImageBase(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Returns a pointer to the base address of the native image that this stack frame is executing.">返回一个指针，该指针指向此堆栈帧正在执行的本机映像的基址。</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">堆栈帧。</param>
      <returns vsli:raw="A pointer to the base address of the native image or &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; if you're targeting the .NET Framework.">指向本机映像基址的指针或指向 <see cref="F:System.IntPtr.Zero" /> 的指针（如果目标为 .NET Framework）。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeIP(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Gets an interface pointer to the start of the native code for the method that is being executed.">获取一个接口指针，该指针指向正在执行的方法的本机代码起始位置。</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">堆栈帧。</param>
      <returns vsli:raw="An interface pointer to the start of the native code for the method that is being executed or &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; if you're targeting the .NET Framework.">一个接口指针，该指针指向正在执行的方法的本机代码起始位置或指向 <see cref="F:System.IntPtr.Zero" />（如果目标为 .NET Framework）。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasILOffset(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Indicates whether an offset from the start of the IL code for the method that is executing is available.">指示离开正在执行的方法的 IL 代码开头的偏移量是否可用。</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">堆栈帧。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the offset is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果偏移量可用，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasMethod(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Indicates whether information about the method in which the specified frame is executing is available.">指示有关在其中执行指定帧的方法的信息是否可用。</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">堆栈帧。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if information about the method in which the current frame is executing is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果有关在其中执行当前帧的方法的信息可用，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasNativeImage(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Indicates whether the native image is available for the specified stack frame.">指示本机映像是否适用于指定的堆栈帧。</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">堆栈帧。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a native image is available for this stack frame; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果本机映像适用于此堆栈帧，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasSource(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Indicates whether the file that contains the code that the specified stack frame is executing is available.">指示包含指定堆栈帧正在执行的代码的文件是否可用。</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">堆栈帧。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code that the specified stack frame is executing is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果正在执行指定堆栈帧的代码可用，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Diagnostics.StackTrace">
      <summary vsli:raw="Represents a stack trace, which is an ordered collection of one or more stack frames.">表示一个堆栈跟踪，它是一个或多个堆栈帧的有序集合。</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class from the caller's frame.">用调用方的帧初始化 <see cref="T:System.Diagnostics.StackTrace" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class from the caller's frame, optionally capturing source information.">用调用方的帧初始化 <see cref="T:System.Diagnostics.StackTrace" /> 类的新实例，可以选择捕获源信息。</summary>
      <param name="fNeedFileInfo" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to capture the file name, line number, and column number; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果为 <see langword="true" />，则捕获文件名、行号和列号；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class that contains a single frame.">初始化包含单个帧的 <see cref="T:System.Diagnostics.StackTrace" /> 类的新实例。</summary>
      <param name="frame" vsli:raw="The frame that the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; object should contain.">
        <see cref="T:System.Diagnostics.StackTrace" /> 对象应包含的帧。</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class using the provided exception object.">使用提供的异常对象初始化 <see cref="T:System.Diagnostics.StackTrace" /> 类的新实例。</summary>
      <param name="e" vsli:raw="The exception object from which to construct the stack trace.">从其构造堆栈跟踪的异常对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The parameter &lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">参数 <paramref name="e" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class, using the provided exception object and optionally capturing source information.">使用所提供的异常对象初始化 <see cref="T:System.Diagnostics.StackTrace" /> 类的新实例，可以选择捕获源信息。</summary>
      <param name="exception">从其构造堆栈跟踪的异常对象。</param>
      <param name="needFileInfo">如果为 <see langword="true" />，则捕获文件名、行号和列号；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The parameter &lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">参数 <paramref name="e" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class using the provided exception object and skipping the specified number of frames.">使用提供的异常对象初始化 <see cref="T:System.Diagnostics.StackTrace" /> 类的新实例，并跳过指定的帧数。</summary>
      <param name="e" vsli:raw="The exception object from which to construct the stack trace.">从其构造堆栈跟踪的异常对象。</param>
      <param name="skipFrames" vsli:raw="The number of frames up the stack from which to start the trace.">堆栈中的帧数，将从其上开始跟踪。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The parameter &lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">参数 <paramref name="e" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;skipFrames&quot; /&gt; parameter is negative.">
        <paramref name="skipFrames" /> 参数为负。</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class using the provided exception object, skipping the specified number of frames and optionally capturing source information.">使用提供的异常对象初始化 <see cref="T:System.Diagnostics.StackTrace" /> 类的新实例，跳过指定的帧数并可以选择捕获源信息。</summary>
      <param name="e" vsli:raw="The exception object from which to construct the stack trace.">从其构造堆栈跟踪的异常对象。</param>
      <param name="skipFrames" vsli:raw="The number of frames up the stack from which to start the trace.">堆栈中的帧数，将从其上开始跟踪。</param>
      <param name="fNeedFileInfo" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to capture the file name, line number, and column number; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果为 <see langword="true" />，则捕获文件名、行号和列号；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The parameter &lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">参数 <paramref name="e" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;skipFrames&quot; /&gt; parameter is negative.">
        <paramref name="skipFrames" /> 参数为负。</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class from the caller's frame, skipping the specified number of frames.">从调用方的帧初始化 <see cref="T:System.Diagnostics.StackTrace" /> 类的新实例，跳过指定的帧数。</summary>
      <param name="skipFrames" vsli:raw="The number of frames up the stack from which to start the trace.">堆栈中的帧数，将从其上开始跟踪。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;skipFrames&quot; /&gt; parameter is negative.">
        <paramref name="skipFrames" /> 参数为负。</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class from the caller's frame, skipping the specified number of frames and optionally capturing source information.">从调用方的帧初始化 <see cref="T:System.Diagnostics.StackTrace" /> 类的新实例，跳过指定的帧数并可以选择捕获源信息。</summary>
      <param name="skipFrames" vsli:raw="The number of frames up the stack from which to start the trace.">堆栈中的帧数，将从其上开始跟踪。</param>
      <param name="fNeedFileInfo" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to capture the file name, line number, and column number; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果为 <see langword="true" />，则捕获文件名、行号和列号；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;skipFrames&quot; /&gt; parameter is negative.">
        <paramref name="skipFrames" /> 参数为负。</exception>
    </member>
    <member name="P:System.Diagnostics.StackTrace.FrameCount">
      <summary vsli:raw="Gets the number of frames in the stack trace.">获取堆栈跟踪中的帧数。</summary>
      <returns vsli:raw="The number of frames in the stack trace.">堆栈跟踪中的帧数。</returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrame(System.Int32)">
      <summary vsli:raw="Gets the specified stack frame.">获取指定的堆栈帧。</summary>
      <param name="index" vsli:raw="The index of the stack frame requested.">所请求的堆栈帧的索引。</param>
      <returns vsli:raw="The specified stack frame.">指定的堆栈帧。</returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrames">
      <summary vsli:raw="Returns a copy of all stack frames in the current stack trace.">返回当前堆栈跟踪中所有堆栈帧的副本。</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; representing the function calls in the stack trace.">
        <see cref="T:System.Diagnostics.StackFrame" /> 类型的数组，表示堆栈跟踪中的函数调用。</returns>
    </member>
    <member name="F:System.Diagnostics.StackTrace.METHODS_TO_SKIP">
      <summary vsli:raw="Defines the default for the number of methods to omit from the stack trace. This field is constant.">定义要从堆栈跟踪中省略的默认方法数。 此字段为常数。</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.ToString">
      <summary vsli:raw="Builds a readable representation of the stack trace.">生成堆栈跟踪的可读表示形式。</summary>
      <returns vsli:raw="A readable representation of the stack trace.">堆栈帧的可读表示形式。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolBinder">
      <summary vsli:raw="Represents a symbol binder for managed code.">表示托管代码的符号联编程序。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolBinder.GetReader(System.Int32,System.String,System.String)">
      <summary vsli:raw="Gets the interface of the symbol reader for the current file.">获取当前文件的符号读取器的接口。</summary>
      <param name="importer" vsli:raw="The metadata import interface.">元数据导入接口。</param>
      <param name="filename" vsli:raw="The name of the file for which the reader interface is required.">需要读取器接口的文件名称。</param>
      <param name="searchPath" vsli:raw="The search path used to locate the symbol file.">用于查找符号文件的搜索路径。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolReader&quot; /&gt; interface that reads the debugging symbols.">
        <see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" /> 接口，它读取调试符号。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolBinder1">
      <summary vsli:raw="Represents a symbol binder for managed code.">表示托管代码的符号联编程序。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolBinder1.GetReader(System.IntPtr,System.String,System.String)">
      <summary vsli:raw="Gets the interface of the symbol reader for the current file.">获取当前文件的符号读取器的接口。</summary>
      <param name="importer" vsli:raw="An &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; that refers to the metadata import interface.">引用元数据导入接口的 <see cref="T:System.IntPtr" />。</param>
      <param name="filename" vsli:raw="The name of the file for which the reader interface is required.">需要读取器接口的文件名称。</param>
      <param name="searchPath" vsli:raw="The search path used to locate the symbol file.">用于查找符号文件的搜索路径。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolReader&quot; /&gt; interface that reads the debugging symbols.">
        <see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" /> 接口，它读取调试符号。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocument">
      <summary vsli:raw="Represents a document referenced by a symbol store.">表示由符号存储引用的文档。</summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.CheckSumAlgorithmId">
      <summary vsli:raw="Gets the checksum algorithm identifier.">获取校验和算法标识符。</summary>
      <returns vsli:raw="A GUID identifying the checksum algorithm. The value is all zeros, if there is no checksum.">标识校验和算法的 GUID。 如果没有校验和，值为全零。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.DocumentType">
      <summary vsli:raw="Gets the type of the current document.">获取当前文档的类型。</summary>
      <returns vsli:raw="The type of the current document.">当前文档的类型。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.FindClosestLine(System.Int32)">
      <summary vsli:raw="Returns the closest line that is a sequence point, given a line in the current document that might or might not be a sequence point.">在给定当前文档中的一行，而该行可能是或可能不是序列点的情况下，返回作为序列点的最近的一行。</summary>
      <param name="line" vsli:raw="The specified line in the document.">文档中的指定行。</param>
      <returns vsli:raw="The closest line that is a sequence point.">作为序列点的最近的一行。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.GetCheckSum">
      <summary vsli:raw="Gets the checksum.">获取校验和。</summary>
      <returns vsli:raw="The checksum.">校验和。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.GetSourceRange(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Gets the embedded document source for the specified range.">获取指定范围内的嵌入文档源。</summary>
      <param name="startLine" vsli:raw="The starting line in the current document.">当前文档中的起始行。</param>
      <param name="startColumn" vsli:raw="The starting column in the current document.">当前文档中的起始列。</param>
      <param name="endLine" vsli:raw="The ending line in the current document.">当前文档中的结束行。</param>
      <param name="endColumn" vsli:raw="The ending column in the current document.">当前文档中的结束列。</param>
      <returns vsli:raw="The document source for the specified range.">指定范围内的文档源。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.HasEmbeddedSource">
      <summary vsli:raw="Checks whether the current document is stored in the symbol store.">检查当前文档是否存储在符号存储区中。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current document is stored in the symbol store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前文档存储在符号存储区中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.Language">
      <summary vsli:raw="Gets the language of the current document.">获取当前文档的语言。</summary>
      <returns vsli:raw="The language of the current document.">当前文档的语言。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.LanguageVendor">
      <summary vsli:raw="Gets the language vendor of the current document.">获取当前文档的语言供应商。</summary>
      <returns vsli:raw="The language vendor of the current document.">当前文档的语言供应商。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.SourceLength">
      <summary vsli:raw="Gets the length, in bytes, of the embedded source.">获取嵌入源的长度（以字节表示）。</summary>
      <returns vsli:raw="The source length of the current document.">当前文档的源长度。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.URL">
      <summary vsli:raw="Gets the URL of the current document.">获取当前文档的 URL。</summary>
      <returns vsli:raw="The URL of the current document.">当前文档的 URL。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocumentWriter">
      <summary vsli:raw="Represents a document referenced by a symbol store.">表示由符号存储引用的文档。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetCheckSum(System.Guid,System.Byte[])">
      <summary vsli:raw="Sets checksum information.">设置校验和信息。</summary>
      <param name="algorithmId" vsli:raw="The GUID representing the algorithm ID.">表示算法 ID 的 GUID。</param>
      <param name="checkSum" vsli:raw="The checksum.">校验和。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetSource(System.Byte[])">
      <summary vsli:raw="Stores the raw source for a document in the symbol store.">将文档的原始源存储在符号存储区中。</summary>
      <param name="source" vsli:raw="The document source represented as unsigned bytes.">表示为无符号字节的文档源。</param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolMethod">
      <summary vsli:raw="Represents a method within a symbol store.">表示符号存储区内的方法。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetNamespace">
      <summary vsli:raw="Gets the namespace that the current method is defined within.">获取在其中定义当前方法的命名空间。</summary>
      <returns vsli:raw="The namespace that the current method is defined within.">在其中定义当前方法的命名空间。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary vsli:raw="Gets the Microsoft intermediate language (MSIL) offset within the method that corresponds to the specified position.">获取与指定位置对应的方法内的 Microsoft 中间语言 (MSIL) 偏移量。</summary>
      <param name="document" vsli:raw="The document for which the offset is requested.">为其请求偏移量的文档。</param>
      <param name="line" vsli:raw="The document line corresponding to the offset.">与偏移量对应的文档行。</param>
      <param name="column" vsli:raw="The document column corresponding to the offset.">与偏移量对应的文档列。</param>
      <returns vsli:raw="The offset within the specified document.">指定文档内的偏移量。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetParameters">
      <summary vsli:raw="Gets the parameters for the current method.">获取当前方法的参数。</summary>
      <returns vsli:raw="The array of parameters for the current method.">当前方法的参数数组。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary vsli:raw="Gets an array of start and end offset pairs that correspond to the ranges of Microsoft intermediate language (MSIL) that a given position covers within this method.">获取与 Microsoft 中间语言 (MSIL) 的范围对应的起始和结束偏移量对的数组，给定位置在此方法内包括该数组。</summary>
      <param name="document" vsli:raw="The document for which the offset is requested.">为其请求偏移量的文档。</param>
      <param name="line" vsli:raw="The document line corresponding to the ranges.">与范围对应的文档行。</param>
      <param name="column" vsli:raw="The document column corresponding to the ranges.">与范围对应的文档列。</param>
      <returns vsli:raw="An array of start and end offset pairs.">起始和结束偏移量对的数组。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetScope(System.Int32)">
      <summary vsli:raw="Returns the most enclosing lexical scope when given an offset within a method.">在给定方法内的一个偏移量的情况下，返回最封闭的词法范围。</summary>
      <param name="offset" vsli:raw="The byte offset within the method of the lexical scope.">词法范围的方法内的字节偏移量。</param>
      <returns vsli:raw="The most enclosing lexical scope for the given byte offset within the method.">方法内给定字节偏移量的最封闭的词法范围。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary vsli:raw="Gets the sequence points for the current method.">获取当前方法的序列点。</summary>
      <param name="offsets" vsli:raw="The array of byte offsets from the beginning of the method for the sequence points.">序列点从方法开始的字节偏移量的数组。</param>
      <param name="documents" vsli:raw="The array of documents in which the sequence points are located.">序列点所在的文档的数组。</param>
      <param name="lines" vsli:raw="The array of lines in the documents at which the sequence points are located.">序列点所在的文档中的行的数组。</param>
      <param name="columns" vsli:raw="The array of columns in the documents at which the sequence points are located.">序列点所在的文档中的列的数组。</param>
      <param name="endLines" vsli:raw="The array of lines in the documents at which the sequence points end.">序列点结束的文档中的行的数组。</param>
      <param name="endColumns" vsli:raw="The array of columns in the documents at which the sequence points end.">序列点结束的文档中的列的数组。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])">
      <summary vsli:raw="Gets the start and end positions for the source of the current method.">获取当前方法的源的起始和结束位置。</summary>
      <param name="docs" vsli:raw="The starting and ending source documents.">起始和结束源文档。</param>
      <param name="lines" vsli:raw="The starting and ending lines in the corresponding source documents.">对应的源文档中的起始和结束行。</param>
      <param name="columns" vsli:raw="The starting and ending columns in the corresponding source documents.">对应的源文档中的起始和结束列。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the positions were defined; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果定义了位置，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.RootScope">
      <summary vsli:raw="Gets the root lexical scope for the current method. This scope encloses the entire method.">获取当前方法的根词法范围。 此范围包括整个方法。</summary>
      <returns vsli:raw="The root lexical scope that encloses the entire method.">包括整个方法的根词法范围。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount">
      <summary vsli:raw="Gets a count of the sequence points in the method.">获取方法中序列点的计数。</summary>
      <returns vsli:raw="The count of the sequence points in the method.">方法中序列点的计数。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.Token">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; containing the metadata for the current method.">获取 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />，它包含当前方法的元数据。</summary>
      <returns vsli:raw="The metadata token for the current method.">当前方法的元数据标记。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolNamespace">
      <summary vsli:raw="Represents a namespace within a symbol store.">表示符号存储区内的命名空间。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolNamespace.GetNamespaces">
      <summary vsli:raw="Gets the child members of the current namespace.">获取当前命名空间的子成员。</summary>
      <returns vsli:raw="The child members of the current namespace.">当前命名空间的子成员。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolNamespace.GetVariables">
      <summary vsli:raw="Gets all the variables defined at global scope within the current namespace.">获取在当前命名空间的全局范围内定义的所有变量。</summary>
      <returns vsli:raw="The variables defined at global scope within the current namespace.">在当前命名空间的全局范围内定义的变量。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolNamespace.Name">
      <summary vsli:raw="Gets the current namespace.">获取当前命名空间。</summary>
      <returns vsli:raw="The current namespace.">当前命名空间。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolReader">
      <summary vsli:raw="Represents a symbol reader for managed code.">表示托管代码的符号读取器。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary vsli:raw="Gets a document specified by the language, vendor, and type.">获取按语言、供应商和类型指定的文档。</summary>
      <param name="url" vsli:raw="The URL that identifies the document.">标识文档的 URL。</param>
      <param name="language" vsli:raw="The document language. You can specify this parameter as &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">文档语言。 可以将此参数指定为 <see cref="F:System.Guid.Empty" />。</param>
      <param name="languageVendor" vsli:raw="The identity of the vendor for the document language. You can specify this parameter as &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">文档语言的供应商标识。 可以将此参数指定为 <see cref="F:System.Guid.Empty" />。</param>
      <param name="documentType" vsli:raw="The type of the document. You can specify this parameter as &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">文档的类型。 可以将此参数指定为 <see cref="F:System.Guid.Empty" />。</param>
      <returns vsli:raw="The specified document.">指定的文档。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetDocuments">
      <summary vsli:raw="Gets an array of all documents defined in the symbol store.">获取在符号存储区中定义的所有文档的数组。</summary>
      <returns vsli:raw="An array of all documents defined in the symbol store.">在符号存储区中定义的所有文档的数组。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetGlobalVariables">
      <summary vsli:raw="Gets all global variables in the module.">获取模块中的所有全局变量。</summary>
      <returns vsli:raw="An array of all variables in the module.">模块中所有变量的数组。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Gets a symbol reader method object when given the identifier of a method.">在给定方法的标识符的情况下，获取符号读取器方法对象。</summary>
      <param name="method" vsli:raw="The metadata token of the method.">方法的元数据标记。</param>
      <returns vsli:raw="The symbol reader method object for the specified method identifier.">指定方法标识符表示的符号读取器方法对象。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken,System.Int32)">
      <summary vsli:raw="Gets a symbol reader method object when given the identifier of a method and its edit and continue version.">在给定方法的标识符及其编辑和连续版本的情况下，获取符号读取器方法对象。</summary>
      <param name="method" vsli:raw="The metadata token of the method.">方法的元数据标记。</param>
      <param name="version" vsli:raw="The edit and continue version of the method.">方法的编辑和连续版本。</param>
      <returns vsli:raw="The symbol reader method object for the specified method identifier.">指定方法标识符表示的符号读取器方法对象。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethodFromDocumentPosition(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary vsli:raw="Gets a symbol reader method object that contains a specified position in a document.">获取包含文档中的指定位置的符号读取器方法对象。</summary>
      <param name="document" vsli:raw="The document in which the method is located.">方法所在的文档。</param>
      <param name="line" vsli:raw="The position of the line within the document. The lines are numbered, beginning with 1.">文档内行的位置。 行带有编号，从 1 开始。</param>
      <param name="column" vsli:raw="The position of column within the document. The columns are numbered, beginning with 1.">文档内列的位置。 列带有编号，从 1 开始。</param>
      <returns vsli:raw="The reader method object for the specified position in the document.">文档中的指定位置的读取器方法对象。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetNamespaces">
      <summary vsli:raw="Gets the namespaces that are defined in the global scope within the current symbol store.">获取在当前符号存储区的全局范围内定义的命名空间。</summary>
      <returns vsli:raw="The namespaces defined in the global scope within the current symbol store.">在当前符号存储区的全局范围内定义的命名空间。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String)">
      <summary vsli:raw="Gets an attribute value when given the attribute name.">在给定特性名称的情况下，获取特性值。</summary>
      <param name="parent" vsli:raw="The metadata token for the object for which the attribute is requested.">为其请求特性的对象的元数据标记。</param>
      <param name="name" vsli:raw="The attribute name.">特性名称。</param>
      <returns vsli:raw="The value of the attribute.">属性的值。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetVariables(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Gets the variables that are not local when given the parent.">在给定父级的情况下，获取非局部变量。</summary>
      <param name="parent" vsli:raw="The metadata token for the type for which the variables are requested.">为其请求变量的类型的元数据标记。</param>
      <returns vsli:raw="An array of variables for the parent.">父级的变量的数组。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolReader.UserEntryPoint">
      <summary vsli:raw="Gets the metadata token for the method that was specified as the user entry point for the module, if any.">获取方法的元数据标记，它指定为模块的用户入口点（如果有的话）。</summary>
      <returns vsli:raw="The metadata token for the method that is the user entry point for the module.">方法的元数据标记，它是模块的用户入口点。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolScope">
      <summary vsli:raw="Represents a lexical scope within &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolMethod&quot; /&gt;, providing access to the start and end offsets of the scope, as well as its child and parent scopes.">表示 <see cref="T:System.Diagnostics.SymbolStore.ISymbolMethod" /> 内的词法范围，提供对范围及其子范围和父范围的起始和结束偏移量的访问。</summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.EndOffset">
      <summary vsli:raw="Gets the end offset of the current lexical scope.">获取当前词法范围的结束偏移量。</summary>
      <returns vsli:raw="The end offset of the current lexical scope.">当前词法范围的结束偏移量。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetChildren">
      <summary vsli:raw="Gets the child lexical scopes of the current lexical scope.">获取当前词法范围的子词法范围。</summary>
      <returns vsli:raw="The child lexical scopes that of the current lexical scope.">当前词法范围的子词法范围。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetLocals">
      <summary vsli:raw="Gets the local variables within the current lexical scope.">获取当前词法范围内的局部变量。</summary>
      <returns vsli:raw="The local variables within the current lexical scope.">当前词法范围内的局部变量。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetNamespaces">
      <summary vsli:raw="Gets the namespaces that are used within the current scope.">获取在当前范围内使用的命名空间。</summary>
      <returns vsli:raw="The namespaces that are used within the current scope.">在当前范围内使用的命名空间。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.Method">
      <summary vsli:raw="Gets the method that contains the current lexical scope.">获取包含当前词法范围的方法。</summary>
      <returns vsli:raw="The method that contains the current lexical scope.">包含当前词法范围的方法。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.Parent">
      <summary vsli:raw="Gets the parent lexical scope of the current scope.">获取当前范围的父词法范围。</summary>
      <returns vsli:raw="The parent lexical scope of the current scope.">当前范围的父词法范围。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.StartOffset">
      <summary vsli:raw="Gets the start offset of the current lexical scope.">获取当前词法范围的起始偏移量。</summary>
      <returns vsli:raw="The start offset of the current lexical scope.">当前词法范围的起始偏移量。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolVariable">
      <summary vsli:raw="Represents a variable within a symbol store.">表示符号存储区内的变量。</summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField1">
      <summary vsli:raw="Gets the first address of a variable.">获取变量的第一个地址。</summary>
      <returns vsli:raw="The first address of the variable.">变量的第一个地址。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField2">
      <summary vsli:raw="Gets the second address of a variable.">获取变量的第二个地址。</summary>
      <returns vsli:raw="The second address of the variable.">变量的第二个地址。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField3">
      <summary vsli:raw="Gets the third address of a variable.">获取变量的第三个地址。</summary>
      <returns vsli:raw="The third address of the variable.">变量的第三个地址。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressKind">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymAddressKind&quot; /&gt; value describing the type of the address.">获取描述地址类型的 <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" /> 值。</summary>
      <returns vsli:raw="The type of the address. One of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymAddressKind&quot; /&gt; values.">地址类型。 <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" /> 值之一。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.Attributes">
      <summary vsli:raw="Gets the attributes of the variable.">获取变量的特性。</summary>
      <returns vsli:raw="The variable attributes.">变量特性。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.EndOffset">
      <summary vsli:raw="Gets the end offset of a variable within the scope of the variable.">获取变量范围内的变量的结束偏移量。</summary>
      <returns vsli:raw="The end offset of the variable.">变量的结束偏移量。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolVariable.GetSignature">
      <summary vsli:raw="Gets the variable signature.">获取变量签名。</summary>
      <returns vsli:raw="The variable signature as an opaque blob.">作为不透明 Blob 的变量签名。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.Name">
      <summary vsli:raw="Gets the name of the variable.">获取变量名。</summary>
      <returns vsli:raw="The name of the variable.">变量的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.StartOffset">
      <summary vsli:raw="Gets the start offset of the variable within the scope of the variable.">获取变量范围内的变量的起始偏移量。</summary>
      <returns vsli:raw="The start offset of the variable.">变量的起始偏移量。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolWriter">
      <summary vsli:raw="Represents a symbol writer for managed code.">表示托管代码的符号编写器。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.Close">
      <summary vsli:raw="Closes &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolWriter&quot; /&gt; and commits the symbols to the symbol store.">关闭 <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" />，并将符号提交到符号存储区。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseMethod">
      <summary vsli:raw="Closes the current method.">关闭当前方法。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseNamespace">
      <summary vsli:raw="Closes the most recent namespace.">关闭最近的命名空间。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)">
      <summary vsli:raw="Closes the current lexical scope.">关闭当前词法范围。</summary>
      <param name="endOffset" vsli:raw="The points past the last instruction in the scope.">越过范围中最后一个指令的点。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary vsli:raw="Defines a source document.">定义源文档。</summary>
      <param name="url" vsli:raw="The URL that identifies the document.">标识文档的 URL。</param>
      <param name="language" vsli:raw="The document language. This parameter can be &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">文档语言。 此参数可以为 <see cref="F:System.Guid.Empty" />。</param>
      <param name="languageVendor" vsli:raw="The identity of the vendor for the document language. This parameter can be &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">文档语言的供应商标识。 此参数可以为 <see cref="F:System.Guid.Empty" />。</param>
      <param name="documentType" vsli:raw="The type of the document. This parameter can be &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">文档的类型。 此参数可以为 <see cref="F:System.Guid.Empty" />。</param>
      <returns vsli:raw="The object that represents the document.">表示文档的对象。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines a field in a type or a global field.">在类型或全局字段中定义字段。</summary>
      <param name="parent" vsli:raw="The metadata type or method token.">元数据类型或方法标记。</param>
      <param name="name" vsli:raw="The field name.">字段名。</param>
      <param name="attributes" vsli:raw="A bitwise combination of the field attributes.">字段特性的按位组合。</param>
      <param name="signature" vsli:raw="The field signature.">字段签名。</param>
      <param name="addrKind" vsli:raw="The address types for &lt;paramref name=&quot;addr1&quot; /&gt; and &lt;paramref name=&quot;addr2&quot; /&gt;.">
        <paramref name="addr1" /> 和 <paramref name="addr2" /> 的地址类型。</param>
      <param name="addr1" vsli:raw="The first address for the field specification.">字段规格的第一个地址。</param>
      <param name="addr2" vsli:raw="The second address for the field specification.">字段规格的第二个地址。</param>
      <param name="addr3" vsli:raw="The third address for the field specification.">字段规格的第三个地址。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines a single global variable.">定义单个全局变量。</summary>
      <param name="name" vsli:raw="The global variable name.">全局变量名称。</param>
      <param name="attributes" vsli:raw="A bitwise combination of the global variable attributes.">全局变量特性的按位组合。</param>
      <param name="signature" vsli:raw="The global variable signature.">全局变量签名。</param>
      <param name="addrKind" vsli:raw="The address types for &lt;paramref name=&quot;addr1&quot; /&gt;, &lt;paramref name=&quot;addr2&quot; /&gt;, and &lt;paramref name=&quot;addr3&quot; /&gt;.">
        <paramref name="addr1" />、<paramref name="addr2" /> 和 <paramref name="addr3" /> 的地址类型。</param>
      <param name="addr1" vsli:raw="The first address for the global variable specification.">全局变量规格的第一个地址。</param>
      <param name="addr2" vsli:raw="The second address for the global variable specification.">全局变量规格的第二个地址。</param>
      <param name="addr3" vsli:raw="The third address for the global variable specification.">全局变量规格的第三个地址。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines a single variable in the current lexical scope.">在当前词法范围内定义单个变量。</summary>
      <param name="name" vsli:raw="The local variable name.">局部变量名称。</param>
      <param name="attributes" vsli:raw="A bitwise combination of the local variable attributes.">局部变量特性的按位组合。</param>
      <param name="signature" vsli:raw="The local variable signature.">局部变量签名。</param>
      <param name="addrKind" vsli:raw="The address types for &lt;paramref name=&quot;addr1&quot; /&gt;, &lt;paramref name=&quot;addr2&quot; /&gt;, and &lt;paramref name=&quot;addr3&quot; /&gt;.">
        <paramref name="addr1" />、<paramref name="addr2" /> 和 <paramref name="addr3" /> 的地址类型。</param>
      <param name="addr1" vsli:raw="The first address for the local variable specification.">局部变量规格的第一个地址。</param>
      <param name="addr2" vsli:raw="The second address for the local variable specification.">局部变量规格的第二个地址。</param>
      <param name="addr3" vsli:raw="The third address for the local variable specification.">局部变量规格的第三个地址。</param>
      <param name="startOffset" vsli:raw="The start offset for the variable. If this parameter is zero, it is ignored and the variable is defined throughout the entire scope. If the parameter is nonzero, the variable falls within the offsets of the current scope.">变量的起始偏移量。 如果此参数为零，则忽略此参数，并在整个范围内定义该变量。 如果此参数为非 0，则该变量将位于当前范围的偏移量之内。</param>
      <param name="endOffset" vsli:raw="The end offset for the variable. If this parameter is zero, it is ignored and the variable is defined throughout the entire scope. If the parameter is nonzero, the variable falls within the offsets of the current scope.">变量的结束偏移量。 如果此参数为零，则忽略此参数，并在整个范围内定义该变量。 如果此参数为非 0，则该变量将位于当前范围的偏移量之内。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines a single parameter in the current method. The type of each parameter is taken from its position within the signature of the method.">在当前方法中定义单个参数。 每个参数的类型从它在方法的签名内的位置获取。</summary>
      <param name="name" vsli:raw="The parameter name.">参数名称。</param>
      <param name="attributes" vsli:raw="A bitwise combination of the parameter attributes.">参数特性的按位组合。</param>
      <param name="sequence" vsli:raw="The parameter signature.">参数签名。</param>
      <param name="addrKind" vsli:raw="The address types for &lt;paramref name=&quot;addr1&quot; /&gt;, &lt;paramref name=&quot;addr2&quot; /&gt;, and &lt;paramref name=&quot;addr3&quot; /&gt;.">
        <paramref name="addr1" />、<paramref name="addr2" /> 和 <paramref name="addr3" /> 的地址类型。</param>
      <param name="addr1" vsli:raw="The first address for the parameter specification.">参数规格的第一个地址。</param>
      <param name="addr2" vsli:raw="The second address for the parameter specification.">参数规格的第二个地址。</param>
      <param name="addr3" vsli:raw="The third address for the parameter specification.">参数规格的第三个地址。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary vsli:raw="Defines a group of sequence points within the current method.">在当前方法内定义一组序列点。</summary>
      <param name="document" vsli:raw="The document object for which the sequence points are being defined.">正在为其定义序列点的文档对象。</param>
      <param name="offsets" vsli:raw="The sequence point offsets measured from the beginning of methods.">从方法开始测量的序列点偏移量。</param>
      <param name="lines" vsli:raw="The document lines for the sequence points.">序列点的文档行。</param>
      <param name="columns" vsli:raw="The document positions for the sequence points.">序列点的文档位置。</param>
      <param name="endLines" vsli:raw="The document end lines for the sequence points.">序列点的文档结束行。</param>
      <param name="endColumns" vsli:raw="The document end positions for the sequence points.">序列点的文档结束位置。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
      <summary vsli:raw="Sets the metadata emitter interface to associate with a writer.">设置元数据发射器接口以便与编写器关联。</summary>
      <param name="emitter" vsli:raw="The metadata emitter interface.">元数据发射器接口。</param>
      <param name="filename" vsli:raw="The file name for which the debugging symbols are written. Some writers require a file name, and others do not. If a file name is specified for a writer that does not use file names, this parameter is ignored.">向其中写入调试符号的文件名。 某些编写器要求文件名，而其他编写器却不要求。 如果为不使用文件名的编写器指定文件名，则忽略此参数。</param>
      <param name="fFullBuild" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; indicates that this is a full rebuild; &lt;see langword=&quot;false&quot; /&gt; indicates that this is an incremental compilation.">
        <see langword="true" /> 指示这是完全重新生成的；<see langword="false" /> 指示这是增量编译。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Opens a method to place symbol information into.">打开要向其中放入符号信息的方法。</summary>
      <param name="method" vsli:raw="The metadata token for the method to be opened.">要打开的方法的元数据标记。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace(System.String)">
      <summary vsli:raw="Opens a new namespace.">打开一个新的命名空间。</summary>
      <param name="name" vsli:raw="The name of the new namespace.">新命名空间的名称。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
      <summary vsli:raw="Opens a new lexical scope in the current method.">在当前方法中打开新的词法范围。</summary>
      <param name="startOffset" vsli:raw="The offset, in bytes, from the beginning of the method to the first instruction in the lexical scope.">从方法的开始处到词法范围内第一条指令的偏移量，以字节数表示。</param>
      <returns vsli:raw="An opaque scope identifier that can be used with &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)&quot; /&gt; to define the start and end offsets of a scope at a later time. In this case, the offsets passed to &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)&quot; /&gt; and &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)&quot; /&gt; are ignored. A scope identifier is valid only in the current method.">一个不透明的范围标识符，它以后可以与 <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)" /> 一起使用，以定义范围的起始和结束偏移量。 在这种情况下，忽略传递到 <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)" /> 和 <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)" /> 的偏移量。 范围标识符只在当前方法中有效。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
      <summary vsli:raw="Specifies the true start and end of a method within a source file. Use &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)&quot; /&gt; to specify the extent of a method, independent of the sequence points that exist within the method.">指定源文件内方法的真正开始和结尾。 使用 <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)" /> 指定方法的作用域，独立于方法内存在的序列点。</summary>
      <param name="startDoc" vsli:raw="The document that contains the starting position.">包含起始位置的文档。</param>
      <param name="startLine" vsli:raw="The starting line number.">起始行号。</param>
      <param name="startColumn" vsli:raw="The starting column.">起始列。</param>
      <param name="endDoc" vsli:raw="The document that contains the ending position.">包含结束位置的文档。</param>
      <param name="endLine" vsli:raw="The ending line number.">结束行号。</param>
      <param name="endColumn" vsli:raw="The ending column number.">结束列号。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines the offset range for the specified lexical scope.">定义指定词法范围的偏移量范围。</summary>
      <param name="scopeID" vsli:raw="The identifier of the lexical scope.">词法范围的标识符。</param>
      <param name="startOffset" vsli:raw="The byte offset of the beginning of the lexical scope.">词法范围的开始的字节偏移量。</param>
      <param name="endOffset" vsli:raw="The byte offset of the end of the lexical scope.">词法范围的结尾的字节偏移量。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Byte[])">
      <summary vsli:raw="Defines an attribute when given the attribute name and the attribute value.">在给定特性名称和特性值的情况下，定义特性。</summary>
      <param name="parent" vsli:raw="The metadata token for which the attribute is being defined.">正在为其定义特性的元数据标记。</param>
      <param name="name" vsli:raw="The attribute name.">特性名称。</param>
      <param name="data" vsli:raw="The attribute value.">特性值。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter(System.IntPtr)">
      <summary vsli:raw="Sets the underlying &lt;see langword=&quot;ISymUnmanagedWriter&quot; /&gt; (the corresponding unmanaged interface) that a managed &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolWriter&quot; /&gt; uses to emit symbols.">设置基础 <see langword="ISymUnmanagedWriter" />（对应的非托管接口），托管 <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /> 使用它来发出符号。</summary>
      <param name="underlyingWriter" vsli:raw="A pointer to code that represents the underlying writer.">指向表示此基础编写器的代码的指针。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUserEntryPoint(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Identifies the user-defined method as the entry point for the current module.">将用户定义的方法标识为当前模块的入口点。</summary>
      <param name="entryMethod" vsli:raw="The metadata token for the method that is the user entry point.">方法的元数据标记，它是用户入口点。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace(System.String)">
      <summary vsli:raw="Specifies that the given, fully qualified namespace name is used within the open lexical scope.">指定在打开的词法范围内使用给定的、完全限定的命名空间名称。</summary>
      <param name="fullName" vsli:raw="The fully qualified name of the namespace.">命名空间的完全限定名称。</param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymAddressKind">
      <summary vsli:raw="Specifies address types for local variables, parameters, and fields in the methods &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)&quot; /&gt;, &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)&quot; /&gt;, and &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)&quot; /&gt; of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolWriter&quot; /&gt; interface.">指定 <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /> 接口的 <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)" />、<see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)" /> 和 <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /> 方法中的局部变量、参数和字段的地址类型。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.BitField">
      <summary vsli:raw="A bit field. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the position where the field starts, and the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the field length.">位字段。 <paramref name="addr1" /> 参数是字段的起始位置，<paramref name="addr2" /> 参数是字段长度。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.ILOffset">
      <summary vsli:raw="A Microsoft intermediate language (MSIL) offset. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the MSIL local variable or parameter index.">Microsoft 中间语言 (MSIL) 偏移量。 <paramref name="addr1" /> 参数是 MSIL 局部变量或参数索引。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeOffset">
      <summary vsli:raw="A native offset. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the offset from the start of the parent.">本机偏移量。 <paramref name="addr1" /> 参数是距离父级起始位置的偏移量。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegister">
      <summary vsli:raw="A native register address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the register in which the variable is stored.">本机寄存器地址。 <paramref name="addr1" /> 参数是在其中存储变量的寄存器。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterRegister">
      <summary vsli:raw="A register-relative address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the low-order register, and the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the high-order register.">寄存器相对地址。 <paramref name="addr1" /> 参数是低位寄存器，<paramref name="addr2" /> 参数是高位寄存器。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterRelative">
      <summary vsli:raw="A register-relative address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the register, and the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the offset.">寄存器相对地址。 <paramref name="addr1" /> 参数是寄存器，而 <paramref name="addr2" /> 参数是偏移量。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterStack">
      <summary vsli:raw="A register-relative address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the low-order register, the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the stack register, and the &lt;paramref name=&quot;addr3&quot; /&gt; parameter is the offset from the stack pointer to the high-order part of the value.">寄存器相对地址。 <paramref name="addr1" /> 参数是低位寄存器，<paramref name="addr2" /> 参数是堆栈寄存器，<paramref name="addr3" /> 参数是距离值的高位部分堆栈指针的偏移量。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRVA">
      <summary vsli:raw="A native Relevant Virtual Address (RVA). The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the RVA in the module.">本机相关虚拟地址 (RVA)。 <paramref name="addr1" /> 参数是模块中的 RVA。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeSectionOffset">
      <summary vsli:raw="A native section offset. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the section, and the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the offset.">本机节偏移量。 <paramref name="addr1" /> 参数是节，<paramref name="addr2" /> 参数是偏移量。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeStackRegister">
      <summary vsli:raw="A register-relative address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the stack register, the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the offset from the stack pointer to the low-order part of the value, and the &lt;paramref name=&quot;addr3&quot; /&gt; parameter is the high-order register.">寄存器相对地址。 <paramref name="addr1" /> 参数是堆栈寄存器，<paramref name="addr2" /> 参数是距离值的低位部分堆栈指针的偏移量，<paramref name="addr3" /> 参数是高位寄存器。</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymbolToken">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure is an object representation of a token that represents symbolic information.">
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 结构是表示符号信息的标记的对象表示形式。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure when given a value.">在给定值的情况下，初始化 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 结构的新实例。</summary>
      <param name="val" vsli:raw="The value to be used for the token.">要用于标记的值。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Determines whether &lt;paramref name=&quot;obj&quot; /&gt; is equal to this instance.">确定 <paramref name="obj" /> 是否等于此实例。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; to check.">要检查的 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 与此实例相等，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Object)">
      <summary vsli:raw="Determines whether &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; and is equal to this instance.">确定 <paramref name="obj" /> 是否为 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 的实例以及是否等于此实例。</summary>
      <param name="obj" vsli:raw="The object to check.">要检查的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; and is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="obj" /> 是 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 的一个实例并且等于此实例，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.GetHashCode">
      <summary vsli:raw="Generates the hash code for the current token.">生成当前标记的哈希代码。</summary>
      <returns vsli:raw="The hash code for the current token.">当前标记的哈希代码。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.GetToken">
      <summary vsli:raw="Gets the value of the current token.">获取当前标记的值。</summary>
      <returns vsli:raw="The value of the current token.">当前标记的值。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.op_Equality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Returns a value indicating whether two &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; objects are equal.">返回一个值，该值指示两个 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 对象是否相等。</summary>
      <param name="a" vsli:raw="A &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure.">一个 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 结构。</param>
      <param name="b" vsli:raw="A &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure.">一个 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 结构。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; and &lt;paramref name=&quot;b&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="a" /> 和 <paramref name="b" /> 相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.op_Inequality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Returns a value indicating whether two &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; objects are not equal.">返回一个值，该值指示两个 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 对象是否不相等。</summary>
      <param name="a" vsli:raw="A &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure.">一个 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 结构。</param>
      <param name="b" vsli:raw="A &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure.">一个 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 结构。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; and &lt;paramref name=&quot;b&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="a" /> 和 <paramref name="b" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymDocumentType">
      <summary vsli:raw="Holds the public GUIDs for document types to be used with the symbol store.">保存要与符号存储区一起使用的文档类型的公用 GUID。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymDocumentType.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymDocumentType&quot; /&gt; class.">初始化 <see cref="T:System.Diagnostics.SymbolStore.SymDocumentType" /> 类的新实例。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymDocumentType.Text">
      <summary vsli:raw="Specifies the GUID of the document type to be used with the symbol store.">指定要与符号存储区一起使用的文档类型的 GUID。</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymLanguageType">
      <summary vsli:raw="Holds the public GUIDs for language types to be used with the symbol store.">保存要与符号存储区一起使用的语言类型的公用 GUID。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymLanguageType.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymLanguageType&quot; /&gt; class.">初始化 <see cref="T:System.Diagnostics.SymbolStore.SymLanguageType" /> 类的新实例。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Basic">
      <summary vsli:raw="Specifies the GUID of the Basic language type to be used with the symbol store.">指定要与符号存储区一起使用的 Basic 语言类型的 GUID。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.C">
      <summary vsli:raw="Specifies the GUID of the C language type to be used with the symbol store.">指定要与符号存储区一起使用的 C 语言类型的 GUID。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Cobol">
      <summary vsli:raw="Specifies the GUID of the Cobol language type to be used with the symbol store.">指定要与符号存储区一起使用的 Cobol 语言类型的 GUID。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.CPlusPlus">
      <summary vsli:raw="Specifies the GUID of the C++ language type to be used with the symbol store.">指定要与符号存储区一起使用的 C++ 语言类型的 GUID。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.CSharp">
      <summary vsli:raw="Specifies the GUID of the C# language type to be used with the symbol store.">指定要与符号存储区一起使用的 C# 语言类型的 GUID。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.ILAssembly">
      <summary vsli:raw="Specifies the GUID of the ILAssembly language type to be used with the symbol store.">指定要与符号存储区一起使用的 ILAssembly 语言类型的 GUID。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Java">
      <summary vsli:raw="Specifies the GUID of the Java language type to be used with the symbol store.">指定要与符号存储区一起使用的 Java 语言类型的 GUID。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.JScript">
      <summary vsli:raw="Specifies the GUID of the JScript language type to be used with the symbol store.">指定要与符号存储区一起使用的 JScript 语言类型的 GUID。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.MCPlusPlus">
      <summary vsli:raw="Specifies the GUID of the C++ language type to be used with the symbol store.">指定要与符号存储区一起使用的 C++ 语言类型的 GUID。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Pascal">
      <summary vsli:raw="Specifies the GUID of the Pascal language type to be used with the symbol store.">指定要与符号存储区一起使用的 Pascal 语言类型的 GUID。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.SMC">
      <summary vsli:raw="Specifies the GUID of the SMC language type to be used with the symbol store.">指定要与符号存储区一起使用的 SMC 语言类型的 GUID。</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymLanguageVendor">
      <summary vsli:raw="Holds the public GUIDs for language vendors to be used with the symbol store.">保存要与符号存储区一起使用的语言供应商的公用 GUID。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymLanguageVendor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymLanguageVendor&quot; /&gt; class.">初始化 <see cref="T:System.Diagnostics.SymbolStore.SymLanguageVendor" /> 类的新实例。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageVendor.Microsoft">
      <summary vsli:raw="Specifies the GUID of the Microsoft language vendor.">指定 Microsoft 语言供应商的 GUID。</summary>
    </member>
  </members>
</doc>
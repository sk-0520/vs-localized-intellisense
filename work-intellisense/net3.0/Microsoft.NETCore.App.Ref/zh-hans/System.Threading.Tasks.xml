<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Tasks</name>
  </assembly>
  <members>
    <member name="T:System.OperationCanceledException">
      <summary>取消线程正在执行的操作时在线程中引发的异常。</summary>
    </member>
    <member name="M:System.OperationCanceledException.#ctor">
      <summary>使用系统提供的错误信息初始化 <see cref="T:System.OperationCanceledException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.OperationCanceledException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.OperationCanceledException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.OperationCanceledException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Exception,System.Threading.CancellationToken)">
      <summary>用指定的错误消息、对作为此异常原因的内部异常的引用以及取消令牌初始化 <see cref="T:System.OperationCanceledException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
      <param name="token">一个与已取消的操作关联的取消标记。</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Threading.CancellationToken)">
      <summary>使用指定的错误信息和取消令牌初始化 <see cref="T:System.OperationCanceledException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="token">一个与已取消的操作关联的取消标记。</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.Threading.CancellationToken)">
      <summary>用取消令牌初始化 <see cref="T:System.OperationCanceledException" /> 类的新实例。</summary>
      <param name="token">一个与已取消的操作关联的取消标记。</param>
    </member>
    <member name="P:System.OperationCanceledException.CancellationToken">
      <summary>获取与已取消的操作关联的令牌。</summary>
      <returns>与已取消的操作关联的令牌，或默认令牌。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder">
      <summary>表示异步迭代器的生成器。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>指定的 Awaiter 完成时，安排状态机以继续下一操作。</summary>
      <param name="awaiter">Awaiter。</param>
      <param name="stateMachine">状态机。</param>
      <typeparam name="TAwaiter">Awaiter 的类型。</typeparam>
      <typeparam name="TStateMachine">状态机的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>指定的 Awaiter 完成时，安排状态机以继续下一操作。</summary>
      <param name="awaiter">Awaiter。</param>
      <param name="stateMachine">状态机。</param>
      <typeparam name="TAwaiter">Awaiter 的类型。</typeparam>
      <typeparam name="TStateMachine">状态机的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.Complete">
      <summary>将迭代标记为已完成，无论是否成功。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.Create">
      <summary>创建 <see cref="T:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder" /> 结构的实例。</summary>
      <returns>已初始化的实例。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.MoveNext``1(``0@)">
      <summary>在状态机上调用<see cref="M:System.Runtime.CompilerServices.IAsyncStateMachine.MoveNext" />，同时保护 <see cref="T:System.Threading.ExecutionContext" />。</summary>
      <param name="stateMachine">由引用传递的状态机实例。</param>
      <typeparam name="TStateMachine">状态机的类型。</typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder">
      <summary>表示返回任务的异步方法生成器。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>指定的 Awaiter 完成时，安排状态机以继续下一操作。</summary>
      <param name="awaiter">Awaiter。</param>
      <param name="stateMachine">状态机。</param>
      <typeparam name="TAwaiter">Awaiter 的类型。</typeparam>
      <typeparam name="TStateMachine">状态机的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>指定的 Awaiter 完成时，安排状态机以继续下一操作。 可从部分受信任的代码调用此方法。</summary>
      <param name="awaiter">Awaiter。</param>
      <param name="stateMachine">状态机。</param>
      <typeparam name="TAwaiter">Awaiter 的类型。</typeparam>
      <typeparam name="TStateMachine">状态机的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Create">
      <summary>创建 <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder" /> 类的实例。</summary>
      <returns>生成器的新实例。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetException(System.Exception)">
      <summary>标记此任务为失败并将指定的异常绑定到此任务。</summary>
      <param name="exception">要绑定到该任务的异常。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">任务已完成。  
 或  
 未初始化该生成器。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult">
      <summary>将该任务标记为已成功完成。</summary>
      <exception cref="T:System.InvalidOperationException">任务已完成。  

或 -  

 未初始化该生成器。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>将生成器与指定的状态机相关联。</summary>
      <param name="stateMachine">要与生成器关联的状态机实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">已设置状态机。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start``1(``0@)">
      <summary>开始运行具有关联状态机的生成器。</summary>
      <param name="stateMachine">由引用传递的状态机实例。</param>
      <typeparam name="TStateMachine">状态机的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Task">
      <summary>获取此生成器的任务。</summary>
      <returns>此生成器的任务。</returns>
      <exception cref="T:System.InvalidOperationException">未初始化该生成器。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1">
      <summary>表示异步方法的生成器，该生成器将返回任务并提供结果的参数。</summary>
      <typeparam name="TResult">用来完成任务的结果。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)">
      <summary>指定的 Awaiter 完成时，安排状态机以继续下一操作。</summary>
      <param name="awaiter">Awaiter。</param>
      <param name="stateMachine">状态机。</param>
      <typeparam name="TAwaiter">Awaiter 的类型。</typeparam>
      <typeparam name="TStateMachine">状态机的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>指定的 Awaiter 完成时，安排状态机以继续下一操作。 可从部分受信任的代码调用此方法。</summary>
      <param name="awaiter">Awaiter。</param>
      <param name="stateMachine">状态机。</param>
      <typeparam name="TAwaiter">Awaiter 的类型。</typeparam>
      <typeparam name="TStateMachine">状态机的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Create">
      <summary>创建 <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1" /> 类的实例。</summary>
      <returns>生成器的新实例。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(System.Exception)">
      <summary>标记此任务为失败并将指定的异常绑定到此任务。</summary>
      <param name="exception">要绑定到该任务的异常。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">任务已完成。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(`0)">
      <summary>将该任务标记为已成功完成。</summary>
      <param name="result">用来完成任务的结果。</param>
      <exception cref="T:System.InvalidOperationException">任务已完成。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>将生成器与指定的状态机相关联。</summary>
      <param name="stateMachine">要与生成器关联的状态机实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">已设置状态机。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start``1(``0@)">
      <summary>开始运行具有关联状态机的生成器。</summary>
      <param name="stateMachine">由引用传递的状态机实例。</param>
      <typeparam name="TStateMachine">状态机的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Task">
      <summary>获取此生成器的任务。</summary>
      <returns>此生成器的任务。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder">
      <summary>表示不返回值的异步方法生成器。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>指定的 Awaiter 完成时，安排状态机以继续下一操作。</summary>
      <param name="awaiter">Awaiter。</param>
      <param name="stateMachine">状态机。</param>
      <typeparam name="TAwaiter">Awaiter 的类型。</typeparam>
      <typeparam name="TStateMachine">状态机的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>指定的 Awaiter 完成时，安排状态机以继续下一操作。 可从部分受信任的代码调用此方法。</summary>
      <param name="awaiter">Awaiter。</param>
      <param name="stateMachine">状态机。</param>
      <typeparam name="TAwaiter">Awaiter 的类型。</typeparam>
      <typeparam name="TStateMachine">状态机的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Create">
      <summary>创建 <see cref="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder" /> 类的实例。</summary>
      <returns>生成器的新实例。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetException(System.Exception)">
      <summary>将一个异常绑定到该方法生成器。</summary>
      <param name="exception">要绑定的异常。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">未初始化该生成器。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetResult">
      <summary>标记此方法生成器为成功完成。</summary>
      <exception cref="T:System.InvalidOperationException">未初始化该生成器。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>将生成器与指定的状态机相关联。</summary>
      <param name="stateMachine">要与生成器关联的状态机实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">已设置状态机。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Start``1(``0@)">
      <summary>开始运行具有关联状态机的生成器。</summary>
      <param name="stateMachine">由引用传递的状态机实例。</param>
      <typeparam name="TStateMachine">状态机的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredAsyncDisposable">
      <summary>提供一个类型，该类型可用于配置 <see cref="T:System.IAsyncDisposable" /> 上的等待的执行方式。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredAsyncDisposable.DisposeAsync">
      <summary>异步释放 <see cref="T:System.Runtime.CompilerServices.ConfiguredAsyncDisposable" /> 使用的非托管资源。</summary>
      <returns>一个表示异步释放操作的任务。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1">
      <summary>提供可等待的异步可枚举项，用于实现可取消的迭代和配置的等待。</summary>
      <typeparam name="T">要枚举的值的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.ConfigureAwait(System.Boolean)">
      <summary>配置如何执行从异步迭代返回的任务的等待。</summary>
      <param name="continueOnCapturedContext">若要捕获并封装回当前上下文，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>配置的可枚举项。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator">
      <summary>提供可等待的异步枚举器，用于实现可取消的迭代和配置的等待。</summary>
      <typeparam name="T">要枚举的值的类型。</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.Current">
      <summary>获取集合中位于枚举数当前位置的元素。</summary>
      <returns>集合中位于枚举数当前位置的元素。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.DisposeAsync">
      <summary>以异步方式执行与释放或重置非托管资源相关的应用程序定义的任务。</summary>
      <returns>一个表示异步释放操作的任务。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.MoveNextAsync">
      <summary>将枚举器异步推进到集合的下一个元素。</summary>
      <returns>一个 <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" />，如果枚举器成功前移到下一个元素，则其完成，且结果为 <see langword="true" />；如果枚举器已超出集合末尾，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.GetAsyncEnumerator">
      <summary>返回一个枚举器，该枚举器通过集合进行异步迭代，支持可取消的迭代和配置的等待。</summary>
      <returns>用于 <see cref="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1" /> 类的枚举器。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.WithCancellation(System.Threading.CancellationToken)">
      <summary>设置要在循环访问时传递到 <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" /> 的 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <param name="cancellationToken">要使用的取消标记。</param>
      <returns>配置的可枚举项。</returns>
    </member>
    <member name="T:System.Threading.CancellationTokenSource">
      <summary>通知 <see cref="T:System.Threading.CancellationToken" />，告知其应被取消。</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor">
      <summary>初始化 <see cref="T:System.Threading.CancellationTokenSource" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Threading.CancellationTokenSource" /> 类的新实例，在指定的延迟（以毫秒为单位）后将被取消。</summary>
      <param name="millisecondsDelay">取消此 <see cref="T:System.Threading.CancellationTokenSource" /> 前等待的时间间隔（以毫秒为单位）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsDelay" /> 小于 -1。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
      <summary>初始化 <see cref="T:System.Threading.CancellationTokenSource" /> 类的新实例，在指定的时间跨度后将被取消。</summary>
      <param name="delay">取消此 <see cref="T:System.Threading.CancellationTokenSource" /> 前等待的时间间隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delay" />.<see cref="P:System.TimeSpan.TotalMilliseconds" /> 小于 -1 或大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Cancel">
      <summary>传达取消请求。</summary>
      <exception cref="T:System.ObjectDisposedException">此 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.AggregateException">聚合异常包含由相关联的 <see cref="T:System.Threading.CancellationToken" /> 上已注册的回调引发的所有异常。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
      <summary>如果出现异常，传达取消请求，并指定是否应处理其余回调和可取消操作。</summary>
      <param name="throwOnFirstException">如果异常应立即传播，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ObjectDisposedException">此 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.AggregateException">聚合异常包含由相关联的 <see cref="T:System.Threading.CancellationToken" /> 上已注册的回调引发的所有异常。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
      <summary>在指定的毫秒数后计划对此 <see cref="T:System.Threading.CancellationTokenSource" /> 的取消操作。</summary>
      <param name="millisecondsDelay">取消 <see cref="T:System.Threading.CancellationTokenSource" /> 前等待的时间范围。</param>
      <exception cref="T:System.ObjectDisposedException">当该 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsDelay" /> 小于 -1 时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)">
      <summary>在指定的时间跨度后计划对此 <see cref="T:System.Threading.CancellationTokenSource" /> 的取消操作。</summary>
      <param name="delay">取消 <see cref="T:System.Threading.CancellationTokenSource" /> 前等待的时间范围。</param>
      <exception cref="T:System.ObjectDisposedException">当该 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放时引发的异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">当 <paramref name="delay" /> 小于 -1 或大比 Int32.MaxValue 引发的异常。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>创建一个将在任何源标记处于取消状态时处于取消状态的 <see cref="T:System.Threading.CancellationTokenSource" />。</summary>
      <param name="token1">要观察的第一个取消标记。</param>
      <param name="token2">要观察的第二个取消标记。</param>
      <returns>一个链接到源标记的 <see cref="T:System.Threading.CancellationTokenSource" />。</returns>
      <exception cref="T:System.ObjectDisposedException">与源标记之一关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
      <summary>创建一个将在在指定的数组中任何源标记处于取消状态时处于取消状态的 <see cref="T:System.Threading.CancellationTokenSource" />。</summary>
      <param name="tokens">包含要观察的取消标记实例的数组。</param>
      <returns>一个链接到源标记的 <see cref="T:System.Threading.CancellationTokenSource" />。</returns>
      <exception cref="T:System.ObjectDisposedException">与源标记之一关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokens" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tokens" /> 为空。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Dispose">
      <summary>释放 <see cref="T:System.Threading.CancellationTokenSource" /> 类的当前实例所使用的所有资源。</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Dispose(System.Boolean)">
      <summary>释放 <see cref="T:System.Threading.CancellationTokenSource" /> 类使用的非托管资源，并可以选择释放托管资源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示释放托管资源和非托管资源；<see langword="false" /> 表示仅释放非托管资源。</param>
    </member>
    <member name="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
      <summary>获取是否已请求取消此 <see cref="T:System.Threading.CancellationTokenSource" />。</summary>
      <returns>如果已请求取消此 <see cref="T:System.Threading.CancellationTokenSource" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.CancellationTokenSource.Token">
      <summary>获取与此 <see cref="T:System.Threading.CancellationToken" /> 关联的 <see cref="T:System.Threading.CancellationTokenSource" />。</summary>
      <returns>与此 <see cref="T:System.Threading.CancellationToken" /> 关联的 <see cref="T:System.Threading.CancellationTokenSource" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放标记源。</exception>
    </member>
    <member name="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair">
      <summary>提供任务计划程序，其用于执行任务，同时确保并发任务可同时运行，而独占任务从不运行。</summary>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor">
      <summary>初始化 <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler)">
      <summary>用指定的计划程序目标初始化 <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> 类的新实例。</summary>
      <param name="taskScheduler">应执行的目标计划程序。</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32)">
      <summary>初始化针对最大并发级别的指定计划程序 <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> 类的新实例。</summary>
      <param name="taskScheduler">应执行的目标计划程序。</param>
      <param name="maxConcurrencyLevel">并发运行的最大任务数。</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" />  类的新实例，该实例针对最大并发级别和最大计划任务数的指定计划程序，并可能作为一个单元来处理。</summary>
      <param name="taskScheduler">应执行的目标计划程序。</param>
      <param name="maxConcurrencyLevel">并发运行的最大任务数。</param>
      <param name="maxItemsPerTask">要处理的被成对用于每一个基础计划任务的最大任务数。</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Complete">
      <summary>通知不能接受更多任务的计划程序对。</summary>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Completion">
      <summary>当调度程序已经完成处理过程时，获取将要完成的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>计划程序完成处理时将完成的异步操作。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentScheduler">
      <summary>获取可用于调度任务到此添加线对的 <see cref="T:System.Threading.Tasks.TaskScheduler" />，其中的线对可以与此线对上的其他任务同时运行。</summary>
      <returns>可用于当前安排任务的对象。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ExclusiveScheduler">
      <summary>获取可用于调度任务到此添加线对的 <see cref="T:System.Threading.Tasks.TaskScheduler" />，其中的线对必须独占地运行，不考虑此线对上的其他任务。</summary>
      <returns>可用于安排任务没有与其他任务并发运行的对象。</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskAsyncEnumerableExtensions">
      <summary>提供一组静态方法，用于配置异步可枚举项和可处置项的任务相关行为。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait(System.IAsyncDisposable,System.Boolean)">
      <summary>配置如何执行从异步可处置项返回的任务的等待。</summary>
      <param name="source">源异步可处置项。</param>
      <param name="continueOnCapturedContext">若要捕获并封装回当前上下文，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>配置的异步可处置项。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Boolean)">
      <summary>配置如何执行从异步迭代返回的任务的等待。</summary>
      <param name="source">要循环访问的源可枚举项。</param>
      <param name="continueOnCapturedContext">若要捕获并封装回当前上下文，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <typeparam name="T">要循环访问的对象的类型。</typeparam>
      <returns>配置的可枚举项。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.WithCancellation``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
      <summary>设置要在循环访问时传递到 <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" /> 的 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <param name="source">要循环访问的源可枚举项。</param>
      <param name="cancellationToken">要使用的取消标记。</param>
      <typeparam name="T">要循环访问的对象的类型。</typeparam>
      <returns>配置的可枚举项。</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskCanceledException">
      <summary>表示一个用于告知任务取消的异常。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor">
      <summary>使用由系统提供的用于描述错误的消息初始化 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String,System.Exception,System.Threading.CancellationToken)">
      <summary>用指定的错误消息、对导致此异常的内部异常的引用以及触发取消的 <see cref="T:System.Threading.CancellationToken" /> 初始化 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。</param>
      <param name="token">触发取消的取消标记。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.Threading.Tasks.Task)">
      <summary>使用对已取消的 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 的引用初始化 <see cref="T:System.Threading.Tasks.Task" /> 类的新实例。</summary>
      <param name="task">已取消的任务。</param>
    </member>
    <member name="P:System.Threading.Tasks.TaskCanceledException.Task">
      <summary>获取与此异常关联的任务。</summary>
      <returns>对与此异常关联的 <see cref="T:System.Threading.Tasks.Task" /> 的引用。</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskCompletionSource`1">
      <summary>表示未绑定到委托的 <see cref="T:System.Threading.Tasks.Task`1" /> 的制造者方，并通过 <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> 属性提供对使用者方的访问。</summary>
      <typeparam name="TResult">与此<see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />关联的结果值的类型。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object)">
      <summary>使用指定的状态创建一个 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />。</summary>
      <param name="state">要用作基础 <see cref="T:System.Threading.Tasks.Task`1" /> 的 AsyncState 的状态。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的状态和选项创建一个 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />。</summary>
      <param name="state">要用作基础 <see cref="T:System.Threading.Tasks.Task`1" /> 的 AsyncState 的状态。</param>
      <param name="creationOptions">创建基础 <see cref="T:System.Threading.Tasks.Task`1" /> 时要使用的选项。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 表示与 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> 一起使用时无效的选项。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的选项创建一个 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />。</summary>
      <param name="creationOptions">创建基础 <see cref="T:System.Threading.Tasks.Task`1" /> 时要使用的选项。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 表示与 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> 一起使用时无效的选项。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetCanceled">
      <summary>将基础 <see cref="T:System.Threading.Tasks.Task`1" /> 转换为 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> 状态。</summary>
      <exception cref="T:System.InvalidOperationException">基础 <see cref="T:System.Threading.Tasks.Task`1" /> 已经处于三个最终状态之一： <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 或 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />；或者基础 <see cref="T:System.Threading.Tasks.Task`1" /> 已被释放。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放 <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>将基础 <see cref="T:System.Threading.Tasks.Task`1" /> 转换为 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状态，并对其绑定一些异常对象。</summary>
      <param name="exceptions">要绑定到此 <see cref="T:System.Threading.Tasks.Task`1" /> 的异常的集合。</param>
      <exception cref="T:System.ObjectDisposedException">已释放 <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exceptions" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="exceptions" /> 中有一个或多个 null 元素。</exception>
      <exception cref="T:System.InvalidOperationException">基础 <see cref="T:System.Threading.Tasks.Task`1" /> 已处于以下三种最终状态的其中一种：<see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 或 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)">
      <summary>将基础 <see cref="T:System.Threading.Tasks.Task`1" /> 转换为 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状态，并将其绑定到一个指定异常上。</summary>
      <param name="exception">要绑定到此 <see cref="T:System.Threading.Tasks.Task`1" /> 的异常。</param>
      <exception cref="T:System.ObjectDisposedException">已释放 <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">基础 <see cref="T:System.Threading.Tasks.Task`1" /> 已处于以下三种最终状态的其中一种：<see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 或 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetResult(`0)">
      <summary>将基础 <see cref="T:System.Threading.Tasks.Task`1" /> 转换为 <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /> 状态。</summary>
      <param name="result">要绑定到此 <see cref="T:System.Threading.Tasks.Task`1" /> 的结果值。</param>
      <exception cref="T:System.ObjectDisposedException">已释放 <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />。</exception>
      <exception cref="T:System.InvalidOperationException">基础 <see cref="T:System.Threading.Tasks.Task`1" /> 已处于以下三种最终状态的其中一种：<see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 或 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />。</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskCompletionSource`1.Task">
      <summary>获取由此 <see cref="T:System.Threading.Tasks.Task`1" /> 创建的 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />。</summary>
      <returns>返回由此 <see cref="T:System.Threading.Tasks.Task`1" /> 创建的 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled">
      <summary>尝试将基础 <see cref="T:System.Threading.Tasks.Task`1" /> 转换为 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> 状态。</summary>
      <returns>如果操作成功，则为 true；如果操作失败或对象已被释放，则为 false。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled(System.Threading.CancellationToken)">
      <summary>尝试将基础 <see cref="T:System.Threading.Tasks.Task`1" /> 转换为 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> 状态并启用要存储在取消的任务中的取消标记。</summary>
      <param name="cancellationToken">取消标记。</param>
      <returns>如果操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>尝试将基础 <see cref="T:System.Threading.Tasks.Task`1" /> 转换为 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状态，并对其绑定一些异常对象。</summary>
      <param name="exceptions">要绑定到此 <see cref="T:System.Threading.Tasks.Task`1" /> 的异常的集合。</param>
      <returns>如果操作成功，则为 true；否则为 false。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exceptions" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="exceptions" /> 中有一个或多个 null 元素。  
或 
<paramref name="exceptions" /> 集合为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
      <summary>尝试将基础 <see cref="T:System.Threading.Tasks.Task`1" /> 转换为 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状态，并将其绑定到一个指定异常上。</summary>
      <param name="exception">要绑定到此 <see cref="T:System.Threading.Tasks.Task`1" /> 的异常。</param>
      <returns>如果操作成功，则为 true；否则为 false。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)">
      <summary>尝试将基础 <see cref="T:System.Threading.Tasks.Task`1" /> 转换为 <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /> 状态。</summary>
      <param name="result">要绑定到此 <see cref="T:System.Threading.Tasks.Task`1" /> 的结果值。</param>
      <returns>如果操作成功，则为 true；否则为 false。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />。</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskExtensions">
      <summary>提供一组用于处理特定类型的 <see cref="T:System.Threading.Tasks.Task" /> 实例的静态方法（在 Visual Basic 中为共享方法）。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
      <summary>创建一个表示 <see cref="T:System.Threading.Tasks.Task" /> 的异步操作的代理 <see cref="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)" />。</summary>
      <param name="task">要解包的 <see langword="Task&lt;Task&gt;" /> (C#) 或者 <see langword="Task (Of Task)" /> (Visual Basic)。</param>
      <returns>表示所提供的 <see langword="System.Threading.Tasks.Task(Of Task)" /> 的异步操作的 Task。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="task" /> 参数为 null 时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
      <summary>创建一个表示 <see cref="T:System.Threading.Tasks.Task" /> 的异步操作的代理 <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) or <see langword="Task (Of Task(Of T))" /> (Visual Basic)。</summary>
      <param name="task">要解包的 <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) 或者 <see langword="Task (Of Task(Of T))" /> (Visual Basic)。</param>
      <typeparam name="TResult">任务结果的类型。</typeparam>
      <returns>一个 <see cref="T:System.Threading.Tasks.Task" /> 它表示所提供的 <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) 或 <see langword="Task (Of Task(Of T))" /> (Visual Basic) 的异步运算。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="task" /> 参数为 null 时引发的异常。</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskSchedulerException">
      <summary>表示一个用于告知由 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 计划的某个操作无效的异常。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor">
      <summary>使用由系统提供的用于描述错误的消息初始化 <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.Exception)">
      <summary>使用默认的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> 类的新实例。</summary>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
  </members>
</doc>
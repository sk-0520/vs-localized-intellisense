<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Runtime.Numerics</name>
  </assembly>
  <members>
    <member name="T:System.Numerics.BigInteger">
      <summary vsli:raw="Represents an arbitrarily large signed integer.">表示任意大的带符号整数。</summary>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Byte[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; structure using the values in a byte array.">使用字节数组中的值初始化 <see cref="T:System.Numerics.BigInteger" /> 结构的新实例。</summary>
      <param name="value" vsli:raw="An array of byte values in little-endian order.">顺序为 little-endian 的字节值的数组。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Decimal)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; structure using a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value.">使用 <see cref="T:System.Numerics.BigInteger" /> 值初始化 <see cref="T:System.Decimal" /> 结构的新实例。</summary>
      <param name="value" vsli:raw="A decimal number.">十进制数。</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; structure using a double-precision floating-point value.">使用双精度浮点值初始化 <see cref="T:System.Numerics.BigInteger" /> 结构的新实例。</summary>
      <param name="value" vsli:raw="A double-precision floating-point value.">一个双精度浮点值。</param>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see cref=&quot;F:System.Double.NaN&quot; /&gt;, &lt;see cref=&quot;F:System.Double.NegativeInfinity&quot; /&gt;, or &lt;see cref=&quot;F:System.Double.PositiveInfinity&quot; /&gt;.">
        <paramref name="value" /> 为 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; structure using a 32-bit signed integer value.">使用 32 位带符号整数值初始化 <see cref="T:System.Numerics.BigInteger" /> 结构的新实例。</summary>
      <param name="value" vsli:raw="A 32-bit signed integer.">32 位带符号整数。</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Int64)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; structure using a 64-bit signed integer value.">使用 64 位带符号整数值初始化 <see cref="T:System.Numerics.BigInteger" /> 结构的新实例。</summary>
      <param name="value" vsli:raw="A 64-bit signed integer.">64 位带符号整数。</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Boolean)">
      <param name="value" vsli:raw="A read-only span of bytes representing the big integer." />
      <param name="isUnsigned" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate &lt;paramref name=&quot;value&quot; /&gt; uses unsigned encoding; otherwise, &lt;see langword=&quot;false&quot; /&gt; (the default value)." />
      <param name="isBigEndian" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate &lt;paramref name=&quot;value&quot; /&gt; is in big-endian byte order; otherwise, &lt;see langword=&quot;false&quot; /&gt;  (the default value)." />
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Single)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; structure using a single-precision floating-point value.">使用单精度浮点值初始化 <see cref="T:System.Numerics.BigInteger" /> 结构的新实例。</summary>
      <param name="value" vsli:raw="A single-precision floating-point value.">单精度浮点值。</param>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see cref=&quot;F:System.Single.NaN&quot; /&gt;, &lt;see cref=&quot;F:System.Single.NegativeInfinity&quot; /&gt;, or &lt;see cref=&quot;F:System.Single.PositiveInfinity&quot; /&gt;.">
        <paramref name="value" /> 为 <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.NegativeInfinity" /> 或 <see cref="F:System.Single.PositiveInfinity" />。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.UInt32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; structure using an unsigned 32-bit integer value.">使用 32 位无符号整数值初始化 <see cref="T:System.Numerics.BigInteger" /> 结构的新实例。</summary>
      <param name="value" vsli:raw="An unsigned 32-bit integer value.">32 位无符号整数值。</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.UInt64)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; structure with an unsigned 64-bit integer value.">使用 64 位无符号整数值初始化 <see cref="T:System.Numerics.BigInteger" /> 结构的新实例。</summary>
      <param name="value" vsli:raw="An unsigned 64-bit integer.">64 位无符号整数。</param>
    </member>
    <member name="M:System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)">
      <summary vsli:raw="Gets the absolute value of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object.">获取 <see cref="T:System.Numerics.BigInteger" /> 对象的绝对值。</summary>
      <param name="value" vsli:raw="A number.">数字。</param>
      <returns vsli:raw="The absolute value of &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" /> 的绝对值。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Adds two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values and returns the result.">将两个 <see cref="T:System.Numerics.BigInteger" /> 值相加，并返回结果。</summary>
      <param name="left" vsli:raw="The first value to add.">要相加的第一个值。</param>
      <param name="right" vsli:raw="The second value to add.">要相加的第二个值。</param>
      <returns vsli:raw="The sum of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">
        <paramref name="left" /> 与 <paramref name="right" /> 的和。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Compares two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values and returns an integer that indicates whether the first value is less than, equal to, or greater than the second value.">比较两个 <see cref="T:System.Numerics.BigInteger" /> 值，并返回一个整数，该整数指示第一个值是小于、等于还是大于第二个值。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="A signed integer that indicates the relative values of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;, as shown in the following table.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Condition&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Less than zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;left&quot; /&gt; is less than &lt;paramref name=&quot;right&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;left&quot; /&gt; equals &lt;paramref name=&quot;right&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Greater than zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">一个有符号整数，指示 <paramref name="left" /> 和 <paramref name="right" /> 的相对值，如下表所示。  
  值 
  条件 
  小于零 
 <paramref name="left" /> 小于 <paramref name="right" />。  

  零 
 <paramref name="left" /> 等于 <paramref name="right" />。  

  大于零 
 <paramref name="left" /> 大于 <paramref name="right" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Int64)">
      <summary vsli:raw="Compares this instance to a signed 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the signed 64-bit integer.">将此实例与 64 位带符号整数进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于 64 位带符号整数的值。</summary>
      <param name="other" vsli:raw="The signed 64-bit integer to compare.">要比较的 64 位带符号整数。</param>
      <returns vsli:raw="A signed integer value that indicates the relationship of this instance to &lt;paramref name=&quot;other&quot; /&gt;, as shown in the following table.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Return value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Less than zero&lt;/term&gt;&lt;description&gt; The current instance is less than &lt;paramref name=&quot;other&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Zero&lt;/term&gt;&lt;description&gt; The current instance equals &lt;paramref name=&quot;other&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Greater than zero&lt;/term&gt;&lt;description&gt; The current instance is greater than &lt;paramref name=&quot;other&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">一个带符号整数值，指示此实例与 <paramref name="other" /> 的关系，如下表所示。  
  返回值 
  说明 
  小于零 
  当前实例小于 <paramref name="other" />。  

  零 
  当前实例等于 <paramref name="other" />。  

  大于零 
  当前实例大于 <paramref name="other" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)">
      <summary vsli:raw="Compares this instance to a second &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.">将此实例与另一个 <see cref="T:System.Numerics.BigInteger" /> 进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于指定对象的值。</summary>
      <param name="other" vsli:raw="The object to compare.">要比较的对象。</param>
      <returns vsli:raw="A signed integer value that indicates the relationship of this instance to &lt;paramref name=&quot;other&quot; /&gt;, as shown in the following table.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Return value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Less than zero&lt;/term&gt;&lt;description&gt; The current instance is less than &lt;paramref name=&quot;other&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Zero&lt;/term&gt;&lt;description&gt; The current instance equals &lt;paramref name=&quot;other&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Greater than zero&lt;/term&gt;&lt;description&gt; The current instance is greater than &lt;paramref name=&quot;other&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">一个带符号整数值，指示此实例与 <paramref name="other" /> 的关系，如下表所示。  
  返回值 
  说明 
  小于零 
  当前实例小于 <paramref name="other" />。  

  零 
  当前实例等于 <paramref name="other" />。  

  大于零 
  当前实例大于 <paramref name="other" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Object)">
      <summary vsli:raw="Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.">将此实例与指定对象进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于指定对象的值。</summary>
      <param name="obj" vsli:raw="The object to compare.">要比较的对象。</param>
      <returns vsli:raw="A signed integer that indicates the relationship of the current instance to the &lt;paramref name=&quot;obj&quot; /&gt; parameter, as shown in the following table.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Return value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Less than zero&lt;/term&gt;&lt;description&gt; The current instance is less than &lt;paramref name=&quot;obj&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Zero&lt;/term&gt;&lt;description&gt; The current instance equals &lt;paramref name=&quot;obj&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Greater than zero&lt;/term&gt;&lt;description&gt; The current instance is greater than &lt;paramref name=&quot;obj&quot; /&gt;, or the &lt;paramref name=&quot;obj&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">一个带符号整数，指示当前实例与 <paramref name="obj" /> 参数的关系，如下表所示。  
  返回值 
  说明 
  小于零 
  当前实例小于 <paramref name="obj" />。  

  零 
  当前实例等于 <paramref name="obj" />。  

  大于零 
  当前实例大于 <paramref name="obj" />，或者 <paramref name="obj" /> 参数为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is not a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">
        <paramref name="obj" /> 不是 <see cref="T:System.Numerics.BigInteger" />。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.UInt64)">
      <summary vsli:raw="Compares this instance to an unsigned 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the unsigned 64-bit integer.">将此实例与 64 位无符号整数进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于 64 位无符号整数的值。</summary>
      <param name="other" vsli:raw="The unsigned 64-bit integer to compare.">要比较的 64 位无符号整数。</param>
      <returns vsli:raw="A signed integer that indicates the relative value of this instance and &lt;paramref name=&quot;other&quot; /&gt;, as shown in the following table.&#xA;          &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt;Return value&lt;/term&gt;&lt;description&gt;Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt;Less than zero&lt;/term&gt;&lt;description&gt;The current instance is less than &lt;paramref name=&quot;other&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;Zero&lt;/term&gt;&lt;description&gt;The current instance equals &lt;paramref name=&quot;other&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;Greater than zero&lt;/term&gt;&lt;description&gt;The current instance is greater than &lt;paramref name=&quot;other&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">一个带符号整数，指示此实例和 <paramref name="other" /> 的相对值，如下表所示。  
  返回值 
  说明 
  小于零 
  当前实例小于 <paramref name="other" />。  

  零 
  当前实例等于 <paramref name="other" />。  

  大于零 
  当前实例大于 <paramref name="other" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Divides one &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value by another and returns the result.">用另一个值除 <see cref="T:System.Numerics.BigInteger" /> 值并返回结果。</summary>
      <param name="dividend" vsli:raw="The value to be divided.">要作为被除数的值。</param>
      <param name="divisor" vsli:raw="The value to divide by.">要作为除数的值。</param>
      <returns vsli:raw="The quotient of the division.">相除后的商。</returns>
      <exception cref="T:System.DivideByZeroException" vsli:raw="&lt;paramref name=&quot;divisor&quot; /&gt; is 0 (zero).">
        <paramref name="divisor" /> 是 0（零）。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)">
      <summary vsli:raw="Divides one &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value by another, returns the result, and returns the remainder in an output parameter.">用另一个值除一个 <see cref="T:System.Numerics.BigInteger" /> 值，返回结果，并在输出参数中返回余数。</summary>
      <param name="dividend" vsli:raw="The value to be divided.">要作为被除数的值。</param>
      <param name="divisor" vsli:raw="The value to divide by.">要作为除数的值。</param>
      <param name="remainder" vsli:raw="When this method returns, contains a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value that represents the remainder from the division. This parameter is passed uninitialized.">当此方法返回时，包含一个表示相除余数的 <see cref="T:System.Numerics.BigInteger" /> 值。 此参数未经初始化即被传递。</param>
      <returns vsli:raw="The quotient of the division.">相除后的商。</returns>
      <exception cref="T:System.DivideByZeroException" vsli:raw="&lt;paramref name=&quot;divisor&quot; /&gt; is 0 (zero).">
        <paramref name="divisor" /> 是 0（零）。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Int64)">
      <summary vsli:raw="Returns a value that indicates whether the current instance and a signed 64-bit integer have the same value.">返回一个值，该值指示当前实例与 64 位带符号整数是否具有相同的值。</summary>
      <param name="other" vsli:raw="The signed 64-bit integer value to compare.">要比较的 64 位带符号整数值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the signed 64-bit integer and the current instance have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 64 位带符号整数与当前实例具有相同的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether the current instance and a specified &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object have the same value.">返回一个值，该值指示当前实例与指定的 <see cref="T:System.Numerics.BigInteger" /> 对象是否具有相同的值。</summary>
      <param name="other" vsli:raw="The object to compare.">要比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object and &lt;paramref name=&quot;other&quot; /&gt; have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Numerics.BigInteger" /> 对象与 <paramref name="other" /> 具有相同的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the current instance and a specified object have the same value.">返回一个值，该值指示当前实例与指定的对象是否具有相同的值。</summary>
      <param name="obj" vsli:raw="The object to compare.">要比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;obj&quot; /&gt; argument is a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object, and its value is equal to the value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="obj" /> 参数是 <see cref="T:System.Numerics.BigInteger" /> 对象，并且其值等于当前 <see cref="T:System.Numerics.BigInteger" /> 实例的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.UInt64)">
      <summary vsli:raw="Returns a value that indicates whether the current instance and an unsigned 64-bit integer have the same value.">返回一个值，该值指示当前实例与 64 位无符号整数是否具有相同的值。</summary>
      <param name="other" vsli:raw="The unsigned 64-bit integer to compare.">要比较的 64 位无符号整数。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and the unsigned 64-bit integer have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前实例与 64 位无符号整数具有相同的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GetByteCount(System.Boolean)">
      <summary vsli:raw="Gets the number of bytes that will be output by &lt;see cref=&quot;M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)&quot; /&gt; and &lt;see cref=&quot;M:System.Numerics.BigInteger.TryWriteBytes(System.Span{System.Byte},System.Int32@,System.Boolean,System.Boolean)&quot; /&gt;.">获取将由 <see cref="M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)" /> 和 <see cref="M:System.Numerics.BigInteger.TryWriteBytes(System.Span{System.Byte},System.Int32@,System.Boolean,System.Boolean)" /> 输出的字节数。</summary>
      <param name="isUnsigned" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use unsigned encoding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果使用无符号编码，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns vsli:raw="The number of bytes.">字节数。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GetHashCode">
      <summary vsli:raw="Returns the hash code for the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object.">返回当前 <see cref="T:System.Numerics.BigInteger" /> 对象的哈希代码。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Finds the greatest common divisor of two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values.">查找两个 <see cref="T:System.Numerics.BigInteger" /> 值的最大公约数。</summary>
      <param name="left" vsli:raw="The first value.">第一个值。</param>
      <param name="right" vsli:raw="The second value.">第二个值。</param>
      <returns vsli:raw="The greatest common divisor of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">
        <paramref name="left" /> 和 <paramref name="right" /> 的最大公约数。</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsEven">
      <summary vsli:raw="Indicates whether the value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object is an even number.">指示当前 <see cref="T:System.Numerics.BigInteger" /> 对象的值是否是偶数。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object is an even number; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Numerics.BigInteger" /> 对象的值是偶数，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsOne">
      <summary vsli:raw="Indicates whether the value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object is &lt;see cref=&quot;P:System.Numerics.BigInteger.One&quot; /&gt;.">指示当前 <see cref="T:System.Numerics.BigInteger" /> 对象的值是否是 <see cref="P:System.Numerics.BigInteger.One" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object is &lt;see cref=&quot;P:System.Numerics.BigInteger.One&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Numerics.BigInteger" /> 对象的值是 <see cref="P:System.Numerics.BigInteger.One" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsPowerOfTwo">
      <summary vsli:raw="Indicates whether the value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object is a power of two.">指示当前 <see cref="T:System.Numerics.BigInteger" /> 对象的值是否是 2 的幂。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object is a power of two; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Numerics.BigInteger" /> 对象的值是 2 的幂，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsZero">
      <summary vsli:raw="Indicates whether the value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object is &lt;see cref=&quot;P:System.Numerics.BigInteger.Zero&quot; /&gt;.">指示当前 <see cref="T:System.Numerics.BigInteger" /> 对象的值是否是 <see cref="P:System.Numerics.BigInteger.Zero" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object is &lt;see cref=&quot;P:System.Numerics.BigInteger.Zero&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Numerics.BigInteger" /> 对象的值是 <see cref="P:System.Numerics.BigInteger.Zero" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger)">
      <summary vsli:raw="Returns the natural (base &lt;see langword=&quot;e&quot; /&gt;) logarithm of a specified number.">返回指定数字的自然对数（底为 <see langword="e" />）。</summary>
      <param name="value" vsli:raw="The number whose logarithm is to be found.">要查找其对数的数字。</param>
      <returns vsli:raw="The natural (base &lt;see langword=&quot;e&quot; /&gt;) logarithm of &lt;paramref name=&quot;value&quot; /&gt;, as shown in the table in the Remarks section.">
        <paramref name="value" /> 的自然对数（底为 <see langword="e" />），如“备注”部分中的表所示。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The natural log of &lt;paramref name=&quot;value&quot; /&gt; is out of range of the &lt;see cref=&quot;T:System.Double&quot; /&gt; data type.">
        <paramref name="value" /> 的自然对数超出了 <see cref="T:System.Double" /> 数据类型的范围。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)">
      <summary vsli:raw="Returns the logarithm of a specified number in a specified base.">返回指定数字在使用指定底时的对数。</summary>
      <param name="value" vsli:raw="A number whose logarithm is to be found.">要查找其对数的数字。</param>
      <param name="baseValue" vsli:raw="The base of the logarithm.">对数的底。</param>
      <returns vsli:raw="The base &lt;paramref name=&quot;baseValue&quot; /&gt; logarithm of &lt;paramref name=&quot;value&quot; /&gt;, as shown in the table in the Remarks section.">
        <paramref name="baseValue" /> 的以 <paramref name="value" /> 为底的对数，如“备注”部分中的表所示。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The log of &lt;paramref name=&quot;value&quot; /&gt; is out of range of the &lt;see cref=&quot;T:System.Double&quot; /&gt; data type.">
        <paramref name="value" /> 的对数超出了 <see cref="T:System.Double" /> 数据类型的范围。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)">
      <summary vsli:raw="Returns the base 10 logarithm of a specified number.">返回指定数字以 10 为底的对数。</summary>
      <param name="value" vsli:raw="A number whose logarithm is to be found.">要查找其对数的数字。</param>
      <returns vsli:raw="The base 10 logarithm of &lt;paramref name=&quot;value&quot; /&gt;, as shown in the table in the Remarks section.">
        <paramref name="value" /> 的以 10 为底的对数，如“备注”部分中的表所示。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The base 10 log of &lt;paramref name=&quot;value&quot; /&gt; is out of range of the &lt;see cref=&quot;T:System.Double&quot; /&gt; data type.">
        <paramref name="value" /> 的以 10 为底的对数超出了 <see cref="T:System.Double" /> 数据类型的范围。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns the larger of two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values.">返回两个 <see cref="T:System.Numerics.BigInteger" /> 值中的较大者。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="The &lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; parameter, whichever is larger.">
        <paramref name="left" /> 或 <paramref name="right" /> 参数中较大的一个。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns the smaller of two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values.">返回两个 <see cref="T:System.Numerics.BigInteger" /> 值中的较小者。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="The &lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; parameter, whichever is smaller.">
        <paramref name="left" /> 或 <paramref name="right" /> 参数中较小的一个。</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.MinusOne">
      <summary vsli:raw="Gets a value that represents the number negative one (-1).">获取一个表示数字负一 (-1) 的值。</summary>
      <returns vsli:raw="An integer whose value is negative one (-1).">其值为负一 (-1) 的整数。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Performs modulus division on a number raised to the power of another number.">对以某个数为底、以另一个数为指数的幂执行模数除法。</summary>
      <param name="value" vsli:raw="The number to raise to the &lt;paramref name=&quot;exponent&quot; /&gt; power.">要计算 <paramref name="exponent" /> 次幂的数字。</param>
      <param name="exponent" vsli:raw="The exponent to raise &lt;paramref name=&quot;value&quot; /&gt; by.">对 <paramref name="value" /> 进行幂运算的指数。</param>
      <param name="modulus" vsli:raw="The number by which to divide &lt;paramref name=&quot;value&quot; /&gt; raised to the &lt;paramref name=&quot;exponent&quot; /&gt; power.">
        <paramref name="value" /> 的 <paramref name="exponent" /> 次幂要除以的数值。</param>
      <returns vsli:raw="The remainder after dividing &lt;paramref name=&quot;value&quot; /&gt;exponent by &lt;paramref name=&quot;modulus&quot; /&gt;.">将 <paramref name="value" />exponent 除以 <paramref name="modulus" /> 后的余数。</returns>
      <exception cref="T:System.DivideByZeroException" vsli:raw="&lt;paramref name=&quot;modulus&quot; /&gt; is zero.">
        <paramref name="modulus" /> 为零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;exponent&quot; /&gt; is negative.">
        <paramref name="exponent" /> 为负数。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns the product of two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values.">返回两个 <see cref="T:System.Numerics.BigInteger" /> 值的乘积。</summary>
      <param name="left" vsli:raw="The first number to multiply.">要相乘的第一个数。</param>
      <param name="right" vsli:raw="The second number to multiply.">要相乘的第二个数。</param>
      <returns vsli:raw="The product of the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters.">
        <paramref name="left" /> 与 <paramref name="right" /> 参数的乘积。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)">
      <summary vsli:raw="Negates a specified &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">对指定的 <see cref="T:System.Numerics.BigInteger" /> 值求反。</summary>
      <param name="value" vsli:raw="The value to negate.">要求反的值。</param>
      <returns vsli:raw="The result of the &lt;paramref name=&quot;value&quot; /&gt; parameter multiplied by negative one (-1).">
        <paramref name="value" /> 参数乘以负一 (-1) 的结果。</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.One">
      <summary vsli:raw="Gets a value that represents the number one (1).">获取一个表示数字一 (1) 的值。</summary>
      <returns vsli:raw="An object whose value is one (1).">其值为一 (1) 的对象。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Adds the values of two specified &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; objects.">将两个指定的 <see cref="T:System.Numerics.BigInteger" /> 对象的值相加。</summary>
      <param name="left" vsli:raw="The first value to add.">要相加的第一个值。</param>
      <param name="right" vsli:raw="The second value to add.">要相加的第二个值。</param>
      <returns vsli:raw="The sum of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">
        <paramref name="left" /> 与 <paramref name="right" /> 的和。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Performs a bitwise &lt;see langword=&quot;And&quot; /&gt; operation on two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values.">对两个 <see cref="T:System.Numerics.BigInteger" /> 值执行按位 <see langword="And" /> 运算。</summary>
      <param name="left" vsli:raw="The first value.">第一个值。</param>
      <param name="right" vsli:raw="The second value.">第二个值。</param>
      <returns vsli:raw="The result of the bitwise &lt;see langword=&quot;And&quot; /&gt; operation.">按位 <see langword="And" /> 运算的结果。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Performs a bitwise &lt;see langword=&quot;Or&quot; /&gt; operation on two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values.">对两个 <see cref="T:System.Numerics.BigInteger" /> 值执行按位 <see langword="Or" /> 运算。</summary>
      <param name="left" vsli:raw="The first value.">第一个值。</param>
      <param name="right" vsli:raw="The second value.">第二个值。</param>
      <returns vsli:raw="The result of the bitwise &lt;see langword=&quot;Or&quot; /&gt; operation.">按位 <see langword="Or" /> 运算的结果。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)">
      <summary vsli:raw="Decrements a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value by 1.">将 <see cref="T:System.Numerics.BigInteger" /> 值减 1。</summary>
      <param name="value" vsli:raw="The value to decrement.">要递减的值。</param>
      <returns vsli:raw="The value of the &lt;paramref name=&quot;value&quot; /&gt; parameter decremented by 1.">
        <paramref name="value" /> 参数减 1 后的值。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Divides a specified &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value by another specified &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value by using integer division.">通过使用整除，将指定的 <see cref="T:System.Numerics.BigInteger" /> 值除以另一个指定的 <see cref="T:System.Numerics.BigInteger" /> 值。</summary>
      <param name="dividend" vsli:raw="The value to be divided.">要作为被除数的值。</param>
      <param name="divisor" vsli:raw="The value to divide by.">要作为除数的值。</param>
      <returns vsli:raw="The integral result of the division.">相除的整数结果。</returns>
      <exception cref="T:System.DivideByZeroException" vsli:raw="&lt;paramref name=&quot;divisor&quot; /&gt; is 0 (zero).">
        <paramref name="divisor" /> 是 0（零）。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a signed long integer value and a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value are equal.">返回一个值，该值指示带符号长整数值与 <see cref="T:System.Numerics.BigInteger" /> 值是否相等。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="left" /> 与 <paramref name="right" /> 参数具有相同的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value and a signed long integer value are equal.">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值与带符号长整数值是否相等。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="left" /> 与 <paramref name="right" /> 参数具有相同的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether the values of two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; objects are equal.">返回一个值，该值指示两个 <see cref="T:System.Numerics.BigInteger" /> 对象的值是否相等。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="left" /> 与 <paramref name="right" /> 参数具有相同的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value and an unsigned long integer value are equal.">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值与无符号长整数值是否相等。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="left" /> 与 <paramref name="right" /> 参数具有相同的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether an unsigned long integer value and a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value are equal.">返回一个值，该值指示无符号长整数值与 <see cref="T:System.Numerics.BigInteger" /> 值是否相等。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="left" /> 与 <paramref name="right" /> 参数具有相同的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Performs a bitwise exclusive &lt;see langword=&quot;Or&quot; /&gt; (&lt;see langword=&quot;XOr&quot; /&gt;) operation on two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values.">对两个 <see cref="T:System.Numerics.BigInteger" /> 值执行按位异 <see langword="Or" /> (<see langword="XOr" />) 运算。</summary>
      <param name="left" vsli:raw="The first value.">第一个值。</param>
      <param name="right" vsli:raw="The second value.">第二个值。</param>
      <returns vsli:raw="The result of the bitwise &lt;see langword=&quot;Or&quot; /&gt; operation.">按位 <see langword="Or" /> 运算的结果。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; object to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">定义从 <see cref="T:System.Decimal" /> 对象到 <see cref="T:System.Numerics.BigInteger" /> 值的显式转换。</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">包含 <paramref name="value" /> 参数值的对象。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Double)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Double&quot; /&gt; value to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">定义从 <see cref="T:System.Double" /> 值到 <see cref="T:System.Numerics.BigInteger" /> 值的显式转换。</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">包含 <paramref name="value" /> 参数值的对象。</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see cref=&quot;F:System.Double.NaN&quot; /&gt;, &lt;see cref=&quot;F:System.Double.PositiveInfinity&quot; /&gt;, or &lt;see cref=&quot;F:System.Double.NegativeInfinity&quot; /&gt;.">
        <paramref name="value" /> 为 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Byte">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to an unsigned byte value.">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到无符号字节值的显式转换。</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">要转换为 <see cref="T:System.Byte" /> 的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">包含 <paramref name="value" /> 参数值的对象。</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is less than &lt;see cref=&quot;F:System.Byte.MinValue&quot;&gt;Byte.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Byte.MaxValue&quot;&gt;Byte.MaxValue&lt;/see&gt;.">
        <paramref name="value" /> 小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Decimal">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value.">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到 <see cref="T:System.Decimal" /> 值的显式转换。</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">要转换为 <see cref="T:System.Decimal" /> 的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">包含 <paramref name="value" /> 参数值的对象。</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is less than &lt;see cref=&quot;F:System.Decimal.MinValue&quot;&gt;Decimal.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">
        <paramref name="value" /> 小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Double">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to a &lt;see cref=&quot;T:System.Double&quot; /&gt; value.">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到 <see cref="T:System.Double" /> 值的显式转换。</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">要转换为 <see cref="T:System.Double" /> 的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">包含 <paramref name="value" /> 参数值的对象。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int16">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to a 16-bit signed integer value.">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到 16 位带符号整数值的显式转换。</summary>
      <param name="value" vsli:raw="The value to convert to a 16-bit signed integer.">要转换为 16 位带符号整数的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">包含 <paramref name="value" /> 参数值的对象。</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is less than &lt;see cref=&quot;F:System.Int16.MinValue&quot;&gt;Int16.MinValue&lt;/see&gt; or is greater than &lt;see cref=&quot;F:System.Int16.MaxValue&quot;&gt;Int16.MaxValue&lt;/see&gt;.">
        <paramref name="value" /> 小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int32">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to a 32-bit signed integer value.">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到 32 位带符号整数值的显式转换。</summary>
      <param name="value" vsli:raw="The value to convert to a 32-bit signed integer.">要转换为 32 位带符号整数的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">包含 <paramref name="value" /> 参数值的对象。</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is less than &lt;see cref=&quot;F:System.Int32.MinValue&quot;&gt;Int32.MinValue&lt;/see&gt; or is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="value" /> 小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int64">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to a 64-bit signed integer value.">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到 64 位带符号整数值的显式转换。</summary>
      <param name="value" vsli:raw="The value to convert to a 64-bit signed integer.">要转换为 64 位带符号整数的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">包含 <paramref name="value" /> 参数值的对象。</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is less than &lt;see cref=&quot;F:System.Int64.MinValue&quot;&gt;Int64.MinValue&lt;/see&gt; or is greater than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">
        <paramref name="value" /> 小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.SByte">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to a signed 8-bit value.  &#xA;  &#xA; This API is not CLS-compliant. The compliant alternative is &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到 8 位带符号值的显式转换。  
此 API 不兼容 CLS。 符合的替代方法是 <see cref="T:System.Int16" />。</summary>
      <param name="value" vsli:raw="The value to convert to a signed 8-bit value.">要转换为 8 位带符号值的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">包含 <paramref name="value" /> 参数值的对象。</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is less than &lt;see cref=&quot;F:System.SByte.MinValue&quot;&gt;SByte.MinValue&lt;/see&gt; or is greater than &lt;see cref=&quot;F:System.SByte.MaxValue&quot;&gt;SByte.MaxValue&lt;/see&gt;.">
        <paramref name="value" /> 小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Single">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to a single-precision floating-point value.">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到单精度浮点值的显式转换。</summary>
      <param name="value" vsli:raw="The value to convert to a single-precision floating-point value.">要转换为单精度浮点值的值。</param>
      <returns vsli:raw="An object that contains the closest possible representation of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">一个对象，包含 <paramref name="value" /> 参数的尽可能精确的表示形式。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt16">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to an unsigned 16-bit integer value.  &#xA;  &#xA; This API is not CLS-compliant. The compliant alternative is &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到 16 位无符号整数值的显式转换。  
此 API 不兼容 CLS。 符合的替代方法是 <see cref="T:System.Int32" />。</summary>
      <param name="value" vsli:raw="The value to convert to an unsigned 16-bit integer.">要转换为 16 位无符号整数的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">包含 <paramref name="value" /> 参数值的对象。</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is less than &lt;see cref=&quot;F:System.UInt16.MinValue&quot;&gt;UInt16.MinValue&lt;/see&gt; or is greater than &lt;see cref=&quot;F:System.UInt16.MaxValue&quot;&gt;UInt16.MaxValue&lt;/see&gt;.">
        <paramref name="value" /> 小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt32">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to an unsigned 32-bit integer value.  &#xA;  &#xA; This API is not CLS-compliant. The compliant alternative is &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到 32 位无符号整数值的显式转换。  
此 API 不兼容 CLS。 符合的替代方法是 <see cref="T:System.Int64" />。</summary>
      <param name="value" vsli:raw="The value to convert to an unsigned 32-bit integer.">要转换为 32 位无符号整数的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">包含 <paramref name="value" /> 参数值的对象。</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is less than &lt;see cref=&quot;F:System.UInt32.MinValue&quot;&gt;UInt32.MinValue&lt;/see&gt; or is greater than &lt;see cref=&quot;F:System.UInt32.MaxValue&quot;&gt;UInt32.MaxValue&lt;/see&gt;.">
        <paramref name="value" /> 小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt64">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to an unsigned 64-bit integer value.  &#xA;  &#xA; This API is not CLS-compliant. The compliant alternative is &lt;see cref=&quot;T:System.Double&quot; /&gt;.">定义从 <see cref="T:System.Numerics.BigInteger" /> 对象到 64 位无符号整数值的显式转换。  
此 API 不兼容 CLS。 符合的替代方法是 <see cref="T:System.Double" />。</summary>
      <param name="value" vsli:raw="The value to convert to an unsigned 64-bit integer.">要转换为 64 位无符号整数的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">包含 <paramref name="value" /> 参数值的对象。</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is less than &lt;see cref=&quot;F:System.UInt64.MinValue&quot;&gt;UInt64.MinValue&lt;/see&gt; or is greater than &lt;see cref=&quot;F:System.UInt64.MaxValue&quot;&gt;UInt64.MaxValue&lt;/see&gt;.">
        <paramref name="value" /> 小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Single)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Single&quot; /&gt; value to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">定义从 <see cref="T:System.Single" /> 值到 <see cref="T:System.Numerics.BigInteger" /> 值的显式转换。</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">包含 <paramref name="value" /> 参数值的对象。</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see cref=&quot;F:System.Single.NaN&quot; /&gt;, &lt;see cref=&quot;F:System.Single.PositiveInfinity&quot; /&gt;, or &lt;see cref=&quot;F:System.Single.NegativeInfinity&quot; /&gt;.">
        <paramref name="value" /> 为 <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NegativeInfinity" />。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a 64-bit signed integer is greater than a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">返回一个值，该值指示 64 位带符号整数是否大于 <see cref="T:System.Numerics.BigInteger" /> 值。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; is greater than a 64-bit signed integer value.">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 是否大于 64 位带符号整数值。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is greater than another &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否大于另一个 <see cref="T:System.Numerics.BigInteger" /> 值。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is greater than a 64-bit unsigned integer.">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否大于 64 位无符号整数。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is greater than a 64-bit unsigned integer.">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否大于 64 位无符号整数。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a 64-bit signed integer is greater than or equal to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">返回一个值，该值指示 64 位带符号整数是否大于等于 <see cref="T:System.Numerics.BigInteger" /> 值。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is greater than or equal to a 64-bit signed integer value.">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否大于等于 64 位带符号整数值。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is greater than or equal to another &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否大于等于另一个 <see cref="T:System.Numerics.BigInteger" /> 值。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is greater than or equal to a 64-bit unsigned integer value.">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否大于等于 64 位无符号整数值。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a 64-bit unsigned integer is greater than or equal to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">返回一个值，该值指示 64 位无符号整数是否大于等于 <see cref="T:System.Numerics.BigInteger" /> 值。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is greater than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an implicit conversion of an unsigned byte to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">定义从无符号字节到 <see cref="T:System.Numerics.BigInteger" /> 值的隐式转换。</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">包含 <paramref name="value" /> 参数值的对象。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int16)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an implicit conversion of a signed 16-bit integer to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">定义从 16 位带符号整数到 <see cref="T:System.Numerics.BigInteger" /> 值的隐式转换。</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">包含 <paramref name="value" /> 参数值的对象。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an implicit conversion of a signed 32-bit integer to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">定义从 32 位带符号整数到 <see cref="T:System.Numerics.BigInteger" /> 值的隐式转换。</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">包含 <paramref name="value" /> 参数值的对象。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an implicit conversion of a signed 64-bit integer to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">定义从 64 位带符号整数到 <see cref="T:System.Numerics.BigInteger" /> 值的隐式转换。</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">包含 <paramref name="value" /> 参数值的对象。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.SByte)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an implicit conversion of an 8-bit signed integer to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.  &#xA;  &#xA; This API is not CLS-compliant. The compliant alternative is &lt;see cref=&quot;M:System.Numerics.BigInteger.#ctor(System.Int32)&quot; /&gt;.">定义从 8 位带符号整数到 <see cref="T:System.Numerics.BigInteger" /> 值的隐式转换。  
此 API 不兼容 CLS。 符合的替代方法是 <see cref="M:System.Numerics.BigInteger.#ctor(System.Int32)" />。</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">包含 <paramref name="value" /> 参数值的对象。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt16)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an implicit conversion of a 16-bit unsigned integer to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.  &#xA;  &#xA; This API is not CLS-compliant. The compliant alternative is &lt;see cref=&quot;M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger&quot; /&gt;.">定义从 16 位无符号整数到 <see cref="T:System.Numerics.BigInteger" /> 值的隐式转换。  
此 API 不兼容 CLS。 符合的替代方法是 <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />。</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">包含 <paramref name="value" /> 参数值的对象。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an implicit conversion of a 32-bit unsigned integer to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.  &#xA;  &#xA; This API is not CLS-compliant. The compliant alternative is &lt;see cref=&quot;M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger&quot; /&gt;.">定义从 32 位无符号整数到 <see cref="T:System.Numerics.BigInteger" /> 值的隐式转换。  
此 API 不兼容 CLS。 符合的替代方法是 <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />。</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">包含 <paramref name="value" /> 参数值的对象。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger">
      <summary vsli:raw="Defines an implicit conversion of a 64-bit unsigned integer to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.  &#xA;  &#xA; This API is not CLS-compliant. The compliant alternative is &lt;see cref=&quot;T:System.Double&quot; /&gt;.">定义从 64 位无符号整数到 <see cref="T:System.Numerics.BigInteger" /> 值的隐式转换。  
此 API 不兼容 CLS。 符合的替代方法是 <see cref="T:System.Double" />。</summary>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt;.">要转换为 <see cref="T:System.Numerics.BigInteger" /> 的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">包含 <paramref name="value" /> 参数值的对象。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)">
      <summary vsli:raw="Increments a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value by 1.">将 <see cref="T:System.Numerics.BigInteger" /> 值加 1。</summary>
      <param name="value" vsli:raw="The value to increment.">要递增的值。</param>
      <returns vsli:raw="The value of the &lt;paramref name=&quot;value&quot; /&gt; parameter incremented by 1.">
        <paramref name="value" /> 参数加 1 后的值。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a 64-bit signed integer and a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value are not equal.">返回一个值，该值指示 64 位带符号整数与 <see cref="T:System.Numerics.BigInteger" /> 值是否不相等。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value and a 64-bit signed integer are not equal.">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值与 64 位带符号整数是否不相等。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; objects have different values.">返回一个值，该值指示两个 <see cref="T:System.Numerics.BigInteger" /> 对象是否具有不同的值。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value and a 64-bit unsigned integer are not equal.">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值与 64 位无符号整数是否不相等。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a 64-bit unsigned integer and a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value are not equal.">返回一个值，该值指示 64 位无符号整数与 <see cref="T:System.Numerics.BigInteger" /> 值是否不相等。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)">
      <summary vsli:raw="Shifts a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value a specified number of bits to the left.">将 <see cref="T:System.Numerics.BigInteger" /> 值向左移动指定的位数。</summary>
      <param name="value" vsli:raw="The value whose bits are to be shifted.">要移动其位的值。</param>
      <param name="shift" vsli:raw="The number of bits to shift &lt;paramref name=&quot;value&quot; /&gt; to the left.">将 <paramref name="value" /> 向左移动的位数。</param>
      <returns vsli:raw="A value that has been shifted to the left by the specified number of bits.">一个已向左移动指定位数的值。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a 64-bit signed integer is less than a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">返回一个值，该值指示 64 位带符号整数是否小于 <see cref="T:System.Numerics.BigInteger" /> 值。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="left" /> 小于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is less than a 64-bit signed integer.">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否小于 64 位带符号整数。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="left" /> 小于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is less than another &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否小于另一个 <see cref="T:System.Numerics.BigInteger" /> 值。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="left" /> 小于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is less than a 64-bit unsigned integer.">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否小于 64 位无符号整数。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="left" /> 小于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a 64-bit unsigned integer is less than a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">返回一个值，该值指示 64 位无符号整数是否小于 <see cref="T:System.Numerics.BigInteger" /> 值。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="left" /> 小于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a 64-bit signed integer is less than or equal to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">返回一个值，该值指示 64 位带符号整数是否小于等于 <see cref="T:System.Numerics.BigInteger" /> 值。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than or equal to &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="left" /> 小于等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is less than or equal to a 64-bit signed integer.">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否小于等于 64 位带符号整数。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than or equal to &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="left" /> 小于等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is less than or equal to another &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否小于等于另一个 <see cref="T:System.Numerics.BigInteger" /> 值。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than or equal to &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="left" /> 小于等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value is less than or equal to a 64-bit unsigned integer.">返回一个值，该值指示 <see cref="T:System.Numerics.BigInteger" /> 值是否小于等于 64 位无符号整数。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than or equal to &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="left" /> 小于等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns a value that indicates whether a 64-bit unsigned integer is less than or equal to a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">返回一个值，该值指示 64 位无符号整数是否小于等于 <see cref="T:System.Numerics.BigInteger" /> 值。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; is less than or equal to &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="left" /> 小于等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Returns the remainder that results from division with two specified &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values.">返回两个指定 <see cref="T:System.Numerics.BigInteger" /> 值相除所得的余数。</summary>
      <param name="dividend" vsli:raw="The value to be divided.">要作为被除数的值。</param>
      <param name="divisor" vsli:raw="The value to divide by.">要作为除数的值。</param>
      <returns vsli:raw="The remainder that results from the division.">相除所得的余数。</returns>
      <exception cref="T:System.DivideByZeroException" vsli:raw="&lt;paramref name=&quot;divisor&quot; /&gt; is 0 (zero).">
        <paramref name="divisor" /> 是 0（零）。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Multiplies two specified &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values.">两个指定的 <see cref="T:System.Numerics.BigInteger" /> 值相乘。</summary>
      <param name="left" vsli:raw="The first value to multiply.">要相乘的第一个值。</param>
      <param name="right" vsli:raw="The second value to multiply.">要相乘的第二个值。</param>
      <returns vsli:raw="The product of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">
        <paramref name="left" /> 与 <paramref name="right" /> 的乘积。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)">
      <summary vsli:raw="Returns the bitwise one's complement of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">返回 <see cref="T:System.Numerics.BigInteger" /> 值的按位二进制反码。</summary>
      <param name="value" vsli:raw="An integer value.">一个整数值。</param>
      <returns vsli:raw="The bitwise one's complement of &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" /> 的按位二进制反码。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)">
      <summary vsli:raw="Shifts a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value a specified number of bits to the right.">将 <see cref="T:System.Numerics.BigInteger" /> 值向右移动指定的位数。</summary>
      <param name="value" vsli:raw="The value whose bits are to be shifted.">要移动其位的值。</param>
      <param name="shift" vsli:raw="The number of bits to shift &lt;paramref name=&quot;value&quot; /&gt; to the right.">将 <paramref name="value" /> 向右移动的位数。</param>
      <returns vsli:raw="A value that has been shifted to the right by the specified number of bits.">一个已向右移动指定位数的值。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Subtracts a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value from another &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">从另一个 <see cref="T:System.Numerics.BigInteger" /> 值中减去 <see cref="T:System.Numerics.BigInteger" /> 值。</summary>
      <param name="left" vsli:raw="The value to subtract from (the minuend).">要从中减去的值（被减数）。</param>
      <param name="right" vsli:raw="The value to subtract (the subtrahend).">要减去的值（减数）。</param>
      <returns vsli:raw="The result of subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;.">
        <paramref name="right" /> 减 <paramref name="left" /> 所得的结果。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)">
      <summary vsli:raw="Negates a specified BigInteger value.">对指定的 BigInteger 值求反。</summary>
      <param name="value" vsli:raw="The value to negate.">要求反的值。</param>
      <returns vsli:raw="The result of the &lt;paramref name=&quot;value&quot; /&gt; parameter multiplied by negative one (-1).">
        <paramref name="value" /> 参数乘以负一 (-1) 的结果。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)">
      <summary vsli:raw="Returns the value of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; operand. (The sign of the operand is unchanged.)">返回 <see cref="T:System.Numerics.BigInteger" /> 操作数的值。 （操作数的符号不变。）</summary>
      <param name="value" vsli:raw="An integer value.">一个整数值。</param>
      <returns vsli:raw="The value of the &lt;paramref name=&quot;value&quot; /&gt; operand.">
        <paramref name="value" /> 操作数的值。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="value" vsli:raw="A read-only span of characters that contains the number to convert." />
      <param name="style" vsli:raw="A bitwise combination of the enumeration values that specify the permitted format of &lt;paramref name=&quot;value&quot; /&gt;." />
      <param name="provider" vsli:raw="An object that provides culture-specific formatting information about &lt;paramref name=&quot;value&quot; /&gt;." />
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String)">
      <summary vsli:raw="Converts the string representation of a number to its &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent.">将数字的字符串表示形式转换为它的等效 <see cref="T:System.Numerics.BigInteger" /> 表示形式。</summary>
      <param name="value" vsli:raw="A string that contains the number to convert.">包含要转换的数字的字符串。</param>
      <returns vsli:raw="A value that is equivalent to the number specified in the &lt;paramref name=&quot;value&quot; /&gt; parameter.">一个值，等于 <paramref name="value" /> 参数中指定的数字。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not in the correct format.">
        <paramref name="value" /> 的格式不正确。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)">
      <summary vsli:raw="Converts the string representation of a number in a specified style to its &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent.">将指定样式的数字的字符串表示形式转换为它的等效 <see cref="T:System.Numerics.BigInteger" />。</summary>
      <param name="value" vsli:raw="A string that contains a number to convert.">包含要转换的数字的字符串。</param>
      <param name="style" vsli:raw="A bitwise combination of the enumeration values that specify the permitted format of &lt;paramref name=&quot;value&quot; /&gt;.">枚举值的按位组合，这些枚举值指定 <paramref name="value" /> 所允许的格式。</param>
      <returns vsli:raw="A value that is equivalent to the number specified in the &lt;paramref name=&quot;value&quot; /&gt; parameter.">一个值，等于 <paramref name="value" /> 参数中指定的数字。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;style&quot; /&gt; is not a &lt;see cref=&quot;T:System.Globalization.NumberStyles&quot; /&gt; value.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;style&quot; /&gt; includes the &lt;see cref=&quot;F:System.Globalization.NumberStyles.AllowHexSpecifier&quot; /&gt; or &lt;see cref=&quot;F:System.Globalization.NumberStyles.HexNumber&quot; /&gt; flag along with another value.">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  

或 - 
<paramref name="style" /> 包括 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 或 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 标志以及另一个值。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; does not comply with the input pattern specified by &lt;see cref=&quot;T:System.Globalization.NumberStyles&quot; /&gt;.">
        <paramref name="value" /> 不符合由 <see cref="T:System.Globalization.NumberStyles" /> 指定的输入模式。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary vsli:raw="Converts the string representation of a number in a specified style and culture-specific format to its &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent.">将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 <see cref="T:System.Numerics.BigInteger" />。</summary>
      <param name="value" vsli:raw="A string that contains a number to convert.">包含要转换的数字的字符串。</param>
      <param name="style" vsli:raw="A bitwise combination of the enumeration values that specify the permitted format of &lt;paramref name=&quot;value&quot; /&gt;.">枚举值的按位组合，这些枚举值指定 <paramref name="value" /> 所允许的格式。</param>
      <param name="provider" vsli:raw="An object that provides culture-specific formatting information about &lt;paramref name=&quot;value&quot; /&gt;.">一个对象，提供有关 <paramref name="value" /> 的区域性特定格式设置信息。</param>
      <returns vsli:raw="A value that is equivalent to the number specified in the &lt;paramref name=&quot;value&quot; /&gt; parameter.">一个值，等于 <paramref name="value" /> 参数中指定的数字。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;style&quot; /&gt; is not a &lt;see cref=&quot;T:System.Globalization.NumberStyles&quot; /&gt; value.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;style&quot; /&gt; includes the &lt;see cref=&quot;F:System.Globalization.NumberStyles.AllowHexSpecifier&quot; /&gt; or &lt;see cref=&quot;F:System.Globalization.NumberStyles.HexNumber&quot; /&gt; flag along with another value.">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
或 
 <paramref name="style" /> 包括 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 或 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 标志以及另一个值。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; does not comply with the input pattern specified by &lt;paramref name=&quot;style&quot; /&gt;.">
        <paramref name="value" /> 不符合由 <paramref name="style" /> 指定的输入模式。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)">
      <summary vsli:raw="Converts the string representation of a number in a specified culture-specific format to its &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent.">将指定的区域性特定格式的数字字符串表示形式转换为它的等效 <see cref="T:System.Numerics.BigInteger" />。</summary>
      <param name="value" vsli:raw="A string that contains a number to convert.">包含要转换的数字的字符串。</param>
      <param name="provider" vsli:raw="An object that provides culture-specific formatting information about &lt;paramref name=&quot;value&quot; /&gt;.">一个对象，提供有关 <paramref name="value" /> 的区域性特定格式设置信息。</param>
      <returns vsli:raw="A value that is equivalent to the number specified in the &lt;paramref name=&quot;value&quot; /&gt; parameter.">一个值，等于 <paramref name="value" /> 参数中指定的数字。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not in the correct format.">
        <paramref name="value" /> 的格式不正确。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)">
      <summary vsli:raw="Raises a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value to the power of a specified value.">求以 <see cref="T:System.Numerics.BigInteger" /> 值为底、以指定的值为指数的幂。</summary>
      <param name="value" vsli:raw="The number to raise to the &lt;paramref name=&quot;exponent&quot; /&gt; power.">要计算 <paramref name="exponent" /> 次幂的数字。</param>
      <param name="exponent" vsli:raw="The exponent to raise &lt;paramref name=&quot;value&quot; /&gt; by.">对 <paramref name="value" /> 进行幂运算的指数。</param>
      <returns vsli:raw="The result of raising &lt;paramref name=&quot;value&quot; /&gt; to the &lt;paramref name=&quot;exponent&quot; /&gt; power.">
        <paramref name="value" /> 的 <paramref name="exponent" /> 次幂的计算结果。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;exponent&quot; /&gt; is negative.">
        <paramref name="exponent" /> 为负数。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Performs integer division on two &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; values and returns the remainder.">对两个 <see cref="T:System.Numerics.BigInteger" /> 值执行整除并返回余数。</summary>
      <param name="dividend" vsli:raw="The value to be divided.">要作为被除数的值。</param>
      <param name="divisor" vsli:raw="The value to divide by.">要作为除数的值。</param>
      <returns vsli:raw="The remainder after dividing &lt;paramref name=&quot;dividend&quot; /&gt; by &lt;paramref name=&quot;divisor&quot; /&gt;.">将 <paramref name="dividend" /> 除以 <paramref name="divisor" /> 后的余数。</returns>
      <exception cref="T:System.DivideByZeroException" vsli:raw="&lt;paramref name=&quot;divisor&quot; /&gt; is 0 (zero).">
        <paramref name="divisor" /> 是 0（零）。</exception>
    </member>
    <member name="P:System.Numerics.BigInteger.Sign">
      <summary vsli:raw="Gets a number that indicates the sign (negative, positive, or zero) of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object.">获取一个数字，该数字指示当前 <see cref="T:System.Numerics.BigInteger" /> 对象的符号（负、正或零）。</summary>
      <returns vsli:raw="A number that indicates the sign of the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object, as shown in the following table.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Number&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; -1&lt;/term&gt;&lt;description&gt; The value of this object is negative.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; 0&lt;/term&gt;&lt;description&gt; The value of this object is 0 (zero).&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; 1&lt;/term&gt;&lt;description&gt; The value of this object is positive.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">一个指示 <see cref="T:System.Numerics.BigInteger" /> 对象的符号的数字，如下表所示。  
  数字 
  说明 
  -1 
  此对象的值为负。  

  0 
  此对象的值为 0（零）。  

  1 
  此对象的值为正。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary vsli:raw="Subtracts one &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value from another and returns the result.">从另一个值中减去一个 <see cref="T:System.Numerics.BigInteger" /> 值并返回结果。</summary>
      <param name="left" vsli:raw="The value to subtract from (the minuend).">要从中减去的值（被减数）。</param>
      <param name="right" vsli:raw="The value to subtract (the subtrahend).">要减去的值（减数）。</param>
      <returns vsli:raw="The result of subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;.">
        <paramref name="right" /> 减 <paramref name="left" /> 所得的结果。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToByteArray">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value to a byte array.">将 <see cref="T:System.Numerics.BigInteger" /> 值转换为字节数组。</summary>
      <returns vsli:raw="The value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object converted to an array of bytes.">转换为字节数组的当前 <see cref="T:System.Numerics.BigInteger" /> 对象的值。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)">
      <summary vsli:raw="Returns the value of this &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; as a byte array using the fewest number of bytes possible. If the value is zero, returns an array of one byte whose element is 0x00.">使用尽可能少的字节数返回此 <see cref="T:System.Numerics.BigInteger" /> 的值作为字节数组。 如果值为零，则返回一个字节（其元素为 0x00）的数组。</summary>
      <param name="isUnsigned" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use unsigned encoding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果使用无符号编码，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="isBigEndian" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to write the bytes in a big-endian byte order; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果以大端字节顺序写入字节，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns vsli:raw="The value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object converted to an array of bytes.">转换为字节数组的当前 <see cref="T:System.Numerics.BigInteger" /> 对象的值。</returns>
      <exception cref="T:System.OverflowException" vsli:raw="If &lt;paramref name=&quot;isUnsigned&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and &lt;see cref=&quot;P:System.Numerics.BigInteger.Sign&quot; /&gt; is negative.">如果 <paramref name="isUnsigned" /> 为 <see langword="true" /> 且 <see cref="P:System.Numerics.BigInteger.Sign" /> 为负。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString">
      <summary vsli:raw="Converts the numeric value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to its equivalent string representation.">将当前 <see cref="T:System.Numerics.BigInteger" /> 对象的数值转换为其等效字符串表示形式。</summary>
      <returns vsli:raw="The string representation of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value.">当前 <see cref="T:System.Numerics.BigInteger" /> 值的字符串表示形式。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.IFormatProvider)">
      <summary vsli:raw="Converts the numeric value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to its equivalent string representation by using the specified culture-specific formatting information.">使用指定的区域性特定格式设置信息将当前 <see cref="T:System.Numerics.BigInteger" /> 对象的数值转换为它的等效字符串表示形式。</summary>
      <param name="provider" vsli:raw="An object that supplies culture-specific formatting information.">一个提供区域性特定的格式设置信息的对象。</param>
      <returns vsli:raw="The string representation of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value in the format specified by the &lt;paramref name=&quot;provider&quot; /&gt; parameter.">当前 <see cref="T:System.Numerics.BigInteger" /> 值的字符串表示形式，该值使用 <paramref name="provider" /> 参数指定的格式。</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.String)">
      <summary vsli:raw="Converts the numeric value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to its equivalent string representation by using the specified format.">使用指定的格式将当前 <see cref="T:System.Numerics.BigInteger" /> 对象的数值转换为它的等效字符串表示形式。</summary>
      <param name="format" vsli:raw="A standard or custom numeric format string.">标准或自定义的数值格式字符串。</param>
      <returns vsli:raw="The string representation of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value in the format specified by the &lt;paramref name=&quot;format&quot; /&gt; parameter.">当前 <see cref="T:System.Numerics.BigInteger" /> 值的字符串表示形式，该值使用 <paramref name="format" /> 参数指定的格式。</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;format&quot; /&gt; is not a valid format string.">
        <paramref name="format" /> 不是有效的格式字符串。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)">
      <summary vsli:raw="Converts the numeric value of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; object to its equivalent string representation by using the specified format and culture-specific format information.">使用指定的格式和区域性特定格式信息将当前 <see cref="T:System.Numerics.BigInteger" /> 对象的数值转换为它的等效字符串表示形式。</summary>
      <param name="format" vsli:raw="A standard or custom numeric format string.">标准或自定义的数值格式字符串。</param>
      <param name="provider" vsli:raw="An object that supplies culture-specific formatting information.">一个提供区域性特定的格式设置信息的对象。</param>
      <returns vsli:raw="The string representation of the current &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value as specified by the &lt;paramref name=&quot;format&quot; /&gt; and &lt;paramref name=&quot;provider&quot; /&gt; parameters.">由 <paramref name="format" /> 和 <paramref name="provider" /> 参数指定的当前 <see cref="T:System.Numerics.BigInteger" /> 值的字符串表示形式。</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;format&quot; /&gt; is not a valid format string.">
        <paramref name="format" /> 不是有效的格式字符串。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" vsli:raw="The span of characters into which this instance will be written." />
      <param name="charsWritten" vsli:raw="When the method returns, contains the length of the span in number of characters." />
      <param name="format" vsli:raw="A read-only span of characters that specifies the format for the formatting operation." />
      <param name="provider" vsli:raw="An object that supplies culture-specific formatting information about &lt;paramref name=&quot;value&quot; /&gt;." />
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)">
      <param name="value" vsli:raw="The representation of a number as a read-only span of characters." />
      <param name="style" vsli:raw="A bitwise combination of enumeration values that indicates the style elements that can be present in &lt;paramref name=&quot;value&quot; /&gt;. A typical value to specify is &lt;see cref=&quot;F:System.Globalization.NumberStyles.Integer&quot; /&gt;." />
      <param name="provider" vsli:raw="An object that supplies culture-specific formatting information about &lt;paramref name=&quot;value&quot; /&gt;." />
      <param name="result" vsli:raw="When this method returns, contains the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent to the number that is contained in &lt;paramref name=&quot;value&quot; /&gt;, or &lt;see cref=&quot;P:System.Numerics.BigInteger.Zero&quot; /&gt; if the conversion failed. The conversion fails if the &lt;paramref name=&quot;value&quot; /&gt; parameter is an empty character span or is not in a format that is compliant with &lt;paramref name=&quot;style&quot; /&gt;. This parameter is passed uninitialized." />
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.ReadOnlySpan{System.Char},System.Numerics.BigInteger@)">
      <param name="value" vsli:raw="The representation of a number as a read-only span of characters." />
      <param name="result" vsli:raw="When this method returns, contains the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent to the number that is contained in &lt;paramref name=&quot;value&quot; /&gt;, or zero (0) if the conversion fails. The conversion fails if the &lt;paramref name=&quot;value&quot; /&gt; parameter is an empty character span or is not of the correct format. This parameter is passed uninitialized." />
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)">
      <summary vsli:raw="Tries to convert the string representation of a number in a specified style and culture-specific format to its &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent, and returns a value that indicates whether the conversion succeeded.">尝试将指定样式和区域性特定格式的数字的字符串表示形式转换为其 <see cref="T:System.Numerics.BigInteger" /> 等效项，并返回一个指示转换是否成功的值。</summary>
      <param name="value" vsli:raw="The string representation of a number. The string is interpreted using the style specified by &lt;paramref name=&quot;style&quot; /&gt;.">数字的字符串表示形式。 该字符串使用由 <paramref name="style" /> 指定的样式来进行解释。</param>
      <param name="style" vsli:raw="A bitwise combination of enumeration values that indicates the style elements that can be present in &lt;paramref name=&quot;value&quot; /&gt;. A typical value to specify is &lt;see cref=&quot;F:System.Globalization.NumberStyles.Integer&quot; /&gt;.">枚举值的按位组合，用于指示可出现在 <paramref name="value" /> 中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider" vsli:raw="An object that supplies culture-specific formatting information about &lt;paramref name=&quot;value&quot; /&gt;.">一个对象，提供有关 <paramref name="value" /> 的区域性特定格式设置信息。</param>
      <param name="result" vsli:raw="When this method returns, contains the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent to the number that is contained in &lt;paramref name=&quot;value&quot; /&gt;, or &lt;see cref=&quot;P:System.Numerics.BigInteger.Zero&quot; /&gt; if the conversion failed. The conversion fails if the &lt;paramref name=&quot;value&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt; or is not in a format that is compliant with &lt;paramref name=&quot;style&quot; /&gt;. This parameter is passed uninitialized.">当此方法返回时，包含与 <paramref name="value" /> 中所包含的数字等效的 <see cref="T:System.Numerics.BigInteger" />；如果转换失败，则包含 <see cref="P:System.Numerics.BigInteger.Zero" />。 如果 <paramref name="value" /> 参数为 <see langword="null" /> 或其格式不符合 <paramref name="style" />，则转换失败。 此参数未经初始化即被传递。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;value&quot; /&gt; parameter was converted successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 参数成功转换，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;style&quot; /&gt; is not a &lt;see cref=&quot;T:System.Globalization.NumberStyles&quot; /&gt; value.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;style&quot; /&gt; includes the &lt;see cref=&quot;F:System.Globalization.NumberStyles.AllowHexSpecifier&quot; /&gt; or &lt;see cref=&quot;F:System.Globalization.NumberStyles.HexNumber&quot; /&gt; flag along with another value.">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
或 
 <paramref name="style" /> 包括 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 或 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 标志以及另一个值。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)">
      <summary vsli:raw="Tries to convert the string representation of a number to its &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent, and returns a value that indicates whether the conversion succeeded.">尝试将数字的字符串表示形式转换为它的等效 <see cref="T:System.Numerics.BigInteger" />，并返回一个指示转换是否成功的值。</summary>
      <param name="value" vsli:raw="The string representation of a number.">数字的字符串表示形式。</param>
      <param name="result" vsli:raw="When this method returns, contains the &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; equivalent to the number that is contained in &lt;paramref name=&quot;value&quot; /&gt;, or zero (0) if the conversion fails. The conversion fails if the &lt;paramref name=&quot;value&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt; or is not of the correct format. This parameter is passed uninitialized.">当此方法返回时，包含与 <paramref name="value" /> 中所包含的数字等效的 <see cref="T:System.Numerics.BigInteger" />；如果转换失败，则包含零 (0)。 如果 <paramref name="value" /> 参数为 <see langword="null" />，或者其格式不正确，则转换失败。 此参数未经初始化即被传递。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; was converted successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 成功转换，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.TryWriteBytes(System.Span{System.Byte},System.Int32@,System.Boolean,System.Boolean)">
      <summary vsli:raw="Copies the value of this &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; as little-endian twos-complement bytes, using the fewest number of bytes possible. If the value is zero, outputs one byte whose element is 0x00.">使用尽可能少的字节数将此 <see cref="T:System.Numerics.BigInteger" /> 的值复制为小端二进制补码字节。 如果值为零，则输入其元素为 0x00 的字节。</summary>
      <param name="destination" vsli:raw="The destination span to which the resulting bytes should be written.">应写入生成字节的目标跨度。</param>
      <param name="bytesWritten" vsli:raw="The number of bytes written to &lt;paramref name=&quot;destination&quot; /&gt;.">写入到 <paramref name="destination" /> 的字节数。</param>
      <param name="isUnsigned" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use unsigned encoding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果使用无符号编码，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="isBigEndian" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to write the bytes in a big-endian byte order; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果以大端字节顺序写入字节，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the bytes fit in &lt;paramref name=&quot;destination&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if not all bytes could be written due to lack of space.">如果字节满足 <paramref name="destination" />，则为 <see langword="true" />；如果由于空间不足而无法写入所有字节，则为 <see langword="false" />。</returns>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;isUnsigned&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and &lt;see cref=&quot;P:System.Numerics.BigInteger.Sign&quot; /&gt; is negative.">
        <paramref name="isUnsigned" /> 为 <see langword="true" /> 且 <see cref="P:System.Numerics.BigInteger.Sign" /> 为负。</exception>
    </member>
    <member name="P:System.Numerics.BigInteger.Zero">
      <summary vsli:raw="Gets a value that represents the number 0 (zero).">获取一个表示数字 0（零）的值。</summary>
      <returns vsli:raw="An integer whose value is 0 (zero).">其值为 0（零）的整数。</returns>
    </member>
    <member name="T:System.Numerics.Complex">
      <summary vsli:raw="Represents a complex number.">表示一个复数。</summary>
    </member>
    <member name="M:System.Numerics.Complex.#ctor(System.Double,System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; structure using the specified real and imaginary values.">使用指定的实数值和虚数值初始化 <see cref="T:System.Numerics.Complex" /> 结构的新实例。</summary>
      <param name="real" vsli:raw="The real part of the complex number.">复数的实部。</param>
      <param name="imaginary" vsli:raw="The imaginary part of the complex number.">复数的虚部。</param>
    </member>
    <member name="M:System.Numerics.Complex.Abs(System.Numerics.Complex)">
      <summary vsli:raw="Gets the absolute value (or magnitude) of a complex number.">获取复数的绝对值（或量值）。</summary>
      <param name="value" vsli:raw="A complex number.">一个复数。</param>
      <returns vsli:raw="The absolute value of &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" /> 的绝对值。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Acos(System.Numerics.Complex)">
      <summary vsli:raw="Returns the angle that is the arc cosine of the specified complex number.">返回表示指定复数的反余弦值的角度。</summary>
      <param name="value" vsli:raw="A complex number that represents a cosine.">表示余弦的复数。</param>
      <returns vsli:raw="The angle, measured in radians, which is the arc cosine of &lt;paramref name=&quot;value&quot; /&gt;.">以弧度为单位的角度，它表示 <paramref name="value" /> 的反余弦。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Add(System.Double,System.Numerics.Complex)">
      <summary vsli:raw="Adds a double-precision real number to a complex number and returns the result.">将一个双精度实数与一个复数相加，并返回结果。</summary>
      <param name="left" vsli:raw="The double-precision real value to add.">要相加的双精度实数值。</param>
      <param name="right" vsli:raw="The complex value to add.">要相加的复值。</param>
      <returns vsli:raw="The sum of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">
        <paramref name="left" /> 与 <paramref name="right" /> 的和。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Adds a complex number to a double-precision real number and returns the result.">将一个复数与一个双精度实数相加，并返回结果。</summary>
      <param name="left" vsli:raw="The complex value to add.">要相加的复值。</param>
      <param name="right" vsli:raw="The double-precision real value to add.">要相加的双精度实数值。</param>
      <returns vsli:raw="The sum of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">
        <paramref name="left" /> 与 <paramref name="right" /> 的和。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Adds two complex numbers and returns the result.">将两个复数相加，并返回结果。</summary>
      <param name="left" vsli:raw="The first complex number to add.">要相加的第一个复数。</param>
      <param name="right" vsli:raw="The second complex number to add.">要相加的第二个复数。</param>
      <returns vsli:raw="The sum of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">
        <paramref name="left" /> 与 <paramref name="right" /> 的和。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Asin(System.Numerics.Complex)">
      <summary vsli:raw="Returns the angle that is the arc sine of the specified complex number.">返回表示指定复数的反正弦值的角度。</summary>
      <param name="value" vsli:raw="A complex number.">一个复数。</param>
      <returns vsli:raw="The angle which is the arc sine of &lt;paramref name=&quot;value&quot; /&gt;.">表示 <paramref name="value" /> 的反正弦值的角度。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Atan(System.Numerics.Complex)">
      <summary vsli:raw="Returns the angle that is the arc tangent of the specified complex number.">返回表示指定复数的反正切的角度。</summary>
      <param name="value" vsli:raw="A complex number.">一个复数。</param>
      <returns vsli:raw="The angle that is the arc tangent of &lt;paramref name=&quot;value&quot; /&gt;.">表示 <paramref name="value" /> 的反正切值的角度。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Conjugate(System.Numerics.Complex)">
      <summary vsli:raw="Computes the conjugate of a complex number and returns the result.">计算复数的共轭，并返回结果。</summary>
      <param name="value" vsli:raw="A complex number.">一个复数。</param>
      <returns vsli:raw="The conjugate of &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" /> 的共轭。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Cos(System.Numerics.Complex)">
      <summary vsli:raw="Returns the cosine of the specified complex number.">返回指定复数的余弦值。</summary>
      <param name="value" vsli:raw="A complex number.">一个复数。</param>
      <returns vsli:raw="The cosine of &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" /> 的余弦值。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Cosh(System.Numerics.Complex)">
      <summary vsli:raw="Returns the hyperbolic cosine of the specified complex number.">返回指定复数的双曲余弦值。</summary>
      <param name="value" vsli:raw="A complex number.">一个复数。</param>
      <returns vsli:raw="The hyperbolic cosine of &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" /> 的双曲余弦值。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Divide(System.Double,System.Numerics.Complex)">
      <summary vsli:raw="Divides one double-precision real number by a complex number and returns the result.">将一个双精度实数除以一个复数，并返回结果。</summary>
      <param name="dividend" vsli:raw="The double-precision real number to be divided.">要作为被除数的双精度实数。</param>
      <param name="divisor" vsli:raw="The complex number to divide by.">要作为除数的复数。</param>
      <returns vsli:raw="The quotient of the division.">相除后的商。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Divides one complex number by a double-precision real number and returns the result.">将一个复数除以一个双精度实数，并返回结果。</summary>
      <param name="dividend" vsli:raw="The complex number to be divided.">要作为被除数的复数。</param>
      <param name="divisor" vsli:raw="The double-precision real number to divide by.">要作为除数的双精度实数。</param>
      <returns vsli:raw="The quotient of the division.">相除后的商。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Divides one complex number by another and returns the result.">用一个复数除另一个复数并返回结果。</summary>
      <param name="dividend" vsli:raw="The complex number to be divided.">要作为被除数的复数。</param>
      <param name="divisor" vsli:raw="The complex number to divide by.">要作为除数的复数。</param>
      <returns vsli:raw="The quotient of the division.">相除后的商。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Equals(System.Numerics.Complex)">
      <summary vsli:raw="Returns a value that indicates whether the current instance and a specified complex number have the same value.">返回一个值，该值指示当前实例与指定的复数是否具有相同的值。</summary>
      <param name="value" vsli:raw="The complex number to compare.">要比较的复数。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this complex number and &lt;paramref name=&quot;value&quot; /&gt; have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此复数与 <paramref name="value" /> 具有相同的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the current instance and a specified object have the same value.">返回一个值，该值指示当前实例与指定的对象是否具有相同的值。</summary>
      <param name="obj" vsli:raw="The object to compare.">要比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;obj&quot; /&gt; parameter is a &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; object or a type capable of implicit conversion to a &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; object, and its value is equal to the current &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="obj" /> 参数是一个 <see cref="T:System.Numerics.Complex" /> 对象或是一个能够隐式转换为 <see cref="T:System.Numerics.Complex" /> 对象的类型，并且其值等于当前 <see cref="T:System.Numerics.Complex" /> 对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Exp(System.Numerics.Complex)">
      <summary vsli:raw="Returns &lt;see langword=&quot;e&quot; /&gt; raised to the power specified by a complex number.">返回 <see langword="e" /> 的由一个复数指定的次幂。</summary>
      <param name="value" vsli:raw="A complex number that specifies a power.">指定幂的复数。</param>
      <returns vsli:raw="The number &lt;see langword=&quot;e&quot; /&gt; raised to the power &lt;paramref name=&quot;value&quot; /&gt;.">数字 <see langword="e" /> 的 <paramref name="value" /> 次幂。</returns>
    </member>
    <member name="M:System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)">
      <summary vsli:raw="Creates a complex number from a point's polar coordinates.">从点的极坐标创建复数。</summary>
      <param name="magnitude" vsli:raw="The magnitude, which is the distance from the origin (the intersection of the x-axis and the y-axis) to the number.">量值，它是从原点（x 轴与 y 轴的交点）到数字的距离。</param>
      <param name="phase" vsli:raw="The phase, which is the angle from the line to the horizontal axis, measured in radians.">相位，它是直线相对于水平轴的角度，以弧度为单位。</param>
      <returns vsli:raw="A complex number.">一个复数。</returns>
    </member>
    <member name="M:System.Numerics.Complex.GetHashCode">
      <summary vsli:raw="Returns the hash code for the current &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; object.">返回当前 <see cref="T:System.Numerics.Complex" /> 对象的哈希代码。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Numerics.Complex.Imaginary">
      <summary vsli:raw="Gets the imaginary component of the current &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; object.">获取当前 <see cref="T:System.Numerics.Complex" /> 对象的虚部。</summary>
      <returns vsli:raw="The imaginary component of a complex number.">复数的虚部。</returns>
    </member>
    <member name="F:System.Numerics.Complex.ImaginaryOne">
      <summary vsli:raw="Returns a new &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; instance with a real number equal to zero and an imaginary number equal to one.">返回新的 <see cref="T:System.Numerics.Complex" /> 实例，其实数等于零，虚数等于一。</summary>
    </member>
    <member name="F:System.Numerics.Complex.Infinity">
      <summary vsli:raw="Represents infinity as a complex number.">用复数表示无穷大。</summary>
    </member>
    <member name="M:System.Numerics.Complex.IsFinite(System.Numerics.Complex)">
      <summary vsli:raw="Determines whether the specified complex number is finite.">确定指定的复数是否是有限的。</summary>
      <param name="value" vsli:raw="A complex number.">一个复数。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if both, the real and imaginary parts are finite (zero, subnormal or normal); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果实部和虚部都是有限的（零、次正规数或正规数），则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsInfinity(System.Numerics.Complex)">
      <summary vsli:raw="Returns a value indicating whether the specified complex number evaluates to infinity.">返回一个值，该值指示指定复数的计算结果是否为无穷大。</summary>
      <param name="value" vsli:raw="A complex number.">一个复数。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if either, the real or imaginary part are &lt;see cref=&quot;F:System.Double.PositiveInfinity&quot; /&gt; or &lt;see cref=&quot;F:System.Double.NegativeInfinity&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果实部或虚部为 <see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsNaN(System.Numerics.Complex)">
      <summary vsli:raw="Returns a value that indicates whether the specified complex instance is not a number (NaN).">返回一个值，该值指示指定的复数实例是否不为数值 (NaN)。</summary>
      <param name="value" vsli:raw="A complex number.">一个复数。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is not finite or infinite; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定值既不是有限的也不是无限的，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Log(System.Numerics.Complex)">
      <summary vsli:raw="Returns the natural (base &lt;see langword=&quot;e&quot; /&gt;) logarithm of a specified complex number.">返回指定复数的自然对数（底为 <see langword="e" />）。</summary>
      <param name="value" vsli:raw="A complex number.">一个复数。</param>
      <returns vsli:raw="The natural (base &lt;see langword=&quot;e&quot; /&gt;) logarithm of &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" /> 的自然对数（底为 <see langword="e" />）。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Returns the logarithm of a specified complex number in a specified base.">返回指定复数在使用指定底时的对数。</summary>
      <param name="value" vsli:raw="A complex number.">一个复数。</param>
      <param name="baseValue" vsli:raw="The base of the logarithm.">对数的底。</param>
      <returns vsli:raw="The logarithm of &lt;paramref name=&quot;value&quot; /&gt; in base &lt;paramref name=&quot;baseValue&quot; /&gt;.">
        <paramref name="value" /> 的对数（底为 <paramref name="baseValue" />）。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Log10(System.Numerics.Complex)">
      <summary vsli:raw="Returns the base-10 logarithm of a specified complex number.">返回指定复数以 10 为底的对数。</summary>
      <param name="value" vsli:raw="A complex number.">一个复数。</param>
      <returns vsli:raw="The base-10 logarithm of &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" /> 的以 10 为底的对数。</returns>
    </member>
    <member name="P:System.Numerics.Complex.Magnitude">
      <summary vsli:raw="Gets the magnitude (or absolute value) of a complex number.">获取复数的量值（或绝对值）。</summary>
      <returns vsli:raw="The magnitude of the current instance.">当前实例的量值。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Multiply(System.Double,System.Numerics.Complex)">
      <summary vsli:raw="Returns the product of a double-precision real number and a complex number.">返回一个双精度实数与一个复数的乘积。</summary>
      <param name="left" vsli:raw="The double-precision real number to multiply.">要相乘的双精度实数。</param>
      <param name="right" vsli:raw="The complex number to multiply.">要相乘的复数。</param>
      <returns vsli:raw="The product of the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters.">
        <paramref name="left" /> 与 <paramref name="right" /> 参数的乘积。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Returns the product of a complex number and a double-precision real number.">返回一个复数与一个双精度实数的乘积。</summary>
      <param name="left" vsli:raw="The complex number to multiply.">要相乘的复数。</param>
      <param name="right" vsli:raw="The double-precision real number to multiply.">要相乘的双精度实数。</param>
      <returns vsli:raw="The product of the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters.">
        <paramref name="left" /> 与 <paramref name="right" /> 参数的乘积。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Returns the product of two complex numbers.">返回两个复数的乘积。</summary>
      <param name="left" vsli:raw="The first complex number to multiply.">要相乘的第一个复数。</param>
      <param name="right" vsli:raw="The second complex number to multiply.">要相乘的第二个复数。</param>
      <returns vsli:raw="The product of the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters.">
        <paramref name="left" /> 与 <paramref name="right" /> 参数的乘积。</returns>
    </member>
    <member name="F:System.Numerics.Complex.NaN">
      <summary vsli:raw="Represents a complex instance that is not a number (NaN).">表示一个不为数值 (NaN) 的复数实例。</summary>
    </member>
    <member name="M:System.Numerics.Complex.Negate(System.Numerics.Complex)">
      <summary vsli:raw="Returns the additive inverse of a specified complex number.">返回指定复数的加法逆元。</summary>
      <param name="value" vsli:raw="A complex number.">一个复数。</param>
      <returns vsli:raw="The result of the &lt;see cref=&quot;P:System.Numerics.Complex.Real&quot; /&gt; and &lt;see cref=&quot;P:System.Numerics.Complex.Imaginary&quot; /&gt; components of the &lt;paramref name=&quot;value&quot; /&gt; parameter multiplied by -1.">
        <paramref name="value" /> 参数的 <see cref="P:System.Numerics.Complex.Real" /> 和 <see cref="P:System.Numerics.Complex.Imaginary" /> 部分乘以 -1 的结果。</returns>
    </member>
    <member name="F:System.Numerics.Complex.One">
      <summary vsli:raw="Returns a new &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; instance with a real number equal to one and an imaginary number equal to zero.">返回新的 <see cref="T:System.Numerics.Complex" /> 实例，其实数等于一，虚数等于零。</summary>
    </member>
    <member name="M:System.Numerics.Complex.op_Addition(System.Double,System.Numerics.Complex)">
      <summary vsli:raw="Adds a double-precision real number to a complex number.">将一个双精度实数与一个复数相加。</summary>
      <param name="left" vsli:raw="The double-precision real value to add.">要相加的双精度实数值。</param>
      <param name="right" vsli:raw="The complex value to add.">要相加的复值。</param>
      <returns vsli:raw="The sum of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; as a complex number.">
        <paramref name="left" /> 与 <paramref name="right" /> 之和（为复数）。</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Adds a complex number to a double-precision real number.">将一个复数与一个双精度实数相加。</summary>
      <param name="left" vsli:raw="The complex value to add.">要相加的复值。</param>
      <param name="right" vsli:raw="The double-precision real value to add.">要相加的双精度实数值。</param>
      <returns vsli:raw="The sum of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; as a complex number.">
        <paramref name="left" /> 与 <paramref name="right" /> 之和（为复数）。</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Adds two complex numbers.">将两个复数相加。</summary>
      <param name="left" vsli:raw="The first complex value to add.">要相加的第一个复值。</param>
      <param name="right" vsli:raw="The second complex value to add.">要相加的第二个复值。</param>
      <returns vsli:raw="The sum of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">
        <paramref name="left" /> 与 <paramref name="right" /> 的和。</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Division(System.Double,System.Numerics.Complex)">
      <summary vsli:raw="Divides a specified double-precision real number by a specified complex number.">将一个指定双精度实数除以一个指定复数。</summary>
      <param name="left" vsli:raw="The double-precision real value to be divided.">要作为被除数的双精度实数值。</param>
      <param name="right" vsli:raw="The complex value to divide by.">要作为除数的复值。</param>
      <returns vsli:raw="The result of dividing &lt;paramref name=&quot;left&quot; /&gt; by &lt;paramref name=&quot;right&quot; /&gt;, as a complex number.">
        <paramref name="left" /> 除以 <paramref name="right" /> 所得的结果（为复数）。</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Divides a specified complex number by a specified double-precision real number.">将一个指定复数除以一个指定双精度实数。</summary>
      <param name="left" vsli:raw="The complex value to be divided.">要作为被除数的复值。</param>
      <param name="right" vsli:raw="The double-precision real value to divide by.">要作为除数的双精度实数值。</param>
      <returns vsli:raw="The result of dividing &lt;paramref name=&quot;left&quot; /&gt; by &lt;paramref name=&quot;right&quot; /&gt;, as a complex number.">
        <paramref name="left" /> 除以 <paramref name="right" /> 所得的结果（为复数）。</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Divides a specified complex number by another specified complex number.">用一个指定复数除另一个指定复数。</summary>
      <param name="left" vsli:raw="The complex value to be divided.">要作为被除数的复值。</param>
      <param name="right" vsli:raw="The complex value to divide by.">要作为除数的复值。</param>
      <returns vsli:raw="The result of dividing &lt;paramref name=&quot;left&quot; /&gt; by &lt;paramref name=&quot;right&quot; /&gt;.">
        <paramref name="left" /> 除以 <paramref name="right" /> 的结果。</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Returns a value that indicates whether two complex numbers are equal.">返回一个值，该值指示两个复数是否相等。</summary>
      <param name="left" vsli:raw="The first complex number to compare.">要比较的第一个复数。</param>
      <param name="right" vsli:raw="The second complex number to compare.">要比较的第二个复数。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; parameters have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="left" /> 与 <paramref name="right" /> 参数具有相同的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Explicit(System.Decimal)~System.Numerics.Complex">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value to a complex number.">定义从 <see cref="T:System.Decimal" /> 值到复数的显式转换。</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">要转换为复数的值。</param>
      <returns vsli:raw="A complex number that has a real component equal to &lt;paramref name=&quot;value&quot; /&gt; and an imaginary component equal to zero.">一个复数，其实部等于 <paramref name="value" />，虚部等于零。</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger)~System.Numerics.Complex">
      <summary vsli:raw="Defines an explicit conversion of a &lt;see cref=&quot;T:System.Numerics.BigInteger&quot; /&gt; value to a complex number.">定义从 <see cref="T:System.Numerics.BigInteger" /> 值到复数的显式转换。</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">要转换为复数的值。</param>
      <returns vsli:raw="A complex number that has a real component equal to &lt;paramref name=&quot;value&quot; /&gt; and an imaginary component equal to zero.">一个复数，其实部等于 <paramref name="value" />，虚部等于零。</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Byte)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of an unsigned byte to a complex number.">定义从无符号字节到复数的隐式转换。</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">要转换为复数的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">一个对象，其中使用 <paramref name="value" /> 参数的值作为其实部，并使用零作为其虚部。</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Double)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of a double-precision floating-point number to a complex number.">定义从双精度浮点数到复数的隐式转换。</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">要转换为复数的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">一个对象，其中使用 <paramref name="value" /> 参数的值作为其实部，并使用零作为其虚部。</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int16)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of a 16-bit signed integer to a complex number.">定义从 16 位带符号整数到复数的隐式转换。</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">要转换为复数的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">一个对象，其中使用 <paramref name="value" /> 参数的值作为其实部，并使用零作为其虚部。</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int32)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of a 32-bit signed integer to a complex number.">定义从 32 位带符号整数到复数的隐式转换。</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">要转换为复数的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">一个对象，其中使用 <paramref name="value" /> 参数的值作为其实部，并使用零作为其虚部。</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int64)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of a 64-bit signed integer to a complex number.">定义从 64 位带符号整数到复数的隐式转换。</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">要转换为复数的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">一个对象，其中使用 <paramref name="value" /> 参数的值作为其实部，并使用零作为其虚部。</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.SByte)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of a signed byte to a complex number.   &#xA;           &#xA;This API is not CLS-compliant.">定义从带符号字节到复数的隐式转换。   
此 API 不兼容 CLS。</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">要转换为复数的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">一个对象，其中使用 <paramref name="value" /> 参数的值作为其实部，并使用零作为其虚部。</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Single)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of a single-precision floating-point number to a complex number.">定义从单精度浮点数到复数的隐式转换。</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">要转换为复数的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">一个对象，其中使用 <paramref name="value" /> 参数的值作为其实部，并使用零作为其虚部。</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt16)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of a 16-bit unsigned integer to a complex number.   &#xA;           &#xA;This API is not CLS-compliant.">定义从 16 位无符号整数到复数的隐式转换。   
此 API 不兼容 CLS。</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">要转换为复数的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">一个对象，其中使用 <paramref name="value" /> 参数的值作为其实部，并使用零作为其虚部。</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt32)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of a 32-bit unsigned integer to a complex number.   &#xA;           &#xA;This API is not CLS-compliant.">定义从 32 位无符号整数到复数的隐式转换。   
此 API 不兼容 CLS。</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">要转换为复数的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">一个对象，其中使用 <paramref name="value" /> 参数的值作为其实部，并使用零作为其虚部。</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt64)~System.Numerics.Complex">
      <summary vsli:raw="Defines an implicit conversion of a 64-bit unsigned integer to a complex number.   &#xA;           &#xA;This API is not CLS-compliant.">定义从 64 位无符号整数到复数的隐式转换。   
此 API 不兼容 CLS。</summary>
      <param name="value" vsli:raw="The value to convert to a complex number.">要转换为复数的值。</param>
      <returns vsli:raw="An object that contains the value of the &lt;paramref name=&quot;value&quot; /&gt; parameter as its real part and zero as its imaginary part.">一个对象，其中使用 <paramref name="value" /> 参数的值作为其实部，并使用零作为其虚部。</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Returns a value that indicates whether two complex numbers are not equal.">返回一个值，该值指示两个复数是否不相等。</summary>
      <param name="left" vsli:raw="The first value to compare.">要比较的第一个值。</param>
      <param name="right" vsli:raw="The second value to compare.">要比较的第二个值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Multiply(System.Double,System.Numerics.Complex)">
      <summary vsli:raw="Multiplies a specified double-precision real number by a specified complex number.">将一个指定双精度实数乘以一个指定复数。</summary>
      <param name="left" vsli:raw="The double-precision real value to multiply.">要相乘的双精度实数值。</param>
      <param name="right" vsli:raw="The complex value to multiply.">要相乘的复值。</param>
      <returns vsli:raw="The product of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;, as a complex number.">
        <paramref name="left" /> 与 <paramref name="right" /> 的乘积（为复数）。</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Multiplies the specified complex number by a specified double-precision real number.">将一个指定复数乘以一个指定双精度实数。</summary>
      <param name="left" vsli:raw="The complex value to multiply.">要相乘的复值。</param>
      <param name="right" vsli:raw="The double-precision real value to multiply.">要相乘的双精度实数值。</param>
      <returns vsli:raw="The product of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;, as a complex number.">
        <paramref name="left" /> 与 <paramref name="right" /> 的乘积（为复数）。</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Multiplies two specified complex numbers.">将两个指定复数相乘。</summary>
      <param name="left" vsli:raw="The first complex value to multiply.">要相乘的第一个复值。</param>
      <param name="right" vsli:raw="The second complex value to multiply.">要相乘的第二个复值。</param>
      <returns vsli:raw="The product of &lt;paramref name=&quot;left&quot; /&gt; and &lt;paramref name=&quot;right&quot; /&gt;.">
        <paramref name="left" /> 与 <paramref name="right" /> 的乘积。</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Subtraction(System.Double,System.Numerics.Complex)">
      <summary vsli:raw="Subtracts a complex number from a double-precision real number.">一个双精度实数减一个复数。</summary>
      <param name="left" vsli:raw="The double-precision real value to subtract from (the minuend).">要被减的双精度实数值（被减数）。</param>
      <param name="right" vsli:raw="The complex value to subtract (the subtrahend).">要减去的复值（减数）。</param>
      <returns vsli:raw="The result of subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;, as a complex number.">
        <paramref name="left" /> 减 <paramref name="right" /> 所得的结果（为复数）。</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Subtracts a double-precision real number from a complex number.">一个复数减一个双精度实数。</summary>
      <param name="left" vsli:raw="The complex value to subtract from (the minuend).">要被减的复值（被减数）。</param>
      <param name="right" vsli:raw="The double-precision real value to subtract (the subtrahend).">要减去的双精度实数值（减数）。</param>
      <returns vsli:raw="The result of subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;, as a complex number.">
        <paramref name="left" /> 减 <paramref name="right" /> 所得的结果（为复数）。</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Subtracts a complex number from another complex number.">从一个复数中减去另一个复数。</summary>
      <param name="left" vsli:raw="The value to subtract from (the minuend).">要从中减去的值（被减数）。</param>
      <param name="right" vsli:raw="The value to subtract (the subtrahend).">要减去的值（减数）。</param>
      <returns vsli:raw="The result of subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;.">
        <paramref name="right" /> 减 <paramref name="left" /> 所得的结果。</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)">
      <summary vsli:raw="Returns the additive inverse of a specified complex number.">返回指定复数的加法逆元。</summary>
      <param name="value" vsli:raw="The value to negate.">要求反的值。</param>
      <returns vsli:raw="The result of the &lt;see cref=&quot;P:System.Numerics.Complex.Real&quot; /&gt; and &lt;see cref=&quot;P:System.Numerics.Complex.Imaginary&quot; /&gt; components of the &lt;paramref name=&quot;value&quot; /&gt; parameter multiplied by -1.">
        <paramref name="value" /> 参数的 <see cref="P:System.Numerics.Complex.Real" /> 和 <see cref="P:System.Numerics.Complex.Imaginary" /> 部分乘以 -1 的结果。</returns>
    </member>
    <member name="P:System.Numerics.Complex.Phase">
      <summary vsli:raw="Gets the phase of a complex number.">获取复数的相位。</summary>
      <returns vsli:raw="The phase of a complex number, in radians.">复数的相位（以弧度为单位）。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Returns a specified complex number raised to a power specified by a double-precision floating-point number.">返回指定复数的由双精度浮点数指定的次幂。</summary>
      <param name="value" vsli:raw="A complex number to be raised to a power.">要对其求幂的复数。</param>
      <param name="power" vsli:raw="A double-precision floating-point number that specifies a power.">指定幂的双精度浮点数。</param>
      <returns vsli:raw="The complex number &lt;paramref name=&quot;value&quot; /&gt; raised to the power &lt;paramref name=&quot;power&quot; /&gt;.">复数 <paramref name="value" /> 的 <paramref name="power" /> 次幂。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Returns a specified complex number raised to a power specified by a complex number.">返回指定复数的由复数指定的次幂。</summary>
      <param name="value" vsli:raw="A complex number to be raised to a power.">要对其求幂的复数。</param>
      <param name="power" vsli:raw="A complex number that specifies a power.">指定幂的复数。</param>
      <returns vsli:raw="The complex number &lt;paramref name=&quot;value&quot; /&gt; raised to the power &lt;paramref name=&quot;power&quot; /&gt;.">复数 <paramref name="value" /> 的 <paramref name="power" /> 次幂。</returns>
    </member>
    <member name="P:System.Numerics.Complex.Real">
      <summary vsli:raw="Gets the real component of the current &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; object.">获取当前 <see cref="T:System.Numerics.Complex" /> 对象的实部。</summary>
      <returns vsli:raw="The real component of a complex number.">复数的实部。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Reciprocal(System.Numerics.Complex)">
      <summary vsli:raw="Returns the multiplicative inverse of a complex number.">返回复数的乘法倒数。</summary>
      <param name="value" vsli:raw="A complex number.">一个复数。</param>
      <returns vsli:raw="The reciprocal of &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" /> 的倒数。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Sin(System.Numerics.Complex)">
      <summary vsli:raw="Returns the sine of the specified complex number.">返回指定复数的正弦值。</summary>
      <param name="value" vsli:raw="A complex number.">一个复数。</param>
      <returns vsli:raw="The sine of &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" /> 的正弦值。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Sinh(System.Numerics.Complex)">
      <summary vsli:raw="Returns the hyperbolic sine of the specified complex number.">返回指定复数的双曲正弦值。</summary>
      <param name="value" vsli:raw="A complex number.">一个复数。</param>
      <returns vsli:raw="The hyperbolic sine of &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" /> 的双曲正弦值。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Sqrt(System.Numerics.Complex)">
      <summary vsli:raw="Returns the square root of a specified complex number.">返回指定复数的平方根。</summary>
      <param name="value" vsli:raw="A complex number.">一个复数。</param>
      <returns vsli:raw="The square root of &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" /> 的平方根。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Subtract(System.Double,System.Numerics.Complex)">
      <summary vsli:raw="Subtracts one complex number from a double-precision real number and returns the result.">一个双精度实数减一个复数，并返回结果。</summary>
      <param name="left" vsli:raw="The double-precision real value to subtract from (the minuend).">要被减的双精度实数值（被减数）。</param>
      <param name="right" vsli:raw="The complex value to subtract (the subtrahend).">要减去的复值（减数）。</param>
      <returns vsli:raw="The result of subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;, as a complex number.">
        <paramref name="left" /> 减 <paramref name="right" /> 所得的结果（为复数）。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Double)">
      <summary vsli:raw="Subtracts one double-precision real number from a complex number and returns the result.">一个复数减一个双精度实数，并返回结果。</summary>
      <param name="left" vsli:raw="The complex value to subtract from (the minuend).">要被减的复值（被减数）。</param>
      <param name="right" vsli:raw="The double-precision real value to subtract (the subtrahend).">要减去的双精度实数值（减数）。</param>
      <returns vsli:raw="The result of subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;, as a complex number.">
        <paramref name="left" /> 减 <paramref name="right" /> 所得的结果（为复数）。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)">
      <summary vsli:raw="Subtracts one complex number from another and returns the result.">从一个复数中减去另一个复数并返回结果。</summary>
      <param name="left" vsli:raw="The value to subtract from (the minuend).">要从中减去的值（被减数）。</param>
      <param name="right" vsli:raw="The value to subtract (the subtrahend).">要减去的值（减数）。</param>
      <returns vsli:raw="The result of subtracting &lt;paramref name=&quot;right&quot; /&gt; from &lt;paramref name=&quot;left&quot; /&gt;.">
        <paramref name="right" /> 减 <paramref name="left" /> 所得的结果。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Tan(System.Numerics.Complex)">
      <summary vsli:raw="Returns the tangent of the specified complex number.">返回指定复数的正切值。</summary>
      <param name="value" vsli:raw="A complex number.">一个复数。</param>
      <returns vsli:raw="The tangent of &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" /> 的正切值。</returns>
    </member>
    <member name="M:System.Numerics.Complex.Tanh(System.Numerics.Complex)">
      <summary vsli:raw="Returns the hyperbolic tangent of the specified complex number.">返回指定复数的双曲正切值。</summary>
      <param name="value" vsli:raw="A complex number.">一个复数。</param>
      <returns vsli:raw="The hyperbolic tangent of &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" /> 的双曲正切值。</returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString">
      <summary vsli:raw="Converts the value of the current complex number to its equivalent string representation in Cartesian form.">将当前复数的值转换为其采用笛卡尔形式的等效字符串表示形式。</summary>
      <returns vsli:raw="The string representation of the current instance in Cartesian form.">当前实例的采用笛卡尔形式的字符串表示形式。</returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.IFormatProvider)">
      <summary vsli:raw="Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified culture-specific formatting information.">使用指定的区域性特定格式设置信息，将当前复数的值转换为其采用笛卡尔形式的等效字符串表示形式。</summary>
      <param name="provider" vsli:raw="An object that supplies culture-specific formatting information.">一个提供区域性特定的格式设置信息的对象。</param>
      <returns vsli:raw="The string representation of the current instance in Cartesian form, as specified by &lt;paramref name=&quot;provider&quot; /&gt;.">由 <paramref name="provider" /> 指定的当前实例的采用笛卡尔形式的字符串表示形式。</returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.String)">
      <summary vsli:raw="Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format for its real and imaginary parts.">通过对当前复数的实部和虚部使用指定格式，将它的值转换为其采用笛卡尔形式的等效字符串表示形式。</summary>
      <param name="format" vsli:raw="A standard or custom numeric format string.">标准或自定义的数值格式字符串。</param>
      <returns vsli:raw="The string representation of the current instance in Cartesian form.">当前实例的采用笛卡尔形式的字符串表示形式。</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;format&quot; /&gt; is not a valid format string.">
        <paramref name="format" /> 不是有效的格式字符串。</exception>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.String,System.IFormatProvider)">
      <summary vsli:raw="Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format and culture-specific format information for its real and imaginary parts.">通过对当前复数的实部和虚部使用指定格式和区域性特定格式信息，将它的值转换为其采用笛卡尔形式的等效字符串表示形式。</summary>
      <param name="format" vsli:raw="A standard or custom numeric format string.">标准或自定义的数值格式字符串。</param>
      <param name="provider" vsli:raw="An object that supplies culture-specific formatting information.">一个提供区域性特定的格式设置信息的对象。</param>
      <returns vsli:raw="The string representation of the current instance in Cartesian form, as specified by &lt;paramref name=&quot;format&quot; /&gt; and &lt;paramref name=&quot;provider&quot; /&gt;.">由 <paramref name="format" /> 和 <paramref name="provider" /> 指定的当前实例的采用笛卡尔形式的字符串表示形式。</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;format&quot; /&gt; is not a valid format string.">
        <paramref name="format" /> 不是有效的格式字符串。</exception>
    </member>
    <member name="F:System.Numerics.Complex.Zero">
      <summary vsli:raw="Returns a new &lt;see cref=&quot;T:System.Numerics.Complex&quot; /&gt; instance with a real number equal to zero and an imaginary number equal to zero.">返回新的 <see cref="T:System.Numerics.Complex" /> 实例，其实数和虚数都等于零。</summary>
    </member>
  </members>
</doc>
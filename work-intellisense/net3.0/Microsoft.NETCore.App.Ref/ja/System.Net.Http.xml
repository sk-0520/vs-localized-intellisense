<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Net.Http</name>
  </assembly>
  <members>
    <member name="T:System.Net.Http.ByteArrayContent">
      <summary>バイト配列に基づいて HTTP コンテンツを提供します。</summary>
    </member>
    <member name="M:System.Net.Http.ByteArrayContent.#ctor(System.Byte[])">
      <summary>
        <see cref="T:System.Net.Http.ByteArrayContent" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="content">
        <see cref="T:System.Net.Http.ByteArrayContent" /> の初期化に使用されるコンテンツ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="content" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Net.Http.ByteArrayContent.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Net.Http.ByteArrayContent" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="content">
        <see cref="T:System.Net.Http.ByteArrayContent" /> の初期化に使用されるコンテンツ。</param>
      <param name="offset">
        <see cref="T:System.Net.Http.ByteArrayContent" /> の初期化に使用される <paramref name="content" /> パラメーターのオフセット (バイト単位)。</param>
      <param name="count">
        <see cref="T:System.Net.Http.ByteArrayContent" /> を初期化するために使用される <paramref name="content" /> パラメーターから始まる <paramref name="offset" /> のバイト数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="content" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> パラメーターが 0 未満。  
または 
<paramref name="offset" /> パラメーターが <paramref name="content" /> パラメーターで指定されたコンテンツの長さを超えています。  

または - 
<paramref name="count" /> パラメーターが 0 未満。  

または - 
<paramref name="count" /> パラメーターが、<paramref name="content" /> パラメーターで指定されたコンテンツの長さから <paramref name="offset" /> パラメーターを引いた値を超えています。</exception>
    </member>
    <member name="M:System.Net.Http.ByteArrayContent.CreateContentReadStreamAsync">
      <summary>
        <see cref="T:System.Net.Http.ByteArrayContent" /> からのメモリであるバッキング ストアの読み取りの非同期操作として HTTP コンテンツ ストリームを作成します。</summary>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
    </member>
    <member name="M:System.Net.Http.ByteArrayContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary>コンス トラクターで指定したバイト配列を、非同期操作として HTTP コンテンツ ストリームにシリアル化し書き込みます。</summary>
      <param name="stream">対象のストリーム。</param>
      <param name="context">トランスポートに関する情報 (チャネル バインディング トークンなど)。 このパラメーターは <see langword="null" /> の場合もあります。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
    </member>
    <member name="M:System.Net.Http.ByteArrayContent.TryComputeLength(System.Int64@)">
      <summary>バイト配列が有効なバイト長であるかどうかを判断します。</summary>
      <param name="length">バイト配列の長さ (バイト単位)。</param>
      <returns>
        <paramref name="length" /> が有効な長さの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Net.Http.ClientCertificateOption">
      <summary>クライアント証明書がどのように提供されるかを指定します。</summary>
    </member>
    <member name="F:System.Net.Http.ClientCertificateOption.Automatic">
      <summary>
        <see cref="T:System.Net.Http.HttpClientHandler" /> は、使用できるすべてのクライアント証明書を自動的に提供しようとします。</summary>
    </member>
    <member name="F:System.Net.Http.ClientCertificateOption.Manual">
      <summary>アプリケーションは <see cref="T:System.Net.Http.WebRequestHandler" /> にクライアント証明書を手動で提供します。 この値が既定値です。</summary>
    </member>
    <member name="T:System.Net.Http.DelegatingHandler">
      <summary>内部ハンドラーと呼ばれる、別のハンドラーへ HTTP 応答メッセージの処理をデリゲートする HTTP ハンドラーの型。</summary>
    </member>
    <member name="M:System.Net.Http.DelegatingHandler.#ctor">
      <summary>
        <see cref="T:System.Net.Http.DelegatingHandler" /> クラスの新しいインスタンスを作成します。</summary>
    </member>
    <member name="M:System.Net.Http.DelegatingHandler.#ctor(System.Net.Http.HttpMessageHandler)">
      <summary>特定の内部ハンドラーを使用して、<see cref="T:System.Net.Http.DelegatingHandler" /> クラスの新しいインスタンスを作成します。</summary>
      <param name="innerHandler">HTTP 応答メッセージ処理用の内部ハンドラー。</param>
    </member>
    <member name="M:System.Net.Http.DelegatingHandler.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Net.Http.DelegatingHandler" /> が使用しているアンマネージド リソースを解放します。オプションでマネージド リソースも破棄します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.Net.Http.DelegatingHandler.InnerHandler">
      <summary>HTTP 応答メッセージを処理する内部ハンドラーを取得または設定します。</summary>
      <returns>HTTP 応答メッセージの内部ハンドラー。</returns>
    </member>
    <member name="M:System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>非同期操作としてサーバーに送信するように HTTP 要求を内部ハンドラーに送信します。</summary>
      <param name="request">サーバーに送信する HTTP 要求メッセージ。</param>
      <param name="cancellationToken">操作をキャンセルするキャンセル トークン。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> が <see langword="null" />でした。</exception>
    </member>
    <member name="T:System.Net.Http.FormUrlEncodedContent">
      <summary>application/x-www-form-urlencoded MIME 型を使用してエンコードされた名前と値の組のコンテナー。</summary>
    </member>
    <member name="M:System.Net.Http.FormUrlEncodedContent.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
      <summary>指定した名前と値のペアのコレクションを使用して、<see cref="T:System.Net.Http.FormUrlEncodedContent" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="nameValueCollection">名前と値のペアのコレクション。</param>
    </member>
    <member name="T:System.Net.Http.Headers.AuthenticationHeaderValue">
      <summary>Authorization、ProxyAuthorization、WWW-Authenticate、Proxy-Authenticate のヘッダー値の認証情報を表します。</summary>
    </member>
    <member name="M:System.Net.Http.Headers.AuthenticationHeaderValue.#ctor(System.String)">
      <summary>
        <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="scheme">承認のために使用するスキーム。</param>
    </member>
    <member name="M:System.Net.Http.Headers.AuthenticationHeaderValue.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="scheme">承認のために使用するスキーム。</param>
      <param name="parameter">要求されているリソースのユーザー エージェントの認証情報を含む資格情報。</param>
    </member>
    <member name="M:System.Net.Http.Headers.AuthenticationHeaderValue.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> が、現在の <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> オブジェクトと等しいかどうかを判断します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>指定した <see cref="T:System.Object" /> が現在のオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.AuthenticationHeaderValue.GetHashCode">
      <summary>
        <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> オブジェクトのハッシュ関数として機能します。</summary>
      <returns>現在のオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.AuthenticationHeaderValue.Parameter">
      <summary>要求されているリソースのユーザー エージェントの認証情報を含む資格情報を取得します。</summary>
      <returns>認証情報を含む資格情報。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.AuthenticationHeaderValue.Parse(System.String)">
      <summary>文字列を <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> インスタンスに変換します。</summary>
      <param name="input">認証ヘッダー値の情報を表す文字列。</param>
      <returns>
        <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> インスタンス。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は <see langword="null" /> の参照です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> は有効な認証ヘッダー値の情報ではありません。</exception>
    </member>
    <member name="P:System.Net.Http.Headers.AuthenticationHeaderValue.Scheme">
      <summary>承認のために使用するスキームを取得します。</summary>
      <returns>承認のために使用するスキーム。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.AuthenticationHeaderValue.System#ICloneable#Clone">
      <summary>現在の <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> インスタンスのコピーである新しいオブジェクトを作成します。</summary>
      <returns>現在のインスタンスのコピー。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.AuthenticationHeaderValue.ToString">
      <summary>現在の <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> オブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.AuthenticationHeaderValue.TryParse(System.String,System.Net.Http.Headers.AuthenticationHeaderValue@)">
      <summary>文字列が有効な <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> 情報かどうかを判断します。</summary>
      <param name="input">検証対象の文字列。</param>
      <param name="parsedValue">文字列の <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> バージョン。</param>
      <returns>
        <paramref name="input" /> が有効な <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> 情報の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Net.Http.Headers.CacheControlHeaderValue">
      <summary>Cache-Control ヘッダーの値を表します。</summary>
    </member>
    <member name="M:System.Net.Http.Headers.CacheControlHeaderValue.#ctor">
      <summary>
        <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Net.Http.Headers.CacheControlHeaderValue.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> が、現在の <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> オブジェクトと等しいかどうかを判断します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>指定した <see cref="T:System.Object" /> が現在のオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.Extensions">
      <summary>それぞれにオプションで割り当てられた値を持つキャッシュ拡張トークン。</summary>
      <returns>それぞれにオプションで割り当てられた値を持つキャッシュ拡張トークンのコレクション。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CacheControlHeaderValue.GetHashCode">
      <summary>
        <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> オブジェクトのハッシュ関数として機能します。</summary>
      <returns>現在のオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.MaxAge">
      <summary>HTTP クライアントが応答を許容できる最大有効期間 (秒単位で指定)。</summary>
      <returns>時間 (秒単位)。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.MaxStale">
      <summary>HTTP クライアントが有効期限を超えた応答を許容するかどうか。</summary>
      <returns>HTTP クライアントが有効期限を超えた応答を許容する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.MaxStaleLimit">
      <summary>最大時間 (秒単位)、HTTP クライアントは有効期限を超えた応答を許容できます。</summary>
      <returns>時間 (秒単位)。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.MinFresh">
      <summary>HTTP クライアントが応答を許容する更新の有効期間 (秒単位で指定)。</summary>
      <returns>時間 (秒単位)。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.MustRevalidate">
      <summary>キャッシュ エントリが古くなったとき、元のサーバーで以降の使用においてキャッシュ エントリの再検証が必要かどうか。</summary>
      <returns>キャッシュ エントリが古くなったとき、元のサーバーで以降の使用においてキャッシュ エントリの再検証が必要な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.NoCache">
      <summary>HTTP クライアントがキャッシュされた応答を許容できるかどうか。</summary>
      <returns>
        <see langword="true" />HTTP クライアントがキャッシュされた応答を受け入れない場合は。それ以外<see langword="false" />の場合は。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.NoCacheHeaders">
      <summary>HTTP 応答のキャッシュ コントロール ヘッダー フィールドにある "no-cache" ディレクティブ内の fieldnames のコレクション。</summary>
      <returns>fieldnames のコレクション。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.NoStore">
      <summary>キャッシュが、HTTP 要求メッセージまたは任意の応答のいずれかの一部を格納してはいけないかどうか。</summary>
      <returns>キャッシュが、HTTP 要求メッセージまたは任意の応答のいずれかの一部を格納してはいけない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.NoTransform">
      <summary>キャッシュまたはプロキシがエンティティ本体の側面を変更する必要はありません。</summary>
      <returns>キャッシュまたはプロキシがエンティティ本体の側面を変更する必要がない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.OnlyIfCached">
      <summary>キャッシュの応答に、HTTP 応答の他の制約と一致するキャッシュ エントリを使用するか、504 (ゲートウェイ タイムアウト) 状態を使用するかどうか。</summary>
      <returns>キャッシュの応答に、HTTP 応答の他の制約と一致するキャッシュ エントリを使用するか、504 (ゲートウェイ タイムアウト) 状態を使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CacheControlHeaderValue.Parse(System.String)">
      <summary>文字列を <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> インスタンスに変換します。</summary>
      <param name="input">Cache-Control ヘッダー値の情報を表す文字列。</param>
      <returns>
        <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> のインスタンス。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は <see langword="null" /> の参照です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> は、有効な Cache-Control ヘッダー値の情報ではありません。</exception>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.Private">
      <summary>HTTP 応答メッセージのすべてまたは一部が単一ユーザーに向けたものであって共有キャッシュでキャッシュされるべきでないかどうか。</summary>
      <returns>HTTP 応答メッセージのすべてまたは一部が単一ユーザーに向けたものであって共有キャッシュでキャッシュされるべきでない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.PrivateHeaders">
      <summary>HTTP 応答のキャッシュ コントロール ヘッダー フィールドにある "private" ディレクティブ内のコレクション fieldnames。</summary>
      <returns>fieldnames のコレクション。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.ProxyRevalidate">
      <summary>共有のユーザー エージェントのキャッシュでキャッシュ エントリが古くなったとき、元のサーバーで以降の使用においてキャッシュ エントリの再検証が必要かどうか。</summary>
      <returns>共有のユーザー エージェントのキャッシュでキャッシュ エントリが古くなったとき、元のサーバーで以降の使用においてキャッシュ エントリの再検証が必要な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.Public">
      <summary>HTTP 応答が、通常はキャッシュできない、または非共有キャッシュにのみキャッシュ可能であっても、任意のキャッシュによってキャッシュされる可能性があるかどうか。</summary>
      <returns>HTTP 応答が、通常はキャッシュできない、または非共有キャッシュにのみキャッシュ可能であっても、任意のキャッシュによってキャッシュされる可能性がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CacheControlHeaderValue.SharedMaxAge">
      <summary>秒で指定した、キャッシュ制御ヘッダーまたは共有キャッシュの Expires ヘッダーにある「最長期間」ディレクティブをオーバーライドする HTTP 応答での共有の最長時間。</summary>
      <returns>時間 (秒単位)。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CacheControlHeaderValue.System#ICloneable#Clone">
      <summary>現在の <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> インスタンスのコピーである新しいオブジェクトを作成します。</summary>
      <returns>現在のインスタンスのコピー。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CacheControlHeaderValue.ToString">
      <summary>現在の <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> オブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CacheControlHeaderValue.TryParse(System.String,System.Net.Http.Headers.CacheControlHeaderValue@)">
      <summary>文字列が有効な <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> 情報かどうかを判断します。</summary>
      <param name="input">検証対象の文字列。</param>
      <param name="parsedValue">文字列の <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> バージョン。</param>
      <returns>
        <paramref name="input" /> が有効な <see cref="T:System.Net.Http.Headers.CacheControlHeaderValue" /> 情報の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Net.Http.Headers.ContentDispositionHeaderValue">
      <summary>Content-Disposition ヘッダーの値を表します。</summary>
    </member>
    <member name="M:System.Net.Http.Headers.ContentDispositionHeaderValue.#ctor(System.Net.Http.Headers.ContentDispositionHeaderValue)">
      <summary>
        <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="source">
        <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" />。</param>
    </member>
    <member name="M:System.Net.Http.Headers.ContentDispositionHeaderValue.#ctor(System.String)">
      <summary>
        <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dispositionType">
        <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> を含む文字列。</param>
    </member>
    <member name="P:System.Net.Http.Headers.ContentDispositionHeaderValue.CreationDate">
      <summary>ファイルが作成された日付。</summary>
      <returns>ファイルの作成日。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentDispositionHeaderValue.DispositionType">
      <summary>コンテンツのボディ部の配置タイプです。</summary>
      <returns>配置タイプ。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentDispositionHeaderValue.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> が、現在の <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> オブジェクトと等しいかどうかを判断します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>指定した <see cref="T:System.Object" /> が現在のオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentDispositionHeaderValue.FileName">
      <summary>メッセージ ペイロード (エンティティがデタッチされ別のファイルに格納されている場合に使用する) を格納するためのファイル名を作成する方法に関する提案。</summary>
      <returns>推奨ファイル名。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentDispositionHeaderValue.FileNameStar">
      <summary>メッセージ ペイロード (エンティティがデタッチされ別のファイルに格納されている場合に使用する) を格納するためのファイル名を作成する方法に関する提案。</summary>
      <returns>推奨ファイル名は filename* 形式。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentDispositionHeaderValue.GetHashCode">
      <summary>
        <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> オブジェクトのハッシュ関数として機能します。</summary>
      <returns>現在のオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentDispositionHeaderValue.ModificationDate">
      <summary>ファイルの最終更新日。</summary>
      <returns>ファイルの変更日。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentDispositionHeaderValue.Name">
      <summary>コンテンツのボディ部の名前です。</summary>
      <returns>コンテンツのボディ部の名前。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentDispositionHeaderValue.Parameters">
      <summary>パラメーターのセットには、Content-Disposition ヘッダーが含まれています。</summary>
      <returns>パラメーターのコレクション。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentDispositionHeaderValue.Parse(System.String)">
      <summary>文字列を <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> インスタンスに変換します。</summary>
      <param name="input">コンテンツの破棄ヘッダー値の情報を表す文字列。</param>
      <returns>
        <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> インスタンス。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は <see langword="null" /> の参照です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> は有効なコンテンツの破棄ヘッダー値の情報ではありません。</exception>
    </member>
    <member name="P:System.Net.Http.Headers.ContentDispositionHeaderValue.ReadDate">
      <summary>ファイルが最後に読み取られた日付。</summary>
      <returns>最後の読み取り日。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentDispositionHeaderValue.Size">
      <summary>ファイルのおおよそのサイズ (バイト単位)。</summary>
      <returns>おおよそのサイズ (バイト単位)。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentDispositionHeaderValue.System#ICloneable#Clone">
      <summary>現在の <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> インスタンスのコピーである新しいオブジェクトを作成します。</summary>
      <returns>現在のインスタンスのコピー。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentDispositionHeaderValue.ToString">
      <summary>現在の <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> オブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentDispositionHeaderValue.TryParse(System.String,System.Net.Http.Headers.ContentDispositionHeaderValue@)">
      <summary>文字列が有効な <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> 情報かどうかを判断します。</summary>
      <param name="input">検証対象の文字列。</param>
      <param name="parsedValue">文字列の <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> バージョン。</param>
      <returns>
        <paramref name="input" /> が有効な <see cref="T:System.Net.Http.Headers.ContentDispositionHeaderValue" /> 情報の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Net.Http.Headers.ContentRangeHeaderValue">
      <summary>Content-Range ヘッダーの値を表します。</summary>
    </member>
    <member name="M:System.Net.Http.Headers.ContentRangeHeaderValue.#ctor(System.Int64)">
      <summary>
        <see cref="T:System.Net.Http.Headers.ContentRangeHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="length">範囲の開始点または終了点 (バイト単位)。</param>
    </member>
    <member name="M:System.Net.Http.Headers.ContentRangeHeaderValue.#ctor(System.Int64,System.Int64)">
      <summary>
        <see cref="T:System.Net.Http.Headers.ContentRangeHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="from">データの送信を開始する位置 (バイト単位)。</param>
      <param name="to">データの送信を終了する位置 (バイト単位)。</param>
    </member>
    <member name="M:System.Net.Http.Headers.ContentRangeHeaderValue.#ctor(System.Int64,System.Int64,System.Int64)">
      <summary>
        <see cref="T:System.Net.Http.Headers.ContentRangeHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="from">データの送信を開始する位置 (バイト単位)。</param>
      <param name="to">データの送信を終了する位置 (バイト単位)。</param>
      <param name="length">範囲の開始点または終了点 (バイト単位)。</param>
    </member>
    <member name="M:System.Net.Http.Headers.ContentRangeHeaderValue.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在の <see cref="T:System.Net.Http.Headers.ContentRangeHeaderValue" /> オブジェクトと等しいかどうかを判断します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>指定した <see cref="T:System.Object" /> が現在のオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentRangeHeaderValue.From">
      <summary>データの送信を開始する位置を取得します。</summary>
      <returns>データの送信を開始する位置 (バイト単位)。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentRangeHeaderValue.GetHashCode">
      <summary>
        <see cref="T:System.Net.Http.Headers.ContentRangeHeaderValue" /> オブジェクトのハッシュ関数として機能します。</summary>
      <returns>現在のオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentRangeHeaderValue.HasLength">
      <summary>Content-Range ヘッダーが指定された長さであるかどうかを取得します。</summary>
      <returns>Content-Range が指定された長さである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentRangeHeaderValue.HasRange">
      <summary>Content-Range が指定された範囲であるかどうかを取得します。</summary>
      <returns>Content-Range が指定された範囲である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentRangeHeaderValue.Length">
      <summary>エンティティ ボディ全体の長さを取得します。</summary>
      <returns>エンティティ ボディ全体の長さ。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentRangeHeaderValue.Parse(System.String)">
      <summary>文字列を <see cref="T:System.Net.Http.Headers.ContentRangeHeaderValue" /> インスタンスに変換します。</summary>
      <param name="input">コンテンツ範囲ヘッダー値の情報を表す文字列。</param>
      <returns>
        <see cref="T:System.Net.Http.Headers.ContentRangeHeaderValue" /> インスタンス。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は <see langword="null" /> の参照です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> は有効なコンテンツ範囲のヘッダー値の情報ではありません。</exception>
    </member>
    <member name="M:System.Net.Http.Headers.ContentRangeHeaderValue.System#ICloneable#Clone">
      <summary>現在の <see cref="T:System.Net.Http.Headers.ContentRangeHeaderValue" /> インスタンスのコピーである新しいオブジェクトを作成します。</summary>
      <returns>現在のインスタンスのコピー。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentRangeHeaderValue.To">
      <summary>データの送信を終了する位置を取得します。</summary>
      <returns>データの送信を終了する位置。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentRangeHeaderValue.ToString">
      <summary>現在の <see cref="T:System.Net.Http.Headers.ContentRangeHeaderValue" /> オブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ContentRangeHeaderValue.TryParse(System.String,System.Net.Http.Headers.ContentRangeHeaderValue@)">
      <summary>文字列が有効な <see cref="T:System.Net.Http.Headers.ContentRangeHeaderValue" /> 情報かどうかを判断します。</summary>
      <param name="input">検証対象の文字列。</param>
      <param name="parsedValue">文字列の <see cref="T:System.Net.Http.Headers.ContentRangeHeaderValue" /> バージョン。</param>
      <returns>
        <paramref name="input" /> が有効な <see cref="T:System.Net.Http.Headers.ContentRangeHeaderValue" /> 情報の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ContentRangeHeaderValue.Unit">
      <summary>使用されている範囲単位。</summary>
      <returns>範囲単位を格納している <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Net.Http.Headers.EntityTagHeaderValue">
      <summary>エンティティ タグのヘッダー値を表します。</summary>
    </member>
    <member name="M:System.Net.Http.Headers.EntityTagHeaderValue.#ctor(System.String)">
      <summary>
        <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="tag">
        <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" /> を含む文字列。</param>
    </member>
    <member name="M:System.Net.Http.Headers.EntityTagHeaderValue.#ctor(System.String,System.Boolean)">
      <summary>
        <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="tag">
        <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" /> を含む文字列。</param>
      <param name="isWeak">このエンティティ タグ ヘッダーが弱い検証コントロールかどうかを示す値。 エンティティ タグ ヘッダーが弱い検証コントロールの場合は、<paramref name="isWeak" /> を <see langword="true" /> に設定します。 エンティティ タグ ヘッダーが強い検証コントロールの場合は、<paramref name="isWeak" /> を <see langword="false" /> に設定します。</param>
    </member>
    <member name="P:System.Net.Http.Headers.EntityTagHeaderValue.Any">
      <summary>エンティティ タグのヘッダー値を取得します。</summary>
      <returns>
        <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" /> を返します。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.EntityTagHeaderValue.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> が、現在の <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" /> オブジェクトと等しいかどうかを判断します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>指定した <see cref="T:System.Object" /> が現在のオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.EntityTagHeaderValue.GetHashCode">
      <summary>
        <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" /> オブジェクトのハッシュ関数として機能します。</summary>
      <returns>現在のオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.EntityTagHeaderValue.IsWeak">
      <summary>エンティティ タグの前に脆弱性インジケーターが付いたかどうかを取得します。</summary>
      <returns>エンティティ タグの前に脆弱性インジケータ―が付いている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.EntityTagHeaderValue.Parse(System.String)">
      <summary>文字列を <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" /> インスタンスに変換します。</summary>
      <param name="input">エンティティ タグ ヘッダー値の情報を表す文字列。</param>
      <returns>
        <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" /> インスタンス。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は <see langword="null" /> の参照です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> は有効なエンティティ タグ ヘッダー値の情報ではありません。</exception>
    </member>
    <member name="M:System.Net.Http.Headers.EntityTagHeaderValue.System#ICloneable#Clone">
      <summary>現在の <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" /> インスタンスのコピーである新しいオブジェクトを作成します。</summary>
      <returns>現在のインスタンスのコピー。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.EntityTagHeaderValue.Tag">
      <summary>引用符で囲まれたを不透明な文字列を取得します。</summary>
      <returns>引用符で囲まれたを不透明な文字列。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.EntityTagHeaderValue.ToString">
      <summary>現在の <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" /> オブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.EntityTagHeaderValue.TryParse(System.String,System.Net.Http.Headers.EntityTagHeaderValue@)">
      <summary>文字列が有効な <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" /> 情報かどうかを判断します。</summary>
      <param name="input">検証対象の文字列。</param>
      <param name="parsedValue">文字列の <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" /> バージョン。</param>
      <returns>
        <paramref name="input" /> が有効な <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" /> 情報の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Net.Http.Headers.HttpContentHeaders">
      <summary>RFC 2616 で定義されているコンテンツ ヘッダーのコレクションを表します。</summary>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.Allow">
      <summary>HTTP 応答の <see langword="Allow" /> コンテンツ ヘッダーの値を取得します。</summary>
      <returns>HTTP 応答の <see langword="Allow" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.ContentDisposition">
      <summary>HTTP 応答の <see langword="Content-Disposition" /> コンテンツ ヘッダーの値を取得します。</summary>
      <returns>HTTP 応答の <see langword="Content-Disposition" /> コンテンツ ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.ContentEncoding">
      <summary>HTTP 応答の <see langword="Content-Encoding" /> コンテンツ ヘッダーの値を取得します。</summary>
      <returns>HTTP 応答の <see langword="Content-Encoding" /> コンテンツ ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.ContentLanguage">
      <summary>HTTP 応答の <see langword="Content-Language" /> コンテンツ ヘッダーの値を取得します。</summary>
      <returns>HTTP 応答の <see langword="Content-Language" /> コンテンツ ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.ContentLength">
      <summary>HTTP 応答の <see langword="Content-Length" /> コンテンツ ヘッダーの値を取得または設定します。</summary>
      <returns>HTTP 応答の <see langword="Content-Length" /> コンテンツ ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.ContentLocation">
      <summary>HTTP 応答の <see langword="Content-Location" /> コンテンツ ヘッダーの値を取得または設定します。</summary>
      <returns>HTTP 応答の <see langword="Content-Location" /> コンテンツ ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.ContentMD5">
      <summary>HTTP 応答の <see langword="Content-MD5" /> コンテンツ ヘッダーの値を取得または設定します。</summary>
      <returns>HTTP 応答の <see langword="Content-MD5" /> コンテンツ ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.ContentRange">
      <summary>HTTP 応答の <see langword="Content-Range" /> コンテンツ ヘッダーの値を取得または設定します。</summary>
      <returns>HTTP 応答の <see langword="Content-Range" /> コンテンツ ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.ContentType">
      <summary>HTTP 応答の <see langword="Content-Type" /> コンテンツ ヘッダーの値を取得または設定します。</summary>
      <returns>HTTP 応答の <see langword="Content-Type" /> コンテンツ ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.Expires">
      <summary>HTTP 応答の <see langword="Expires" /> コンテンツ ヘッダーの値を取得または設定します。</summary>
      <returns>HTTP 応答の <see langword="Expires" /> コンテンツ ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpContentHeaders.LastModified">
      <summary>HTTP 応答の <see langword="Last-Modified" /> コンテンツ ヘッダーの値を取得または設定します。</summary>
      <returns>HTTP 応答の <see langword="Last-Modified" /> コンテンツ ヘッダーの値。</returns>
    </member>
    <member name="T:System.Net.Http.Headers.HttpHeaders">
      <summary>RFC 2616 で定義されているヘッダーおよび値のコレクション。</summary>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.#ctor">
      <summary>
        <see cref="T:System.Net.Http.Headers.HttpHeaders" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.Add(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
        <see cref="T:System.Net.Http.Headers.HttpHeaders" /> コレクションに指定のヘッダーと値を追加します。</summary>
      <param name="name">コレクションに追加するヘッダー。</param>
      <param name="values">コレクションに追加するヘッダー値のリスト。</param>
      <exception cref="T:System.ArgumentException">この名前を null または空にすることはできません。</exception>
      <exception cref="T:System.ArgumentNullException">この値を null または空にすることはできません。</exception>
      <exception cref="T:System.InvalidOperationException">誤って使用されたヘッダー名。 要求ヘッダーが HttpRequestMessage オブジェクトで、応答ヘッダーが HttpResponseMessage オブジェクトで、コンテンツ ヘッダーが HttpContent オブジェクトで使用されていることを確認してください。</exception>
      <exception cref="T:System.FormatException">ヘッダー名の形式が無効です。
または
ヘッダーの値の改行文字の後には空白文字が必要です。</exception>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.Add(System.String,System.String)">
      <summary>
        <see cref="T:System.Net.Http.Headers.HttpHeaders" /> コレクションに指定のヘッダーと値を追加します。</summary>
      <param name="name">コレクションに追加するヘッダー。</param>
      <param name="value">ヘッダーの内容。</param>
      <exception cref="T:System.ArgumentException">この名前を null または空にすることはできません。</exception>
      <exception cref="T:System.InvalidOperationException">誤って使用されたヘッダー名。 要求ヘッダーが HttpRequestMessage オブジェクトで、応答ヘッダーが HttpResponseMessage オブジェクトで、コンテンツ ヘッダーが HttpContent オブジェクトで使用されていることを確認してください。</exception>
      <exception cref="T:System.FormatException">ヘッダー名の形式が無効です。

または -

ヘッダーの値の改行文字の後には空白文字が必要です。</exception>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.Clear">
      <summary>
        <see cref="T:System.Net.Http.Headers.HttpHeaders" /> コレクションからすべてのヘッダーを削除します。</summary>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.Contains(System.String)">
      <summary>特定のヘッダーが <see cref="T:System.Net.Http.Headers.HttpHeaders" /> コレクションに存在しているかどうかを返します。</summary>
      <param name="name">特定のヘッダー。</param>
      <returns>
        <see langword="true" /> には指定したヘッダーがコレクションに存在しています。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.GetEnumerator">
      <summary>
        <see cref="T:System.Net.Http.Headers.HttpHeaders" /> インスタンスを反復処理できる列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Net.Http.Headers.HttpHeaders" /> の列挙子。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.GetValues(System.String)">
      <summary>
        <see cref="T:System.Net.Http.Headers.HttpHeaders" /> コレクションに格納されている指定したヘッダーのすべてのヘッダーの値を返します。</summary>
      <param name="name">値を返す指定されたヘッダー。</param>
      <returns>ヘッダー文字列の配列。</returns>
      <exception cref="T:System.InvalidOperationException">ヘッダーが見つかりません。</exception>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.Remove(System.String)">
      <summary>指定したヘッダーを <see cref="T:System.Net.Http.Headers.HttpHeaders" /> コレクションから削除します。</summary>
      <param name="name">コレクションから削除するヘッダーの名前。</param>
      <returns>
        <see cref="T:System.Boolean" /> を返します。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.System#Collections#IEnumerable#GetEnumerator">
      <summary>
        <see cref="T:System.Net.Http.Headers.HttpHeaders" /> を反復処理できる列挙子を取得します。</summary>
      <returns>
        <see cref="T:System.Net.Http.Headers.HttpHeaders" /> を反復処理できる <see cref="T:System.Collections.IEnumerator" /> の実装のインスタンス。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.ToString">
      <summary>現在の <see cref="T:System.Net.Http.Headers.HttpHeaders" /> オブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.TryAddWithoutValidation(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>指定したヘッダーとその値が、提供された情報を検証せずに <see cref="T:System.Net.Http.Headers.HttpHeaders" /> コレクションに追加されたかどうかを示す値を返します。</summary>
      <param name="name">コレクションに追加するヘッダー。</param>
      <param name="values">ヘッダーの値。</param>
      <returns>指定したヘッダー <paramref name="name" /> と <paramref name="values" /> がコレクションに追加された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.TryAddWithoutValidation(System.String,System.String)">
      <summary>指定したヘッダーとその値が、提供された情報を検証せずに <see cref="T:System.Net.Http.Headers.HttpHeaders" /> コレクションに追加されたかどうかを示す値を返します。</summary>
      <param name="name">コレクションに追加するヘッダー。</param>
      <param name="value">ヘッダーの内容。</param>
      <returns>指定したヘッダー <paramref name="name" /> と <paramref name="value" /> がコレクションに追加された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaders.TryGetValues(System.String,System.Collections.Generic.IEnumerable{System.String}@)">
      <summary>
        <see cref="T:System.Net.Http.Headers.HttpHeaders" /> コレクションに指定されたヘッダーと指定した値が格納されているかどうかを返します。</summary>
      <param name="name">指定されたヘッダー。</param>
      <param name="values">指定されたヘッダーの値。</param>
      <returns>
        <see langword="true" /> は指定したヘッダー <paramref name="name" /> で、<see langword="values" /> はコレクションに存在しています。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Net.Http.Headers.HttpHeaderValueCollection`1">
      <summary>ヘッダー値のコレクションを表します。</summary>
      <typeparam name="T">ヘッダー コレクションの型。</typeparam>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.Add(`0)">
      <summary>
        <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" /> にエントリを追加します。</summary>
      <param name="item">ヘッダー コレクションに追加する項目。</param>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.Clear">
      <summary>
        <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" /> からすべてのエントリを削除します。</summary>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.Contains(`0)">
      <summary>
        <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" /> に項目が格納されているかどうかを確認します。</summary>
      <param name="item">ヘッダー コレクションから検索する項目。</param>
      <returns>
        <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" /> インスタンスにエントリが含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.CopyTo(`0[],System.Int32)">
      <summary>
        <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" /> 全体を、互換性のある 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まる部分に行います。</summary>
      <param name="array">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.Net.Http.Headers.HttpHeaderValueCollection`1.Count">
      <summary>
        <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" /> 内のヘッダーの数を取得します。</summary>
      <returns>このコレクション内のヘッダーの数</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.GetEnumerator">
      <summary>
        <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" /> を反復処理する列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" /> インスタンスの列挙子。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpHeaderValueCollection`1.IsReadOnly">
      <summary>
        <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" /> インスタンスが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" /> インスタンスが読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.ParseAdd(System.String)">
      <summary>
        <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" /> にエントリを解析して追加します。</summary>
      <param name="input">追加するエントリ。</param>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.Remove(`0)">
      <summary>指定した項目を <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" /> から削除します。</summary>
      <param name="item">削除する項目。</param>
      <returns>
        <paramref name="item" /> が <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" /> インスタンスから削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" /></returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
        <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" /> を反復処理する列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" /> インスタンスの列挙子。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.ToString">
      <summary>現在の <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" /> オブジェクトを表す文字列を返します。 オブジェクト。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.HttpHeaderValueCollection`1.TryParseAdd(System.String)">
      <summary>入力を解析して <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" /> に追加できるかどうか決定します。</summary>
      <param name="input">検証するエントリ。</param>
      <returns>
        <paramref name="input" /> が解析され <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" /> インスタンスに追加できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Net.Http.Headers.HttpRequestHeaders">
      <summary>RFC 2616 で定義されている要求ヘッダーのコレクションを表します。</summary>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Accept">
      <summary>HTTP 要求の <see langword="Accept" /> ヘッダーの値を取得します。</summary>
      <returns>HTTP 要求の <see langword="Accept" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.AcceptCharset">
      <summary>HTTP 要求の <see langword="Accept-Charset" /> ヘッダーの値を取得します。</summary>
      <returns>HTTP 要求の <see langword="Accept-Charset" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.AcceptEncoding">
      <summary>HTTP 要求の <see langword="Accept-Encoding" /> ヘッダーの値を取得します。</summary>
      <returns>HTTP 要求の <see langword="Accept-Encoding" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.AcceptLanguage">
      <summary>HTTP 要求の <see langword="Accept-Language" /> ヘッダーの値を取得します。</summary>
      <returns>HTTP 要求の <see langword="Accept-Language" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Authorization">
      <summary>HTTP 要求の <see langword="Authorization" /> ヘッダーの値を取得または設定します。</summary>
      <returns>HTTP 要求の <see langword="Authorization" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.CacheControl">
      <summary>HTTP 要求の <see langword="Cache-Control" /> ヘッダーの値を取得または設定します。</summary>
      <returns>HTTP 要求の <see langword="Cache-Control" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Connection">
      <summary>HTTP 要求の <see langword="Connection" /> ヘッダーの値を取得します。</summary>
      <returns>HTTP 要求の <see langword="Connection" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.ConnectionClose">
      <summary>HTTP 要求の <see langword="Connection" /> ヘッダーに Close が含まれているかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see langword="Connection" /> ヘッダーに Close が含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Date">
      <summary>HTTP 要求の <see langword="Date" /> ヘッダーの値を取得または設定します。</summary>
      <returns>HTTP 要求の <see langword="Date" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Expect">
      <summary>HTTP 要求の <see langword="Expect" /> ヘッダーの値を取得します。</summary>
      <returns>HTTP 要求の <see langword="Expect" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.ExpectContinue">
      <summary>HTTP 要求の <see langword="Expect" /> ヘッダーに Continue が含まれているかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see langword="Expect" /> ヘッダーに Continue が含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.From">
      <summary>HTTP 要求の <see langword="From" /> ヘッダーの値を取得または設定します。</summary>
      <returns>HTTP 要求の <see langword="From" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Host">
      <summary>HTTP 要求の <see langword="Host" /> ヘッダーの値を取得または設定します。</summary>
      <returns>HTTP 要求の <see langword="Host" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.IfMatch">
      <summary>HTTP 要求の <see langword="If-Match" /> ヘッダーの値を取得します。</summary>
      <returns>
        <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" /> を返します。  
HTTP 要求の <see langword="If-Match" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.IfModifiedSince">
      <summary>HTTP 要求の <see langword="If-Modified-Since" /> ヘッダーの値を取得または設定します。</summary>
      <returns>HTTP 要求の <see langword="If-Modified-Since" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.IfNoneMatch">
      <summary>HTTP 要求の <see langword="If-None-Match" /> ヘッダーの値を取得します。</summary>
      <returns>HTTP 要求の <see langword="If-None-Match" /> ヘッダーの値を取得します。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.IfRange">
      <summary>HTTP 要求の <see langword="If-Range" /> ヘッダーの値を取得または設定します。</summary>
      <returns>HTTP 要求の <see langword="If-Range" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.IfUnmodifiedSince">
      <summary>HTTP 要求の <see langword="If-Unmodified-Since" /> ヘッダーの値を取得または設定します。</summary>
      <returns>HTTP 要求の <see langword="If-Unmodified-Since" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.MaxForwards">
      <summary>HTTP 要求の <see langword="Max-Forwards" /> ヘッダーの値を取得または設定します。</summary>
      <returns>HTTP 要求の <see langword="Max-Forwards" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Pragma">
      <summary>HTTP 要求の <see langword="Pragma" /> ヘッダーの値を取得します。</summary>
      <returns>HTTP 要求の <see langword="Pragma" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.ProxyAuthorization">
      <summary>HTTP 要求の <see langword="Proxy-Authorization" /> ヘッダーの値を取得または設定します。</summary>
      <returns>HTTP 要求の <see langword="Proxy-Authorization" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Range">
      <summary>HTTP 要求の <see langword="Range" /> ヘッダーの値を取得または設定します。</summary>
      <returns>HTTP 要求の <see langword="Range" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Referrer">
      <summary>HTTP 要求の <see langword="Referer" /> ヘッダーの値を取得または設定します。</summary>
      <returns>HTTP 要求の <see langword="Referer" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.TE">
      <summary>HTTP 要求の <see langword="TE" /> ヘッダーの値を取得します。</summary>
      <returns>HTTP 要求の <see langword="TE" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Trailer">
      <summary>HTTP 要求の <see langword="Trailer" /> ヘッダーの値を取得します。</summary>
      <returns>HTTP 要求の <see langword="Trailer" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.TransferEncoding">
      <summary>HTTP 要求の <see langword="Transfer-Encoding" /> ヘッダーの値を取得します。</summary>
      <returns>HTTP 要求の <see langword="Transfer-Encoding" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.TransferEncodingChunked">
      <summary>HTTP 要求の <see langword="Transfer-Encoding" /> ヘッダーにチャンクが含まれているかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see langword="Transfer-Encoding" /> ヘッダーにチャンクが含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Upgrade">
      <summary>HTTP 要求の <see langword="Upgrade" /> ヘッダーの値を取得します。</summary>
      <returns>HTTP 要求の <see langword="Upgrade" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.UserAgent">
      <summary>HTTP 要求の <see langword="User-Agent" /> ヘッダーの値を取得します。</summary>
      <returns>HTTP 要求の <see langword="User-Agent" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Via">
      <summary>HTTP 要求の <see langword="Via" /> ヘッダーの値を取得します。</summary>
      <returns>HTTP 要求の <see langword="Via" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpRequestHeaders.Warning">
      <summary>HTTP 要求の <see langword="Warning" /> ヘッダーの値を取得します。</summary>
      <returns>HTTP 要求の <see langword="Warning" /> ヘッダーの値。</returns>
    </member>
    <member name="T:System.Net.Http.Headers.HttpResponseHeaders">
      <summary>RFC 2616 で定義されている応答ヘッダーのコレクションを表します。</summary>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.AcceptRanges">
      <summary>HTTP 応答の <see langword="Accept-Ranges" /> ヘッダーの値を取得します。</summary>
      <returns>HTTP 応答の <see langword="Accept-Ranges" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Age">
      <summary>HTTP 応答の <see langword="Age" /> ヘッダーの値を取得または設定します。</summary>
      <returns>HTTP 応答の <see langword="Age" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.CacheControl">
      <summary>HTTP 応答の <see langword="Cache-Control" /> ヘッダーの値を取得または設定します。</summary>
      <returns>HTTP 応答の <see langword="Cache-Control" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Connection">
      <summary>HTTP 応答の <see langword="Connection" /> ヘッダーの値を取得します。</summary>
      <returns>HTTP 応答の <see langword="Connection" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.ConnectionClose">
      <summary>HTTP 応答の <see langword="Connection" /> ヘッダーに Close が含まれているかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see langword="true" /> ヘッダーに Close が含まれる場合は <see langword="Connection" /> 。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Date">
      <summary>HTTP 応答の <see langword="Date" /> ヘッダーの値を取得または設定します。</summary>
      <returns>HTTP 応答の <see langword="Date" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.ETag">
      <summary>HTTP 応答の <see langword="ETag" /> ヘッダーの値を取得または設定します。</summary>
      <returns>HTTP 応答の <see langword="ETag" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Location">
      <summary>HTTP 応答の <see langword="Location" /> ヘッダーの値を取得または設定します。</summary>
      <returns>HTTP 応答の <see langword="Location" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Pragma">
      <summary>HTTP 応答の <see langword="Pragma" /> ヘッダーの値を取得します。</summary>
      <returns>
        <see cref="T:System.Net.Http.Headers.HttpHeaderValueCollection`1" /> を返します。  
HTTP 応答の <see langword="Pragma" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.ProxyAuthenticate">
      <summary>HTTP 応答の <see langword="Proxy-Authenticate" /> ヘッダーの値を取得します。</summary>
      <returns>HTTP 応答の <see langword="Proxy-Authenticate" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.RetryAfter">
      <summary>HTTP 応答の <see langword="Retry-After" /> ヘッダーの値を取得または設定します。</summary>
      <returns>HTTP 応答の <see langword="Retry-After" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Server">
      <summary>HTTP 応答の <see langword="Server" /> ヘッダーの値を取得します。</summary>
      <returns>HTTP 応答の <see langword="Server" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Trailer">
      <summary>HTTP 応答の <see langword="Trailer" /> ヘッダーの値を取得します。</summary>
      <returns>HTTP 応答の <see langword="Trailer" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.TransferEncoding">
      <summary>HTTP 応答の <see langword="Transfer-Encoding" /> ヘッダーの値を取得します。</summary>
      <returns>HTTP 応答の <see langword="Transfer-Encoding" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.TransferEncodingChunked">
      <summary>HTTP 応答の <see langword="Transfer-Encoding" /> ヘッダーにチャンクが含まれているかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see langword="Transfer-Encoding" /> ヘッダーにチャンクが含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Upgrade">
      <summary>HTTP 応答の <see langword="Upgrade" /> ヘッダーの値を取得します。</summary>
      <returns>HTTP 応答の <see langword="Upgrade" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Vary">
      <summary>HTTP 応答の <see langword="Vary" /> ヘッダーの値を取得します。</summary>
      <returns>HTTP 応答の <see langword="Vary" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Via">
      <summary>HTTP 応答の <see langword="Via" /> ヘッダーの値を取得します。</summary>
      <returns>HTTP 応答の <see langword="Via" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.Warning">
      <summary>HTTP 応答の <see langword="Warning" /> ヘッダーの値を取得します。</summary>
      <returns>HTTP 応答の <see langword="Warning" /> ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.HttpResponseHeaders.WwwAuthenticate">
      <summary>HTTP 応答の <see langword="WWW-Authenticate" /> ヘッダーの値を取得します。</summary>
      <returns>HTTP 応答の <see langword="WWW-Authenticate" /> ヘッダーの値。</returns>
    </member>
    <member name="T:System.Net.Http.Headers.MediaTypeHeaderValue">
      <summary>RFC 2616 に定義され、コンテンツ タイプのヘッダーに使用されるメディア タイプを表します。</summary>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeHeaderValue.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>
        <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="source">新しいインスタンスを初期化するために使用する <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> オブジェクト。</param>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeHeaderValue.#ctor(System.String)">
      <summary>
        <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="mediaType">新しいインスタンスを初期化する文字列を表すソースです。</param>
    </member>
    <member name="P:System.Net.Http.Headers.MediaTypeHeaderValue.CharSet">
      <summary>文字セットを取得または設定します。</summary>
      <returns>文字セット。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeHeaderValue.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> が、現在の <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> オブジェクトと等しいかどうかを判断します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>指定した <see cref="T:System.Object" /> が現在のオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeHeaderValue.GetHashCode">
      <summary>
        <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> オブジェクトのハッシュ関数として機能します。</summary>
      <returns>現在のオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.MediaTypeHeaderValue.MediaType">
      <summary>media-type のヘッダー値を取得または設定します。</summary>
      <returns>media-type のヘッダー値。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.MediaTypeHeaderValue.Parameters">
      <summary>media-type ヘッダー値のパラメーターを取得または設定します。</summary>
      <returns>media-type ヘッダー値のパラメーター。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeHeaderValue.Parse(System.String)">
      <summary>文字列を <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> インスタンスに変換します。</summary>
      <param name="input">メディア種類のヘッダー値の情報を表す文字列。</param>
      <returns>
        <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> のインスタンス。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は <see langword="null" /> の参照です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> は、有効なメディアの種類のヘッダー値の情報ではありません。</exception>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeHeaderValue.System#ICloneable#Clone">
      <summary>現在の <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> インスタンスのコピーである新しいオブジェクトを作成します。</summary>
      <returns>現在のインスタンスのコピー。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeHeaderValue.ToString">
      <summary>現在の <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> オブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeHeaderValue.TryParse(System.String,System.Net.Http.Headers.MediaTypeHeaderValue@)">
      <summary>文字列が有効な <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> 情報かどうかを判断します。</summary>
      <param name="input">検証対象の文字列。</param>
      <param name="parsedValue">文字列の <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> バージョン。</param>
      <returns>
        <paramref name="input" /> が有効な <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> 情報の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue">
      <summary>コンテンツ タイプ ヘッダーで使用される追加の品質ファクターとメディア タイプを表します。</summary>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.#ctor(System.String)">
      <summary>
        <see cref="T:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="mediaType">新しいインスタンスを初期化するための文字列として表現された <see cref="T:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue" />。</param>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.#ctor(System.String,System.Double)">
      <summary>
        <see cref="T:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="mediaType">新しいインスタンスを初期化するための文字列として表現された <see cref="T:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue" />。</param>
      <param name="quality">このヘッダー値に関連付けられた品質です。</param>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse(System.String)">
      <summary>文字列を <see cref="T:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue" /> インスタンスに変換します。</summary>
      <param name="input">品質ヘッダー値の情報を含むメディア種類を表す文字列。</param>
      <returns>
        <see cref="T:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue" /> のインスタンス。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は <see langword="null" /> の参照です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> は、品質のヘッダー値の情報を含む、有効なメディアの種類ではありません。</exception>
    </member>
    <member name="P:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Quality">
      <summary>
        <see cref="T:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue" /> の品質の値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue" /> オブジェクトの品質の値。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.System#ICloneable#Clone">
      <summary>現在の <see cref="T:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue" /> インスタンスのコピーである新しいオブジェクトを作成します。</summary>
      <returns>現在のインスタンスのコピー。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.TryParse(System.String,System.Net.Http.Headers.MediaTypeWithQualityHeaderValue@)">
      <summary>文字列が有効な <see cref="T:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue" /> 情報かどうかを判断します。</summary>
      <param name="input">検証対象の文字列。</param>
      <param name="parsedValue">文字列の <see cref="T:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue" /> バージョン。</param>
      <returns>
        <paramref name="input" /> が有効な <see cref="T:System.Net.Http.Headers.MediaTypeWithQualityHeaderValue" /> 情報の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Net.Http.Headers.NameValueHeaderValue">
      <summary>RFC 2616 で定義され、さまざまなヘッダーで使用される名前と値のペアを表します。</summary>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueHeaderValue.#ctor(System.Net.Http.Headers.NameValueHeaderValue)">
      <summary>
        <see cref="T:System.Net.Http.Headers.NameValueHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="source">新しいインスタンスを初期化するために使用する <see cref="T:System.Net.Http.Headers.NameValueHeaderValue" /> オブジェクト。</param>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueHeaderValue.#ctor(System.String)">
      <summary>
        <see cref="T:System.Net.Http.Headers.NameValueHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">ヘッダー名。</param>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueHeaderValue.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Net.Http.Headers.NameValueHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">ヘッダー名。</param>
      <param name="value">ヘッダーの値。</param>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueHeaderValue.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> が、現在の <see cref="T:System.Net.Http.Headers.NameValueHeaderValue" /> オブジェクトと等しいかどうかを判断します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>指定した <see cref="T:System.Object" /> が現在のオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueHeaderValue.GetHashCode">
      <summary>
        <see cref="T:System.Net.Http.Headers.NameValueHeaderValue" /> オブジェクトのハッシュ関数として機能します。</summary>
      <returns>現在のオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.NameValueHeaderValue.Name">
      <summary>ヘッダー名を取得します。</summary>
      <returns>ヘッダー名。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueHeaderValue.Parse(System.String)">
      <summary>文字列を <see cref="T:System.Net.Http.Headers.NameValueHeaderValue" /> インスタンスに変換します。</summary>
      <param name="input">名前の値のヘッダー値の情報を表す文字列。</param>
      <returns>
        <see cref="T:System.Net.Http.Headers.NameValueHeaderValue" /> のインスタンス。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は <see langword="null" /> の参照です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> は有効な名前の値のヘッダー値の情報ではありません。</exception>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueHeaderValue.System#ICloneable#Clone">
      <summary>現在の <see cref="T:System.Net.Http.Headers.NameValueHeaderValue" /> インスタンスのコピーである新しいオブジェクトを作成します。</summary>
      <returns>現在のインスタンスのコピー。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueHeaderValue.ToString">
      <summary>現在の <see cref="T:System.Net.Http.Headers.NameValueHeaderValue" /> オブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueHeaderValue.TryParse(System.String,System.Net.Http.Headers.NameValueHeaderValue@)">
      <summary>文字列が有効な <see cref="T:System.Net.Http.Headers.NameValueHeaderValue" /> 情報かどうかを判断します。</summary>
      <param name="input">検証対象の文字列。</param>
      <param name="parsedValue">文字列の <see cref="T:System.Net.Http.Headers.NameValueHeaderValue" /> バージョン。</param>
      <returns>
        <paramref name="input" /> が有効な <see cref="T:System.Net.Http.Headers.NameValueHeaderValue" /> 情報の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.NameValueHeaderValue.Value">
      <summary>ヘッダーの値を取得します。</summary>
      <returns>ヘッダーの値。</returns>
    </member>
    <member name="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue">
      <summary>RFC 2616 で定義され、さまざまなヘッダーで使用されるパラメーター付きの名前と値のペアを表します。</summary>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.#ctor(System.Net.Http.Headers.NameValueWithParametersHeaderValue)">
      <summary>
        <see cref="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="source">新しいインスタンスを初期化するために使用する <see cref="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue" /> オブジェクト。</param>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.#ctor(System.String)">
      <summary>
        <see cref="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">ヘッダー名。</param>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">ヘッダー名。</param>
      <param name="value">ヘッダーの値。</param>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> が、現在の <see cref="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue" /> オブジェクトと等しいかどうかを判断します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>指定した <see cref="T:System.Object" /> が現在のオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.GetHashCode">
      <summary>
        <see cref="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue" /> オブジェクトのハッシュ関数として機能します。</summary>
      <returns>現在のオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.NameValueWithParametersHeaderValue.Parameters">
      <summary>
        <see cref="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue" /> オブジェクトからパラメーターを取得します。</summary>
      <returns>パラメーターを格納しているコレクション。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.Parse(System.String)">
      <summary>文字列を <see cref="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue" /> インスタンスに変換します。</summary>
      <param name="input">パラメーター ヘッダー値の情報を含む、名前の値を表す文字列。</param>
      <returns>
        <see cref="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue" /> のインスタンス。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は <see langword="null" /> の参照です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> はパラメーターのヘッダー値の情報を含む有効な名前の値ではありません。</exception>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.System#ICloneable#Clone">
      <summary>現在の <see cref="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue" /> インスタンスのコピーである新しいオブジェクトを作成します。</summary>
      <returns>現在のインスタンスのコピー。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.ToString">
      <summary>現在の <see cref="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue" /> オブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.NameValueWithParametersHeaderValue.TryParse(System.String,System.Net.Http.Headers.NameValueWithParametersHeaderValue@)">
      <summary>文字列が有効な <see cref="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue" /> 情報かどうかを判断します。</summary>
      <param name="input">検証対象の文字列。</param>
      <param name="parsedValue">文字列の <see cref="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue" /> バージョン。</param>
      <returns>
        <paramref name="input" /> が有効な <see cref="T:System.Net.Http.Headers.NameValueWithParametersHeaderValue" /> 情報の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Net.Http.Headers.ProductHeaderValue">
      <summary>ユーザー エージェント ヘッダー内の製品トークン値を表します。</summary>
    </member>
    <member name="M:System.Net.Http.Headers.ProductHeaderValue.#ctor(System.String)">
      <summary>
        <see cref="T:System.Net.Http.Headers.ProductHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">製品名。</param>
    </member>
    <member name="M:System.Net.Http.Headers.ProductHeaderValue.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Net.Http.Headers.ProductHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">製品名の値。</param>
      <param name="version">製品バージョンの値。</param>
    </member>
    <member name="M:System.Net.Http.Headers.ProductHeaderValue.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> が、現在の <see cref="T:System.Net.Http.Headers.ProductHeaderValue" /> オブジェクトと等しいかどうかを判断します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>指定した <see cref="T:System.Object" /> が現在のオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductHeaderValue.GetHashCode">
      <summary>
        <see cref="T:System.Net.Http.Headers.ProductHeaderValue" /> オブジェクトのハッシュ関数として機能します。</summary>
      <returns>現在のオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ProductHeaderValue.Name">
      <summary>製品トークンの名前を取得します。</summary>
      <returns>製品トークンの名前。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductHeaderValue.Parse(System.String)">
      <summary>文字列を <see cref="T:System.Net.Http.Headers.ProductHeaderValue" /> インスタンスに変換します。</summary>
      <param name="input">製品のヘッダー値の情報を表す文字列。</param>
      <returns>
        <see cref="T:System.Net.Http.Headers.ProductHeaderValue" /> のインスタンス。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductHeaderValue.System#ICloneable#Clone">
      <summary>現在の <see cref="T:System.Net.Http.Headers.ProductHeaderValue" /> インスタンスのコピーである新しいオブジェクトを作成します。</summary>
      <returns>現在のインスタンスのコピー。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductHeaderValue.ToString">
      <summary>現在の <see cref="T:System.Net.Http.Headers.ProductHeaderValue" /> オブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductHeaderValue.TryParse(System.String,System.Net.Http.Headers.ProductHeaderValue@)">
      <summary>文字列が有効な <see cref="T:System.Net.Http.Headers.ProductHeaderValue" /> 情報かどうかを判断します。</summary>
      <param name="input">検証対象の文字列。</param>
      <param name="parsedValue">文字列の <see cref="T:System.Net.Http.Headers.ProductHeaderValue" /> バージョン。</param>
      <returns>
        <paramref name="input" /> が有効な <see cref="T:System.Net.Http.Headers.ProductHeaderValue" /> 情報の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ProductHeaderValue.Version">
      <summary>製品トークンのバージョンを取得します。</summary>
      <returns>製品トークンのバージョン。</returns>
    </member>
    <member name="T:System.Net.Http.Headers.ProductInfoHeaderValue">
      <summary>User-Agent ヘッダー内の製品またはコメントのいずれかになる値を表します。</summary>
    </member>
    <member name="M:System.Net.Http.Headers.ProductInfoHeaderValue.#ctor(System.Net.Http.Headers.ProductHeaderValue)">
      <summary>
        <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="product">新しいインスタンスを初期化するために使用する <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" /> オブジェクト。</param>
    </member>
    <member name="M:System.Net.Http.Headers.ProductInfoHeaderValue.#ctor(System.String)">
      <summary>
        <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="comment">コメント値。</param>
    </member>
    <member name="M:System.Net.Http.Headers.ProductInfoHeaderValue.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="productName">製品名の値。</param>
      <param name="productVersion">製品バージョンの値。</param>
    </member>
    <member name="P:System.Net.Http.Headers.ProductInfoHeaderValue.Comment">
      <summary>
        <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" /> オブジェクトからコメントを取得します。</summary>
      <returns>この <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" /> のコメントの値。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductInfoHeaderValue.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> が、現在の <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" /> オブジェクトと等しいかどうかを判断します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>指定した <see cref="T:System.Object" /> が現在のオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductInfoHeaderValue.GetHashCode">
      <summary>
        <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" /> オブジェクトのハッシュ関数として機能します。</summary>
      <returns>現在のオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductInfoHeaderValue.Parse(System.String)">
      <summary>文字列を <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" /> インスタンスに変換します。</summary>
      <param name="input">情報のヘッダー値の情報を表す文字列。</param>
      <returns>
        <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" /> のインスタンス。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は <see langword="null" /> の参照です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> は、有効な製品情報のヘッダー値の情報ではありません。</exception>
    </member>
    <member name="P:System.Net.Http.Headers.ProductInfoHeaderValue.Product">
      <summary>
        <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" /> オブジェクトから製品を取得します。</summary>
      <returns>この <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" /> からの製品の値。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductInfoHeaderValue.System#ICloneable#Clone">
      <summary>現在の <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" /> インスタンスのコピーである新しいオブジェクトを作成します。</summary>
      <returns>現在のインスタンスのコピー。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductInfoHeaderValue.ToString">
      <summary>現在の <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" /> オブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ProductInfoHeaderValue.TryParse(System.String,System.Net.Http.Headers.ProductInfoHeaderValue@)">
      <summary>文字列が有効な <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" /> 情報かどうかを判断します。</summary>
      <param name="input">検証対象の文字列。</param>
      <param name="parsedValue">文字列の <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" /> バージョン。</param>
      <returns>
        <paramref name="input" /> が有効な <see cref="T:System.Net.Http.Headers.ProductInfoHeaderValue" /> 情報の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Net.Http.Headers.RangeConditionHeaderValue">
      <summary>日付/時刻またはエンティティ タグ値のいずれかとなる If-Range ヘッダー値を表します。</summary>
    </member>
    <member name="M:System.Net.Http.Headers.RangeConditionHeaderValue.#ctor(System.DateTimeOffset)">
      <summary>
        <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="date">新しいインスタンスを初期化するために使用される日付の値。</param>
    </member>
    <member name="M:System.Net.Http.Headers.RangeConditionHeaderValue.#ctor(System.Net.Http.Headers.EntityTagHeaderValue)">
      <summary>
        <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="entityTag">新しいインスタンスを初期化するために使用する <see cref="T:System.Net.Http.Headers.EntityTagHeaderValue" /> オブジェクト。</param>
    </member>
    <member name="M:System.Net.Http.Headers.RangeConditionHeaderValue.#ctor(System.String)">
      <summary>
        <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="entityTag">新しいインスタンスを初期化するために使用される文字列として表現されたエンティティ タグ。</param>
    </member>
    <member name="P:System.Net.Http.Headers.RangeConditionHeaderValue.Date">
      <summary>
        <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" /> オブジェクトから日付を取得します。</summary>
      <returns>
        <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" /> オブジェクトからの日付。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.RangeConditionHeaderValue.EntityTag">
      <summary>
        <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" /> オブジェクトからエンティティ タグを取得します。</summary>
      <returns>
        <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" /> オブジェクトからのエンティティ タグ。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeConditionHeaderValue.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> が、現在の <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" /> オブジェクトと等しいかどうかを判断します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>指定した <see cref="T:System.Object" /> が現在のオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeConditionHeaderValue.GetHashCode">
      <summary>
        <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" /> オブジェクトのハッシュ関数として機能します。</summary>
      <returns>現在のオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeConditionHeaderValue.Parse(System.String)">
      <summary>文字列を <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" /> インスタンスに変換します。</summary>
      <param name="input">条件ヘッダー値の情報を表す文字列。</param>
      <returns>
        <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" /> のインスタンス。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は <see langword="null" /> の参照です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" />は有効な範囲の条件ヘッダー値の情報ではありません。</exception>
    </member>
    <member name="M:System.Net.Http.Headers.RangeConditionHeaderValue.System#ICloneable#Clone">
      <summary>現在の <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" /> インスタンスのコピーである新しいオブジェクトを作成します。</summary>
      <returns>現在のインスタンスのコピー。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeConditionHeaderValue.ToString">
      <summary>現在の <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" /> オブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeConditionHeaderValue.TryParse(System.String,System.Net.Http.Headers.RangeConditionHeaderValue@)">
      <summary>文字列が有効な <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" /> 情報かどうかを判断します。</summary>
      <param name="input">検証対象の文字列。</param>
      <param name="parsedValue">文字列の <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" /> バージョン。</param>
      <returns>
        <paramref name="input" /> が有効な <see cref="T:System.Net.Http.Headers.RangeConditionHeaderValue" /> 情報の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Net.Http.Headers.RangeHeaderValue">
      <summary>Range ヘッダー値を表します。</summary>
    </member>
    <member name="M:System.Net.Http.Headers.RangeHeaderValue.#ctor">
      <summary>
        <see cref="T:System.Net.Http.Headers.RangeHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Net.Http.Headers.RangeHeaderValue.#ctor(System.Nullable{System.Int64},System.Nullable{System.Int64})">
      <summary>バイト範囲を使用して、<see cref="T:System.Net.Http.Headers.RangeHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="from">データの送信を開始する位置。</param>
      <param name="to">データの送信を終了する位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="from" /> は <paramref name="to" /> より大きい  

または - 
<paramref name="from" /> または <paramref name="to" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Net.Http.Headers.RangeHeaderValue.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> が、現在の <see cref="T:System.Net.Http.Headers.RangeHeaderValue" /> オブジェクトと等しいかどうかを判断します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>指定した <see cref="T:System.Object" /> が現在のオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeHeaderValue.GetHashCode">
      <summary>
        <see cref="T:System.Net.Http.Headers.RangeHeaderValue" /> オブジェクトのハッシュ関数として機能します。</summary>
      <returns>現在のオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeHeaderValue.Parse(System.String)">
      <summary>文字列を <see cref="T:System.Net.Http.Headers.RangeHeaderValue" /> インスタンスに変換します。</summary>
      <param name="input">範囲ヘッダー値の情報を表す文字列。</param>
      <returns>
        <see cref="T:System.Net.Http.Headers.RangeHeaderValue" /> のインスタンス。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は <see langword="null" /> の参照です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> は有効な範囲のヘッダー値の情報ではありません。</exception>
    </member>
    <member name="P:System.Net.Http.Headers.RangeHeaderValue.Ranges">
      <summary>指定された範囲を <see cref="T:System.Net.Http.Headers.RangeHeaderValue" /> オブジェクトから取得します。</summary>
      <returns>
        <see cref="T:System.Net.Http.Headers.RangeHeaderValue" /> オブジェクトからの範囲。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeHeaderValue.System#ICloneable#Clone">
      <summary>現在の <see cref="T:System.Net.Http.Headers.RangeHeaderValue" /> インスタンスのコピーである新しいオブジェクトを作成します。</summary>
      <returns>現在のインスタンスのコピー。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeHeaderValue.ToString">
      <summary>現在の <see cref="T:System.Net.Http.Headers.RangeHeaderValue" /> オブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeHeaderValue.TryParse(System.String,System.Net.Http.Headers.RangeHeaderValue@)">
      <summary>文字列が有効な <see cref="T:System.Net.Http.Headers.RangeHeaderValue" /> 情報かどうかを判断します。</summary>
      <param name="input">検証対象の文字列。</param>
      <param name="parsedValue">文字列の <see cref="T:System.Net.Http.Headers.RangeHeaderValue" /> バージョン。</param>
      <returns>
        <paramref name="input" /> が有効な <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" /> 情報の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.RangeHeaderValue.Unit">
      <summary>
        <see cref="T:System.Net.Http.Headers.RangeHeaderValue" /> オブジェクトから単位を取得します。</summary>
      <returns>
        <see cref="T:System.Net.Http.Headers.RangeHeaderValue" /> オブジェクトからの単位。</returns>
    </member>
    <member name="T:System.Net.Http.Headers.RangeItemHeaderValue">
      <summary>バイト範囲の Range ヘッダー値を表します。</summary>
    </member>
    <member name="M:System.Net.Http.Headers.RangeItemHeaderValue.#ctor(System.Nullable{System.Int64},System.Nullable{System.Int64})">
      <summary>
        <see cref="T:System.Net.Http.Headers.RangeItemHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="from">データの送信を開始する位置。</param>
      <param name="to">データの送信を終了する位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="from" /> は <paramref name="to" /> より大きい  

または - 
<paramref name="from" /> または <paramref name="to" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Net.Http.Headers.RangeItemHeaderValue.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> が、現在の <see cref="T:System.Net.Http.Headers.RangeItemHeaderValue" /> オブジェクトと等しいかどうかを判断します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>指定した <see cref="T:System.Object" /> が現在のオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.RangeItemHeaderValue.From">
      <summary>データの送信を開始する位置を取得します。</summary>
      <returns>データの送信を開始する位置。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeItemHeaderValue.GetHashCode">
      <summary>
        <see cref="T:System.Net.Http.Headers.RangeItemHeaderValue" /> オブジェクトのハッシュ関数として機能します。</summary>
      <returns>現在のオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeItemHeaderValue.System#ICloneable#Clone">
      <summary>現在の <see cref="T:System.Net.Http.Headers.RangeItemHeaderValue" /> インスタンスのコピーである新しいオブジェクトを作成します。</summary>
      <returns>現在のインスタンスのコピー。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.RangeItemHeaderValue.To">
      <summary>データの送信を終了する位置を取得します。</summary>
      <returns>データの送信を終了する位置。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RangeItemHeaderValue.ToString">
      <summary>現在の <see cref="T:System.Net.Http.Headers.RangeItemHeaderValue" /> オブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Net.Http.Headers.RetryConditionHeaderValue">
      <summary>日付/時刻または期間値のいずれかとなる Retry-After ヘッダー値を表します。</summary>
    </member>
    <member name="M:System.Net.Http.Headers.RetryConditionHeaderValue.#ctor(System.DateTimeOffset)">
      <summary>
        <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="date">新しいインスタンスを初期化するために使用する日付と時刻のオフセット。</param>
    </member>
    <member name="M:System.Net.Http.Headers.RetryConditionHeaderValue.#ctor(System.TimeSpan)">
      <summary>
        <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="delta">新しいインスタンスを初期化するために使用される、秒単位の差分です。</param>
    </member>
    <member name="P:System.Net.Http.Headers.RetryConditionHeaderValue.Date">
      <summary>
        <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" /> オブジェクトから日付と時刻のオフセットを取得します。</summary>
      <returns>
        <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" /> オブジェクトからの日付と時刻のオフセット。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.RetryConditionHeaderValue.Delta">
      <summary>
        <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" /> オブジェクトから秒単位のデルタを取得します。</summary>
      <returns>
        <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" /> オブジェクトからの秒単位のデルタ。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RetryConditionHeaderValue.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> が、現在の <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" /> オブジェクトと等しいかどうかを判断します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>指定した <see cref="T:System.Object" /> が現在のオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RetryConditionHeaderValue.GetHashCode">
      <summary>
        <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" /> オブジェクトのハッシュ関数として機能します。</summary>
      <returns>現在のオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RetryConditionHeaderValue.Parse(System.String)">
      <summary>文字列を <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" /> インスタンスに変換します。</summary>
      <param name="input">再試行条件ヘッダー値の情報を表す文字列。</param>
      <returns>
        <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" /> のインスタンス。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は <see langword="null" /> の参照です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> は有効な再試行の条件ヘッダー値の情報ではありません。</exception>
    </member>
    <member name="M:System.Net.Http.Headers.RetryConditionHeaderValue.System#ICloneable#Clone">
      <summary>現在の <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" /> インスタンスのコピーである新しいオブジェクトを作成します。</summary>
      <returns>現在のインスタンスのコピー。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RetryConditionHeaderValue.ToString">
      <summary>現在の <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" /> オブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.RetryConditionHeaderValue.TryParse(System.String,System.Net.Http.Headers.RetryConditionHeaderValue@)">
      <summary>文字列が有効な <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" /> 情報かどうかを判断します。</summary>
      <param name="input">検証対象の文字列。</param>
      <param name="parsedValue">文字列の <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" /> バージョン。</param>
      <returns>
        <paramref name="input" /> が有効な <see cref="T:System.Net.Http.Headers.RetryConditionHeaderValue" /> 情報の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Net.Http.Headers.StringWithQualityHeaderValue">
      <summary>オプションの品質と文字列ヘッダー値を表します。</summary>
    </member>
    <member name="M:System.Net.Http.Headers.StringWithQualityHeaderValue.#ctor(System.String)">
      <summary>
        <see cref="T:System.Net.Http.Headers.StringWithQualityHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">新しいインスタンスを初期化するために使用する文字列。</param>
    </member>
    <member name="M:System.Net.Http.Headers.StringWithQualityHeaderValue.#ctor(System.String,System.Double)">
      <summary>
        <see cref="T:System.Net.Http.Headers.StringWithQualityHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">新しいインスタンスを初期化するために使用する文字列。</param>
      <param name="quality">新しいインスタンスを初期化するために使用される品質要素。</param>
    </member>
    <member name="M:System.Net.Http.Headers.StringWithQualityHeaderValue.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在の <see cref="T:System.Net.Http.Headers.StringWithQualityHeaderValue" /> オブジェクトと等しいかどうかを判断します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>指定した <see cref="T:System.Object" /> が現在のオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.StringWithQualityHeaderValue.GetHashCode">
      <summary>
        <see cref="T:System.Net.Http.Headers.StringWithQualityHeaderValue" /> オブジェクトのハッシュ関数として機能します。</summary>
      <returns>現在のオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.StringWithQualityHeaderValue.Parse(System.String)">
      <summary>文字列を <see cref="T:System.Net.Http.Headers.StringWithQualityHeaderValue" /> インスタンスに変換します。</summary>
      <param name="input">品質ヘッダー値の情報を表す文字列。</param>
      <returns>
        <see cref="T:System.Net.Http.Headers.StringWithQualityHeaderValue" /> のインスタンス。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は <see langword="null" /> の参照です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> は、品質のヘッダー値の情報を含む、有効な文字列ではありません。</exception>
    </member>
    <member name="P:System.Net.Http.Headers.StringWithQualityHeaderValue.Quality">
      <summary>
        <see cref="T:System.Net.Http.Headers.StringWithQualityHeaderValue" /> オブジェクトから品質要因を取得します。</summary>
      <returns>
        <see cref="T:System.Net.Http.Headers.StringWithQualityHeaderValue" /> オブジェクトからの品質要因。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.StringWithQualityHeaderValue.System#ICloneable#Clone">
      <summary>現在の <see cref="T:System.Net.Http.Headers.StringWithQualityHeaderValue" /> インスタンスのコピーである新しいオブジェクトを作成します。</summary>
      <returns>現在のインスタンスのコピー。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.StringWithQualityHeaderValue.ToString">
      <summary>現在の <see cref="T:System.Net.Http.Headers.StringWithQualityHeaderValue" /> オブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.StringWithQualityHeaderValue.TryParse(System.String,System.Net.Http.Headers.StringWithQualityHeaderValue@)">
      <summary>文字列が有効な <see cref="T:System.Net.Http.Headers.StringWithQualityHeaderValue" /> 情報かどうかを判断します。</summary>
      <param name="input">検証対象の文字列。</param>
      <param name="parsedValue">文字列の <see cref="T:System.Net.Http.Headers.StringWithQualityHeaderValue" /> バージョン。</param>
      <returns>
        <paramref name="input" /> が有効な <see cref="T:System.Net.Http.Headers.StringWithQualityHeaderValue" /> 情報の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.StringWithQualityHeaderValue.Value">
      <summary>
        <see cref="T:System.Net.Http.Headers.StringWithQualityHeaderValue" /> オブジェクトから文字列値を取得します。</summary>
      <returns>
        <see cref="T:System.Net.Http.Headers.StringWithQualityHeaderValue" /> オブジェクトからの文字列値。</returns>
    </member>
    <member name="T:System.Net.Http.Headers.TransferCodingHeaderValue">
      <summary>Accept-Encoding ヘッダー値を表します。</summary>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingHeaderValue.#ctor(System.Net.Http.Headers.TransferCodingHeaderValue)">
      <summary>
        <see cref="T:System.Net.Http.Headers.TransferCodingHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="source">新しいインスタンスを初期化するために使用する <see cref="T:System.Net.Http.Headers.TransferCodingHeaderValue" /> オブジェクト。</param>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingHeaderValue.#ctor(System.String)">
      <summary>
        <see cref="T:System.Net.Http.Headers.TransferCodingHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">新しいインスタンスを初期化するために使用する文字列。</param>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingHeaderValue.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在の <see cref="T:System.Net.Http.Headers.TransferCodingHeaderValue" /> オブジェクトと等しいかどうかを判断します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>指定した <see cref="T:System.Object" /> が現在のオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingHeaderValue.GetHashCode">
      <summary>
        <see cref="T:System.Net.Http.Headers.TransferCodingHeaderValue" /> オブジェクトのハッシュ関数として機能します。</summary>
      <returns>現在のオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.TransferCodingHeaderValue.Parameters">
      <summary>transfer-coding パラメーターを取得します。</summary>
      <returns>transfer-coding パラメーター。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingHeaderValue.Parse(System.String)">
      <summary>文字列を <see cref="T:System.Net.Http.Headers.TransferCodingHeaderValue" /> インスタンスに変換します。</summary>
      <param name="input">転送コーディング ヘッダー値の情報を表す文字列。</param>
      <returns>
        <see cref="T:System.Net.Http.Headers.TransferCodingHeaderValue" /> のインスタンス。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は <see langword="null" /> の参照です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> は、有効な transfer-coding ヘッダー値の情報ではありません。</exception>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingHeaderValue.System#ICloneable#Clone">
      <summary>現在の <see cref="T:System.Net.Http.Headers.TransferCodingHeaderValue" /> インスタンスのコピーである新しいオブジェクトを作成します。</summary>
      <returns>現在のインスタンスのコピー。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingHeaderValue.ToString">
      <summary>現在の <see cref="T:System.Net.Http.Headers.TransferCodingHeaderValue" /> オブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingHeaderValue.TryParse(System.String,System.Net.Http.Headers.TransferCodingHeaderValue@)">
      <summary>文字列が有効な <see cref="T:System.Net.Http.Headers.TransferCodingHeaderValue" /> 情報かどうかを判断します。</summary>
      <param name="input">検証対象の文字列。</param>
      <param name="parsedValue">文字列の <see cref="T:System.Net.Http.Headers.TransferCodingHeaderValue" /> バージョン。</param>
      <returns>
        <paramref name="input" /> が有効な <see cref="T:System.Net.Http.Headers.TransferCodingHeaderValue" /> 情報の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.TransferCodingHeaderValue.Value">
      <summary>transfer-coding 値を取得します。</summary>
      <returns>transfer-coding 値。</returns>
    </member>
    <member name="T:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue">
      <summary>オプションの品質要素と Accept-Encoding ヘッダー値を表します。</summary>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue.#ctor(System.String)">
      <summary>
        <see cref="T:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">新しいインスタンスを初期化するために使用する文字列。</param>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue.#ctor(System.String,System.Double)">
      <summary>
        <see cref="T:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">新しいインスタンスを初期化するために使用する文字列。</param>
      <param name="quality">品質係数の値。</param>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue.Parse(System.String)">
      <summary>文字列を <see cref="T:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue" /> インスタンスに変換します。</summary>
      <param name="input">転送コーディング値の情報を表す文字列。</param>
      <returns>
        <see cref="T:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue" /> のインスタンス。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は <see langword="null" /> の参照です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> は、品質ヘッダー値の情報を持つ有効な転送コーディングではありません。</exception>
    </member>
    <member name="P:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue.Quality">
      <summary>
        <see cref="T:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue" /> から品質要因を取得します。</summary>
      <returns>
        <see cref="T:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue" /> からの品質要因。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue.System#ICloneable#Clone">
      <summary>現在の <see cref="T:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue" /> インスタンスのコピーである新しいオブジェクトを作成します。</summary>
      <returns>現在のインスタンスのコピー。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue.TryParse(System.String,System.Net.Http.Headers.TransferCodingWithQualityHeaderValue@)">
      <summary>文字列が有効な <see cref="T:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue" /> 情報かどうかを判断します。</summary>
      <param name="input">検証対象の文字列。</param>
      <param name="parsedValue">文字列の <see cref="T:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue" /> バージョン。</param>
      <returns>
        <paramref name="input" /> が有効な <see cref="T:System.Net.Http.Headers.TransferCodingWithQualityHeaderValue" /> 情報の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Net.Http.Headers.ViaHeaderValue">
      <summary>Via ヘッダーの値を表します。</summary>
    </member>
    <member name="M:System.Net.Http.Headers.ViaHeaderValue.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Net.Http.Headers.ViaHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="protocolVersion">受信したプロトコルのプロトコル バージョン。</param>
      <param name="receivedBy">要求または応答を受信したホストとポート。</param>
    </member>
    <member name="M:System.Net.Http.Headers.ViaHeaderValue.#ctor(System.String,System.String,System.String)">
      <summary>
        <see cref="T:System.Net.Http.Headers.ViaHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="protocolVersion">受信したプロトコルのプロトコル バージョン。</param>
      <param name="receivedBy">要求または応答を受信したホストとポート。</param>
      <param name="protocolName">受信したプロトコルのプロトコル名。</param>
    </member>
    <member name="M:System.Net.Http.Headers.ViaHeaderValue.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
        <see cref="T:System.Net.Http.Headers.ViaHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="protocolVersion">受信したプロトコルのプロトコル バージョン。</param>
      <param name="receivedBy">要求または応答を受信したホストとポート。</param>
      <param name="protocolName">受信したプロトコルのプロトコル名。</param>
      <param name="comment">受信者のプロキシまたはゲートウェイのソフトウェアの識別に使用するコメント フィールド。</param>
    </member>
    <member name="P:System.Net.Http.Headers.ViaHeaderValue.Comment">
      <summary>受信者のプロキシまたはゲートウェイのソフトウェアの識別に使用するコメント フィールドを取得します。</summary>
      <returns>受信者のプロキシまたはゲートウェイのソフトウェアの識別に使用するコメント フィールド。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ViaHeaderValue.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> が、現在の <see cref="T:System.Net.Http.Headers.ViaHeaderValue" /> オブジェクトと等しいかどうかを判断します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>指定した <see cref="T:System.Object" /> が現在のオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ViaHeaderValue.GetHashCode">
      <summary>
        <see cref="T:System.Net.Http.Headers.ViaHeaderValue" /> オブジェクトのハッシュ関数として機能します。</summary>
      <returns>現在のオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ViaHeaderValue.Parse(System.String)">
      <summary>文字列を <see cref="T:System.Net.Http.Headers.ViaHeaderValue" /> インスタンスに変換します。</summary>
      <param name="input">Via ヘッダー値の情報を表す文字列。</param>
      <returns>
        <see cref="T:System.Net.Http.Headers.ViaHeaderValue" /> のインスタンス。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は <see langword="null" /> の参照です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> は有効な Via ヘッダー値の情報ではありません。</exception>
    </member>
    <member name="P:System.Net.Http.Headers.ViaHeaderValue.ProtocolName">
      <summary>受信したプロトコルのプロトコル名を取得します。</summary>
      <returns>プロトコル名。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ViaHeaderValue.ProtocolVersion">
      <summary>受信したプロトコルのプロトコル バージョンを取得します。</summary>
      <returns>プロトコルのバージョン。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.ViaHeaderValue.ReceivedBy">
      <summary>要求または応答を受信したホストとポートを取得します。</summary>
      <returns>要求または応答を受信したホストとポート。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ViaHeaderValue.System#ICloneable#Clone">
      <summary>現在の <see cref="T:System.Net.Http.Headers.ViaHeaderValue" /> インスタンスのコピーである新しいオブジェクトを作成します。</summary>
      <returns>現在のインスタンスのコピー。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ViaHeaderValue.ToString">
      <summary>現在の <see cref="T:System.Net.Http.Headers.ViaHeaderValue" /> オブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.ViaHeaderValue.TryParse(System.String,System.Net.Http.Headers.ViaHeaderValue@)">
      <summary>文字列が有効な <see cref="T:System.Net.Http.Headers.ViaHeaderValue" /> 情報かどうかを判断します。</summary>
      <param name="input">検証対象の文字列。</param>
      <param name="parsedValue">文字列の <see cref="T:System.Net.Http.Headers.ViaHeaderValue" /> バージョン。</param>
      <returns>
        <paramref name="input" /> が有効な <see cref="T:System.Net.Http.Headers.ViaHeaderValue" /> 情報の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Net.Http.Headers.WarningHeaderValue">
      <summary>警告ヘッダーで使用される警告値を表します。</summary>
    </member>
    <member name="M:System.Net.Http.Headers.WarningHeaderValue.#ctor(System.Int32,System.String,System.String)">
      <summary>
        <see cref="T:System.Net.Http.Headers.WarningHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="code">特定の警告コード。</param>
      <param name="agent">この警告をアタッチしたホスト。</param>
      <param name="text">警告テキストを含む、引用符で囲まれた文字列。</param>
    </member>
    <member name="M:System.Net.Http.Headers.WarningHeaderValue.#ctor(System.Int32,System.String,System.String,System.DateTimeOffset)">
      <summary>
        <see cref="T:System.Net.Http.Headers.WarningHeaderValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="code">特定の警告コード。</param>
      <param name="agent">この警告をアタッチしたホスト。</param>
      <param name="text">警告テキストを含む、引用符で囲まれた文字列。</param>
      <param name="date">警告の日付/時刻スタンプ。</param>
    </member>
    <member name="P:System.Net.Http.Headers.WarningHeaderValue.Agent">
      <summary>この警告をアタッチしたホストを取得します。</summary>
      <returns>この警告をアタッチしたホスト。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.WarningHeaderValue.Code">
      <summary>特定の警告コードを取得します。</summary>
      <returns>特定の警告コード。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.WarningHeaderValue.Date">
      <summary>警告の日付/時刻スタンプを取得します。</summary>
      <returns>警告の日付/時刻スタンプ。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.WarningHeaderValue.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> が、現在の <see cref="T:System.Net.Http.Headers.WarningHeaderValue" /> オブジェクトと等しいかどうかを判断します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>指定した <see cref="T:System.Object" /> が現在のオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.WarningHeaderValue.GetHashCode">
      <summary>
        <see cref="T:System.Net.Http.Headers.WarningHeaderValue" /> オブジェクトのハッシュ関数として機能します。</summary>
      <returns>現在のオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.WarningHeaderValue.Parse(System.String)">
      <summary>文字列を <see cref="T:System.Net.Http.Headers.WarningHeaderValue" /> インスタンスに変換します。</summary>
      <param name="input">認証ヘッダー値の情報を表す文字列。</param>
      <returns>
        <see cref="T:System.Net.Http.Headers.WarningHeaderValue" /> インスタンスを返します。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> は <see langword="null" /> の参照です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> は有効な認証ヘッダー値の情報ではありません。</exception>
    </member>
    <member name="M:System.Net.Http.Headers.WarningHeaderValue.System#ICloneable#Clone">
      <summary>現在の <see cref="T:System.Net.Http.Headers.WarningHeaderValue" /> インスタンスのコピーである新しいオブジェクトを作成します。</summary>
      <returns>現在のインスタンスのコピーを返します。</returns>
    </member>
    <member name="P:System.Net.Http.Headers.WarningHeaderValue.Text">
      <summary>警告テキストを含む、引用符で囲まれた文字列を取得します。</summary>
      <returns>警告テキストを含む、引用符で囲まれた文字列。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.WarningHeaderValue.ToString">
      <summary>現在の <see cref="T:System.Net.Http.Headers.WarningHeaderValue" /> オブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Net.Http.Headers.WarningHeaderValue.TryParse(System.String,System.Net.Http.Headers.WarningHeaderValue@)">
      <summary>文字列が有効な <see cref="T:System.Net.Http.Headers.WarningHeaderValue" /> 情報かどうかを判断します。</summary>
      <param name="input">検証対象の文字列。</param>
      <param name="parsedValue">文字列の <see cref="T:System.Net.Http.Headers.WarningHeaderValue" /> バージョン。</param>
      <returns>
        <paramref name="input" /> が有効な <see cref="T:System.Net.Http.Headers.WarningHeaderValue" /> 情報の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Net.Http.HttpClient">
      <summary>URI で識別されるリソースに HTTP 要求を送信し、そのリソースから HTTP 応答を受信するための基本クラスを提供します。</summary>
    </member>
    <member name="M:System.Net.Http.HttpClient.#ctor">
      <summary>このインスタンスが破棄されたときに破棄される <see cref="T:System.Net.Http.HttpClientHandler" /> を使用して、<see cref="T:System.Net.Http.HttpClient" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)">
      <summary>指定したハンドラーを使用して、<see cref="T:System.Net.Http.HttpClient" /> クラスの新しいインスタンスを初期化します。 このインスタンスが破棄されたときに、ハンドラーは破棄されます。</summary>
      <param name="handler">要求の送信に使用する HTTP ハンドラー スタック。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)">
      <summary>提供されたハンドラーを使用して、<see cref="T:System.Net.Http.HttpClient" /> クラスの新しいインスタンスを初期化し、このインスタンスが破棄されるときにそのハンドラーを破棄するかどうかを指定します。</summary>
      <param name="handler">HTTP 応答メッセージの処理を行う <see cref="T:System.Net.Http.HttpMessageHandler" />。</param>
      <param name="disposeHandler">内部ハンドラーを HttpClient.Dispose で破棄する場合は <see langword="true" />。内部ハンドラーを再利用する場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Net.Http.HttpClient.BaseAddress">
      <summary>要求を送信するときに使用する、インターネット リソースの Uniform Resource Identifier (URI) のベース アドレスを取得または設定します。</summary>
      <returns>要求を送信するときに使用する、インターネット リソースの Uniform Resource Identifier (URI) のベース アドレス。</returns>
    </member>
    <member name="M:System.Net.Http.HttpClient.CancelPendingRequests">
      <summary>このインスタンスの保留中の要求をすべてキャンセルします。</summary>
    </member>
    <member name="P:System.Net.Http.HttpClient.DefaultProxy">
      <summary>グローバル HTTP プロキシを取得または設定します。</summary>
      <returns>を<see cref="T:System.Net.HttpWebRequest" />インスタンス化するすべての呼び出しによって使用されるプロキシ。</returns>
      <exception cref="T:System.ArgumentNullException">渡される値を <see langword="null" /> とすることはできません。</exception>
    </member>
    <member name="P:System.Net.Http.HttpClient.DefaultRequestHeaders">
      <summary>各要求と一緒に送信する必要があるヘッダーを取得します。</summary>
      <returns>各要求と一緒に送信する必要があるヘッダー。</returns>
    </member>
    <member name="P:System.Net.Http.HttpClient.DefaultRequestVersion">
      <summary>この <see cref="T:System.Net.Http.HttpClient" /> インスタンスによって行われる後続の要求で使用される、既定の HTTP バージョンを取得または設定します。</summary>
      <returns>この<see cref="T:System.Net.Http.HttpClient" />インスタンスで行われたすべての要求に使用する既定のバージョン。</returns>
      <exception cref="T:System.ArgumentNullException">設定操作で、<see langword="DefaultRequestVersion" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Http.HttpClient" /> インスタンスにより 1 つ以上の要求が既に開始されています。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Http.HttpClient" /> インスタンスは既に破棄されています。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.DeleteAsync(System.String)">
      <summary>指定された URI に DELETE 要求を非同期操作として送信します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">要求メッセージは <see cref="T:System.Net.Http.HttpClient" /> インスタンスによって既に送信されました。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)">
      <summary>非同期操作としてキャンセル トークンを使用して削除要求を指定された Uri に送信します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <param name="cancellationToken">キャンセル通知を受け取るために他のオブジェクトまたはスレッドで使用できるキャンセル トークン。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">要求メッセージは <see cref="T:System.Net.Http.HttpClient" /> インスタンスによって既に送信されました。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.DeleteAsync(System.Uri)">
      <summary>指定された URI に DELETE 要求を非同期操作として送信します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">要求メッセージは <see cref="T:System.Net.Http.HttpClient" /> インスタンスによって既に送信されました。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)">
      <summary>非同期操作としてキャンセル トークンを使用して削除要求を指定された Uri に送信します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <param name="cancellationToken">キャンセル通知を受け取るために他のオブジェクトまたはスレッドで使用できるキャンセル トークン。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">要求メッセージは <see cref="T:System.Net.Http.HttpClient" /> インスタンスによって既に送信されました。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Net.Http.HttpClient" /> が使用しているアンマネージド リソースを解放します。オプションとして、マネージド リソースを破棄することもできます。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetAsync(System.String)">
      <summary>指定された URI に GET 要求を非同期操作として送信します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)">
      <summary>非同期操作としてHTTP 完了オプションを使用して GET 要求を指定された Uri に送信します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <param name="completionOption">操作が完了したものと見なすタイミングを示す HTTP 完了オプション値。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
      <summary>非同期操作としてキャンセル トークンおよび HTTP 完了オプションを使用して GET 要求を指定された Uri に送信します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <param name="completionOption">操作が完了したものと見なすタイミングを示す HTTP 完了オプション値。</param>
      <param name="cancellationToken">キャンセル通知を受け取るために他のオブジェクトまたはスレッドで使用できるキャンセル トークン。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)">
      <summary>非同期操作としてキャンセル トークンを使用して GET 要求を指定された Uri に送信します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <param name="cancellationToken">キャンセル通知を受け取るために他のオブジェクトまたはスレッドで使用できるキャンセル トークン。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetAsync(System.Uri)">
      <summary>指定された URI に GET 要求を非同期操作として送信します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)">
      <summary>非同期操作としてHTTP 完了オプションを使用して GET 要求を指定された Uri に送信します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <param name="completionOption">操作が完了したものと見なすタイミングを示す HTTP 完了オプション値。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
      <summary>非同期操作としてキャンセル トークンおよび HTTP 完了オプションを使用して GET 要求を指定された Uri に送信します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <param name="completionOption">操作が完了したものと見なすタイミングを示す HTTP 完了オプション値。</param>
      <param name="cancellationToken">キャンセル通知を受け取るために他のオブジェクトまたはスレッドで使用できるキャンセル トークン。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)">
      <summary>非同期操作としてキャンセル トークンを使用して GET 要求を指定された Uri に送信します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <param name="cancellationToken">キャンセル通知を受け取るために他のオブジェクトまたはスレッドで使用できるキャンセル トークン。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.String)">
      <summary>指定 URI に GET 要求を送信し、非同期操作で応答本体をバイト配列として返します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)">
      <summary>指定 URI に GET 要求を送信し、非同期操作で応答本体をバイト配列として返します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetStreamAsync(System.String)">
      <summary>指定 URI に GET 要求を送信し、非同期操作で応答本体をストリームとして返します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetStreamAsync(System.Uri)">
      <summary>指定 URI に GET 要求を送信し、非同期操作で応答本体をストリームとして返します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetStringAsync(System.String)">
      <summary>指定 URI に GET 要求を送信し、非同期操作で応答本体を文字列として返します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.GetStringAsync(System.Uri)">
      <summary>指定 URI に GET 要求を送信し、非同期操作で応答本体を文字列として返します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="P:System.Net.Http.HttpClient.MaxResponseContentBufferSize">
      <summary>応答の内容を読み取るときにバッファーに格納できる最大バイト数を取得または設定します。</summary>
      <returns>応答コンテンツを読み取るときに、バッファーに格納できる最大バイト数。 このプロパティの既定値は 2 GB です。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">指定されたサイズが 0 以下です。</exception>
      <exception cref="T:System.InvalidOperationException">操作は現在のインスタンス上で既に開始されました。</exception>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは破棄されています。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.PatchAsync(System.String,System.Net.Http.HttpContent)">
      <summary>文字列として指定されている URI に PATCH 要求を非同期操作として送信します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <param name="content">サーバーに送信される HTTP 要求の内容。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
    </member>
    <member name="M:System.Net.Http.HttpClient.PatchAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)">
      <summary>文字列として表現されている URI に PATCH 要求をキャンセル トークン付きで非同期操作として送信します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <param name="content">サーバーに送信される HTTP 要求の内容。</param>
      <param name="cancellationToken">キャンセル通知を受け取るために他のオブジェクトまたはスレッドで使用できるキャンセル トークン。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
    </member>
    <member name="M:System.Net.Http.HttpClient.PatchAsync(System.Uri,System.Net.Http.HttpContent)">
      <summary>非同期操作として PATCH 要求を送信します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <param name="content">サーバーに送信される HTTP 要求の内容。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
    </member>
    <member name="M:System.Net.Http.HttpClient.PatchAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)">
      <summary>PATCH 要求をキャンセル トークンと共に非同期操作として送信します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <param name="content">サーバーに送信される HTTP 要求の内容。</param>
      <param name="cancellationToken">キャンセル通知を受け取るために他のオブジェクトまたはスレッドで使用できるキャンセル トークン。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
    </member>
    <member name="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)">
      <summary>指定された URI に POST 要求を非同期操作として送信します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <param name="content">サーバーに送信される HTTP 要求の内容。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)">
      <summary>POST 要求をキャンセル トークンとともに非同期操作として送信します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <param name="content">サーバーに送信される HTTP 要求の内容。</param>
      <param name="cancellationToken">キャンセル通知を受け取るために他のオブジェクトまたはスレッドで使用できるキャンセル トークン。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)">
      <summary>指定された URI に POST 要求を非同期操作として送信します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <param name="content">サーバーに送信される HTTP 要求の内容。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)">
      <summary>POST 要求をキャンセル トークンとともに非同期操作として送信します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <param name="content">サーバーに送信される HTTP 要求の内容。</param>
      <param name="cancellationToken">キャンセル通知を受け取るために他のオブジェクトまたはスレッドで使用できるキャンセル トークン。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)">
      <summary>指定された URI に PUT 要求を非同期操作として送信します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <param name="content">サーバーに送信される HTTP 要求の内容。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)">
      <summary>PUT 要求をとキャンセル トークンと共に非同期操作として送信します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <param name="content">サーバーに送信される HTTP 要求の内容。</param>
      <param name="cancellationToken">キャンセル通知を受け取るために他のオブジェクトまたはスレッドで使用できるキャンセル トークン。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)">
      <summary>指定された URI に PUT 要求を非同期操作として送信します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <param name="content">サーバーに送信される HTTP 要求の内容。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)">
      <summary>PUT 要求をとキャンセル トークンと共に非同期操作として送信します。</summary>
      <param name="requestUri">要求の送信先 URI。</param>
      <param name="content">サーバーに送信される HTTP 要求の内容。</param>
      <param name="cancellationToken">キャンセル通知を受け取るために他のオブジェクトまたはスレッドで使用できるキャンセル トークン。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)">
      <summary>非同期操作として HTTP 要求を送信します。</summary>
      <param name="request">送信する HTTP 要求メッセージ。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">要求メッセージは <see cref="T:System.Net.Http.HttpClient" /> インスタンスによって既に送信されました。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)">
      <summary>非同期操作として HTTP 要求を送信します。</summary>
      <param name="request">送信する HTTP 要求メッセージ。</param>
      <param name="completionOption">操作が完了したとき (応答が使用できる状態になった後か、応答コンテンツ全体が読み取られた後)。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">要求メッセージは <see cref="T:System.Net.Http.HttpClient" /> インスタンスによって既に送信されました。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
      <summary>非同期操作として HTTP 要求を送信します。</summary>
      <param name="request">送信する HTTP 要求メッセージ。</param>
      <param name="completionOption">操作が完了したとき (応答が使用できる状態になった後か、応答コンテンツ全体が読み取られた後)。</param>
      <param name="cancellationToken">操作をキャンセルするキャンセル トークン。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">要求メッセージは <see cref="T:System.Net.Http.HttpClient" /> インスタンスによって既に送信されました。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>非同期操作として HTTP 要求を送信します。</summary>
      <param name="request">送信する HTTP 要求メッセージ。</param>
      <param name="cancellationToken">操作をキャンセルするキャンセル トークン。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">要求メッセージは <see cref="T:System.Net.Http.HttpClient" /> インスタンスによって既に送信されました。</exception>
      <exception cref="T:System.Net.Http.HttpRequestException">ネットワーク接続、DNS エラー、サーバー証明書の検証またはタイムアウトなどの基になる問題のため、要求が失敗しました。</exception>
    </member>
    <member name="P:System.Net.Http.HttpClient.Timeout">
      <summary>要求がタイムアウトするまで待機する期間を取得または設定します。</summary>
      <returns>要求がタイムアウトするまで待機する期間。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">指定したタイムアウトが 0 以下のため <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" /> ではありません。</exception>
      <exception cref="T:System.InvalidOperationException">操作は現在のインスタンス上で既に開始されました。</exception>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは破棄されています。</exception>
    </member>
    <member name="T:System.Net.Http.HttpClientHandler">
      <summary>.NET Framework および .NET Core 2.0 以前の <see cref="T:System.Net.Http.HttpClient" /> で使用される既定のメッセージ ハンドラー。</summary>
    </member>
    <member name="M:System.Net.Http.HttpClientHandler.#ctor">
      <summary>
        <see cref="T:System.Net.Http.HttpClientHandler" /> クラスのインスタンスを作成します。</summary>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.AllowAutoRedirect">
      <summary>ハンドラーがリダイレクト応答に従うかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see langword="true" />ハンドラーがリダイレクト応答に従う必要がある場合は。それ<see langword="false" />以外の場合は。 既定値は <see langword="true" /> です。</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.AutomaticDecompression">
      <summary>HTTP コンテンツ応答を自動展開するためにハンドラーによって使用される展開メソッドの種類を取得または設定します。</summary>
      <returns>自動展開メソッドは、ハンドラーによって使用されます。</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.CheckCertificateRevocationList">
      <summary>証明書が証明機関の失効リストに対して照合されるかどうかを示す値を取得または設定します。</summary>
      <returns>証明書失効リストが照合される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.PlatformNotSupportedException">.NET Framework 4.7.1 のみ: このプロパティは実装されていません。</exception>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.ClientCertificateOptions">
      <summary>証明書を自動的に証明書ストアから取得するか、または呼び出し元が特定のクライアント証明書を渡すことを許可するかを示す値を、取得または設定します。</summary>
      <returns>このハンドラーに関連付けられているセキュリティ証明書のコレクション。</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.ClientCertificates">
      <summary>サーバーに関連付けられている要求であるセキュリティ証明書のコレクションを取得します。</summary>
      <returns>証明書ベースのクライアント認証を実行するときにサーバーに提示される X509CertificateCollection。</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.CookieContainer">
      <summary>サーバーの Cookie を保存するためにハンドラーによって使用されるコンテナーを取得または設定します。</summary>
      <returns>サーバーの Cookie を保存するためにハンドラーによって使用されるコンテナー。</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.Credentials">
      <summary>このハンドラーで使用する認証情報を取得または設定します。</summary>
      <returns>ハンドラーに関連付けられる認証資格情報。 既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.DangerousAcceptAnyServerCertificateValidator">
      <summary>常に <see langword="true" /> を返すキャッシュされたデリゲートを取得します。</summary>
      <returns>常に <see langword="true" /> を返すキャッシュされたデリゲート。</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.DefaultProxyCredentials">
      <summary>既定の (システム) プロキシが使用されている場合、認証のために既定のプロキシ サーバーに送信するための資格情報を取得または設定します。 既定のプロキシは、<see cref="P:System.Net.Http.HttpClientHandler.UseProxy" /> が <see langword="true" /> に設定され、<see cref="P:System.Net.Http.HttpClientHandler.Proxy" /> が <see langword="null" /> に設定されている場合にのみ使用されます。</summary>
      <returns>既定のプロキシサーバーへの要求を認証するために必要な資格情報。</returns>
    </member>
    <member name="M:System.Net.Http.HttpClientHandler.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Net.Http.HttpClientHandler" /> が使用しているアンマネージド リソースを解放します。オプションとして、マネージド リソースを破棄することもできます。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.MaxAutomaticRedirections">
      <summary>ハンドラーがフォローするリダイレクトの最大数を取得または設定します。</summary>
      <returns>ハンドラーがフォローするリダイレクト応答の最大数。 既定値は 50 です。</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.MaxConnectionsPerServer">
      <summary>
        <see cref="T:System.Net.Http.HttpClient" /> オブジェクトを使用して要求を行うときに許可される (サーバー エンドポイントあたりの) コンカレント接続の最大数を取得または設定します。 サーバー エンドポイントあたりの制限に注意してください。たとえば、値 256 は http://www.adatum.com/ に対して 256 のコンカレント接続数を許可し、http://www.adventure-works.com/ に対してさらに 256 のコンカレント接続数を許可します。</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpClient" />オブジェクトで許可されている同時接続の最大数 (サーバーエンドポイントあたり)。</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.MaxRequestContentBufferSize">
      <summary>ハンドラーによって使用される最大要求コンテンツ バッファー サイズを取得または設定します。</summary>
      <returns>最大要求コンテンツ バッファー サイズ (バイト単位)。 既定値は 2 ギガバイトです。</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.MaxResponseHeadersLength">
      <summary>応答ヘッダーの最大長 (KB 単位、1 KB = 1024 バイト) を取得または設定します。 たとえば、値が 64 の場合、応答ヘッダーの最大長に 65536 バイトが許可されます。</summary>
      <returns>応答ヘッダーの最大長 (kb 単位) (1024 バイト)。</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.PreAuthenticate">
      <summary>ハンドラーが要求と共に認証ヘッダーを送信するかどうかを示す値を取得または設定します。</summary>
      <returns>認証後にハンドラーから要求と共に HTTP Authorization ヘッダーが送信されるようにする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.Properties">
      <summary>
        <see cref="T:System.Net.Http.HttpClient" /> 要求のカスタム プロパティの書き込み可能なディクショナリ (マップ) を取得します。 ディクショナリが初期化されて空になると、カスタム ハンドラーと特殊な処理のキーと値のペアを挿入してクエリを実行できます。</summary>
      <returns>カスタムプロパティの書き込み可能なディクショナリ。</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.Proxy">
      <summary>ハンドラーで使用するプロキシ情報を取得または設定します。</summary>
      <returns>ハンドラーで使用するプロキシ情報。 既定値は <see langword="null" /> です。</returns>
    </member>
    <member name="M:System.Net.Http.HttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Net.Http.HttpRequestMessage" /> で提供される情報に基づいて、ブロックしない操作として <see cref="T:System.Net.Http.HttpResponseMessage" /> のインスタンスを作成します。</summary>
      <param name="request">HTTP 要求メッセージ。</param>
      <param name="cancellationToken">操作をキャンセルするキャンセル トークン。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> が <see langword="null" />でした。</exception>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.ServerCertificateCustomValidationCallback">
      <summary>サーバー証明書を検証するコールバック メソッドを取得または設定します。</summary>
      <returns>サーバー証明書を検証するコールバック メソッド。</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.SslProtocols">
      <summary>HttpClientHandler オブジェクトによって管理される <see cref="T:System.Net.Http.HttpClient" /> オブジェクトが使用する TLS/SSL プロトコルを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Security.Authentication.SslProtocols" /> 列挙値に定義されている値の 1 つ。</returns>
      <exception cref="T:System.PlatformNotSupportedException">.NET Framework 4.7.1 のみ: このプロパティは実装されていません。</exception>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.SupportsAutomaticDecompression">
      <summary>ハンドラーが自動応答のコンテンツ展開をサポートするかどうかを示す値を取得します。</summary>
      <returns>ハンドラーが自動応答の内容の圧縮解除をサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.SupportsProxy">
      <summary>ハンドルがプロキシ設定をサポートしているかどうかを示す値を取得します。</summary>
      <returns>ハンドラーがプロキシ設定をサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.SupportsRedirectConfiguration">
      <summary>ハンドラーが <see cref="P:System.Net.Http.HttpClientHandler.AllowAutoRedirect" /> および <see cref="P:System.Net.Http.HttpClientHandler.MaxAutomaticRedirections" /> プロパティの構成設定をサポートするかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="P:System.Net.Http.HttpClientHandler.AllowAutoRedirect" /> プロパティと <see cref="P:System.Net.Http.HttpClientHandler.MaxAutomaticRedirections" /> プロパティの構成設定をハンドラーがサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.UseCookies">
      <summary>ハンドラーが <see cref="P:System.Net.Http.HttpClientHandler.CookieContainer" /> プロパティを使用してサーバーの Cookie を保存し、要求の送信時にそれらの Cookie を使用するかどうかを示す値を取得または設定します。</summary>
      <returns>ハンドラーが <see cref="P:System.Net.Http.HttpClientHandler.CookieContainer" /> プロパティを使用してサーバー クッキーを格納し、要求を送信するときにこれらのクッキーを使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.UseDefaultCredentials">
      <summary>既定の資格情報がハンドラーによる要求と共に送信されるかどうかを制御する値を取得または設定します。</summary>
      <returns>既定の資格情報を使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Net.Http.HttpClientHandler.UseProxy">
      <summary>ハンドラーが要求のプロキシを使用するかどうかを示す値を取得または設定します。</summary>
      <returns>ハンドラーが要求に対してプロキシを使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</returns>
    </member>
    <member name="T:System.Net.Http.HttpCompletionOption">
      <summary>応答が使用できるようになった場合に <see cref="T:System.Net.Http.HttpClient" /> 操作が完了したと見なすか、内容を含む応答メッセージ全体を読み取った後に完了したと見なすかを示します。</summary>
    </member>
    <member name="F:System.Net.Http.HttpCompletionOption.ResponseContentRead">
      <summary>操作は、コンテンツを含む全体の応答を読んだ後に完了する必要があります。</summary>
    </member>
    <member name="F:System.Net.Http.HttpCompletionOption.ResponseHeadersRead">
      <summary>操作は、応答が使用できる状態になった後か、ヘッダーが読み取られた後すぐに完了する必要があります。 コンテンツがまだ読み取られていません。</summary>
    </member>
    <member name="T:System.Net.Http.HttpContent">
      <summary>HTTP エンティティ本体およびコンテンツ ヘッダーを表す基本クラス。</summary>
    </member>
    <member name="M:System.Net.Http.HttpContent.#ctor">
      <summary>
        <see cref="T:System.Net.Http.HttpContent" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)">
      <summary>HTTP コンテンツをバイト ストリームにシリアル化し、<paramref name="stream" /> パラメーターとして指定されたストリーム オブジェクトにコピーします。</summary>
      <param name="stream">対象のストリーム。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
    </member>
    <member name="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary>HTTP コンテンツをバイト ストリームにシリアル化し、<paramref name="stream" /> パラメーターとして指定されたストリーム オブジェクトにコピーします。</summary>
      <param name="stream">対象のストリーム。</param>
      <param name="context">トランスポート (チャネル バインディング トークンなど) について説明します。 このパラメーターは <see langword="null" /> の場合もあります。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
    </member>
    <member name="M:System.Net.Http.HttpContent.CreateContentReadStreamAsync">
      <summary>非同期操作として HTTP コンテンツをメモリ ストリームにシリアル化します。</summary>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
    </member>
    <member name="M:System.Net.Http.HttpContent.Dispose">
      <summary>
        <see cref="T:System.Net.Http.HttpContent" /> が使用しているアンマネージド リソースを解放し、マネージド リソースを破棄します。</summary>
    </member>
    <member name="M:System.Net.Http.HttpContent.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Net.Http.HttpContent" /> が使用しているアンマネージド リソースを解放します。オプションとして、マネージド リソースを破棄することもできます。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.Net.Http.HttpContent.Headers">
      <summary>RFC 2616 で定義されているように HTTP コンテンツ ヘッダーを取得します。</summary>
      <returns>RFC 2616 で定義されているようなコンテンツ ヘッダー。</returns>
    </member>
    <member name="M:System.Net.Http.HttpContent.LoadIntoBufferAsync">
      <summary>非同期操作として HTTP コンテンツをメモリ バッファーにシリアル化します。</summary>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
    </member>
    <member name="M:System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)">
      <summary>非同期操作として HTTP コンテンツをメモリ バッファーにシリアル化します。</summary>
      <param name="maxBufferSize">使用バッファーの最大サイズ (バイト単位)。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
    </member>
    <member name="M:System.Net.Http.HttpContent.ReadAsByteArrayAsync">
      <summary>非同期操作として HTTP コンテンツをバイト配列にシリアル化します。</summary>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
    </member>
    <member name="M:System.Net.Http.HttpContent.ReadAsStreamAsync">
      <summary>HTTP コンテンツをシリアル化し、非同期操作としてコンテンツを表すストリームを返します。</summary>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
    </member>
    <member name="M:System.Net.Http.HttpContent.ReadAsStringAsync">
      <summary>非同期操作として HTTP コンテンツを文字列にシリアル化します。</summary>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
    </member>
    <member name="M:System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary>非同期操作として HTTP コンテンツをストリームにシリアル化します。</summary>
      <param name="stream">対象のストリーム。</param>
      <param name="context">トランスポート (チャネル バインディング トークンなど) について説明します。 このパラメーターは <see langword="null" /> の場合もあります。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
    </member>
    <member name="M:System.Net.Http.HttpContent.TryComputeLength(System.Int64@)">
      <summary>HTTP コンテンツが有効なバイト長であるかどうかを判断します。</summary>
      <param name="length">HTTP コンテンツの長さ (バイト単位)。</param>
      <returns>
        <paramref name="length" /> が有効な長さの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Net.Http.HttpMessageHandler">
      <summary>HTTP メッセージ ハンドラーの基本データ型。</summary>
    </member>
    <member name="M:System.Net.Http.HttpMessageHandler.#ctor">
      <summary>
        <see cref="T:System.Net.Http.HttpMessageHandler" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Net.Http.HttpMessageHandler.Dispose">
      <summary>
        <see cref="T:System.Net.Http.HttpMessageHandler" /> が使用しているアンマネージド リソースを解放し、マネージド リソースを破棄します。</summary>
    </member>
    <member name="M:System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Net.Http.HttpMessageHandler" /> が使用しているアンマネージド リソースを解放します。オプションとして、マネージド リソースを破棄することもできます。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>非同期操作として HTTP 要求を送信します。</summary>
      <param name="request">送信する HTTP 要求メッセージ。</param>
      <param name="cancellationToken">操作をキャンセルするキャンセル トークン。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> が <see langword="null" />でした。</exception>
    </member>
    <member name="T:System.Net.Http.HttpMessageInvoker">
      <summary>アプリケーションが HTTP ハンドラー チェーンに対して <see cref="M:System.Net.Http.HttpMessageInvoker.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)" /> メソッドを呼び出せるようにする専用クラス。</summary>
    </member>
    <member name="M:System.Net.Http.HttpMessageInvoker.#ctor(System.Net.Http.HttpMessageHandler)">
      <summary>指定した <see cref="T:System.Net.Http.HttpMessageHandler" /> を使用して、<see cref="T:System.Net.Http.HttpMessageInvoker" /> クラスのインスタンスを初期化します。</summary>
      <param name="handler">HTTP 応答メッセージの処理を行う <see cref="T:System.Net.Http.HttpMessageHandler" />。</param>
    </member>
    <member name="M:System.Net.Http.HttpMessageInvoker.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)">
      <summary>指定した <see cref="T:System.Net.Http.HttpMessageHandler" /> を使用して、<see cref="T:System.Net.Http.HttpMessageInvoker" /> クラスのインスタンスを初期化します。</summary>
      <param name="handler">HTTP 応答メッセージの処理を行う <see cref="T:System.Net.Http.HttpMessageHandler" />。</param>
      <param name="disposeHandler">内部ハンドラーを Dispose() で破棄する場合は <see langword="true" />。内部ハンドラーを再利用する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Net.Http.HttpMessageInvoker.Dispose">
      <summary>
        <see cref="T:System.Net.Http.HttpMessageInvoker" /> が使用しているアンマネージド リソースを解放し、マネージド リソースを破棄します。</summary>
    </member>
    <member name="M:System.Net.Http.HttpMessageInvoker.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Net.Http.HttpMessageInvoker" /> が使用しているアンマネージド リソースを解放します。オプションとして、マネージド リソースを破棄することもできます。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Net.Http.HttpMessageInvoker.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>非同期操作として HTTP 要求を送信します。</summary>
      <param name="request">送信する HTTP 要求メッセージ。</param>
      <param name="cancellationToken">操作をキャンセルするキャンセル トークン。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> が <see langword="null" />でした。</exception>
    </member>
    <member name="T:System.Net.Http.HttpMethod">
      <summary>標準的な HTTP メソッドの取得と比較を行い、新しい HTTP メソッドを作成するためのヘルパー クラス。</summary>
    </member>
    <member name="M:System.Net.Http.HttpMethod.#ctor(System.String)">
      <summary>指定した HTTP メソッドを使用して、<see cref="T:System.Net.Http.HttpMethod" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="method">HTTP メソッド。</param>
    </member>
    <member name="P:System.Net.Http.HttpMethod.Delete">
      <summary>HTTP DELETE プロトコル メソッドを表します。</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpMethod" /> を返します。</returns>
    </member>
    <member name="M:System.Net.Http.HttpMethod.Equals(System.Net.Http.HttpMethod)">
      <summary>指定した <see cref="T:System.Net.Http.HttpMethod" /> が現在の <see cref="T:System.Object" /> と等しいかどうかを示します。</summary>
      <param name="other">現在のオブジェクトと比較する HTTP メソッド。</param>
      <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />です。</returns>
    </member>
    <member name="M:System.Net.Http.HttpMethod.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> が現在の <see cref="T:System.Object" /> と等しいかどうかを示します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />です。</returns>
    </member>
    <member name="P:System.Net.Http.HttpMethod.Get">
      <summary>HTTP GET プロトコル メソッドを表します。</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpMethod" /> を返します。</returns>
    </member>
    <member name="M:System.Net.Http.HttpMethod.GetHashCode">
      <summary>この型のハッシュ関数として機能します。</summary>
      <returns>現在の <see cref="T:System.Object" /> のハッシュ コード。</returns>
    </member>
    <member name="P:System.Net.Http.HttpMethod.Head">
      <summary>HTTP HEAD プロトコル メソッドを表します。 HEAD メソッドは、サーバーが応答でメッセージ本文は返さずにメッセージ ヘッダーだけを返すこと以外、GET と同じです。</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpMethod" /> を返します。</returns>
    </member>
    <member name="P:System.Net.Http.HttpMethod.Method">
      <summary>HTTP メソッド。</summary>
      <returns>
        <see cref="T:System.String" /> として表される HTTP メソッド。</returns>
    </member>
    <member name="M:System.Net.Http.HttpMethod.op_Equality(System.Net.Http.HttpMethod,System.Net.Http.HttpMethod)">
      <summary>2 つの <see cref="T:System.Net.Http.HttpMethod" /> オブジェクトを比較する等値演算子。</summary>
      <param name="left">等値演算子の左辺にある <see cref="T:System.Net.Http.HttpMethod" />。</param>
      <param name="right">等値演算子に表示される右側の <see cref="T:System.Net.Http.HttpMethod" />。</param>
      <returns>指定した <paramref name="left" /> パラメーターと <paramref name="right" /> パラメーターが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.Http.HttpMethod.op_Inequality(System.Net.Http.HttpMethod,System.Net.Http.HttpMethod)">
      <summary>2 つの <see cref="T:System.Net.Http.HttpMethod" /> オブジェクトを比較する非等値演算子。</summary>
      <param name="left">非等値演算子の左辺にある <see cref="T:System.Net.Http.HttpMethod" />。</param>
      <param name="right">非等値演算子に表示される右側の <see cref="T:System.Net.Http.HttpMethod" />。</param>
      <returns>指定した <paramref name="left" /> パラメーターと <paramref name="right" /> パラメーターが等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.Http.HttpMethod.Options">
      <summary>HTTP OPTIONS プロトコル メソッドを表します。</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpMethod" /> を返します。</returns>
    </member>
    <member name="P:System.Net.Http.HttpMethod.Patch" />
    <member name="P:System.Net.Http.HttpMethod.Post">
      <summary>URI への追加として新しいエントリをポストするために使用される HTTP POST プロトコル メソッドを表します。</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpMethod" /> を返します。</returns>
    </member>
    <member name="P:System.Net.Http.HttpMethod.Put">
      <summary>URI で識別されるエントリを置き換えるために使用される HTTP PUT プロトコル メソッドを表します。</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpMethod" /> を返します。</returns>
    </member>
    <member name="M:System.Net.Http.HttpMethod.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="P:System.Net.Http.HttpMethod.Trace">
      <summary>HTTP TRACE プロトコル メソッドを表します。</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpMethod" /> を返します。</returns>
    </member>
    <member name="T:System.Net.Http.HttpRequestException">
      <summary>
        <see cref="T:System.Net.Http.HttpClient" /> と <see cref="T:System.Net.Http.HttpMessageHandler" /> クラスによってスローされる例外の基本クラス。</summary>
    </member>
    <member name="M:System.Net.Http.HttpRequestException.#ctor">
      <summary>
        <see cref="T:System.Net.Http.HttpRequestException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Net.Http.HttpRequestException.#ctor(System.String)">
      <summary>現在の例外を記述するメッセージを指定して、<see cref="T:System.Net.Http.HttpRequestException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">現在の例外を説明するメッセージ。</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestException.#ctor(System.String,System.Exception)">
      <summary>現在の例外と内部例外を記述するメッセージを指定して、<see cref="T:System.Net.Http.HttpRequestException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">現在の例外を説明するメッセージ。</param>
      <param name="inner">内部例外。</param>
    </member>
    <member name="T:System.Net.Http.HttpRequestMessage">
      <summary>HTTP 要求メッセージを表します。</summary>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessage.#ctor">
      <summary>
        <see cref="T:System.Net.Http.HttpRequestMessage" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessage.#ctor(System.Net.Http.HttpMethod,System.String)">
      <summary>HTTP メソッドと要求 <see cref="T:System.Uri" /> を使用して、<see cref="T:System.Net.Http.HttpRequestMessage" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="method">HTTP メソッド。</param>
      <param name="requestUri">要求 <see cref="T:System.Uri" /> を表す文字列。</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessage.#ctor(System.Net.Http.HttpMethod,System.Uri)">
      <summary>HTTP メソッドと要求 <see cref="T:System.Uri" /> を使用して、<see cref="T:System.Net.Http.HttpRequestMessage" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="method">HTTP メソッド。</param>
      <param name="requestUri">要求する <see cref="T:System.Uri" />。</param>
    </member>
    <member name="P:System.Net.Http.HttpRequestMessage.Content">
      <summary>HTTP メッセージの内容を取得または設定します。</summary>
      <returns>メッセージの内容</returns>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessage.Dispose">
      <summary>
        <see cref="T:System.Net.Http.HttpRequestMessage" /> が使用しているアンマネージド リソースを解放し、マネージド リソースを破棄します。</summary>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessage.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Net.Http.HttpRequestMessage" /> が使用しているアンマネージド リソースを解放します。オプションとして、マネージド リソースを破棄することもできます。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.Net.Http.HttpRequestMessage.Headers">
      <summary>HTTP 要求ヘッダーのコレクションを取得します。</summary>
      <returns>HTTP 応答ヘッダーのコレクション。</returns>
    </member>
    <member name="P:System.Net.Http.HttpRequestMessage.Method">
      <summary>この HTTP 要求メッセージで使用する HTTP メソッドを取得または設定します。</summary>
      <returns>要求メッセージによって使用される HTTP メソッド。 既定は GET メソッドです。</returns>
    </member>
    <member name="P:System.Net.Http.HttpRequestMessage.Properties">
      <summary>HTTP 要求のプロパティのセットを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> を返します。</returns>
    </member>
    <member name="P:System.Net.Http.HttpRequestMessage.RequestUri">
      <summary>HTTP 要求に使用される <see cref="T:System.Uri" /> を取得または設定します。</summary>
      <returns>HTTP 要求に使用される <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessage.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトの文字列形式。</returns>
    </member>
    <member name="P:System.Net.Http.HttpRequestMessage.Version">
      <summary>HTTP メッセージ バージョンを取得または設定します。</summary>
      <returns>HTTP メッセージのバージョン。 .NET Core の .NET Framework 以前のバージョンの既定値は1.1 です。 .NET Core 2.1 以降では、2.0 です。</returns>
    </member>
    <member name="T:System.Net.Http.HttpResponseMessage">
      <summary>ステータス コードとデータを含む HTTP 応答メッセージを表します。</summary>
    </member>
    <member name="M:System.Net.Http.HttpResponseMessage.#ctor">
      <summary>
        <see cref="T:System.Net.Http.HttpResponseMessage" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Net.Http.HttpResponseMessage.#ctor(System.Net.HttpStatusCode)">
      <summary>特定の <see cref="P:System.Net.Http.HttpResponseMessage.StatusCode" /> を使用して、<see cref="T:System.Net.Http.HttpResponseMessage" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="statusCode">HTTP 応答のステータス コード。</param>
    </member>
    <member name="P:System.Net.Http.HttpResponseMessage.Content">
      <summary>HTTP 応答メッセージの内容を取得または設定します。</summary>
      <returns>HTTP 応答メッセージの内容。</returns>
    </member>
    <member name="M:System.Net.Http.HttpResponseMessage.Dispose">
      <summary>
        <see cref="T:System.Net.Http.HttpResponseMessage" /> が使用しているアンマネージ リソースを解放し、アンマネージ リソースを破棄します。</summary>
    </member>
    <member name="M:System.Net.Http.HttpResponseMessage.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Net.Http.HttpResponseMessage" /> が使用しているアンマネージド リソースを解放します。オプションとして、マネージド リソースを破棄することもできます。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode">
      <summary>HTTP 応答の <see cref="P:System.Net.Http.HttpResponseMessage.IsSuccessStatusCode" /> プロパティが <see langword="false" /> である場合、例外をスローします。</summary>
      <returns>呼び出しに成功した場合の HTTP 応答メッセージ。</returns>
      <exception cref="T:System.Net.Http.HttpRequestException">HTTP 応答は失敗です。</exception>
    </member>
    <member name="P:System.Net.Http.HttpResponseMessage.Headers">
      <summary>HTTP 応答ヘッダーのコレクションを取得します。</summary>
      <returns>HTTP 応答ヘッダーのコレクション。</returns>
    </member>
    <member name="P:System.Net.Http.HttpResponseMessage.IsSuccessStatusCode">
      <summary>HTTP 応答が成功したかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" />が<see cref="P:System.Net.Http.HttpResponseMessage.StatusCode" /> 200-299 の範囲内にある場合は<see langword="false" />。それ以外の場合は。</returns>
    </member>
    <member name="P:System.Net.Http.HttpResponseMessage.ReasonPhrase">
      <summary>ステータス コードと共にサーバーが通常送信する理由語句を取得または設定します。</summary>
      <returns>サーバーが送信する理由語句。</returns>
    </member>
    <member name="P:System.Net.Http.HttpResponseMessage.RequestMessage">
      <summary>この応答メッセージを引き起こした要求メッセージを取得または設定します。</summary>
      <returns>この応答メッセージを引き起こした要求メッセージ。</returns>
    </member>
    <member name="P:System.Net.Http.HttpResponseMessage.StatusCode">
      <summary>HTTP 応答のステータス コードを取得または設定します。</summary>
      <returns>HTTP 応答のステータス コード。</returns>
    </member>
    <member name="M:System.Net.Http.HttpResponseMessage.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトの文字列形式。</returns>
    </member>
    <member name="P:System.Net.Http.HttpResponseMessage.TrailingHeaders">
      <summary>HTTP 応答に含まれている末尾のヘッダーのコレクションを取得します。</summary>
      <returns>HTTP 応答の末尾のヘッダーのコレクション。</returns>
      <exception cref="T:System.Net.Http.HttpRequestException">PROTOCOL_ERROR:HTTP/2 応答には、末尾のヘッダー フレームに疑似ヘッダーが含まれています。</exception>
    </member>
    <member name="P:System.Net.Http.HttpResponseMessage.Version">
      <summary>HTTP メッセージ バージョンを取得または設定します。</summary>
      <returns>HTTP メッセージのバージョン。 既定値は、1.1 です。</returns>
    </member>
    <member name="T:System.Net.Http.MessageProcessingHandler">
      <summary>要求と応答メッセージの小規模な処理のみをするハンドラーの基本型。</summary>
    </member>
    <member name="M:System.Net.Http.MessageProcessingHandler.#ctor">
      <summary>
        <see cref="T:System.Net.Http.MessageProcessingHandler" /> クラスのインスタンスを作成します。</summary>
    </member>
    <member name="M:System.Net.Http.MessageProcessingHandler.#ctor(System.Net.Http.HttpMessageHandler)">
      <summary>指定した内部ハンドラーを使用して、<see cref="T:System.Net.Http.MessageProcessingHandler" /> クラスのインスタンスを作成します。</summary>
      <param name="innerHandler">HTTP 応答メッセージ処理用の内部ハンドラー。</param>
    </member>
    <member name="M:System.Net.Http.MessageProcessingHandler.ProcessRequest(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>サーバーに送信される各要求の処理を実行します。</summary>
      <param name="request">処理する HTTP 要求メッセージ。</param>
      <param name="cancellationToken">キャンセル通知を受け取るために他のオブジェクトまたはスレッドで使用できるキャンセル トークン。</param>
      <returns>処理された HTTP 要求メッセージ。</returns>
    </member>
    <member name="M:System.Net.Http.MessageProcessingHandler.ProcessResponse(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
      <summary>サーバーからの各応答に対して処理を実行します。</summary>
      <param name="response">処理する HTTP 応答メッセージ。</param>
      <param name="cancellationToken">キャンセル通知を受け取るために他のオブジェクトまたはスレッドで使用できるキャンセル トークン。</param>
      <returns>処理された HTTP 応答メッセージ。</returns>
    </member>
    <member name="M:System.Net.Http.MessageProcessingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>非同期操作としてサーバーに送信するように HTTP 要求を内部ハンドラーに送信します。</summary>
      <param name="request">サーバーに送信する HTTP 要求メッセージ。</param>
      <param name="cancellationToken">キャンセル通知を受け取るために他のオブジェクトまたはスレッドで使用できるキャンセル トークン。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> が <see langword="null" />でした。</exception>
    </member>
    <member name="T:System.Net.Http.MultipartContent">
      <summary>multipart/* のコンテンツ タイプの指定を使用してシリアル化される <see cref="T:System.Net.Http.HttpContent" /> オブジェクトのコレクションを提供します。</summary>
    </member>
    <member name="M:System.Net.Http.MultipartContent.#ctor">
      <summary>
        <see cref="T:System.Net.Http.MultipartContent" /> クラスの新しいインスタンスを作成します。</summary>
    </member>
    <member name="M:System.Net.Http.MultipartContent.#ctor(System.String)">
      <summary>
        <see cref="T:System.Net.Http.MultipartContent" /> クラスの新しいインスタンスを作成します。</summary>
      <param name="subtype">マルチパート コンテンツのサブタイプ。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="subtype" /> が <see langword="null" /> であったか、または空白文字だけを含んでいます。</exception>
    </member>
    <member name="M:System.Net.Http.MultipartContent.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Net.Http.MultipartContent" /> クラスの新しいインスタンスを作成します。</summary>
      <param name="subtype">マルチパート コンテンツのサブタイプ。</param>
      <param name="boundary">マルチパート コンテンツの境界の文字列。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="subtype" /> が <see langword="null" /> または空の文字列でした。  
<paramref name="boundary" /> が <see langword="null" /> であったか、または空白文字だけを含んでいます。  
または 
<paramref name="boundary" /> が空白文字で終わっています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="boundary" /> の長さが 70 を超えていました。</exception>
    </member>
    <member name="M:System.Net.Http.MultipartContent.Add(System.Net.Http.HttpContent)">
      <summary>multipart/* のコンテンツ タイプの指定を使用してシリアル化される <see cref="T:System.Net.Http.HttpContent" /> オブジェクトのコレクションにマルチパート HTTP コンテンツを追加します。</summary>
      <param name="content">コレクションに追加する HTTP コンテンツ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="content" /> が <see langword="null" />でした。</exception>
    </member>
    <member name="M:System.Net.Http.MultipartContent.CreateContentReadStreamAsync">
      <summary>非同期操作としてマルチパート/* エンコーディングを使用し、HTTP コンテンツをストリームにシリアル化します。</summary>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
    </member>
    <member name="M:System.Net.Http.MultipartContent.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Net.Http.MultipartContent" /> が使用しているアンマネージド リソースを解放します。オプションとして、マネージド リソースを破棄することもできます。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Net.Http.MultipartContent.GetEnumerator">
      <summary>マルチパート/* コンテンツ タイプの仕様を使用してシリアル化される <see cref="T:System.Net.Http.HttpContent" /> オブジェクトのコレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Net.Http.MultipartContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary>非同期操作としてマルチパートの HTTP コンテンツをストリームにシリアル化します。</summary>
      <param name="stream">対象のストリーム。</param>
      <param name="context">トランスポート (チャネル バインディング トークンなど) について説明します。 このパラメーターは <see langword="null" /> の場合もあります。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
    </member>
    <member name="M:System.Net.Http.MultipartContent.System#Collections#IEnumerable#GetEnumerator">
      <summary>
        <see cref="M:System.Net.Http.MultipartContent.GetEnumerator" /> メソッドの明示的な実装。</summary>
      <returns>コレクションを反復処理するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Net.Http.MultipartContent.TryComputeLength(System.Int64@)">
      <summary>HTTP マルチパート コンテンツが有効なバイト長であるかどうかを決定します。</summary>
      <param name="length">HTTP コンテンツの長さ (バイト単位)。</param>
      <returns>
        <paramref name="length" /> が有効な長さの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Net.Http.MultipartFormDataContent">
      <summary>マルチパート/フォーム データの MIME タイプを使用してエンコードされたコンテンツのコンテナーを提供します。</summary>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataContent.#ctor">
      <summary>
        <see cref="T:System.Net.Http.MultipartFormDataContent" /> クラスの新しいインスタンスを作成します。</summary>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataContent.#ctor(System.String)">
      <summary>
        <see cref="T:System.Net.Http.MultipartFormDataContent" /> クラスの新しいインスタンスを作成します。</summary>
      <param name="boundary">マルチパート フォーム データ コンテンツの境界の文字列。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="boundary" /> が <see langword="null" /> であったか、または空白文字だけを含んでいます。  

または - 
<paramref name="boundary" /> が空白文字で終わっています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="boundary" /> の長さが 70 を超えていました。</exception>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataContent.Add(System.Net.Http.HttpContent)">
      <summary>マルチパート/フォーム データの MIME の種類にシリアル化される <see cref="T:System.Net.Http.HttpContent" /> オブジェクトのコレクションに HTTP コンテンツを追加します。</summary>
      <param name="content">コレクションに追加する HTTP コンテンツ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="content" /> が <see langword="null" />でした。</exception>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataContent.Add(System.Net.Http.HttpContent,System.String)">
      <summary>マルチパート/フォーム データの MIME の種類にシリアル化される <see cref="T:System.Net.Http.HttpContent" /> オブジェクトのコレクションに HTTP コンテンツを追加します。</summary>
      <param name="content">コレクションに追加する HTTP コンテンツ。</param>
      <param name="name">追加する HTTP コンテンツの名前。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> が <see langword="null" /> であったか、または空白文字だけを含んでいます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="content" /> が <see langword="null" />でした。</exception>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataContent.Add(System.Net.Http.HttpContent,System.String,System.String)">
      <summary>マルチパート/フォーム データの MIME の種類にシリアル化される <see cref="T:System.Net.Http.HttpContent" /> オブジェクトのコレクションに HTTP コンテンツを追加します。</summary>
      <param name="content">コレクションに追加する HTTP コンテンツ。</param>
      <param name="name">追加する HTTP コンテンツの名前。</param>
      <param name="fileName">コレクションに追加する HTTP コンテンツのファイル名。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> が <see langword="null" /> であったか、または空白文字だけを含んでいます。  

または - 
<paramref name="fileName" /> が <see langword="null" /> であったか、または空白文字だけを含んでいます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="content" /> が <see langword="null" />でした。</exception>
    </member>
    <member name="T:System.Net.Http.ReadOnlyMemoryContent" />
    <member name="M:System.Net.Http.ReadOnlyMemoryContent.#ctor(System.ReadOnlyMemory{System.Byte})">
      <param name="content" />
    </member>
    <member name="T:System.Net.Http.SocketsHttpHandler">
      <summary>.NET Core 2.1 以降の <see cref="T:System.Net.Http.HttpClient" /> で使用される既定のメッセージ ハンドラーを提供します。</summary>
    </member>
    <member name="M:System.Net.Http.SocketsHttpHandler.#ctor" />
    <member name="P:System.Net.Http.SocketsHttpHandler.AllowAutoRedirect" />
    <member name="P:System.Net.Http.SocketsHttpHandler.AutomaticDecompression">
      <summary>HTTP コンテンツ応答を自動展開するためにハンドラーによって使用される展開メソッドの種類を取得または設定します。</summary>
      <returns>HTTP コンテンツ応答を自動展開するためにハンドラーによって使用される展開方法の種類。</returns>
    </member>
    <member name="P:System.Net.Http.SocketsHttpHandler.ConnectTimeout" />
    <member name="P:System.Net.Http.SocketsHttpHandler.CookieContainer">
      <summary>マネージド クッキー コンテナー オブジェクトを取得または設定します。</summary>
      <returns>マネージクッキーコンテナーオブジェクト。</returns>
    </member>
    <member name="P:System.Net.Http.SocketsHttpHandler.Credentials" />
    <member name="P:System.Net.Http.SocketsHttpHandler.DefaultProxyCredentials">
      <summary>既定の (システム) プロキシが使用されている場合、認証のために既定のプロキシ サーバーに送信するための使用されている資格情報を取得または設定します。</summary>
      <returns>認証プロキシに対してユーザーを認証するために使用される資格情報。</returns>
    </member>
    <member name="P:System.Net.Http.SocketsHttpHandler.Expect100ContinueTimeout" />
    <member name="P:System.Net.Http.SocketsHttpHandler.MaxAutomaticRedirections">
      <summary>許可される HTTP リダイレクトの最大数を取得または設定します。</summary>
      <returns>許可される HTTP リダイレクトの最大数。</returns>
    </member>
    <member name="P:System.Net.Http.SocketsHttpHandler.MaxConnectionsPerServer">
      <summary>1 つのサーバーに対して許可されている同時 TCP 接続の最大数を取得または設定します。</summary>
      <returns>1台のサーバーに対して許可されている同時 TCP 接続の最大数。</returns>
    </member>
    <member name="P:System.Net.Http.SocketsHttpHandler.MaxResponseDrainSize">
      <summary>応答からドレインできる最大データ量 (バイト単位) を取得または設定します。</summary>
      <returns>応答からドレインできるデータの最大量 (バイト単位)。</returns>
    </member>
    <member name="P:System.Net.Http.SocketsHttpHandler.MaxResponseHeadersLength">
      <summary>応答ヘッダーの最大長 (KB 単位、1 KB = 1024 バイト) を取得または設定します。</summary>
      <returns>サーバー応答のヘッダー部分の最大サイズ (kb 単位)。</returns>
    </member>
    <member name="P:System.Net.Http.SocketsHttpHandler.PooledConnectionIdleTimeout">
      <summary>再利用可能と見なされるプールで接続がアイドル状態でいられる時間を取得または設定します。</summary>
      <returns>プール内の接続の最大アイドル時間。 このプロパティの既定値は2分です。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">指定された値が <see cref="F:System.TimeSpan.Zero" /> 未満、または <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" /> と等しいです。</exception>
    </member>
    <member name="P:System.Net.Http.SocketsHttpHandler.PooledConnectionLifetime" />
    <member name="P:System.Net.Http.SocketsHttpHandler.PreAuthenticate">
      <summary>ハンドラーが要求と共に認証ヘッダーを送信するかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see langword="true" />ハンドラーが要求と共に認証ヘッダーを送信する場合は。それ以外<see langword="false" />の場合は。</returns>
    </member>
    <member name="P:System.Net.Http.SocketsHttpHandler.Properties" />
    <member name="P:System.Net.Http.SocketsHttpHandler.Proxy">
      <summary>
        <see cref="P:System.Net.Http.SocketsHttpHandler.UseProxy" /> プロパティが <see langword="true" /> の場合に、カスタム プロキシを取得または設定します。</summary>
      <returns>カスタムプロキシ。</returns>
    </member>
    <member name="P:System.Net.Http.SocketsHttpHandler.ResponseDrainTimeout" />
    <member name="P:System.Net.Http.SocketsHttpHandler.SslOptions">
      <summary>クライアント TLS 認証に使用するオプションのセットを取得または設定します。</summary>
      <returns>クライアントの TLS 認証に使用されるオプションのセット。</returns>
    </member>
    <member name="P:System.Net.Http.SocketsHttpHandler.UseCookies" />
    <member name="P:System.Net.Http.SocketsHttpHandler.UseProxy" />
    <member name="T:System.Net.Http.StreamContent">
      <summary>ストリームに基づいて HTTP コンテンツを提供します。</summary>
    </member>
    <member name="M:System.Net.Http.StreamContent.#ctor(System.IO.Stream)">
      <summary>
        <see cref="T:System.Net.Http.StreamContent" /> クラスの新しいインスタンスを作成します。</summary>
      <param name="content">
        <see cref="T:System.Net.Http.StreamContent" />の初期化に使用されるコンテンツ。</param>
    </member>
    <member name="M:System.Net.Http.StreamContent.#ctor(System.IO.Stream,System.Int32)">
      <summary>
        <see cref="T:System.Net.Http.StreamContent" /> クラスの新しいインスタンスを作成します。</summary>
      <param name="content">
        <see cref="T:System.Net.Http.StreamContent" /> の初期化に使用されるコンテンツ。</param>
      <param name="bufferSize">
        <see cref="T:System.Net.Http.StreamContent" /> のバッファーのサイズ (バイト単位)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="content" /> が <see langword="null" />でした。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> の値が 0 以下です。</exception>
    </member>
    <member name="M:System.Net.Http.StreamContent.CreateContentReadStreamAsync">
      <summary>非同期操作として HTTP ストリーム コンテンツをメモリ ストリームに書き込みます。</summary>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
    </member>
    <member name="M:System.Net.Http.StreamContent.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Net.Http.StreamContent" /> が使用しているアンマネージド リソースを解放します。オプションとして、マネージド リソースを破棄することもできます。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Net.Http.StreamContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary>非同期操作として HTTP コンテンツをストリームにシリアル化します。</summary>
      <param name="stream">対象のストリーム。</param>
      <param name="context">トランスポート (チャネル バインディング トークンなど) について説明します。 このパラメーターは <see langword="null" /> の場合もあります。</param>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
    </member>
    <member name="M:System.Net.Http.StreamContent.TryComputeLength(System.Int64@)">
      <summary>ストリーム コンテンツが有効なバイト長であるかどうかを判断します。</summary>
      <param name="length">ストリーム コンテンツの長さ (バイト単位)。</param>
      <returns>
        <paramref name="length" /> が有効な長さの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Net.Http.StringContent">
      <summary>文字列に基づいて HTTP コンテンツを提供します。</summary>
    </member>
    <member name="M:System.Net.Http.StringContent.#ctor(System.String)">
      <summary>
        <see cref="T:System.Net.Http.StringContent" /> クラスの新しいインスタンスを作成します。</summary>
      <param name="content">
        <see cref="T:System.Net.Http.StringContent" />の初期化に使用されるコンテンツ。</param>
    </member>
    <member name="M:System.Net.Http.StringContent.#ctor(System.String,System.Text.Encoding)">
      <summary>
        <see cref="T:System.Net.Http.StringContent" /> クラスの新しいインスタンスを作成します。</summary>
      <param name="content">
        <see cref="T:System.Net.Http.StringContent" /> の初期化に使用されるコンテンツ。</param>
      <param name="encoding">コンテンツに使用するエンコード。</param>
    </member>
    <member name="M:System.Net.Http.StringContent.#ctor(System.String,System.Text.Encoding,System.String)">
      <summary>
        <see cref="T:System.Net.Http.StringContent" /> クラスの新しいインスタンスを作成します。</summary>
      <param name="content">
        <see cref="T:System.Net.Http.StringContent" /> の初期化に使用されるコンテンツ。</param>
      <param name="encoding">コンテンツに使用するエンコード。</param>
      <param name="mediaType">コンテンツに使用するメディア タイプ。</param>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Memory</name>
  </assembly>
  <members>
    <member name="T:System.Buffers.ArrayBufferWriter`1">
      <summary vsli:raw="Represents a heap-based, array-backed output sink into which &lt;typeparamref name=&quot;T&quot; /&gt; data can be written.">データを書き込むことができる、ヒープベースの <typeparam name="T" /> 配列に裏付けられた出力シンクを表します。</summary>
      <typeparam name="T" vsli:raw="The type of the items in this &lt;see cref=&quot;T:System.Buffers.ArrayBufferWriter`1&quot; /&gt; instance.">この<see cref="T:System.Buffers.ArrayBufferWriter`1" />インスタンス内の項目の型。</typeparam>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.#ctor">
      <summary vsli:raw="Creates an instance of an &lt;see cref=&quot;T:System.Buffers.ArrayBufferWriter`1&quot; /&gt; to which data can be written, with the default initial capacity.">データを書き込むことができる、既定の初期容量を備えた <see cref="T:System.Buffers.ArrayBufferWriter`1" /> のインスタンスを作成します。</summary>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.#ctor(System.Int32)">
      <summary vsli:raw="Creates an instance of an &lt;see cref=&quot;T:System.Buffers.ArrayBufferWriter`1&quot; /&gt; to which data can be written, with a specified initial capacity.">データを書き込むことができる、指定した初期容量を備えた <see cref="T:System.Buffers.ArrayBufferWriter`1" /> のインスタンスを作成します。</summary>
      <param name="initialCapacity" vsli:raw="The minimum capacity with which to initialize the underlying buffer.">基になるバッファーの初期化に使用する最小容量。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;initialCapacity&quot; /&gt; is less than or equal to 0.">
        <paramref name="initialCapacity" /> が 0 以下です。</exception>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.Advance(System.Int32)">
      <summary vsli:raw="Notifies the &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt; that &lt;paramref name=&quot;count&quot; /&gt; items were written to the output &lt;see cref=&quot;T:System.Span`1&quot; /&gt;/&lt;see cref=&quot;T:System.Memory`1&quot; /&gt;.">
        <paramref name="count" /> 項目が出力 <see cref="T:System.Span`1" />/<see cref="T:System.Memory`1" /> に書き込まれたことを <see cref="T:System.Buffers.IBufferWriter`1" /> に通知します</summary>
      <param name="count" vsli:raw="The number of items written.">書き込まれる項目の数。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;count&quot; /&gt; is negative.">
        <paramref name="count" /> が負の値です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The method call attempts to advance past the end of the underlying buffer.">メソッドの呼び出しで、基になるバッファーの末尾を超えて前進することを試みます。</exception>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.Capacity">
      <summary vsli:raw="Gets the total amount of space within the underlying buffer.">基になるバッファー内の領域の合計量を取得します。</summary>
      <returns vsli:raw="The total capacity of the underlying buffer.">基になるバッファーの合計容量。</returns>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.Clear">
      <summary vsli:raw="Clears the data written to the underlying buffer.">基になるバッファーに書き込まれたデータを消去します。</summary>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.FreeCapacity">
      <summary vsli:raw="Gets the amount of available space that can be written to without forcing the underlying buffer to grow.">基になるバッファーの拡大を強制せずに書き込むことができる使用可能な領域の量を取得します。</summary>
      <returns vsli:raw="The space available for writing without forcing the underlying buffer to grow.">基になるバッファーを強制的に拡張せずに、書き込みに使用できる領域。</returns>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.GetMemory(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; to write to that is at least the length specified by &lt;paramref name=&quot;sizeHint&quot; /&gt;.">少なくとも <paramref name="sizeHint" /> で指定された長さがある、書き込み先となる <see cref="T:System.Memory`1" /> を返します。</summary>
      <param name="sizeHint" vsli:raw="The minimum requested length of the &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;.">
        <see cref="T:System.Memory`1" /> の要求される最小の長さ。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; whose length is at least &lt;paramref name=&quot;sizeHint&quot; /&gt;.  If &lt;paramref name=&quot;sizeHint&quot; /&gt; is not provided or is equal to 0, some non-empty buffer is returned.">長さが少なくとも <paramref name="sizeHint" /> の <see cref="T:System.Memory`1" />。  <paramref name="sizeHint" /> が指定されていないか、0 の場合、空でないバッファーがいくつか返されます。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;sizeHint&quot; /&gt; is negative.">
        <paramref name="sizeHint" /> が負の値です。</exception>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.GetSpan(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Span`1&quot; /&gt; to write to that is at least a specified length.">指定された長さ以上の書き込み先となる <see cref="T:System.Span`1" /> を返します。</summary>
      <param name="sizeHint" vsli:raw="The minimum requested length of the &lt;see cref=&quot;T:System.Span`1&quot; /&gt;.">
        <see cref="T:System.Span`1" /> の要求される最小の長さ。</param>
      <returns vsli:raw="A span of at least &lt;paramref name=&quot;sizeHint&quot; /&gt; in length. If &lt;paramref name=&quot;sizeHint&quot; /&gt; is not provided or is equal to 0, some non-empty buffer is returned.">長さが少なくとも <paramref name="sizeHint" /> のスパン。 <paramref name="sizeHint" /> が指定されていないか、0 の場合、空でないバッファーがいくつか返されます。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;sizeHint&quot; /&gt; is negative.">
        <paramref name="sizeHint" /> が負の値です。</exception>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.WrittenCount">
      <summary vsli:raw="Gets the amount of data written to the underlying buffer.">基になるバッファーに書き込まれたデータの量を取得します。</summary>
      <returns vsli:raw="The amount of data written to the underlying buffer.">基になるバッファーに書き込まれたデータの量。</returns>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.WrittenMemory">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; that contains the data written to the underlying buffer so far.">基になるバッファーにこれまで書き込まれたデータが格納されている <see cref="T:System.ReadOnlyMemory`1" /> を取得します。</summary>
      <returns vsli:raw="The data written to the underlying buffer.">基になるバッファーに書き込まれたデータ。</returns>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.WrittenSpan">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; that contains the data written to the underlying buffer so far.">基になるバッファーにこれまで書き込まれたデータが格納されている <see cref="T:System.ReadOnlySpan`1" /> を取得します。</summary>
      <returns vsli:raw="The data written to the underlying buffer.">基になるバッファーに書き込まれたデータ。</returns>
    </member>
    <member name="T:System.Buffers.Binary.BinaryPrimitives">
      <summary vsli:raw="Reads bytes as primitives with specific endianness.">特定のエンディアンを持つプリミティブとしてバイトを読み取ります。</summary>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt16BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int16&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">バイトの読み取り専用スパンの先頭から、ビッグ エンディアンとして <see cref="T:System.Int16" /> を読み取ります。</summary>
      <param name="source" vsli:raw="The read-only span to read.">読み取る読み取り専用スパン。</param>
      <returns vsli:raw="The big endian value.">ビッグ エンディアン値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">
        <paramref name="source" /> が小さすぎて <see cref="T:System.Int16" /> を格納できません。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt16LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int16&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">バイトの読み取り専用スパンの先頭から、リトル エンディアンとして <see cref="T:System.Int16" /> を読み取ります。</summary>
      <param name="source" vsli:raw="The read-only span to read.">読み取る読み取り専用スパン。</param>
      <returns vsli:raw="The little endian value.">リトル エンディアン値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">
        <paramref name="source" /> が小さすぎて <see cref="T:System.Int16" /> を格納できません。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt32BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int32&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">バイトの読み取り専用スパンの先頭から、ビッグ エンディアンとして <see cref="T:System.Int32" /> を読み取ります。</summary>
      <param name="source" vsli:raw="The read-only span to read.">読み取る読み取り専用スパン。</param>
      <returns vsli:raw="The big endian value.">ビッグ エンディアン値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <paramref name="source" /> が小さすぎて <see cref="T:System.Int32" /> を格納できません。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt32LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int32&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">バイトの読み取り専用スパンの先頭から、リトル エンディアンとして <see cref="T:System.Int32" /> を読み取ります。</summary>
      <param name="source" vsli:raw="The read-only span to read.">読み取る読み取り専用スパン。</param>
      <returns vsli:raw="The little endian value.">リトル エンディアン値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <paramref name="source" /> が小さすぎて <see cref="T:System.Int32" /> を格納できません。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt64BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int64&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">バイトの読み取り専用スパンの先頭から、ビッグ エンディアンとして <see cref="T:System.Int64" /> を読み取ります。</summary>
      <param name="source" vsli:raw="The read-only span to read.">読み取る読み取り専用スパン。</param>
      <returns vsli:raw="The big endian value.">ビッグ エンディアン値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">
        <paramref name="source" /> が小さすぎて <see cref="T:System.Int64" /> を格納できません。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt64LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int64&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">バイトの読み取り専用スパンの先頭から、リトル エンディアンとして <see cref="T:System.Int64" /> を読み取ります。</summary>
      <param name="source" vsli:raw="The read-only span to read.">読み取る読み取り専用スパン。</param>
      <returns vsli:raw="The little endian value.">リトル エンディアン値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">
        <paramref name="source" /> が小さすぎて <see cref="T:System.Int64" /> を格納できません。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt16BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">バイトの読み取り専用スパンの先頭から、ビッグ エンディアンとして <see cref="T:System.UInt16" /> を読み取ります。</summary>
      <param name="source" vsli:raw="The read-only span to read.">読み取る読み取り専用スパン。</param>
      <returns vsli:raw="The big endian value.">ビッグ エンディアン値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">
        <paramref name="source" /> が小さすぎて <see cref="T:System.UInt16" /> を格納できません。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt16LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">バイトの読み取り専用スパンの先頭から、リトル エンディアンとして <see cref="T:System.UInt16" /> を読み取ります。</summary>
      <param name="source" vsli:raw="The read-only span to read.">読み取る読み取り専用スパン。</param>
      <returns vsli:raw="The little endian value.">リトル エンディアン値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">
        <paramref name="source" /> が小さすぎて <see cref="T:System.UInt16" /> を格納できません。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt32BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">バイトの読み取り専用スパンの先頭から、ビッグ エンディアンとして <see cref="T:System.UInt32" /> を読み取ります。</summary>
      <param name="source" vsli:raw="The read-only span to read.">読み取る読み取り専用スパン。</param>
      <returns vsli:raw="The big endian value.">ビッグ エンディアン値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">
        <paramref name="source" /> が小さすぎて <see cref="T:System.UInt32" /> を格納できません。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt32LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">バイトの読み取り専用スパンの先頭から、リトル エンディアンとして <see cref="T:System.UInt32" /> を読み取ります。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">読み取るバイトの読み取り専用スパン。</param>
      <returns vsli:raw="The little endian value.">リトル エンディアン値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">
        <paramref name="source" /> が小さすぎて <see cref="T:System.UInt32" /> を格納できません。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt64BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">バイトの読み取り専用スパンの先頭から、ビッグ エンディアンとして <see cref="T:System.UInt64" /> を読み取ります。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">読み取るバイトの読み取り専用スパン。</param>
      <returns vsli:raw="The big endian value.">ビッグ エンディアン値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">
        <paramref name="source" /> が小さすぎて <see cref="T:System.UInt64" /> を格納できません。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt64LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">バイトの読み取り専用スパンの先頭から、リトル エンディアンとして <see cref="T:System.UInt64" /> を読み取ります。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">読み取るバイトの読み取り専用スパン。</param>
      <returns vsli:raw="The little endian value.">リトル エンディアン値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">
        <paramref name="source" /> が小さすぎて <see cref="T:System.UInt64" /> を格納できません。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Byte)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.Byte&quot; /&gt; value, which effectively does nothing for a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">指定された <see cref="T:System.Byte" /> 値のエンディアン スワップを実行して、プリミティブ値を反転します。<see cref="T:System.Byte" /> に対しては、実質的には何も行われません。</summary>
      <param name="value" vsli:raw="The value to reverse.">反転する値。</param>
      <returns vsli:raw="The passed-in value, unmodified.">渡された値 (変更されていない)。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Int16)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.Int16&quot; /&gt; value.">指定された <see cref="T:System.Int16" /> 値のエンディアン スワップを実行して、プリミティブ値を反転します。</summary>
      <param name="value" vsli:raw="The value to reverse.">反転する値。</param>
      <returns vsli:raw="The reversed value.">反転された値。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Int32)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.Int32&quot; /&gt; value.">指定された <see cref="T:System.Int32" /> 値のエンディアン スワップを実行して、プリミティブ値を反転します。</summary>
      <param name="value" vsli:raw="The value to reverse.">反転する値。</param>
      <returns vsli:raw="The reversed value.">反転された値。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Int64)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.Int64&quot; /&gt; value.">指定された <see cref="T:System.Int64" /> 値のエンディアン スワップを実行して、プリミティブ値を反転します。</summary>
      <param name="value" vsli:raw="The value to reverse.">反転する値。</param>
      <returns vsli:raw="The reversed value.">反転された値。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.SByte)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.SByte&quot; /&gt; value, which effectively does nothing for an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">指定された <see cref="T:System.SByte" /> 値のエンディアン スワップを実行して、プリミティブ値を反転します。<see cref="T:System.SByte" /> に対しては、実質的には何も行われません。</summary>
      <param name="value" vsli:raw="The value to reverse.">反転する値。</param>
      <returns vsli:raw="The passed-in value, unmodified.">渡された値 (変更されていない)。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UInt16)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.UInt16&quot; /&gt; value.">指定された <see cref="T:System.UInt16" /> 値のエンディアン スワップを実行して、プリミティブ値を反転します。</summary>
      <param name="value" vsli:raw="The value to reverse.">反転する値。</param>
      <returns vsli:raw="The reversed value.">反転された値。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UInt32)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value.">指定された <see cref="T:System.UInt32" /> 値のエンディアン スワップを実行して、プリミティブ値を反転します。</summary>
      <param name="value" vsli:raw="The value to reverse.">反転する値。</param>
      <returns vsli:raw="The reversed value.">反転された値。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UInt64)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value.">指定された <see cref="T:System.UInt64" /> 値のエンディアン スワップを実行して、プリミティブ値を反転します。</summary>
      <param name="value" vsli:raw="The value to reverse.">反転する値。</param>
      <returns vsli:raw="The reversed value.">反転された値。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt16BigEndian(System.ReadOnlySpan{System.Byte},System.Int16@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int16&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">バイトの読み取り専用スパンの先頭から、ビッグ エンディアンとして <see cref="T:System.Int16" /> を読み取ります。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">読み取るバイトの読み取り専用スパン。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">このメソッドから制御が戻るときに、バイトの読み取り専用スパンから、ビッグ エンディアンとして読み取られる値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">スパンが <see cref="T:System.Int16" /> を格納するのに十分な大きさである場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt16LittleEndian(System.ReadOnlySpan{System.Byte},System.Int16@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int16&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">バイトの読み取り専用スパンの先頭から、リトル エンディアンとして <see cref="T:System.Int16" /> を読み取ります。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">読み取るバイトの読み取り専用スパン。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">このメソッドから制御が戻るときに、バイトの読み取り専用スパンから、リトル エンディアンとして読み取られる値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">スパンが <see cref="T:System.Int16" /> を格納するのに十分な大きさである場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt32BigEndian(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int32&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">バイトの読み取り専用スパンの先頭から、ビッグ エンディアンとして <see cref="T:System.Int32" /> を読み取ります。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">読み取るバイトの読み取り専用スパン。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">このメソッドから制御が戻るときに、バイトの読み取り専用スパンから、ビッグ エンディアンとして読み取られる値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">スパンが <see cref="T:System.Int32" /> を格納するのに十分な大きさである場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt32LittleEndian(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int32&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">バイトの読み取り専用スパンの先頭から、リトル エンディアンとして <see cref="T:System.Int32" /> を読み取ります。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">読み取るバイトの読み取り専用スパン。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">このメソッドから制御が戻るときに、バイトの読み取り専用スパンから、リトル エンディアンとして読み取られる値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">スパンが <see cref="T:System.Int32" /> を格納するのに十分な大きさである場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt64BigEndian(System.ReadOnlySpan{System.Byte},System.Int64@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int64&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">バイトの読み取り専用スパンの先頭から、ビッグ エンディアンとして <see cref="T:System.Int64" /> を読み取ります。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">読み取るバイトの読み取り専用スパン。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">このメソッドから制御が戻るときに、バイトの読み取り専用スパンから、ビッグ エンディアンとして読み取られる値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">スパンが <see cref="T:System.Int64" /> を格納するのに十分な大きさである場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt64LittleEndian(System.ReadOnlySpan{System.Byte},System.Int64@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int64&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">バイトの読み取り専用スパンの先頭から、リトル エンディアンとして <see cref="T:System.Int64" /> を読み取ります。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">読み取るバイトの読み取り専用スパン。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">このメソッドから制御が戻るときに、バイトの読み取り専用スパンから、リトル エンディアンとして読み取られる値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">スパンが <see cref="T:System.Int64" /> を格納するのに十分な大きさである場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt16BigEndian(System.ReadOnlySpan{System.Byte},System.UInt16@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">バイトの読み取り専用スパンの先頭から、ビッグ エンディアンとして <see cref="T:System.UInt16" /> を読み取ります。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">読み取るバイトの読み取り専用スパン。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">このメソッドから制御が戻るときに、バイトの読み取り専用スパンから、ビッグ エンディアンとして読み取られる値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">スパンが <see cref="T:System.UInt16" /> を格納するのに十分な大きさである場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt16LittleEndian(System.ReadOnlySpan{System.Byte},System.UInt16@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">バイトの読み取り専用スパンの先頭から、リトル エンディアンとして <see cref="T:System.UInt16" /> を読み取ります。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">読み取るバイトの読み取り専用スパン。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">このメソッドから制御が戻るときに、バイトの読み取り専用スパンから、リトル エンディアンとして読み取られる値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">スパンが <see cref="T:System.UInt16" /> を格納するのに十分な大きさである場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt32BigEndian(System.ReadOnlySpan{System.Byte},System.UInt32@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">バイトの読み取り専用スパンの先頭から、ビッグ エンディアンとして <see cref="T:System.UInt32" /> を読み取ります。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">読み取るバイトの読み取り専用スパン。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">このメソッドから制御が戻るときに、バイトの読み取り専用スパンから、ビッグ エンディアンとして読み取られる値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">スパンが <see cref="T:System.UInt32" /> を格納するのに十分な大きさである場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt32LittleEndian(System.ReadOnlySpan{System.Byte},System.UInt32@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">バイトの読み取り専用スパンの先頭から、リトル エンディアンとして <see cref="T:System.UInt32" /> を読み取ります。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">読み取るバイトの読み取り専用スパン。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">このメソッドから制御が戻るときに、バイトの読み取り専用スパンから、リトル エンディアンとして読み取られる値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">スパンが <see cref="T:System.UInt32" /> を格納するのに十分な大きさである場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt64BigEndian(System.ReadOnlySpan{System.Byte},System.UInt64@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">バイトの読み取り専用スパンの先頭から、ビッグ エンディアンとして <see cref="T:System.UInt64" /> を読み取ります。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">読み取るバイトの読み取り専用スパン。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">このメソッドから制御が戻るときに、バイトの読み取り専用スパンから、ビッグ エンディアンとして読み取られる値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">スパンが <see cref="T:System.UInt64" /> を格納するのに十分な大きさである場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt64LittleEndian(System.ReadOnlySpan{System.Byte},System.UInt64@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">バイトの読み取り専用スパンの先頭から、リトル エンディアンとして <see cref="T:System.UInt64" /> を読み取ります。</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">読み取るバイトの読み取り専用スパン。</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">このメソッドから制御が戻るときに、バイトの読み取り専用スパンから、リトル エンディアンとして読み取られる値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">スパンが <see cref="T:System.UInt64" /> を格納するのに十分な大きさである場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt16BigEndian(System.Span{System.Byte},System.Int16)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int16&quot; /&gt; into a span of bytes, as big endian.">
        <see cref="T:System.Int16" /> をビッグ エンディアンとしてバイトのスパンに書き込みます。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">値がビッグ エンディアンとして書き込まれるバイトのスパン。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">バイトのスパンに書き込む値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">スパンが <see cref="T:System.Int16" /> を格納するのに十分な大きさである場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt16LittleEndian(System.Span{System.Byte},System.Int16)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int16&quot; /&gt; into a span of bytes, as little endian.">
        <see cref="T:System.Int16" /> をリトル エンディアンとしてバイトのスパンに書き込みます。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">値がリトル エンディアンとして書き込まれるバイトのスパン。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">バイトのスパンに書き込む値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">スパンが <see cref="T:System.Int16" /> を格納するのに十分な大きさである場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt32BigEndian(System.Span{System.Byte},System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; into a span of bytes, as big endian.">
        <see cref="T:System.Int32" /> をビッグ エンディアンとしてバイトのスパンに書き込みます。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">値がビッグ エンディアンとして書き込まれるバイトのスパン。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">バイトのスパンに書き込む値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">スパンが <see cref="T:System.Int32" /> を格納するのに十分な大きさである場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt32LittleEndian(System.Span{System.Byte},System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; into a span of bytes, as little endian.">
        <see cref="T:System.Int32" /> をリトル エンディアンとしてバイトのスパンに書き込みます。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">値がリトル エンディアンとして書き込まれるバイトのスパン。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">バイトのスパンに書き込む値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">スパンが <see cref="T:System.Int32" /> を格納するのに十分な大きさである場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt64BigEndian(System.Span{System.Byte},System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; into a span of bytes, as big endian.">
        <see cref="T:System.Int64" /> をビッグ エンディアンとしてバイトのスパンに書き込みます。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">値がビッグ エンディアンとして書き込まれるバイトのスパン。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">バイトのスパンに書き込む値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">スパンが <see cref="T:System.Int64" /> を格納するのに十分な大きさである場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt64LittleEndian(System.Span{System.Byte},System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; into a span of bytes, as little endian.">
        <see cref="T:System.Int64" /> をリトル エンディアンとしてバイトのスパンに書き込みます。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">値がリトル エンディアンとして書き込まれるバイトのスパン。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">バイトのスパンに書き込む値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">スパンが <see cref="T:System.Int64" /> を格納するのに十分な大きさである場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt16BigEndian(System.Span{System.Byte},System.UInt16)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; into a span of bytes, as big endian.">
        <see cref="T:System.UInt16" /> をビッグ エンディアンとしてバイトのスパンに書き込みます。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">値がビッグ エンディアンとして書き込まれるバイトのスパン。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">バイトのスパンに書き込む値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">スパンが <see cref="T:System.UInt16" /> を格納するのに十分な大きさである場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt16LittleEndian(System.Span{System.Byte},System.UInt16)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; into a span of bytes, as little endian.">
        <see cref="T:System.UInt16" /> をリトル エンディアンとしてバイトのスパンに書き込みます。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">値がリトル エンディアンとして書き込まれるバイトのスパン。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">バイトのスパンに書き込む値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">スパンが <see cref="T:System.UInt16" /> を格納するのに十分な大きさである場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt32BigEndian(System.Span{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; into a span of bytes, as big endian.">
        <see cref="T:System.UInt32" /> をビッグ エンディアンとしてバイトのスパンに書き込みます。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">値がビッグ エンディアンとして書き込まれるバイトのスパン。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">バイトのスパンに書き込む値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">スパンが <see cref="T:System.UInt32" /> を格納するのに十分な大きさである場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt32LittleEndian(System.Span{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; into a span of bytes, as little endian.">
        <see cref="T:System.UInt32" /> をリトル エンディアンとしてバイトのスパンに書き込みます。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">値がリトル エンディアンとして書き込まれるバイトのスパン。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">バイトのスパンに書き込む値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">スパンが <see cref="T:System.UInt32" /> を格納するのに十分な大きさである場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt64BigEndian(System.Span{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; into a span of bytes, as big endian.">
        <see cref="T:System.UInt64" /> をビッグ エンディアンとしてバイトのスパンに書き込みます。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">値がビッグ エンディアンとして書き込まれるバイトのスパン。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">バイトのスパンに書き込む値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">スパンが <see cref="T:System.UInt64" /> を格納するのに十分な大きさである場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt64LittleEndian(System.Span{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; into a span of bytes, as little endian.">
        <see cref="T:System.UInt64" /> をリトル エンディアンとしてバイトのスパンに書き込みます。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">値がリトル エンディアンとして書き込まれるバイトのスパン。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">バイトのスパンに書き込む値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">スパンが <see cref="T:System.UInt64" /> を格納するのに十分な大きさである場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt16BigEndian(System.Span{System.Byte},System.Int16)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int16&quot; /&gt; into a span of bytes, as big endian.">
        <see cref="T:System.Int16" /> をビッグ エンディアンとしてバイトのスパンに書き込みます。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">値がビッグ エンディアンとして書き込まれるバイトのスパン。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">バイトのスパンに書き込む値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">
        <paramref name="destination" /> が小さすぎて <see cref="T:System.Int16" /> を格納できません。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt16LittleEndian(System.Span{System.Byte},System.Int16)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int16&quot; /&gt; into a span of bytes, as little endian.">
        <see cref="T:System.Int16" /> をリトル エンディアンとしてバイトのスパンに書き込みます。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">値がリトル エンディアンとして書き込まれるバイトのスパン。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">バイトのスパンに書き込む値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">
        <paramref name="destination" /> が小さすぎて <see cref="T:System.Int16" /> を格納できません。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt32BigEndian(System.Span{System.Byte},System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; into a span of bytes, as big endian.">
        <see cref="T:System.Int32" /> をビッグ エンディアンとしてバイトのスパンに書き込みます。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">値がビッグ エンディアンとして書き込まれるバイトのスパン。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">バイトのスパンに書き込む値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <paramref name="destination" /> が小さすぎて <see cref="T:System.Int32" /> を格納できません。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt32LittleEndian(System.Span{System.Byte},System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; into a span of bytes, as little endian.">
        <see cref="T:System.Int32" /> をリトル エンディアンとしてバイトのスパンに書き込みます。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">値がリトル エンディアンとして書き込まれるバイトのスパン。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">バイトのスパンに書き込む値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <paramref name="destination" /> が小さすぎて <see cref="T:System.Int32" /> を格納できません。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt64BigEndian(System.Span{System.Byte},System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; into a span of bytes, as big endian.">
        <see cref="T:System.Int64" /> をビッグ エンディアンとしてバイトのスパンに書き込みます。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">値がビッグ エンディアンとして書き込まれるバイトのスパン。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">バイトのスパンに書き込む値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">
        <paramref name="destination" /> が小さすぎて <see cref="T:System.Int64" /> を格納できません。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt64LittleEndian(System.Span{System.Byte},System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; into a span of bytes, as little endian.">
        <see cref="T:System.Int64" /> をリトル エンディアンとしてバイトのスパンに書き込みます。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">値がリトル エンディアンとして書き込まれるバイトのスパン。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">バイトのスパンに書き込む値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">
        <paramref name="destination" /> が小さすぎて <see cref="T:System.Int64" /> を格納できません。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt16BigEndian(System.Span{System.Byte},System.UInt16)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; into a span of bytes, as big endian.">
        <see cref="T:System.UInt16" /> をビッグ エンディアンとしてバイトのスパンに書き込みます。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">値がビッグ エンディアンとして書き込まれるバイトのスパン。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">バイトのスパンに書き込む値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">
        <paramref name="destination" /> が小さすぎて <see cref="T:System.UInt16" /> を格納できません。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt16LittleEndian(System.Span{System.Byte},System.UInt16)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; into a span of bytes, as little endian.">
        <see cref="T:System.UInt16" /> をリトル エンディアンとしてバイトのスパンに書き込みます。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">値がリトル エンディアンとして書き込まれるバイトのスパン。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">バイトのスパンに書き込む値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">
        <paramref name="destination" /> が小さすぎて <see cref="T:System.UInt16" /> を格納できません。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt32BigEndian(System.Span{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; into a span of bytes, as big endian.">
        <see cref="T:System.UInt32" /> をビッグ エンディアンとしてバイトのスパンに書き込みます。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">値がビッグ エンディアンとして書き込まれるバイトのスパン。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">バイトのスパンに書き込む値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">
        <paramref name="destination" /> が小さすぎて <see cref="T:System.UInt32" /> を格納できません。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt32LittleEndian(System.Span{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; into a span of bytes, as little endian.">
        <see cref="T:System.UInt32" /> をリトル エンディアンとしてバイトのスパンに書き込みます。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">値がリトル エンディアンとして書き込まれるバイトのスパン。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">バイトのスパンに書き込む値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">
        <paramref name="destination" /> が小さすぎて <see cref="T:System.UInt32" /> を格納できません。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt64BigEndian(System.Span{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; into a span of bytes, as big endian.">
        <see cref="T:System.UInt64" /> をビッグ エンディアンとしてバイトのスパンに書き込みます。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">値がビッグ エンディアンとして書き込まれるバイトのスパン。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">バイトのスパンに書き込む値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">
        <paramref name="destination" /> が小さすぎて <see cref="T:System.UInt64" /> を格納できません。</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt64LittleEndian(System.Span{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; into a span of bytes, as little endian.">
        <see cref="T:System.UInt64" /> をリトル エンディアンとしてバイトのスパンに書き込みます。</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">値がリトル エンディアンとして書き込まれるバイトのスパン。</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">バイトのスパンに書き込む値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">
        <paramref name="destination" /> が小さすぎて <see cref="T:System.UInt64" /> を格納できません。</exception>
    </member>
    <member name="T:System.Buffers.BuffersExtensions">
      <summary vsli:raw="Provides extension methods for &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" /> の拡張メソッドを提供します。</summary>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.CopyTo``1(System.Buffers.ReadOnlySequence{``0},System.Span{``0})">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; to the specified &lt;see cref=&quot;T:System.Span`1&quot; /&gt;.">指定した <see cref="T:System.Span`1" /> に <see cref="T:System.Buffers.ReadOnlySequence`1" /> をコピーします。</summary>
      <param name="source" vsli:raw="The source &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">コピー元 <see cref="T:System.Buffers.ReadOnlySequence`1" />。</param>
      <param name="destination" vsli:raw="The destination &lt;see cref=&quot;T:System.Span`1&quot; /&gt;.">コピー先の <see cref="T:System.Span`1" />。</param>
      <typeparam name="T" vsli:raw="The type of the items in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">内の項目の型<see cref="T:System.Buffers.ReadOnlySequence`1" />。</typeparam>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.PositionOf``1(System.Buffers.ReadOnlySequence{``0},``0)">
      <summary vsli:raw="Returns the position of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" /> で最初に見つかった <paramref name="item" /> の位置を返します。</summary>
      <param name="source" vsli:raw="The source &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">コピー元 <see cref="T:System.Buffers.ReadOnlySequence`1" />。</param>
      <param name="value" vsli:raw="The item to find in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" /> で検索する項目。</param>
      <typeparam name="T" vsli:raw="The type of the items in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">内の項目の型<see cref="T:System.Buffers.ReadOnlySequence`1" />。</typeparam>
      <returns vsli:raw="An object whose &lt;see cref=&quot;M:System.SequencePosition.GetInteger&quot; /&gt; method returns the position of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt;, or an object whose &lt;see langword=&quot;Nullable&amp;lt;SequencePosition&amp;gt;.HasValue&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt; .">最初に見つかった <paramref name="item" /> の位置が <see cref="M:System.SequencePosition.GetInteger" /> メソッドによって返されるオブジェクト。または、<see langword="Nullable&lt;SequencePosition&gt;.HasValue" /> プロパティが <see langword="false" /> であるオブジェクト。</returns>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.ToArray``1(System.Buffers.ReadOnlySequence{``0})">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; to an array.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" /> を配列に変換します。</summary>
      <param name="sequence" vsli:raw="The read-only sequence to convert to an array.">配列に変換する読み取り専用シーケンス。</param>
      <typeparam name="T" vsli:raw="The type of the items in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">内の項目の型<see cref="T:System.Buffers.ReadOnlySequence`1" />。</typeparam>
      <returns vsli:raw="An array containing the data in the current read-only sequence.">現在の読み取り専用シーケンス内のデータを格納する配列。</returns>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.Write``1(System.Buffers.IBufferWriter{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Writes the contents of &lt;paramref name=&quot;value&quot; /&gt; to &lt;paramref name=&quot;writer&quot; /&gt;.">
        <paramref name="value" /> のコンテンツを <paramref name="writer" /> に書き込みます。</summary>
      <param name="writer" vsli:raw="The buffer writer to which to write &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" /> を書き込むバッファー ライター。</param>
      <param name="value" vsli:raw="The read-only span to be written to &lt;paramref name=&quot;writer&quot; /&gt;.">
        <paramref name="writer" /> に書き込まれる読み取り専用スパン。</param>
      <typeparam name="T" vsli:raw="The type of the items in the &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt;.">内の項目の型<see cref="T:System.ReadOnlySpan`1" />。</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; is shorter than &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="writer" /> は <paramref name="value" /> よりも短いです。</exception>
    </member>
    <member name="T:System.Buffers.IBufferWriter`1">
      <summary vsli:raw="Represents an output sink into which &lt;typeparamref name=&quot;T&quot; /&gt; data can be written.">
        <typeparamref name="T" /> データを書き込むことができる出力シンクを表します。</summary>
      <typeparam name="T" vsli:raw="The type of the items in the &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt;.">内の項目の型<see cref="T:System.Buffers.IBufferWriter`1" />。</typeparam>
    </member>
    <member name="M:System.Buffers.IBufferWriter`1.Advance(System.Int32)">
      <summary vsli:raw="Notifies the &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt; that &lt;paramref name=&quot;count&quot; /&gt; data items were written to the output &lt;see cref=&quot;T:System.Span`1&quot; /&gt; or &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;.">
        <paramref name="count" /> データ項目が出力 <see cref="T:System.Span`1" /> または <see cref="T:System.Memory`1" /> に書き込まれたことを <see cref="T:System.Buffers.IBufferWriter`1" /> に通知します。</summary>
      <param name="count" vsli:raw="The number of data items written to the &lt;see cref=&quot;T:System.Span`1&quot; /&gt; or &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;.">
        <see cref="T:System.Span`1" /> または <see cref="T:System.Memory`1" /> に書き込まれたデータ項目の数。</param>
    </member>
    <member name="M:System.Buffers.IBufferWriter`1.GetMemory(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; to write to that is at least the requested size (specified by &lt;paramref name=&quot;sizeHint&quot; /&gt;).">少なくとも要求されたサイズを持つ (<paramref name="sizeHint" /> で指定します)、書き込み先の <see cref="T:System.Memory`1" /> を返します。</summary>
      <param name="sizeHint" vsli:raw="The minimum length of the returned &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;. If 0, a non-empty buffer is returned.">返される <see cref="T:System.Memory`1" /> の最小の長さ。 0 の場合は、空でないバッファーが返されます。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; of at least the size &lt;paramref name=&quot;sizeHint&quot; /&gt;. If &lt;paramref name=&quot;sizeHint&quot; /&gt; is 0, returns a non-empty buffer.">少なくとも <paramref name="sizeHint" /> のサイズを持つ <see cref="T:System.Memory`1" />。 <paramref name="sizeHint" /> が 0 の場合は、空でないバッファーを返します。</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="The requested buffer size is not available.">要求したバッファー サイズは使用できません。</exception>
    </member>
    <member name="M:System.Buffers.IBufferWriter`1.GetSpan(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Span`1&quot; /&gt; to write to that is at least the requested size (specified by &lt;paramref name=&quot;sizeHint&quot; /&gt;).">少なくとも要求されたサイズを持つ (<paramref name="sizeHint" /> で指定します)、書き込み先の <see cref="T:System.Span`1" /> を返します。</summary>
      <param name="sizeHint" vsli:raw="The minimum length of the returned &lt;see cref=&quot;T:System.Span`1&quot; /&gt;. If 0, a non-empty buffer is returned.">返される <see cref="T:System.Span`1" /> の最小の長さ。 0 の場合は、空でないバッファーが返されます。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Span`1&quot; /&gt; of at least the size &lt;paramref name=&quot;sizeHint&quot; /&gt;. If &lt;paramref name=&quot;sizeHint&quot; /&gt; is 0, returns a non-empty buffer.">少なくとも <paramref name="sizeHint" /> のサイズを持つ <see cref="T:System.Span`1" />。 <paramref name="sizeHint" /> が 0 の場合は、空でないバッファーを返します。</returns>
    </member>
    <member name="T:System.Buffers.MemoryPool`1">
      <summary vsli:raw="Represents a pool of memory blocks.">メモリ ブロックのプールを表します。</summary>
      <typeparam name="T" vsli:raw="The type of the items in the memory pool.">メモリプール内の項目の型。</typeparam>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.#ctor">
      <summary vsli:raw="Constructs a new instance of a memory pool.">メモリ プールの新しいインスタンスを構築します。</summary>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.Dispose">
      <summary vsli:raw="Frees all resources used by the memory pool.">メモリ プールによって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.Dispose(System.Boolean)">
      <summary vsli:raw="Frees the unmanaged resources used by the memory pool and optionally releases the managed resources.">メモリ プールによって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は 。</param>
    </member>
    <member name="P:System.Buffers.MemoryPool`1.MaxBufferSize">
      <summary vsli:raw="Gets the maximum buffer size supported by this pool.">このプールでサポートされる最大バッファー サイズを取得します。</summary>
      <returns vsli:raw="The maximum buffer size supported by this pool.">このプールでサポートされる最大バッファーサイズ。</returns>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.Rent(System.Int32)">
      <summary vsli:raw="Returns a memory block capable of holding at least &lt;paramref name=&quot;minBufferSize&quot; /&gt; elements of T.">T の要素を少なくとも <paramref name="minBufferSize" /> 個保持できるメモリ ブロックを返します。</summary>
      <param name="minBufferSize" vsli:raw="The minimum number of elements of &lt;typeparamref name=&quot;T&quot; /&gt; that the memory pool can hold. A value of -1 returns a memory pool set to the default size for the pool.">メモリ プールで保持できる <typeparamref name="T" /> の要素の最小数。 値 -1 の場合、プールの既定のサイズに設定されたメモリ プールが返されます。</param>
      <returns vsli:raw="A memory block capable of holding at least &lt;paramref name=&quot;minBufferSize&quot; /&gt; elements of T.">T の要素を少なくとも <paramref name="minBufferSize" /> 個保持できるメモリ ブロック。</returns>
    </member>
    <member name="P:System.Buffers.MemoryPool`1.Shared">
      <summary vsli:raw="Gets a singleton instance of a memory pool based on arrays.">配列に基づいてメモリ プールのシングルトン インスタンスを取得します。</summary>
      <returns vsli:raw="A singleton instance of a memory pool.">メモリプールのシングルトンインスタンス。</returns>
    </member>
    <member name="T:System.Buffers.OperationStatus">
      <summary>複数の連続していないバッファーに格納される入力の処理をサポートするスパンベースの操作から返すことのできる値を定義します。</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.DestinationTooSmall">
      <summary>出力先バッファーに収まるものまで、入力が部分的に処理されます。 呼び出し元では出力先バッファーを拡大し、バッファーを適宜スライスして再試行できます。</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.Done">
      <summary>入力バッファー全体が処理され、操作が完了しました。</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.InvalidData">
      <summary>処理できない無効なバイトが入力に含まれていました。 入力が部分的に処理される場合、出力先には部分的な結果が格納されます。 これにより、入力に追加されるデータによって無効なシーケンスが有効になることはありません。</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.NeedMoreData">
      <summary>使用可能な入力の最後の有効なチャンクまで、入力が部分的に処理されます。 呼び出し元では残りの未処理の入力を追加のデータと合成し、バッファーを適宜スライスして再試行できます。</summary>
    </member>
    <member name="T:System.Buffers.ReadOnlySequence`1">
      <summary vsli:raw="Represents a sequence that can read a sequential series of &lt;typeparamref name=&quot;T&quot; /&gt;.">一連の <typeparamref name="T" /> を読み取ることができるシーケンスを表します。</summary>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only sequence." />
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(`0[])">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; from the &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> から <see cref="T:System.Buffers.ReadOnlySequence`1" /> のインスタンスを作成します。</summary>
      <param name="array" vsli:raw="The array from which to create a read-only sequence.">読み取り専用シーケンスの作成元になる配列。</param>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates an instance of a &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; from a section of an array.">配列のセクションから <see cref="T:System.Buffers.ReadOnlySequence`1" /> のインスタンスを作成します。</summary>
      <param name="array" vsli:raw="The array from which to create the read-only sequence.">読み取り専用シーケンスの作成元になる配列。</param>
      <param name="start" vsli:raw="The zero-based index of the first element in the array to include in the read-only sequence.">読み取り専用シーケンスに含める、配列の最初の要素の 0 から始まるインデックス。</param>
      <param name="length" vsli:raw="The number of elements to include in the read-only sequence.">読み取り専用シーケンスに含める要素の数。</param>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(System.Buffers.ReadOnlySequenceSegment{`0},System.Int32,System.Buffers.ReadOnlySequenceSegment{`0},System.Int32)">
      <summary vsli:raw="Creates an instance of a &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; from a linked memory list represented by start and end segments and the corresponding indexes in them.">開始と終了のセグメントおよびそのセグメント内の対応するインデックスによって表されるリンクされたメモリ リストから <see cref="T:System.Buffers.ReadOnlySequence`1" /> のインスタンスを作成します。</summary>
      <param name="startSegment" vsli:raw="The initial node of the linked memory list." />
      <param name="startIndex" vsli:raw="The position to the start of the sequence inside &lt;paramref name=&quot;startSegment&quot; /&gt;." />
      <param name="endSegment" vsli:raw="The final node of the linked memory list." />
      <param name="endIndex" vsli:raw="The position to the end of the sequence inside &lt;paramref name=&quot;endSegment&quot; /&gt;." />
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(System.ReadOnlyMemory{`0})">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; from a &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;.">
        <see cref="T:System.ReadOnlyMemory`1" /> から <see cref="T:System.Buffers.ReadOnlySequence`1" /> のインスタンスを作成します。</summary>
      <param name="memory" vsli:raw="A read-only block of memory of elements of type &lt;typeparamref name=&quot;T&quot; /&gt;." />
    </member>
    <member name="F:System.Buffers.ReadOnlySequence`1.Empty">
      <summary vsli:raw="Returns an empty &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">空の <see cref="T:System.Buffers.ReadOnlySequence`1" /> を返します。</summary>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.End">
      <summary vsli:raw="Gets the position at the end of the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" /> の末尾の位置を取得します。</summary>
    </member>
    <member name="T:System.Buffers.ReadOnlySequence`1.Enumerator">
      <summary vsli:raw="Represents an enumerator over a &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" /> に対する列挙子を表します。</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Enumerator.#ctor(System.Buffers.ReadOnlySequence{`0}@)">
      <summary vsli:raw="Initializes the enumerator.">列挙子を初期化します。</summary>
      <param name="sequence" vsli:raw="The &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; to enumerate.">列挙する <see cref="T:System.Buffers.ReadOnlySequence`1" />。</param>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.Enumerator.Current">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;.">現在の <see cref="T:System.ReadOnlyMemory`1" /> を取得します。</summary>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;.">現在の <see cref="T:System.ReadOnlyMemory`1" /> です。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Enumerator.MoveNext">
      <summary vsli:raw="Moves to the next &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" /> の次の <see cref="T:System.ReadOnlyMemory`1" /> に移動します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator successfully advanced to the next item; &lt;see langword=&quot;false&quot; /&gt; if the end of the sequence has been reached.">列挙子が次の項目に正常に進んだ場合は <see langword="true" />、シーケンスの末尾に到達した場合は <see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.First">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; from the first segment.">最初のセグメントから <see cref="T:System.ReadOnlyMemory`1" /> を取得します。</summary>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.FirstSpan">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; from the first segment.">最初のセグメントから <see cref="T:System.ReadOnlySpan`1" /> を取得します。</summary>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator over the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" /> に対する列挙子を返します。</summary>
      <returns vsli:raw="Returns an enumerator over the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" /> に対する列挙子を返します。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.GetPosition(System.Int64)">
      <summary vsli:raw="Returns a new &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; at an &lt;paramref name=&quot;offset&quot; /&gt; from the start of the sequence.">
        <paramref name="offset" /> にあるシーケンスの先頭から新しい <see cref="T:System.SequencePosition" /> を返します。</summary>
      <param name="offset" vsli:raw="The offset from the start of the sequence." />
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.GetPosition(System.Int64,System.SequencePosition)">
      <summary vsli:raw="Returns a new &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; starting at the specified offset from the &lt;paramref name=&quot;origin&quot; /&gt; position.">
        <paramref name="offset" /> にある<paramref name="origin" /> から新しい <see cref="T:System.SequencePosition" /> を返します。</summary>
      <param name="offset" vsli:raw="The offset from the specified &lt;paramref name=&quot;origin&quot; /&gt; sequence position." />
      <param name="origin" vsli:raw="A sequence position representing the point from which to initiate the offset." />
      <returns vsli:raw="An object representing the sequence position that starts at the &lt;paramref name=&quot;offset&quot; /&gt; position of the specified &lt;paramref name=&quot;origin&quot; /&gt; position object.">元のオブジェクトの <paramref name="offset" /> の位置で始まる新しいオブジェクト。</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; is empty.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" /> が空かどうかを示す値を取得します。</summary>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.IsSingleSegment">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; contains a single &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; segment.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" /> に 1 つの <see cref="T:System.ReadOnlyMemory`1" /> セグメントが含まれているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read-only sequence is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />読み取り専用シーケンスが空の場合は。それ以外<see langword="false" />の場合は。</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.Length">
      <summary vsli:raw="Gets the length of the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" /> の長さを取得します。</summary>
      <returns vsli:raw="The length of the read-only sequence.">読み取り専用シーケンスの長さ。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int32,System.Int32)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt;, with &lt;paramref name=&quot;length&quot; /&gt; items.">現在の <see cref="T:System.Buffers.ReadOnlySequence`1" /> から、<paramref name="start" /> で始まり、<paramref name="length" /> 個の項目を含むスライスを形成します。</summary>
      <param name="start" vsli:raw="The index at which to begin this slice.">このスライスの開始位置を示すインデックス。</param>
      <param name="length" vsli:raw="The length of the slice.">スライスの長さ。</param>
      <returns vsli:raw="A slice that consists of &lt;paramref name=&quot;length&quot; /&gt; elements from the current instance starting at index &lt;paramref name=&quot;start&quot; /&gt;.">インデックス <paramref name="start" /> で始まる現在のインスタンスからの <paramref name="length" /> 要素で構成されるスライス。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int32,System.SequencePosition)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt; and ending at &lt;paramref name=&quot;end&quot; /&gt; (exclusive).">現在の <see cref="T:System.Buffers.ReadOnlySequence`1" /> から、<paramref name="start" /> で始まり、<paramref name="end" /> (自身を含まない) で終わるスライスを形成します。</summary>
      <param name="start" vsli:raw="The index at which to begin this slice.">このスライスの開始位置を示すインデックス。</param>
      <param name="end" vsli:raw="The end (exclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; of the slice.">スライスの末尾 (自身を含まない) の <see cref="T:System.SequencePosition" />。</param>
      <returns vsli:raw="A slice that consists of items from the &lt;paramref name=&quot;start&quot; /&gt; index to, but not including, the &lt;paramref name=&quot;end&quot; /&gt; sequence position in the current read-only sequence.">現在の読み取り専用シーケンス内の <paramref name="start" /> インデックスから <paramref name="end" /> シーケンス位置の前までの項目で構成されるスライス。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int64)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at a specified index and continuing to the end of the read-only sequence.">現在の <see cref="T:System.Buffers.ReadOnlySequence`1" /> から、指定されたインデックスで始まり、読み取り専用シーケンスの末尾まで継続するスライスを形成します。</summary>
      <param name="start" vsli:raw="The start index at which to begin this slice.">このスライスの開始位置を示す開始インデックス。</param>
      <returns vsli:raw="A slice starting at index &lt;paramref name=&quot;start&quot; /&gt; and continuing to the end of the current read-only sequence.">インデックス <paramref name="start" /> から始まり、現在の読み取り専用シーケンスの末尾まで続くスライス。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int64,System.Int64)">
      <summary vsli:raw="Forms a slice out of the given &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt;, with &lt;paramref name=&quot;length&quot; /&gt; items.">指定された <see cref="T:System.Buffers.ReadOnlySequence`1" /> から、<paramref name="start" /> で始まり、<paramref name="length" /> 個の項目を含むスライスを形成します。</summary>
      <param name="start" vsli:raw="The index at which to begin this slice.">このスライスの開始位置を示すインデックス。</param>
      <param name="length" vsli:raw="The length of the slice.">スライスの長さ。</param>
      <returns vsli:raw="A slice that consists of &lt;paramref name=&quot;length&quot; /&gt; elements from the current instance starting at index &lt;paramref name=&quot;start&quot; /&gt;.">インデックス <paramref name="start" /> で始まる現在のインスタンスからの <paramref name="length" /> 要素で構成されるスライス。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int64,System.SequencePosition)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt; and ending at &lt;paramref name=&quot;end&quot; /&gt; (exclusive).">現在の <see cref="T:System.Buffers.ReadOnlySequence`1" /> から、<paramref name="start" /> で始まり、<paramref name="end" /> (自身を含まない) で終わるスライスを形成します。</summary>
      <param name="start" vsli:raw="The index at which to begin this slice.">このスライスの開始位置を示すインデックス。</param>
      <param name="end" vsli:raw="The end (exclusive) of the slice.">スライスの末尾 (自身を含まない)。</param>
      <returns vsli:raw="A slice that consists of items from the &lt;paramref name=&quot;start&quot; /&gt; index to, but not including, the &lt;paramref name=&quot;end&quot; /&gt; sequence position in the current read-only sequence.">現在の読み取り専用シーケンス内の <paramref name="start" /> インデックスから <paramref name="end" /> シーケンス位置の前までの項目で構成されるスライス。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at a specified sequence position and continuing to the end of the read-only sequence.">現在の <see cref="T:System.Buffers.ReadOnlySequence`1" /> から、指定されたシーケンス位置から始まり、読み取り専用シーケンスの末尾まで継続するスライスを形成します。</summary>
      <param name="start" vsli:raw="The starting (inclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; at which to begin this slice.">このスライスの開始位置を示す開始 <see cref="T:System.SequencePosition" /> (自身を含む)。</param>
      <returns vsli:raw="A slice starting at sequence position &lt;paramref name=&quot;start&quot; /&gt; and continuing to the end of the current read-only sequence.">シーケンス位置 <paramref name="start" /> から始まり、現在の読み取り専用シーケンスの末尾まで続くスライス。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition,System.Int32)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt;, with &lt;paramref name=&quot;length&quot; /&gt; items.">現在の <see cref="T:System.Buffers.ReadOnlySequence`1" /> から、<paramref name="start" /> で始まり、<paramref name="length" /> 個の項目を含むスライスを形成します。</summary>
      <param name="start" vsli:raw="The starting (inclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; at which to begin this slice.">このスライスの開始位置を示す開始 <see cref="T:System.SequencePosition" /> (自身を含む)。</param>
      <param name="length" vsli:raw="The length of the slice.">スライスの長さ。</param>
      <returns vsli:raw="A slice that consists of &lt;paramref name=&quot;length&quot; /&gt; elements from the current instance starting at sequence position &lt;paramref name=&quot;start&quot; /&gt;.">シーケンス位置 <paramref name="start" /> で始まる現在のインスタンスからの <paramref name="length" /> 要素で構成されるスライス。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition,System.Int64)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt;, with &lt;paramref name=&quot;length&quot; /&gt; items.">現在の <see cref="T:System.Buffers.ReadOnlySequence`1" /> から、<paramref name="start" /> で始まり、<paramref name="length" /> 個の項目を含むスライスを形成します。</summary>
      <param name="start" vsli:raw="The starting (inclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; at which to begin this slice.">このスライスの開始位置を示す開始 <see cref="T:System.SequencePosition" /> (自身を含む)。</param>
      <param name="length" vsli:raw="The length of the slice.">スライスの長さ。</param>
      <returns vsli:raw="A slice that consists of &lt;paramref name=&quot;length&quot; /&gt; elements from the current instance starting at sequence position &lt;paramref name=&quot;start&quot; /&gt;.">シーケンス位置 <paramref name="start" /> で始まる現在のインスタンスからの <paramref name="length" /> 要素で構成されるスライス。</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition,System.SequencePosition)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt; and ending at &lt;paramref name=&quot;end&quot; /&gt; (exclusive).">現在の <see cref="T:System.Buffers.ReadOnlySequence`1" /> から、<paramref name="start" /> で始まり、<paramref name="end" /> (自身を含まない) で終わるスライスを形成します。</summary>
      <param name="start" vsli:raw="The starting (inclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; at which to begin this slice.">このスライスの開始位置を示す開始 <see cref="T:System.SequencePosition" /> (自身を含む)。</param>
      <param name="end" vsli:raw="The ending (exclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; of the slice.">スライスの末尾 <see cref="T:System.SequencePosition" /> (自身を含まない)。</param>
      <returns vsli:raw="A slice that consists of items from the &lt;paramref name=&quot;start&quot; /&gt; sequence position to, but not including, the &lt;paramref name=&quot;end&quot; /&gt; sequence position in the current read-only sequence.">現在の読み取り専用シーケンス内の <paramref name="start" /> シーケンス位置から <paramref name="end" /> シーケンス位置の前までの項目で構成されるスライス。</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.Start">
      <summary vsli:raw="Gets the position to the start of the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" /> の先頭までの位置を取得します。</summary>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.ToString" />
    <member name="M:System.Buffers.ReadOnlySequence`1.TryGet(System.SequencePosition@,System.ReadOnlyMemory{`0}@,System.Boolean)">
      <summary vsli:raw="Tries to retrieve the next segment after &lt;paramref name=&quot;position&quot; /&gt; and returns a value that indicates whether the operation succeeded.">
        <paramref name="position" /> の後の次のセグメントの取得を試行し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="position" vsli:raw="The current sequence position.">現在のシーケンス位置。</param>
      <param name="memory" vsli:raw="A read-only memory span that contains the next segment after &lt;paramref name=&quot;position&quot; /&gt;.">
        <paramref name="position" /> の後の次のセグメントを含む読み取り専用メモリ スパン。</param>
      <param name="advance" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;position&quot; /&gt; should to the beginning of next segment; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="position" /> が次のセグメントの先頭である場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</param>
      <returns vsli:raw="Returns &lt;see langword=&quot;true&quot; /&gt; if the method returned the next segment, or &lt;see langword=&quot;false&quot; /&gt; if the end of the read-only sequence was reached.">次のセグメントがメソッドによって返された場合は <see langword="true" /> を返し、読み取り専用シーケンスの末尾に到達した場合は <see langword="false" /> を返します。</returns>
    </member>
    <member name="T:System.Buffers.ReadOnlySequenceSegment`1">
      <summary vsli:raw="Represents a linked list of &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; nodes.">
        <see cref="T:System.ReadOnlyMemory`1" /> ノードのリンク リストを表します。</summary>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only sequence segment." />
    </member>
    <member name="M:System.Buffers.ReadOnlySequenceSegment`1.#ctor" />
    <member name="P:System.Buffers.ReadOnlySequenceSegment`1.Memory">
      <summary vsli:raw="Gets or sets a &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; value for the current node.">現在のノードの <see cref="T:System.ReadOnlyMemory`1" /> 値を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; value for the current node.">現在のノードの値。<see cref="T:System.ReadOnlyMemory`1" /></returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequenceSegment`1.Next">
      <summary vsli:raw="Gets or sets the next node.">次のノードを取得または設定します。</summary>
      <returns vsli:raw="The next node.">次のノード。</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequenceSegment`1.RunningIndex">
      <summary vsli:raw="Gets or sets the sum of node lengths before the current node.">現在のノードの前にあるノードの長さの合計を取得または設定します。</summary>
      <returns vsli:raw="The sum of node lengths before the current node.">現在のノードの前のノード長の合計。</returns>
    </member>
    <member name="T:System.Buffers.SequenceReader`1">
      <summary vsli:raw="Provides methods for reading binary and text data out of a &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; with a focus on performance and minimal or zero heap allocations.">パフォーマンスと最小またはゼロのヒープ割り当てに重点を置いて、<see cref="T:System.Buffers.ReadOnlySequence`1" /> からバイナリおよびテキスト データを読み取るためのメソッドを提供します。</summary>
      <typeparam name="T" vsli:raw="The type of the read-only sequence.">読み取り専用シーケンスの型。</typeparam>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.#ctor(System.Buffers.ReadOnlySequence{`0})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Buffers.SequenceReader`1&quot; /&gt; over a given &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">指定した <see cref="T:System.Buffers.ReadOnlySequence`1" /> に対して <see cref="T:System.Buffers.SequenceReader`1" /> を作成します。</summary>
      <param name="sequence" vsli:raw="The read-only sequence over which to create the &lt;see cref=&quot;T:System.Buffers.SequenceReader`1&quot; /&gt;.">
        <see cref="T:System.Buffers.SequenceReader`1" /> を作成する対象の読み取り専用シーケンス。</param>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.Advance(System.Int64)">
      <summary vsli:raw="Moves the reader ahead a specified number of items.">指定した項目数の分、リーダーを前進させます。</summary>
      <param name="count" vsli:raw="The number of items to advance.">前進する項目数。</param>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePast(`0)">
      <summary vsli:raw="Advances past consecutive instances of the given &lt;paramref name=&quot;value&quot; /&gt;.">指定された <paramref name="value" /> の連続するインスタンスを超えて前進させます。</summary>
      <param name="value" vsli:raw="The value past which the reader is to advance.">リーダーを前進させるために通過する値。</param>
      <returns vsli:raw="The number of positions the reader has advanced.">リーダーが前進した位置の数。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0)">
      <summary vsli:raw="Advances past consecutive instances of either of two specified values.">指定した値のいずれかの連続するインスタンスを超えて前進させます。</summary>
      <param name="value0" vsli:raw="The first value to skip.">スキップする 1 番目の値。</param>
      <param name="value1" vsli:raw="The second value to skip.">スキップする 2 番目の値。</param>
      <returns vsli:raw="The number of positions the reader has advanced.">リーダーが前進した位置の数。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0,`0)">
      <summary vsli:raw="Advances past consecutive instances of any of three specified values.">指定した 3 つの値のいずれかの連続するインスタンスを超えて前進させます。</summary>
      <param name="value0" vsli:raw="The first value to skip.">スキップする 1 番目の値。</param>
      <param name="value1" vsli:raw="The second value to skip.">スキップする 2 番目の値。</param>
      <param name="value2" vsli:raw="The third value to skip.">スキップする 3 番目の値。</param>
      <returns vsli:raw="The number of positions the reader has advanced.">リーダーが前進した位置の数。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0,`0,`0)">
      <summary vsli:raw="Advances past consecutive instances of any of four specified values.">指定した 4 つの値のいずれかの連続するインスタンスを超えて前進させます。</summary>
      <param name="value0" vsli:raw="The first value to skip.">スキップする 1 番目の値。</param>
      <param name="value1" vsli:raw="The second value to skip.">スキップする 2 番目の値。</param>
      <param name="value2" vsli:raw="The third value to skip.">スキップする 3 番目の値。</param>
      <param name="value3" vsli:raw="The fourth value to skip.">スキップする 4 番目の値。</param>
      <returns vsli:raw="The number of positions the reader has advanced.">リーダーが前進した位置の数。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePastAny(System.ReadOnlySpan{`0})">
      <summary vsli:raw="Skips consecutive instances of any of the specified &lt;paramref name=&quot;values&quot; /&gt;.">指定したいずれかの <paramref name="values" /> の連続するインスタンスをスキップします。</summary>
      <param name="values" vsli:raw="The values to be skipped.">スキップされる値。</param>
      <returns vsli:raw="The number of positions the reader has advanced.">リーダーが前進した位置の数。</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Consumed">
      <summary vsli:raw="Gets the total number of &lt;typeparamref name=&quot;T&quot; /&gt; values processed by the reader.">リーダーで処理された <typeparamref name="T" /> 値の合計数を取得します。</summary>
      <returns vsli:raw="The total number of values processed by the reader.">リーダーによって処理された値の合計数。</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.CurrentSpan">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Span`1&quot; /&gt; that contains the current segment in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">
        <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> 内の現在のセグメントが格納されている <see cref="T:System.Span`1" /> を取得します。</summary>
      <returns vsli:raw="A span that contains the current segment in the sequence.">シーケンス内の現在のセグメントを含むスパン。</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.CurrentSpanIndex">
      <summary vsli:raw="Gets the index in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.CurrentSpan&quot; /&gt;.">
        <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" /> 内のインデックスを取得します。</summary>
      <returns vsli:raw="The index in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.CurrentSpan&quot; /&gt;.">内のインデックス<see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />。</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.End">
      <summary vsli:raw="Gets a value that indicates whether there is no more data in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">
        <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> にこれ以上データがないかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; when there is no more data in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />に<see cref="P:System.Buffers.SequenceReader`1.Sequence" />データがそれ以上ない場合は。それ以外<see langword="false" />の場合は。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.IsNext(`0,System.Boolean)">
      <summary vsli:raw="Checks whether a specified value is next in the sequence.">指定された値がシーケンスの次にあるかどうかを確認します。</summary>
      <param name="next" vsli:raw="The value to compare the next items to.">次の項目を比較する値。</param>
      <param name="advancePast" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;next&quot; /&gt; values if they are found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="next" /> 値が見つかった場合、通過するときは <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the values are next in sequence; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">値がシーケンスで次に位置する場合、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.IsNext(System.ReadOnlySpan{`0},System.Boolean)">
      <summary vsli:raw="Checks whether the values specified in a read-only span are next in the sequence.">読み取り専用スパンで指定された値がシーケンスの次にあるかどうかを確認します。</summary>
      <param name="next" vsli:raw="The span to compare the next items to.">次の項目を比較するスパン。</param>
      <param name="advancePast" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;next&quot; /&gt; values if they are found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="next" /> 値が見つかった場合、通過するときは <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the values are next in sequence; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">値がシーケンスで次に位置する場合、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Length">
      <summary vsli:raw="Gets the count of items in the reader's &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">リーダーの <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> 内の項目の数を取得します。</summary>
      <returns vsli:raw="The count of items in the reader's &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">リーダーの<see cref="P:System.Buffers.SequenceReader`1.Sequence" />内の項目の数。</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Position">
      <summary vsli:raw="Gets the current position in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">
        <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> 内の現在の位置を取得します。</summary>
      <returns vsli:raw="The current position in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">内の現在の位置<see cref="P:System.Buffers.SequenceReader`1.Sequence" />。</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Remaining">
      <summary vsli:raw="Gets  the remaining items in the reader's &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">リーダーの <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> 内の残りの項目を取得します。</summary>
      <returns vsli:raw="The remaining items in the reader's &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;">リーダーのその他の項目<see cref="P:System.Buffers.SequenceReader`1.Sequence" /></returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.Rewind(System.Int64)">
      <summary vsli:raw="Moves the reader back the specified number of items.">指定した項目数の分、リーダーを戻します。</summary>
      <param name="count" vsli:raw="The number of items.">項目の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;count&quot; /&gt; is negative or greater than &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Consumed&quot; /&gt;.">
        <paramref name="count" /> が負か <see cref="P:System.Buffers.SequenceReader`1.Consumed" /> を超えています。</exception>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Sequence">
      <summary vsli:raw="Gets the underlying &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; for the reader.">リーダーの基になる <see cref="T:System.Buffers.ReadOnlySequence`1" /> を取得します。</summary>
      <returns vsli:raw="The underlying read-only sequence for the reader.">リーダーの基になる読み取り専用シーケンス。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryAdvanceTo(`0,System.Boolean)">
      <summary vsli:raw="Searches for a specified delimiter and optionally advances past it if it is found.">指定された区切り記号を検索し、見つかった場合は必要に応じてそれを超えて前進します。</summary>
      <param name="delimiter" vsli:raw="The delimiter to search for.">検索する区切り記号。</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if it is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="delimiter" /> が見つかった場合に通過するには <see langword="true" />、それ以外の場合は <see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the given &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定された <paramref name="delimiter" /> が見つかった場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryAdvanceToAny(System.ReadOnlySpan{`0},System.Boolean)">
      <summary vsli:raw="Searches for any of a number of specified delimiters and optionally advances past the first one to be found.">指定した任意の数の区切り記号を検索し、必要に応じて見つかった 1 つ目を超えて前進します。</summary>
      <param name="delimiters" vsli:raw="The delimiters to search for.">検索する区切り記号。</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the first instance of any of the given &lt;paramref name=&quot;delimiters&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to not move past the delimiter.">
        <see langword="true" /> のとき、指定された <paramref name="delimiters" /> の最初のインスタンスを通過します。 のとき、区切り記号を通過しません。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any of the given &lt;paramref name=&quot;delimiters&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定された <paramref name="delimiters" /> が見つかった場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryCopyTo(System.Span{`0})">
      <summary vsli:raw="Copies data from the current position to the given destination span if there is enough data to fill it.">スパンを埋めるのに十分なデータがある場合は、現在の位置から指定したコピー先スパンにデータをコピーします。</summary>
      <param name="destination" vsli:raw="Destination span to copy to.">コピー先のスパン。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is enough data to completely fill the &lt;paramref name=&quot;destination&quot; /&gt; span; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="destination" /> スパンを完全に埋める十分なデータがある場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryPeek(`0@)">
      <summary vsli:raw="Peeks at the next value without advancing the reader.">リーダーを前進させずに、次の値をピークします。</summary>
      <param name="value" vsli:raw="The next value, or the default value if at the end of the reader.">次の値、またはリーダーの末尾の場合は既定値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is not at its end and the peek operation succeeded; &lt;see langword=&quot;false&quot; /&gt; if at the end of the reader.">リーダーが末尾になく、ピーク操作が成功した場合は <see langword="true" />、リーダーの末尾にある場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryRead(`0@)">
      <summary vsli:raw="Reads the next value and advance the reader.">次の値を読み取ってリーダーを前進させます。</summary>
      <param name="value" vsli:raw="The next value, or the default value if at the end of the reader.">次の値、またはリーダーの末尾の場合は既定値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is not at its end and the read operation succeeded; &lt;see langword=&quot;false&quot; /&gt; if at the end of the reader.">リーダーが末尾になく、読み取り操作が成功した場合は <see langword="true" />、リーダーの末尾にある場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,`0,`0,System.Boolean)">
      <summary vsli:raw="Tries to read everything up to the given &lt;paramref name=&quot;delimiter&quot; /&gt;, ignoring delimiters that are preceded by &lt;paramref name=&quot;delimiterEscape&quot; /&gt;.">
        <paramref name="delimiterEscape" /> の後の区切り記号は無視して、指定された <paramref name="delimiter" /> まですべての読み取りを試みます。</summary>
      <param name="sequence" vsli:raw="When the method returns, contains the data read, if any.">メソッドから戻るときに、読み取られたデータが含まれます (ある場合)。</param>
      <param name="delimiter" vsli:raw="The delimiter to look for.">検索する区切り記号。</param>
      <param name="delimiterEscape" vsli:raw="A value that indicates that an immediately following &lt;paramref name=&quot;delimiter&quot; /&gt; is to be skipped.">
        <paramref name="delimiter" /> の直後がスキップされることを示す値。</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="delimiter" /> 値が見つかった場合、通過するときは <see langword="true" />。それ以外の場合は、<see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="delimiter" /> が見つかった場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,`0,System.Boolean)">
      <summary vsli:raw="Tries to read everything up to the given &lt;paramref name=&quot;delimiter&quot; /&gt;.">指定された <paramref name="delimiter" /> まですべての読み取りを試みます。</summary>
      <param name="sequence" vsli:raw="When the method returns, contains the data read, if any.">メソッドから戻るときに、読み取られたデータが含まれます (ある場合)。</param>
      <param name="delimiter" vsli:raw="The delimiter to look for.">検索する区切り記号。</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="delimiter" /> 値が見つかった場合、通過するときは <see langword="true" />。それ以外の場合は、<see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="delimiter" /> が見つかった場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,System.ReadOnlySpan{`0},System.Boolean)">
      <summary vsli:raw="Tries to read data until the entire delimiter specified as a read-only span matches.">読み取り専用スパンとして指定された全体の区切り記号が一致するまで、データの読み取りが試行されます。</summary>
      <param name="sequence" vsli:raw="When the method returns, contains the data read, if any.">メソッドから戻るときに、読み取られたデータが含まれます (ある場合)。</param>
      <param name="delimiter" vsli:raw="A read-only span that contains one or more delimiters.">1 つ以上の区切り記号を含む読み取り専用スパン。</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="delimiter" /> 値が見つかった場合、通過するときは <see langword="true" />。それ以外の場合は、<see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="delimiter" /> が見つかった場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.ReadOnlySpan{`0}@,`0,`0,System.Boolean)">
      <summary vsli:raw="Tries to read everything up to the given &lt;paramref name=&quot;delimiter&quot; /&gt;, ignoring delimiters that are preceded by &lt;paramref name=&quot;delimiterEscape&quot; /&gt;.">
        <paramref name="delimiterEscape" /> の後の区切り記号は無視して、指定された <paramref name="delimiter" /> まですべての読み取りを試みます。</summary>
      <param name="span" vsli:raw="When the method returns, contains the data read, if any.">メソッドから戻るときに、読み取られたデータが含まれます (ある場合)。</param>
      <param name="delimiter" vsli:raw="The delimiter to look for.">検索する区切り記号。</param>
      <param name="delimiterEscape" vsli:raw="A value that indicates that an immediately following &lt;paramref name=&quot;delimiter&quot; /&gt; is to be skipped.">
        <paramref name="delimiter" /> の直後がスキップされることを示す値。</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="delimiter" /> 値が見つかった場合、通過するときは <see langword="true" />。それ以外の場合は、<see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="delimiter" /> が見つかった場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.ReadOnlySpan{`0}@,`0,System.Boolean)">
      <summary vsli:raw="Tries to read everything up to the given &lt;paramref name=&quot;delimiter&quot; /&gt;.">指定された <paramref name="delimiter" /> まですべての読み取りを試みます。</summary>
      <param name="span" vsli:raw="When the method returns, contains the data read, if any.">メソッドから戻るときに、読み取られたデータが含まれます (ある場合)。</param>
      <param name="delimiter" vsli:raw="The delimiter to look for.">検索する区切り記号。</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="delimiter" /> 値が見つかった場合、通過するときは <see langword="true" />。それ以外の場合は、<see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="delimiter" /> が見つかった場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadToAny(System.Buffers.ReadOnlySequence{`0}@,System.ReadOnlySpan{`0},System.Boolean)">
      <summary vsli:raw="Tries to read everything up to any of the specified &lt;paramref name=&quot;delimiters&quot; /&gt;.">指定したいずれかの <paramref name="delimiters" /> まですべての読み取りを試みます。</summary>
      <param name="sequence" vsli:raw="When the method returns, contains the data read, if any.">メソッドから戻るときに、読み取られたデータが含まれます (ある場合)。</param>
      <param name="delimiters" vsli:raw="The delimiters to look for.">検索する区切り記号。</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the first found instance of any of the given &lt;paramref name=&quot;delimiters&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> のとき、指定された <paramref name="delimiters" /> の最初に見つかったインスタンスを通過します。それ以外の場合は、<see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any of the &lt;paramref name=&quot;delimiters&quot; /&gt; were found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="delimiters" /> のいずれかが見つかった場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadToAny(System.ReadOnlySpan{`0}@,System.ReadOnlySpan{`0},System.Boolean)">
      <summary vsli:raw="Tries to read everything up to any of the specified &lt;paramref name=&quot;delimiters&quot; /&gt;.">指定したいずれかの <paramref name="delimiters" /> まですべての読み取りを試みます。</summary>
      <param name="span" vsli:raw="When the method returns, contains the data read, if any.">メソッドから戻るときに、読み取られたデータが含まれます (ある場合)。</param>
      <param name="delimiters" vsli:raw="The delimiters to look for.">検索する区切り記号。</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the first found instance of any of the given &lt;paramref name=&quot;delimiters&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> のとき、指定された <paramref name="delimiters" /> の最初に見つかったインスタンスを通過します。それ以外の場合は、<see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any of the &lt;paramref name=&quot;delimiters&quot; /&gt; were found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="delimiters" /> のいずれかが見つかった場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.UnreadSpan">
      <summary vsli:raw="Gets the unread portion of the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.CurrentSpan&quot; /&gt;.">
        <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" /> の未読の部分を取得します。</summary>
      <returns vsli:raw="The unread portion of the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.CurrentSpan&quot; /&gt;.">の未読の部分<see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />。</returns>
    </member>
    <member name="T:System.Buffers.SequenceReaderExtensions">
      <summary vsli:raw="Provides extended functionality for the &lt;see cref=&quot;T:System.Buffers.SequenceReader`1&quot; /&gt; class that allows reading of endian specific numeric values from binary data.">バイナリ データからのエンディアン固有の数値の読み取りを許可する <see cref="T:System.Buffers.SequenceReader`1" /> クラスの拡張機能を提供します。</summary>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadBigEndian(System.Buffers.SequenceReader{System.Byte},System.Int16@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int16&quot; /&gt; as big endian.">ビッグ エンディアンとしての <see cref="T:System.Int16" /> の読み取りを試行します。</summary>
      <param name="reader" vsli:raw="The byte sequence reader instance from which the value is to be read.">値の読み取り元となるバイト シーケンス リーダー インスタンス。</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as big endian.">メソッドから制御が戻るときに、ビッグ エンディアンとして、バイト シーケンス リーダーから読み取られる値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">読み取り操作が成功した場合は <see langword="true" />、<see cref="T:System.Int16" /> のための十分なデータがない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadBigEndian(System.Buffers.SequenceReader{System.Byte},System.Int32@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int32&quot; /&gt; as big endian.">ビッグ エンディアンとしての <see cref="T:System.Int32" /> の読み取りを試行します。</summary>
      <param name="reader" vsli:raw="The byte sequence reader from which to read the value.">値の読み取り元となるバイト シーケン スリーダー。</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as big endian.">メソッドから制御が戻るときに、ビッグ エンディアンとして、バイト シーケンス リーダーから読み取られる値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">読み取り操作が成功した場合は <see langword="true" />、<see cref="T:System.Int32" /> のための十分なデータがない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadBigEndian(System.Buffers.SequenceReader{System.Byte},System.Int64@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int64&quot; /&gt; as big endian.">ビッグ エンディアンとしての <see cref="T:System.Int64" /> の読み取りを試行します。</summary>
      <param name="reader" vsli:raw="The byte sequence reader instance from which the value is to be read.">値の読み取り元となるバイト シーケンス リーダー インスタンス。</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as big endian.">メソッドから制御が戻るときに、ビッグ エンディアンとして、バイト シーケンス リーダーから読み取られる値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">読み取り操作が成功した場合は <see langword="true" />、<see cref="T:System.Int64" /> のための十分なデータがない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadLittleEndian(System.Buffers.SequenceReader{System.Byte},System.Int16@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int16&quot; /&gt; as little endian.">リトル エンディアンとしての <see cref="T:System.Int16" /> の読み取りを試行します。</summary>
      <param name="reader" vsli:raw="The byte sequence reader instance from which the value is to be read.">値の読み取り元となるバイト シーケンス リーダー インスタンス。</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as little endian.">メソッドから制御が戻るときに、リトル エンディアンとして、バイト シーケンス リーダーから読み取られる値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">読み取り操作が成功した場合は <see langword="true" />、<see cref="T:System.Int16" /> のための十分なデータがない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadLittleEndian(System.Buffers.SequenceReader{System.Byte},System.Int32@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int32&quot; /&gt; as little endian.">リトル エンディアンとしての <see cref="T:System.Int32" /> の読み取りを試行します。</summary>
      <param name="reader" vsli:raw="The byte sequence reader instance from which the value is to be read.">値の読み取り元となるバイト シーケンス リーダー インスタンス。</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as little endian.">メソッドから制御が戻るときに、リトル エンディアンとして、バイト シーケンス リーダーから読み取られる値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">読み取り操作が成功した場合は <see langword="true" />、<see cref="T:System.Int32" /> のための十分なデータがない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadLittleEndian(System.Buffers.SequenceReader{System.Byte},System.Int64@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int64&quot; /&gt; as little endian.">リトル エンディアンとしての <see cref="T:System.Int64" /> の読み取りを試行します。</summary>
      <param name="reader" vsli:raw="The byte sequence reader instance from which the value is to be read.">値の読み取り元となるバイト シーケンス リーダー インスタンス。</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as little endian.">メソッドから制御が戻るときに、リトル エンディアンとして、バイト シーケンス リーダーから読み取られる値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">読み取り操作が成功した場合は <see langword="true" />、<see cref="T:System.Int64" /> のための十分なデータがない場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Buffers.StandardFormat">
      <summary vsli:raw="Represents a standard format string without using an actual string.">実際の文字列を使用せずに標準書式の文字列を表します。</summary>
    </member>
    <member name="M:System.Buffers.StandardFormat.#ctor(System.Char,System.Byte)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; structure.">
        <see cref="T:System.Buffers.StandardFormat" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="symbol" vsli:raw="A type-specific format specifier, such as 'G', 'D', or 'X'.">'G'、'D'、'X' などの、型固有の書式指定子。</param>
      <param name="precision" vsli:raw="An optional precision ranging from 0 to 99, or the special value &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt; (the default).">0 から 99 までの任意の有効桁数、または特殊な値 <see cref="F:System.Buffers.StandardFormat.NoPrecision" /> (既定)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;symbol&quot; /&gt; is not &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt;, and its value is greater than &lt;see cref=&quot;F:System.Buffers.StandardFormat.MaxPrecision&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;symbol&quot; /&gt; cannot be converted to a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">
        <paramref name="symbol" /> が <see cref="F:System.Buffers.StandardFormat.NoPrecision" /> ではなく、その値が <see cref="F:System.Buffers.StandardFormat.MaxPrecision" /> を超えています。

または -

<paramref name="symbol" /> を <see cref="T:System.Byte" /> に変換できません。</exception>
    </member>
    <member name="M:System.Buffers.StandardFormat.Equals(System.Buffers.StandardFormat)">
      <summary vsli:raw="Returns a value that indicates whether the specified &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; is equal to the current instance.">指定した <see cref="T:System.Buffers.StandardFormat" /> が現在のインスタンスと等しいかどうかを示す値を返します。</summary>
      <param name="other" vsli:raw="The format to compare to the current instance.">現在のインスタンスと比較する対象の形式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">2 つのインスタンスが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the specified object is a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; object that is equal to the current instance.">指定したオブジェクトが、現在のインスタンスと等しい <see cref="T:System.Buffers.StandardFormat" /> オブジェクトであるかどうかを示す値を返します。</summary>
      <param name="obj" vsli:raw="An object to compare to the current instance.">現在のインスタンスと比較する対象のオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">2 つのインスタンスが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">このインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="The hash code for this instance.">対象のインスタンスのハッシュ コード。</returns>
    </member>
    <member name="P:System.Buffers.StandardFormat.HasPrecision">
      <summary vsli:raw="Gets a value that indicates whether a format has a defined precision.">書式に定義された有効桁数が含まれるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the format has a precision other than &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />形式の有効桁数が以外<see cref="F:System.Buffers.StandardFormat.NoPrecision" />の場合は。それ以外の<see langword="false" />場合は。</returns>
    </member>
    <member name="P:System.Buffers.StandardFormat.IsDefault">
      <summary vsli:raw="Gets a value that indicates whether the current instance is a default format.">現在のインスタンスが既定の書式かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance is a default format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />現在のインスタンスが既定の形式である場合は。それ以外<see langword="false" />の場合は。</returns>
    </member>
    <member name="F:System.Buffers.StandardFormat.MaxPrecision">
      <summary vsli:raw="Defines the maximum valid precision value.">最大有効桁数の値を定義します。</summary>
    </member>
    <member name="F:System.Buffers.StandardFormat.NoPrecision">
      <summary vsli:raw="Indicates that a format doesn't use a precision or that the precision is unspecified.">書式が有効桁数を使用しないか、有効桁数が指定されていないことを示します。</summary>
    </member>
    <member name="M:System.Buffers.StandardFormat.op_Equality(System.Buffers.StandardFormat,System.Buffers.StandardFormat)">
      <summary vsli:raw="Returns a value that indicates whether two &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instances are equal.">2 つの <see cref="T:System.Buffers.StandardFormat" /> インスタンスが等しいかどうかを示す値を返します。</summary>
      <param name="left" vsli:raw="The first format to compare.">比較対象となる最初の書式。</param>
      <param name="right" vsli:raw="The second format to compare.">比較対象となる 2 番目の書式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">2 つのインスタンスが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.op_Implicit(System.Char)~System.Buffers.StandardFormat">
      <summary vsli:raw="Converts a character to a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instance using &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt; precision.">
        <see cref="F:System.Buffers.StandardFormat.NoPrecision" /> の有効桁数を使用して、文字を <see cref="T:System.Buffers.StandardFormat" /> インスタンスに変換します。</summary>
      <param name="symbol" vsli:raw="The character to convert to a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; value.">
        <see cref="T:System.Buffers.StandardFormat" /> 値に変換する文字。</param>
      <returns vsli:raw="A format with a &lt;see cref=&quot;P:System.Buffers.StandardFormat.Symbol&quot; /&gt; property equal to &lt;paramref name=&quot;symbol&quot; /&gt; and a &lt;see cref=&quot;P:System.Buffers.StandardFormat.Precision&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt;.">
        <paramref name="symbol" /> と等しい <see cref="P:System.Buffers.StandardFormat.Symbol" /> プロパティおよび <see cref="F:System.Buffers.StandardFormat.NoPrecision" /> と等しい <see cref="P:System.Buffers.StandardFormat.Precision" /> プロパティを含む書式。</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.op_Inequality(System.Buffers.StandardFormat,System.Buffers.StandardFormat)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instances are unequal.">2 つの <see cref="T:System.Buffers.StandardFormat" /> インスタンスが等しくないかどうかを判断します。</summary>
      <param name="left" vsli:raw="The first format to compare.">比較対象となる最初の書式。</param>
      <param name="right" vsli:raw="The second format to compare.">比較対象となる 2 番目の書式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two formats are unequal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">2 つの書式が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.Parse(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Converts a &lt;see langword=&quot;ReadOnlySpan&amp;lt;System.Char&amp;gt;&quot; /&gt; into a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instance using &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt; precision.">
        <see cref="F:System.Buffers.StandardFormat.NoPrecision" /> の有効桁数を使用して、<see langword="ReadOnlySpan&lt;System.Char&gt;" /> を <see cref="T:System.Buffers.StandardFormat" /> インスタンスに変換します。</summary>
      <param name="format" vsli:raw="A read-only span that contains the character to parse.">解析対象の文字が含まれる読み取り専用のスパン。</param>
      <returns vsli:raw="A value whose &lt;see cref=&quot;P:System.Buffers.StandardFormat.Symbol&quot; /&gt; property value is the character in &lt;paramref name=&quot;format&quot; /&gt; and whose &lt;see cref=&quot;P:System.Buffers.StandardFormat.Precision&quot; /&gt; property value is &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt;.">
        <see cref="P:System.Buffers.StandardFormat.Symbol" /> プロパティの値が <paramref name="format" /> の文字で、<see cref="P:System.Buffers.StandardFormat.Precision" /> プロパティの値が <see cref="F:System.Buffers.StandardFormat.NoPrecision" /> である値。</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.Parse(System.String)">
      <summary vsli:raw="Converts a classic .NET standard format string to a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instance.">従来の .NET 標準書式文字列を <see cref="T:System.Buffers.StandardFormat" /> インスタンスに変換します。</summary>
      <param name="format" vsli:raw="A classic .NET standard format string.">従来の .NET 標準書式文字列。</param>
      <returns vsli:raw="A format.">書式。</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;format&quot; /&gt; is not a valid standard format string.">
        <paramref name="format" /> は有効な標準書式指定文字列ではありません。</exception>
    </member>
    <member name="P:System.Buffers.StandardFormat.Precision">
      <summary vsli:raw="Gets the precision component of the format.">書式の有効桁数のコンポーネントを取得します。</summary>
      <returns vsli:raw="The precision component, which can be &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt;, or can range from 0 to 9.">有効桁数コンポーネント<see cref="F:System.Buffers.StandardFormat.NoPrecision" />。 0 ~ 9 の範囲で指定できます。</returns>
    </member>
    <member name="P:System.Buffers.StandardFormat.Symbol">
      <summary vsli:raw="Gets the character component of the format.">書式の文字のコンポーネントを取得します。</summary>
      <returns vsli:raw="The character component of the format.">形式の文字部分。</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.ToString">
      <summary vsli:raw="Returns the string representation of this format.">この書式の文字列表現を返します。</summary>
      <returns vsli:raw="The string representation of this format.">この書式の文字列表現。</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.TryParse(System.ReadOnlySpan{System.Char},System.Buffers.StandardFormat@)">
      <summary vsli:raw="Attempts to convert a &lt;see langword=&quot;ReadOnlySpan&amp;lt;Char&amp;gt;&quot; /&gt; to a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instance and returns a value that indicates whether the parsing operation succeeded.">
        <see cref="T:System.Buffers.StandardFormat" /> インスタンスへの <see langword="ReadOnlySpan&lt;Char&gt;" /> の変換を試みて、解析操作が成功したかどうかを示す値を返します。</summary>
      <param name="format" vsli:raw="A read-only span that contains the character to convert.">変換対象の文字が含まれる読み取り専用のスパン。</param>
      <param name="result" vsli:raw="When the method returns, contains the parsed &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instance if the operation was successful.">操作が正常に終了した場合は、メソッドから戻るときに、解析された <see cref="T:System.Buffers.StandardFormat" /> インスタンスが格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the parsing operation was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">解析操作が正常に実行された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Buffers.Text.Base64">
      <summary>バイナリ データと base 64 で表される UTF-8 でエンコードされたテキスト間の変換を行います。</summary>
    </member>
    <member name="M:System.Buffers.Text.Base64.DecodeFromUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean)">
      <summary>base 64 として表される UTF-8 でエンコードされたテキストのスパンをバイナリ データにデコードします。 入力が 4 の倍数でない場合は、可能な限り 4 の倍数に最も近い値にデコードされます。</summary>
      <param name="utf8">デコードが必要な base 64 方式の UTF-8 でエンコードされたテキストを含む入力スパン。</param>
      <param name="bytes">操作の結果 (つまり、デコードされたバイナリ データ) を含む出力スパン。</param>
      <param name="bytesConsumed">操作中に使用された入力バイト数。 必要な場合、これを使用して後続の呼び出しの入力をスライスできます。</param>
      <param name="bytesWritten">出力スパンに書き込まれたバイト数。 必要な場合、これを使用して後続の呼び出しの出力をスライスできます。</param>
      <param name="isFinalBlock">デコードするデータ全体が入力スパンに含まれている場合は <see langword="true" /> (既定値)。 一部のデータが入力スパンに含まれており、後続のデータがある場合は <see langword="false" />。</param>
      <returns>デコード操作の状態を示す列挙値の 1 つ。</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.DecodeFromUtf8InPlace(System.Span{System.Byte},System.Int32@)">
      <summary>base 64 方式の UTF-8 でエンコードされたテキストのスパン (インプレース) をバイナリ データにデコードします。 デコードされたバイナリ出力は、入力に含まれるテキスト データよりも小さくなります (この操作ではデータがデフレートされます)。 入力が 4 の倍数でない場合、このメソッドではデータがデコードされません。</summary>
      <param name="buffer">デコードが必要な base-64 テキスト データを含む入力スパン。</param>
      <param name="bytesWritten">バッファーに書き込まれたバイト数。</param>
      <returns>デコード操作の状態を示す列挙値の 1 つ。</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.EncodeToUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean)">
      <summary>バイナリ データのスパンを base 64 として表される UTF-8 でエンコードされたテキストにエンコードします。</summary>
      <param name="bytes">エンコードが必要なバイナリ データを含む入力スパン。</param>
      <param name="utf8">操作の結果 (つまり、base 64 方式の UTF-8 でエンコードされたテキスト) を含む出力スパン。</param>
      <param name="bytesConsumed">操作中に使用された入力バイト数。 必要な場合、これを使用して後続の呼び出しの入力をスライスできます。</param>
      <param name="bytesWritten">出力スパンに書き込まれたバイト数。 必要な場合、これを使用して後続の呼び出しの出力をスライスできます。</param>
      <param name="isFinalBlock">エンコードするデータ全体が入力スパンに含まれている場合は <see langword="true" /> (既定値)。 一部のデータが入力スパンに含まれており、後続のデータがある場合は <see langword="false" />。</param>
      <returns>エンコード操作の状態を示す列挙値の 1 つ。</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.EncodeToUtf8InPlace(System.Span{System.Byte},System.Int32,System.Int32@)">
      <summary>バイナリ データのスパン (インプレース) を base 64 として表される UTF-8 でエンコードされたテキストにエンコードします。 エンコードされたテキスト出力は、入力に含まれるバイナリ データよりも大きくなります (この操作ではデータがインフレートされます)。</summary>
      <param name="buffer">エンコードが必要なバイナリ データを含む入力スパン。 このメソッドではインプレース変換が実行されるので、操作の結果を格納するための十分な大きさが必要です。</param>
      <param name="dataLength">エンコードが必要な、バッファー内に含まれるバイナリ データのバイト数。 この値はバッファー長より小さくしてください。</param>
      <param name="bytesWritten">バッファーに書き込まれたバイト数。</param>
      <returns>エンコード操作の状態を示す列挙値の 1 つ。</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.GetMaxDecodedFromUtf8Length(System.Int32)">
      <summary>指定された長さのバイト スパン内の base-64 でエンコードされたテキストをデコードする場合は、結果の最大長 (バイト数) を返します。</summary>
      <param name="length">バイト スパンのサイズ。</param>
      <returns>結果の最大長 (バイト単位)。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Buffers.Text.Base64.GetMaxEncodedToUtf8Length(System.Int32)">
      <summary>指定された長さのバイト スパン内のバイナリ データをエンコードする場合は、結果の最大長 (バイト数) を返します。</summary>
      <param name="length">バイト スパンのサイズ。</param>
      <returns>結果の最大長 (バイト単位)。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> は 0 未満または 1610612733 より大きくなります (エンコードによってデータが 4/3 倍にインフレートされるため)。</exception>
    </member>
    <member name="T:System.Buffers.Text.Utf8Formatter">
      <summary vsli:raw="Provides static methods to format common data types as Utf8 strings.">一般的なデータ型を Utf8 文字列として書式設定するための静的メソッドを提供します。</summary>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Boolean,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; as a UTF8 string.">UTF8 文字列として <see cref="T:System.Boolean" /> を書式設定します。</summary>
      <param name="value" vsli:raw="The value to format.">書式を変換する値。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 形式の値を書き込むバッファー。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">メソッドが戻るとき、書式設定されたテキストの長さがバイト単位で含まれます。</param>
      <param name="format" vsli:raw="The standard format to use.">使用する標準書式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">書式設定操作が成功した場合、<see langword="true" />。<paramref name="buffer" /> が小さすぎる場合、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Byte,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Byte&quot; /&gt; as a UTF8 string.">UTF8 文字列として <see cref="T:System.Byte" /> を書式設定します。</summary>
      <param name="value" vsli:raw="The value to format.">書式を変換する値。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 形式の値を書き込むバッファー。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">メソッドが戻るとき、書式設定されたテキストの長さがバイト単位で含まれます。</param>
      <param name="format" vsli:raw="The standard format to use.">使用する標準書式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">書式設定操作が成功した場合、<see langword="true" />。<paramref name="buffer" /> が小さすぎる場合、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.DateTime,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; as a UTF8 string.">UTF8 文字列として <see cref="T:System.DateTime" /> を書式設定します。</summary>
      <param name="value" vsli:raw="The value to format.">書式を変換する値。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 形式の値を書き込むバッファー。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">メソッドが戻るとき、書式設定されたテキストの長さがバイト単位で含まれます。</param>
      <param name="format" vsli:raw="The standard format to use.">使用する標準書式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">書式設定操作が成功した場合、<see langword="true" />。<paramref name="buffer" /> が小さすぎる場合、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.DateTimeOffset,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; as a UTF8 string.">UTF8 文字列として <see cref="T:System.DateTimeOffset" /> を書式設定します。</summary>
      <param name="value" vsli:raw="The value to format.">書式を変換する値。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 形式の値を書き込むバッファー。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">メソッドが戻るとき、書式設定されたテキストの長さがバイト単位で含まれます。</param>
      <param name="format" vsli:raw="The standard format to use.">使用する標準書式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">書式設定操作が成功した場合、<see langword="true" />。<paramref name="buffer" /> が小さすぎる場合、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Decimal,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; as a UTF8 string.">UTF8 文字列として <see cref="T:System.Decimal" /> を書式設定します。</summary>
      <param name="value" vsli:raw="The value to format.">書式を変換する値。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 形式の値を書き込むバッファー。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">メソッドが戻るとき、書式設定されたテキストの長さがバイト単位で含まれます。</param>
      <param name="format" vsli:raw="The standard format to use.">使用する標準書式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">書式設定操作が成功した場合、<see langword="true" />。<paramref name="buffer" /> が小さすぎる場合、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Double,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Double&quot; /&gt; as a UTF8 string.">UTF8 文字列として <see cref="T:System.Double" /> を書式設定します。</summary>
      <param name="value" vsli:raw="The value to format.">書式を変換する値。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 形式の値を書き込むバッファー。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">メソッドが戻るとき、書式設定されたテキストの長さがバイト単位で含まれます。</param>
      <param name="format" vsli:raw="The standard format to use.">使用する標準書式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">書式設定操作が成功した場合、<see langword="true" />。<paramref name="buffer" /> が小さすぎる場合、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Guid,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Guid&quot; /&gt; as a UTF8 string.">UTF8 文字列として <see cref="T:System.Guid" /> を書式設定します。</summary>
      <param name="value" vsli:raw="The value to format.">書式を変換する値。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 形式の値を書き込むバッファー。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">メソッドが戻るとき、書式設定されたテキストの長さがバイト単位で含まれます。</param>
      <param name="format" vsli:raw="The standard format to use.">使用する標準書式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">書式設定操作が成功した場合、<see langword="true" />。<paramref name="buffer" /> が小さすぎる場合、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Int16,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats an &lt;see cref=&quot;T:System.Int16&quot; /&gt; as a UTF8 string.">UTF8 文字列として <see cref="T:System.Int16" /> を書式設定します。</summary>
      <param name="value" vsli:raw="The value to format.">書式を変換する値。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 形式の値を書き込むバッファー。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">メソッドが戻るとき、書式設定されたテキストの長さがバイト単位で含まれます。</param>
      <param name="format" vsli:raw="The standard format to use.">使用する標準書式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">書式設定操作が成功した場合、<see langword="true" />。<paramref name="buffer" /> が小さすぎる場合、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Int32,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats an &lt;see cref=&quot;T:System.Int32&quot; /&gt; as a UTF8 string.">UTF8 文字列として <see cref="T:System.Int32" /> を書式設定します。</summary>
      <param name="value" vsli:raw="The value to format.">書式を変換する値。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 形式の値を書き込むバッファー。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">メソッドが戻るとき、書式設定されたテキストの長さがバイト単位で含まれます。</param>
      <param name="format" vsli:raw="The standard format to use.">使用する標準書式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">書式設定操作が成功した場合、<see langword="true" />。<paramref name="buffer" /> が小さすぎる場合、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Int64,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats an &lt;see cref=&quot;T:System.Int64&quot; /&gt; as a UTF8 string.">UTF8 文字列として <see cref="T:System.Int64" /> を書式設定します。</summary>
      <param name="value" vsli:raw="The value to format.">書式を変換する値。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 形式の値を書き込むバッファー。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">メソッドが戻るとき、書式設定されたテキストの長さがバイト単位で含まれます。</param>
      <param name="format" vsli:raw="The standard format to use.">使用する標準書式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">書式設定操作が成功した場合、<see langword="true" />。<paramref name="buffer" /> が小さすぎる場合、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.SByte,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats an &lt;see cref=&quot;T:System.SByte&quot; /&gt; as a UTF8 string.">UTF8 文字列として <see cref="T:System.SByte" /> を書式設定します。</summary>
      <param name="value" vsli:raw="The value to format.">書式を変換する値。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 形式の値を書き込むバッファー。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">メソッドが戻るとき、書式設定されたテキストの長さがバイト単位で含まれます。</param>
      <param name="format" vsli:raw="The standard format to use.">使用する標準書式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">書式設定操作が成功した場合、<see langword="true" />。<paramref name="buffer" /> が小さすぎる場合、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Single,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Single&quot; /&gt; as a UTF8 string.">UTF8 文字列として <see cref="T:System.Single" /> を書式設定します。</summary>
      <param name="value" vsli:raw="The value to format.">書式を変換する値。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 形式の値を書き込むバッファー。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">メソッドが戻るとき、書式設定されたテキストの長さがバイト単位で含まれます。</param>
      <param name="format" vsli:raw="The standard format to use.">使用する標準書式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">書式設定操作が成功した場合、<see langword="true" />。<paramref name="buffer" /> が小さすぎる場合、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.TimeSpan,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; as a UTF8 string.">UTF8 文字列として <see cref="T:System.TimeSpan" /> を書式設定します。</summary>
      <param name="value" vsli:raw="The value to format.">書式を変換する値。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 形式の値を書き込むバッファー。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">メソッドが戻るとき、書式設定されたテキストの長さがバイト単位で含まれます。</param>
      <param name="format" vsli:raw="The standard format to use.">使用する標準書式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">書式設定操作が成功した場合、<see langword="true" />。<paramref name="buffer" /> が小さすぎる場合、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.UInt16,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; as a UTF8 string.">UTF8 文字列として <see cref="T:System.UInt16" /> を書式設定します。</summary>
      <param name="value" vsli:raw="The value to format.">書式を変換する値。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 形式の値を書き込むバッファー。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">メソッドが戻るとき、書式設定されたテキストの長さがバイト単位で含まれます。</param>
      <param name="format" vsli:raw="The standard format to use.">使用する標準書式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">書式設定操作が成功した場合、<see langword="true" />。<paramref name="buffer" /> が小さすぎる場合、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.UInt32,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; as a UTF8 string.">UTF8 文字列として <see cref="T:System.UInt32" /> を書式設定します。</summary>
      <param name="value" vsli:raw="The value to format.">書式を変換する値。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 形式の値を書き込むバッファー。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">メソッドが戻るとき、書式設定されたテキストの長さがバイト単位で含まれます。</param>
      <param name="format" vsli:raw="The standard format to use.">使用する標準書式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">書式設定操作が成功した場合、<see langword="true" />。<paramref name="buffer" /> が小さすぎる場合、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.UInt64,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; as a UTF8 string.">UTF8 文字列として <see cref="T:System.UInt64" /> を書式設定します。</summary>
      <param name="value" vsli:raw="The value to format.">書式を変換する値。</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">UTF8 形式の値を書き込むバッファー。</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">メソッドが戻るとき、書式設定されたテキストの長さがバイト単位で含まれます。</param>
      <param name="format" vsli:raw="The standard format to use.">使用する標準書式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">書式設定操作が成功した場合、<see langword="true" />。<paramref name="buffer" /> が小さすぎる場合、<see langword="false" />。</returns>
    </member>
    <member name="T:System.Buffers.Text.Utf8Parser">
      <summary vsli:raw="Provides static methods to parse Utf8 strings to common data types.">Utf8 文字列を一般的なデータ型に解析するための静的メソッドを提供します。</summary>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Boolean@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; at the start of a Utf8 string.">Utf8 文字列の先頭で <see cref="T:System.Boolean" /> を解析します。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">解析する Utf8 文字列。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。 メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 文字列の予期される形式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Byte@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Byte&quot; /&gt; at the start of a Utf8 string.">Utf8 文字列の先頭で <see cref="T:System.Byte" /> を解析します。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">解析する Utf8 文字列。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。 メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 文字列の予期される形式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTime@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; at the start of a Utf8 string.">Utf8 文字列の先頭で <see cref="T:System.DateTime" /> を解析します。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">解析する Utf8 文字列。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。 メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 文字列の予期される形式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTimeOffset@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; at the start of a Utf8 string.">Utf8 文字列の先頭で <see cref="T:System.DateTimeOffset" /> を解析します。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">解析する Utf8 文字列。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。 メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 文字列の予期される形式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Decimal@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; at the start of a Utf8 string.">Utf8 文字列の先頭で <see cref="T:System.Decimal" /> を解析します。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">解析する Utf8 文字列。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。 メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 文字列の予期される形式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Double@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Double&quot; /&gt; at the start of a Utf8 string.">Utf8 文字列の先頭で <see cref="T:System.Double" /> を解析します。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">解析する Utf8 文字列。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。 メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 文字列の予期される形式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Guid@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Guid&quot; /&gt; at the start of a Utf8 string.">Utf8 文字列の先頭で <see cref="T:System.Guid" /> を解析します。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">解析する Utf8 文字列。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。 メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 文字列の予期される形式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int16@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses an &lt;see cref=&quot;T:System.Int16&quot; /&gt; at the start of a Utf8 string.">Utf8 文字列の先頭で <see cref="T:System.Int16" /> を解析します。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">解析する Utf8 文字列。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。 メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 文字列の予期される形式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int32@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses an &lt;see cref=&quot;T:System.Int32&quot; /&gt; at the start of a Utf8 string.">Utf8 文字列の先頭で <see cref="T:System.Int32" /> を解析します。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">解析する Utf8 文字列。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。 メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 文字列の予期される形式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int64@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses an &lt;see cref=&quot;T:System.Int64&quot; /&gt; at the start of a Utf8 string.">Utf8 文字列の先頭で <see cref="T:System.Int64" /> を解析します。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">解析する Utf8 文字列。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。 メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 文字列の予期される形式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.SByte@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses an &lt;see cref=&quot;T:System.SByte&quot; /&gt; at the start of a Utf8 string.">Utf8 文字列の先頭で <see cref="T:System.SByte" /> を解析します。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">解析する Utf8 文字列。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。 メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 文字列の予期される形式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Single@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Single&quot; /&gt; at the start of a Utf8 string.">Utf8 文字列の先頭で <see cref="T:System.Single" /> を解析します。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">解析する Utf8 文字列。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。 メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 文字列の予期される形式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.TimeSpan@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; at the start of a Utf8 string.">Utf8 文字列の先頭で <see cref="T:System.TimeSpan" /> を解析します。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">解析する Utf8 文字列。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。 メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 文字列の予期される形式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt16@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; at the start of a Utf8 string.">Utf8 文字列の先頭で <see cref="T:System.UInt16" /> を解析します。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">解析する Utf8 文字列。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。 メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 文字列の予期される形式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt32@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; at the start of a Utf8 string.">Utf8 文字列の先頭で <see cref="T:System.UInt32" /> を解析します。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">解析する Utf8 文字列。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。 メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 文字列の予期される形式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt64@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; at the start of a Utf8 string.">Utf8 文字列の先頭で <see cref="T:System.UInt64" /> を解析します。</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">解析する Utf8 文字列。</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">メソッドが戻るとき、解析操作に成功していれば、<paramref name="source" /> から解析された値が含まれます。</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">解析操作に成功した場合、メソッドが戻るとき、解析された部分文字列の長さがバイト単位で含まれます。 メソッドが失敗した場合、<paramref name="bytesConsumed" /> が 0 に設定されます。</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Utf8 文字列の予期される形式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">成功した場合は <see langword="true" />。文字列が構文上、有効ではない場合、あるいはオーバーフローまたはアンダーフローが発生した場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.MemoryExtensions">
      <summary vsli:raw="Provides extension methods for the memory- and span-related types, such as &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;, &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;, &lt;see cref=&quot;T:System.Span`1&quot; /&gt;, and &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt;.">
        <see cref="T:System.Memory`1" />、<see cref="T:System.ReadOnlyMemory`1" />、<see cref="T:System.Span`1" />、<see cref="T:System.ReadOnlySpan`1" /> など、メモリおよびスパンに関連する型の拡張メソッドを提供します。</summary>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String)">
      <summary vsli:raw="Creates a new &lt;see langword=&quot;ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt; over the portion of the target string.">挿入先の文字列の一部に新しい <see langword="ReadOnlyMemory&lt;Char&gt;" /> を作成します。</summary>
      <param name="text" vsli:raw="The target string.">挿入先の文字列。</param>
      <returns vsli:raw="The read-only character memory representation of the string, or &lt;see langword=&quot;default&quot; /&gt; if &lt;paramref name=&quot;text&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">文字列の読み取り専用の文字メモリ表現。あるいは、<paramref name="text" /> が <see langword="null" /> の場合は <see langword="default" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Index)">
      <summary vsli:raw="Creates a new &lt;see langword=&quot;ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt; over a portion of the target string starting at a specified index.">指定したインデックスを開始位置として、挿入先の文字列の一部に対して新しい <see langword="ReadOnlyMemory&lt;Char&gt;" /> を作成します。</summary>
      <param name="text" vsli:raw="The target string.">挿入先の文字列。</param>
      <param name="startIndex" vsli:raw="The index at which to begin this slice.">このスライスの開始位置を示すインデックス。</param>
      <returns vsli:raw="The read-only character memory representation of the string.">文字列の読み取り専用の文字メモリ表現。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Int32)">
      <summary vsli:raw="Creates a new &lt;see langword=&quot;ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt; over a portion of the target string starting at a specified character position.">指定した文字位置を開始位置として、挿入先の文字列の一部に対して新しい <see langword="ReadOnlyMemory&lt;Char&gt;" /> を作成します。</summary>
      <param name="text" vsli:raw="The target string.">挿入先の文字列。</param>
      <param name="start" vsli:raw="The index at which to begin this slice.">このスライスの開始位置を示すインデックス。</param>
      <returns vsli:raw="The read-only character memory representation of the string, or &lt;see langword=&quot;default&quot; /&gt; if &lt;paramref name=&quot;text&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">文字列の読み取り専用の文字メモリ表現。あるいは、<paramref name="text" /> が <see langword="null" /> の場合は <see langword="default" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt; is not in the range of &lt;paramref name=&quot;text&quot; /&gt; (&lt;paramref name=&quot;start&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;c&gt;text.Length&lt;/c&gt;).">
        <paramref name="start" /> が <paramref name="text" /> の範囲内にありません (<paramref name="start" /> は &lt; 0 または &gt; <c>text.Length</c>)。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new &lt;see langword=&quot;ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt; over a portion of the target string beginning at a specified position with a length.">指定した位置 (長さを含む) を開始位置として、挿入先の文字列の一部に対して新しい <see langword="ReadOnlyMemory&lt;Char&gt;" /> を作成します。</summary>
      <param name="text" vsli:raw="The target string.">挿入先の文字列。</param>
      <param name="start" vsli:raw="The index at which to begin this slice.">このスライスの開始位置を示すインデックス。</param>
      <param name="length" vsli:raw="The desired length for the slice.">スライスに求められる長さ。</param>
      <returns vsli:raw="The read-only character memory representation of the string, or &lt;see langword=&quot;default&quot; /&gt; if &lt;paramref name=&quot;text&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">文字列の読み取り専用の文字メモリ表現。あるいは、<paramref name="text" /> が <see langword="null" /> の場合は <see langword="default" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;text&quot; /&gt;.">
        <paramref name="start" />、<paramref name="length" />、または <paramref name="start" /> + <paramref name="length" /> が <paramref name="text" /> の範囲内にありません。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Range)">
      <summary vsli:raw="Creates a new &lt;see langword=&quot;ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt; over a specified range of the target string.">挿入先の文字列の指定範囲に新しい <see langword="ReadOnlyMemory&lt;Char&gt;" /> を作成します。</summary>
      <param name="text" vsli:raw="The target string.">挿入先の文字列。</param>
      <param name="range" vsli:raw="The range that indicates the start and length of the sliced string.">スライスされた文字列の開始と長さを示す範囲。</param>
      <returns vsli:raw="The read-only character memory representation of the string.">文字列の読み取り専用の文字メモリ表現。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[])">
      <summary vsli:raw="Creates a new memory region over the target array.">挿入先の配列に新しいメモリ領域を作成します。</summary>
      <param name="array" vsli:raw="The array to convert.">変換する配列。</param>
      <typeparam name="T" vsli:raw="The type of the array.">配列の型。</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">配列の全体または一部のメモリ表現。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Index)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array starting at a specified index to the end of the array.">指定されたインデックスを開始位置として、配列の終わりまで、挿入先の配列の一部に新しいメモリ領域を作成します。</summary>
      <param name="array" vsli:raw="The array to convert.">変換する配列。</param>
      <param name="startIndex" vsli:raw="The first position of the array.">配列の最初の位置。</param>
      <typeparam name="T" vsli:raw="The type of the array.">配列の型。</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">配列の全体または一部のメモリ表現。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Int32)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array starting at a specified position to the end of the array.">指定された位置を開始位置として、配列の終わりまで、挿入先の配列の一部に新しいメモリ領域を作成します。</summary>
      <param name="array" vsli:raw="The target array.">対象となる配列。</param>
      <param name="start" vsli:raw="The index at which to begin the memory.">メモリの開始位置を示すインデックス。</param>
      <typeparam name="T" vsli:raw="The type of the array.">配列の型。</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">配列の全体または一部のメモリ表現。</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">
        <paramref name="array" /> は共変であり、配列の型は <see langword="T[]" /> とまったく同じではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt; index less than 0 or greater than &lt;see langword=&quot;array.Length&quot; /&gt;.">
        <paramref name="start" /> インデックスが 0 未満であるか、<see langword="array.Length" /> を超えています。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array beginning at a specified position with a specified length.">指定された位置を開始位置とし、指定された長さで、挿入先の配列の一部に新しいメモリ領域を作成します。</summary>
      <param name="array" vsli:raw="The target array.">対象となる配列。</param>
      <param name="start" vsli:raw="The index at which to begin the memory region.">メモリ領域の開始位置を示すインデックス。</param>
      <param name="length" vsli:raw="The number of items in the memory region.">メモリ領域の項目数。</param>
      <typeparam name="T" vsli:raw="The type of the array.">配列の型。</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">配列の全体または一部のメモリ表現。</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">
        <paramref name="array" /> は共変であり、配列の型は <see langword="T[]" /> とまったく同じではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="start" />、<paramref name="length" />、または <paramref name="start" /> + <paramref name="length" /> が <paramref name="array" /> の範囲内にありません。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Range)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array beginning at inclusive start index of the range and ending at the exclusive end index of the range.">範囲の開始インデックス (含む) を開始位置とし、範囲の終了インデックス (含まない) を終了位置として、挿入先の配列の一部に新しいメモリ領域を作成します。</summary>
      <param name="array" vsli:raw="The array to convert.">変換する配列。</param>
      <param name="range" vsli:raw="The range to convert from the array.">配列から変換する範囲。</param>
      <typeparam name="T" vsli:raw="The type of the array.">配列の型。</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">配列の全体または一部のメモリ表現。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0})">
      <summary vsli:raw="Creates a new memory region over the portion of the target array segment.">挿入先の配列セグメントの一部に新しいメモリ領域を作成します。</summary>
      <param name="segment" vsli:raw="The segment to convert.">変換するセグメント。</param>
      <typeparam name="T" vsli:raw="The type of the segment.">セグメントの型。</typeparam>
      <returns vsli:raw="The memory representation of the segment.">セグメントのメモリ表現。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0},System.Int32)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array segment starting at a specified position to the end of the segment.">指定された位置を開始位置として、セグメントの終わりまで、挿入先の配列セグメントの一部に新しいメモリ領域を作成します。</summary>
      <param name="segment" vsli:raw="The target array segment.">挿入先の配列セグメント。</param>
      <param name="start" vsli:raw="The index at which to begin the memory.">メモリの開始位置を示すインデックス。</param>
      <typeparam name="T" vsli:raw="The type of the array.">配列の型。</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">配列の全体または一部のメモリ表現。</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;segment&quot; /&gt; is covariant, and the type of &lt;paramref name=&quot;segment&quot; /&gt; is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">
        <paramref name="segment" /> は共変であり、<paramref name="segment" /> の型は <see langword="T[]" /> とまったく同じではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt; is less than 0 or greater than &lt;see langword=&quot;segment.Count&quot; /&gt;.">
        <paramref name="start" /> が 0 未満であるか、または <see langword="segment.Count" /> を超えています。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0},System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array segment beginning at a specified position with a specified length.">指定された位置を開始位置とし、指定された長さで、挿入先の配列セグメントの一部に新しいメモリ領域を作成します。</summary>
      <param name="segment" vsli:raw="The target array segment.">挿入先の配列セグメント。</param>
      <param name="start" vsli:raw="The index at which to begin the memory.">メモリの開始位置を示すインデックス。</param>
      <param name="length" vsli:raw="The number of items in the memory.">メモリの項目数。</param>
      <typeparam name="T" vsli:raw="The type of the array.">配列の型。</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">配列の全体または一部のメモリ表現。</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;segment&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">
        <paramref name="segment" /> は共変であり、配列の型は <see langword="T[]" /> とまったく同じではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;segment&quot; /&gt;.">
        <paramref name="start" />、<paramref name="length" />、または <paramref name="start" /> + <paramref name="length" /> が <paramref name="segment" /> の範囲内にありません。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan(System.String)">
      <summary vsli:raw="Creates a new read-only span over a string.">指定された位置から指定された文字数だけ、挿入先の文字列の一部に対して読み取り専用の新しい範囲を作成します。</summary>
      <param name="text" vsli:raw="The target string.">挿入先の文字列。</param>
      <returns vsli:raw="The read-only span representation of the string.">文字列の読み取り専用のスパン表現。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan(System.String,System.Int32)">
      <summary vsli:raw="Creates a new read-only span over a portion of the target string from a specified position to the end of the string.">指定された位置から文字列の終わりまで、挿入先の文字列の一部に対して読み取り専用の新しい範囲を作成します。</summary>
      <param name="text" vsli:raw="The target string.">挿入先の文字列。</param>
      <param name="start" vsli:raw="The index at which to begin this slice.">このスライスの開始位置を示すインデックス。</param>
      <returns vsli:raw="The read-only span representation of the string.">文字列の読み取り専用のスパン表現。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Thrown when &lt;paramref name=&quot;text&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="text" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt; is less than 0 or greater than &lt;see langword=&quot;text.Length&quot; /&gt;.">
        <paramref name="start" /> が 0 未満であるか、または <see langword="text.Length" /> を超えています。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan(System.String,System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new read-only span over a portion of the target string from a specified position for a specified number of characters.">文字列に対して新しい読み取り専用のスパンを作成します。</summary>
      <param name="text" vsli:raw="The target string.">挿入先の文字列。</param>
      <param name="start" vsli:raw="The index at which to begin this slice.">このスライスの開始位置を示すインデックス。</param>
      <param name="length" vsli:raw="The desired length for the slice.">スライスに求められる長さ。</param>
      <returns vsli:raw="The read-only span representation of the string.">文字列の読み取り専用のスパン表現。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;text&quot; /&gt;.">
        <paramref name="start" />、<paramref name="length" />、または <paramref name="start" /> + <paramref name="length" /> が <paramref name="text" /> の範囲内にありません。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[])">
      <summary vsli:raw="Creates a new span over a target array.">挿入先の配列に新しいスパンを作成します。</summary>
      <param name="array" vsli:raw="The array to convert.">変換する配列。</param>
      <typeparam name="T" vsli:raw="The type of the array.">配列の型。</typeparam>
      <returns vsli:raw="The span representation of the array.">配列のスパン表現。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Index)">
      <summary vsli:raw="Creates a new span over the portion of the target array defined by an &lt;see cref=&quot;T:System.Index&quot; /&gt; value.">
        <see cref="T:System.Index" /> 値によって定義される挿入先の配列の一部に新しいスパンを作成します。</summary>
      <param name="array" vsli:raw="The array to convert.">変換する配列。</param>
      <param name="startIndex" vsli:raw="The starting index.">開始インデックス。</param>
      <typeparam name="T" vsli:raw="The array type.">配列型。</typeparam>
      <returns vsli:raw="The span representation of the array.">配列のスパン表現。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Int32)">
      <summary vsli:raw="Creates a new span over a portion of the target array starting at a specified position to the end of the array.">指定された位置を開始位置として、配列の終わりまで、挿入先の配列の一部に新しいスパンを作成します。</summary>
      <param name="array" vsli:raw="The array to convert.">変換する配列。</param>
      <param name="start" vsli:raw="The initial index from which the array will be converted.">配列の変換元の初期インデックス。</param>
      <typeparam name="T" vsli:raw="The type of the array.">配列の型。</typeparam>
      <returns vsli:raw="The span representation of the array.">配列のスパン表現。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new span over the portion of the target array beginning at a specified position for a specified length.">指定された位置から指定された長さだけ、挿入先の配列の一部に対して新しいスパンを作成します。</summary>
      <param name="array" vsli:raw="The target array.">対象となる配列。</param>
      <param name="start" vsli:raw="The index at which to begin the span.">スパンの開始位置を示すインデックス。</param>
      <param name="length" vsli:raw="The number of items in the span.">スパン内の項目の数。</param>
      <typeparam name="T" vsli:raw="The type of the array.">配列の型。</typeparam>
      <returns vsli:raw="The span representation of the array.">配列のスパン表現。</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;&quot;.">
        <paramref name="array" /> は共変であり、配列の型は <see langword="T[]" /> とまったく同じではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;text&quot; /&gt;.">
        <paramref name="start" />、<paramref name="length" />、または <paramref name="start" /> + <paramref name="length" /> が <paramref name="text" /> の範囲内にありません。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Range)">
      <summary vsli:raw="Creates a new span over a portion of a target array defined by a &lt;see cref=&quot;T:System.Range&quot; /&gt; value.">
        <see cref="T:System.Range" /> 値によって定義される挿入先の配列の一部に対して新しいスパンを作成します。</summary>
      <param name="array" vsli:raw="The array to convert.">変換する配列。</param>
      <param name="range" vsli:raw="The range of the array to convert.">変換する配列の範囲。</param>
      <typeparam name="T" vsli:raw="The type of the array.">配列の型。</typeparam>
      <returns vsli:raw="The span representation of the array.">配列のスパン表現。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0})">
      <summary vsli:raw="Creates a new span over a target array segment.">挿入先の配列セグメントに新しいスパンを作成します。</summary>
      <param name="segment" vsli:raw="The array segment to convert.">変換する配列セグメント。</param>
      <typeparam name="T" vsli:raw="The type of the array segment.">配列セグメントの型。</typeparam>
      <returns vsli:raw="The span representation of the array segment.">配列セグメントのスパン表現。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Index)">
      <summary vsli:raw="Creates a new span over a portion of the target array segment beginning at a specified index and ending at the end of the segment.">指定されたインデックスを開始位置とし、セグメントの終わりで終了する挿入先の配列セグメントの一部に新しいスパンを作成します。</summary>
      <param name="segment" vsli:raw="The target array segment.">挿入先の配列セグメント。</param>
      <param name="startIndex" vsli:raw="The index at which to begin the Span.">スパンの開始位置を示すインデックス。</param>
      <typeparam name="T" vsli:raw="The type of the array segment.">配列セグメントの型。</typeparam>
      <returns vsli:raw="The span representation of the array segment.">配列セグメントのスパン表現。</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Int32)">
      <summary vsli:raw="Creates a new span over a portion of a target array segment from a specified position to the end of the segment.">指定された位置からセグメントの終わりまで、挿入先の配列セグメントの一部に対して新しいスパンを作成します。</summary>
      <param name="segment" vsli:raw="The target array segment.">挿入先の配列セグメント。</param>
      <param name="start" vsli:raw="The index at which to begin the san.">スパンの開始位置を示すインデックス。</param>
      <typeparam name="T" vsli:raw="The type of the array segment.">配列セグメントの型。</typeparam>
      <returns vsli:raw="The span representation of the array segment.">配列セグメントのスパン表現。</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;segment&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">
        <paramref name="segment" /> は共変であり、配列の型は <see langword="T[]" /> とまったく同じではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt; is less than 0 or greater than &lt;see langword=&quot;segment.Count&quot; /&gt;.">
        <paramref name="start" /> が 0 未満であるか、または <see langword="segment.Count" /> を超えています。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new span over a portion of a target array segment from a specified position for a specified length.">指定された位置から指定された長さだけ、挿入先の配列セグメントの一部に対して新しいスパンを作成します。</summary>
      <param name="segment" vsli:raw="The target array segment.">挿入先の配列セグメント。</param>
      <param name="start" vsli:raw="The index at which to begin the span.">スパンの開始位置を示すインデックス。</param>
      <param name="length" vsli:raw="The number of items in the span.">スパン内の項目の数。</param>
      <typeparam name="T" vsli:raw="The type of the array segment.">配列セグメントの型。</typeparam>
      <returns vsli:raw="The span representation of the array.">配列のスパン表現。</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;segment&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">
        <paramref name="segment" /> は共変であり、配列の型は <see langword="T[]" /> とまったく同じではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;segment&quot; /&gt;.">
        <paramref name="start" />、<paramref name="length" />、または <paramref name="start" /> + <paramref name="length" /> が <paramref name="segment" /> の範囲内にありません。</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Range)">
      <summary vsli:raw="Creates a new span over a portion of a target array segment using the range start and end indexes.">範囲の開始インデックスと終了インデックスを使用し、挿入先の配列セグメントの一部に対して新しいスパンを作成します。</summary>
      <param name="segment" vsli:raw="The target array segment.">挿入先の配列セグメント。</param>
      <param name="range" vsli:raw="The range which has start and end indexes to use for slicing the array.">配列のスライスに使用する開始インデックスと終了インデックスを持つ範囲。</param>
      <typeparam name="T" vsli:raw="The type of the array segment.">配列セグメントの型。</typeparam>
      <returns vsli:raw="The span representation of the array segment.">配列セグメントのスパン表現。</returns>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``1(System.ReadOnlySpan{``0},System.IComparable{``0})">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; for a value using the specified &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface.">指定した <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスを使用し、並べ替えられた <see cref="T:System.ReadOnlySpan`1" /> 全体の中から値を検索します。</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; to search.">検索する並べ替えられた <see cref="T:System.ReadOnlySpan`1" />。</param>
      <param name="comparable" vsli:raw="The &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; to use when comparing.">比較する場合に使用する <see cref="T:System.IComparable`1" />。</param>
      <typeparam name="T" vsli:raw="The element type of the span.">スパンの要素の種類。</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;comparable&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;comparable&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;comparable&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.ReadOnlySpan`1.Length&quot; /&gt;.">
        <paramref name="comparable" /> が見つかった場合は、並べ替えられた <paramref name="span" /> 内の <paramref name="comparable" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="comparable" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.ReadOnlySpan`1.Length" /> のビットごとの補数です。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparable&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparable" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``1(System.Span{``0},System.IComparable{``0})">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; for a value using the specified &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface.">指定した <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスを使用し、並べ替えられた <see cref="T:System.Span`1" /> 全体の中から値を検索します。</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; to search.">検索する並べ替えられた <see cref="T:System.Span`1" />。</param>
      <param name="comparable" vsli:raw="The &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; to use when comparing.">比較する場合に使用する <see cref="T:System.IComparable`1" />。</param>
      <typeparam name="T" vsli:raw="The element type of the span.">スパンの要素の種類。</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;comparable&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;comparable&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;comparable&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Span`1.Length&quot; /&gt;.">
        <paramref name="comparable" /> が見つかった場合は、並べ替えられた <paramref name="span" /> 内の <paramref name="comparable" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="comparable" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Span`1.Length" /> のビットごとの補数です。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparable&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparable" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.ReadOnlySpan{``0},``0,``1)">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; for a specified value using the specified &lt;typeparamref name=&quot;TComparer&quot; /&gt; generic type.">指定した <typeparamref name="TComparer" /> ジェネリック型を使用し、並べ替えられた <see cref="T:System.ReadOnlySpan`1" /> 全体の中から、指定した値を検索します。</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; to search.">検索する並べ替えられた <see cref="T:System.ReadOnlySpan`1" />。</param>
      <param name="value" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <param name="comparer" vsli:raw="The &lt;typeparamref name=&quot;TComparer&quot; /&gt; to use when comparing.">比較する場合に使用する <typeparamref name="TComparer" />。</param>
      <typeparam name="T" vsli:raw="The element type of the span.">スパンの要素の種類。</typeparam>
      <typeparam name="TComparer" vsli:raw="The specific type of &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">の特定の<see cref="T:System.Collections.Generic.IComparer`1" />型。</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;value&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;value&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.ReadOnlySpan`1.Length&quot; /&gt;.">
        <paramref name="value" /> が見つかった場合は、並べ替えられた <paramref name="span" /> 内の <paramref name="value" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="value" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.ReadOnlySpan`1.Length" /> のビットごとの補数です。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparer" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.ReadOnlySpan{``0},``1)">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; for a value using the specified &lt;typeparamref name=&quot;TComparable&quot; /&gt; generic type.">指定した <typeparamref name="TComparable" /> ジェネリック型を使用し、並べ替えられた <see cref="T:System.ReadOnlySpan`1" /> 全体の中から値を検索します。</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; to search.">検索する並べ替えられた <see cref="T:System.ReadOnlySpan`1" />。</param>
      <param name="comparable" vsli:raw="The &lt;typeparamref name=&quot;TComparable&quot; /&gt; to use when comparing.">比較する場合に使用する <typeparamref name="TComparable" />。</param>
      <typeparam name="T" vsli:raw="The element type of the span.">スパンの要素の種類。</typeparam>
      <typeparam name="TComparable" vsli:raw="The specific type of &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt;.">の特定の<see cref="T:System.IComparable`1" />型。</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;comparable&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;comparable&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;comparable&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.ReadOnlySpan`1.Length&quot; /&gt;.">
        <paramref name="comparable" /> が見つかった場合は、並べ替えられた <paramref name="span" /> 内の <paramref name="comparable" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="comparable" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.ReadOnlySpan`1.Length" /> のビットごとの補数です。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparable&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparable" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.Span{``0},``0,``1)">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; for a specified value using the specified &lt;typeparamref name=&quot;TComparer&quot; /&gt; generic type.">指定した <typeparamref name="TComparer" /> ジェネリック型を使用し、並べ替えられた <see cref="T:System.Span`1" /> 全体の中から、指定した値を検索します。</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; to search.">検索する並べ替えられた <see cref="T:System.Span`1" />。</param>
      <param name="value" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <param name="comparer" vsli:raw="The &lt;typeparamref name=&quot;TComparer&quot; /&gt; to use when comparing.">比較する場合に使用する <typeparamref name="TComparer" />。</param>
      <typeparam name="T" vsli:raw="The element type of the span.">スパンの要素の種類。</typeparam>
      <typeparam name="TComparer" vsli:raw="The specific type of &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">の特定の<see cref="T:System.Collections.Generic.IComparer`1" />型。</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;value&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;value&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Span`1.Length&quot; /&gt;.">
        <paramref name="value" /> が見つかった場合は、並べ替えられた <paramref name="span" /> 内の <paramref name="value" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="value" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Span`1.Length" /> のビットごとの補数です。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparer" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.Span{``0},``1)">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; for a value using the specified &lt;typeparamref name=&quot;TComparable&quot; /&gt; generic type.">指定した <typeparamref name="TComparable" /> ジェネリック型を使用し、並べ替えられた <see cref="T:System.Span`1" /> 全体の中から値を検索します。</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; to search.">検索する並べ替えられた <see cref="T:System.Span`1" />。</param>
      <param name="comparable" vsli:raw="The &lt;typeparamref name=&quot;TComparable&quot; /&gt; to use when comparing.">比較する場合に使用する <typeparamref name="TComparable" />。</param>
      <typeparam name="T" vsli:raw="The element type of the span.">スパンの要素の種類。</typeparam>
      <typeparam name="TComparable" vsli:raw="The specific type of &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt;.">の特定の<see cref="T:System.IComparable`1" />型。</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;comparable&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;comparable&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;comparable&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Span`1.Length&quot; /&gt;.">
        <paramref name="comparable" /> が見つかった場合は、並べ替えられた <paramref name="span" /> 内の <paramref name="comparable" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="comparable" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Span`1.Length" /> のビットごとの補数です。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparable&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparable" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.MemoryExtensions.CompareTo(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Compares one character span with another using a specified string comparison, and returns an integer that indicates their relative position in the sort order.">指定した文字列比較を使用して 1 つの文字スパンを別の文字スパンと比較し、並べ替え順序でそれらの相対位置を示す整数を返します。</summary>
      <param name="span" vsli:raw="The source span.">ソース スパン。</param>
      <param name="other" vsli:raw="The value to compare with the source span.">ソース スパンと比較する値。</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt; are compared.">
        <paramref name="span" /> と <paramref name="other" /> の比較方法を決定する列挙型の値。</param>
      <returns vsli:raw="A signed integer that indicates the relative order of &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt;:&lt;br /&gt;   - If less than 0, &lt;paramref name=&quot;span&quot; /&gt; precedes than &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If 0, &lt;paramref name=&quot;span&quot; /&gt; equals &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If greater than 0, &lt;paramref name=&quot;span&quot; /&gt; follows &lt;paramref name=&quot;other&quot; /&gt;.">
        <paramref name="span" /> と <paramref name="other" /> の相対順序を示す符号付き整数。   - 0 未満の場合、<paramref name="span" /> は <paramref name="other" /> より順序が先になります。   - 0 の場合、<paramref name="span" /> は <paramref name="other" /> と等しくなります。   - 0 より大きい場合、<paramref name="span" /> は <paramref name="other" /> の後になります。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Indicates whether a specified value occurs within a read-only character span.">指定された値が読み取り専用の文字スパン内にあるかどうかを示します。</summary>
      <param name="span" vsli:raw="The source span.">ソース スパン。</param>
      <param name="value" vsli:raw="The value to seek within the source span.">ソース スパン内でシークする値。</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how the characters in &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; are compared.">
        <paramref name="span" /> と <paramref name="value" /> 内の文字の比較方法を決定する列挙型の値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; occurs within the span, &lt;see langword=&quot;false&quot; /&gt; otherwise.">
        <paramref name="value" /> がスパン内にある場合は <see langword="true" />。ない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Contains``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Indicates whether a specified value is found in a read-only span. Values are compared using IEquatable{T}.Equals(T).">指定した値が読み取り専用スパンに存在するかどうかを示します。 値は IEquatable{T}.Equals(T) を使用して比較されます。</summary>
      <param name="span" vsli:raw="The span to search.">検索するスパン。</param>
      <param name="value" vsli:raw="The value to search for.">検索する値。</param>
      <typeparam name="T" vsli:raw="The type of the span.">スパンの種類。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if found, &lt;see langword=&quot;false&quot; /&gt; otherwise.">見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Contains``1(System.Span{``0},``0)">
      <summary vsli:raw="Indicates whether a specified value is found in a span. Values are compared using IEquatable{T}.Equals(T).">指定した値がスパンに存在するかどうかを示します。 値は IEquatable{T}.Equals(T) を使用して比較されます。</summary>
      <param name="span" vsli:raw="The span to search.">検索するスパン。</param>
      <param name="value" vsli:raw="The value to search for.">検索する値。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">スパン内の要素の型。</typeparam>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if found, &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt; otherwise.">見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.CopyTo``1(``0[],System.Memory{``0})">
      <summary vsli:raw="Copies the contents of the array into a memory region.">配列の内容をメモリ領域にコピーします。</summary>
      <param name="source" vsli:raw="The array to copy items from.">項目のコピー元となる配列。</param>
      <param name="destination" vsli:raw="The memory to copy items into.">項目のコピー先となるメモリ。</param>
      <typeparam name="T" vsli:raw="The type of the array.">配列の型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination is shorter than the source array.">コピー先がコピー元の配列より短いです。</exception>
    </member>
    <member name="M:System.MemoryExtensions.CopyTo``1(``0[],System.Span{``0})">
      <summary vsli:raw="Copies the contents of the array into the span.">配列の内容をスパンにコピーします。</summary>
      <param name="source" vsli:raw="The array to copy items from.">項目のコピー元となる配列。</param>
      <param name="destination" vsli:raw="The span to copy items into.">項目のコピー先のスパン。</param>
      <typeparam name="T" vsli:raw="The type of the array.">配列の型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination Span is shorter than the source array.">デスティネーション スパンがソース配列より短いです。</exception>
    </member>
    <member name="M:System.MemoryExtensions.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Determines whether the end of the &lt;paramref name=&quot;span&quot; /&gt; matches the specified &lt;paramref name=&quot;value&quot; /&gt; when compared using the specified &lt;paramref name=&quot;comparisonType&quot; /&gt; option.">指定された <paramref name="comparisonType" /> オプションを使って比較した場合に、<paramref name="span" /> の末尾が指定された <paramref name="value" /> と一致するかどうかを判断します。</summary>
      <param name="span" vsli:raw="The source span.">ソース スパン。</param>
      <param name="value" vsli:raw="The sequence to compare to the end of the source span.">ソース スパンの末尾と比較するシーケンス。</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; are compared.">
        <paramref name="span" /> と <paramref name="value" /> の比較方法を決定する列挙型の値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the end of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" /> が <paramref name="span" /> の末尾と一致する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.EndsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether the specified sequence appears at the end of a read-only span.">指定されたシーケンスが読み取り専用スパンの末尾にあるかどうかを判断します。</summary>
      <param name="span" vsli:raw="The source span.">ソース スパン。</param>
      <param name="value" vsli:raw="The sequence to compare to the end of the source span.">ソース スパンの末尾と比較するシーケンス。</param>
      <typeparam name="T" vsli:raw="The type of the span.">スパンの種類。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the end of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" /> が <paramref name="span" /> の末尾と一致する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.EndsWith``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether the specified sequence appears at the end of a span.">指定されたシーケンスがスパンの末尾にあるかどうかを判断します。</summary>
      <param name="span" vsli:raw="The source span.">ソース スパン。</param>
      <param name="value" vsli:raw="The sequence to compare to the end of the source span.">ソース スパンの末尾と比較するシーケンス。</param>
      <typeparam name="T" vsli:raw="The type of the span.">スパンの種類。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the end of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" /> が <paramref name="span" /> の末尾と一致する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.EnumerateRunes(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Returns an enumeration of &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; from the provided read-only span.">指定された読み取り専用スパンから <see cref="T:System.Text.Rune" /> の列挙型を返します。</summary>
      <param name="span" vsli:raw="The source span.">ソース スパン。</param>
      <returns vsli:raw="A rune enumerator.">ルーン列挙子。</returns>
    </member>
    <member name="M:System.MemoryExtensions.EnumerateRunes(System.Span{System.Char})">
      <summary vsli:raw="Returns an enumeration of &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; from the provided span.">指定されたスパンから <see cref="T:System.Text.Rune" /> の列挙型を返します。</summary>
      <param name="span" vsli:raw="The source span.">ソース スパン。</param>
      <returns vsli:raw="A rune enumerator.">ルーン列挙子。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Equals(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Determines whether this &lt;paramref name=&quot;span&quot; /&gt; and the specified &lt;paramref name=&quot;other&quot; /&gt; span have the same characters when compared using the specified &lt;paramref name=&quot;comparisonType&quot; /&gt; option.">指定した <paramref name="comparisonType" /> オプションを使用して比較した場合に、この <paramref name="span" /> と指定した <paramref name="other" /> スパンで文字が同じであるかどうかを判断します。</summary>
      <param name="span" vsli:raw="The source span.">ソース スパン。</param>
      <param name="other" vsli:raw="The value to compare with the source span.">ソース スパンと比較する値。</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt; are compared.">
        <paramref name="span" /> と <paramref name="other" /> の比較方法を決定する列挙型の値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if equal, &lt;see langword=&quot;false&quot; /&gt; otherwise.">等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Reports the zero-based index of the first occurrence of the specified &lt;paramref name=&quot;value&quot; /&gt; in the current &lt;paramref name=&quot;span&quot; /&gt;.">指定した <paramref name="value" /> が現在の <paramref name="span" /> 内で最初に見つかった位置の 0 から始まるインデックスをレポートします。</summary>
      <param name="span" vsli:raw="The source span.">ソース スパン。</param>
      <param name="value" vsli:raw="The value to seek within the source span.">ソース スパン内でシークする値。</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; are compared.">
        <paramref name="span" /> と <paramref name="value" /> の比較方法を決定する列挙型の値。</param>
      <returns vsli:raw="The index of the occurrence of the value in the span.">スパン内で値が出現する位置のインデックス。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Searches for the specified value and returns the index of its first occurrence. Values are compared using IEquatable{T}.Equals(T).">指定した値を検索し、それが最初に見つかった位置のインデックスを返します。 値は IEquatable{T}.Equals(T) を使用して比較されます。</summary>
      <param name="span" vsli:raw="The span to search.">検索するスパン。</param>
      <param name="value" vsli:raw="The value to search for.">検索する値。</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">スパンと値の型。</typeparam>
      <returns vsli:raw="The index of the occurrence of the value in the span. If not found, returns -1.">スパン内で値が出現する位置のインデックス。 見つからない場合は、-1 を返します。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the specified sequence and returns the index of its first occurrence. Values are compared using IEquatable{T}.Equals(T).">指定したシーケンスを検索し、それが最初に見つかった位置のインデックスを返します。 値は IEquatable{T}.Equals(T) を使用して比較されます。</summary>
      <param name="span" vsli:raw="The span to search.">検索するスパン。</param>
      <param name="value" vsli:raw="The sequence to search for.">検索対象のシーケンス。</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">スパンと値の型。</typeparam>
      <returns vsli:raw="The index of the occurrence of the value in the span. If not found, returns -1.">スパン内で値が出現する位置のインデックス。 見つからない場合は、-1 を返します。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.Span{``0},``0)">
      <summary vsli:raw="Searches for the specified value and returns the index of its first occurrence. Values are compared using IEquatable{T}.Equals(T).">指定した値を検索し、それが最初に見つかった位置のインデックスを返します。 値は IEquatable{T}.Equals(T) を使用して比較されます。</summary>
      <param name="span" vsli:raw="The span to search.">検索するスパン。</param>
      <param name="value" vsli:raw="The value to search for.">検索する値。</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">スパンと値の型。</typeparam>
      <returns vsli:raw="The index of the occurrence of the value in the span. If not found, returns -1.">スパン内で値が出現する位置のインデックス。 見つからない場合は、-1 を返します。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the specified sequence and returns the index of its first occurrence. Values are compared using IEquatable{T}.Equals(T).">指定したシーケンスを検索し、それが最初に見つかった位置のインデックスを返します。 値は IEquatable{T}.Equals(T) を使用して比較されます。</summary>
      <param name="span" vsli:raw="The span to search.">検索するスパン。</param>
      <param name="value" vsli:raw="The sequence to search for.">検索対象のシーケンス。</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">スパンと値の型。</typeparam>
      <returns vsli:raw="The index of the occurrence of the value in the span. If not found, returns -1.">スパン内で値が出現する位置のインデックス。 見つからない場合は、-1 を返します。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">論理 OR 演算子を使用して IndexOf を数回呼び出すのと同様に、指定されたいずれかの値の最初のインデックスを検索します。</summary>
      <param name="span" vsli:raw="The span to search.">検索するスパン。</param>
      <param name="value0" vsli:raw="One of the values to search for.">検索対象の値の 1 つ。</param>
      <param name="value1" vsli:raw="One of the values to search for.">検索対象の値の 1 つ。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">スパンと値の型。</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">スパン内でいずれかの値が出現する最初の位置のインデックス。 見つからない場合は、-1 を返します。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">論理 OR 演算子を使用して IndexOf を数回呼び出すのと同様に、指定されたいずれかの値の最初のインデックスを検索します。</summary>
      <param name="span" vsli:raw="The span to search.">検索するスパン。</param>
      <param name="value0" vsli:raw="One of the values to search for.">検索対象の値の 1 つ。</param>
      <param name="value1" vsli:raw="One of the values to search for.">検索対象の値の 1 つ。</param>
      <param name="value2" vsli:raw="One of the values to search for.">検索対象の値の 1 つ。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">スパンと値の型。</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">スパン内でいずれかの値が出現する最初の位置のインデックス。 見つからない場合は、-1 を返します。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">論理 OR 演算子を使用して IndexOf を数回呼び出すのと同様に、指定されたいずれかの値の最初のインデックスを検索します。</summary>
      <param name="span" vsli:raw="The span to search.">検索するスパン。</param>
      <param name="values" vsli:raw="The set of values to search for.">検索対象の値のセット。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">スパンと値の型。</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">スパン内でいずれかの値が出現する最初の位置のインデックス。 見つからない場合は、-1 を返します。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},``0,``0)">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">論理 OR 演算子を使用して IndexOf を数回呼び出すのと同様に、指定されたいずれかの値の最初のインデックスを検索します。</summary>
      <param name="span" vsli:raw="The span to search.">検索するスパン。</param>
      <param name="value0" vsli:raw="One of the values to search for.">検索対象の値の 1 つ。</param>
      <param name="value1" vsli:raw="One of the values to search for.">検索対象の値の 1 つ。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">スパンと値の型。</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">スパン内でいずれかの値が出現する最初の位置のインデックス。 見つからない場合は、-1 を返します。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},``0,``0,``0)">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">論理 OR 演算子を使用して IndexOf を数回呼び出すのと同様に、指定されたいずれかの値の最初のインデックスを検索します。</summary>
      <param name="span" vsli:raw="The span to search.">検索するスパン。</param>
      <param name="value0" vsli:raw="One of the values to search for.">検索対象の値の 1 つ。</param>
      <param name="value1" vsli:raw="One of the values to search for.">検索対象の値の 1 つ。</param>
      <param name="value2" vsli:raw="One of the values to search for.">検索対象の値の 1 つ。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">スパンと値の型。</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">スパン内でいずれかの値が出現する最初の位置のインデックス。 見つからない場合は、-1 を返します。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">論理 OR 演算子を使用して IndexOf を数回呼び出すのと同様に、指定されたいずれかの値の最初のインデックスを検索します。</summary>
      <param name="span" vsli:raw="The span to search.">検索するスパン。</param>
      <param name="values" vsli:raw="The set of values to search for.">検索対象の値のセット。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">スパンと値の型。</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">スパン内でいずれかの値が出現する最初の位置のインデックス。 見つからない場合は、-1 を返します。</returns>
    </member>
    <member name="M:System.MemoryExtensions.IsWhiteSpace(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Indicates whether the specified span contains only whitespace characters.">指定したスパンに空白文字のみが含まれているかどうかを示します。</summary>
      <param name="span" vsli:raw="The source span.">ソース スパン。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span contains only whitespace characters, &lt;see langword=&quot;false&quot; /&gt; otherwise.">スパンに空白文字のみが含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Reports the zero-based index of the last occurrence of the specified &lt;paramref name=&quot;value&quot; /&gt; in the current &lt;paramref name=&quot;span&quot; /&gt;.">指定した <paramref name="value" /> が現在の <paramref name="span" /> 内で最後に見つかった位置の 0 から始まるインデックスをレポートします。</summary>
      <param name="span" vsli:raw="The source span.">ソース スパン。</param>
      <param name="value" vsli:raw="The value to seek within the source span.">ソース スパン内でシークする値。</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; are compared.">
        <paramref name="span" /> と <paramref name="value" /> の比較方法を決定する列挙型の値。</param>
      <returns vsli:raw="The index of the last occurrence of the value in the span.">スパン内で値が最後に出現する位置のインデックス。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Searches for the specified value and returns the index of its last occurrence. Values are compared using IEquatable{T}.Equals(T).">指定した値を検索し、それが最後に見つかった位置のインデックスを返します。 値は IEquatable{T}.Equals(T) を使用して比較されます。</summary>
      <param name="span" vsli:raw="The span to search.">検索するスパン。</param>
      <param name="value" vsli:raw="The value to search for.">検索する値。</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">スパンと値の型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of the value in the span. If not found, returns -1.">スパン内で値が最後に出現する位置のインデックス。 見つからない場合は、-1 を返します。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the specified sequence and returns the index of its last occurrence. Values are compared using IEquatable{T}.Equals(T).">指定したシーケンスを検索し、それが最後に見つかった位置のインデックスを返します。 値は IEquatable{T}.Equals(T) を使用して比較されます。</summary>
      <param name="span" vsli:raw="The span to search.">検索するスパン。</param>
      <param name="value" vsli:raw="The sequence to search for.">検索対象のシーケンス。</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">スパンと値の型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of the value in the span. If not found, returns -1.">スパン内で値が最後に出現する位置のインデックス。 見つからない場合は、-1 を返します。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.Span{``0},``0)">
      <summary vsli:raw="Searches for the specified value and returns the index of its last occurrence. Values are compared using IEquatable{T}.Equals(T).">指定した値を検索し、それが最後に見つかった位置のインデックスを返します。 値は IEquatable{T}.Equals(T) を使用して比較されます。</summary>
      <param name="span" vsli:raw="The span to search.">検索するスパン。</param>
      <param name="value" vsli:raw="The value to search for.">検索する値。</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">スパンと値の型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of the value in the span. If not found, returns -1.">スパン内で値が最後に出現する位置のインデックス。 見つからない場合は、-1 を返します。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the specified sequence and returns the index of its last occurrence. Values are compared using IEquatable{T}.Equals(T).">指定したシーケンスを検索し、それが最後に見つかった位置のインデックスを返します。 値は IEquatable{T}.Equals(T) を使用して比較されます。</summary>
      <param name="span" vsli:raw="The span to search.">検索するスパン。</param>
      <param name="value" vsli:raw="The sequence to search for.">検索対象のシーケンス。</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">スパンと値の型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of the value in the span. If not found, returns -1.">スパン内で値が最後に出現する位置のインデックス。 見つからない場合は、-1 を返します。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">論理 OR 演算子で LastIndexOf を数回呼び出すのと同様に、指定された値のいずれかの最後のインデックスを検索します。</summary>
      <param name="span" vsli:raw="The span to search.">検索するスパン。</param>
      <param name="value0" vsli:raw="One of the values to search for.">検索対象の値の 1 つ。</param>
      <param name="value1" vsli:raw="One of the values to search for.">検索対象の値の 1 つ。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">スパンと値の型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">スパン内でいずれかの値が最後に出現する位置のインデックス。 見つからない場合は、-1 を返します。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">論理 OR 演算子で LastIndexOf を数回呼び出すのと同様に、指定された値のいずれかの最後のインデックスを検索します。</summary>
      <param name="span" vsli:raw="The span to search.">検索するスパン。</param>
      <param name="value0" vsli:raw="One of the values to search for.">検索対象の値の 1 つ。</param>
      <param name="value1" vsli:raw="One of the values to search for.">検索対象の値の 1 つ。</param>
      <param name="value2" vsli:raw="One of the values to search for.">検索対象の値の 1 つ。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">スパンと値の型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">スパン内でいずれかの値が最後に出現する位置のインデックス。 見つからない場合は、-1 を返します。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">論理 OR 演算子で LastIndexOf を数回呼び出すのと同様に、指定された値のいずれかの最後のインデックスを検索します。</summary>
      <param name="span" vsli:raw="The span to search.">検索するスパン。</param>
      <param name="values" vsli:raw="The set of values to search for.">検索対象の値のセット。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">スパンと値の型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">スパン内でいずれかの値が最後に出現する位置のインデックス。 見つからない場合は、-1 を返します。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},``0,``0)">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">論理 OR 演算子で LastIndexOf を数回呼び出すのと同様に、指定された値のいずれかの最後のインデックスを検索します。</summary>
      <param name="span" vsli:raw="The span to search.">検索するスパン。</param>
      <param name="value0" vsli:raw="One of the values to search for.">検索対象の値の 1 つ。</param>
      <param name="value1" vsli:raw="One of the values to search for.">検索対象の値の 1 つ。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">スパンと値の型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">スパン内でいずれかの値が最後に出現する位置のインデックス。 見つからない場合は、-1 を返します。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},``0,``0,``0)">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">論理 OR 演算子で LastIndexOf を数回呼び出すのと同様に、指定された値のいずれかの最後のインデックスを検索します。</summary>
      <param name="span" vsli:raw="The span to search.">検索するスパン。</param>
      <param name="value0" vsli:raw="One of the values to search for.">検索対象の値の 1 つ。</param>
      <param name="value1" vsli:raw="One of the values to search for.">検索対象の値の 1 つ。</param>
      <param name="value2" vsli:raw="One of the values to search for.">検索対象の値の 1 つ。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">スパンと値の型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">スパン内でいずれかの値が最後に出現する位置のインデックス。 見つからない場合は、-1 を返します。</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">論理 OR 演算子で LastIndexOf を数回呼び出すのと同様に、指定された値のいずれかの最後のインデックスを検索します。</summary>
      <param name="span" vsli:raw="The span to search.">検索するスパン。</param>
      <param name="values" vsli:raw="The set of values to search for.">検索対象の値のセット。</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">スパンと値の型。</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">スパン内でいずれかの値が最後に出現する位置のインデックス。 見つからない場合は、-1 を返します。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether two read-only sequences overlap in memory.">2 つの読み取り専用シーケンスがメモリ内で重なり合うかどうかを判断します。</summary>
      <param name="span" vsli:raw="The first sequence.">最初のシーケンス。</param>
      <param name="other" vsli:raw="The second sequence.">2 番目のシーケンス。</param>
      <typeparam name="T" vsli:raw="The type of elements in the read-only sequence.">読み取り専用シーケンス内の要素いる型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences overlap; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">2 つのシーケンスが重なり合う場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Int32@)">
      <summary vsli:raw="Determines whether two read-only sequences overlap in memory and outputs the element offset.">2 つの読み取り専用シーケンスがメモリ内で重なり合うかどうかを判断し、要素のオフセットを出力します。</summary>
      <param name="span" vsli:raw="The first sequence.">最初のシーケンス。</param>
      <param name="other" vsli:raw="The second sequence.">2 番目のシーケンス。</param>
      <param name="elementOffset" vsli:raw="When the method returns, contains the offset between &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt;." />
      <typeparam name="T" vsli:raw="The type of elements in the span.">スパン内の要素の型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences overlap; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">2 つのシーケンスが重なり合う場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether a span and a read-only span overlap in memory.">スパンと読み取り専用スパンがメモリ内で重なり合うかどうかを判断します。</summary>
      <param name="span" vsli:raw="The span to compare.">比較対象とするスパン。</param>
      <param name="other" vsli:raw="The read-only span to compare.">比較する読み取り専用スパン。</param>
      <typeparam name="T" vsli:raw="The type of elements in the span.">スパン内の要素の型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences overlap; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">2 つのシーケンスが重なり合う場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0},System.Int32@)">
      <summary vsli:raw="Determines whether a span and a read-only span overlap in memory and outputs the element offset.">スパンと読み取り専用スパンがメモリ内で重なり合うかどうかを判断し、要素のオフセットを出力します。</summary>
      <param name="span" vsli:raw="The first sequence to compare.">比較する最初のシーケンス。</param>
      <param name="other" vsli:raw="The second sequence to compare.">比較する 2 番目のシーケンス。</param>
      <param name="elementOffset" vsli:raw="When the method returns, contains the offset between &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt;.">メソッドが戻ると、<paramref name="span" /> と <paramref name="other" /> の間にオフセットが含まれます。</param>
      <typeparam name="T" vsli:raw="The type of elements in the span.">スパン内の要素の型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences overlap; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">2 つのシーケンスが重なり合う場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Reverse``1(System.Span{``0})">
      <summary vsli:raw="Reverses the sequence of the elements in the entire span.">スパン全体の要素のシーケンスを反転させます。</summary>
      <param name="span" vsli:raw="The span to reverse.">反転対象とするスパン。</param>
      <typeparam name="T" vsli:raw="The type of elements in the span.">スパン内の要素の型。</typeparam>
    </member>
    <member name="M:System.MemoryExtensions.SequenceCompareTo``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines the relative order of two read-only sequences by comparing their elements using IComparable{T}.CompareTo(T).">IComparable{T}.CompareTo(T) を使用して要素を比較することで、2 つの読み取り専用シーケンスの相対順序を決定します。</summary>
      <param name="span" vsli:raw="The first sequence to compare.">比較する最初のシーケンス。</param>
      <param name="other" vsli:raw="The second sequence to compare.">比較する 2 番目のシーケンス。</param>
      <typeparam name="T" vsli:raw="The type of elements in the sequence.">シーケンス内の要素の型。</typeparam>
      <returns vsli:raw="A signed integer that indicates the relative order of &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt;:&lt;br /&gt;   - If less than 0, &lt;paramref name=&quot;span&quot; /&gt; precedes than &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If 0, &lt;paramref name=&quot;span&quot; /&gt; equals &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If greater than 0, &lt;paramref name=&quot;span&quot; /&gt; follows &lt;paramref name=&quot;other&quot; /&gt;.">
        <paramref name="span" /> と <paramref name="other" /> の相対順序を示す符号付き整数。   - 0 未満の場合、<paramref name="span" /> は <paramref name="other" /> より順序が先になります。   - 0 の場合、<paramref name="span" /> は <paramref name="other" /> と等しくなります。   - 0 より大きい場合、<paramref name="span" /> は <paramref name="other" /> の後になります。</returns>
    </member>
    <member name="M:System.MemoryExtensions.SequenceCompareTo``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines the relative order of a span and a read-only span by comparing the elements using IComparable{T}.CompareTo(T).">IComparable{T}.CompareTo(T) を使用して要素を比較することで、スパンと読み取り専用スパンの相対順序を決定します。</summary>
      <param name="span" vsli:raw="The span to compare.">比較対象とするスパン。</param>
      <param name="other" vsli:raw="The read-only span to compare.">比較する読み取り専用スパン。</param>
      <typeparam name="T" vsli:raw="The type of elements in the span.">スパン内の要素の型。</typeparam>
      <returns vsli:raw="A signed integer that indicates the relative order of &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt;:&lt;br /&gt;   - If less than 0, &lt;paramref name=&quot;span&quot; /&gt; precedes than &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If 0, &lt;paramref name=&quot;span&quot; /&gt; equals &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If greater than 0, &lt;paramref name=&quot;span&quot; /&gt; follows &lt;paramref name=&quot;other&quot; /&gt;.">
        <paramref name="span" /> と <paramref name="other" /> の相対順序を示す符号付き整数。   - 0 未満の場合、<paramref name="span" /> は <paramref name="other" /> より順序が先になります。   - 0 の場合、<paramref name="span" /> は <paramref name="other" /> と等しくなります。   - 0 より大きい場合、<paramref name="span" /> は <paramref name="other" /> の後になります。</returns>
    </member>
    <member name="M:System.MemoryExtensions.SequenceEqual``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether two read-only sequences are equal by comparing the elements using IEquatable{T}.Equals(T).">IEquatable{T}.Equals(T) を使用して要素を比較することで、2 つの読み取り専用シーケンスが等しいかどうかを判断します。</summary>
      <param name="span" vsli:raw="The first sequence to compare.">比較する最初のシーケンス。</param>
      <param name="other" vsli:raw="The second sequence to compare.">比較する 2 番目のシーケンス。</param>
      <typeparam name="T" vsli:raw="The type of elements in the sequence.">シーケンス内の要素の型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">2 つのシーケンスが等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.SequenceEqual``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether a span and a read-only span are equal by comparing the elements using IEquatable{T}.Equals(T).">IEquatable{T}.Equals(T) を使用して要素を比較することで、スパンと読み取り専用スパンが等しいかどうかを判断します。</summary>
      <param name="span" vsli:raw="The span to compare.">比較対象とするスパン。</param>
      <param name="other" vsli:raw="The read-only span to compare.">比較する読み取り専用スパン。</param>
      <typeparam name="T" vsli:raw="The type of elements in the sequence.">シーケンス内の要素の型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">2 つのシーケンスが等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Determines whether a read-only character span begins with a specified value when compared using a specified &lt;see cref=&quot;T:System.StringComparison&quot; /&gt; value.">指定された <see cref="T:System.StringComparison" /> 値を使用して比較したときに、読み取り専用の文字スパンが指定された値で始まるかどうかを判断します。</summary>
      <param name="span" vsli:raw="The source span.">ソース スパン。</param>
      <param name="value" vsli:raw="The sequence to compare to the beginning of the source span.">ソース スパンの先頭と比較するシーケンス。</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; are compared.">
        <paramref name="span" /> と <paramref name="value" /> の比較方法を決定する列挙型の値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the beginning of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" /> が <paramref name="span" /> の先頭と一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.StartsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether a specified sequence appears at the start of a read-only span.">指定されたシーケンスが読み取り専用スパンの先頭にあるかどうかを判断します。</summary>
      <param name="span" vsli:raw="The read-only character span to search.">検索する読み取り専用の文字スパン。</param>
      <param name="value" vsli:raw="A sequence to search for at the start of &lt;paramref name=&quot;span&quot; /&gt;.">
        <paramref name="span" /> の先頭で検索するシーケンス。</param>
      <typeparam name="T" vsli:raw="The type of elements in the span.">スパン内の要素の型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the beginning of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" /> が <paramref name="span" /> の先頭と一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.StartsWith``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether a specified sequence appears at the start of a span.">指定されたシーケンスがスパンの先頭にあるかどうかを判断します。</summary>
      <param name="span" vsli:raw="The span to search.">検索するスパン。</param>
      <param name="value" vsli:raw="A sequence to search for at the start of &lt;paramref name=&quot;span&quot; /&gt;.">
        <paramref name="span" /> の先頭で検索するシーケンス。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">スパン内の要素の型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the beginning of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" /> が <paramref name="span" /> の先頭と一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.MemoryExtensions.ToLower(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Globalization.CultureInfo)">
      <summary vsli:raw="Copies the characters from the source span into the destination, converting each character to lowercase, using the casing rules of the specified culture.">ソース スパンからデスティネーションに文字をコピーし、指定されたカルチャの大文字と小文字の規則を使用して各文字を小文字に変換します。</summary>
      <param name="source" vsli:raw="The source span.">ソース スパン。</param>
      <param name="destination" vsli:raw="The destination span which contains the transformed characters.">変換された文字を格納しているデスティネーション スパン。</param>
      <param name="culture" vsli:raw="An object that supplies culture-specific casing rules.">カルチャ固有の大文字と小文字の規則を提供するオブジェクト。</param>
      <returns vsli:raw="The number of characters written into the destination span. If the destination is too small, returns -1.">デスティネーション スパンに書き込まれた文字数。 コピー先が小さすぎる場合は、-1 を返します。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source and destination buffers overlap.">コピー元とコピー先のバッファーが重なり合います。</exception>
    </member>
    <member name="M:System.MemoryExtensions.ToLowerInvariant(System.ReadOnlySpan{System.Char},System.Span{System.Char})">
      <summary vsli:raw="Copies the characters from the source span into the destination, converting each character to lowercase, using the casing rules of the invariant culture.">ソース スパンからデスティネーションに文字をコピーし、インバリアント カルチャの大文字と小文字の規則を使用して各文字を小文字に変換します。</summary>
      <param name="source" vsli:raw="The source span.">ソース スパン。</param>
      <param name="destination" vsli:raw="The destination span which contains the transformed characters.">変換された文字を格納しているデスティネーション スパン。</param>
      <returns vsli:raw="The number of characters written into the destination span. If the destination is too small, returns -1.">デスティネーション スパンに書き込まれた文字数。 コピー先が小さすぎる場合は、-1 を返します。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source and destination buffers overlap.">コピー元とコピー先のバッファーが重なり合います。</exception>
    </member>
    <member name="M:System.MemoryExtensions.ToUpper(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Globalization.CultureInfo)">
      <summary vsli:raw="Copies the characters from the source span into the destination, converting each character to uppercase, using the casing rules of the specified culture.">ソース スパンからデスティネーションに文字をコピーし、指定されたカルチャの大文字と小文字の規則を使用して各文字を大文字に変換します。</summary>
      <param name="source" vsli:raw="The source span.">ソース スパン。</param>
      <param name="destination" vsli:raw="The destination span which contains the transformed characters.">変換された文字を格納しているデスティネーション スパン。</param>
      <param name="culture" vsli:raw="An object that supplies culture-specific casing rules.">カルチャ固有の大文字と小文字の規則を提供するオブジェクト。</param>
      <returns vsli:raw="The number of characters written into the destination span. If the destination is too small, returns -1.">デスティネーション スパンに書き込まれた文字数。 コピー先が小さすぎる場合は、-1 を返します。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source and destination buffers overlap.">コピー元とコピー先のバッファーが重なり合います。</exception>
    </member>
    <member name="M:System.MemoryExtensions.ToUpperInvariant(System.ReadOnlySpan{System.Char},System.Span{System.Char})">
      <summary vsli:raw="Copies the characters from the source span into the destination, converting each character to uppercase using the casing rules of the invariant culture.">ソース スパンからデスティネーションに文字をコピーし、インバリアント カルチャの大文字と小文字の規則を使用して各文字を大文字に変換します。</summary>
      <param name="source" vsli:raw="The source span.">ソース スパン。</param>
      <param name="destination" vsli:raw="The destination span which contains the transformed characters.">変換された文字を格納しているデスティネーション スパン。</param>
      <returns vsli:raw="The number of characters written into the destination span. If the destination is too small, returns -1.">デスティネーション スパンに書き込まれた文字数。 コピー先が小さすぎる場合は、-1 を返します。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source and destination buffers overlap.">コピー元とコピー先のバッファーが重なり合います。</exception>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.Memory{System.Char})">
      <summary vsli:raw="Removes all leading and trailing whitespace characters from a character memory region.">ある文字メモリ領域から先頭と末尾にある空白文字をすべて削除します。</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">文字が削除されるソース メモリ。</param>
      <returns vsli:raw="The trimmed character memory region.">トリミングされた文字メモリ領域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlyMemory{System.Char})">
      <summary vsli:raw="Removes all leading and trailing whitespace characters from a read-only character memory region.">ある読み取り専用文字メモリ領域から先頭と末尾にある空白文字をすべて削除します。</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">文字が削除されるソース メモリ。</param>
      <returns vsli:raw="The trimmed character memory region.">トリミングされた文字メモリ領域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all leading and trailing whitespace characters from a read-only character span.">ある読み取り専用文字スパンから先頭と末尾にある空白文字をすべて削除します。</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">文字が削除されるソース スパン。</param>
      <returns vsli:raw="The trimmed read-only character span.">トリミングされた読み取り専用文字スパン。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char},System.Char)">
      <summary vsli:raw="Removes all leading and trailing occurrences of a specified character from a read-only character span.">読み取り専用文字スパンから、先頭と末尾の現れる指定文字をすべて削除します。</summary>
      <param name="span" vsli:raw="The source span from which the character is removed.">文字が削除されるソース スパン。</param>
      <param name="trimChar" vsli:raw="The specified character to look for and remove.">検索と削除の対象となる指定された文字。</param>
      <returns vsli:raw="The trimmed read-only character span.">トリミングされた読み取り専用文字スパン。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all leading and trailing occurrences of a set of characters specified in a read-only span from a read-only character span.">読み取り専用文字スパンから、読み取り専用スパンに指定された文字セットが先頭と末尾に現れる箇所をすべて削除します。</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">文字が削除されるソース スパン。</param>
      <param name="trimChars" vsli:raw="The span which contains the set of characters to remove.">削除対象の文字のセットを格納するスパン。</param>
      <returns vsli:raw="The trimmed read-only character span.">トリミングされた読み取り専用文字スパン。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.Span{System.Char})">
      <summary vsli:raw="Removes all leading and trailing whitespace characters from a character span.">ある文字スパンから先頭と末尾にある空白文字をすべて削除します。</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">文字が削除されるソース スパン。</param>
      <returns vsli:raw="The trimmed character span.">トリミングされた文字スパン。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.Memory{``0},``0)">
      <summary vsli:raw="Removes all leading and trailing occurrences of a specified element from a memory region.">指定された要素が先頭と末尾に現れる箇所をすべて、メモリ領域から削除します。</summary>
      <param name="memory" vsli:raw="The source memory from which the element is removed.">要素が削除されるソース メモリ。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">検索と削除の対象となる指定の要素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">メモリ領域内の要素の型。</typeparam>
      <returns vsli:raw="The trimmed memory region.">トリミングされたメモリ領域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.Memory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading and trailing occurrences of a set of elements specified in a read-only span from a memory region.">読み取り専用スパンで指定された一連の要素が先頭と末尾に現れる箇所をすべて、メモリ領域から削除します。</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">要素が削除されるソース メモリ。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">削除する要素のセットを含むスパン。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">メモリ領域内の要素の型。</typeparam>
      <returns vsli:raw="The trimmed memory region.">トリミングされたメモリ領域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.ReadOnlyMemory{``0},``0)">
      <summary vsli:raw="Removes all leading and trailing occurrences of a specified element from a read-only memory region.">指定された要素が先頭と末尾に現れる箇所をすべて、読み取り専用メモリ領域から削除します。</summary>
      <param name="memory" vsli:raw="The source memory from which the element is removed.">要素が削除されるソース メモリ。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">検索と削除の対象となる指定の要素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">読み取り専用メモリ領域内の要素の型。</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">トリミングされた読み取り専用メモリ領域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading and trailing occurrences of a set of elements specified in a read-only span from a read-only memory region.">読み取り専用スパンで指定された一連の要素が先頭と末尾に現れる箇所をすべて、読み取り専用メモリ領域から削除します。</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">要素が削除されるソース メモリ。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">削除する要素のセットを含むスパン。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">読み取り専用メモリ領域内の要素の型。</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">トリミングされた読み取り専用メモリ領域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Removes all leading and trailing occurrences of a specified element from a read-only span.">指定された要素が先頭と末尾に現れる箇所をすべて、読み取り専用スパンから削除します。</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">要素が削除されるソース スパン。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">検索と削除の対象となる指定の要素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">読み取り専用スパン内の要素の型。</typeparam>
      <returns vsli:raw="The trimmed read-only span.">トリミングされた読み取り専用スパン。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading and trailing occurrences of a set of elements specified in a read-only span from a read-only span.">読み取り専用スパンで指定された一連の要素が先頭と末尾に現れる箇所をすべて、読み取り専用スパンから削除します。</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">要素が削除されるソース スパン。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">削除する要素のセットを含むスパン。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">読み取り専用スパン内の要素の型。</typeparam>
      <returns vsli:raw="The trimmed read-only span.">トリミングされた読み取り専用スパン。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.Span{``0},``0)">
      <summary vsli:raw="Removes all leading and trailing occurrences of a specified element from a span.">指定された要素が先頭と末尾に現れる箇所をすべて、スパンから削除します。</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">要素が削除されるソース スパン。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">検索と削除の対象となる指定の要素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">スパン内の要素の型。</typeparam>
      <returns vsli:raw="The trimmed span.">トリミングされたスパン。</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading and trailing occurrences of a set of elements specified in a read-only span from a span.">読み取り専用スパンで指定された一連の要素が先頭と末尾に現れる箇所をすべて、スパンから削除します。</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">要素が削除されるソース スパン。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">削除する要素のセットを含むスパン。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">スパン内の要素の型。</typeparam>
      <returns vsli:raw="The trimmed span.">トリミングされたスパン。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.Memory{System.Char})">
      <summary vsli:raw="Removes all trailing whitespace characters from a character memory region.">文字メモリ領域から末尾の空白文字をすべて削除します。</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">文字が削除されるソース メモリ。</param>
      <returns vsli:raw="The trimmed character memory region.">トリミングされた文字メモリ領域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlyMemory{System.Char})">
      <summary vsli:raw="Removes all trailing whitespace characters from a read-only character memory region.">読み取り専用文字メモリ領域から末尾の空白文字をすべて削除します。</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">文字が削除されるソース メモリ。</param>
      <returns vsli:raw="The trimmed read-only character span.">トリミングされた読み取り専用文字スパン。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all trailing whitespace characters from a read-only character span.">読み取り専用文字スパンから末尾の空白文字をすべて削除します。</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">文字が削除されるソース スパン。</param>
      <returns vsli:raw="The trimmed read-only character span.">トリミングされた読み取り専用文字スパン。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char},System.Char)">
      <summary vsli:raw="Removes all trailing occurrences of a specified character from a read-only span.">読み取り専用スパンから、指定した文字が末尾に現れる箇所をすべて削除します。</summary>
      <param name="span" vsli:raw="The source span from which the character is removed.">文字が削除されるソース スパン。</param>
      <param name="trimChar" vsli:raw="The specified character to look for and remove.">検索と削除の対象となる指定された文字。</param>
      <returns vsli:raw="The trimmed read-only character span.">トリミングされた読み取り専用文字スパン。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all trailing occurrences of a set of characters specified in a read-only span from a read-only character span.">読み取り専用文字スパンから、読み取り専用スパンに指定された文字セットが末尾に現れる箇所をすべて削除します。</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">文字が削除されるソース スパン。</param>
      <param name="trimChars" vsli:raw="The span which contains the set of characters to remove.">削除対象の文字のセットを格納するスパン。</param>
      <returns vsli:raw="The trimmed read-only character span.">トリミングされた読み取り専用文字スパン。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.Span{System.Char})">
      <summary vsli:raw="Removes all trailing whitespace characters from a character span.">文字スパンから末尾の空白文字をすべて削除します。</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">文字が削除されるソース スパン。</param>
      <returns vsli:raw="The trimmed character span.">トリミングされた文字スパン。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.Memory{``0},``0)">
      <summary vsli:raw="Removes all trailing occurrences of a specified element from a character memory region.">指定された要素が末尾に現れる箇所をすべて、文字メモリ領域から削除します。</summary>
      <param name="memory" vsli:raw="The source memory from which the element is removed.">要素が削除されるソース メモリ。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">検索と削除の対象となる指定の要素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">メモリ領域内の要素の型。</typeparam>
      <returns vsli:raw="The trimmed memory region.">トリミングされたメモリ領域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.Memory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all trailing occurrences of a set of elements specified in a read-only span from a memory region.">読み取り専用スパンで指定された一連の要素が末尾に現れる箇所をすべて、メモリ領域から削除します。</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">要素が削除されるソース メモリ。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">削除する要素のセットを含むスパン。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">メモリ領域内の要素の型。</typeparam>
      <returns vsli:raw="The trimmed memory region.">トリミングされたメモリ領域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlyMemory{``0},``0)">
      <summary vsli:raw="Removes all trailing occurrences of a specified element from a read-only memory region.">指定された要素が末尾に現れる箇所をすべて、読み取り専用メモリ領域から削除します。</summary>
      <param name="memory" vsli:raw="The source memory from which the element is removed.">要素が削除されるソース メモリ。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">検索と削除の対象となる指定の要素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">読み取り専用メモリ領域内の要素の型。</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">トリミングされた読み取り専用メモリ領域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all trailing occurrences of a set of elements specified in a read-only span from a read-only memory region.">読み取り専用スパンで指定された一連の要素が末尾に現れる箇所をすべて、読み取り専用メモリ領域から削除します。</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">要素が削除されるソース メモリ。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">削除する要素のセットを含むスパン。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">読み取り専用メモリ領域内の要素の型。</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">トリミングされた読み取り専用メモリ領域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Removes all trailing occurrences of a specified element from a read-only span.">読み取り専用スパンから、指定した要素が末尾に現れる箇所をすべて削除します。</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">要素が削除されるソース スパン。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">検索と削除の対象となる指定の要素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">読み取り専用スパン内の要素の型。</typeparam>
      <returns vsli:raw="The trimmed read-only span.">トリミングされた読み取り専用スパン。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all trailing occurrences of a set of elements specified in a read-only span from a read-only span.">読み取り専用スパンで指定された一連の要素が末尾に現れる箇所をすべて、読み取り専用スパンから削除します。</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">要素が削除されるソース スパン。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">削除する要素のセットを含むスパン。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">読み取り専用スパン内の要素の型。</typeparam>
      <returns vsli:raw="The trimmed read-only span.">トリミングされた読み取り専用スパン。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.Span{``0},``0)">
      <summary vsli:raw="Removes all trailing occurrences of a specified element from a span.">指定された要素が末尾に現れる箇所をすべて、スパンから削除します。</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">要素が削除されるソース スパン。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">検索と削除の対象となる指定の要素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">スパン内の要素の型。</typeparam>
      <returns vsli:raw="The trimmed span.">トリミングされたスパン。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all trailing occurrences of a set of elements specified in a read-only span from a span.">読み取り専用スパンで指定された一連の要素が末尾に現れる箇所をすべて、スパンから削除します。</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">要素が削除されるソース スパン。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">削除する要素のセットを含むスパン。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">スパン内の要素の型。</typeparam>
      <returns vsli:raw="The trimmed span.">トリミングされたスパン。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.Memory{System.Char})">
      <summary vsli:raw="Removes all leading whitespace characters from a memory region.">あるメモリ領域から先頭にある空白文字をすべて削除します。</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">文字が削除されるソース メモリ。</param>
      <returns vsli:raw="The trimmed character memory region.">トリミングされた文字メモリ領域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlyMemory{System.Char})">
      <summary vsli:raw="Removes all leading whitespace characters from a read-only memory region.">ある読み取り専用メモリ領域から先頭にある空白文字をすべて削除します。</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">文字が削除されるソース メモリ。</param>
      <returns vsli:raw="The trimmed read-only character memory region.">トリミングされた読み取り専用文字メモリ領域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all leading whitespace characters from a read-only span.">ある読み取り専用スパンから先頭にある空白文字をすべて削除します。</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">文字が削除されるソース スパン。</param>
      <returns vsli:raw="The trimmed read-only character span.">トリミングされた読み取り専用文字スパン。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char},System.Char)">
      <summary vsli:raw="Removes all leading occurrences of a specified character from the span.">指定した文字が先頭に現れる箇所をすべてスパンから削除します。</summary>
      <param name="span" vsli:raw="The source span from which the character is removed.">文字が削除されるソース スパン。</param>
      <param name="trimChar" vsli:raw="The specified character to look for and remove.">検索と削除の対象となる指定された文字。</param>
      <returns vsli:raw="The trimmed read-only character span.">トリミングされた読み取り専用文字スパン。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all leading occurrences of a set of characters specified in a read-only span from the span.">読み取り専用スパンに指定されている文字のセットが先頭に現れる箇所をすべて、スパンから削除します。</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">文字が削除されるソース スパン。</param>
      <param name="trimChars" vsli:raw="The span which contains the set of characters to remove.">削除対象の文字のセットを格納するスパン。</param>
      <returns vsli:raw="The trimmed read-only character span.">トリミングされた読み取り専用文字スパン。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.Span{System.Char})">
      <summary vsli:raw="Removes all leading whitespace characters from a span.">あるスパンから先頭にある空白文字をすべて削除します。</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">文字が削除されるソース スパン。</param>
      <returns vsli:raw="The trimmed character span.">トリミングされた文字スパン。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.Memory{``0},``0)">
      <summary vsli:raw="Removes all leading occurrences of a specified element from a memory region.">指定された要素が先頭に現れる箇所をすべて、メモリ領域から削除します。</summary>
      <param name="memory" vsli:raw="The source memory region from which the element is removed.">要素が削除されるソース メモリ領域。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">検索と削除の対象となる指定の要素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">メモリ領域内の要素の型。</typeparam>
      <returns vsli:raw="The trimmed memory region.">トリミングされたメモリ領域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.Memory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading occurrences of a set of elements specified in a read-only span from a memory region.">読み取り専用スパンで指定された一連の要素が先頭に現れる箇所をすべて、メモリ領域から削除します。</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">要素が削除されるソース メモリ。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">削除する要素のセットを含むスパン。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">メモリ領域内の要素の型。</typeparam>
      <returns vsli:raw="The trimmed memory region.">トリミングされたメモリ領域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlyMemory{``0},``0)">
      <summary vsli:raw="Removes all leading occurrences of a specified element from a memory region.">指定された要素が先頭に現れる箇所をすべて、メモリ領域から削除します。</summary>
      <param name="memory" vsli:raw="The source memory from which the element is removed.">要素が削除されるソース メモリ。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">検索と削除の対象となる指定の要素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">読み取り専用メモリ領域内の要素の型。</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">トリミングされた読み取り専用メモリ領域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading occurrences of a set of elements specified in a read-only span from a memory region.">読み取り専用スパンで指定された一連の要素が先頭に現れる箇所をすべて、メモリ領域から削除します。</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">要素が削除されるソース メモリ。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">削除する要素のセットを含むスパン。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">読み取り専用メモリ領域内の要素の型。</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">トリミングされた読み取り専用メモリ領域。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Removes all leading occurrences of a specified element from the span.">指定した要素が先頭に現れる箇所をすべてスパンから削除します。</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">要素が削除されるソース スパン。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">検索と削除の対象となる指定の要素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">読み取り専用スパン内の要素の型。</typeparam>
      <returns vsli:raw="The trimmed read-only span.">トリミングされた読み取り専用スパン。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading occurrences of a set of elements specified in a read-only span from the span.">読み取り専用スパンで指定された一連の要素が先頭に現れる箇所をすべて、スパンから削除します。</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">要素が削除されるソース スパン。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">削除する要素のセットを含むスパン。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">読み取り専用スパン内の要素の型。</typeparam>
      <returns vsli:raw="The trimmed read-only span.">トリミングされた読み取り専用スパン。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.Span{``0},``0)">
      <summary vsli:raw="Removes all leading occurrences of a specified element from the span.">指定した要素が先頭に現れる箇所をすべてスパンから削除します。</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">要素が削除されるソース スパン。</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">検索と削除の対象となる指定の要素。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">スパン内の要素の型。</typeparam>
      <returns vsli:raw="The trimmed span.">トリミングされたスパン。</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading occurrences of a set of elements specified in a read-only span from the span.">読み取り専用スパンで指定された一連の要素が先頭に現れる箇所をすべて、スパンから削除します。</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">要素が削除されるソース スパン。</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">削除する要素のセットを含むスパン。</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">スパン内の要素の型。</typeparam>
      <returns vsli:raw="The trimmed span.">トリミングされたスパン。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.MemoryMarshal">
      <summary vsli:raw="Provides methods to interoperate with &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;, &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;,  &lt;see cref=&quot;T:System.Span`1&quot; /&gt;, and  &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt;.">
        <see cref="T:System.Memory`1" />、<see cref="T:System.ReadOnlyMemory`1" />、<see cref="T:System.Span`1" />、<see cref="T:System.ReadOnlySpan`1" /> と相互運用するメソッドを提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.ReadOnlySpan{``0})">
      <summary vsli:raw="Casts a &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; of one primitive type, &lt;paramref name=&quot;T&quot; /&gt;, to a &lt;see langword=&quot;ReadOnlySpan&amp;lt;Byte&amp;gt;&quot; /&gt;.">1 つのプリミティブ型 (<paramref name="T" />) の <see cref="T:System.ReadOnlySpan`1" /> を、<see langword="ReadOnlySpan&lt;Byte&gt;" /> にキャストします。</summary>
      <param name="span" vsli:raw="The source slice to convert.">変換するソース スライス。</param>
      <typeparam name="T" vsli:raw="The type of items in the read-only span.">読み取り専用スパン内の項目の種類。</typeparam>
      <returns vsli:raw="A read-only span of type &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">
        <see cref="T:System.Byte" /> 型の読み取り専用スパン。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" /> には参照またはポインターが含まれています。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The &lt;see cref=&quot;P:System.ReadOnlySpan`1.Length&quot; /&gt; property of the new &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; would exceed &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;">新しい <see cref="T:System.ReadOnlySpan`1" /> の <see cref="P:System.ReadOnlySpan`1.Length" /> プロパティは <see cref="F:System.Int32.MaxValue" /> を超えます</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.Span{``0})">
      <summary vsli:raw="Casts a &lt;see cref=&quot;T:System.Span`1&quot; /&gt; of one primitive type, &lt;paramref name=&quot;T&quot; /&gt;, to a &lt;see langword=&quot;Span&amp;lt;Byte&amp;gt;&quot; /&gt;.">1 つのプリミティブ型 (<paramref name="T" />) の <see cref="T:System.Span`1" /> を、<see langword="Span&lt;Byte&gt;" /> にキャストします。</summary>
      <param name="span" vsli:raw="The source slice to convert.">変換するソース スライス。</param>
      <typeparam name="T" vsli:raw="The type of items in the span.">スパン内の項目の種類。</typeparam>
      <returns vsli:raw="A span of type &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">
        <see cref="T:System.Byte" /> 型のスパン。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" /> には参照またはポインターが含まれています。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The &lt;see cref=&quot;P:System.ReadOnlySpan`1.Length&quot; /&gt; property of the new &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; would exceed &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;">新しい <see cref="T:System.Span`1" /> の <see cref="P:System.Span`1.Length" /> プロパティは <see cref="F:System.Int32.MaxValue" /> を超えます</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsMemory``1(System.ReadOnlyMemory{``0})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; instance from a &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;.">
        <see cref="T:System.ReadOnlyMemory`1" /> から <see cref="T:System.Memory`1" /> インスタンスを作成します。</summary>
      <param name="memory" vsli:raw="The read-only memory buffer.">読み取り専用メモリ バッファー。</param>
      <typeparam name="T" vsli:raw="The type of items in the read-only memory buffer.">読み取り専用メモリバッファー内の項目の型。</typeparam>
      <returns vsli:raw="A memory block that represents the same memory as the &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;.">
        <see cref="T:System.ReadOnlyMemory`1" /> と同じメモリを表すメモリ ブロック。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsRef``1(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reinterprets a read-only span of bytes as a read-only reference to the structure of type &lt;paramref name=&quot;T&quot; /&gt;.">読み取り専用スパンのバイトを、<paramref name="T" /> 型の構造体への読み取り専用参照として再解釈します。</summary>
      <param name="span" vsli:raw="The read-only span to reinterpret.">再解釈する読み取り専用スパン。</param>
      <typeparam name="T" vsli:raw="The type of the returned reference.">返された参照の型。</typeparam>
      <returns vsli:raw="The read-only reference to the structure of type &lt;paramref name=&quot;T&quot; /&gt;.">
        <paramref name="T" /> 型の構造体への読み取り専用参照。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsRef``1(System.Span{System.Byte})">
      <summary vsli:raw="Reinterprets a span of bytes as a reference to the structure of type &lt;paramref name=&quot;T&quot; /&gt;.">スパンのバイトを、<paramref name="T" /> 型の構造体への参照として再解釈します。</summary>
      <param name="span" vsli:raw="The span to reinterpret.">再解釈するスパン。</param>
      <typeparam name="T" vsli:raw="The type of the returned reference.">返された参照の型。</typeparam>
      <returns vsli:raw="The reference to the structure of type &lt;paramref name=&quot;T&quot; /&gt;.">
        <paramref name="T" /> 型の構造体への参照。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.ReadOnlySpan{``0})">
      <summary vsli:raw="Casts a read-only span of one primitive type to a read-only span of another primitive type.">1 つのプリミティブ型の読み取り専用スパンを、別のプリミティブ型の読み取り専用スパンにキャストします。</summary>
      <param name="span" vsli:raw="The source slice to convert.">変換するソース スライス。</param>
      <typeparam name="TFrom" vsli:raw="The type of the source span.">ソーススパンの種類。</typeparam>
      <typeparam name="TTo" vsli:raw="The type of the target span.">ターゲットスパンの種類。</typeparam>
      <returns vsli:raw="The converted read-only span.">変換された読み取り専用スパン。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;TFrom&quot; /&gt; or &lt;paramref name=&quot;TTo&quot; /&gt; contains managed object references.">
        <paramref name="TFrom" /> または <paramref name="TTo" /> には参照またはポインターが含まれています。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.Span{``0})">
      <summary vsli:raw="Casts a span of one primitive type to a span of another primitive type.">1 つのプリミティブ型のスパンを、別のプリミティブ型のスパンにキャストします。</summary>
      <param name="span" vsli:raw="The source slice to convert.">変換するソース スライス。</param>
      <typeparam name="TFrom" vsli:raw="The type of the source span.">ソーススパンの種類。</typeparam>
      <typeparam name="TTo" vsli:raw="The type of the target span.">ターゲットスパンの種類。</typeparam>
      <returns vsli:raw="The converted span.">変換されたスパン。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;TFrom&quot; /&gt; or &lt;paramref name=&quot;TTo&quot; /&gt; contains managed object references.">
        <paramref name="TFrom" /> または <paramref name="TTo" /> には参照またはポインターが含まれています。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray``1(``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new memory buffer over the portion of the pre-pinned target array beginning at the &lt;paramref name=&quot;start&quot; /&gt; index and consisting of &lt;paramref name=&quot;length&quot; /&gt; items.">
        <paramref name="start" /> インデックスで始まり <paramref name="length" /> 個の項目で構成される、事前にピン留めされたターゲット配列の一部に対する、新しいメモリ バッファーを作成します。</summary>
      <param name="array" vsli:raw="The pre-pinned source array.">事前にピン留めされたソース配列。</param>
      <param name="start" vsli:raw="The index of &lt;paramref name=&quot;array&quot; /&gt; at which to begin the memory block.">メモリ ブロックの開始位置を示す <paramref name="array" /> のインデックス。</param>
      <param name="length" vsli:raw="The number of items to include in the memory block.">メモリ ブロックに含める項目の数。</param>
      <typeparam name="T" vsli:raw="The type of the array.">配列の型。</typeparam>
      <returns vsli:raw="A block of memory over the specified elements of &lt;paramref name=&quot;array&quot; /&gt;. If &lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, or if &lt;paramref name=&quot;start&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are 0, the method returns a &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; instance of &lt;see cref=&quot;P:System.Memory`1.Length&quot; /&gt; zero.">指定した <paramref name="array" /> の要素に対するメモリのブロック。 <paramref name="array" /> が <see langword="null" /> の場合、または <paramref name="start" /> と <paramref name="length" /> が 0 である場合、メソッドは <see cref="P:System.Memory`1.Length" /> 0 のインスタンス <see cref="T:System.Memory`1" /> を返します。</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is covariant, and the type of &lt;paramref name=&quot;array&quot; /&gt; is not exactly &lt;paramref name=&quot;T[]&quot; /&gt;.">
        <paramref name="array" /> は共変であり、<paramref name="array" /> の型は <paramref name="T[]" /> とまったく同じではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;start&quot; /&gt; or the end index is not in the range of 0 to &lt;see cref=&quot;P:System.Array.Length&quot; /&gt;.">
        <paramref name="start" /> または終了インデックスは、0 から <see cref="P:System.Array.Length" /> までの範囲に含まれません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan``1(``0@,System.Int32)">
      <summary vsli:raw="Creates a new read-only span over a portion of a regular managed object.">定期的なマネージド オブジェクトの一部に対する新しい読み取り専用スパンを作成します。</summary>
      <param name="reference" vsli:raw="A reference to data.">データへの参照。</param>
      <param name="length" vsli:raw="The number of &lt;paramref name=&quot;T&quot; /&gt; elements that &lt;paramref name=&quot;reference&quot; /&gt; contains.">
        <paramref name="reference" /> に含まれる <paramref name="T" /> 要素の数。</param>
      <typeparam name="T" vsli:raw="The type of the data items.">データ項目の型。</typeparam>
      <returns vsli:raw="A read-only span.">読み取り専用スパン。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.CreateSpan``1(``0@,System.Int32)">
      <summary vsli:raw="Creates a new span over a portion of a regular managed object.">定期的なマネージド オブジェクトの一部に対する新しいスパンを作成します。</summary>
      <param name="reference" vsli:raw="A reference to data.">データへの参照。</param>
      <param name="length" vsli:raw="The number of &lt;paramref name=&quot;T&quot; /&gt; elements that &lt;paramref name=&quot;reference&quot; /&gt; contains.">
        <paramref name="reference" /> に含まれる <paramref name="T" /> 要素の数。</param>
      <typeparam name="T" vsli:raw="The type of the data items.">データ項目の型。</typeparam>
      <returns vsli:raw="A span.">スパン。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.ReadOnlySpan{``0})">
      <summary vsli:raw="Returns a reference to the element of the read-only span at index 0.">インデックス 0 にある読み取り専用スパンの要素の参照を返します。</summary>
      <param name="span" vsli:raw="The read-only span from which the reference is retrieved.">参照の取得元となる読み取り専用スパン。</param>
      <typeparam name="T" vsli:raw="The type of items in the span.">スパン内の項目の種類。</typeparam>
      <returns vsli:raw="A reference to the element at index 0.">インデックス 0 にある要素の参照。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.Span{``0})">
      <summary vsli:raw="Returns a reference to the element of the span at index 0.">インデックス 0 にあるスパンの要素の参照を返します。</summary>
      <param name="span" vsli:raw="The span from which the reference is retrieved.">参照の取得元となるスパン。</param>
      <typeparam name="T" vsli:raw="The type of items in the span.">スパン内の項目の種類。</typeparam>
      <returns vsli:raw="A reference to the element at index 0.">インデックス 0 にある要素の参照。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Read``1(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a structure of type &lt;typeparamref name=&quot;T&quot; /&gt; out of a read-only span of bytes.">型の構造体を読み取ります <param name="T" /> バイト型の読み取り専用スパンから。</summary>
      <param name="source" vsli:raw="A read-only span.">読み取り専用スパン。</param>
      <typeparam name="T" vsli:raw="The type of the item to retrieve from the read-only span.">読み取り専用スパンから取得する項目の型。</typeparam>
      <returns vsli:raw="The structure retrieved from the read-only span.">読み取り専用スパンから取得される構造体。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" /> には参照またはポインターが含まれています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is smaller than &lt;paramref name=&quot;T&quot; /&gt;'s length in bytes.">
        <paramref name="source" /> が <paramref name="T" /> より小さい値になっています。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.ToEnumerable``1(System.ReadOnlyMemory{``0})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; view of the given read-only memory buffer.">指定した読み取り専用メモリ バッファーの <see cref="T:System.Collections.Generic.IEnumerable`1" /> ビューを作成します。</summary>
      <param name="memory" vsli:raw="A read-only memory buffer.">読み取り専用メモリ バッファー。</param>
      <typeparam name="T" vsli:raw="The type of the items in the read-only memory buffer.">読み取り専用メモリバッファー内の項目の型。</typeparam>
      <returns vsli:raw="An enumerable view of &lt;paramref name=&quot;memory&quot; /&gt;.">
        <paramref name="memory" /> の列挙可能なビュー。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetArray``1(System.ReadOnlyMemory{``0},System.ArraySegment{``0}@)">
      <summary vsli:raw="Tries to get an array segment from the underlying memory buffer. The return value indicates the success of the operation.">基になるメモリ バッファーから配列セグメントの取得を試みます。 戻り値は、操作の成功を示します。</summary>
      <param name="memory" vsli:raw="A read-only memory buffer.">読み取り専用メモリ バッファー。</param>
      <param name="segment" vsli:raw="When this method returns, contains the array segment retrieved from the underlying read-only memory buffer. If the method fails, the method returns a default array segment.">このメソッドが戻ると、基になる読み取り専用メモリ バッファーから取得した配列セグメントが含まれています。 メソッドが失敗した場合、メソッドは既定の配列セグメントを返します。</param>
      <typeparam name="T" vsli:raw="The type of items in the read-only memory buffer.">読み取り専用メモリバッファー内の項目の型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method call succeeds; &lt;see langword=&quot;false&quot; /&gt; otherwise.">メソッドの呼び出しが成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@)">
      <summary vsli:raw="Tries to retrieve a &lt;see cref=&quot;T:System.Buffers.MemoryManager`1&quot; /&gt; from the underlying read-only memory buffer.">基になる読み取り専用メモリ バッファーから <see cref="T:System.Buffers.MemoryManager`1" /> の取得を試みます。</summary>
      <param name="memory" vsli:raw="The read-only memory buffer for which to get the memory manager.">メモリ マネージャーを取得する対象の読み取り専用メモリ バッファー。</param>
      <param name="manager" vsli:raw="When the method returns, the manager of &lt;paramref name=&quot;memory&quot; /&gt;.">メソッドから戻るときは、<paramref name="memory" /> のマネージャー。</param>
      <typeparam name="T" vsli:raw="The type of the items in the read-only memory buffer.">読み取り専用メモリバッファー内の項目の型。</typeparam>
      <typeparam name="TManager" vsli:raw="The type of the &lt;see cref=&quot;T:System.Buffers.MemoryManager`1&quot; /&gt; to retrieve.">取得<see cref="T:System.Buffers.MemoryManager`1" />するの型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method retrieved the memory manager; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">メソッドがメモリ マネージャーを取得した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@,System.Int32@,System.Int32@)">
      <summary vsli:raw="Tries to retrieve a &lt;see cref=&quot;T:System.Buffers.MemoryManager`1&quot; /&gt;, start index, and length from the underlying read-only memory buffer.">基になる読み取り専用メモリ バッファーから、<see cref="T:System.Buffers.MemoryManager`1" />、開始インデックス、長さの取得を試みます。</summary>
      <param name="memory" vsli:raw="The read-only memory buffer for which to get the memory manager.">メモリ マネージャーを取得する対象の読み取り専用メモリ バッファー。</param>
      <param name="manager" vsli:raw="When the method returns, the manager of &lt;paramref name=&quot;memory&quot; /&gt;.">メソッドから戻るときは、<paramref name="memory" /> のマネージャー。</param>
      <param name="start" vsli:raw="When the method returns, the offset from the start of the &lt;paramref name=&quot;manager&quot; /&gt; that the &lt;paramref name=&quot;memory&quot; /&gt; represents.">メソッドから戻るときは、<paramref name="memory" /> が表す <paramref name="manager" /> の先頭からのオフセット。</param>
      <param name="length" vsli:raw="When the method returns, the length of the &lt;paramref name=&quot;manager&quot; /&gt; that the &lt;paramref name=&quot;memory&quot; /&gt; represents.">メソッドから戻るときは、<paramref name="memory" /> が表す <paramref name="manager" /> の長さ。</param>
      <typeparam name="T" vsli:raw="The type of the items in the read-only memory buffer.">読み取り専用メモリバッファー内の項目の型。</typeparam>
      <typeparam name="TManager" vsli:raw="The type of the &lt;see cref=&quot;T:System.Buffers.MemoryManager`1&quot; /&gt; to retrieve.">取得<see cref="T:System.Buffers.MemoryManager`1" />するの型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method succeeded; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">メソッドが成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetString(System.ReadOnlyMemory{System.Char},System.String@,System.Int32@,System.Int32@)">
      <summary vsli:raw="Tries to get the underlying string from a &lt;see langword=&quot;System.ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt;.">
        <see langword="System.ReadOnlyMemory&lt;Char&gt;" /> から基になる文字列の取得を試みます。</summary>
      <param name="memory" vsli:raw="Read-only memory containing a block of characters.">文字のブロックを含む読み取り専用メモリ。</param>
      <param name="text" vsli:raw="When the method returns, the string contained in the memory buffer.">メソッドが戻ると、文字列はメモリ バッファーに含まれています。</param>
      <param name="start" vsli:raw="The starting location in &lt;paramref name=&quot;text&quot; /&gt;.">
        <paramref name="text" /> の開始位置。</param>
      <param name="length" vsli:raw="The number of characters in &lt;paramref name=&quot;text&quot; /&gt;.">
        <paramref name="text" /> の文字数。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method successfully retrieves the underlying string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">メソッドが基になる文字列の取得に成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryRead``1(System.ReadOnlySpan{System.Byte},``0@)">
      <summary vsli:raw="Tries to read a structure of type &lt;paramref name=&quot;T&quot; /&gt; from a read-only span of bytes.">バイト型の読み取り専用スパンから <paramref name="T" /> 型の構造体の読み取りを試みます。</summary>
      <param name="source" vsli:raw="A read-only span of bytes.">バイト型の読み取り専用スパン。</param>
      <param name="value" vsli:raw="When the method returns, an instance of &lt;paramref name=&quot;T&quot; /&gt;.">メソッドから戻るときは、<paramref name="T" /> のインスタンス。</param>
      <typeparam name="T" vsli:raw="The type of the structure to retrieve.">取得する構造体の型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method succeeds in retrieving an instance of the structure; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">メソッドが構造体のインスタンスの取得に成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" /> には参照またはポインターが含まれています。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryWrite``1(System.Span{System.Byte},``0@)">
      <summary vsli:raw="Tries to write a structure of type &lt;paramref name=&quot;T&quot; /&gt; into a span of bytes.">バイト型のスパンに <paramref name="T" /> 型の構造体の書き込みを試みます。</summary>
      <param name="destination" vsli:raw="The span of bytes to contain the structure.">構造体を含むバイト型のスパン。</param>
      <param name="value" vsli:raw="The structure to be written to the span.">スパンに書き込まれる構造体。</param>
      <typeparam name="T" vsli:raw="The type of the structure.">構造体の型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the write operation succeeded; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The method returns &lt;see langword=&quot;false&quot; /&gt; if the span is too small to contain &lt;paramref name=&quot;T&quot; /&gt;.">書き込み操作が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <paramref name="T" /> を格納するにはスパンが小さすぎる場合、メソッドは <see langword="false" /> を返します。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" /> には参照またはポインターが含まれています。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Write``1(System.Span{System.Byte},``0@)">
      <summary vsli:raw="Writes a structure of type &lt;paramref name=&quot;T&quot; /&gt; into a span of bytes.">バイト型のスパンに <paramref name="T" /> 型の構造体を書き込みます。</summary>
      <param name="destination" vsli:raw="The span of bytes to contain the structure.">構造体を含むバイト型のスパン。</param>
      <param name="value" vsli:raw="The structure to be written to the span.">スパンに書き込まれる構造体。</param>
      <typeparam name="T" vsli:raw="The type of the structure.">構造体の型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" /> には参照またはポインターが含まれています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="destination" /> は <paramref name="value" /> を含めるには小さすぎます。</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.SequenceMarshal">
      <summary vsli:raw="Provides a collection of methods for interoperating with &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">
        <see cref="T:System.Buffers.ReadOnlySequence`1" /> と相互運用するためのメソッドのコレクションを提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryGetArray``1(System.Buffers.ReadOnlySequence{``0},System.ArraySegment{``0}@)">
      <summary vsli:raw="Gets an array segment from the underlying read-only sequence.">基になる読み取り専用シーケンスから配列セグメントを取得します。</summary>
      <param name="sequence" vsli:raw="The read-only sequence from which the array segment will be retrieved.">配列セグメントの取得元となる読み取り専用のシーケンス。</param>
      <param name="segment" vsli:raw="The returned array segment.">返された配列セグメント。</param>
      <typeparam name="T" vsli:raw="The type of the read-only sequence.">読み取り専用シーケンスの型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if it's possible to retrieve the array segment; otherwise, &lt;see langword=&quot;false&quot; /&gt; and a default array segment is returned.">配列セグメントを取得できる場合は <see langword="true" />、それ以外の場合は <see langword="false" /> で、既定の配列セグメントが返されます。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryGetReadOnlyMemory``1(System.Buffers.ReadOnlySequence{``0},System.ReadOnlyMemory{``0}@)">
      <summary vsli:raw="Attempts to retrieve a read-only memory from the specified read-only sequence.">指定した読み取り専用シーケンスから読み取り専用メモリの取得を試みます。</summary>
      <param name="sequence" vsli:raw="The read-only sequence from which the memory will be retrieved.">メモリの取得元となる読み取り専用のシーケンス。</param>
      <param name="memory" vsli:raw="The returned read-only memory of type T.">T 型で返された読み取り専用のメモリ。</param>
      <typeparam name="T" vsli:raw="The type of the read-only sequence.">読み取り専用シーケンスの型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read-only memory can be retrieved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">読み取り専用メモリを取得できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryGetReadOnlySequenceSegment``1(System.Buffers.ReadOnlySequence{``0},System.Buffers.ReadOnlySequenceSegment{``0}@,System.Int32@,System.Buffers.ReadOnlySequenceSegment{``0}@,System.Int32@)">
      <summary vsli:raw="Attempts to retrieve a read-only sequence segment from the specified read-only sequence.">指定した読み取り専用シーケンスから読み取り専用シーケンス セグメントの取得を試みます。</summary>
      <param name="sequence" vsli:raw="The read-only sequence from which the read-only sequence segment will be retrieved.">読み取り専用シーケンス セグメントの取得元となる読み取り専用のシーケンス。</param>
      <param name="startSegment" vsli:raw="The beginning read-only sequence segment.">先頭の読み取り専用シーケンス セグメント。</param>
      <param name="startIndex" vsli:raw="The initial position.">最初の位置。</param>
      <param name="endSegment" vsli:raw="The ending read-only sequence segment.">末尾の読み取り専用シーケンス セグメント。</param>
      <param name="endIndex" vsli:raw="The final position.">最後の位置。</param>
      <typeparam name="T" vsli:raw="The type of the read-only sequence.">読み取り専用シーケンスの型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read-only sequence segment can be retrieved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">読み取り専用シーケンス セグメントを取得できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryRead``1(System.Buffers.SequenceReader{System.Byte}@,``0@)">
      <summary vsli:raw="Attempts to read the specified type out of the buffer. It's dangerous to use this method with arbitrary structs - see remarks for more information.">バッファーから指定された型の読み取りを試みます。 このメソッドを任意の構造体で使用するのは危険です。詳細については、注釈を参照してください。</summary>
      <param name="reader" vsli:raw="A reference to the sequence reader.">シーケンス ヘッダへの参照。</param>
      <param name="value" vsli:raw="The returned value if the read was successful. &lt;paramref name=&quot;value&quot; /&gt; will be &lt;see langword=&quot;default&quot; /&gt; if failed (due to lack of space).">読み取りが成功した場合は、返された値。 領域不足により失敗した場合は、<paramref name="value" /> が <see langword="default" /> になります。</param>
      <typeparam name="T" vsli:raw="The type of the value.">値の型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read attempt was successful, &lt;see langword=&quot;false&quot; /&gt; otherwise.">読み取りが正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.SequencePosition">
      <summary vsli:raw="Represents a position in a non-contiguous set of memory. Properties of this type should not be interpreted by anything but the type that created it.">連続していないメモリのセット内の位置を表します。 この型のプロパティは、それを作成した型以外のものでは解釈できません。</summary>
    </member>
    <member name="M:System.SequencePosition.#ctor(System.Object,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; struct.">
        <see cref="T:System.SequencePosition" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="object" vsli:raw="A non-contiguous set of memory.">連続していないメモリのセット。</param>
      <param name="integer" vsli:raw="The position in &lt;paramref name=&quot;object&quot; /&gt;.">
        <paramref name="object" /> 内の位置。</param>
    </member>
    <member name="M:System.SequencePosition.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the current instance is equal to another object.">現在のインスタンスが別のオブジェクトと等しいかどうかを示す値を返します。</summary>
      <param name="obj" vsli:raw="The object to compare with the current instance.">現在のインスタンスと比較するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is of type &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; and is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="obj" /> の型が <see cref="T:System.SequencePosition" /> で、現在のインスタンスに等しければ <see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.SequencePosition.Equals(System.SequencePosition)">
      <summary vsli:raw="Indicates whether the current instance is equal to another &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt;.">現在のインスタンスが <see cref="T:System.SequencePosition" /> と等しいかどうかを示します。</summary>
      <param name="other" vsli:raw="The sequence position to compare with the current instance.">現在のインスタンスと比較するシーケンス位置。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two instances are equal; &lt;see langword=&quot;false&quot; /&gt; otherwise.">2 つのインスタンスが等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.SequencePosition.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">このインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="The hash code for this instance.">対象のインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.SequencePosition.GetInteger">
      <summary vsli:raw="Returns the integer part of this &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt;.">この <see cref="T:System.SequencePosition" /> の整数部分を返します。</summary>
      <returns vsli:raw="The integer part of this sequence position.">このシーケンス位置の整数部分。</returns>
    </member>
    <member name="M:System.SequencePosition.GetObject">
      <summary vsli:raw="Returns the object part of this &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt;.">この <see cref="T:System.SequencePosition" /> のオブジェクト部分を返します。</summary>
      <returns vsli:raw="The object part of this sequence position.">このシーケンス位置のオブジェクト部分。</returns>
    </member>
    <member name="T:System.Text.SpanRuneEnumerator">
      <summary vsli:raw="Provides an enumerator for the &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; values represented by a span containing UTF-16 text.">UTF-16 テキストを含むスパンによって表される <see cref="T:System.Text.Rune" /> 値の列挙子を提供します。</summary>
    </member>
    <member name="P:System.Text.SpanRuneEnumerator.Current">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; at the current position of the enumerator.">列挙子の現在位置にある <see cref="T:System.Text.Rune" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; at the current position of the enumerator.">列挙子の現在位置にある。<see cref="T:System.Text.Rune" /></returns>
    </member>
    <member name="M:System.Text.SpanRuneEnumerator.GetEnumerator">
      <summary vsli:raw="Returns the current enumerator instance.">現在の列挙子インスタンスを返します。</summary>
      <returns vsli:raw="The current enumerator instance.">現在の列挙子インスタンス。</returns>
    </member>
    <member name="M:System.Text.SpanRuneEnumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; of the span.">列挙子をスパンの次の <see cref="T:System.Text.Rune" /> に進めます。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator successfully advanced to the next item; &lt;see langword=&quot;false&quot; /&gt; if the end of the span has been reached.">列挙子が次の項目に正常に進んだ場合は <see langword="true" />。スパンの末尾に達した場合は <see langword="false" />。</returns>
    </member>
  </members>
</doc>
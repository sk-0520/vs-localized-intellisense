<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Reflection.Emit</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.AssemblyBuilder">
      <summary vsli:raw="Defines and represents a dynamic assembly.">動的アセンブリを定義および表現します。</summary>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.CodeBase">
      <summary vsli:raw="Gets the location of the assembly, as specified originally (such as in an &lt;see cref=&quot;T:System.Reflection.AssemblyName&quot; /&gt; object).">
        <see cref="T:System.Reflection.AssemblyName" /> オブジェクトの中など、初めに指定されたアセンブリの場所を取得します。</summary>
      <returns vsli:raw="The location of the assembly, as specified originally.">初めに指定されたとおりのアセンブリの場所。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">このメソッドは現在サポートされていません。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
      <summary vsli:raw="Defines a dynamic assembly that has the specified name and access rights.">指定した名前とアクセス権を持つ動的アセンブリを定義します。</summary>
      <param name="name" vsli:raw="The name of the assembly.">アセンブリの名前。</param>
      <param name="access" vsli:raw="The access rights of the assembly.">アセンブリのアクセス権。</param>
      <returns vsli:raw="An object that represents the new assembly.">新しいアセンブリを表すオブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
      <summary vsli:raw="Defines a new assembly that has the specified name, access rights, and attributes.">指定した名前、アクセス権、および属性を持つ新しいアセンブリを定義します。</summary>
      <param name="name" vsli:raw="The name of the assembly.">アセンブリの名前。</param>
      <param name="access" vsli:raw="The access rights of the assembly.">アセンブリのアクセス権。</param>
      <param name="assemblyAttributes" vsli:raw="A collection that contains the attributes of the assembly.">アセンブリの属性が格納されているコレクション。</param>
      <returns vsli:raw="An object that represents the new assembly.">新しいアセンブリを表すオブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)">
      <summary vsli:raw="Defines a named transient dynamic module in this assembly.">このアセンブリに名前付き遷移動的モジュールを定義します。</summary>
      <param name="name" vsli:raw="The name of the dynamic module.">動的アセンブリの名前。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; representing the defined dynamic module.">定義する動的モジュールを表す <see cref="T:System.Reflection.Emit.ModuleBuilder" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; begins with white space.&#xA;&#xA; -or-&#xA;&#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.&#xA;&#xA; -or-&#xA;&#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is greater than the system-defined maximum length.">
        <paramref name="name" /> の先頭が空白です。  

または - 
<paramref name="name" /> の長さが 0 です。  

または - 
<paramref name="name" /> の長さがシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼び出し元に、必要なアクセス許可がありません。</exception>
      <exception cref="T:System.ExecutionEngineException" vsli:raw="The assembly for default symbol writer cannot be loaded.&#xA;&#xA; -or-&#xA;&#xA; The type that implements the default symbol writer interface cannot be found.">既定のシンボル ライターのアセンブリを読み込むことができません。  

または -  

 既定のシンボル ライター インターフェイスを実装する型が見つかりません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.EntryPoint">
      <summary vsli:raw="Returns the entry point of this assembly.">このアセンブリのエントリ ポイントを返します。</summary>
      <returns vsli:raw="The entry point of this assembly.">このアセンブリのエントリ ポイント。</returns>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to the specified object.">対象のインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。</summary>
      <param name="obj" vsli:raw="An object to compare with this instance, or &lt;see langword=&quot;null&quot; /&gt;.">対象のインスタンスと比較する対象のオブジェクト、または <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> がこのインスタンスの型および値に等しい場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.FullName">
      <summary vsli:raw="Gets the display name of the current dynamic assembly.">現在の動的アセンブリの表示名を取得します。</summary>
      <returns vsli:raw="The display name of the dynamic assembly.">動的アセンブリの表示名。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;.">現在の <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> に適用されたカスタム属性をすべて返します。</summary>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">この型のオブジェクトでは、この引数は無視されます。</param>
      <returns vsli:raw="An array that contains the custom attributes; the array is empty if there are no attributes.">カスタム属性を含む配列。属性がない場合、配列は空です。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;, and that derive from a specified attribute type.">現在の <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> に適用されており、指定された属性の型から派生するすべてのカスタム属性を返します。</summary>
      <param name="attributeType" vsli:raw="The base type from which attributes derive.">属性の派生元となる基本型。</param>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">この型のオブジェクトでは、この引数は無視されます。</param>
      <returns vsli:raw="An array that contains the custom attributes that are derived at any level from &lt;paramref name=&quot;attributeType&quot; /&gt;; the array is empty if there are no such attributes.">
        <paramref name="attributeType" /> の任意のレベルから派生したカスタム属性を含む配列。そのような属性がない場合、配列は空です。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is not a &lt;see cref=&quot;T:System.Type&quot; /&gt; object supplied by the runtime. For example, &lt;paramref name=&quot;attributeType&quot; /&gt; is a &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object.">
        <paramref name="attributeType" />は、ランタイムによって提供された <see cref="T:System.Type" /> オブジェクトではありません。 たとえば、<paramref name="attributeType" /> は <see cref="T:System.Reflection.Emit.TypeBuilder" /> オブジェクトです。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributesData">
      <summary vsli:raw="Returns &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects that contain information about the attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;.">現在の <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> に適用されている属性に関する情報を含む <see cref="T:System.Reflection.CustomAttributeData" /> オブジェクトを返します。</summary>
      <returns vsli:raw="A generic list of &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects representing data about the attributes that have been applied to the current module.">現在のモジュールに適用されている属性に関するデータを表す <see cref="T:System.Reflection.CustomAttributeData" /> オブジェクトのジェネリック リスト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)">
      <summary vsli:raw="Returns the dynamic module with the specified name.">指定した名前の動的モジュールを返します。</summary>
      <param name="name" vsli:raw="The name of the requested dynamic module.">要求する動的モジュールの名前。</param>
      <returns vsli:raw="A ModuleBuilder object representing the requested dynamic module.">要求された動的モジュールを表す ModuleBuilder オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">
        <paramref name="name" /> の長さが 0 です。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetExportedTypes">
      <summary vsli:raw="Gets the exported types defined in this assembly.">このアセンブリで定義されているエクスポート型を取得します。</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; containing the exported types defined in this assembly.">このアセンブリで定義されているエクスポートされた型を格納している <see cref="T:System.Type" /> の配列。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented.">このメソッドは実装されていません。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetFile(System.String)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.IO.FileStream&quot; /&gt; for the specified file in the file table of the manifest of this assembly.">このアセンブリのマニフェストのファイル テーブル内の指定されたファイルの <see cref="T:System.IO.FileStream" /> を取得します。</summary>
      <param name="name" vsli:raw="The name of the specified file.">指定されたファイルの名前。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.IO.FileStream&quot; /&gt; for the specified file, or &lt;see langword=&quot;null&quot; /&gt;, if the file is not found.">指定されたファイルの <see cref="T:System.IO.FileStream" />。ファイルが見つからない場合は、<see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">このメソッドは現在サポートされていません。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetFiles(System.Boolean)">
      <summary vsli:raw="Gets the files in the file table of an assembly manifest, specifying whether to include resource modules.">リソース モジュールを含めるかどうかを指定して、アセンブリ マニフェストのファイル テーブルのファイルを取得します。</summary>
      <param name="getResourceModules" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include resource modules; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">リソース モジュールを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.IO.FileStream&quot; /&gt; objects.">
        <see cref="T:System.IO.FileStream" /> オブジェクトの配列。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">このメソッドは現在サポートされていません。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">このインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetLoadedModules(System.Boolean)">
      <summary vsli:raw="Returns all the loaded modules that are part of this assembly, and optionally includes resource modules.">このアセンブリの一部である読み込み済みのモジュールをすべて返します。オプションでリソース モジュールも返します。</summary>
      <param name="getResourceModules" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include resource modules; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">リソース モジュールを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns vsli:raw="The loaded modules that are part of this assembly.">このアセンブリの一部である読み込み済みのモジュール。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(System.String)">
      <summary vsli:raw="Returns information about how the given resource has been persisted.">指定されたリソースが永続化された方法に関する情報を返します。</summary>
      <param name="resourceName" vsli:raw="The name of the resource.">リソースの名前。</param>
      <returns vsli:raw="&lt;see cref=&quot;T:System.Reflection.ManifestResourceInfo&quot; /&gt; populated with information about the resource's topology, or &lt;see langword=&quot;null&quot; /&gt; if the resource is not found.">リソースのトポロジに関する情報が設定された <see cref="T:System.Reflection.ManifestResourceInfo" />。リソースが見つからない場合は <see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">このメソッドは現在サポートされていません。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames">
      <summary vsli:raw="Loads the specified manifest resource from this assembly.">このアセンブリから、指定されたマニフェスト リソースを読み込みます。</summary>
      <returns vsli:raw="An array of type &lt;see langword=&quot;String&quot; /&gt; containing the names of all the resources.">すべてのリソースの名前を格納している文字列型の配列。<see langword="String" /></returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported on a dynamic assembly. To get the manifest resource names, use &lt;see cref=&quot;M:System.Reflection.Assembly.GetManifestResourceNames&quot; /&gt;.">このメソッドは、動的アセンブリではサポートされていません。 マニフェスト リソース名を取得するには、 <see cref="M:System.Reflection.Assembly.GetManifestResourceNames" />を使用します。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)">
      <summary vsli:raw="Loads the specified manifest resource from this assembly.">このアセンブリから、指定されたマニフェスト リソースを読み込みます。</summary>
      <param name="name" vsli:raw="The name of the manifest resource being requested.">要求されているマニフェスト リソースの名前。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; representing this manifest resource.">マニフェスト リソースを表す <see cref="T:System.IO.Stream" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">このメソッドは現在サポートされていません。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.Type,System.String)">
      <summary vsli:raw="Loads the specified manifest resource, scoped by the namespace of the specified type, from this assembly.">このアセンブリから、指定された型の名前空間によってスコープが指定されている、指定されたマニフェスト リソースを読み込みます。</summary>
      <param name="type" vsli:raw="The type whose namespace is used to scope the manifest resource name.">マニフェスト リソース名のスコープを指定するために名前空間を使用する型。</param>
      <param name="name" vsli:raw="The name of the manifest resource being requested.">要求されているマニフェスト リソースの名前。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; representing this manifest resource.">マニフェスト リソースを表す <see cref="T:System.IO.Stream" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">このメソッドは現在サポートされていません。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetModule(System.String)">
      <summary vsli:raw="Gets the specified module in this assembly.">このアセンブリから指定されたモジュールを取得します。</summary>
      <param name="name" vsli:raw="The name of the requested module.">要求するモジュールの名前。</param>
      <returns vsli:raw="The module being requested, or &lt;see langword=&quot;null&quot; /&gt; if the module is not found.">要求されたモジュール。モジュールが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetModules(System.Boolean)">
      <summary vsli:raw="Gets all the modules that are part of this assembly, and optionally includes resource modules.">このアセンブリの一部であるモジュールをすべて取得します。オプションでリソース モジュールも取得します。</summary>
      <param name="getResourceModules" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include resource modules; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">リソース モジュールを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns vsli:raw="The modules that are part of this assembly.">このアセンブリの一部であるモジュール。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetName(System.Boolean)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Reflection.AssemblyName&quot; /&gt; that was specified when the current dynamic assembly was created, and sets the code base as specified.">現在の動的アセンブリが作成された時に指定した <see cref="T:System.Reflection.AssemblyName" /> を取得し、指定されたとおりにコード ベースを設定します。</summary>
      <param name="copiedName" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set the code base to the location of the assembly after it is shadow-copied; &lt;see langword=&quot;false&quot; /&gt; to set the code base to the original location.">シャドウ コピーの後でコード ベースをアセンブリの場所に設定する場合は <see langword="true" />。コード ベースを元の場所に設定する場合は <see langword="false" />。</param>
      <returns vsli:raw="The name of the dynamic assembly.">動的アセンブリの名前。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetReferencedAssemblies">
      <summary vsli:raw="Gets an incomplete list of &lt;see cref=&quot;T:System.Reflection.AssemblyName&quot; /&gt; objects for the assemblies that are referenced by this &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;.">この <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> で参照されるアセンブリの <see cref="T:System.Reflection.AssemblyName" /> オブジェクトの不完全なリストを取得します。</summary>
      <returns vsli:raw="An array of assembly names for the referenced assemblies. This array is not a complete list.">参照アセンブリのアセンブリ名の配列。 この配列は、完全なリストではありません。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo)">
      <summary vsli:raw="Gets the satellite assembly for the specified culture.">指定されたカルチャ設定のサテライト アセンブリを取得します。</summary>
      <param name="culture" vsli:raw="The specified culture.">指定されたカルチャ。</param>
      <returns vsli:raw="The specified satellite assembly.">指定されたサテライト アセンブリ。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;culture&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="culture" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The assembly cannot be found.">アセンブリが見つかりません。</exception>
      <exception cref="T:System.IO.FileLoadException" vsli:raw="The satellite assembly with a matching file name was found, but the &lt;see langword=&quot;CultureInfo&quot; /&gt; did not match the one specified.">ファイル名が一致するサテライト アセンブリが見つかりましたが、<see langword="CultureInfo" /> は指定されているファイル名とは一致しませんでした。</exception>
      <exception cref="T:System.BadImageFormatException" vsli:raw="The satellite assembly is not a valid assembly.">サテライト アセンブリは、有効なアセンブリではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)">
      <summary vsli:raw="Gets the specified version of the satellite assembly for the specified culture.">指定されたバージョンの、指定されたカルチャ設定のサテライト アセンブリを取得します。</summary>
      <param name="culture" vsli:raw="The specified culture.">指定されたカルチャ。</param>
      <param name="version" vsli:raw="The version of the satellite assembly.">サテライト アセンブリのバージョン。</param>
      <returns vsli:raw="The specified satellite assembly.">指定されたサテライト アセンブリ。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;culture&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="culture" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.IO.FileLoadException" vsli:raw="The satellite assembly with a matching file name was found, but the &lt;see langword=&quot;CultureInfo&quot; /&gt; or the version did not match the one specified.">ファイル名が一致するサテライト アセンブリが見つかりましたが、<see langword="CultureInfo" /> またはバージョンが指定されているファイルとは一致しませんでした。</exception>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The assembly cannot be found.">アセンブリが見つかりません。</exception>
      <exception cref="T:System.BadImageFormatException" vsli:raw="The satellite assembly is not a valid assembly.">サテライト アセンブリは、有効なアセンブリではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetType(System.String,System.Boolean,System.Boolean)">
      <summary vsli:raw="Gets the specified type from the types that have been defined and created in the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;.">現在の <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> で定義および作成された型から、指定された型を取得します。</summary>
      <param name="name" vsli:raw="The name of the type to search for.">検索する型の名前。</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to throw an exception if the type is not found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">型が見つからなかったときに例外をスローする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to ignore the case of the type name when searching; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">検索中に型名の大文字と小文字の違いを無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns vsli:raw="The specified type, or &lt;see langword=&quot;null&quot; /&gt; if the type is not found or has not been created yet.">指定された型。型が見つからない場合、またはまだ作成されていない場合は、<see langword="null" /> です。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.GlobalAssemblyCache">
      <summary>アセンブリがグローバル アセンブリ キャッシュから読み込まれたかどうかを示す値を取得します。</summary>
      <returns>常に <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.HostContext">
      <summary vsli:raw="Gets the host context where the dynamic assembly is being created.">動的アセンブリが作成されるホスト コンテキストを取得します。</summary>
      <returns vsli:raw="A value that indicates the host context where the dynamic assembly is being created.">動的アセンブリが作成されるホスト コンテキストを示す値。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ImageRuntimeVersion">
      <summary>マニフェストを格納しているファイルに保存される共通言語ランタイムのバージョンを取得します。</summary>
      <returns>共通言語ランタイムのバージョンを表す文字列。</returns>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Returns a value that indicates whether one or more instances of the specified attribute type is applied to this member.">指定された属性型の 1 つ以上のインスタンスがこのメンバーに適用されているかどうかを示す値を返します。</summary>
      <param name="attributeType" vsli:raw="The type of attribute to test for.">テストする属性の型。</param>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">この型のオブジェクトでは、この引数は無視されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instances of &lt;paramref name=&quot;attributeType&quot; /&gt; is applied to this dynamic assembly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="attributeType" /> の 1 つまたは複数のインスタンスがこの動的アセンブリに適用される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.IsDynamic">
      <summary vsli:raw="Gets a value that indicates that the current assembly is a dynamic assembly.">現在のアセンブリが動的アセンブリであることを示す値を取得します。</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;true&quot; /&gt;.">常に <see langword="true" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.Location">
      <summary vsli:raw="Gets the location, in codebase format, of the loaded file that contains the manifest if it is not shadow-copied.">マニフェストを格納している読み込み済みファイルがシャドウ コピーされていない場合に、このファイルの場所をコードベース書式で取得します。</summary>
      <returns vsli:raw="The location of the loaded file that contains the manifest. If the loaded file has been shadow-copied, the &lt;see langword=&quot;Location&quot; /&gt; is that of the file before being shadow-copied.">マニフェストを格納している読み込み済みファイルの場所。 読み込み済みファイルがシャドウ コピーされている場合、場所はシャドウ コピーされる前のファイルの位置です。<see langword="Location" /></returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">このメソッドは現在サポートされていません。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ManifestModule">
      <summary vsli:raw="Gets the module in the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt; that contains the assembly manifest.">アセンブリ マニフェストを格納している現在の <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 内のモジュールを取得します。</summary>
      <returns vsli:raw="The manifest module.">マニフェスト モジュール。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ReflectionOnly">
      <summary vsli:raw="Gets a value indicating whether the dynamic assembly is in the reflection-only context.">その動的アセンブリが、リフレクションのみのコンテキストで使用されるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dynamic assembly is in the reflection-only context; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">その動的アセンブリがリフレクションのみのコンテキストで使用される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute on this assembly using a specified custom attribute blob.">指定したカスタム属性 BLOB を使用して、このアセンブリのカスタム属性を設定します。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">カスタム属性のコンストラクター。</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">属性を表すバイト blob。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> または <paramref name="binaryAttribute" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼び出し元に、必要なアクセス許可がありません。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is not a &lt;see langword=&quot;RuntimeConstructorInfo&quot; /&gt; object.">
        <paramref name="con" /> は <see langword="RuntimeConstructorInfo" /> オブジェクトではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute on this assembly using a custom attribute builder.">カスタム属性ビルダーを使用して、このアセンブリのカスタム属性を設定します。</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">カスタム属性を定義するヘルパー クラスのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="T:System.Reflection.Emit.AssemblyBuilderAccess">
      <summary vsli:raw="Defines the access modes for a dynamic assembly.">動的アセンブリのアクセス モードを定義します。</summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.Run">
      <summary vsli:raw="The dynamic assembly can be executed, but not saved.">動的アセンブリは実行できますが、保存できません。</summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.RunAndCollect">
      <summary vsli:raw="The dynamic assembly will be automatically unloaded and its memory reclaimed, when it's no longer accessible.">アクセスできなくなったとき、動的アセンブリは自動的にアンロードされ、そのメモリは解放されます。</summary>
    </member>
    <member name="T:System.Reflection.Emit.ConstructorBuilder">
      <summary vsli:raw="Defines and represents a constructor of a dynamic class.">動的クラスのコンストラクターを定義および表現します。</summary>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Attributes">
      <summary vsli:raw="Gets the attributes for this constructor.">このコンストラクターの属性を取得します。</summary>
      <returns vsli:raw="The attributes for this constructor.">このコンストラクターの属性。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.CallingConvention">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.CallingConventions&quot; /&gt; value that depends on whether the declaring type is generic.">宣言型がジェネリックかどうかに応じて異なる <see cref="T:System.Reflection.CallingConventions" /> 値を取得します。</summary>
      <returns vsli:raw="&lt;see cref=&quot;F:System.Reflection.CallingConventions.HasThis&quot; /&gt; if the declaring type is generic; otherwise, &lt;see cref=&quot;F:System.Reflection.CallingConventions.Standard&quot; /&gt;.">宣言型がジェネリックである場合は <see cref="F:System.Reflection.CallingConventions.HasThis" />。それ以外の場合は <see cref="F:System.Reflection.CallingConventions.Standard" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.DeclaringType">
      <summary vsli:raw="Gets a reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the type that declares this member.">このメンバーを宣言する型の <see cref="T:System.Type" /> オブジェクトへの参照を取得します。</summary>
      <returns vsli:raw="The type that declares this member.">このメンバーを宣言する型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary vsli:raw="Defines a parameter of this constructor.">このコンストラクターのパラメーターを定義します。</summary>
      <param name="iSequence" vsli:raw="The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter.">パラメーター リストのパラメーターの位置。 パラメーターのインデックスは 1 から始まります。最初のパラメーターが 1 です。</param>
      <param name="attributes" vsli:raw="The attributes of the parameter.">パラメーターの属性。</param>
      <param name="strParamName" vsli:raw="The name of the parameter. The name can be the null string.">パラメーターの名前。 名前は null 文字列でもかまいません。</param>
      <returns vsli:raw="An object that represents the new parameter of this constructor.">このコンストラクターの新しいパラメーターを表すオブジェクト。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;iSequence&quot; /&gt; is less than 0 (zero), or it is greater than the number of parameters of the constructor.">
        <paramref name="iSequence" /> が 0 (ゼロ) 未満か、コンストラクターのパラメーター数を超える値です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">含んでいる型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して作成されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this constructor.">この型に対して定義されているすべてのカスタム属性を返します。</summary>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes. This parameter is ignored.">基本クラスからのカスタム属性の継承を制御します。 このパラメーターは無視されます。</param>
      <returns vsli:raw="An array of objects representing all the custom attributes of the constructor represented by this &lt;see cref=&quot;T:System.Reflection.Emit.ConstructorBuilder&quot; /&gt; instance.">この <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> インスタンスで表されるコンストラクターのすべてのカスタム属性を表す、オブジェクトの配列。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">このメソッドは現在サポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns the custom attributes identified by the given type.">指定された型によって識別されるカスタム属性を返します。</summary>
      <param name="attributeType" vsli:raw="The custom attribute type.">カスタム属性の型。</param>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes. This parameter is ignored.">基本クラスからのカスタム属性の継承を制御します。 このパラメーターは無視されます。</param>
      <returns vsli:raw="An object array that represents the attributes of this constructor.">このコンストラクターの属性を表すオブジェクトの配列。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">このメソッドは現在サポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; for this constructor.">このコンストラクターの <see cref="T:System.Reflection.Emit.ILGenerator" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; object for this constructor.">このコンストラクターの <see cref="T:System.Reflection.Emit.ILGenerator" /> オブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The constructor is a parameterless constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The constructor has &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.MethodImplAttributes&quot; /&gt; flags indicating that it should not have a method body.">コンストラクターは、パラメーターなしのコンストラクターです。  

または - 
コンストラクターが、メソッド本体を持たないことを示す <see cref="T:System.Reflection.MethodAttributes" /> フラグまたは <see cref="T:System.Reflection.MethodImplAttributes" /> フラグを持っています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator(System.Int32)">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; object, with the specified MSIL stream size, that can be used to build a method body for this constructor.">このコンストラクターのメソッド本体の作成に使用できる、指定した MSIL ストリーム サイズを持つ <see cref="T:System.Reflection.Emit.ILGenerator" /> オブジェクトを取得します。</summary>
      <param name="streamSize" vsli:raw="The size of the MSIL stream, in bytes.">MSIL ストリームのサイズ (バイト単位)。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; for this constructor.">このコンストラクターの <see cref="T:System.Reflection.Emit.ILGenerator" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The constructor is a parameterless constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The constructor has &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.MethodImplAttributes&quot; /&gt; flags indicating that it should not have a method body.">コンストラクターは、パラメーターなしのコンストラクターです。  
または 
コンストラクターが、メソッド本体を持たないことを示す <see cref="T:System.Reflection.MethodAttributes" /> フラグまたは <see cref="T:System.Reflection.MethodImplAttributes" /> フラグを持っています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags">
      <summary vsli:raw="Returns the method implementation flags for this constructor.">このコンストラクターのメソッド実装フラグを返します。</summary>
      <returns vsli:raw="The method implementation flags for this constructor.">このコンストラクターのメソッド実装フラグ。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetParameters">
      <summary vsli:raw="Returns the parameters of this constructor.">このコンストラクターのパラメーターを返します。</summary>
      <returns vsli:raw="An array that represents the parameters of this constructor.">このコンストラクターのパラメーターを表す配列。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has not been called on this constructor's type, in the .NET Framework versions 1.0 and 1.1.">.NET Framework Version 1.0 および 1.1 では、このコンストラクターの型で <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> が呼び出されませんでした。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has not been called on this constructor's type, in the .NET Framework version 2.0.">.NET Framework Version 2.0 では、このコンストラクターの型で <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> が呼び出されませんでした。</exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.InitLocals">
      <summary vsli:raw="Gets or sets whether the local variables in this constructor should be zero-initialized.">このコンストラクターのローカル変数をゼロで初期化するかどうかを取得または設定します。</summary>
      <returns vsli:raw="Read/write. Gets or sets whether the local variables in this constructor should be zero-initialized.">読み取り/書き込み。 このコンストラクターのローカル変数をゼロで初期化するかどうかを取得または設定します。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Dynamically invokes the constructor reflected by this instance with the specified arguments, under the constraints of the specified &lt;see langword=&quot;Binder&quot; /&gt;.">指定されているバインダーの制約下で、このインスタンスによってリフレクションされるコンストラクターを引数を指定して動的に呼び出します。<see langword="Binder" /></summary>
      <param name="obj" vsli:raw="The object that needs to be reinitialized.">再初期化が必要なオブジェクト。</param>
      <param name="invokeAttr" vsli:raw="One of the &lt;see langword=&quot;BindingFlags&quot; /&gt; values that specifies the type of binding that is desired.">目的のバインディングの種類を指定する <see langword="BindingFlags" /> 値の 1 つ。</param>
      <param name="binder" vsli:raw="A &lt;see langword=&quot;Binder&quot; /&gt; that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection. If &lt;paramref name=&quot;binder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, then Binder.DefaultBinding is used.">プロパティのセットを定義し、バインディング、引数の型の強制変換、およびリフレクションを使用したメンバーの呼び出しの機能を有効にする <see langword="Binder" />。 <paramref name="binder" /> が <see langword="null" /> の場合は、Binder.DefaultBinding が使用されます。</param>
      <param name="parameters" vsli:raw="An argument list. This is an array of arguments with the same number, order, and type as the parameters of the constructor to be invoked. If there are no parameters, this should be a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">引数リスト。 これは、呼び出すコンストラクターのパラメーターと同じ数、順序、および型の引数の配列です。 パラメーターがない場合は、null 参照 (Visual Basic では <see langword="Nothing" />) になります。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; for the current thread is used.">型の強制変換を制御するために使用する <see cref="T:System.Globalization.CultureInfo" /> 。 null の場合は、現在のスレッドの <see cref="T:System.Globalization.CultureInfo" /> が使用されます。</param>
      <returns vsli:raw="An instance of the class associated with the constructor.">コンストラクターに関連付けられているクラスのインスタンス。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. You can retrieve the constructor using &lt;see cref=&quot;M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;.">このメソッドは現在サポートされていません。 コンストラクターを取得するには、<see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> を使用し、返された <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> に対して <see cref="T:System.Reflection.ConstructorInfo" /> を呼び出します。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Dynamically invokes the constructor represented by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.">特定のオブジェクト上のインスタンスによって表されるコンストラクターを動的に呼び出します。その際、指定されたバインダーの制約下で、指定されたパラメーターを一緒に渡します。</summary>
      <param name="invokeAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as InvokeMethod, NonPublic, and so on.">
        <see cref="T:System.Reflection.BindingFlags" /> のビット フラグ InvokeMethod、NonPublic などにする必要があります。</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If binder is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used. See &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt;.">バインディング、引数型の強制変換、メンバーの呼び出し、およびリフレクションを使用した <see langword="MemberInfo" /> オブジェクトの取得を有効にするオブジェクト。 バインダーが <see langword="null" />の場合は、既定のバインダーが使用されます。 以下を参照してください。<see cref="T:System.Reflection.Binder" /></param>
      <param name="parameters" vsli:raw="An argument list. This is an array of arguments with the same number, order, and type as the parameters of the constructor to be invoked. If there are no parameters this should be &lt;see langword=&quot;null&quot; /&gt;.">引数リスト。 これは、呼び出すコンストラクターのパラメーターと同じ数、順序、および型の引数の配列です。 パラメーターがない場合は、これは <see langword="null" />である必要があります。</param>
      <param name="culture" vsli:raw="An instance of &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; for the current thread is used. (For example, this is necessary to convert a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents 1000 to a &lt;see cref=&quot;T:System.Double&quot; /&gt; value, since 1000 is represented differently by different cultures.)">型の強制変換を制御するために使用する <see cref="T:System.Globalization.CultureInfo" /> のインスタンス。 null の場合は、現在のスレッドの <see cref="T:System.Globalization.CultureInfo" /> が使用されます。 たとえば、このパラメーターでは、1000 を表す <see cref="T:System.String" /> を <see cref="T:System.Double" /> 値に変換して指定する必要があります。これは、カルチャによって 1000 の表記が異なるためです。</param>
      <returns vsli:raw="The value returned by the invoked constructor.">呼び出されたコンストラクターによって返される値。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. You can retrieve the constructor using &lt;see cref=&quot;M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;.">このメソッドは現在サポートされていません。 コンストラクターを取得するには、<see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> を使用し、返された <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> に対して <see cref="T:System.Reflection.ConstructorInfo" /> を呼び出します。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Checks if the specified custom attribute type is defined.">指定されたカスタム属性の型が定義されているかどうかを確認します。</summary>
      <param name="attributeType" vsli:raw="A custom attribute type.">カスタム属性の型。</param>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes. This parameter is ignored.">基本クラスからのカスタム属性の継承を制御します。 このパラメーターは無視されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified custom attribute type is defined; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定されたカスタム属性の型が定義されている場合は<see langword="true" /> 。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. You can retrieve the constructor using &lt;see cref=&quot;M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;.">このメソッドは現在サポートされていません。 コンストラクターを取得するには、<see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> を使用し、返された <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> に対して <see cref="T:System.Reflection.ConstructorInfo" /> を呼び出します。</exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.MethodHandle">
      <summary vsli:raw="Gets the internal handle for the method. Use this handle to access the underlying metadata handle.">メソッドの内部ハンドルを取得します。 基になるメタデータ ハンドルにアクセスするには、このハンドルを使用します。</summary>
      <returns vsli:raw="The internal handle for the method. Use this handle to access the underlying metadata handle.">メソッドの内部ハンドル。 基になるメタデータ ハンドルにアクセスするには、このハンドルを使用します。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This property is not supported on this class.">このクラスでは、このプロパティはサポートされていません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Module">
      <summary vsli:raw="Gets the dynamic module in which this constructor is defined.">このコンストラクターが定義されている動的モジュールを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; object that represents the dynamic module in which this constructor is defined.">このコンストラクターが定義されている動的モジュールを表す <see cref="T:System.Reflection.Module" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Name">
      <summary vsli:raw="Retrieves the name of this constructor.">このコンストラクターの名前を取得します。</summary>
      <returns vsli:raw="The name of this constructor.">このコンストラクターの名前。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.ReflectedType">
      <summary vsli:raw="Holds a reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object from which this object was obtained.">このオブジェクトを取得するために使用した <see cref="T:System.Type" /> オブジェクトへの参照を保持します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object from which this object was obtained.">この<see langword="Type" />オブジェクトの取得元のオブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute using a specified custom attribute blob.">指定されたカスタム属性 BLOB を使用して、カスタム属性を設定します。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">カスタム属性のコンストラクター。</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">属性を表すバイト blob。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> または <paramref name="binaryAttribute" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">カスタム属性ビルダーを使用して、カスタム属性を設定します。</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">カスタム属性を定義するヘルパー クラスのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
      <summary vsli:raw="Sets the method implementation flags for this constructor.">このコンストラクターのメソッド実装フラグを設定します。</summary>
      <param name="attributes" vsli:raw="The method implementation flags.">メソッド実装フラグ。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">含んでいる型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して作成されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.ToString">
      <summary vsli:raw="Returns this &lt;see cref=&quot;T:System.Reflection.Emit.ConstructorBuilder&quot; /&gt; instance as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">この <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> インスタンスを <see cref="T:System.String" /> として返します。</summary>
      <returns vsli:raw="A string containing the name, attributes, and exceptions of this constructor, followed by the current Microsoft intermediate language (MSIL) stream.">このコンストラクターの名前、属性、例外が含まれる文字列。その後に現在の Microsoft intermediate language (MSIL) ストリームが続きます。</returns>
    </member>
    <member name="T:System.Reflection.Emit.EnumBuilder">
      <summary vsli:raw="Describes and represents an enumeration type.">列挙型を記述し、表現します。</summary>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Assembly">
      <summary vsli:raw="Retrieves the dynamic assembly that contains this enum definition.">この列挙型 (Enum) の定義が含まれた動的アセンブリを取得します。</summary>
      <returns vsli:raw="Read-only. The dynamic assembly that contains this enum definition.">読み取り専用。 この列挙型 (Enum) の定義が含まれた動的アセンブリ。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
      <summary vsli:raw="Returns the full path of this enum qualified by the display name of the parent assembly.">親アセンブリの表示名で限定されたこの列挙型 (Enum) の完全パスを返します。</summary>
      <returns vsli:raw="Read-only. The full path of this enum qualified by the display name of the parent assembly.">読み取り専用。 親アセンブリの表示名で限定されたこの列挙型 (Enum) の完全パス。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.BaseType">
      <summary vsli:raw="Returns the parent &lt;see cref=&quot;T:System.Type&quot; /&gt; of this type which is always &lt;see cref=&quot;T:System.Enum&quot; /&gt;.">この型の親の <see cref="T:System.Type" /> を返します。これは常に <see cref="T:System.Enum" /> です。</summary>
      <returns vsli:raw="Read-only. The parent &lt;see cref=&quot;T:System.Type&quot; /&gt; of this type.">読み取り専用。 この型の親の <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.CreateTypeInfo">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.TypeInfo&quot; /&gt; object that represents this enumeration.">この列挙を表す <see cref="T:System.Reflection.TypeInfo" /> オブジェクトを取得します。</summary>
      <returns vsli:raw="An object that represents this enumeration.">この列挙値を表すオブジェクト。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.DeclaringType">
      <summary vsli:raw="Returns the type that declared this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;.">この <see cref="T:System.Reflection.Emit.EnumBuilder" /> を宣言した型を返します。</summary>
      <returns vsli:raw="Read-only. The type that declared this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;.">読み取り専用。 この <see cref="T:System.Reflection.Emit.EnumBuilder" /> を宣言した型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
      <summary vsli:raw="Defines the named static field in an enumeration type with the specified constant value.">列挙型の中に名前付き静的フィールドを定義し、指定した定数値を設定します。</summary>
      <param name="literalName" vsli:raw="The name of the static field.">静的フィールドの名前。</param>
      <param name="literalValue" vsli:raw="The constant value of the literal.">リテラルの定数値。</param>
      <returns vsli:raw="The defined field.">定義済みのフィールド。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.FullName">
      <summary vsli:raw="Returns the full path of this enum.">この列挙型 (Enum) の完全パスを返します。</summary>
      <returns vsli:raw="Read-only. The full path of this enum.">読み取り専用。 この列挙型 (Enum) の完全パス。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; objects representing the public and non-public constructors defined for this class, as specified.">指定に従って、このクラスに定義されているパブリック コンストラクターおよび非パブリック コンストラクターを表す <see cref="T:System.Reflection.ConstructorInfo" /> オブジェクトの配列を返します。</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">これは <see langword="InvokeMethod" /> や <see langword="NonPublic" /> など、<see cref="T:System.Reflection.BindingFlags" /> からのビット フラグでなければなりません。</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned.">このクラスに定義されている指定したコンストラクターを表す <see cref="T:System.Reflection.ConstructorInfo" /> オブジェクトの配列を返します。 コンストラクターが定義されていない場合は、空の配列が返されます。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">このメソッドは現在、不完全な型に対してはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this constructor.">この型に対して定義されているすべてのカスタム属性を返します。</summary>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">このメンバーの継承チェーンを検索して属性を見つけるかどうかを指定します。</param>
      <returns vsli:raw="Returns an array of objects representing all the custom attributes of the constructor represented by this &lt;see cref=&quot;T:System.Reflection.Emit.ConstructorBuilder&quot; /&gt; instance.">この <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> インスタンスで表されるコンストラクターのすべてのカスタム属性を表すオブジェクトの配列を返します。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">このメソッドは現在、不完全な型に対してはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns the custom attributes identified by the given type.">指定された型によって識別されるカスタム属性を返します。</summary>
      <param name="attributeType" vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object to which the custom attributes are applied.">カスタム属性が適用される <see langword="Type" /> オブジェクト。</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">このメンバーの継承チェーンを検索して属性を見つけるかどうかを指定します。</param>
      <returns vsli:raw="Returns an array of objects representing the attributes of this constructor that are of &lt;see cref=&quot;T:System.Type&quot; /&gt;&lt;paramref name=&quot;attributeType&quot; /&gt;.">このコンストラクターの属性を表すオブジェクトの配列を返します。コンストラクターの属性は、<see cref="T:System.Type" /><paramref name="attributeType" /> です。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">このメソッドは現在、不完全な型に対してはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetElementType">
      <summary vsli:raw="Calling this method always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <returns vsli:raw="This method is not supported. No value is returned.">このメソッドはサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">このメソッドは現在サポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType">
      <summary vsli:raw="Returns the underlying integer type of the current enumeration, which is set when the enumeration builder is defined.">列挙型ビルダーを定義するときに設定された、現在の列挙型の基になっている整数型を返します。</summary>
      <returns vsli:raw="The underlying type.">基になる型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the event with the specified name.">指定した名前のイベントを返します。</summary>
      <param name="name" vsli:raw="The name of the event to get.">取得するイベントの名前。</param>
      <param name="bindingAttr" vsli:raw="This invocation attribute. This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">この呼び出しの属性。 これは <see langword="InvokeMethod" /> や <see langword="NonPublic" /> など、<see cref="T:System.Reflection.BindingFlags" /> からのビット フラグでなければなりません。</param>
      <returns vsli:raw="Returns an &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; object representing the event declared or inherited by this type with the specified name. If there are no matches, &lt;see langword=&quot;null&quot; /&gt; is returned.">指定した名前によってこの型で宣言または継承されているイベントを表す <see cref="T:System.Reflection.EventInfo" /> オブジェクトを返します。 一致がない場合は、<see langword="null" /> が返されます。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">このメソッドは現在、不完全な型に対してはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents">
      <summary vsli:raw="Returns the events for the public events declared or inherited by this type.">この型で宣言または継承されているパブリック イベントのイベントを返します。</summary>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events.">この型で宣言または継承されているパブリック イベントを表す <see cref="T:System.Reflection.EventInfo" /> オブジェクトの配列を返します。 パブリック イベントがない場合は、空の配列が返されます。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">このメソッドは現在、不完全な型に対してはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public events that are declared by this type.">この型で宣言されているパブリック イベントとパブリックでないイベントを返します。</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">これは <see langword="InvokeMethod" /> や <see langword="NonPublic" /> などの、<see cref="T:System.Reflection.BindingFlags" /> からのビット フラグでなければなりません。</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; objects representing the public and non-public events declared or inherited by this type. An empty array is returned if there are no events, as specified.">この型で宣言または継承されているパブリック イベントと非パブリック イベントを表す <see cref="T:System.Reflection.EventInfo" /> オブジェクトの配列を返します。 指定されたイベントがない場合は、空の配列が返されます。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">このメソッドは現在、不完全な型に対してはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the field specified by the given name.">指定した名前で指定されたフィールドを返します。</summary>
      <param name="name" vsli:raw="The name of the field to get.">取得するフィールドの名前。</param>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">これは <see langword="InvokeMethod" /> や <see langword="NonPublic" /> など、<see cref="T:System.Reflection.BindingFlags" /> からのビット フラグでなければなりません。</param>
      <returns vsli:raw="Returns the &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches, then null is returned.">指定した名前と公開または非公開の修飾子を持つ、この型によって宣言または継承されているフィールドを表す <see cref="T:System.Reflection.FieldInfo" /> オブジェクトを返します。 一致がない場合は、null が返されます。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">このメソッドは現在、不完全な型に対してはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public fields that are declared by this type.">この型で宣言されているパブリック フィールドとパブリックでないフィールドを返します。</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as InvokeMethod, NonPublic, and so on.">
        <see cref="T:System.Reflection.BindingFlags" /> のビット フラグ InvokeMethod、NonPublic などにする必要があります。</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified.">この型で宣言または継承されているパブリック フィールドと非パブリック フィールドを表す <see cref="T:System.Reflection.FieldInfo" /> オブジェクトの配列を返します。 指定どおりに、フィールドがない場合は空の配列が返されます。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">このメソッドは現在、不完全な型に対してはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
      <summary vsli:raw="Returns the interface implemented (directly or indirectly) by this type, with the specified fully-qualified name.">この型で (直接的または間接的に) 実装されている、指定された完全修飾名を持つインターフェイスを返します。</summary>
      <param name="name" vsli:raw="The name of the interface.">インターフェイスの名前。</param>
      <param name="ignoreCase" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the search is case-insensitive. If &lt;see langword=&quot;false&quot; /&gt;, the search is case-sensitive.">
        <see langword="true" />の場合、検索では、大文字と小文字を区別しません。 <see langword="false" /> の場合、検索では、大文字と小文字が区別されます。</param>
      <returns vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the implemented interface. Returns null if no interface matching name is found.">実装されているインターフェイスを表す <see cref="T:System.Type" /> オブジェクトを返します。 インターフェイスの一致する名前が見つからない場合、null を返します。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">このメソッドは現在、不完全な型に対してはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)">
      <summary vsli:raw="Returns an interface mapping for the interface requested.">要求したインターフェイスに対するインターフェイスの割り当てを返します。</summary>
      <param name="interfaceType" vsli:raw="The type of the interface for which the interface mapping is to be retrieved.">インターフェイスの割り当てを取得するインターフェイスの型。</param>
      <returns vsli:raw="The requested interface mapping.">要求したインターフェイスの割り当て。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The type does not implement the interface.">この型はインターフェイスを実装しません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaces">
      <summary vsli:raw="Returns an array of all the interfaces implemented on this a class and its base classes.">このクラスと基本クラスで実装されているすべてのインターフェイスの配列を返します。</summary>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the implemented interfaces. If none are defined, an empty array is returned.">実装されているインターフェイスを表す <see cref="T:System.Type" /> オブジェクトの配列を返します。 何も定義されていない場合は、空の配列が返されます。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all members with the specified name, type, and binding that are declared or inherited by this type.">この型で宣言または継承されているメンバーのうち、指定した名前、型、およびバインディングを持つものをすべて返します。</summary>
      <param name="name" vsli:raw="The name of the member.">メンバーの名前。</param>
      <param name="type" vsli:raw="The type of member that is to be returned.">返されるメンバーの型。</param>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">これは <see langword="InvokeMethod" /> や <see langword="NonPublic" /> など、<see cref="T:System.Reflection.BindingFlags" /> からのビット フラグでなければなりません。</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects representing the public and non-public members defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public members are returned.">
        <paramref name="nonPublic" /> が使用されている場合、この型で定義されているパブリック メンバーと非パブリック メンバーを表す <see cref="T:System.Reflection.MemberInfo" /> オブジェクトの配列を返します。それ以外の場合、パブリック メンバーのみが返されます。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">このメソッドは現在、不完全な型に対してはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the specified members declared or inherited by this type.">この型で宣言または継承されている指定したメンバーを返します。</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">これは <see langword="InvokeMethod" /> や <see langword="NonPublic" /> など、<see cref="T:System.Reflection.BindingFlags" /> からのビット フラグでなければなりません。</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members.">この型で宣言または継承されているパブリック メンバーと非パブリック メンバーを表す <see cref="T:System.Reflection.MemberInfo" /> オブジェクトの配列を返します。 一致するメンバーがない場合は、空の配列が返されます。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">このメソッドは現在、不完全な型に対してはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public methods declared or inherited by this type, as specified.">指定のとおりに、この型によって宣言または継承されたパブリック メソッドと非パブリック メソッドをすべて返します。</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">これは <see langword="InvokeMethod" /> や <see langword="NonPublic" /> などの、<see cref="T:System.Reflection.BindingFlags" /> からのビット フラグでなければなりません。</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; objects representing the public and non-public methods defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public methods are returned.">
        <paramref name="nonPublic" /> が使用されている場合、この型で定義されているパブリック メソッドと非パブリック メソッドを表す <see cref="T:System.Reflection.MethodInfo" /> オブジェクトの配列を返します。それ以外の場合、パブリック メソッドのみが返されます。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">このメソッドは現在、不完全な型に対してはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the specified nested type that is declared by this type.">この型で宣言されている入れ子にされた型のうち、指定したものを返します。</summary>
      <param name="name" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the nested type to get.">取得対象の入れ子にされた型の名前を格納している <see cref="T:System.String" />。</param>
      <param name="bindingAttr" vsli:raw="A bitmask comprised of one or more &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; that specify how the search is conducted.  &#xA;  &#xA; -or-  &#xA;  &#xA; Zero, to conduct a case-sensitive search for public methods.">検索の実行方法を指定する 1 つ以上の <see cref="T:System.Reflection.BindingFlags" /> から成るビットマスク。  

または - 
大文字小文字を区別してパブリック メソッドの検索を行う場合は 0。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the nested type that matches the specified requirements, if found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">指定した要件と一致し、入れ子にされた型が存在する場合は、その型を表す <see cref="T:System.Type" /> オブジェクト。それ以外の場合は <see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">このメソッドは現在、不完全な型に対してはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public nested types that are declared or inherited by this type.">この型で宣言または継承されている入れ子にされたパブリック型とパブリックでない型を返します。</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">これは <see langword="InvokeMethod" /> や <see langword="NonPublic" /> などの、<see cref="T:System.Reflection.BindingFlags" /> からのビット フラグでなければなりません。</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing all the types nested within the current &lt;see cref=&quot;T:System.Type&quot; /&gt; that match the specified binding constraints.  &#xA;  &#xA; An empty array of type &lt;see cref=&quot;T:System.Type&quot; /&gt;, if no types are nested within the current &lt;see cref=&quot;T:System.Type&quot; /&gt;, or if none of the nested types match the binding constraints.">現在の <see cref="T:System.Type" /> 内で入れ子にされた型のうち、指定したバインディング制約に一致するすべての型を表す <see cref="T:System.Type" /> オブジェクトの配列。  
現在の <see cref="T:System.Type" /> 内で型が入れ子にされていないか、または入れ子にされた型の中にバインディング制約に一致するものが存在しない場合は、<see cref="T:System.Type" /> 型の空の配列。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">このメソッドは現在、不完全な型に対してはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public properties declared or inherited by this type, as specified.">指定のとおりに、この型によって宣言または継承されたパブリック プロパティと非パブリック プロパティをすべて返します。</summary>
      <param name="bindingAttr" vsli:raw="This invocation attribute. This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">この呼び出しの属性。 これは <see langword="InvokeMethod" /> や <see langword="NonPublic" /> など、<see cref="T:System.Reflection.BindingFlags" /> からのビット フラグでなければなりません。</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; objects representing the public and non-public properties defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public properties are returned.">
        <paramref name="nonPublic" /> が使用されている場合、この型で定義されているパブリック プロパティと非パブリック プロパティを表す <see cref="T:System.Reflection.PropertyInfo" /> オブジェクトの配列を返します。 それ以外の場合、パブリック プロパティのみが返されます。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">このメソッドは現在、不完全な型に対してはサポートされていません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.GUID">
      <summary vsli:raw="Returns the GUID of this enum.">この列挙型 (Enum) のグローバル一意識別子 (GUID: Globally Unique Identifier) を返します。</summary>
      <returns vsli:raw="Read-only. The GUID of this enum.">読み取り専用。 この列挙型 (Enum) の GUID。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">このメソッドは現在、不完全な型に対してはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary vsli:raw="Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.">指定したメンバーを呼び出します。 呼び出すメソッドはアクセス可能でなければならず、指定したバインダーと呼び出し属性の制約の下で、指定された引数リストに対する一致の特定性が最高のものでなければなりません。</summary>
      <param name="name" vsli:raw="The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.">呼び出すメンバーの名前。 コンストラクター、メソッド、プロパティ、またはフィールドを指定できます。 適切な呼び出し属性を指定する必要があります。 メンバーの名前として空の文字列を渡すことによって、クラスの既定のメンバーを呼び出せることにご注意ください。</param>
      <param name="invokeAttr" vsli:raw="The invocation attribute. This must be a bit flag from &lt;see langword=&quot;BindingFlags&quot; /&gt;.">呼び出し属性。 これは <see langword="BindingFlags" /> からのビット フラグでなければなりません。</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If binder is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used. See &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt;.">バインディング、引数型の強制変換、メンバーの呼び出し、および、リフレクションを使用した <see langword="MemberInfo" /> オブジェクトの取得を有効にするオブジェクト。 バインダーが <see langword="null" />の場合は、既定のバインダーが使用されます。 以下を参照してください。<see cref="T:System.Reflection.Binder" /></param>
      <param name="target" vsli:raw="The object on which to invoke the specified member. If the member is static, this parameter is ignored.">指定したメンバーを呼び出す対象となるオブジェクト。 メンバーが静的な場合、このパラメーターは無視されます。</param>
      <param name="args" vsli:raw="An argument list. This is an array of objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null.">引数リスト。 呼び出されるメンバーのパラメーターの数、順序、および型を格納するオブジェクトの配列です。 パラメーターがない場合は、これは null である必要があります。</param>
      <param name="modifiers" vsli:raw="An array of the same length as &lt;paramref name=&quot;args&quot; /&gt; with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for details such as this.">
        <paramref name="args" /> と同じ長さの配列であり、その要素は、呼び出されるメンバーの引数に関連付けられた属性を表します。 メタデータの中でパラメーターには属性が関連付けられています。 これらは、さまざまな相互運用サービスで使用されます。 詳細については、メタデータの仕様を参照してください。</param>
      <param name="culture" vsli:raw="An instance of &lt;see langword=&quot;CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see langword=&quot;CultureInfo&quot; /&gt; for the current thread is used. (Note that this is necessary to, for example, convert a string that represents 1000 to a double value, since 1000 is represented differently by different cultures.)">型の強制変換を制御するために使用する <see langword="CultureInfo" /> のインスタンス。 null の場合は、現在のスレッドの <see langword="CultureInfo" /> が使用されます。 このパラメーターは、たとえば、1000 を表す文字列を double 型の値に変換するために必要です。これは、カルチャによって 1000 の表記が異なるためです。</param>
      <param name="namedParameters" vsli:raw="Each parameter in the &lt;paramref name=&quot;namedParameters&quot; /&gt; array gets the value in the corresponding element in the &lt;paramref name=&quot;args&quot; /&gt; array. If the length of &lt;paramref name=&quot;args&quot; /&gt; is greater than the length of &lt;paramref name=&quot;namedParameters&quot; /&gt;, the remaining argument values are passed in order.">
        <paramref name="namedParameters" /> 配列の各パラメーターは、<paramref name="args" /> 配列内の対応する要素の値を取得します。 <paramref name="args" /> の長さが <paramref name="namedParameters" /> の長さより大きい場合、残りの引数の値は順番に渡されます。</param>
      <returns vsli:raw="Returns the return value of the invoked member.">呼び出されたメンバーの戻り値を返します。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">このメソッドは現在、不完全な型に対してはサポートされていません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsConstructedGenericType">
      <summary vsli:raw="Gets a value that indicates whether this object represents a constructed generic type.">このオブジェクトが構築ジェネリック型かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object represents a constructed generic type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このオブジェクトが構築ジェネリック型を表している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Checks if the specified custom attribute type is defined.">指定されたカスタム属性の型が定義されているかどうかを確認します。</summary>
      <param name="attributeType" vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object to which the custom attributes are applied.">カスタム属性が適用される <see langword="Type" /> オブジェクト。</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">このメンバーの継承チェーンを検索して属性を見つけるかどうかを指定します。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instance of &lt;paramref name=&quot;attributeType&quot; /&gt; is defined on this member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このメンバーに <paramref name="attributeType" /> のインスタンスが 1 つ以上定義されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">このメソッドは現在、不完全な型に対してはサポートされていません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsVariableBoundArray" />
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeArrayType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing a one-dimensional array of the current type, with a lower bound of zero.">下限を 0 に設定して現在の型の 1 次元配列を表す <see cref="T:System.Type" /> オブジェクトを返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing a one-dimensional array of the current type, with a lower bound of zero.">下限を 0 に設定して現在の型の 1 次元配列を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing an array of the current type, with the specified number of dimensions.">次元数を指定して現在の型の配列を表す <see cref="T:System.Type" /> オブジェクトを返します。</summary>
      <param name="rank" vsli:raw="The number of dimensions for the array. This number must be less than or equal to 32.">配列の次元数。 この数値は 32 以下である必要があります。</param>
      <returns vsli:raw="An object representing an array of the current type, with the specified number of dimensions.">次元数を指定して現在の型の配列を表すオブジェクト。</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;rank&quot; /&gt; is less than 1.">
        <paramref name="rank" /> が 1 未満です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeByRefType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).">ref パラメーター (Visual Basic の場合は ByRef パラメーター) として渡されるときに現在の型を表す <see cref="T:System.Type" /> オブジェクトを返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).">ref パラメーター (Visual Basic の場合は ByRef パラメーター) として渡されるときに現在の型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakePointerType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a pointer to the current type.">現在の型へのポインターを表す <see cref="T:System.Type" /> オブジェクトを返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a pointer to the current type.">現在の型へのポインターを表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Module">
      <summary vsli:raw="Retrieves the dynamic module that contains this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt; definition.">この <see cref="T:System.Reflection.Emit.EnumBuilder" /> の定義が含まれた動的モジュールを取得します。</summary>
      <returns vsli:raw="Read-only. The dynamic module that contains this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt; definition.">読み取り専用。 この <see cref="T:System.Reflection.Emit.EnumBuilder" /> の定義が含まれた動的モジュール。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Name">
      <summary vsli:raw="Returns the name of this enum.">この列挙型 (Enum) の名前を返します。</summary>
      <returns vsli:raw="Read-only. The name of this enum.">読み取り専用。 この列挙型 (Enum) の名前。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Namespace">
      <summary vsli:raw="Returns the namespace of this enum.">この列挙型 (Enum) の名前空間を返します。</summary>
      <returns vsli:raw="Read-only. The namespace of this enum.">読み取り専用。 この列挙型 (Enum) の名前空間。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.ReflectedType">
      <summary vsli:raw="Returns the type that was used to obtain this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;.">この <see cref="T:System.Reflection.Emit.EnumBuilder" /> を取得するために使用した型を返します。</summary>
      <returns vsli:raw="Read-only. The type that was used to obtain this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;.">読み取り専用。 この <see cref="T:System.Reflection.Emit.EnumBuilder" /> を取得するために使用した型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">指定されたカスタム属性の blob を使用して、カスタム属性を設定します。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">カスタム属性のコンストラクター。</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">属性を表すバイト blob。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> または <paramref name="binaryAttribute" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Sets a custom attribute using a custom attribute builder.">カスタム属性ビルダーを使用して、カスタム属性を設定します。</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">カスタム属性を定義するヘルパー クラスのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.TypeHandle">
      <summary vsli:raw="Retrieves the internal handle for this enum.">この列挙型 (Enum) の内部ハンドルを取得します。</summary>
      <returns vsli:raw="Read-only. The internal handle for this enum.">読み取り専用。 この列挙型 (Enum) の内部ハンドル。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This property is not currently supported.">このプロパティは現在サポートされていません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingField">
      <summary vsli:raw="Returns the underlying field for this enum.">この列挙型 (Enum) の基になるフィールドを返します。</summary>
      <returns vsli:raw="Read-only. The underlying field for this enum.">読み取り専用。 この列挙型 (Enum) の基になるフィールド。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingSystemType">
      <summary vsli:raw="Returns the underlying system type for this enum.">この列挙型 (Enum) の基になるシステム型を返します。</summary>
      <returns vsli:raw="Read-only. Returns the underlying system type.">読み取り専用。 基になるシステム型を返します。</returns>
    </member>
    <member name="T:System.Reflection.Emit.EventBuilder">
      <summary vsli:raw="Defines events for a class.">クラスのイベントを定義します。</summary>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Adds one of the &quot;other&quot; methods associated with this event. &quot;Other&quot; methods are methods other than the &quot;on&quot; and &quot;raise&quot; methods associated with an event. This function can be called many times to add as many &quot;other&quot; methods.">このイベントに関連付ける "other" メソッドの 1 つを追加します。 "other" メソッドとは、イベントに関連付けられた "on" メソッドおよび "raise" メソッド以外のメソッドです。 この関数は、必要な数の "other" メソッドを追加するために何回も呼び出すことができます。</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the other method.">他のメソッドを表す <see langword="MethodBuilder" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> が、外側の型に対して呼び出されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetAddOnMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method used to subscribe to this event.">このイベントをサブスクライブするメソッドを設定します。</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method used to subscribe to this event.">このイベントをサブスクライブするメソッドを表す <see langword="MethodBuilder" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> が、外側の型に対して呼び出されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute using a specified custom attribute blob.">指定されたカスタム属性 BLOB を使用して、カスタム属性を設定します。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">カスタム属性のコンストラクター。</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">属性を表すバイト blob。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> または <paramref name="binaryAttribute" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> が、外側の型に対して呼び出されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Sets a custom attribute using a custom attribute builder.">カスタム属性ビルダーを使用して、カスタム属性を設定します。</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to describe the custom attribute.">カスタム属性を記述するためのヘルパー クラスのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> が、外側の型に対して呼び出されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRaiseMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method used to raise this event.">このイベントを発生させるメソッドを設定します。</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method used to raise this event.">このイベントを発生させるメソッドを表す <see langword="MethodBuilder" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> が、外側の型に対して呼び出されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRemoveOnMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method used to unsubscribe to this event.">このイベントをアンサブスクライブするメソッドを設定します。</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method used to unsubscribe to this event.">このイベントをアンサブスクライブするメソッドを表す <see langword="MethodBuilder" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> が、外側の型に対して呼び出されました。</exception>
    </member>
    <member name="T:System.Reflection.Emit.FieldBuilder">
      <summary vsli:raw="Defines and represents a field. This class cannot be inherited.">フィールドを定義および表現します。 このクラスは継承できません。</summary>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Attributes">
      <summary vsli:raw="Indicates the attributes of this field. This property is read-only.">このフィールドの属性を示します。 このプロパティは読み取り専用です。</summary>
      <returns vsli:raw="The attributes of this field.">このフィールドの属性。</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.DeclaringType">
      <summary vsli:raw="Indicates a reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the type that declares this field. This property is read-only.">このフィールドを宣言する型の <see cref="T:System.Type" /> オブジェクトへの参照を示します。 このプロパティは読み取り専用です。</summary>
      <returns vsli:raw="A reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the type that declares this field.">このフィールドを宣言する型の <see cref="T:System.Type" /> オブジェクトへの参照。</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldHandle">
      <summary vsli:raw="Indicates the internal metadata handle for this field. This property is read-only.">このフィールドの内部メタデータ ハンドルを示します。 このプロパティは読み取り専用です。</summary>
      <returns vsli:raw="The internal metadata handle for this field.">このフィールドの内部メタデータ ハンドル。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">このメソッドはサポートされていません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldType">
      <summary vsli:raw="Indicates the &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of this field. This property is read-only.">このフィールドの型を表す <see cref="T:System.Type" /> オブジェクトを示します。 このプロパティは読み取り専用です。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of this field.">このフィールドの型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this field.">このフィールドに対して定義されているすべてのカスタム属性を返します。</summary>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes.">基本クラスからのカスタム属性の継承を制御します。</param>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.Object&quot; /&gt; representing all the custom attributes of the constructor represented by this &lt;see cref=&quot;T:System.Reflection.Emit.FieldBuilder&quot; /&gt; instance.">この <see cref="T:System.Object" /> インスタンスで表されるコンストラクターのすべてのカスタム属性を表す <see cref="T:System.Reflection.Emit.FieldBuilder" /> 型の配列。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">このメソッドはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this field identified by the given type.">指定された型によって識別されるこのフィールドに定義されたすべてのカスタム属性を返します。</summary>
      <param name="attributeType" vsli:raw="The custom attribute type.">カスタム属性の型。</param>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes.">基本クラスからのカスタム属性の継承を制御します。</param>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.Object&quot; /&gt; representing all the custom attributes of the constructor represented by this &lt;see cref=&quot;T:System.Reflection.Emit.FieldBuilder&quot; /&gt; instance.">この <see cref="T:System.Object" /> インスタンスで表されるコンストラクターのすべてのカスタム属性を表す <see cref="T:System.Reflection.Emit.FieldBuilder" /> 型の配列。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">このメソッドはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetValue(System.Object)">
      <summary vsli:raw="Retrieves the value of the field supported by the given object.">指定したオブジェクトでサポートされているフィールドの値を取得します。</summary>
      <param name="obj" vsli:raw="The object on which to access the field.">フィールドにアクセスするオブジェクト。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; containing the value of the field reflected by this instance.">このインスタンスがリフレクションするフィールドの値を格納している <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">このメソッドはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Indicates whether an attribute having the specified type is defined on a field.">指定した型の属性がフィールドで定義されているかどうかを示します。</summary>
      <param name="attributeType" vsli:raw="The type of the attribute.">属性の型。</param>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes.">基本クラスからのカスタム属性の継承を制御します。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instance of &lt;paramref name=&quot;attributeType&quot; /&gt; is defined on this field; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このフィールドに <paramref name="attributeType" /> のインスタンスが 1 つ以上定義されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the field using &lt;see cref=&quot;M:System.Type.GetField(System.String,System.Reflection.BindingFlags)&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;.">このメソッドは現在サポートされていません。 <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" /> を使用してフィールドを取得し、返された <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> に対して <see cref="T:System.Reflection.FieldInfo" /> を呼び出します。</exception>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Module">
      <summary vsli:raw="Gets the module in which the type that contains this field is being defined.">このフィールドを含む型が定義されるモジュールを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; that represents the dynamic module in which this field is being defined.">このフィールドが定義される動的モジュールを表す <see cref="T:System.Reflection.Module" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Name">
      <summary vsli:raw="Indicates the name of this field. This property is read-only.">このフィールドの名前を示します。 このプロパティは読み取り専用です。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of this field.">このフィールドの名前を格納している <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.ReflectedType">
      <summary vsli:raw="Indicates the reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object from which this object was obtained. This property is read-only.">このオブジェクトの取得元である <see cref="T:System.Type" /> オブジェクトへの参照を示します。 このプロパティは読み取り専用です。</summary>
      <returns vsli:raw="A reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object from which this instance was obtained.">このインスタンスを取得するために使用した <see cref="T:System.Type" /> オブジェクトへの参照。</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetConstant(System.Object)">
      <summary vsli:raw="Sets the default value of this field.">このフィールドの既定値を設定します。</summary>
      <param name="defaultValue" vsli:raw="The new default value for this field.">このフィールドの新しい既定値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">含んでいる型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して作成されています。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The field is not one of the supported types.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of &lt;paramref name=&quot;defaultValue&quot; /&gt; does not match the type of the field.  &#xA;  &#xA; -or-  &#xA;  &#xA; The field is of type &lt;see cref=&quot;T:System.Object&quot; /&gt; or other reference type, &lt;paramref name=&quot;defaultValue&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;, and the value cannot be assigned to the reference type.">フィールドが、サポートされている型のいずれでもありません。  

または - 
<paramref name="defaultValue" /> の型がフィールドの型と一致しません。  

または - 
フィールドが <see cref="T:System.Object" /> 型または他の参照型であり、<paramref name="defaultValue" /> が <see langword="null" /> ではなく、値を参照型に割り当てることができません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">指定されたカスタム属性の blob を使用して、カスタム属性を設定します。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">カスタム属性のコンストラクター。</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">属性を表すバイト blob。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> または <paramref name="binaryAttribute" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The parent type of this field is complete.">このフィールドの親の型が完全型です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Sets a custom attribute using a custom attribute builder.">カスタム属性ビルダーを使用して、カスタム属性を設定します。</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">カスタム属性を定義するヘルパー クラスのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The parent type of this field is complete.">このフィールドの親の型が完全型です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetOffset(System.Int32)">
      <summary vsli:raw="Specifies the field layout.">フィールド レイアウトを指定します。</summary>
      <param name="iOffset" vsli:raw="The offset of the field within the type containing this field.">このフィールドを格納している型の中でのフィールドのオフセット。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">含んでいる型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して作成されています。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;iOffset&quot; /&gt; is less than zero.">
        <paramref name="iOffset" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary vsli:raw="Sets the value of the field supported by the given object.">指定したオブジェクトでサポートされているフィールドの値を設定します。</summary>
      <param name="obj" vsli:raw="The object on which to access the field.">フィールドにアクセスするオブジェクト。</param>
      <param name="val" vsli:raw="The value to assign to the field.">フィールドに代入する値。</param>
      <param name="invokeAttr" vsli:raw="A member of &lt;see langword=&quot;IBinder&quot; /&gt; that specifies the type of binding that is desired (for example, IBinder.CreateInstance, IBinder.ExactBinding).">使用するバインディングの型を指定する <see langword="IBinder" /> のメンバー (IBinder.CreateInstance、IBinder.ExactBinding など)。</param>
      <param name="binder" vsli:raw="A set of properties and enabling for binding, coercion of argument types, and invocation of members using reflection. If binder is null, then IBinder.DefaultBinding is used.">バインディング、引数型の強制変換、リフレクションを使用したメンバーの呼び出しを有効にする一連のプロパティ。 バインダーが null の場合は、IBinder.DefaultBinding が使用されます。</param>
      <param name="culture" vsli:raw="The software preferences of a particular culture.">特定のカルチャに関するソフトウェア上の設定。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">このメソッドはサポートされていません。</exception>
    </member>
    <member name="T:System.Reflection.Emit.GenericTypeParameterBuilder">
      <summary vsli:raw="Defines and creates generic type parameters for dynamically defined generic types and methods. This class cannot be inherited.">動的に定義されたジェネリック型およびジェネリック メソッドのジェネリック型パラメーターを定義および作成します。 このクラスは継承できません。</summary>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Assembly">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.">現在の型パラメーターが属するジェネリック型の定義を格納する動的アセンブリを表す <see cref="T:System.Reflection.Assembly" /> オブジェクトを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.">現在の型パラメーターが属するジェネリック型の定義を格納する動的アセンブリを表す <see cref="T:System.Reflection.Assembly" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName">
      <summary vsli:raw="Gets &lt;see langword=&quot;null&quot; /&gt; in all cases.">常に <see langword="null" /> を取得します。</summary>
      <returns vsli:raw="A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) in all cases.">常に null 参照 (Visual Basic では <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType">
      <summary vsli:raw="Gets the base type constraint of the current generic type parameter.">現在のジェネリック型パラメーターの基本型の制約を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the base type constraint of the generic type parameter, or &lt;see langword=&quot;null&quot; /&gt; if the type parameter has no base type constraint.">ジェネリック型パラメーターの基本型の制約を表す <see cref="T:System.Type" /> オブジェクト。型パラメーターに基本型の制約がない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters">
      <summary vsli:raw="Gets &lt;see langword=&quot;true&quot; /&gt; in all cases.">常に <see langword="true" /> を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">常に <see langword="true" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the declaring method, if the current &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; represents a type parameter of a generic method.">現在の <see cref="T:System.Reflection.MethodInfo" /> がジェネリック メソッドの型パラメーターを表している場合に、宣言するメソッドを表す <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the declaring method, if the current &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; represents a type parameter of a generic method; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">現在の <see cref="T:System.Reflection.MethodInfo" /> がジェネリック メソッドの型パラメーターを表している場合は、宣言するメソッドを表す <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />。それ以外の場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType">
      <summary vsli:raw="Gets the generic type definition or generic method definition to which the generic type parameter belongs.">ジェネリック型パラメーターが属するジェネリック型の定義、またはジェネリック メソッドの定義を取得します。</summary>
      <returns vsli:raw="If the type parameter belongs to a generic type, a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing that generic type; if the type parameter belongs to a generic method, a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing that type that declared that generic method.">型パラメーターがジェネリック型に属する場合は、そのジェネリック型を表す <see cref="T:System.Type" /> オブジェクト。型パラメーターがジェネリック メソッドに属する場合は、そのジェネリック メソッドを宣言した型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)">
      <summary vsli:raw="Tests whether the given object is an instance of &lt;see langword=&quot;EventToken&quot; /&gt; and is equal to the current instance.">指定されたオブジェクトが <see langword="EventToken" /> のインスタンスであり、現在のインスタンスと等しいかどうかをテストします。</summary>
      <param name="o" vsli:raw="The object to be compared with the current instance.">現在のインスタンスと比較するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;o&quot; /&gt; is an instance of &lt;see langword=&quot;EventToken&quot; /&gt; and equals the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="o" /> が <see langword="true" /> のインスタンスで、現在のインスタンスと等しい場合は <see langword="EventToken" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.FullName">
      <summary vsli:raw="Gets &lt;see langword=&quot;null&quot; /&gt; in all cases.">常に <see langword="null" /> を取得します。</summary>
      <returns vsli:raw="A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) in all cases.">常に null 参照 (Visual Basic では <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes">
      <summary vsli:raw="Gets a combination of &lt;see cref=&quot;T:System.Reflection.GenericParameterAttributes&quot; /&gt; flags that describe the covariance and special constraints of the current generic type parameter.">現在のジェネリック型パラメーターの共変性および特殊な制約を説明する <see cref="T:System.Reflection.GenericParameterAttributes" /> フラグの組み合わせを取得します。</summary>
      <returns vsli:raw="A bitwise combination of values that describes the covariance and special constraints of the current generic type parameter.">現在のジェネリック型パラメーターの共変性と特殊な制約を表す値のビットごとの組み合わせ。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition">
      <summary vsli:raw="Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter.">パラメーターを宣言したジェネリック型またはジェネリック メソッドの型パラメーター リスト内の型パラメーターの位置を取得します。</summary>
      <returns vsli:raw="The position of the type parameter in the type parameter list of the generic type or method that declared the parameter.">パラメーターを宣言したジェネリック型またはジェネリック メソッドの型パラメーター リスト内の型パラメーターの位置。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">サポートされていません。</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">このメンバーの継承チェーンを検索して属性を見つけるかどうかを指定します。</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="attributeType" vsli:raw="The type of attribute to search for. Only attributes that are assignable to this type are returned.">検索する属性の種類。 この型に代入可能な属性だけが返されます。</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">このメンバーの継承チェーンを検索して属性を見つけるかどうかを指定します。</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns vsli:raw="The type referred to by the current array type, pointer type, or &lt;see langword=&quot;ByRef&quot; /&gt; type; or &lt;see langword=&quot;null&quot; /&gt; if the current type is not an array type, is not a pointer type, and is not passed by reference.">現在の配列型、ポインター型、または <see langword="ByRef" /> 型によって参照される型。現在の型が配列型でもポインター型でもなく、参照により渡されない場合は、<see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="name" vsli:raw="Not supported.">サポートされていません。</param>
      <param name="bindingAttr" vsli:raw="Not supported.">サポートされていません。</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">サポートされていません。</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="name" vsli:raw="Not supported.">サポートされていません。</param>
      <param name="bindingAttr" vsli:raw="Not supported.">サポートされていません。</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">サポートされていません。</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments">
      <summary vsli:raw="Not valid for generic type parameters.">ジェネリック型パラメーターには有効ではありません。</summary>
      <returns vsli:raw="Not valid for generic type parameters.">ジェネリック型パラメーターには有効ではありません。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition">
      <summary vsli:raw="Not valid for generic type parameters.">ジェネリック型パラメーターには有効ではありません。</summary>
      <returns vsli:raw="Not valid for generic type parameters.">ジェネリック型パラメーターには有効ではありません。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode">
      <summary vsli:raw="Returns a 32-bit integer hash code for the current instance.">現在のインスタンスの 32 ビット整数ハッシュ コードを返します。</summary>
      <returns vsli:raw="A 32-bit integer hash code.">32 ビット整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="name" vsli:raw="The name of the interface.">インターフェイスの名前。</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search without regard for case; &lt;see langword=&quot;false&quot; /&gt; to make a case-sensitive search.">大文字小文字を問わず検索する場合は <see langword="true" />。大文字と小文字を区別した検索を行う場合は <see langword="false" />。</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="interfaceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the interface type for which the mapping is to be retrieved.">割り当ての取得対象となるインターフェイス型を表す <see cref="T:System.Type" /> オブジェクト。</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="name" vsli:raw="Not supported.">サポートされていません。</param>
      <param name="type" vsli:raw="Not supported.">サポートされていません。</param>
      <param name="bindingAttr" vsli:raw="Not supported.">サポートされていません。</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">サポートされていません。</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">サポートされていません。</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="name" vsli:raw="Not supported.">サポートされていません。</param>
      <param name="bindingAttr" vsli:raw="Not supported.">サポートされていません。</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">サポートされていません。</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">サポートされていません。</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GUID">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="name" vsli:raw="Not supported.">サポートされていません。</param>
      <param name="invokeAttr" vsli:raw="Not supported.">サポートされていません。</param>
      <param name="binder" vsli:raw="Not supported.">サポートされていません。</param>
      <param name="target" vsli:raw="Not supported.">サポートされていません。</param>
      <param name="args" vsli:raw="Not supported.">サポートされていません。</param>
      <param name="modifiers" vsli:raw="Not supported.">サポートされていません。</param>
      <param name="culture" vsli:raw="Not supported.">サポートされていません。</param>
      <param name="namedParameters" vsli:raw="Not supported.">サポートされていません。</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; exception in all cases.">常に <see cref="T:System.NotSupportedException" /> 例外をスローします。</summary>
      <param name="c" vsli:raw="The object to test.">テストするオブジェクト。</param>
      <returns vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; exception in all cases.">常に <see cref="T:System.NotSupportedException" /> 例外をスローします。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType">
      <summary vsli:raw="Gets a value that indicates whether this object represents a constructed generic type.">このオブジェクトが構築ジェネリック型かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object represents a constructed generic type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このオブジェクトが構築ジェネリック型を表している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="attributeType" vsli:raw="Not supported.">サポートされていません。</param>
      <param name="inherit" vsli:raw="Not supported.">サポートされていません。</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter">
      <summary vsli:raw="Gets &lt;see langword=&quot;true&quot; /&gt; in all cases.">常に <see langword="true" /> を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">常に <see langword="true" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType">
      <summary vsli:raw="Returns &lt;see langword=&quot;false&quot; /&gt; in all cases.">常に <see langword="false" /> を返します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; in all cases.">常に <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition">
      <summary vsli:raw="Gets &lt;see langword=&quot;false&quot; /&gt; in all cases.">常に <see langword="false" /> を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; in all cases.">常に <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <param name="c" vsli:raw="Not supported.">サポートされていません。</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsVariableBoundArray" />
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType">
      <summary vsli:raw="Returns the type of a one-dimensional array whose element type is the generic type parameter.">要素型がジェネリック型パラメーターである 1 次元配列の型を返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of a one-dimensional array whose element type is the generic type parameter.">要素型がジェネリック型パラメーターである 1 次元配列の型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
      <summary vsli:raw="Returns the type of an array whose element type is the generic type parameter, with the specified number of dimensions.">指定した次元数を持つ、要素型がジェネリック型パラメーターである配列の型を返します。</summary>
      <param name="rank" vsli:raw="The number of dimensions for the array.">配列の次元数。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of an array whose element type is the generic type parameter, with the specified number of dimensions.">指定した次元数を持つ、要素型がジェネリック型パラメーターである配列の型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;rank&quot; /&gt; is not a valid number of dimensions. For example, its value is less than 1.">
        <paramref name="rank" /> が有効な次元数ではありません。 たとえば、値が 1 未満であるなどです。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current generic type parameter when passed as a reference parameter.">参照パラメーターとして渡されるときに、現在のジェネリック型パラメーターを表す <see cref="T:System.Type" /> オブジェクトを返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current generic type parameter when passed as a reference parameter.">参照パラメーターとして渡されるときに、現在のジェネリック型パラメーターを表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])">
      <summary vsli:raw="Not valid for incomplete generic type parameters.">不完全なジェネリック型パラメーターには有効ではありません。</summary>
      <param name="typeArguments" vsli:raw="An array of type arguments.">型引数の配列。</param>
      <returns vsli:raw="This method is invalid for incomplete generic type parameters.">このメソッドは、不完全なジェネリック型パラメーターには無効です。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a pointer to the current generic type parameter.">現在のジェネリック型パラメーターへのポインターを表す <see cref="T:System.Type" /> オブジェクトを返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a pointer to the current generic type parameter.">現在のジェネリック型パラメーターへのポインターを表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Module">
      <summary vsli:raw="Gets the dynamic module that contains the generic type parameter.">ジェネリック型パラメーターを格納する動的モジュールを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; object that represents the dynamic module that contains the generic type parameter.">ジェネリック型パラメーターを格納する動的モジュールを表す <see cref="T:System.Reflection.Module" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Name">
      <summary vsli:raw="Gets the name of the generic type parameter.">ジェネリック型パラメーターの名前を取得します。</summary>
      <returns vsli:raw="The name of the generic type parameter.">ジェネリック型パラメーターの名前。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Namespace">
      <summary vsli:raw="Gets &lt;see langword=&quot;null&quot; /&gt; in all cases.">常に <see langword="null" /> を取得します。</summary>
      <returns vsli:raw="A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) in all cases.">常に null 参照 (Visual Basic では <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Type&quot; /&gt; object that was used to obtain the &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt;.">
        <see cref="T:System.Type" /> を取得するために使用した <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> オブジェクトを取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that was used to obtain the &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt;.">
        <see cref="T:System.Type" /> を取得するために使用した <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
      <summary vsli:raw="Sets the base type that a type must inherit in order to be substituted for the type parameter.">型パラメーターを置き換えるために、型が継承する必要のある基本型を設定します。</summary>
      <param name="baseTypeConstraint" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that must be inherited by any type that is to be substituted for the type parameter.">型パラメーターを置き換える型が継承する必要のある <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">指定されたカスタム属性の blob を使用して、カスタム属性を設定します。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">カスタム属性のコンストラクター。</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attribute.">属性を表すバイト BLOB。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is a null reference.">
        <paramref name="con" /> が <see langword="null" /> です。  
または 
 <paramref name="binaryAttribute" /> が null 参照です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">カスタム属性ビルダーを使用して、カスタム属性を設定します。</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class that defines the custom attribute.">カスタム属性を定義するためのヘルパー クラスのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
      <summary vsli:raw="Sets the variance characteristics and special constraints of the generic parameter, such as the parameterless constructor constraint.">パラメーターなしのコンストラクターの制約など、ジェネリック パラメーターの分散特性と特殊な制約を設定します。</summary>
      <param name="genericParameterAttributes" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.GenericParameterAttributes&quot; /&gt; values that represent the variance characteristics and special constraints of the generic type parameter.">ジェネリック型パラメーターの分散特性と特殊な制約を表す <see cref="T:System.Reflection.GenericParameterAttributes" /> 値のビットごとの組み合わせ。</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
      <summary vsli:raw="Sets the interfaces a type must implement in order to be substituted for the type parameter.">型パラメーターを置き換えるために、型が実装する必要のあるインターフェイスを設定します。</summary>
      <param name="interfaceConstraints" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects that represent the interfaces a type must implement in order to be substituted for the type parameter.">型パラメーターを置き換えるために、型が実装する必要のあるインターフェイスを表す <see cref="T:System.Type" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.ToString">
      <summary vsli:raw="Returns a string representation of the current generic type parameter.">現在のジェネリック型パラメーターの文字列形式を返します。</summary>
      <returns vsli:raw="A string that contains the name of the generic type parameter.">ジェネリック型パラメーターの名前を含む文字列。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</summary>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不完全なジェネリック型パラメーターではサポートされていません。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType">
      <summary vsli:raw="Gets the current generic type parameter.">現在のジェネリック型パラメーターを取得します。</summary>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; object.">現在の <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Reflection.Emit.MethodBuilder">
      <summary vsli:raw="Defines and represents a method (or constructor) on a dynamic class.">動的クラスのメソッド (またはコンストラクター) を定義および表現します。</summary>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Attributes">
      <summary vsli:raw="Retrieves the attributes for this method.">このメソッドの属性を取得します。</summary>
      <returns vsli:raw="Read-only. Retrieves the &lt;see langword=&quot;MethodAttributes&quot; /&gt; for this method.">読み取り専用。 このメソッドの <see langword="MethodAttributes" /> を取得します。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.CallingConvention">
      <summary vsli:raw="Returns the calling convention of the method.">メソッドの呼び出し規約を返します。</summary>
      <returns vsli:raw="Read-only. The calling convention of the method.">読み取り専用。 メソッドの呼び出し規則。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ContainsGenericParameters">
      <summary vsli:raw="Not supported for this type.">この型ではサポートされていません。</summary>
      <returns vsli:raw="Not supported.">サポートされていません。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The invoked method is not supported in the base class.">呼び出されたメソッドは基底クラスでサポートされていません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.DeclaringType">
      <summary vsli:raw="Returns the type that declares this method.">このメソッドを宣言する型を返します。</summary>
      <returns vsli:raw="Read-only. The type that declares this method.">読み取り専用。 このメソッドを宣言する型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
      <summary vsli:raw="Sets the number of generic type parameters for the current method, specifies their names, and returns an array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects that can be used to define their constraints.">現在のメソッドのジェネリック型パラメーターの数を設定し、その名前を指定し、制約の定義に使用できる <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> オブジェクトの配列を返します。</summary>
      <param name="names" vsli:raw="An array of strings that represent the names of the generic type parameters.">ジェネリック型パラメーターの名前を表す文字列の配列。</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects representing the type parameters of the generic method.">ジェネリック メソッドの型パラメーターを表す <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> オブジェクトの配列。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Generic type parameters have already been defined for this method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method has been completed already.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)&quot; /&gt; method has been called for the current method.">ジェネリック型パラメーターは、このメソッドに対して既に定義されています。  
または 
メソッドは既に完了しています。  
または 
<see cref="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)" /> メソッドは現在のメソッドに対して呼び出されています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;names&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;names&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="names" /> は <see langword="null" />です。  

または - 
<paramref name="names" /> の要素は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;names&quot; /&gt; is an empty array.">
        <paramref name="names" /> は空の配列です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary vsli:raw="Sets the parameter attributes and the name of a parameter of this method, or of the return value of this method. Returns a ParameterBuilder that can be used to apply custom attributes.">パラメーター属性およびこのメソッドのパラメーターの名前、またはこのメソッドの戻り値の名前を設定します。 カスタム属性を適用するために使用できる ParameterBuilder を返します。</summary>
      <param name="position" vsli:raw="The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter; the number 0 represents the return value of the method.">パラメーター リストのパラメーターの位置。 パラメーターは、最初のパラメーターに対して 1 から始まるインデックスが付けられます。この数値が 0 の場合は、メソッドの戻り値を表します。</param>
      <param name="attributes" vsli:raw="The parameter attributes of the parameter.">パラメーターのパラメーター属性。</param>
      <param name="strParamName" vsli:raw="The name of the parameter. The name can be the null string.">パラメーターの名前。 名前は null 文字列でもかまいません。</param>
      <returns vsli:raw="Returns a &lt;see langword=&quot;ParameterBuilder&quot; /&gt; object that represents a parameter of this method or the return value of this method.">このメソッドのパラメーターを表す <see langword="ParameterBuilder" /> オブジェクト、またはこのメソッドの戻り値を返します。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The method has no parameters.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;position&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;position&quot; /&gt; is greater than the number of the method's parameters.">メソッドにパラメーターが指定されていません。  

または - 
<paramref name="position" /> が 0 未満です。  

または 
 <paramref name="position" /> がメソッドのパラメーター数を超える値です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">含まれている型は、<see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して以前に作成されています。  

または - 
現在のメソッドでは、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Equals(System.Object)">
      <summary vsli:raw="Determines whether the given object is equal to this instance.">指定したオブジェクトがこのインスタンスと等しいかどうかを確認します。</summary>
      <param name="obj" vsli:raw="The object to compare with this &lt;see langword=&quot;MethodBuilder&quot; /&gt; instance.">この <see langword="MethodBuilder" /> インスタンスと比較するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see langword=&quot;MethodBuilder&quot; /&gt; and is equal to this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="obj" /> が <see langword="true" /> のインスタンスで、このオブジェクトと等しい場合は <see langword="MethodBuilder" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetBaseDefinition">
      <summary vsli:raw="Return the base implementation for a method.">メソッドの基本実装を返します。</summary>
      <returns vsli:raw="The base implementation of this method.">このメソッドの基本実装。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this method.">このメソッドに対して定義されているすべてのカスタム属性を返します。</summary>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the custom attributes.">このメンバーの継承チェインを検索して属性を見つけるかどうかを指定します。</param>
      <returns vsli:raw="Returns an array of objects representing all the custom attributes of this method.">このメソッドのすべてのカスタム属性を表すオブジェクトの配列を返します。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">このメソッドは現在サポートされていません。 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> を使用してメソッドを取得し、返された <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> に対して <see cref="T:System.Reflection.MethodInfo" /> を呼び出します。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns the custom attributes identified by the given type.">指定された型によって識別されるカスタム属性を返します。</summary>
      <param name="attributeType" vsli:raw="The custom attribute type.">カスタム属性の型。</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the custom attributes.">このメンバーの継承チェインを検索して属性を見つけるかどうかを指定します。</param>
      <returns vsli:raw="Returns an array of objects representing the attributes of this method that are of type &lt;paramref name=&quot;attributeType&quot; /&gt;.">このメソッドの属性を表すオブジェクトの配列を返します。メソッドの属性は、<paramref name="attributeType" /> 型です。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">このメソッドは現在サポートされていません。 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> を使用してメソッドを取得し、返された <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> に対して <see cref="T:System.Reflection.MethodInfo" /> を呼び出します。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetGenericArguments">
      <summary vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects that represent the type parameters of the method, if it is generic.">メソッドがジェネリック メソッドの場合に、メソッドの型パラメーターを表す <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> オブジェクトの配列を返します。</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects representing the type parameters, if the method is generic, or &lt;see langword=&quot;null&quot; /&gt; if the method is not generic.">メソッドがジェネリックの場合は型パラメーターを表す <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> オブジェクトの配列。メソッドがジェネリックでない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition">
      <summary vsli:raw="Returns this method.">このメソッドを返します。</summary>
      <returns vsli:raw="The current instance of &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt;.">
        <see cref="T:System.Reflection.Emit.MethodBuilder" /> の現在のインスタンス。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current method is not generic. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property returns &lt;see langword=&quot;false&quot; /&gt;.">現在のメソッドはジェネリック メソッドではありません。 つまり、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> プロパティが <see langword="false" /> を返します。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetHashCode">
      <summary vsli:raw="Gets the hash code for this method.">このメソッドのハッシュ コードを取得します。</summary>
      <returns vsli:raw="The hash code for this method.">このメソッドのハッシュ コード。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator">
      <summary vsli:raw="Returns an &lt;see langword=&quot;ILGenerator&quot; /&gt; for this method with a default Microsoft intermediate language (MSIL) stream size of 64 bytes.">既定の MSIL (Microsoft Intermediate Language) ストリーム サイズ (64 バイト) を持つこのメソッドの <see langword="ILGenerator" /> を返します。</summary>
      <returns vsli:raw="Returns an &lt;see langword=&quot;ILGenerator&quot; /&gt; object for this method.">このメソッドの <see langword="ILGenerator" /> オブジェクトを返します。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The method should not have a body because of its &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.MethodImplAttributes&quot; /&gt; flags, for example because it has the &lt;see cref=&quot;F:System.Reflection.MethodAttributes.PinvokeImpl&quot; /&gt; flag.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is a generic method, but not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Reflection.MethodAttributes" /> または <see cref="T:System.Reflection.MethodImplAttributes" /> のフラグが指定されているため、このメソッドに本体は必要ありません。たとえば、<see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /> フラグが指定されているなどです。  

または - 
このメソッドはジェネリック メソッドですが、ジェネリック メソッドの定義ではありません。 つまり、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> プロパティが <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)">
      <summary vsli:raw="Returns an &lt;see langword=&quot;ILGenerator&quot; /&gt; for this method with the specified Microsoft intermediate language (MSIL) stream size.">指定した MSIL ストリーム サイズを持つこのメソッドの <see langword="ILGenerator" /> を返します。</summary>
      <param name="size" vsli:raw="The size of the MSIL stream, in bytes.">MSIL ストリームのサイズ (バイト単位)。</param>
      <returns vsli:raw="Returns an &lt;see langword=&quot;ILGenerator&quot; /&gt; object for this method.">このメソッドの <see langword="ILGenerator" /> オブジェクトを返します。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The method should not have a body because of its &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.MethodImplAttributes&quot; /&gt; flags, for example because it has the &lt;see cref=&quot;F:System.Reflection.MethodAttributes.PinvokeImpl&quot; /&gt; flag.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is a generic method, but not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Reflection.MethodAttributes" /> または <see cref="T:System.Reflection.MethodImplAttributes" /> のフラグが指定されているため、このメソッドに本体は必要ありません。たとえば、<see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /> フラグが指定されているなどです。  

または - 
このメソッドはジェネリック メソッドですが、ジェネリック メソッドの定義ではありません。 つまり、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> プロパティが <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags">
      <summary vsli:raw="Returns the implementation flags for the method.">メソッドの実装フラグを返します。</summary>
      <returns vsli:raw="Returns the implementation flags for the method.">メソッドの実装フラグを返します。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetParameters">
      <summary vsli:raw="Returns the parameters of this method.">このメソッドのパラメーターを返します。</summary>
      <returns vsli:raw="An array of &lt;see langword=&quot;ParameterInfo&quot; /&gt; objects that represent the parameters of the method.">このメソッドのパラメーターを表す <see langword="ParameterInfo" /> オブジェクトの配列。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see langword=&quot;GetParameters&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">このメソッドは現在サポートされていません。 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> を使用してメソッドを取得し、返された <see langword="GetParameters" /> に対して <see cref="T:System.Reflection.MethodInfo" /> を呼び出します。</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.InitLocals">
      <summary vsli:raw="Gets or sets a Boolean value that specifies whether the local variables in this method are zero initialized. The default value of this property is &lt;see langword=&quot;true&quot; /&gt;.">このメソッドのローカル変数を 0 で初期化するかどうかを指定するブール値を取得または設定します。 このプロパティの既定値は <see langword="true" />です。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the local variables in this method should be zero initialized; otherwise &lt;see langword=&quot;false&quot; /&gt;.">このメソッドのローカル変数を 0 で初期化する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;. (Get or set.)">現在のメソッドでは、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> プロパティは <see langword="false" /> です。 (取得または設定します)。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Dynamically invokes the method reflected by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.">指定したバインダーの制約の下で、このインスタンスによってリフレクションされるメソッドを、指定したオブジェクトに対してパラメーターを指定して動的に呼び出します。</summary>
      <param name="obj" vsli:raw="The object on which to invoke the specified method. If the method is static, this parameter is ignored.">指定したメソッドの呼び出し元となるオブジェクト。 メソッドが静的な場合、このパラメーターは無視されます。</param>
      <param name="invokeAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">これは <see langword="InvokeMethod" /> や <see langword="NonPublic" /> など、<see cref="T:System.Reflection.BindingFlags" /> からのビット フラグでなければなりません。</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If binder is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used. For more details, see &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt;.">バインディング、引数型の強制変換、メンバーの呼び出し、およびリフレクションを通じた MemberInfo オブジェクトの取得を有効にするオブジェクト。 バインダーが <see langword="null" /> の場合は、既定のバインダーが使用されます。 詳細については、「<see cref="T:System.Reflection.Binder" />」を参照してください。</param>
      <param name="parameters" vsli:raw="An argument list. This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked. If there are no parameters this should be &lt;see langword=&quot;null&quot; /&gt;.">引数リスト。 これは、呼び出すメソッドのパラメーターと同じ数、順序、および型の引数の配列です。 パラメーターがない場合は、<see langword="null" /> にします。</param>
      <param name="culture" vsli:raw="An instance of &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; for the current thread is used. (Note that this is necessary to, for example, convert a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents 1000 to a &lt;see cref=&quot;T:System.Double&quot; /&gt; value, since 1000 is represented differently by different cultures.)">型の強制変換を制御するために使用する <see cref="T:System.Globalization.CultureInfo" /> のインスタンス。 null の場合は、現在のスレッドの <see cref="T:System.Globalization.CultureInfo" /> が使用されます。 このインスタンスは、たとえば、1000 を表す <see cref="T:System.String" /> を <see cref="T:System.Double" /> 値に変換する場合に必要です。これは、カルチャによって 1000 の表記が異なるためです。</param>
      <returns vsli:raw="Returns an object containing the return value of the invoked method.">呼び出されたメソッドの戻り値を格納しているオブジェクトを返します。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">このメソッドは現在サポートされていません。 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> を使用してメソッドを取得し、返された <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> に対して <see cref="T:System.Reflection.MethodInfo" /> を呼び出します。</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsConstructedGenericMethod" />
    <member name="M:System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Checks if the specified custom attribute type is defined.">指定されたカスタム属性の型が定義されているかどうかを確認します。</summary>
      <param name="attributeType" vsli:raw="The custom attribute type.">カスタム属性の型。</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the custom attributes.">このメンバーの継承チェインを検索して属性を見つけるかどうかを指定します。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified custom attribute type is defined; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定されたカスタム属性の型が定義されている場合は<see langword="true" /> 。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">このメソッドは現在サポートされていません。 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> を使用してメソッドを取得し、返された <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> に対して <see cref="T:System.Reflection.MethodInfo" /> を呼び出します。</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod">
      <summary vsli:raw="Gets a value indicating whether the method is a generic method.">メソッドがジェネリック メソッドかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is generic; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このメソッドがジェネリック メソッドの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition">
      <summary vsli:raw="Gets a value indicating whether the current &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; object represents the definition of a generic method.">現在の <see cref="T:System.Reflection.Emit.MethodBuilder" /> オブジェクトがジェネリック メソッドの定義を表しているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; object represents the definition of a generic method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在の <see cref="T:System.Reflection.Emit.MethodBuilder" /> オブジェクトがジェネリック メソッドの定義を表している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecurityCritical">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases. This property is not supported in dynamic assemblies.">すべての場合。 このプロパティは、動的アセンブリではサポートされていません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases. This property is not supported in dynamic assemblies.">すべての場合。 このプロパティは、動的アセンブリではサポートされていません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecurityTransparent">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases. This property is not supported in dynamic assemblies.">すべての場合。 このプロパティは、動的アセンブリではサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])">
      <summary vsli:raw="Returns a generic method constructed from the current generic method definition using the specified generic type arguments.">指定したジェネリック型引数を使用して、現在のジェネリック メソッドの定義から構築されたジェネリック メソッドを返します。</summary>
      <param name="typeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects that represent the type arguments for the generic method.">ジェネリック メソッドの型引数を表す <see cref="T:System.Type" /> オブジェクトの配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; representing the generic method constructed from the current generic method definition using the specified generic type arguments.">指定したジェネリック型引数を使用して、現在のジェネリック メソッドの定義から構築されたジェネリック メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.MethodHandle">
      <summary vsli:raw="Retrieves the internal handle for the method. Use this handle to access the underlying metadata handle.">メソッドの内部ハンドルを取得します。 基になるメタデータ ハンドルにアクセスするには、このハンドルを使用します。</summary>
      <returns vsli:raw="Read-only. The internal handle for the method. Use this handle to access the underlying metadata handle.">読み取り専用。 メソッドの内部ハンドル。 基になるメタデータ ハンドルにアクセスするには、このハンドルを使用します。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;P:System.Reflection.MethodBase.MethodHandle&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">このメソッドは現在サポートされていません。 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> を使用してメソッドを取得し、返された <see cref="P:System.Reflection.MethodBase.MethodHandle" /> に対して <see cref="T:System.Reflection.MethodInfo" /> を呼び出します。</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Module">
      <summary vsli:raw="Gets the module in which the current method is being defined.">現在のメソッドを定義するモジュールを取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; in which the member represented by the current &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; is being defined.">現在の <see cref="T:System.Reflection.Module" /> によって表されるメンバーを定義する <see cref="T:System.Reflection.MemberInfo" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Name">
      <summary vsli:raw="Retrieves the name of this method.">このメソッドの名前を取得します。</summary>
      <returns vsli:raw="Read-only. Retrieves a string containing the simple name of this method.">読み取り専用。 このメソッドの簡易名を格納している文字列を取得します。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReflectedType">
      <summary vsli:raw="Retrieves the class that was used in reflection to obtain this object.">このオブジェクトを取得するためにリフレクションで使用したクラスを取得します。</summary>
      <returns vsli:raw="Read-only. The type used to obtain this method.">読み取り専用。 このメソッドを取得するために使用する型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnParameter">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.ParameterInfo&quot; /&gt; object that contains information about the return type of the method, such as whether the return type has custom modifiers.">戻り値の型にカスタム修飾子があるかどうかなど、メソッドの戻り値の型に関する情報を格納している <see cref="T:System.Reflection.ParameterInfo" /> オブジェクトを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.ParameterInfo&quot; /&gt; object that contains information about the return type.">戻り値の型に関する情報を格納している <see cref="T:System.Reflection.ParameterInfo" /> オブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The declaring type has not been created.">宣言する型が作成されていません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnType">
      <summary vsli:raw="Gets the return type of the method represented by this &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt;.">この <see cref="T:System.Reflection.Emit.MethodBuilder" /> が表すメソッドの戻り値の型を取得します。</summary>
      <returns vsli:raw="The return type of the method.">メソッドの戻り値の型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes">
      <summary vsli:raw="Returns the custom attributes of the method's return type.">メソッドの戻り値の型のカスタム属性を返します。</summary>
      <returns vsli:raw="Read-only. The custom attributes of the method's return type.">読み取り専用。 メソッドの戻り値の型のカスタム属性。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">指定されたカスタム属性の blob を使用して、カスタム属性を設定します。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">カスタム属性のコンストラクター。</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">属性を表すバイト blob。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> または <paramref name="binaryAttribute" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">現在のメソッドでは、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Sets a custom attribute using a custom attribute builder.">カスタム属性ビルダーを使用して、カスタム属性を設定します。</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to describe the custom attribute.">カスタム属性を記述するためのヘルパー クラスのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">現在のメソッドでは、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
      <summary vsli:raw="Sets the implementation flags for this method.">このメソッドの実装フラグを設定します。</summary>
      <param name="attributes" vsli:raw="The implementation flags to set.">設定する実装フラグ。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">含まれている型は、<see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して以前に作成されています。  

または - 
現在のメソッドでは、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])">
      <summary vsli:raw="Sets the number and types of parameters for a method.">メソッドのパラメーターの数と型を設定します。</summary>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the parameter types.">パラメーターの型を表す <see cref="T:System.Type" /> オブジェクトの配列。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current method is generic, but is not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">現在のメソッドはジェネリック メソッドですが、ジェネリック メソッドの定義ではありません。 つまり、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> プロパティが <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)">
      <summary vsli:raw="Sets the return type of the method.">メソッドの戻り値の型を設定します。</summary>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the return type of the method.">メソッドの戻り値の型を表す <see cref="T:System.Type" /> オブジェクト。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current method is generic, but is not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">現在のメソッドはジェネリック メソッドですが、ジェネリック メソッドの定義ではありません。 つまり、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> プロパティが <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Sets the method signature, including the return type, the parameter types, and the required and optional custom modifiers of the return type and parameter types.">戻り値の型、パラメーターの型、戻り値の型とパラメーターの型の必須およびオプションのカスタム修飾子を含むメソッド シグネチャを設定します。</summary>
      <param name="returnType" vsli:raw="The return type of the method.">メソッドの戻り値の型。</param>
      <param name="returnTypeRequiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the method. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">メソッドの戻り値の型の <see cref="T:System.Runtime.CompilerServices.IsConst" /> など、必須のカスタム修飾子を表す型の配列。 戻り値の型が必須のカスタム修飾子を持たない場合は、<see langword="null" /> を指定します。</param>
      <param name="returnTypeOptionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the method. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">メソッドの戻り値の型の <see cref="T:System.Runtime.CompilerServices.IsConst" /> のような、省略可能なカスタム修飾子を表す型の配列。 戻り値の型に省略可能のカスタム修飾子がない場合は、<see langword="null" /> を指定します。</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the method.">メソッドのパラメーターの型。</param>
      <param name="parameterTypeRequiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">型の配列の配列。 型の各配列は、<see cref="T:System.Runtime.CompilerServices.IsConst" /> のような、対応するパラメーターの必須のカスタム修飾子を表します。 特定のパラメーターに必須のカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 どのパラメーターにも必須のカスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <param name="parameterTypeOptionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">型の配列の配列。 型の各配列は、 <see cref="T:System.Runtime.CompilerServices.IsConst" />のような、対応するパラメーターの省略可能なカスタム修飾子を表します。 特定のパラメーターに省略可能なカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 どのパラメーターにも省略可能なカスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current method is generic, but is not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">現在のメソッドはジェネリック メソッドですが、ジェネリック メソッドの定義ではありません。 つまり、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> プロパティが <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.ToString">
      <summary vsli:raw="Returns this &lt;see langword=&quot;MethodBuilder&quot; /&gt; instance as a string.">この <see langword="MethodBuilder" /> インスタンスを文字列として返します。</summary>
      <returns vsli:raw="Returns a string containing the name, attributes, method signature, exceptions, and local signature of this method followed by the current Microsoft intermediate language (MSIL) stream.">このメソッドの名前、属性、メソッド シグネチャ、例外、およびローカル シグネチャを格納している文字列と現在の MSIL ストリームを続けて返します。</returns>
    </member>
    <member name="T:System.Reflection.Emit.ModuleBuilder">
      <summary vsli:raw="Defines and represents a module in a dynamic assembly.">動的アセンブリ内のモジュールを定義および表現します。</summary>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.Assembly">
      <summary vsli:raw="Gets the dynamic assembly that defined this instance of &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">この <see cref="T:System.Reflection.Emit.ModuleBuilder" /> インスタンスが定義されている動的アセンブリを取得します。</summary>
      <returns vsli:raw="The dynamic assembly that defined the current dynamic module.">現在の動的モジュールが定義されている動的アセンブリ。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions">
      <summary vsli:raw="Completes the global function definitions and global data definitions for this dynamic module.">この動的モジュールのグローバル関数定義とグローバル データ定義を完了します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This method was called previously.">このメソッドは、既に呼び出されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary vsli:raw="Defines an enumeration type that is a value type with a single non-static field called &lt;paramref name=&quot;value__&quot; /&gt; of the specified type.">指定した型の <paramref name="value__" /> という単一の非静的フィールドと共に、値型の列挙型を定義します。</summary>
      <param name="name" vsli:raw="The full path of the enumeration type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">列挙型の完全なパス。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="visibility" vsli:raw="The type attributes for the enumeration. The attributes are any bits defined by &lt;see cref=&quot;F:System.Reflection.TypeAttributes.VisibilityMask&quot; /&gt;.">列挙型の型属性。 属性は、<see cref="F:System.Reflection.TypeAttributes.VisibilityMask" /> で定義された任意のビットです。</param>
      <param name="underlyingType" vsli:raw="The underlying type for the enumeration. This must be a built-in integer type.">列挙型の基になる型。 これは、組み込みの整数型にする必要があります。</param>
      <returns vsli:raw="The defined enumeration.">定義された列挙型。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Attributes other than visibility attributes are provided.  &#xA;  &#xA; -or-  &#xA;  &#xA; An enumeration with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; The visibility attributes do not match the scope of the enumeration. For example, &lt;see cref=&quot;F:System.Reflection.TypeAttributes.NestedPublic&quot; /&gt; is specified for &lt;paramref name=&quot;visibility&quot; /&gt;, but the enumeration is not a nested type.">可視属性以外の属性が指定されています。  
または 
指定された名前の列挙型が、このモジュールの親アセンブリに存在します。  
または 
可視属性が列挙型のスコープと一致しません。 たとえば、<see cref="F:System.Reflection.TypeAttributes.NestedPublic" /> が<paramref name="visibility" /> に指定されていて、列挙型が入れ子にされた型ではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary vsli:raw="Defines a global method with the specified name, attributes, calling convention, return type, and parameter types.">名前、属性、呼び出し規約、戻り値の型、およびパラメーター型を指定して、グローバル メソッドを定義します。</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">メソッドの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attributes" vsli:raw="The attributes of the method. &lt;paramref name=&quot;attributes&quot; /&gt; must include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.">メソッドの属性。 <paramref name="attributes" /> には <see cref="F:System.Reflection.MethodAttributes.Static" /> を含める必要があります。</param>
      <param name="callingConvention" vsli:raw="The calling convention for the method.">メソッドの呼び出し規則。</param>
      <param name="returnType" vsli:raw="The return type of the method.">メソッドの戻り値の型。</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">メソッドのパラメーター型。</param>
      <returns vsli:raw="The defined global method.">定義されたグローバル メソッド。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static. That is, &lt;paramref name=&quot;attributes&quot; /&gt; does not include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element in the &lt;see cref=&quot;T:System.Type&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">メソッドは静的ではありません。 つまり、<paramref name="attributes" /> に <see cref="F:System.Reflection.MethodAttributes.Static" /> が含まれていません。  
または 
<see cref="T:System.Type" /> 配列の要素が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; has been previously called.">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> は以前に呼び出されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Defines a global method with the specified name, attributes, calling convention, return type, custom modifiers for the return type, parameter types, and custom modifiers for the parameter types.">名前、属性、呼び出し規約、戻り値の型、戻り値の型のカスタム修飾子、パラメーター型、およびパラメーター型のカスタム修飾子を指定して、グローバル メソッドを定義します。</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded null characters.">メソッドの名前。 <paramref name="name" /> に null 文字を埋め込むことはできません。</param>
      <param name="attributes" vsli:raw="The attributes of the method. &lt;paramref name=&quot;attributes&quot; /&gt; must include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.">メソッドの属性。 <paramref name="attributes" /> には <see cref="F:System.Reflection.MethodAttributes.Static" /> を含める必要があります。</param>
      <param name="callingConvention" vsli:raw="The calling convention for the method.">メソッドの呼び出し規則。</param>
      <param name="returnType" vsli:raw="The return type of the method.">メソッドの戻り値の型。</param>
      <param name="requiredReturnTypeCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.IsConst" /> や <see cref="T:System.Runtime.CompilerServices.IsBoxed" /> などの、戻り値の型の必須のカスタム修飾子を表す型の配列。 戻り値の型が必須のカスタム修飾子を持たない場合は、<see langword="null" /> を指定します。</param>
      <param name="optionalReturnTypeCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.IsConst" /> や <see cref="T:System.Runtime.CompilerServices.IsBoxed" /> などの、戻り値の型のオプションのカスタム修飾子を表す型の配列。 戻り値の型に省略可能のカスタム修飾子がない場合は、<see langword="null" /> を指定します。</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">メソッドのパラメーター型。</param>
      <param name="requiredParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter of the global method. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the global method has no arguments, or if none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">型の配列の配列。 型の各配列は、グローバル メソッドの対応するパラメーターの必須のカスタム修飾子を表します。 特定の引数に必須のカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 グローバル メソッドに引数がない場合、またはどの引数にも必須のカスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <param name="optionalParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the global method has no arguments, or if none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">型の配列の配列。 型の各配列は、対応するパラメーターのオプションのカスタム修飾子を表します。 特定の引数にオプションのカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 グローバル メソッドに引数がない場合、またはどの引数にもオプションのカスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <returns vsli:raw="The defined global method.">定義されたグローバル メソッド。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static. That is, &lt;paramref name=&quot;attributes&quot; /&gt; does not include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element in the &lt;see cref=&quot;T:System.Type&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">メソッドは静的ではありません。 つまり、<paramref name="attributes" /> に <see cref="F:System.Reflection.MethodAttributes.Static" /> が含まれていません。  

または - 
<see cref="T:System.Type" /> 配列の要素が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; method has been previously called.">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> メソッドは既に呼び出されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Defines a global method with the specified name, attributes, return type, and parameter types.">名前、属性、戻り値の型、およびパラメーター型を指定して、グローバル メソッドを定義します。</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">メソッドの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attributes" vsli:raw="The attributes of the method. &lt;paramref name=&quot;attributes&quot; /&gt; must include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.">メソッドの属性。 <paramref name="attributes" /> には <see cref="F:System.Reflection.MethodAttributes.Static" /> を含める必要があります。</param>
      <param name="returnType" vsli:raw="The return type of the method.">メソッドの戻り値の型。</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">メソッドのパラメーター型。</param>
      <returns vsli:raw="The defined global method.">定義されたグローバル メソッド。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static. That is, &lt;paramref name=&quot;attributes&quot; /&gt; does not include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero  &#xA;  &#xA; -or-  &#xA;  &#xA; An element in the &lt;see cref=&quot;T:System.Type&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">メソッドは静的ではありません。 つまり、<paramref name="attributes" /> に <see cref="F:System.Reflection.MethodAttributes.Static" /> が含まれていません。  
または 
<paramref name="name" /> の長さが 0 です。 

または - 
<see cref="T:System.Type" /> 配列の要素が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; has been previously called.">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> は以前に呼び出されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
      <summary vsli:raw="Defines an initialized data field in the .sdata section of the portable executable (PE) file.">移植可能な実行可能 (PE) ファイルの .sdata セクションに、初期化済みデータ フィールドを定義します。</summary>
      <param name="name" vsli:raw="The name used to refer to the data. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">データを参照するために使用する名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="data" vsli:raw="The binary large object (BLOB) of data.">データのバイナリ ラージ オブジェクト (BLOB)。</param>
      <param name="attributes" vsli:raw="The attributes for the field. The default is &lt;see langword=&quot;Static&quot; /&gt;.">フィールドの属性。 既定値は、<see langword="Static" /> です。</param>
      <returns vsli:raw="A field to reference the data.">データを参照するフィールド。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;data&quot; /&gt; is less than or equal to zero or greater than or equal to 0x3f0000.">
        <paramref name="name" /> の長さが 0 です。  
または 
<paramref name="data" /> のサイズが 0 以下か、0x3f0000 以上です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;data&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> または <paramref name="data" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; has been previously called.">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> は以前に呼び出されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Defines a &lt;see langword=&quot;PInvoke&quot; /&gt; method with the specified name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the &lt;see langword=&quot;PInvoke&quot; /&gt; flags.">メソッド名、メソッドが定義される DLL の名前、メソッドの属性、メソッドの呼び出し規約、メソッドの戻り値の型、メソッドのパラメーターの型、および <see langword="PInvoke" /> フラグを指定して、<see langword="PInvoke" /> メソッドを定義します。</summary>
      <param name="name" vsli:raw="The name of the &lt;see langword=&quot;PInvoke&quot; /&gt; method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">
        <see langword="PInvoke" /> メソッドの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="dllName" vsli:raw="The name of the DLL in which the &lt;see langword=&quot;PInvoke&quot; /&gt; method is defined.">
        <see langword="PInvoke" /> メソッドが定義されている DLL の名前。</param>
      <param name="attributes" vsli:raw="The attributes of the method.">メソッドの属性。</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">メソッドの呼び出し規則。</param>
      <param name="returnType" vsli:raw="The method's return type.">メソッドの戻り値の型。</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">メソッドのパラメーター型。</param>
      <param name="nativeCallConv" vsli:raw="The native calling convention.">ネイティブ呼び出し規則。</param>
      <param name="nativeCharSet" vsli:raw="The method's native character set.">メソッドのネイティブ文字セット。</param>
      <returns vsli:raw="The defined &lt;see langword=&quot;PInvoke&quot; /&gt; method.">定義された <see langword="PInvoke" /> メソッド。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static or if the containing type is an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is abstract.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method was previously defined.">メソッドが静的でないか、格納している型がインターフェイスです。  

または -  

 抽象メソッドです。  

または -  

 メソッドは以前に定義されています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;dllName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> または <paramref name="dllName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;">含んでいる型が <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して以前に作成されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Defines a &lt;see langword=&quot;PInvoke&quot; /&gt; method with the specified name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the &lt;see langword=&quot;PInvoke&quot; /&gt; flags.">メソッド名、メソッドが定義される DLL の名前、メソッドの属性、メソッドの呼び出し規約、メソッドの戻り値の型、メソッドのパラメーターの型、および <see langword="PInvoke" /> フラグを指定して、<see langword="PInvoke" /> メソッドを定義します。</summary>
      <param name="name" vsli:raw="The name of the &lt;see langword=&quot;PInvoke&quot; /&gt; method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">
        <see langword="PInvoke" /> メソッドの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="dllName" vsli:raw="The name of the DLL in which the &lt;see langword=&quot;PInvoke&quot; /&gt; method is defined.">
        <see langword="PInvoke" /> メソッドが定義されている DLL の名前。</param>
      <param name="entryName" vsli:raw="The name of the entry point in the DLL.">DLL 内のエントリ ポイントの名前。</param>
      <param name="attributes" vsli:raw="The attributes of the method.">メソッドの属性。</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">メソッドの呼び出し規則。</param>
      <param name="returnType" vsli:raw="The method's return type.">メソッドの戻り値の型。</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">メソッドのパラメーター型。</param>
      <param name="nativeCallConv" vsli:raw="The native calling convention.">ネイティブ呼び出し規則。</param>
      <param name="nativeCharSet" vsli:raw="The method's native character set.">メソッドのネイティブ文字セット。</param>
      <returns vsli:raw="The defined &lt;see langword=&quot;PInvoke&quot; /&gt; method.">定義された <see langword="PInvoke" /> メソッド。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static or if the containing type is an interface or if the method is abstract of if the method was previously defined.">メソッドが静的でないか、格納している型がインターフェイスです。または、メソッドが既に定義されている場合は、メソッドが抽象メソッドです。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;dllName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> または <paramref name="dllName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;">含んでいる型が <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して以前に作成されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; for a private type with the specified name in this module.">このモジュールで、指定した名前のプライベート型の <see langword="TypeBuilder" /> を構築します。</summary>
      <param name="name" vsli:raw="The full path of the type, including the namespace. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">名前空間を含む、型の完全なパス。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <returns vsli:raw="A private type with the specified name.">指定した名前のプライベート型。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">指定された名前の型が、このモジュールの親アセンブリに存在します。  

または -  

 入れ子にされた型の属性は、入れ子になっていない型に対して設定されます。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name and the type attributes.">型名と型属性を指定して、<see langword="TypeBuilder" /> を構築します。</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">型の完全なパス。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attr" vsli:raw="The attributes of the defined type.">定義された型の属性。</param>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; created with all of the requested attributes.">要求された属性をすべて指定して作成された <see langword="TypeBuilder" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">指定された名前の型が、このモジュールの親アセンブリに存在します。  

または -  

 入れ子にされた型の属性は、入れ子になっていない型に対して設定されます。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given type name, its attributes, and the type that the defined type extends.">型名、属性、および定義された型によって拡張される型を指定して、<see langword="TypeBuilder" /> を構築します。</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">型の完全なパス。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attr" vsli:raw="The attribute to be associated with the type.">型に関連付ける属性。</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">定義された型を拡張する型。</param>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; created with all of the requested attributes.">要求された属性をすべて指定して作成された <see langword="TypeBuilder" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">指定された名前の型が、このモジュールの親アセンブリに存在します。  
 または  
 入れ子にされた型の属性は、入れ子になっていない型に対して設定されます。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name, the attributes, the type that the defined type extends, and the total size of the type.">型名、属性、定義された型によって拡張される型、および型の合計サイズを指定して、<see langword="TypeBuilder" /> を構築します。</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">型の完全なパス。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attr" vsli:raw="The attributes of the defined type.">定義された型の属性。</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">定義された型を拡張する型。</param>
      <param name="typesize" vsli:raw="The total size of the type.">型の合計サイズ。</param>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; object.">
        <see langword="TypeBuilder" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">指定された名前の型が、このモジュールの親アセンブリに存在します。  

または -  

 入れ子にされた型の属性は、入れ子になっていない型に対して設定されます。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name, the attributes, the type that the defined type extends, and the packing size of the type.">型名、属性、定義された型によって拡張される型、および型のパッキング サイズを指定して、<see langword="TypeBuilder" /> を構築します。</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">型の完全なパス。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attr" vsli:raw="The attributes of the defined type.">定義された型の属性。</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">定義された型を拡張する型。</param>
      <param name="packsize" vsli:raw="The packing size of the type.">型のパッキング サイズ。</param>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; object.">
        <see langword="TypeBuilder" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">指定された名前の型が、このモジュールの親アセンブリに存在します。  

または -  

 入れ子にされた型の属性は、入れ子になっていない型に対して設定されます。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name, attributes, the type that the defined type extends, the packing size of the defined type, and the total size of the defined type.">型名、属性、定義された型によって拡張される型、定義された型のパッキング サイズ、および定義された型の合計サイズを指定して、<see langword="TypeBuilder" /> を構築します。</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">型の完全なパス。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attr" vsli:raw="The attributes of the defined type.">定義された型の属性。</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">定義された型を拡張する型。</param>
      <param name="packingSize" vsli:raw="The packing size of the type.">型のパッキング サイズ。</param>
      <param name="typesize" vsli:raw="The total size of the type.">型の合計サイズ。</param>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; created with all of the requested attributes.">要求された属性をすべて指定して作成された <see langword="TypeBuilder" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">指定された名前の型が、このモジュールの親アセンブリに存在します。  

または -  

 入れ子にされた型の属性は、入れ子になっていない型に対して設定されます。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name, attributes, the type that the defined type extends, and the interfaces that the defined type implements.">型名、属性、定義された型によって拡張される型、および定義された型によって実装されるインターフェイスを指定して、<see langword="TypeBuilder" /> を構築します。</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">型の完全なパス。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attr" vsli:raw="The attributes to be associated with the type.">型に関連付ける属性。</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">定義された型を拡張する型。</param>
      <param name="interfaces" vsli:raw="The list of interfaces that the type implements.">型が実装するインターフェイスのリスト。</param>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; created with all of the requested attributes.">要求された属性をすべて指定して作成された <see langword="TypeBuilder" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">指定された名前の型が、このモジュールの親アセンブリに存在します。  

または -  

 入れ子にされた型の属性は、入れ子になっていない型に対して設定されます。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
      <summary vsli:raw="Defines an uninitialized data field in the .sdata section of the portable executable (PE) file.">ポータブル実行可能 (PE) ファイルの .sdata セクションの初期化されていないデータ フィールドを定義します。</summary>
      <param name="name" vsli:raw="The name used to refer to the data. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">データを参照するために使用する名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="size" vsli:raw="The size of the data field.">データ フィールドのサイズ。</param>
      <param name="attributes" vsli:raw="The attributes for the field.">フィールドの属性。</param>
      <returns vsli:raw="A field to reference the data.">データを参照するフィールド。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;size&quot; /&gt; is less than or equal to zero, or greater than or equal to 0x003f0000.">
        <paramref name="name" /> の長さが 0 です。  

または - 
<paramref name="size" /> が 0 以下か、0x003f0000 以上です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; has been previously called.">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> は以前に呼び出されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to the specified object.">対象のインスタンスが、指定したオブジェクトに等しいかどうかを示す値を返します。</summary>
      <param name="obj" vsli:raw="An object to compare with this instance, or &lt;see langword=&quot;null&quot; /&gt;.">対象のインスタンスと比較する対象のオブジェクト、または <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> がこのインスタンスの型および値に等しい場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.FullyQualifiedName">
      <summary vsli:raw="Gets a &lt;see langword=&quot;String&quot; /&gt; representing the fully qualified name and path to this module.">このモジュールの完全修飾名とパスを表す <see langword="String" /> を取得します。</summary>
      <returns vsli:raw="The fully qualified module name.">モジュールの完全修飾名。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary vsli:raw="Returns the named method on an array class.">配列クラスの名前付きメソッドを返します。</summary>
      <param name="arrayClass" vsli:raw="An array class.">配列クラス。</param>
      <param name="methodName" vsli:raw="The name of a method on the array class.">配列クラスのメソッドの名前。</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">メソッドの呼び出し規則。</param>
      <param name="returnType" vsli:raw="The return type of the method.">メソッドの戻り値の型。</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">メソッドのパラメーター型。</param>
      <returns vsli:raw="The named method on an array class.">配列クラスの名前付きメソッド。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;arrayClass&quot; /&gt; is not an array.">
        <paramref name="arrayClass" /> が配列ではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;arrayClass&quot; /&gt; or &lt;paramref name=&quot;methodName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="arrayClass" /> または <paramref name="methodName" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">現在の <see cref="T:System.Reflection.Emit.ModuleBuilder" /> に適用されたカスタム属性をすべて返します。</summary>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">この型のオブジェクトでは、この引数は無視されます。</param>
      <returns vsli:raw="An array that contains the custom attributes; the array is empty if there are no attributes.">カスタム属性を含む配列。属性がない場合、配列は空です。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;, and that derive from a specified attribute type.">現在の <see cref="T:System.Reflection.Emit.ModuleBuilder" /> に適用されており、指定された属性の型から派生するすべてのカスタム属性を返します。</summary>
      <param name="attributeType" vsli:raw="The base type from which attributes derive.">属性の派生元となる基本型。</param>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">この型のオブジェクトでは、この引数は無視されます。</param>
      <returns vsli:raw="An array that contains the custom attributes that are derived, at any level, from &lt;paramref name=&quot;attributeType&quot; /&gt;; the array is empty if there are no such attributes.">
        <paramref name="attributeType" /> の任意のレベルから派生したカスタム属性を含む配列。そのような属性がない場合、配列は空です。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is not a &lt;see cref=&quot;T:System.Type&quot; /&gt; object supplied by the runtime. For example, &lt;paramref name=&quot;attributeType&quot; /&gt; is a &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object.">
        <paramref name="attributeType" />は、ランタイムによって提供された <see cref="T:System.Type" /> オブジェクトではありません。 たとえば、<paramref name="attributeType" /> は <see cref="T:System.Reflection.Emit.TypeBuilder" /> オブジェクトです。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributesData">
      <summary vsli:raw="Returns information about the attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;, expressed as &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects.">現在の <see cref="T:System.Reflection.Emit.ModuleBuilder" /> に適用されている属性に関する情報を、<see cref="T:System.Reflection.CustomAttributeData" /> オブジェクトとして返します。</summary>
      <returns vsli:raw="A generic list of &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects representing data about the attributes that have been applied to the current module.">現在のモジュールに適用されている属性に関するデータを表す <see cref="T:System.Reflection.CustomAttributeData" /> オブジェクトのジェネリック リスト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns a module-level field, defined in the .sdata region of the portable executable (PE) file, that has the specified name and binding attributes.">移植可能な実行可能 (PE) ファイルの .sdata セクションに定義されている、指定した名前とバインディング属性を持つモジュール レベルのフィールドを返します。</summary>
      <param name="name" vsli:raw="The field name.">フィールド名。</param>
      <param name="bindingAttr" vsli:raw="A combination of the &lt;see langword=&quot;BindingFlags&quot; /&gt; bit flags used to control the search.">検索を制御するために使用される <see langword="BindingFlags" /> ビット フラグの組み合わせ。</param>
      <returns vsli:raw="A field that has the specified name and binding attributes, or &lt;see langword=&quot;null&quot; /&gt; if the field does not exist.">指定した名前とバインディング属性を持つフィールド。フィールドが存在しない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;name&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all fields defined in the .sdata region of the portable executable (PE) file that match the specified binding flags.">移植可能な実行可能 (PE) ファイルの .sdata セクションに定義されている、指定したバインディング フラグに一致するすべてのフィールドを返します。</summary>
      <param name="bindingFlags" vsli:raw="A combination of the &lt;see langword=&quot;BindingFlags&quot; /&gt; bit flags used to control the search.">検索を制御するために使用される <see langword="BindingFlags" /> ビット フラグの組み合わせ。</param>
      <returns vsli:raw="An array of fields that match the specified flags; the array is empty if no such fields exist.">指定したフラグに一致するフィールドの配列。このようなフィールドが存在しない場合、配列は空になります。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;name&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">このインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the methods that have been defined at the module level for the current &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;, and that match the specified binding flags.">現在の <see cref="T:System.Reflection.Emit.ModuleBuilder" /> に対してモジュール レベルで定義され、指定したバインディング フラグに一致するすべてのメソッドを返します。</summary>
      <param name="bindingFlags" vsli:raw="A combination of &lt;see langword=&quot;BindingFlags&quot; /&gt; bit flags used to control the search.">検索を制御するために使用される <see langword="BindingFlags" /> ビット フラグの組み合わせ。</param>
      <returns vsli:raw="An array that contains all the module-level methods that match &lt;paramref name=&quot;bindingFlags&quot; /&gt;.">
        <paramref name="bindingFlags" /> に一致するすべてのモジュール レベルのメソッドを含む配列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)">
      <summary vsli:raw="Gets a pair of values indicating the nature of the code in a module and the platform targeted by the module.">モジュール内のコードの性質およびモジュールの対象プラットフォームを示す値のペアを取得します。</summary>
      <param name="peKind" vsli:raw="When this method returns, a combination of the &lt;see cref=&quot;T:System.Reflection.PortableExecutableKinds&quot; /&gt; values indicating the nature of the code in the module.">このメソッドから制御が戻る場合、モジュール内のコードの性質を示す <see cref="T:System.Reflection.PortableExecutableKinds" /> 値の組み合わせ。</param>
      <param name="machine" vsli:raw="When this method returns, one of the &lt;see cref=&quot;T:System.Reflection.ImageFileMachine&quot; /&gt; values indicating the platform targeted by the module.">このメソッドから制御が戻る場合、モジュールの対象プラットフォームを示す <see cref="T:System.Reflection.ImageFileMachine" /> 値の 1 つ。</param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String)">
      <summary vsli:raw="Gets the named type defined in the module.">このモジュールで定義されている名前付きの型を取得します。</summary>
      <param name="className" vsli:raw="The name of the &lt;see cref=&quot;T:System.Type&quot; /&gt; to get.">取得する <see cref="T:System.Type" /> の名前。</param>
      <returns vsli:raw="The requested type, if the type is defined in this module; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">型がこのモジュールで定義されている場合は要求された型。それ以外の場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;className&quot; /&gt; is zero or is greater than 1023.">
        <paramref name="className" /> の長さが 0 か、または 1023 を超えています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;className&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="className" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The requested &lt;see cref=&quot;T:System.Type&quot; /&gt; is non-public and the caller does not have &lt;see cref=&quot;T:System.Security.Permissions.ReflectionPermission&quot; /&gt; to reflect non-public objects outside the current assembly.">要求された <see cref="T:System.Type" /> がパブリックではなく、呼び出し元には、現在のアセンブリ外の非パブリック オブジェクトをリフレクトするための <see cref="T:System.Security.Permissions.ReflectionPermission" /> がありません。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException" vsli:raw="A class initializer is invoked and throws an exception.">クラス初期化子が呼び出され、例外をスローします。</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="An error is encountered while loading the &lt;see cref=&quot;T:System.Type&quot; /&gt;.">
        <see cref="T:System.Type" /> の読み込み中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean)">
      <summary vsli:raw="Gets the named type defined in the module, optionally ignoring the case of the type name.">オプションで型名の大文字小文字の区別を無視して、モジュールで定義されている名前付きの型を取得します。</summary>
      <param name="className" vsli:raw="The name of the &lt;see cref=&quot;T:System.Type&quot; /&gt; to get.">取得する <see cref="T:System.Type" /> の名前。</param>
      <param name="ignoreCase" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the search is case-insensitive. If &lt;see langword=&quot;false&quot; /&gt;, the search is case-sensitive.">
        <see langword="true" /> の場合、検索では、大文字と小文字を区別しません。 <see langword="false" /> の場合、検索では、大文字と小文字が区別されます。</param>
      <returns vsli:raw="The requested type, if the type is defined in this module; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">型がこのモジュールで定義されている場合は要求された型。それ以外の場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;className&quot; /&gt; is zero or is greater than 1023.">
        <paramref name="className" /> の長さが 0 か、または 1023 を超えています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;className&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="className" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The requested &lt;see cref=&quot;T:System.Type&quot; /&gt; is non-public and the caller does not have &lt;see cref=&quot;T:System.Security.Permissions.ReflectionPermission&quot; /&gt; to reflect non-public objects outside the current assembly.">要求された <see cref="T:System.Type" /> がパブリックではなく、呼び出し元には、現在のアセンブリ外の非パブリック オブジェクトをリフレクトするための <see cref="T:System.Security.Permissions.ReflectionPermission" /> がありません。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException" vsli:raw="A class initializer is invoked and throws an exception.">クラス初期化子が呼び出され、例外をスローします。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean,System.Boolean)">
      <summary vsli:raw="Gets the named type defined in the module, optionally ignoring the case of the type name. Optionally throws an exception if the type is not found.">オプションで型名の大文字小文字の区別を無視して、モジュールで定義されている名前付きの型を取得します。 型が見つからないときに例外をスローすることもできます。</summary>
      <param name="className" vsli:raw="The name of the &lt;see cref=&quot;T:System.Type&quot; /&gt; to get.">取得する <see cref="T:System.Type" /> の名前。</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to throw an exception if the type cannot be found; &lt;see langword=&quot;false&quot; /&gt; to return &lt;see langword=&quot;null&quot; /&gt;.">型が見つからなかったときに例外をスローする場合は <see langword="true" />。<see langword="false" /> を返す場合は <see langword="null" />。</param>
      <param name="ignoreCase" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the search is case-insensitive. If &lt;see langword=&quot;false&quot; /&gt;, the search is case-sensitive.">
        <see langword="true" /> の場合、検索では、大文字と小文字を区別しません。 <see langword="false" /> の場合、検索では、大文字と小文字が区別されます。</param>
      <returns vsli:raw="The specified type, if the type is declared in this module; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">型がこのモジュールで宣言されている場合は、指定した型。それ以外の場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;className&quot; /&gt; is zero or is greater than 1023.">
        <paramref name="className" /> の長さが 0 か、または 1023 を超えています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;className&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="className" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The requested &lt;see cref=&quot;T:System.Type&quot; /&gt; is non-public and the caller does not have &lt;see cref=&quot;T:System.Security.Permissions.ReflectionPermission&quot; /&gt; to reflect non-public objects outside the current assembly.">要求された <see cref="T:System.Type" /> がパブリックではなく、呼び出し元には、現在のアセンブリ外の非パブリック オブジェクトをリフレクトするための <see cref="T:System.Security.Permissions.ReflectionPermission" /> がありません。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException" vsli:raw="A class initializer is invoked and throws an exception.">クラス初期化子が呼び出され、例外をスローします。</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="&lt;paramref name=&quot;throwOnError&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and the specified type is not found.">
        <paramref name="throwOnError" /> が <see langword="true" /> で、指定した型が見つかりません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetTypes">
      <summary vsli:raw="Returns all the classes defined within this module.">このモジュールで定義されているすべてのクラスを返します。</summary>
      <returns vsli:raw="An array that contains the types defined within the module that is reflected by this instance.">このインスタンスによってリフレクトされたモジュールで定義されている型を格納している配列。</returns>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException" vsli:raw="One or more classes in a module could not be loaded.">モジュールの 1 つまたは複数のクラスを読み込むことができませんでした。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Returns a value that indicates whether the specified attribute type has been applied to this module.">指定された属性型がこのモジュールに適用されているかどうかを示す値を返します。</summary>
      <param name="attributeType" vsli:raw="The type of custom attribute to test for.">テストするカスタム属性の型。</param>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">この型のオブジェクトでは、この引数は無視されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instances of &lt;paramref name=&quot;attributeType&quot; /&gt; have been applied to this module; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このモジュールに <paramref name="attributeType" /> のインスタンスが 1 つ以上適用されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is not a &lt;see cref=&quot;T:System.Type&quot; /&gt; object supplied by the runtime. For example, &lt;paramref name=&quot;attributeType&quot; /&gt; is a &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object.">
        <paramref name="attributeType" />は、ランタイムによって提供された <see cref="T:System.Type" /> オブジェクトではありません。 たとえば、<paramref name="attributeType" /> は <see cref="T:System.Reflection.Emit.TypeBuilder" /> オブジェクトです。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.IsResource">
      <summary vsli:raw="Gets a value indicating whether the object is a resource.">オブジェクトがリソースかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is a resource; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">オブジェクトがリソースである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.MDStreamVersion">
      <summary vsli:raw="Gets the metadata stream version.">メタデータ ストリーム バージョンを取得します。</summary>
      <returns vsli:raw="A 32-bit integer representing the metadata stream version. The high-order two bytes represent the major version number, and the low-order two bytes represent the minor version number.">メタデータ ストリーム バージョンを表す 32 ビットの整数。 上位 2 バイトはメジャー バージョン番号を表し、下位 2 バイトはマイナー バージョン番号を表します。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.MetadataToken">
      <summary vsli:raw="Gets a token that identifies the current dynamic module in metadata.">メタデータ内の現在の動的モジュールを識別するトークンを取得します。</summary>
      <returns vsli:raw="An integer token that identifies the current module in metadata.">メタデータ内の現在モジュールを識別する整数トークン。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.ModuleVersionId">
      <summary vsli:raw="Gets a universally unique identifier (UUID) that can be used to distinguish between two versions of a module.">モジュールの 2 つのバージョンを区別するために使用できる汎用一意識別子 (UUID) を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; that can be used to distinguish between two versions of a module.">モジュールの 2 つのバージョンを区別するために使用できる <see cref="T:System.Guid" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.Name">
      <summary vsli:raw="A string that indicates that this is an in-memory module.">これがメモリ内モジュールであることを示す文字列。</summary>
      <returns vsli:raw="Text that indicates that this is an in-memory module.">これがメモリ内モジュールであることを示すテキスト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveField(System.Int32,System.Type[],System.Type[])">
      <summary vsli:raw="Returns the field identified by the specified metadata token, in the context defined by the specified generic type parameters.">指定したジェネリック型パラメーターで定義されたコンテキストの、指定したメタデータ トークンで識別されるフィールドを返します。</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a field in the module.">モジュール内のフィールドを識別するメタデータ トークン。</param>
      <param name="genericTypeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the type where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that type is not generic.">トークンがスコープ内にある型のジェネリック型引数を表す <see cref="T:System.Type" /> オブジェクトの配列。その型がジェネリックではない場合は <see langword="null" />。</param>
      <param name="genericMethodArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the method where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that method is not generic.">トークンがスコープ内にあるメソッドのジェネリック型引数を表す <see cref="T:System.Type" /> オブジェクトの配列。そのメソッドがジェネリックではない場合は <see langword="null" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; object representing the field that is identified by the specified metadata token.">指定したメタデータ トークンで識別されるフィールドを表す <see cref="T:System.Reflection.FieldInfo" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a field in the scope of the current module.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; identifies a field whose parent &lt;see langword=&quot;TypeSpec&quot; /&gt; has a signature containing element type &lt;see langword=&quot;var&quot; /&gt; (a type parameter of a generic type) or &lt;see langword=&quot;mvar&quot; /&gt; (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of &lt;paramref name=&quot;genericTypeArguments&quot; /&gt; and &lt;paramref name=&quot;genericMethodArguments&quot; /&gt;.">
        <paramref name="metadataToken" /> は、現在のモジュールのスコープに含まれるフィールドのトークンではありません。  

または - 
<paramref name="metadataToken" /> は、親 <see langword="TypeSpec" /> が要素型 <see langword="var" /> (ジェネリック型の型パラメーター) または <see langword="mvar" /> (ジェネリック メソッドの型パラメーター) を含む署名を持つフィールドを識別しますが、必要なジェネリック型引数が <paramref name="genericTypeArguments" /> と <paramref name="genericMethodArguments" /> の両方またはいずれかに提供されていません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> は、現在のモジュールのスコープで有効なトークンではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveMember(System.Int32,System.Type[],System.Type[])">
      <summary vsli:raw="Returns the type or member identified by the specified metadata token, in the context defined by the specified generic type parameters.">指定したジェネリック型パラメーターで定義されたコンテキストの、指定したメタデータ トークンで識別される型またはメンバーを返します。</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a type or member in the module.">モジュール内の型またはメンバーを識別するメタデータ トークン。</param>
      <param name="genericTypeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the type where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that type is not generic.">トークンがスコープ内にある型のジェネリック型引数を表す <see cref="T:System.Type" /> オブジェクトの配列。その型がジェネリックではない場合は <see langword="null" />。</param>
      <param name="genericMethodArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the method where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that method is not generic.">トークンがスコープ内にあるメソッドのジェネリック型引数を表す <see cref="T:System.Type" /> オブジェクトの配列。そのメソッドがジェネリックではない場合は <see langword="null" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; object representing the type or member that is identified by the specified metadata token.">指定したメタデータ トークンで識別される型またはメンバーを表す <see cref="T:System.Reflection.MemberInfo" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a type or member in the scope of the current module.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; is a &lt;see langword=&quot;MethodSpec&quot; /&gt; or &lt;see langword=&quot;TypeSpec&quot; /&gt; whose signature contains element type &lt;see langword=&quot;var&quot; /&gt; (a type parameter of a generic type) or &lt;see langword=&quot;mvar&quot; /&gt; (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of &lt;paramref name=&quot;genericTypeArguments&quot; /&gt; and &lt;paramref name=&quot;genericMethodArguments&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; identifies a property or event.">
        <paramref name="metadataToken" /> は、現在のモジュールのスコープ内の型またはメンバーのトークンではありません。  

または - 
<paramref name="metadataToken" /> は、要素型 <see langword="var" /> (ジェネリック型の型パラメーター) または <see langword="mvar" /> (ジェネリック メソッドの型パラメーター) を含むシグネチャを持つ <see langword="MethodSpec" /> または <see langword="TypeSpec" /> ですが、必要なジェネリック型の引数が <paramref name="genericTypeArguments" /> と <paramref name="genericMethodArguments" /> の両方またはいずれかに提供されていません。  

または 
 <paramref name="metadataToken" /> は、プロパティまたはイベントを識別します。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> は、現在のモジュールのスコープで有効なトークンではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveMethod(System.Int32,System.Type[],System.Type[])">
      <summary vsli:raw="Returns the method or constructor identified by the specified metadata token, in the context defined by the specified generic type parameters.">指定したジェネリック型パラメーターで定義されたコンテキストの、指定したメタデータ トークンで識別されるメソッドまたはコンストラクターを返します。</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a method or constructor in the module.">メソッドまたはモジュール内のコンス トラクターを識別するメタデータ トークン。</param>
      <param name="genericTypeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the type where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that type is not generic.">トークンがスコープ内にある型のジェネリック型引数を表す <see cref="T:System.Type" /> オブジェクトの配列。その型がジェネリックではない場合は <see langword="null" />。</param>
      <param name="genericMethodArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the method where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that method is not generic.">トークンがスコープ内にあるメソッドのジェネリック型引数を表す <see cref="T:System.Type" /> オブジェクトの配列。そのメソッドがジェネリックではない場合は <see langword="null" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodBase&quot; /&gt; object representing the method that is identified by the specified metadata token.">指定したメタデータ トークンで識別されるメソッドを表す <see cref="T:System.Reflection.MethodBase" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a method or constructor in the scope of the current module.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; is a &lt;see langword=&quot;MethodSpec&quot; /&gt; whose signature contains element type &lt;see langword=&quot;var&quot; /&gt; (a type parameter of a generic type) or &lt;see langword=&quot;mvar&quot; /&gt; (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of &lt;paramref name=&quot;genericTypeArguments&quot; /&gt; and &lt;paramref name=&quot;genericMethodArguments&quot; /&gt;.">
        <paramref name="metadataToken" /> は、現在のモジュールのスコープに含まれるメソッドまたはコンストラクターのトークンではありません。  

または - 
<paramref name="metadataToken" /> は、要素型 <see langword="var" /> (ジェネリック型の型パラメーター) または <see langword="mvar" /> (ジェネリック メソッドの型パラメーター) を含むシグネチャを持つ <see langword="MethodSpec" /> ですが、必要なジェネリック型引数が <paramref name="genericTypeArguments" /> と <paramref name="genericMethodArguments" />.の両方またはいずれかに提供されていません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> は、現在のモジュールのスコープで有効なトークンではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveSignature(System.Int32)">
      <summary vsli:raw="Returns the signature blob identified by a metadata token.">メタデータ トークンで識別されるシグネチャ BLOB を返します。</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a signature in the module.">モジュール内のシグネチャを識別するメタデータ トークン。</param>
      <returns vsli:raw="An array of bytes representing the signature blob.">シグネチャ BLOB を表すバイトの配列。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid &lt;see langword=&quot;MemberRef&quot; /&gt;, &lt;see langword=&quot;MethodDef&quot; /&gt;, &lt;see langword=&quot;TypeSpec&quot; /&gt;, signature, or &lt;see langword=&quot;FieldDef&quot; /&gt; token in the scope of the current module.">
        <paramref name="metadataToken" /> は、現在のモジュールのスコープで有効な <see langword="MemberRef" />、<see langword="MethodDef" />、<see langword="TypeSpec" />、シグネチャ、または <see langword="FieldDef" /> トークンではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> は、現在のモジュールのスコープで有効なトークンではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveString(System.Int32)">
      <summary vsli:raw="Returns the string identified by the specified metadata token.">指定したメタデータ トークンで識別される文字列を返します。</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a string in the string heap of the module.">モジュールの文字列ヒープ内の文字列を識別するメタデータ トークン。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing a string value from the metadata string heap.">メタデータの文字列ヒープの文字列値を格納する <see cref="T:System.String" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a string in the scope of the current module.">
        <paramref name="metadataToken" /> は、現在のモジュールのスコープ内の文字列のトークンではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> は、現在のモジュールのスコープで有効なトークンではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveType(System.Int32,System.Type[],System.Type[])">
      <summary vsli:raw="Returns the type identified by the specified metadata token, in the context defined by the specified generic type parameters.">指定したジェネリック型パラメーターで定義されたコンテキストの、指定したメタデータ トークンで識別される型を返します。</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a type in the module.">モジュール内の型を識別するメタデータ トークン。</param>
      <param name="genericTypeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the type where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that type is not generic.">トークンがスコープ内にある型のジェネリック型引数を表す <see cref="T:System.Type" /> オブジェクトの配列。その型がジェネリックではない場合は <see langword="null" />。</param>
      <param name="genericMethodArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the method where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that method is not generic.">トークンがスコープ内にあるメソッドのジェネリック型引数を表す <see cref="T:System.Type" /> オブジェクトの配列。そのメソッドがジェネリックではない場合は <see langword="null" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the type that is identified by the specified metadata token.">指定したメタデータ トークンで識別される型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a type in the scope of the current module.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; is a &lt;see langword=&quot;TypeSpec&quot; /&gt; whose signature contains element type &lt;see langword=&quot;var&quot; /&gt; (a type parameter of a generic type) or &lt;see langword=&quot;mvar&quot; /&gt; (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of &lt;paramref name=&quot;genericTypeArguments&quot; /&gt; and &lt;paramref name=&quot;genericMethodArguments&quot; /&gt;.">
        <paramref name="metadataToken" /> は、現在のモジュールのスコープに含まれる型のトークンではありません。  
または 
 <paramref name="metadataToken" /> は、要素型 <see langword="var" /> (ジェネリック型の型パラメーター) または <see langword="mvar" /> (ジェネリック メソッドの型パラメーター) を含むシグネチャを持つ <see langword="TypeSpec" /> ですが、必要なジェネリック型引数が <paramref name="genericTypeArguments" /> と <paramref name="genericMethodArguments" />.の両方またはいずれかに提供されていません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> は、現在のモジュールのスコープで有効なトークンではありません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.ScopeName">
      <summary vsli:raw="Gets a string that represents the name of the dynamic module.">動的モジュールの名前を表す文字列を取得します。</summary>
      <returns vsli:raw="The name of the dynamic module.">動的アセンブリの名前。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Applies a custom attribute to this module by using a specified binary large object (BLOB) that represents the attribute.">属性を表す指定したバイナリ ラージ オブジェクト (BLOB) を使用して、カスタム属性をこのモジュールに適用します。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">カスタム属性のコンストラクター。</param>
      <param name="binaryAttribute" vsli:raw="A byte BLOB representing the attribute.">属性を表すバイト BLOB。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> または <paramref name="binaryAttribute" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Applies a custom attribute to this module by using a custom attribute builder.">カスタム属性ビルダーを使用して、カスタム属性をこのモジュールに適用します。</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class that specifies the custom attribute to apply.">適用するカスタム属性を指定するためのヘルパー クラスのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> は <see langword="null" />です。</exception>
    </member>
    <member name="T:System.Reflection.Emit.PropertyBuilder">
      <summary vsli:raw="Defines the properties for a type.">型のプロパティを定義します。</summary>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Adds one of the other methods associated with this property.">このプロパティに関連付ける別のメソッドを追加します。</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the other method.">他のメソッドを表す <see langword="MethodBuilder" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> が、外側の型に対して呼び出されました。</exception>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Attributes">
      <summary vsli:raw="Gets the attributes for this property.">このプロパティの属性を取得します。</summary>
      <returns vsli:raw="Attributes of this property.">このプロパティの属性。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanRead">
      <summary vsli:raw="Gets a value indicating whether the property can be read.">プロパティを読み取ることができるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this property can be read; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このプロパティを読み取ることができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanWrite">
      <summary vsli:raw="Gets a value indicating whether the property can be written to.">プロパティに書き込むことができるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this property can be written to; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このプロパティに書き込むことができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.DeclaringType">
      <summary vsli:raw="Gets the class that declares this member.">このメンバーを宣言するクラスを取得します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object for the class that declares this member.">このメンバーを宣言するクラスの <see langword="Type" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)">
      <summary vsli:raw="Returns an array of the public and non-public &lt;see langword=&quot;get&quot; /&gt; and &lt;see langword=&quot;set&quot; /&gt; accessors on this property.">このプロパティのパブリックおよび非パブリックな <see langword="get" /> アクセサーと <see langword="set" /> アクセサーの配列を返します。</summary>
      <param name="nonPublic" vsli:raw="Indicates whether non-public methods should be returned in the &lt;see langword=&quot;MethodInfo&quot; /&gt; array. &lt;see langword=&quot;true&quot; /&gt; if non-public methods are to be included; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="MethodInfo" /> 配列で非パブリック メソッドを返すかどうかを示します。 非パブリック メソッドを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns vsli:raw="An array of type &lt;see langword=&quot;MethodInfo&quot; /&gt; containing the matching public or non-public accessors, or an empty array if matching accessors do not exist on this property.">一致するパブリック アクセサーまたは非パブリック アクセサーを格納している <see langword="MethodInfo" /> 型の配列。このプロパティに一致するアクセサーがない場合は、空の配列。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">このメソッドはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns an array of all the custom attributes for this property.">このプロパティのすべてのカスタム属性の配列を返します。</summary>
      <param name="inherit" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, walks up this property's inheritance chain to find the custom attributes.">このプロパティの継承チェーンを検索して、カスタム属性を見つける場合は <see langword="true" />。</param>
      <returns vsli:raw="An array of all the custom attributes.">すべてのカスタム属性の配列。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">このメソッドはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns an array of custom attributes identified by &lt;see cref=&quot;T:System.Type&quot; /&gt;.">
        <see cref="T:System.Type" /> によって識別されるカスタム属性の配列を返します。</summary>
      <param name="attributeType" vsli:raw="An array of custom attributes identified by type.">型により識別されるカスタム属性の配列。</param>
      <param name="inherit" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, walks up this property's inheritance chain to find the custom attributes.">このプロパティの継承チェーンを検索して、カスタム属性を見つける場合は <see langword="true" />。</param>
      <returns vsli:raw="An array of custom attributes defined on this reflected member, or &lt;see langword=&quot;null&quot; /&gt; if no attributes are defined on this member.">リフレクションされたメンバーに定義されているカスタム属性の配列。このメンバーに定義されている属性がない場合は <see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">このメソッドはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)">
      <summary vsli:raw="Returns the public and non-public get accessor for this property.">このプロパティのパブリックおよび非パブリックな get アクセサーを返します。</summary>
      <param name="nonPublic" vsli:raw="Indicates whether non-public get accessors should be returned. &lt;see langword=&quot;true&quot; /&gt; if non-public methods are to be included; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">非パブリックな get アクセサーを返すかどうかを示します。 非パブリック メソッドを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns vsli:raw="A &lt;see langword=&quot;MethodInfo&quot; /&gt; object representing the get accessor for this property, if &lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;. Returns &lt;see langword=&quot;null&quot; /&gt; if &lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt; and the get accessor is non-public, or if &lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; but no get accessors exist.">
        <paramref name="nonPublic" /> が <see langword="MethodInfo" /> の場合は、このプロパティの get アクセサーを表す <see langword="true" /> オブジェクト。 <paramref name="nonPublic" /> が <see langword="null" /> で get アクセサーが非パブリックの場合、または <paramref name="nonPublic" /> が <see langword="false" /> でも get アクセサーがない場合は、<see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetIndexParameters">
      <summary vsli:raw="Returns an array of all the index parameters for the property.">プロパティのすべてのインデックス パラメーターの配列を返します。</summary>
      <returns vsli:raw="An array of type &lt;see langword=&quot;ParameterInfo&quot; /&gt; containing the parameters for the indexes.">インデックスのパラメーターを格納している <see langword="ParameterInfo" /> 型の配列。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">このメソッドはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
      <summary vsli:raw="Returns the set accessor for this property.">このプロパティの set アクセサーを返します。</summary>
      <param name="nonPublic" vsli:raw="Indicates whether the accessor should be returned if it is non-public. &lt;see langword=&quot;true&quot; /&gt; if non-public methods are to be included; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">パブリックでないアクセサーの場合に、アクセサーを返すかどうかを示します。 非パブリック メソッドを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns vsli:raw="The property's &lt;see langword=&quot;Set&quot; /&gt; method, or &lt;see langword=&quot;null&quot; /&gt;, as shown in the following table.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Condition&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object representing the Set method for this property.&lt;/term&gt;&lt;description&gt; The set accessor is public.  &#xA;  &#xA; &lt;paramref name=&quot;nonPublic&quot; /&gt; is true and non-public methods can be returned.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; null&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;nonPublic&quot; /&gt; is true, but the property is read-only.  &#xA;  &#xA; &lt;paramref name=&quot;nonPublic&quot; /&gt; is false and the set accessor is non-public.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">次の表に示すように、プロパティの <see langword="Set" /> メソッド、または <see langword="null" />。  
  [値] 
  条件 
  このプロパティの set メソッドを表す <see cref="T:System.Reflection.MethodInfo" /> オブジェクト。  

  set アクセサーがパブリック。  

 <paramref name="nonPublic" /> が true で、非パブリック メソッドを返すことができる。  

  null 
 <paramref name="nonPublic" /> が true で、プロパティが読み取り専用。  

 <paramref name="nonPublic" /> が false で set アクセサーが非パブリック。</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
      <summary vsli:raw="Gets the value of the indexed property by calling the property's getter method.">プロパティの取得側メソッドを呼び出して、インデックス付きプロパティの値を取得します。</summary>
      <param name="obj" vsli:raw="The object whose property value will be returned.">プロパティ値が返されるオブジェクト。</param>
      <param name="index" vsli:raw="Optional index values for indexed properties. This value should be &lt;see langword=&quot;null&quot; /&gt; for non-indexed properties.">インデックス付きプロパティのインデックス値 (省略可能)。 インデックス付きでないプロパティの場合は、この値を <see langword="null" /> にする必要があります。</param>
      <returns vsli:raw="The value of the specified indexed property.">指定したインデックス付きプロパティの値。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">このメソッドはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Gets the value of a property having the specified binding, index, and &lt;see langword=&quot;CultureInfo&quot; /&gt;.">指定したバインディング、インデックス、および <see langword="CultureInfo" /> のプロパティの値を取得します。</summary>
      <param name="obj" vsli:raw="The object whose property value will be returned.">プロパティ値が返されるオブジェクト。</param>
      <param name="invokeAttr" vsli:raw="The invocation attribute. This must be a bit flag from &lt;see langword=&quot;BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;CreateInstance&quot; /&gt;, &lt;see langword=&quot;Static&quot; /&gt;, &lt;see langword=&quot;GetField&quot; /&gt;, &lt;see langword=&quot;SetField&quot; /&gt;, &lt;see langword=&quot;GetProperty&quot; /&gt;, or &lt;see langword=&quot;SetProperty&quot; /&gt;. A suitable invocation attribute must be specified. If a static member is to be invoked, the &lt;see langword=&quot;Static&quot; /&gt; flag of &lt;see langword=&quot;BindingFlags&quot; /&gt; must be set.">呼び出し属性。 <see langword="BindingFlags" /> のビット フラグ <see langword="InvokeMethod" />、<see langword="CreateInstance" />、<see langword="Static" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" />、または <see langword="SetProperty" /> にする必要があります。 適切な呼び出し属性を指定する必要があります。 静的メンバーを呼び出す場合は、<see langword="Static" /> の <see langword="BindingFlags" /> フラグを設定する必要があります。</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If &lt;paramref name=&quot;binder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used.">バインディング、引数型の強制変換、メンバーの呼び出し、および、リフレクションを使用した <see langword="MemberInfo" /> オブジェクトの取得を有効にするオブジェクト。 <paramref name="binder" /> が <see langword="null" /> の場合は、既定のバインダーが使用されます。</param>
      <param name="index" vsli:raw="Optional index values for indexed properties. This value should be &lt;see langword=&quot;null&quot; /&gt; for non-indexed properties.">インデックス付きプロパティのインデックス値 (省略可能)。 インデックス付きでないプロパティの場合は、この値を <see langword="null" /> にする必要があります。</param>
      <param name="culture" vsli:raw="The &lt;see langword=&quot;CultureInfo&quot; /&gt; object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the &lt;see langword=&quot;CultureInfo.Parent&quot; /&gt; method will be called successively in search of a match. If this value is &lt;see langword=&quot;null&quot; /&gt;, the &lt;see langword=&quot;CultureInfo&quot; /&gt; is obtained from the &lt;see langword=&quot;CultureInfo.CurrentUICulture&quot; /&gt; property.">リソースのローカライズ対象のカルチャを表す <see langword="CultureInfo" /> オブジェクト。 リソースがこのカルチャ用にローカライズされていない場合は、一致する対象を検索するために <see langword="CultureInfo.Parent" /> メソッドが連続して呼び出されます。 この値が <see langword="null" /> の場合は、<see langword="CultureInfo" /> プロパティから <see langword="CultureInfo.CurrentUICulture" /> が取得されます。</param>
      <returns vsli:raw="The property value for &lt;paramref name=&quot;obj&quot; /&gt;.">
        <paramref name="obj" /> のプロパティ値。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">このメソッドはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Indicates whether one or more instance of &lt;paramref name=&quot;attributeType&quot; /&gt; is defined on this property.">このプロパティに <paramref name="attributeType" /> のインスタンスが 1 つ以上定義されているかどうかを示します。</summary>
      <param name="attributeType" vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object to which the custom attributes are applied.">カスタム属性が適用される <see langword="Type" /> オブジェクト。</param>
      <param name="inherit" vsli:raw="Specifies whether to walk up this property's inheritance chain to find the custom attributes.">このプロパティの継承チェーンを検索して、カスタム属性を見つけるかどうかを指定します。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instance of &lt;paramref name=&quot;attributeType&quot; /&gt; is defined on this property; otherwise &lt;see langword=&quot;false&quot; /&gt;.">このプロパティに <paramref name="attributeType" /> のインスタンスが 1 つ以上定義されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">このメソッドはサポートされていません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Module">
      <summary vsli:raw="Gets the module in which the type that declares the current property is being defined.">現在のプロパティを宣言している型が定義されているモジュールを取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; in which the type that declares the current property is defined.">現在のプロパティを宣言している型が定義されている <see cref="T:System.Reflection.Module" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Name">
      <summary vsli:raw="Gets the name of this member.">このメンバーの名前を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of this member.">このメンバーの名前を格納している <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.PropertyType">
      <summary vsli:raw="Gets the type of the field of this property.">このプロパティのフィールドの型を取得します。</summary>
      <returns vsli:raw="The type of this property.">このプロパティの型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.ReflectedType">
      <summary vsli:raw="Gets the class object that was used to obtain this instance of &lt;see langword=&quot;MemberInfo&quot; /&gt;.">
        <see langword="MemberInfo" /> のこのインスタンスを取得するために使用したクラス オブジェクトを取得します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object through which this &lt;see langword=&quot;MemberInfo&quot; /&gt; object was obtained.">この <see langword="Type" /> オブジェクトを取得するために使用した <see langword="MemberInfo" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
      <summary vsli:raw="Sets the default value of this property.">このプロパティの既定値を設定します。</summary>
      <param name="defaultValue" vsli:raw="The default value of this property.">このプロパティの既定値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> が、外側の型に対して呼び出されました。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The property is not one of the supported types.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of &lt;paramref name=&quot;defaultValue&quot; /&gt; does not match the type of the property.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property is of type &lt;see cref=&quot;T:System.Object&quot; /&gt; or other reference type, &lt;paramref name=&quot;defaultValue&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;, and the value cannot be assigned to the reference type.">プロパティが、サポートされている型のいずれでもありません。  
または 
<paramref name="defaultValue" /> の型がプロパティの型と一致しません。  

または - 
プロパティが <see cref="T:System.Object" /> 型または他の参照型であり、<paramref name="defaultValue" /> が <see langword="null" /> ではなく、値を参照型に割り当てることができません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute using a specified custom attribute blob.">指定されたカスタム属性 BLOB を使用して、カスタム属性を設定します。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">カスタム属性のコンストラクター。</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">属性を表すバイト blob。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> または <paramref name="binaryAttribute" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> が、外側の型に対して呼び出されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">カスタム属性ビルダーを使用して、カスタム属性を設定します。</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">カスタム属性を定義するヘルパー クラスのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="if &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> が、外側の型に対して呼び出されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method that gets the property value.">プロパティ値を取得するメソッドを設定します。</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method that gets the property value.">プロパティ値を取得するメソッドを表す <see langword="MethodBuilder" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> が、外側の型に対して呼び出されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method that sets the property value.">プロパティ値を設定するメソッドを設定します。</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method that sets the property value.">プロパティ値を設定するメソッドを表す <see langword="MethodBuilder" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> が、外側の型に対して呼び出されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
      <summary vsli:raw="Sets the value of the property with optional index values for index properties.">プロパティの値を設定します。インデックス付きプロパティの場合は、オプションでインデックス値を設定できます。</summary>
      <param name="obj" vsli:raw="The object whose property value will be set.">プロパティ値が設定されるオブジェクト。</param>
      <param name="value" vsli:raw="The new value for this property.">このプロパティの新しい値。</param>
      <param name="index" vsli:raw="Optional index values for indexed properties. This value should be &lt;see langword=&quot;null&quot; /&gt; for non-indexed properties.">インデックス付きプロパティのインデックス値 (省略可能)。 インデックス付きでないプロパティの場合は、この値を <see langword="null" /> にする必要があります。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">このメソッドはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Sets the property value for the given object to the given value.">指定したオブジェクトのプロパティ値に、指定した値を設定します。</summary>
      <param name="obj" vsli:raw="The object whose property value will be returned.">プロパティ値が返されるオブジェクト。</param>
      <param name="value" vsli:raw="The new value for this property.">このプロパティの新しい値。</param>
      <param name="invokeAttr" vsli:raw="The invocation attribute. This must be a bit flag from &lt;see langword=&quot;BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;CreateInstance&quot; /&gt;, &lt;see langword=&quot;Static&quot; /&gt;, &lt;see langword=&quot;GetField&quot; /&gt;, &lt;see langword=&quot;SetField&quot; /&gt;, &lt;see langword=&quot;GetProperty&quot; /&gt;, or &lt;see langword=&quot;SetProperty&quot; /&gt;. A suitable invocation attribute must be specified. If a static member is to be invoked, the &lt;see langword=&quot;Static&quot; /&gt; flag of &lt;see langword=&quot;BindingFlags&quot; /&gt; must be set.">呼び出し属性。 <see langword="BindingFlags" /> のビット フラグ <see langword="InvokeMethod" />、<see langword="CreateInstance" />、<see langword="Static" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" />、または <see langword="SetProperty" /> にする必要があります。 適切な呼び出し属性を指定する必要があります。 静的メンバーを呼び出す場合は、<see langword="Static" /> の <see langword="BindingFlags" /> フラグを設定する必要があります。</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If &lt;paramref name=&quot;binder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used.">バインディング、引数型の強制変換、メンバーの呼び出し、および、リフレクションを使用した <see langword="MemberInfo" /> オブジェクトの取得を有効にするオブジェクト。 <paramref name="binder" /> が <see langword="null" /> の場合は、既定のバインダーが使用されます。</param>
      <param name="index" vsli:raw="Optional index values for indexed properties. This value should be &lt;see langword=&quot;null&quot; /&gt; for non-indexed properties.">インデックス付きプロパティのインデックス値 (省略可能)。 インデックス付きでないプロパティの場合は、この値を <see langword="null" /> にする必要があります。</param>
      <param name="culture" vsli:raw="The &lt;see langword=&quot;CultureInfo&quot; /&gt; object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the &lt;see langword=&quot;CultureInfo.Parent&quot; /&gt; method will be called successively in search of a match. If this value is &lt;see langword=&quot;null&quot; /&gt;, the &lt;see langword=&quot;CultureInfo&quot; /&gt; is obtained from the &lt;see langword=&quot;CultureInfo.CurrentUICulture&quot; /&gt; property.">リソースのローカライズ対象のカルチャを表す <see langword="CultureInfo" /> オブジェクト。 リソースがこのカルチャ用にローカライズされていない場合は、一致する対象を検索するために <see langword="CultureInfo.Parent" /> メソッドが連続して呼び出されます。 この値が <see langword="null" /> の場合は、<see langword="CultureInfo" /> プロパティから <see langword="CultureInfo.CurrentUICulture" /> が取得されます。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">このメソッドはサポートされていません。</exception>
    </member>
    <member name="T:System.Reflection.Emit.TypeBuilder">
      <summary vsli:raw="Defines and creates new instances of classes during run time.">実行時のクラスの新しいインスタンスを定義し、作成します。</summary>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(System.Type)">
      <summary vsli:raw="Adds an interface that this type implements.">この型が実装するインターフェイスを追加します。</summary>
      <param name="interfaceType" vsli:raw="The interface that this type implements.">この型が実装するインターフェイス。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;interfaceType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="interfaceType" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Assembly">
      <summary vsli:raw="Retrieves the dynamic assembly that contains this type definition.">この型の定義を含む動的アセンブリを取得します。</summary>
      <returns vsli:raw="Read-only. Retrieves the dynamic assembly that contains this type definition.">読み取り専用。 この型の定義を含む動的アセンブリを取得します。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName">
      <summary vsli:raw="Returns the full name of this type qualified by the display name of the assembly.">アセンブリの表示名で修飾されたこの型の完全名を返します。</summary>
      <returns vsli:raw="Read-only. The full name of this type qualified by the display name of the assembly.">読み取り専用。 アセンブリの表示名で修飾されたこの型の完全名。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.BaseType">
      <summary vsli:raw="Retrieves the base type of this type.">この型の基本データ型を取得します。</summary>
      <returns vsli:raw="Read-only. Retrieves the base type of this type.">読み取り専用。 この型の基本データ型を取得します。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.CreateType">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the class. After defining fields and methods on the class, &lt;see langword=&quot;CreateType&quot; /&gt; is called in order to load its &lt;see langword=&quot;Type&quot; /&gt; object.">クラスの <see cref="T:System.Type" /> オブジェクトを作成します。 フィールドおよびメソッドをクラスで定義した後、<see langword="Type" /> オブジェクトを読みこむために <see langword="CreateType" /> が呼び出されます。</summary>
      <returns vsli:raw="Returns the new &lt;see cref=&quot;T:System.Type&quot; /&gt; object for this class.">このクラスの新しい <see cref="T:System.Type" /> オブジェクトを返します。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enclosing type has not been created.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is non-abstract and contains an abstract method.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is not an abstract class or an interface and has a method without a method body.">囲む型が作成されていません。  

または -  

 この型は非抽象であり、抽象メソッドを含んでいます。  

または -  

 この型は抽象クラスまたはインターフェイスではなく、メソッド本体のないメソッドを持ちます。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The type contains invalid Microsoft intermediate language (MSIL) code.  &#xA;  &#xA; -or-  &#xA;  &#xA; The branch target is specified using a 1-byte offset, but the target is at a distance greater than 127 bytes from the branch.">この型は正しくない MSIL (Microsoft Intermediate Language) コードを含んでいます。  
 または  
 分岐ターゲットは 1 バイト オフセットを使用して指定されますが、ターゲットは分岐点から 127 バイトを超える距離にあります。</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="The type cannot be loaded. For example, it contains a &lt;see langword=&quot;static&quot; /&gt; method that has the calling convention &lt;see cref=&quot;F:System.Reflection.CallingConventions.HasThis&quot; /&gt;.">型を読み込めません。 たとえば、呼び出し規則 <see cref="F:System.Reflection.CallingConventions.HasThis" /> を持つ <see langword="static" /> メソッドを含んでいます。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.CreateTypeInfo">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.TypeInfo&quot; /&gt; object that represents this type.">この型を表す <see cref="T:System.Reflection.TypeInfo" /> オブジェクトを取得します。</summary>
      <returns vsli:raw="An object that represents this type.">この型を表すオブジェクト。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringMethod">
      <summary vsli:raw="Gets the method that declared the current generic type parameter.">現在のジェネリック型パラメーターを宣言したメソッドを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodBase&quot; /&gt; that represents the method that declared the current type, if the current type is a generic type parameter; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">現在の型がジェネリック型パラメーターである場合は、現在の型を宣言したメソッドを表す <see cref="T:System.Reflection.MethodBase" />、それ以外の場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringType">
      <summary vsli:raw="Returns the type that declared this type.">この型を宣言した型を返します。</summary>
      <returns vsli:raw="Read-only. The type that declared this type.">読み取り専用。 この型を宣言した型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])">
      <summary vsli:raw="Adds a new constructor to the type, with the given attributes and signature.">型に、指定した属性およびシグネチャの新しいコンストラクターを追加します。</summary>
      <param name="attributes" vsli:raw="The attributes of the constructor.">コンストラクターの属性。</param>
      <param name="callingConvention" vsli:raw="The calling convention of the constructor.">コンストラクターの呼び出し規約。</param>
      <param name="parameterTypes" vsli:raw="The parameter types of the constructor.">コンストラクターのパラメーター型。</param>
      <returns vsli:raw="The defined constructor.">定義済みのコンストラクター。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a new constructor to the type, with the given attributes, signature, and custom modifiers.">指定された属性、署名、およびカスタム修飾子で、型に新しいコンストラクターを追加します。</summary>
      <param name="attributes" vsli:raw="The attributes of the constructor.">コンストラクターの属性。</param>
      <param name="callingConvention" vsli:raw="The calling convention of the constructor.">コンストラクターの呼び出し規約。</param>
      <param name="parameterTypes" vsli:raw="The parameter types of the constructor.">コンストラクターのパラメーター型。</param>
      <param name="requiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">型の配列の配列。 型の各配列は、<see cref="T:System.Runtime.CompilerServices.IsConst" /> のような、対応するパラメーターの必須のカスタム修飾子を表します。 特定のパラメーターに必須のカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 どのパラメーターにも必須のカスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <param name="optionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">型の配列の配列。 型の各配列は、 <see cref="T:System.Runtime.CompilerServices.IsConst" />のような、対応するパラメーターの省略可能なカスタム修飾子を表します。 特定のパラメーターに省略可能なカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 どのパラメーターにも省略可能なカスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <returns vsli:raw="The defined constructor.">定義済みのコンストラクター。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The size of &lt;paramref name=&quot;requiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">
        <paramref name="requiredCustomModifiers" /> または <paramref name="optionalCustomModifiers" /> のサイズは <paramref name="parameterTypes" /> のサイズと同じではありません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。  

または - 
現在の動的な型では、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)">
      <summary vsli:raw="Defines the parameterless constructor. The constructor defined here will simply call the parameterless constructor of the parent.">パラメーターなしのコンストラクターを定義します。 ここで定義されたコンストラクターは、単に親のパラメーターなしのコンストラクターを呼び出します。</summary>
      <param name="attributes" vsli:raw="A &lt;see langword=&quot;MethodAttributes&quot; /&gt; object representing the attributes to be applied to the constructor.">コンストラクターに適用される属性を表す <see langword="MethodAttributes" /> オブジェクト。</param>
      <returns vsli:raw="Returns the constructor.">コンストラクターを返します。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The parent type (base type) does not have a parameterless constructor.">親の型 (基本型) には、パラメーターなしのコンストラクターがありません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。  
または 
現在の動的な型では、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineEvent(System.String,System.Reflection.EventAttributes,System.Type)">
      <summary vsli:raw="Adds a new event to the type, with the given name, attributes and event type.">指定した名前、属性、イベント型の新しいイベントを型に追加します。</summary>
      <param name="name" vsli:raw="The name of the event. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">イベントの名前です。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attributes" vsli:raw="The attributes of the event.">イベントの属性。</param>
      <param name="eventtype" vsli:raw="The type of the event.">イベントの型。</param>
      <returns vsli:raw="The defined event.">定義済みのイベント。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">
        <paramref name="name" /> の長さが 0 です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;eventtype&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> が <see langword="null" /> です。  

または - 
<paramref name="eventtype" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)">
      <summary vsli:raw="Adds a new field to the type, with the given name, attributes, and field type.">指定した名前、属性、フィールド型の新しいフィールドを型に追加します。</summary>
      <param name="fieldName" vsli:raw="The name of the field. &lt;paramref name=&quot;fieldName&quot; /&gt; cannot contain embedded nulls.">フィールドの名前。 <paramref name="fieldName" /> に埋め込み null 値を含めることはできません。</param>
      <param name="type" vsli:raw="The type of the field.">フィールドの種類。</param>
      <param name="attributes" vsli:raw="The attributes of the field.">フィールドの属性。</param>
      <returns vsli:raw="The defined field.">定義済みのフィールド。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;fieldName&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is System.Void.  &#xA;  &#xA; -or-  &#xA;  &#xA; A total size was specified for the parent class of this field.">
        <paramref name="fieldName" /> の長さが 0 です。  
または 
 <paramref name="type" /> が System.Void です。  

または - 
このフィールドの親クラスの合計サイズが指定されました。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fieldName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fieldName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes)">
      <summary vsli:raw="Adds a new field to the type, with the given name, attributes, field type, and custom modifiers.">指定された名前、属性、フィールドの種類、およびカスタム修飾子を持つ新しいフィールドを型に追加します。</summary>
      <param name="fieldName" vsli:raw="The name of the field. &lt;paramref name=&quot;fieldName&quot; /&gt; cannot contain embedded nulls.">フィールドの名前。 <paramref name="fieldName" /> に埋め込み null 値を含めることはできません。</param>
      <param name="type" vsli:raw="The type of the field.">フィールドの種類。</param>
      <param name="requiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the field, such as &lt;see cref=&quot;T:Microsoft.VisualC.IsConstModifier&quot; /&gt;.">
        <see cref="T:Microsoft.VisualC.IsConstModifier" /> など、フィールドの必須のカスタム修飾子を表す型の配列。</param>
      <param name="optionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the field, such as &lt;see cref=&quot;T:Microsoft.VisualC.IsConstModifier&quot; /&gt;.">
        <see cref="T:Microsoft.VisualC.IsConstModifier" /> など、フィールドのオプションのカスタム修飾子を表す型の配列。</param>
      <param name="attributes" vsli:raw="The attributes of the field.">フィールドの属性。</param>
      <returns vsli:raw="The defined field.">定義済みのフィールド。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;fieldName&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is System.Void.  &#xA;  &#xA; -or-  &#xA;  &#xA; A total size was specified for the parent class of this field.">
        <paramref name="fieldName" /> の長さが 0 です。  

または - 
<paramref name="type" /> が System.Void です。  

または - 
このフィールドの親クラスの合計サイズが指定されました。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fieldName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fieldName" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])">
      <summary vsli:raw="Defines the generic type parameters for the current type, specifying their number and their names, and returns an array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects that can be used to set their constraints.">現在の型のジェネリック型パラメーターを定義してその数と名前を指定し、それらの制約の設定に使用できる <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> オブジェクトの配列を返します。</summary>
      <param name="names" vsli:raw="An array of names for the generic type parameters.">ジェネリック型パラメーターの名前の配列。</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects that can be used to define the constraints of the generic type parameters for the current type.">現在の型のジェネリック型パラメーターの制約を定義するために使用できる <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> オブジェクトの配列。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Generic type parameters have already been defined for this type.">この型のジェネリック型パラメーターは既に定義されています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;names&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;names&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="names" /> は <see langword="null" />です。  
または 
<paramref name="names" /> の要素は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;names&quot; /&gt; is an empty array.">
        <paramref name="names" /> は空の配列です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
      <summary vsli:raw="Defines initialized data field in the .sdata section of the portable executable (PE) file.">ポータブル実行可能 (PE) ファイルの .sdata セクションの初期化済みデータ フィールドを定義します。</summary>
      <param name="name" vsli:raw="The name used to refer to the data. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">データを参照するために使用する名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="data" vsli:raw="The blob of data.">データの blob。</param>
      <param name="attributes" vsli:raw="The attributes for the field.">フィールドの属性。</param>
      <returns vsli:raw="A field to reference the data.">データを参照するフィールド。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of the data is less than or equal to zero, or greater than or equal to 0x3f0000.">
        <paramref name="name" /> の長さが 0 です。  

または - 
データのサイズが、0 以下か、0x3f0000 以上です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;data&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> または <paramref name="data" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been previously called.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> は以前に呼び出されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes)">
      <summary vsli:raw="Adds a new method to the type, with the specified name and method attributes.">新しいメソッドを、指定された名前とメソッドの属性を持つ型に追加します。</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">メソッドの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attributes" vsli:raw="The attributes of the method.">メソッドの属性。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; representing the newly defined method.">新しく定義したメソッドを表す <see cref="T:System.Reflection.Emit.MethodBuilder" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface, and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).">
        <paramref name="name" /> の長さが 0 です。  

または - 
このメソッドの親の型がインターフェイスであり、このメソッドは仮想ではありません (Visual Basic では<see langword="Overridable" /> )。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。  
または 
現在の動的な型では、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions)">
      <summary vsli:raw="Adds a new method to the type, with the specified name, method attributes, and calling convention.">新しいメソッドを、指定された名前、メソッドの属性、および呼び出し規約を持つ型に追加します。</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">メソッドの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attributes" vsli:raw="The attributes of the method.">メソッドの属性。</param>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">メソッドの呼び出し規則。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; representing the newly defined method.">新しく定義したメソッドを表す <see cref="T:System.Reflection.Emit.MethodBuilder" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).">
        <paramref name="name" /> の長さが 0 です。  

または - 
このメソッドの親の型がインターフェイスであり、このメソッドは仮想ではありません (Visual Basic では <see langword="Overridable" />)。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。  

または - 
現在の動的な型では、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary vsli:raw="Adds a new method to the type, with the specified name, method attributes, calling convention, and method signature.">指定された名前、メソッドの属性、呼び出し規則、およびメソッドのシグネチャを持つ新しいメソッドを型に追加します。</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">メソッドの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attributes" vsli:raw="The attributes of the method.">メソッドの属性。</param>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">メソッドの呼び出し規則。</param>
      <param name="returnType" vsli:raw="The return type of the method.">メソッドの戻り値の型。</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the method.">メソッドのパラメーターの型。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; representing the newly defined method.">新しく定義したメソッドを表す <see cref="T:System.Reflection.Emit.MethodBuilder" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface, and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).">
        <paramref name="name" /> の長さが 0 です。  

または - 
このメソッドの親の型がインターフェイスであり、このメソッドは仮想ではありません (Visual Basic では<see langword="Overridable" /> )。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。  
または 
現在の動的な型では、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a new method to the type, with the specified name, method attributes, calling convention, method signature, and custom modifiers.">新しいメソッドを、指定された名前、メソッドの属性、呼び出し規則、メソッドのシグニチャ、およびカスタム修飾子を持つ型に追加します。</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">メソッドの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attributes" vsli:raw="The attributes of the method.">メソッドの属性。</param>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">メソッドの呼び出し規則。</param>
      <param name="returnType" vsli:raw="The return type of the method.">メソッドの戻り値の型。</param>
      <param name="returnTypeRequiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the method. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">メソッドの戻り値の型の <see cref="T:System.Runtime.CompilerServices.IsConst" /> など、必須のカスタム修飾子を表す型の配列。 戻り値の型が必須のカスタム修飾子を持たない場合は、<see langword="null" /> を指定します。</param>
      <param name="returnTypeOptionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the method. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">メソッドの戻り値の型の <see cref="T:System.Runtime.CompilerServices.IsConst" /> のような、省略可能なカスタム修飾子を表す型の配列。 戻り値の型に省略可能のカスタム修飾子がない場合は、<see langword="null" /> を指定します。</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the method.">メソッドのパラメーターの型。</param>
      <param name="parameterTypeRequiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">型の配列の配列。 型の各配列は、<see cref="T:System.Runtime.CompilerServices.IsConst" /> のような、対応するパラメーターの必須のカスタム修飾子を表します。 特定のパラメーターに必須のカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 どのパラメーターにも必須のカスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <param name="parameterTypeOptionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">型の配列の配列。 型の各配列は、 <see cref="T:System.Runtime.CompilerServices.IsConst" />のような、対応するパラメーターの省略可能なカスタム修飾子を表します。 特定のパラメーターに省略可能なカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 どのパラメーターにも省略可能なカスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; object representing the newly added method.">新しく追加されたメソッドを表す <see cref="T:System.Reflection.Emit.MethodBuilder" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface, and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;parameterTypeRequiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;parameterTypeOptionalCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">
        <paramref name="name" /> の長さが 0 です。  
または 
このメソッドの親の型がインターフェイスであり、このメソッドは仮想 (Visual Basic では <see langword="Overridable" />) ではありません。  

または - 
<paramref name="parameterTypeRequiredCustomModifiers" /> または <paramref name="parameterTypeOptionalCustomModifiers" /> のサイズは <paramref name="parameterTypes" /> のサイズと同じではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。  

または - 
現在の動的な型では、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Adds a new method to the type, with the specified name, method attributes, and method signature.">新しいメソッドを、指定された名前、メソッドの属性、およびメソッドのシグニチャを持つ型に追加します。</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">メソッドの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attributes" vsli:raw="The attributes of the method.">メソッドの属性。</param>
      <param name="returnType" vsli:raw="The return type of the method.">メソッドの戻り値の型。</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the method.">メソッドのパラメーターの型。</param>
      <returns vsli:raw="The defined method.">定義されたメソッド。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface, and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).">
        <paramref name="name" /> の長さが 0 です。  
または 
このメソッドの親の型がインターフェイスであり、このメソッドは仮想ではありません (Visual Basic では<see langword="Overridable" /> )。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。  
または 
現在の動的な型では、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethodOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
      <summary vsli:raw="Specifies a given method body that implements a given method declaration, potentially with a different name.">特定のメソッド宣言 (名前が異なる可能性があります) を実装する特定のメソッド本体を指定します。</summary>
      <param name="methodInfoBody" vsli:raw="The method body to be used. This should be a &lt;see langword=&quot;MethodBuilder&quot; /&gt; object.">使用するメソッド本体。 これは <see langword="MethodBuilder" /> オブジェクトである必要があります。</param>
      <param name="methodInfoDeclaration" vsli:raw="The method whose declaration is to be used.">宣言が使用されるメソッド。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;methodInfoBody&quot; /&gt; does not belong to this class.">
        <paramref name="methodInfoBody" /> はこのクラスに属していません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;methodInfoBody&quot; /&gt; or &lt;paramref name=&quot;methodInfoDeclaration&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="methodInfoBody" /> または <paramref name="methodInfoDeclaration" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;methodInfoBody&quot; /&gt; is not the type represented by this &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt;.">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。  

または - 
<paramref name="methodInfoBody" /> の宣言型は、この <see cref="T:System.Reflection.Emit.TypeBuilder" /> によって表される型ではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String)">
      <summary vsli:raw="Defines a nested type, given its name.">名前を指定された、入れ子にされた型を定義します。</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">型の短い名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <returns vsli:raw="The defined nested type.">定義済みの入れ子にされた型。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">
        <paramref name="name" /> の長さが 0 または 1023 を超えています。  

または - 
この操作では、現在のアセンブリ内に <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> が重複する型が作成されます。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes)">
      <summary vsli:raw="Defines a nested type, given its name and attributes.">指定した名前と属性を持つ入れ子にされた型を定義します。</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">型の短い名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attr" vsli:raw="The attributes of the type.">型の属性。</param>
      <returns vsli:raw="The defined nested type.">定義済みの入れ子にされた型。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">入れ子にされた属性が指定されていません。  
または 
この型は封印されています。  

または - 
この型は配列です。  

または - 
この型はインターフェイスですが、入れ子にされた型がインターフェイスではありません。  


または 
<paramref name="name" /> の長さが 0 であるか、1023 を超えています。  

または - 
この操作では、現在のアセンブリ内に <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> が重複する型が作成されます。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary vsli:raw="Defines a nested type, given its name, attributes, and the type that it extends.">入れ子にされた型、指定された名前、属性、および拡張する型を定義します。</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">型の短い名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attr" vsli:raw="The attributes of the type.">型の属性。</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">入れ子にされた型を拡張する型。</param>
      <returns vsli:raw="The defined nested type.">定義済みの入れ子にされた型。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">入れ子にされた属性が指定されていません。  

または - 
この型は封印されています。  

または - 
この型は配列です。  

または - 
この型はインターフェイスですが、入れ子にされた型がインターフェイスではありません。  


または 
<paramref name="name" /> の長さが 0 であるか、1023 を超えています。  

または - 
この操作では、現在のアセンブリ内に <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> が重複する型が作成されます。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
      <summary vsli:raw="Defines a nested type, given its name, attributes, the total size of the type, and the type that it extends.">入れ子にされた型、指定された名前、属性、型の合計サイズ、および拡張する型を定義します。</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">型の短い名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attr" vsli:raw="The attributes of the type.">型の属性。</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">入れ子にされた型を拡張する型。</param>
      <param name="typeSize" vsli:raw="The total size of the type.">型の合計サイズ。</param>
      <returns vsli:raw="The defined nested type.">定義済みの入れ子にされた型。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">入れ子にされた属性が指定されていません。  

または - 
この型は封印されています。  

または - 
この型は配列です。  


または 
この型はインターフェイスですが、入れ子にされた型がインターフェイスではありません。  

または - 
<paramref name="name" /> の長さが 0 であるか、1023 を超えています。  

または - 
この操作では、現在のアセンブリ内に <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> が重複する型が作成されます。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
      <summary vsli:raw="Defines a nested type, given its name, attributes, the type that it extends, and the packing size.">入れ子にされた型、指定された名前、属性、拡張する型、およびパッキング サイズを定義します。</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">型の短い名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attr" vsli:raw="The attributes of the type.">型の属性。</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">入れ子にされた型を拡張する型。</param>
      <param name="packSize" vsli:raw="The packing size of the type.">型のパッキング サイズ。</param>
      <returns vsli:raw="The defined nested type.">定義済みの入れ子にされた型。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">入れ子にされた属性が指定されていません。  

または - 
この型は封印されています。  

または - 
この型は配列です。  


または 
この型はインターフェイスですが、入れ子にされた型がインターフェイスではありません。  

または - 
<paramref name="name" /> の長さが 0 であるか、1023 を超えています。  

または 
この操作では、現在のアセンブリ内に <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> が重複する型が作成されます。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)">
      <summary vsli:raw="Defines a nested type, given its name, attributes, size, and the type that it extends.">入れ子にされた型、指定された名前、属性、サイズ、および拡張する型を定義します。</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded null values.">型の短い名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attr" vsli:raw="The attributes of the type.">型の属性。</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">入れ子にされた型を拡張する型。</param>
      <param name="packSize" vsli:raw="The packing size of the type.">型のパッキング サイズ。</param>
      <param name="typeSize" vsli:raw="The total size of the type.">型の合計サイズ。</param>
      <returns vsli:raw="The defined nested type.">定義済みの入れ子にされた型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Defines a nested type, given its name, attributes, the type that it extends, and the interfaces that it implements.">指定された名前、属性、拡張する基本型、および実装するインターフェイスを指定して、ネスト型を定義します。</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">型の短い名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attr" vsli:raw="The attributes of the type.">型の属性。</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">入れ子にされた型を拡張する型。</param>
      <param name="interfaces" vsli:raw="The interfaces that the nested type implements.">入れ子型で実装されるインターフェイス。</param>
      <returns vsli:raw="The defined nested type.">定義済みの入れ子にされた型。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">入れ子にされた属性が指定されていません。  

または - 
この型は封印されています。  

または 
この型は配列です。  
または 
この型はインターフェイスですが、入れ子にされた型がインターフェイスではありません。  

または - 
<paramref name="name" /> の長さが 0 であるか、1023 を超えています。  

または 
この操作では、現在のアセンブリ内に <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> が重複する型が作成されます。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of the &lt;paramref name=&quot;interfaces&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> が <see langword="null" /> です。  

または - 
<paramref name="interfaces" /> 配列の要素が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Defines a &lt;see langword=&quot;PInvoke&quot; /&gt; method given its name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the &lt;see langword=&quot;PInvoke&quot; /&gt; flags.">
        <see langword="PInvoke" /> メソッドに名前を指定して、メソッドが定義されている DLL の名前、メソッドの属性、メソッドの呼び出し規則、メソッドの戻り値の型、メソッドのパラメーター型、および <see langword="PInvoke" /> フラグを定義します。</summary>
      <param name="name" vsli:raw="The name of the &lt;see langword=&quot;PInvoke&quot; /&gt; method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">
        <see langword="PInvoke" /> メソッドの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="dllName" vsli:raw="The name of the DLL in which the &lt;see langword=&quot;PInvoke&quot; /&gt; method is defined.">
        <see langword="PInvoke" /> メソッドが定義されている DLL の名前。</param>
      <param name="attributes" vsli:raw="The attributes of the method.">メソッドの属性。</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">メソッドの呼び出し規則。</param>
      <param name="returnType" vsli:raw="The method's return type.">メソッドの戻り値の型。</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">メソッドのパラメーター型。</param>
      <param name="nativeCallConv" vsli:raw="The native calling convention.">ネイティブ呼び出し規則。</param>
      <param name="nativeCharSet" vsli:raw="The method's native character set.">メソッドのネイティブ文字セット。</param>
      <returns vsli:raw="The defined &lt;see langword=&quot;PInvoke&quot; /&gt; method.">定義された <see langword="PInvoke" /> メソッド。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static.  &#xA;  &#xA; -or-  &#xA;  &#xA; The parent type is an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is abstract.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method was previously defined.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;dllName&quot; /&gt; is zero.">メソッドは静的ではありません。  

または - 
親の型がインターフェイスです。  

または - 
抽象メソッドです。  

または - 
メソッドは以前に定義されています。  

または - 
<paramref name="name" /> または <paramref name="dllName" /> の長さが 0 です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;dllName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> または <paramref name="dllName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">含んでいる型が <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して以前に作成されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Defines a &lt;see langword=&quot;PInvoke&quot; /&gt; method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the &lt;see langword=&quot;PInvoke&quot; /&gt; flags.">
        <see langword="PInvoke" /> メソッドに名前を指定して、メソッドが定義されている DLL の名前、エントリ ポイント名、メソッドの属性、メソッドの呼び出し規約、メソッドの戻り値の型、メソッドのパラメーター型、および <see langword="PInvoke" /> フラグを定義します。</summary>
      <param name="name" vsli:raw="The name of the &lt;see langword=&quot;PInvoke&quot; /&gt; method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">
        <see langword="PInvoke" /> メソッドの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="dllName" vsli:raw="The name of the DLL in which the &lt;see langword=&quot;PInvoke&quot; /&gt; method is defined.">
        <see langword="PInvoke" /> メソッドが定義されている DLL の名前。</param>
      <param name="entryName" vsli:raw="The name of the entry point in the DLL.">DLL 内のエントリ ポイントの名前。</param>
      <param name="attributes" vsli:raw="The attributes of the method.">メソッドの属性。</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">メソッドの呼び出し規則。</param>
      <param name="returnType" vsli:raw="The method's return type.">メソッドの戻り値の型。</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">メソッドのパラメーター型。</param>
      <param name="nativeCallConv" vsli:raw="The native calling convention.">ネイティブ呼び出し規則。</param>
      <param name="nativeCharSet" vsli:raw="The method's native character set.">メソッドのネイティブ文字セット。</param>
      <returns vsli:raw="The defined &lt;see langword=&quot;PInvoke&quot; /&gt; method.">定義された <see langword="PInvoke" /> メソッド。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static.  &#xA;  &#xA; -or-  &#xA;  &#xA; The parent type is an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is abstract.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method was previously defined.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt;, &lt;paramref name=&quot;dllName&quot; /&gt;, or &lt;paramref name=&quot;entryName&quot; /&gt; is zero.">メソッドは静的ではありません。  
または 
親の型がインターフェイスです。  
または 
抽象メソッドです。  

または - 
メソッドは以前に定義されています。  

または 
<paramref name="name" />、<paramref name="dllName" />、または <paramref name="entryName" /> の長さが 0 です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt;, &lt;paramref name=&quot;dllName&quot; /&gt;, or &lt;paramref name=&quot;entryName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />、<paramref name="dllName" />、または <paramref name="entryName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">含んでいる型が <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して以前に作成されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Type[][],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][])">
      <summary>
        <see langword="PInvoke" /> メソッドを定義します。名前、メソッドが定義されている DLL の名前、エントリ ポイント名、メソッドの属性、メソッドの呼び出し規則、メソッドの戻り値の型、メソッドのパラメーター型、<see langword="PInvoke" /> フラグ、およびパラメーターと戻り値の型のカスタム修飾子を指定します。</summary>
      <param name="name">
        <see langword="PInvoke" /> メソッドの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="dllName">
        <see langword="PInvoke" /> メソッドが定義されている DLL の名前。</param>
      <param name="parameterTypeOptionalCustomModifiers">型の配列の配列。 型の各配列は、 <see cref="T:System.Runtime.CompilerServices.IsConst" />のような、対応するパラメーターの省略可能なカスタム修飾子を表します。 特定のパラメーターに省略可能なカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 どのパラメーターにも省略可能なカスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <param name="nativeCallConv">ネイティブ呼び出し規則。</param>
      <param name="nativeCharSet">メソッドのネイティブ文字セット。</param>
      <param name="entryName">DLL 内のエントリ ポイントの名前。</param>
      <param name="attributes">メソッドの属性。</param>
      <param name="callingConvention">メソッドの呼び出し規則。</param>
      <param name="returnType">メソッドの戻り値の型。</param>
      <param name="returnTypeRequiredCustomModifiers">メソッドの戻り値の型の <see cref="T:System.Runtime.CompilerServices.IsConst" />など、必須のカスタム修飾子を表す型の配列。 戻り値の型が必須のカスタム修飾子を持たない場合は、<see langword="null" /> を指定します。</param>
      <param name="returnTypeOptionalCustomModifiers">メソッドの戻り値の型の <see cref="T:System.Runtime.CompilerServices.IsConst" /> のような、省略可能なカスタム修飾子を表す型の配列。 戻り値の型に省略可能のカスタム修飾子がない場合は、<see langword="null" /> を指定します。</param>
      <param name="parameterTypes">メソッドのパラメーター型。</param>
      <param name="parameterTypeRequiredCustomModifiers">型の配列の配列。 型の各配列は、<see cref="T:System.Runtime.CompilerServices.IsConst" /> のような、対応するパラメーターの必須のカスタム修飾子を表します。 特定のパラメーターに必須のカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 どのパラメーターにも必須のカスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <returns>定義された <see langword="PInvoke" /> メソッドを表す <see cref="T:System.Reflection.Emit.MethodBuilder" />。</returns>
      <exception cref="T:System.ArgumentException">メソッドは静的ではありません。  
または 
親の型がインターフェイスです。  
または 
抽象メソッドです。  

または - 
メソッドは以前に定義されています。  

または 
<paramref name="name" />、<paramref name="dllName" />、または <paramref name="entryName" /> の長さが 0 です。  

または - 
<paramref name="parameterTypeRequiredCustomModifiers" /> または <paramref name="parameterTypeOptionalCustomModifiers" /> のサイズは <paramref name="parameterTypes" /> のサイズと同じではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />、<paramref name="dllName" />、または <paramref name="entryName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。  

または - 
現在の動的な型では、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary vsli:raw="Adds a new property to the type, with the given name, attributes, calling convention, and property signature.">新しいプロパティを、指定された名前、属性、呼び出し規則、およびプロパティの署名を持つ型に追加します。</summary>
      <param name="name" vsli:raw="The name of the property. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">プロパティの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attributes" vsli:raw="The attributes of the property.">プロパティの属性。</param>
      <param name="callingConvention" vsli:raw="The calling convention of the property accessors.">プロパティ アクセサーの呼び出し規則。</param>
      <param name="returnType" vsli:raw="The return type of the property.">プロパティの戻り値の型。</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the property.">プロパティのパラメーターの型。</param>
      <returns vsli:raw="The defined property.">定義されたプロパティ。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">
        <paramref name="name" /> の長さが 0 です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Any of the elements of the &lt;paramref name=&quot;parameterTypes&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> は <see langword="null" />です。  
または 
<paramref name="parameterTypes" /> 配列の要素のいずれかが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a new property to the type, with the given name, calling convention, property signature, and custom modifiers.">指定された名前、呼び出し規則、プロパティの署名、およびカスタム修飾子を使用して、新しいプロパティを型に追加します。</summary>
      <param name="name" vsli:raw="The name of the property. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">プロパティの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attributes" vsli:raw="The attributes of the property.">プロパティの属性。</param>
      <param name="callingConvention" vsli:raw="The calling convention of the property accessors.">プロパティ アクセサーの呼び出し規則。</param>
      <param name="returnType" vsli:raw="The return type of the property.">プロパティの戻り値の型。</param>
      <param name="returnTypeRequiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the property. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">プロパティの戻り値の型の <see cref="T:System.Runtime.CompilerServices.IsConst" /> など、必須のカスタム修飾子を表す型の配列。 戻り値の型が必須のカスタム修飾子を持たない場合は、<see langword="null" /> を指定します。</param>
      <param name="returnTypeOptionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the property. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">プロパティの戻り値の型の <see cref="T:System.Runtime.CompilerServices.IsConst" /> のような、省略可能なカスタム修飾子を表す型の配列。 戻り値の型に省略可能のカスタム修飾子がない場合は、<see langword="null" /> を指定します。</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the property.">プロパティのパラメーターの型。</param>
      <param name="parameterTypeRequiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">型の配列の配列。 型の各配列は、<see cref="T:System.Runtime.CompilerServices.IsConst" /> のような、対応するパラメーターの必須のカスタム修飾子を表します。 特定のパラメーターに必須のカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 どのパラメーターにも必須のカスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <param name="parameterTypeOptionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">型の配列の配列。 型の各配列は、 <see cref="T:System.Runtime.CompilerServices.IsConst" />のような、対応するパラメーターの省略可能なカスタム修飾子を表します。 特定のパラメーターに省略可能なカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 どのパラメーターにも省略可能なカスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <returns vsli:raw="The defined property.">定義されたプロパティ。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">
        <paramref name="name" /> の長さが 0 です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Any of the elements of the &lt;paramref name=&quot;parameterTypes&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> は <see langword="null" />です。  

または - 
<paramref name="parameterTypes" /> 配列の要素のいずれかが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Adds a new property to the type, with the given name and property signature.">指定された名前とプロパティのシグネチャにより、新しいプロパティを型に追加します。</summary>
      <param name="name" vsli:raw="The name of the property. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">プロパティの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attributes" vsli:raw="The attributes of the property.">プロパティの属性。</param>
      <param name="returnType" vsli:raw="The return type of the property.">プロパティの戻り値の型。</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the property.">プロパティのパラメーターの型。</param>
      <returns vsli:raw="The defined property.">定義されたプロパティ。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">
        <paramref name="name" /> の長さが 0 です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Any of the elements of the &lt;paramref name=&quot;parameterTypes&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> が <see langword="null" /> です。  

または - 
<paramref name="parameterTypes" /> 配列の要素のいずれかが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a new property to the type, with the given name, property signature, and custom modifiers.">指定された名前、プロパティのシグネチャ、およびカスタム修飾子により、新しいプロパティを型に追加します。</summary>
      <param name="name" vsli:raw="The name of the property. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">プロパティの名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="attributes" vsli:raw="The attributes of the property.">プロパティの属性。</param>
      <param name="returnType" vsli:raw="The return type of the property.">プロパティの戻り値の型。</param>
      <param name="returnTypeRequiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the property. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">プロパティの戻り値の型の <see cref="T:System.Runtime.CompilerServices.IsConst" /> など、必須のカスタム修飾子を表す型の配列。 戻り値の型が必須のカスタム修飾子を持たない場合は、<see langword="null" /> を指定します。</param>
      <param name="returnTypeOptionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the property. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">プロパティの戻り値の型の <see cref="T:System.Runtime.CompilerServices.IsConst" /> のような、省略可能なカスタム修飾子を表す型の配列。 戻り値の型に省略可能のカスタム修飾子がない場合は、<see langword="null" /> を指定します。</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the property.">プロパティのパラメーターの型。</param>
      <param name="parameterTypeRequiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">型の配列の配列。 型の各配列は、<see cref="T:System.Runtime.CompilerServices.IsConst" /> のような、対応するパラメーターの必須のカスタム修飾子を表します。 特定のパラメーターに必須のカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 どのパラメーターにも必須のカスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <param name="parameterTypeOptionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">型の配列の配列。 型の各配列は、 <see cref="T:System.Runtime.CompilerServices.IsConst" />のような、対応するパラメーターの省略可能なカスタム修飾子を表します。 特定のパラメーターに省略可能なカスタム修飾子がない場合は、型の配列の代わりに <see langword="null" /> を指定します。 どのパラメーターにも省略可能なカスタム修飾子がない場合は、配列の配列の代わりに <see langword="null" /> を指定します。</param>
      <returns vsli:raw="The defined property.">定義されたプロパティ。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">
        <paramref name="name" /> の長さが 0 です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;  &#xA;  &#xA; -or-  &#xA;  &#xA; Any of the elements of the &lt;paramref name=&quot;parameterTypes&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;">
        <paramref name="name" /> は <see langword="null" /> です  
または 
<paramref name="parameterTypes" /> 配列の要素のいずれかが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer">
      <summary vsli:raw="Defines the initializer for this type.">この型の初期化子を定義します。</summary>
      <returns vsli:raw="Returns a type initializer.">型の初期化子を返します。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">含んでいる型が <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して以前に作成されています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
      <summary vsli:raw="Defines an uninitialized data field in the &lt;see langword=&quot;.sdata&quot; /&gt; section of the portable executable (PE) file.">ポータブル実行可能 (PE) ファイルの <see langword=".sdata" /> セクションの初期化されていないデータ フィールドを定義します。</summary>
      <param name="name" vsli:raw="The name used to refer to the data. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">データを参照するために使用する名前。 <paramref name="name" /> に埋め込み null 値を含めることはできません。</param>
      <param name="size" vsli:raw="The size of the data field.">データ フィールドのサイズ。</param>
      <param name="attributes" vsli:raw="The attributes for the field.">フィールドの属性。</param>
      <returns vsli:raw="A field to reference the data.">データを参照するフィールド。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;size&quot; /&gt; is less than or equal to zero, or greater than or equal to 0x003f0000.">
        <paramref name="name" /> の長さが 0 です。  

または - 
<paramref name="size" /> が 0 以下か、0x003f0000 以上です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.FullName">
      <summary vsli:raw="Retrieves the full path of this type.">この型の完全なパスを取得します。</summary>
      <returns vsli:raw="Read-only. Retrieves the full path of this type.">読み取り専用。 この型の完全なパスを取得します。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterAttributes">
      <summary vsli:raw="Gets a value that indicates the covariance and special constraints of the current generic type parameter.">現在のジェネリック型パラメーターの共変性および特殊な制約を示す値を取得します。</summary>
      <returns vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.GenericParameterAttributes&quot; /&gt; values that describes the covariance and special constraints of the current generic type parameter.">現在のジェネリック型パラメーターの共変性と特殊な制約を表す <see cref="T:System.Reflection.GenericParameterAttributes" /> 値のビットごとの組み合わせ。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterPosition">
      <summary vsli:raw="Gets the position of a type parameter in the type parameter list of the generic type that declared the parameter.">パラメーターを宣言するジェネリック型の型パラメーター リスト内の型パラメーターの位置を取得します。</summary>
      <returns vsli:raw="If the current &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object represents a generic type parameter, the position of the type parameter in the type parameter list of the generic type that declared the parameter; otherwise, undefined.">現在の <see cref="T:System.Reflection.Emit.TypeBuilder" /> オブジェクトがジェネリック型パラメーターを表す場合、パラメーターを宣言したジェネリック型の型パラメーター リスト内の型パラメーターの位置。それ以外の場合は、定義されません。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructor(System.Type,System.Reflection.ConstructorInfo)">
      <summary vsli:raw="Returns the constructor of the specified constructed generic type that corresponds to the specified constructor of the generic type definition.">ジェネリック型定義の指定されたコンストラクターに対応する、指定の構築されたジェネリック型のコンストラクターを返します。</summary>
      <param name="type" vsli:raw="The constructed generic type whose constructor is returned.">コンストラクターが返される構築されたジェネリック型。</param>
      <param name="constructor" vsli:raw="A constructor on the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;, which specifies which constructor of &lt;paramref name=&quot;type&quot; /&gt; to return.">返す <paramref name="type" /> のコンストラクターを指定する、<paramref name="type" /> のジェネリック型定義のコンストラクター。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; object that represents the constructor of &lt;paramref name=&quot;type&quot; /&gt; corresponding to &lt;paramref name=&quot;constructor&quot; /&gt;, which specifies a constructor belonging to the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="type" /> のジェネリック型定義に属するコンストラクターを指定する、<paramref name="constructor" /> に対応する <paramref name="type" /> のコンストラクターを表す <see cref="T:System.Reflection.ConstructorInfo" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; does not represent a generic type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is not of type &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;constructor&quot; /&gt; is not a generic type definition.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;constructor&quot; /&gt; is not the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="type" /> がジェネリック型を表していません。  

または - 
<paramref name="type" /> が <see cref="T:System.Reflection.Emit.TypeBuilder" />型ではありません。  

または 
<paramref name="constructor" /> の宣言する型はジェネリック型定義ではありません。  

または - 
<paramref name="constructor" /> の宣言する型は <paramref name="type" /> のジェネリック型定義ではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; objects representing the public and non-public constructors defined for this class, as specified.">指定に従って、このクラスに定義されているパブリック コンストラクターおよび非パブリック コンストラクターを表す <see cref="T:System.Reflection.ConstructorInfo" /> オブジェクトの配列を返します。</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">これは <see langword="InvokeMethod" /> や <see langword="NonPublic" /> などにある、<see cref="T:System.Reflection.BindingFlags" /> からのビット フラグでなければなりません。</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned.">このクラスに定義されている指定したコンストラクターを表す <see cref="T:System.Reflection.ConstructorInfo" /> オブジェクトの配列を返します。 コンストラクターが定義されていない場合は、空の配列が返されます。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">不完全な型では、このメソッドは実装されません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this type.">この型の定義済みのカスタム属性をすべて返します。</summary>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">このメンバーの継承チェーンを検索して属性を見つけるかどうかを指定します。</param>
      <returns vsli:raw="Returns an array of objects representing all the custom attributes of this type.">この型のすべてのカスタム属性を表す、オブジェクトの配列を返します。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types. Retrieve the type using &lt;see cref=&quot;M:System.Type.GetType&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Type&quot; /&gt;.">不完全な型では、このメソッドは現在サポートされていません。 <see cref="M:System.Type.GetType" /> を使用して型を取得し、返された <see cref="T:System.Type" /> で <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> を呼び出します。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes of the current type that are assignable to a specified type.">現在の型のカスタム属性のうち、指定された型に代入可能なものすべてを返します。</summary>
      <param name="attributeType" vsli:raw="The type of attribute to search for. Only attributes that are assignable to this type are returned.">検索する属性の種類。 この型に代入可能な属性だけが返されます。</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">このメンバーの継承チェーンを検索して属性を見つけるかどうかを指定します。</param>
      <returns vsli:raw="An array of custom attributes defined on the current type.">現在の型について定義されているカスタム属性の配列。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types. Retrieve the type using &lt;see cref=&quot;M:System.Type.GetType&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Type&quot; /&gt;.">不完全な型では、このメソッドは現在サポートされていません。 <see cref="M:System.Type.GetType" /> を使用して型を取得し、返された <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> で <see cref="T:System.Type" />を呼び出します。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The type must be a type provided by the underlying runtime system.">型は、基になるランタイム システムで提供されている型でなければなりません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetElementType">
      <summary vsli:raw="Calling this method always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <returns vsli:raw="This method is not supported. No value is returned.">このメソッドはサポートされていません。 値は返されません。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">このメソッドはサポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the event with the specified name.">指定した名前のイベントを返します。</summary>
      <param name="name" vsli:raw="The name of the event to search for.">検索対象のイベントの名前。</param>
      <param name="bindingAttr" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; values that limits the search.">検索を制限する <see cref="T:System.Reflection.BindingFlags" /> 値のビットごとの組み合わせ。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; object representing the event declared or inherited by this type with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if there are no matches.">この型によって宣言または継承されている、指定した名前のイベントを表す <see cref="T:System.Reflection.EventInfo" /> オブジェクト。または、一致するものがない場合は <see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">不完全な型では、このメソッドは実装されません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents">
      <summary vsli:raw="Returns the public events declared or inherited by this type.">この型で宣言または継承されているパブリック イベントを返します。</summary>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events.">この型で宣言または継承されているパブリック イベントを表す <see cref="T:System.Reflection.EventInfo" /> オブジェクトの配列を返します。 パブリック イベントがない場合は、空の配列が返されます。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">不完全な型では、このメソッドは実装されません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public events that are declared by this type.">この型で宣言されているパブリック イベントとパブリックでないイベントを返します。</summary>
      <param name="bindingAttr" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; values that limits the search.">検索を制限する <see cref="T:System.Reflection.BindingFlags" /> 値のビットごとの組み合わせ。</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; objects representing the events declared or inherited by this type that match the specified binding flags. An empty array is returned if there are no matching events.">この型で宣言または継承されているイベントのうち、指定したバインディング フラグに一致するイベントを表す <see cref="T:System.Reflection.EventInfo" /> オブジェクトの配列を返します。 一致するイベントがない場合は、空の配列が返されます。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">不完全な型では、このメソッドは実装されません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the field specified by the given name.">指定した名前で指定されたフィールドを返します。</summary>
      <param name="name" vsli:raw="The name of the field to get.">取得するフィールドの名前。</param>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">これは <see langword="InvokeMethod" /> や <see langword="NonPublic" /> などにある、<see cref="T:System.Reflection.BindingFlags" /> からのビット フラグでなければなりません。</param>
      <returns vsli:raw="Returns the &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches then &lt;see langword=&quot;null&quot; /&gt; is returned.">指定した名前と公開または非公開の修飾子を持つ、この型によって宣言または継承されているフィールドを表す <see cref="T:System.Reflection.FieldInfo" /> オブジェクトを返します。 一致するものがない場合は、<see langword="null" /> が返されます。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">不完全な型では、このメソッドは実装されません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.Type,System.Reflection.FieldInfo)">
      <summary vsli:raw="Returns the field of the specified constructed generic type that corresponds to the specified field of the generic type definition.">ジェネリック型定義の指定されたフィールドに対応する、指定の構築されたジェネリック型のフィールドを返します。</summary>
      <param name="type" vsli:raw="The constructed generic type whose field is returned.">フィールドが返される構築されたジェネリック型。</param>
      <param name="field" vsli:raw="A field on the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;, which specifies which field of &lt;paramref name=&quot;type&quot; /&gt; to return.">返す <paramref name="type" /> のフィールドを指定する、<paramref name="type" /> のジェネリック型定義のフィールド。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; object that represents the field of &lt;paramref name=&quot;type&quot; /&gt; corresponding to &lt;paramref name=&quot;field&quot; /&gt;, which specifies a field belonging to the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="type" /> のジェネリック型定義に属するフィールドを指定する、<paramref name="field" /> に対応する <paramref name="type" /> のフィールドを表す <see cref="T:System.Reflection.FieldInfo" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; does not represent a generic type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is not of type &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;field&quot; /&gt; is not a generic type definition.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;field&quot; /&gt; is not the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="type" /> がジェネリック型を表していません。  
または 
 <paramref name="type" /> が <see cref="T:System.Reflection.Emit.TypeBuilder" />型ではありません。  

または - 
<paramref name="field" /> の宣言する型はジェネリック型定義ではありません。  

または - 
<paramref name="field" /> の宣言する型は <paramref name="type" /> のジェネリック型定義ではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public fields that are declared by this type.">この型で宣言されているパブリック フィールドとパブリックでないフィールドを返します。</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">これは <see langword="InvokeMethod" /> や <see langword="NonPublic" /> など、<see cref="T:System.Reflection.BindingFlags" /> からのビット フラグでなければなりません。</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified.">この型で宣言または継承されているパブリック フィールドと非パブリック フィールドを表す <see cref="T:System.Reflection.FieldInfo" /> オブジェクトの配列を返します。 指定どおりに、フィールドがない場合は空の配列が返されます。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">不完全な型では、このメソッドは実装されません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericArguments">
      <summary vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the type arguments of a generic type or the type parameters of a generic type definition.">ジェネリック型の型引数またはジェネリック型定義の型パラメーターを表す <see cref="T:System.Type" /> オブジェクトの配列を返します。</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects. The elements of the array represent the type arguments of a generic type or the type parameters of a generic type definition.">
        <see cref="T:System.Type" /> オブジェクトの配列。 ジェネリック型の型引数またはジェネリック型定義の型パラメーターを表す配列の要素。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a generic type definition from which the current type can be obtained.">現在の型を取得する元になるジェネリック型定義を表す <see cref="T:System.Type" /> オブジェクトを返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing a generic type definition from which the current type can be obtained.">現在の型を取得する元になる型定義を表す <see cref="T:System.Type" /> オブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current type is not generic. That is, &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; returns &lt;see langword=&quot;false&quot; /&gt;.">現在の型はジェネリックではありません。 つまり、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> は <see langword="false" /> を返します。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterface(System.String,System.Boolean)">
      <summary vsli:raw="Returns the interface implemented (directly or indirectly) by this class with the fully qualified name matching the given interface name.">指定されたインターフェイス名に一致する完全修飾名を名前とする、このクラスによって (直接的または間接的に) 実装されるインターフェイスを返します。</summary>
      <param name="name" vsli:raw="The name of the interface.">インターフェイスの名前。</param>
      <param name="ignoreCase" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the search is case-insensitive. If &lt;see langword=&quot;false&quot; /&gt;, the search is case-sensitive.">
        <see langword="true" />の場合、検索では、大文字と小文字を区別しません。 <see langword="false" /> の場合、検索では、大文字と小文字が区別されます。</param>
      <returns vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the implemented interface. Returns null if no interface matching name is found.">実装されているインターフェイスを表す <see cref="T:System.Type" /> オブジェクトを返します。 インターフェイスの一致する名前が見つからない場合、null を返します。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">不完全な型では、このメソッドは実装されません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaceMap(System.Type)">
      <summary vsli:raw="Returns an interface mapping for the requested interface.">要求されたインターフェイスに対するインターフェイス マップを返します。</summary>
      <param name="interfaceType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the interface for which the mapping is to be retrieved.">マッピングの取得対象のインターフェイスの <see cref="T:System.Type" />。</param>
      <returns vsli:raw="Returns the requested interface mapping.">要求されたインターフェイス マップを返します。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">不完全な型では、このメソッドは実装されません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaces">
      <summary vsli:raw="Returns an array of all the interfaces implemented on this type and its base types.">この型とその基本型に実装されているすべてのインターフェイスの配列を返します。</summary>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the implemented interfaces. If none are defined, an empty array is returned.">実装されているインターフェイスを表す <see cref="T:System.Type" /> オブジェクトの配列を返します。 何も定義されていない場合は、空の配列が返されます。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public members declared or inherited by this type, as specified.">指定のとおりに、この型によって宣言または継承されたパブリック メンバーと非パブリック メンバーをすべて返します。</summary>
      <param name="name" vsli:raw="The name of the member.">メンバーの名前。</param>
      <param name="type" vsli:raw="The type of the member to return.">返すメンバーの型。</param>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">これは <see langword="InvokeMethod" /> や <see langword="NonPublic" /> などにある、<see cref="T:System.Reflection.BindingFlags" /> からのビット フラグでなければなりません。</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects representing the public and non-public members defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public members are returned.">
        <paramref name="nonPublic" /> が使用されている場合、この型で定義されているパブリック メンバーと非パブリック メンバーを表す <see cref="T:System.Reflection.MemberInfo" /> オブジェクトの配列を返します。それ以外の場合、パブリック メンバーのみが返されます。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">不完全な型では、このメソッドは実装されません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the members for the public and non-public members declared or inherited by this type.">この型によって宣言または継承されたパブリック メンバーと非パブリック メンバーをすべて返します。</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">これは <see langword="InvokeMethod" /> や <see langword="NonPublic" /> などの、<see cref="T:System.Reflection.BindingFlags" /> からのビット フラグでなければなりません。</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members.">この型で宣言または継承されているパブリック メンバーと非パブリック メンバーを表す <see cref="T:System.Reflection.MemberInfo" /> オブジェクトの配列を返します。 一致するメンバーがない場合は、空の配列が返されます。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">不完全な型では、このメソッドは実装されません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethod(System.Type,System.Reflection.MethodInfo)">
      <summary vsli:raw="Returns the method of the specified constructed generic type that corresponds to the specified method of the generic type definition.">ジェネリック型定義の指定されたメソッドに対応する、指定の構築されたジェネリック型のメソッドを返します。</summary>
      <param name="type" vsli:raw="The constructed generic type whose method is returned.">メソッドが返される構築されたジェネリック型。</param>
      <param name="method" vsli:raw="A method on the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;, which specifies which method of &lt;paramref name=&quot;type&quot; /&gt; to return.">返す <paramref name="type" /> のメソッドを指定する、<paramref name="type" /> のジェネリック型定義のメソッド。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object that represents the method of &lt;paramref name=&quot;type&quot; /&gt; corresponding to &lt;paramref name=&quot;method&quot; /&gt;, which specifies a method belonging to the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="type" /> のジェネリック型定義に属するメソッドを指定する、<paramref name="method" /> に対応する <paramref name="type" /> のメソッドを表す <see cref="T:System.Reflection.MethodInfo" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is a generic method that is not a generic method definition.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; does not represent a generic type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is not of type &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;method&quot; /&gt; is not a generic type definition.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;method&quot; /&gt; is not the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="method" /> はジェネリック メソッド定義ではないジェネリック メソッドです。  

または - 
<paramref name="type" /> がジェネリック型を表していません。  

または - 
<paramref name="type" /> が <see cref="T:System.Reflection.Emit.TypeBuilder" />型ではありません。  

または - 
<paramref name="method" /> の宣言する型はジェネリック型定義ではありません。  

または - 
<paramref name="method" /> の宣言する型は <paramref name="type" /> のジェネリック型定義ではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public methods declared or inherited by this type, as specified.">指定のとおりに、この型によって宣言または継承されたパブリック メソッドと非パブリック メソッドをすべて返します。</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">これは <see langword="InvokeMethod" /> や <see langword="NonPublic" /> などにある、<see cref="T:System.Reflection.BindingFlags" /> からのビット フラグでなければなりません。</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; objects representing the public and non-public methods defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public methods are returned.">
        <paramref name="nonPublic" /> が使用されている場合、この型で定義されているパブリック メソッドと非パブリック メソッドを表す <see cref="T:System.Reflection.MethodInfo" /> オブジェクトの配列を返します。それ以外の場合、パブリック メソッドのみが返されます。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">不完全な型では、このメソッドは実装されません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public nested types that are declared by this type.">この型によって宣言されている、入れ子にされたパブリック型とパブリックでない型を返します。</summary>
      <param name="name" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the nested type to get.">取得対象の入れ子にされた型の名前を格納している <see cref="T:System.String" />。</param>
      <param name="bindingAttr" vsli:raw="A bitmask comprised of one or more &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; that specify how the search is conducted.  &#xA;  &#xA; -or-  &#xA;  &#xA; Zero, to conduct a case-sensitive search for public methods.">検索の実行方法を指定する 1 つ以上の <see cref="T:System.Reflection.BindingFlags" /> から成るビットマスク。  

または - 
大文字小文字を区別してパブリック メソッドの検索を行う場合は 0。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the nested type that matches the specified requirements, if found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">指定した要件と一致し、入れ子にされた型が存在する場合は、その型を表す <see cref="T:System.Type" /> オブジェクト。それ以外の場合は <see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">不完全な型では、このメソッドは実装されません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public nested types that are declared or inherited by this type.">この型で宣言または継承されている入れ子にされたパブリック型とパブリックでない型を返します。</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">これは <see langword="InvokeMethod" /> や <see langword="NonPublic" /> などにある、<see cref="T:System.Reflection.BindingFlags" /> からのビット フラグでなければなりません。</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing all the types nested within the current &lt;see cref=&quot;T:System.Type&quot; /&gt; that match the specified binding constraints.  &#xA;  &#xA; An empty array of type &lt;see cref=&quot;T:System.Type&quot; /&gt;, if no types are nested within the current &lt;see cref=&quot;T:System.Type&quot; /&gt;, or if none of the nested types match the binding constraints.">現在の <see cref="T:System.Type" /> 内で入れ子にされた型のうち、指定したバインディング制約に一致するすべての型を表す <see cref="T:System.Type" /> オブジェクトの配列。  
現在の <see cref="T:System.Type" /> 内で型が入れ子にされていないか、または入れ子にされた型の中にバインディング制約に一致するものが存在しない場合は、<see cref="T:System.Type" /> 型の空の配列。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">不完全な型では、このメソッドは実装されません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public properties declared or inherited by this type, as specified.">指定のとおりに、この型によって宣言または継承されたパブリック プロパティと非パブリック プロパティをすべて返します。</summary>
      <param name="bindingAttr" vsli:raw="This invocation attribute. This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">この呼び出しの属性。 これは <see langword="InvokeMethod" /> や <see langword="NonPublic" /> など、<see cref="T:System.Reflection.BindingFlags" /> からのビット フラグでなければなりません。</param>
      <returns vsli:raw="Returns an array of &lt;see langword=&quot;PropertyInfo&quot; /&gt; objects representing the public and non-public properties defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public properties are returned.">
        <paramref name="nonPublic" /> が使用されている場合、この型で定義されているパブリック プロパティと非パブリック プロパティを表す <see langword="PropertyInfo" /> オブジェクトの配列を返します。 それ以外の場合、パブリック プロパティのみが返されます。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">不完全な型では、このメソッドは実装されません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GUID">
      <summary vsli:raw="Retrieves the GUID of this type.">この型の GUID を取得します。</summary>
      <returns vsli:raw="Read-only. Retrieves the GUID of this type.">読み取り専用。 この型の GUID を取得します。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types.">不完全な型では、このメソッドは現在サポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary vsli:raw="Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.">指定したメンバーを呼び出します。 呼び出すメソッドはアクセス可能でなければならず、指定したバインダーと呼び出し属性の制約の下で、指定された引数リストに対する一致の特定性が最高のものでなければなりません。</summary>
      <param name="name" vsli:raw="The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.">呼び出すメンバーの名前。 コンストラクター、メソッド、プロパティ、またはフィールドを指定できます。 適切な呼び出し属性を指定する必要があります。 メンバーの名前として空の文字列を渡すことによって、クラスの既定のメンバーを呼び出せることにご注意ください。</param>
      <param name="invokeAttr" vsli:raw="The invocation attribute. This must be a bit flag from &lt;see langword=&quot;BindingFlags&quot; /&gt;.">呼び出し属性。 これは <see langword="BindingFlags" /> からのビット フラグでなければなりません。</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If binder is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used. See &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt;.">バインディング、引数型の強制変換、メンバーの呼び出し、および、リフレクションを使用した <see langword="MemberInfo" /> オブジェクトの取得を有効にするオブジェクト。 バインダーが <see langword="null" />の場合は、既定のバインダーが使用されます。 以下を参照してください。<see cref="T:System.Reflection.Binder" /></param>
      <param name="target" vsli:raw="The object on which to invoke the specified member. If the member is static, this parameter is ignored.">指定したメンバーを呼び出す対象となるオブジェクト。 メンバーが静的な場合、このパラメーターは無視されます。</param>
      <param name="args" vsli:raw="An argument list. This is an array of Objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null.">引数リスト。 これは、呼び出されるメンバーのパラメーターの数、順序、および型を含むオブジェクトの配列です。 パラメーターがない場合は、これは null である必要があります。</param>
      <param name="modifiers" vsli:raw="An array of the same length as &lt;paramref name=&quot;args&quot; /&gt; with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for more details.">
        <paramref name="args" /> と同じ長さの配列であり、その要素は、呼び出されるメンバーの引数に関連付けられた属性を表します。 メタデータの中でパラメーターには属性が関連付けられています。 これらは、さまざまな相互運用サービスで使用されます。 詳細については、メタデータの仕様を参照してください。</param>
      <param name="culture" vsli:raw="An instance of &lt;see langword=&quot;CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see langword=&quot;CultureInfo&quot; /&gt; for the current thread is used. (Note that this is necessary to, for example, convert a String that represents 1000 to a Double value, since 1000 is represented differently by different cultures.)">型の強制変換を制御するために使用する <see langword="CultureInfo" /> のインスタンス。 null の場合は、現在のスレッドの <see langword="CultureInfo" /> が使用されます。 (これは、たとえば、1000 を表す String を Double 値に変換する場合に必要であることに注意ください。これは、カルチャによって 1000 の表記が異なるためです。)</param>
      <param name="namedParameters" vsli:raw="Each parameter in the &lt;paramref name=&quot;namedParameters&quot; /&gt; array gets the value in the corresponding element in the &lt;paramref name=&quot;args&quot; /&gt; array. If the length of &lt;paramref name=&quot;args&quot; /&gt; is greater than the length of &lt;paramref name=&quot;namedParameters&quot; /&gt;, the remaining argument values are passed in order.">
        <paramref name="namedParameters" /> 配列の各パラメーターは、<paramref name="args" /> 配列内の対応する要素の値を取得します。 <paramref name="args" /> の長さが <paramref name="namedParameters" /> の長さより大きい場合、残りの引数の値は順番に渡されます。</param>
      <returns vsli:raw="Returns the return value of the invoked member.">呼び出されたメンバーの戻り値を返します。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types.">不完全な型では、このメソッドは現在サポートされていません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Type)">
      <summary vsli:raw="Gets a value that indicates whether a specified &lt;see cref=&quot;T:System.Type&quot; /&gt; can be assigned to this object.">指定された <see cref="T:System.Type" /> をこのオブジェクトに割り当てることができるかどうかを示す値を取得します。</summary>
      <param name="c" vsli:raw="The object to test.">テストするオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;c&quot; /&gt; parameter and the current type represent the same type, or if the current type is in the inheritance hierarchy of &lt;paramref name=&quot;c&quot; /&gt;, or if the current type is an interface that &lt;paramref name=&quot;c&quot; /&gt; supports. &lt;see langword=&quot;false&quot; /&gt; if none of these conditions are valid, or if &lt;paramref name=&quot;c&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="c" /> パラメーターと現在の型が同じ型を表す場合、現在の型が <paramref name="c" /> の継承階層内にある場合、または現在の型が <paramref name="c" /> によってサポートされるインターフェイスである場合は <see langword="true" />。 これらの条件がいずれも当てはまらない場合、または <paramref name="c" /> が <see langword="null" /> である場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsConstructedGenericType">
      <summary vsli:raw="Gets a value that indicates whether this object represents a constructed generic type.">このオブジェクトが構築ジェネリック型かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object represents a constructed generic type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このオブジェクトが構築ジェネリック型を表している場合は<see langword="true" /> 。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsCreated">
      <summary vsli:raw="Returns a value that indicates whether the current dynamic type has been created.">現在の動的な型が作成されたかどうかを示す値を返します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method has been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> メソッドが呼び出された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Determines whether a custom attribute is applied to the current type.">カスタム属性が現在の型に適用されるかどうかを判断します。</summary>
      <param name="attributeType" vsli:raw="The type of attribute to search for. Only attributes that are assignable to this type are returned.">検索する属性の種類。 この型に代入可能な属性だけが返されます。</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">このメンバーの継承チェーンを検索して属性を見つけるかどうかを指定します。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instances of &lt;paramref name=&quot;attributeType&quot; /&gt;, or an attribute derived from &lt;paramref name=&quot;attributeType&quot; /&gt;, is defined on this type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="attributeType" /> の 1 つ以上のインスタンス、または <paramref name="attributeType" /> から派生する属性がこの型で定義されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types. Retrieve the type using &lt;see cref=&quot;M:System.Type.GetType&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Type&quot; /&gt;.">不完全な型では、このメソッドは現在サポートされていません。 <see cref="M:System.Type.GetType" /> を使用して型を取得し、返された <see cref="T:System.Type" /> で <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> を呼び出します。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is not defined.">
        <paramref name="attributeType" /> が定義されていません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericParameter">
      <summary vsli:raw="Gets a value indicating whether the current type is a generic type parameter.">現在の型がジェネリック型パラメーターかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object represents a generic type parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在の <see cref="T:System.Reflection.Emit.TypeBuilder" /> オブジェクトがジェネリック型パラメーターを表している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericType">
      <summary vsli:raw="Gets a value indicating whether the current type is a generic type.">現在の型がジェネリック型かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type represented by the current &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object is generic; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在の <see cref="T:System.Reflection.Emit.TypeBuilder" /> オブジェクトによって表される型がジェネリックの場合、<see langword="true" />。それ以外の場合、<see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition">
      <summary vsli:raw="Gets a value indicating whether the current &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; represents a generic type definition from which other generic types can be constructed.">現在の <see cref="T:System.Reflection.Emit.TypeBuilder" /> が、他のジェネリック型を構築できるジェネリック型の定義を表しているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object represents a generic type definition; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">この <see cref="T:System.Reflection.Emit.TypeBuilder" /> オブジェクトがジェネリック型定義を表している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecurityCritical">
      <summary vsli:raw="Gets a value that indicates whether the current type is security-critical or security-safe-critical, and therefore can perform critical operations.">現在の型がセキュリティ クリティカルまたはセキュリティ セーフ クリティカルであり、重要な操作を実行できるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current type is security-critical or security-safe-critical; &lt;see langword=&quot;false&quot; /&gt; if it is transparent.">現在の型がセキュリティ クリティカルまたはセキュリティ セーフ クリティカルである場合は <see langword="true" />。現在の型が透過的な場合は <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The current dynamic type has not been created by calling the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.">現在の動的な型は、<see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> メソッドを呼び出して作成された型ではありません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical">
      <summary vsli:raw="Gets a value that indicates whether the current type is security-safe-critical; that is, whether it can perform critical operations and can be accessed by transparent code.">現在の型がセキュリティ セーフ クリティカルであり、重要な操作を実行でき、透過的なコードからアクセスできるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current type is security-safe-critical; &lt;see langword=&quot;false&quot; /&gt; if it is security-critical or transparent.">現在の型がセキュリティ セーフ クリティカルである場合は <see langword="true" />。現在の型がセキュリティ クリティカルまたは透過的な場合は <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The current dynamic type has not been created by calling the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.">現在の動的な型は、<see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> メソッドを呼び出して作成された型ではありません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent">
      <summary vsli:raw="Gets a value that indicates whether the current type is transparent, and therefore cannot perform critical operations.">現在の型が透過的であり、重要な操作を実行できないかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is security-transparent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">型が透過的セキュリティの場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The current dynamic type has not been created by calling the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.">現在の動的な型は、<see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> メソッドを呼び出して作成された型ではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsSubclassOf(System.Type)">
      <summary vsli:raw="Determines whether this type is derived from a specified type.">この型が指定した型から派生したものかどうかを判断します。</summary>
      <param name="c" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that is to be checked.">チェックする <see cref="T:System.Type" />。</param>
      <returns vsli:raw="Read-only. Returns &lt;see langword=&quot;true&quot; /&gt; if this type is the same as the type &lt;paramref name=&quot;c&quot; /&gt;, or is a subtype of type &lt;paramref name=&quot;c&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">読み取り専用。 この型が型 <paramref name="c" /> と同じ場合、または型 <paramref name="c" /> のサブタイプである場合は、<see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsVariableBoundArray" />
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a one-dimensional array of the current type, with a lower bound of zero.">下限を 0 に設定して現在の型の 1 次元配列を表す <see cref="T:System.Type" /> オブジェクトを返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing a one-dimensional array type whose element type is the current type, with a lower bound of zero.">下限を 0 に設定して要素型が現在の型である 1 次元配列を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents an array of the current type, with the specified number of dimensions.">次元数を指定して現在の型の配列を表す <see cref="T:System.Type" /> オブジェクトを返します。</summary>
      <param name="rank" vsli:raw="The number of dimensions for the array.">配列の次元数。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a one-dimensional array of the current type.">現在の型の 1 次元配列を表す <see cref="T:System.Type" /> オブジェクト。</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;rank&quot; /&gt; is not a valid array dimension.">
        <paramref name="rank" /> は有効な配列の次元ではありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeByRefType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current type when passed as a &lt;see langword=&quot;ref&quot; /&gt; parameter (&lt;see langword=&quot;ByRef&quot; /&gt; in Visual Basic).">
        <see langword="ref" /> パラメーター (Visual Basic の場合は <see langword="ByRef" />) として渡されるときに現在の型を表す <see cref="T:System.Type" /> オブジェクトを返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current type when passed as a &lt;see langword=&quot;ref&quot; /&gt; parameter (&lt;see langword=&quot;ByRef&quot; /&gt; in Visual Basic).">
        <see langword="ref" /> パラメーター (Visual Basic の場合は <see langword="ByRef" />) として渡されるときに現在の型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])">
      <summary vsli:raw="Substitutes the elements of an array of types for the type parameters of the current generic type definition, and returns the resulting constructed type.">型の配列の要素を現在のジェネリック型定義の型パラメーターで置き換え、結果の構築型を返します。</summary>
      <param name="typeArguments" vsli:raw="An array of types to be substituted for the type parameters of the current generic type definition.">現在のジェネリック型定義の型パラメーターに置き換えられる型の配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; representing the constructed type formed by substituting the elements of &lt;paramref name=&quot;typeArguments&quot; /&gt; for the type parameters of the current generic type.">
        <paramref name="typeArguments" /> の要素を現在のジェネリック型の型パラメーターで置き換えることによって作られる構築型を表す <see cref="T:System.Type" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current type does not represent the definition of a generic type. That is, &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; returns &lt;see langword=&quot;false&quot; /&gt;.">現在の型はジェネリック型の定義を表していません。 つまり、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> は <see langword="false" /> を返します。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeArguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Any element of &lt;paramref name=&quot;typeArguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeArguments" /> は <see langword="null" />です。  
または 
<paramref name="typeArguments" /> のどの要素も <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Type.Module&quot; /&gt; property of any element of &lt;paramref name=&quot;typeArguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Reflection.Module.Assembly&quot; /&gt; property of the module of any element of &lt;paramref name=&quot;typeArguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeArguments" /> のどの要素の <see cref="P:System.Type.Module" /> プロパティも <see langword="null" /> です。  

または - 
<paramref name="typeArguments" /> のどの要素のモジュールの <see cref="P:System.Reflection.Module.Assembly" /> プロパティも <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakePointerType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of an unmanaged pointer to the current type.">現在の型を指すアンマネージ ポインターの型を表す <see cref="T:System.Type" /> オブジェクトを返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of an unmanaged pointer to the current type.">現在の型を指すアンマネージ ポインターの型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Module">
      <summary vsli:raw="Retrieves the dynamic module that contains this type definition.">この型定義を含む動的モジュールを取得します。</summary>
      <returns vsli:raw="Read-only. Retrieves the dynamic module that contains this type definition.">読み取り専用。 この型定義を含む動的モジュールを取得します。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Name">
      <summary vsli:raw="Retrieves the name of this type.">この型の名前を取得します。</summary>
      <returns vsli:raw="Read-only. Retrieves the &lt;see cref=&quot;T:System.String&quot; /&gt; name of this type.">読み取り専用。 この型の <see cref="T:System.String" /> 名を取得します。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Namespace">
      <summary vsli:raw="Retrieves the namespace where this &lt;see langword=&quot;TypeBuilder&quot; /&gt; is defined.">この <see langword="TypeBuilder" /> が定義されている名前空間を取得します。</summary>
      <returns vsli:raw="Read-only. Retrieves the namespace where this &lt;see langword=&quot;TypeBuilder&quot; /&gt; is defined.">読み取り専用。 この <see langword="TypeBuilder" /> が定義されている名前空間を取得します。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.PackingSize">
      <summary vsli:raw="Retrieves the packing size of this type.">この型のパッキング サイズを取得します。</summary>
      <returns vsli:raw="Read-only. Retrieves the packing size of this type.">読み取り専用。 この型のパッキング サイズを取得します。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.ReflectedType">
      <summary vsli:raw="Returns the type that was used to obtain this type.">この型を取得するために使用された型を返します。</summary>
      <returns vsli:raw="Read-only. The type that was used to obtain this type.">読み取り専用。 この型を取得するために使用された型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">指定されたカスタム属性の blob を使用して、カスタム属性を設定します。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">カスタム属性のコンストラクター。</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">属性を表すバイト blob。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> または <paramref name="binaryAttribute" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">現在の動的な型では、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">カスタム属性ビルダーを使用して、カスタム属性を設定します。</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">カスタム属性を定義するヘルパー クラスのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">現在の動的な型では、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> プロパティは <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetParent(System.Type)">
      <summary vsli:raw="Sets the base type of the type currently under construction.">現在作成中の型の基本型を設定します。</summary>
      <param name="parent" vsli:raw="The new base type.">新しい基本型。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;parent&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the current instance represents an interface whose attributes do not include &lt;see cref=&quot;F:System.Reflection.TypeAttributes.Abstract&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">型は <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> を使用して既に作成されました。  
または 
 <paramref name="parent" /> が <see langword="null" /> で、現在のインスタンスが <see cref="F:System.Reflection.TypeAttributes.Abstract" /> を含まない属性のインターフェイスを表します。  
または 
現在の動的な型では、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> プロパティは <see langword="true" /> ですが、<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> プロパティは <see langword="false" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;parent&quot; /&gt; is an interface. This exception condition is new in the .NET Framework version 2.0.">
        <paramref name="parent" /> がインターフェイスです。 この例外条件は、.NET Framework Version 2.0 で新しく追加されたものです。</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Size">
      <summary vsli:raw="Retrieves the total size of a type.">型の合計サイズを取得します。</summary>
      <returns vsli:raw="Read-only. Retrieves this type's total size.">読み取り専用。 この型の合計サイズを取得します。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.ToString">
      <summary vsli:raw="Returns the name of the type excluding the namespace.">名前空間を含まない型の名前を返します。</summary>
      <returns vsli:raw="Read-only. The name of the type excluding the namespace.">読み取り専用。 名前空間を含まない型の名前。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.TypeHandle">
      <summary vsli:raw="Not supported in dynamic modules.">動的モジュールではサポートされていません。</summary>
      <returns vsli:raw="Read-only.">読み取り専用。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Not supported in dynamic modules.">動的モジュールではサポートされていません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.UnderlyingSystemType">
      <summary vsli:raw="Returns the underlying system type for this &lt;see langword=&quot;TypeBuilder&quot; /&gt;.">この <see langword="TypeBuilder" /> の基になるシステム型を返します。</summary>
      <returns vsli:raw="Read-only. Returns the underlying system type.">読み取り専用。 基になるシステム型を返します。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This type is an enumeration, but there is no underlying system type.">この型は列挙型ですが、基になるシステム型はありません。</exception>
    </member>
    <member name="F:System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize">
      <summary vsli:raw="Represents that total size for the type is not specified.">この型の合計サイズが指定されていないことを表します。</summary>
    </member>
  </members>
</doc>
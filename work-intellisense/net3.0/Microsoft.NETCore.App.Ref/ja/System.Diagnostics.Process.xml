<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Diagnostics.Process</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Win32.SafeHandles.SafeProcessHandle">
      <summary>プロセス ハンドルのためのマネージド ラッパーを提供します。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeProcessHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>最終処理中にハンドルを解放するかどうかを示すために、<see cref="T:Microsoft.Win32.SafeHandles.SafeProcessHandle" /> クラスの新しいインスタンスを指定のハンドルから初期化します。</summary>
      <param name="existingHandle">ラップされるハンドル。</param>
      <param name="ownsHandle">終了処理中 <see cref="T:Microsoft.Win32.SafeHandles.SafeProcessHandle" /> にハンドルを確実に解放させる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.SafeProcessHandle.IsInvalid" />
    <member name="T:System.Diagnostics.DataReceivedEventArgs">
      <summary>
        <see cref="E:System.Diagnostics.Process.OutputDataReceived" /> イベントおよび <see cref="E:System.Diagnostics.Process.ErrorDataReceived" /> イベントのデータを提供します。</summary>
    </member>
    <member name="P:System.Diagnostics.DataReceivedEventArgs.Data">
      <summary>リダイレクトされた <see cref="T:System.Diagnostics.Process" /> 出力ストリームに書き込まれた文字の行を取得します。</summary>
      <returns>関連する <see cref="T:System.Diagnostics.Process" /> によって、リダイレクトされた <see cref="P:System.Diagnostics.Process.StandardOutput" /> または <see cref="P:System.Diagnostics.Process.StandardError" /> ストリームに書き込まれた行。</returns>
    </member>
    <member name="T:System.Diagnostics.DataReceivedEventHandler">
      <summary>
        <see cref="E:System.Diagnostics.Process.OutputDataReceived" /> の <see cref="E:System.Diagnostics.Process.ErrorDataReceived" /> イベントまたは <see cref="T:System.Diagnostics.Process" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データを格納している <see cref="T:System.Diagnostics.DataReceivedEventArgs" />。</param>
    </member>
    <member name="T:System.Diagnostics.MonitoringDescriptionAttribute">
      <summary>プロパティまたはイベントの説明文を指定します。</summary>
    </member>
    <member name="M:System.Diagnostics.MonitoringDescriptionAttribute.#ctor(System.String)">
      <summary>説明を指定して、<see cref="T:System.Diagnostics.MonitoringDescriptionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="description">アプリケーション定義の説明テキスト。</param>
    </member>
    <member name="P:System.Diagnostics.MonitoringDescriptionAttribute.Description">
      <summary>監視する項目に関連付けられている説明テキストを取得します。</summary>
      <returns>アプリケーション定義の説明。</returns>
    </member>
    <member name="T:System.Diagnostics.Process">
      <summary>ローカル プロセスやリモート プロセスへのアクセスを提供し、ローカル システム プロセスの起動と停止ができるようにします。</summary>
    </member>
    <member name="M:System.Diagnostics.Process.#ctor">
      <summary>
        <see cref="T:System.Diagnostics.Process" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Diagnostics.Process.BasePriority">
      <summary>関連付けられたプロセスの基本優先順位を取得します。</summary>
      <returns>関連付けられたプロセスの <see cref="P:System.Diagnostics.Process.PriorityClass" /> から算出される基本優先順位。</returns>
      <exception cref="T:System.InvalidOperationException">プロセスが終了しています。  
 または  
 プロセスが開始されていないため、プロセス ID はありません。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.BeginErrorReadLine">
      <summary>アプリケーションのリダイレクトされた <see cref="P:System.Diagnostics.Process.StandardError" /> ストリームで、非同期読み取り操作を開始します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> プロパティが <see langword="false" /> である。  

または - 
<see cref="P:System.Diagnostics.Process.StandardError" /> ストリームで非同期読み取り操作は既に実行されています。  

または 
<see cref="P:System.Diagnostics.Process.StandardError" /> ストリームは、同期読み取り操作によって使用されています。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.BeginOutputReadLine">
      <summary>アプリケーションのリダイレクトされた <see cref="P:System.Diagnostics.Process.StandardOutput" /> ストリームで、非同期読み取り操作を開始します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> プロパティが <see langword="false" /> である。  

または - 
<see cref="P:System.Diagnostics.Process.StandardOutput" /> ストリームで非同期読み取り操作は既に実行されています。  

または 
<see cref="P:System.Diagnostics.Process.StandardOutput" /> ストリームは、同期読み取り操作によって使用されています。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.CancelErrorRead">
      <summary>アプリケーションのリダイレクトされた <see cref="P:System.Diagnostics.Process.StandardError" /> ストリームで、非同期読み取り操作をキャンセルします。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.Process.StandardError" /> ストリームは、非同期読み取り操作では有効になっていません。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.CancelOutputRead">
      <summary>アプリケーションのリダイレクトされた <see cref="P:System.Diagnostics.Process.StandardOutput" /> ストリームで、非同期読み取り操作をキャンセルします。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.Process.StandardOutput" /> ストリームは、非同期読み取り操作では有効になっていません。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.Close">
      <summary>このコンポーネントに関連付けられているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Diagnostics.Process.CloseMainWindow">
      <summary>メイン ウィンドウにクローズ メッセージを送信して、ユーザー インターフェイスがあるプロセスを終了します。</summary>
      <returns>クローズ メッセージが正常に送信された場合は <see langword="true" />。関連付けられたプロセスにメイン ウィンドウがない場合、またはメイン ウィンドウが使用できない場合 (モーダル ダイアログ ボックスが表示されているときなど) は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">プロセスは既に終了しています。  

または - 
この <see cref="T:System.Diagnostics.Process" /> オブジェクトに関連付けられているプロセスはありません。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.Dispose(System.Boolean)">
      <summary>このプロセスによって使用されているすべてのリソースを解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.Diagnostics.Process.EnableRaisingEvents">
      <summary>プロセスが終了したときに、<see cref="E:System.Diagnostics.Process.Exited" /> イベントを発生させるかどうかを取得または設定します。</summary>
      <returns>正常終了または <see cref="M:System.Diagnostics.Process.Kill" /> の呼び出しによって関連付けられたプロセスが終了したときに <see cref="E:System.Diagnostics.Process.Exited" /> イベントを発生させる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。 の値が<see cref="E:System.Diagnostics.Process.Exited" /><see cref="P:System.Diagnostics.Process.EnableRaisingEvents" /><see cref="P:System.Diagnostics.Process.HasExited" />の場合、またはユーザーがチェックを実行する前にプロセスが終了した場合でも、イベントが発生することに注意してください。 <see langword="false" /></returns>
    </member>
    <member name="M:System.Diagnostics.Process.EnterDebugMode">
      <summary>現在のスレッドのネイティブ プロパティ <see langword="SeDebugPrivilege" /> を有効にすることにより、<see cref="T:System.Diagnostics.Process" /> コンポーネントを、特殊なモードで実行されているオペレーティング システム プロセスと対話する状態にします。</summary>
    </member>
    <member name="E:System.Diagnostics.Process.ErrorDataReceived">
      <summary>アプリケーションがリダイレクトされた <see cref="P:System.Diagnostics.Process.StandardError" /> ストリームに書き込む場合に発生します。</summary>
    </member>
    <member name="P:System.Diagnostics.Process.ExitCode">
      <summary>関連付けられたプロセスが終了したときにプロセスによって指定された値を取得します。</summary>
      <returns>関連付けられたプロセスが終了したときにプロセスによって指定されたコード。</returns>
      <exception cref="T:System.InvalidOperationException">プロセスは終了していません。  

または - 
プロセス <see cref="P:System.Diagnostics.Process.Handle" /> は終了していません。</exception>
      <exception cref="T:System.NotSupportedException">リモート コンピューターで実行中のプロセスの <see cref="P:System.Diagnostics.Process.ExitCode" /> プロパティにアクセスしようとしています。 このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</exception>
    </member>
    <member name="E:System.Diagnostics.Process.Exited">
      <summary>プロセスが終了したときに発生します。</summary>
    </member>
    <member name="P:System.Diagnostics.Process.ExitTime">
      <summary>関連付けられたプロセスが終了した時刻を取得します。</summary>
      <returns>関連付けられたプロセスが終了した時刻を示す <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.NotSupportedException">リモート コンピューターで実行中のプロセスの <see cref="P:System.Diagnostics.Process.ExitTime" /> プロパティにアクセスしようとしています。 このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.GetCurrentProcess">
      <summary>新しい <see cref="T:System.Diagnostics.Process" /> コンポーネントを取得し、現在アクティブなプロセスに関連付けます。</summary>
      <returns>呼び出し元のアプリケーションを実行しているプロセス リソースに関連付けられた新しい <see cref="T:System.Diagnostics.Process" /> コンポーネント。</returns>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcessById(System.Int32)">
      <summary>ローカル コンピューター上のプロセス ID が指定された新しい <see cref="T:System.Diagnostics.Process" /> コンポーネントを返します。</summary>
      <param name="processId">システムで一意なプロセス リソースの識別子。</param>
      <returns>
        <paramref name="processId" /> パラメーターで識別されるローカル プロセス リソースに関連付けられた <see cref="T:System.Diagnostics.Process" /> コンポーネント。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="processId" /> パラメーターで指定されたプロセスは実行されていません。 識別子の有効期限が切れている可能性があります。</exception>
      <exception cref="T:System.InvalidOperationException">このオブジェクトによってプロセスは開始されませんでした。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
      <summary>プロセス ID とネットワーク上のコンピューターの名前が指定された新しい <see cref="T:System.Diagnostics.Process" /> コンポーネントを返します。</summary>
      <param name="processId">システムで一意なプロセス リソースの識別子。</param>
      <param name="machineName">ネットワーク上のコンピューターの名前。</param>
      <returns>
        <paramref name="processId" /> パラメーターで識別されるリモート プロセス リソースに関連付けられた <see cref="T:System.Diagnostics.Process" /> コンポーネント。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="processId" /> パラメーターで指定されたプロセスは実行されていません。 識別子の有効期限が切れている可能性があります。  
または 
<paramref name="machineName" /> パラメーターの構文が正しくありません。 名前の長さがゼロ (0) の可能性があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="machineName" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">このオブジェクトによってプロセスは開始されませんでした。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcesses">
      <summary>ローカル コンピューター上の各プロセス リソースごとに新しい <see cref="T:System.Diagnostics.Process" /> コンポーネントを作成します。</summary>
      <returns>ローカル コンピューター上で実行されているすべてのプロセス リソースを表す <see cref="T:System.Diagnostics.Process" /> 型の配列。</returns>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcesses(System.String)">
      <summary>指定したコンピューター上の各プロセス リソースごとに新しい <see cref="T:System.Diagnostics.Process" /> コンポーネントを作成します。</summary>
      <param name="machineName">プロセスの一覧を読み取る対象のコンピューター。</param>
      <returns>指定したコンピューター上で実行されているすべてのプロセス リソースを表す <see cref="T:System.Diagnostics.Process" /> 型の配列。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="machineName" /> パラメーターの構文が正しくありません。 長さがゼロ (0) の可能性があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="machineName" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.PlatformNotSupportedException">リモート コンピューターに対してこの操作を実行することは、オペレーティング システム プラットフォームでサポートされていません。</exception>
      <exception cref="T:System.InvalidOperationException">プロセス情報を取得するために使用するパフォーマンス カウンター API へのアクセスに問題があります。 この例外は、Windows NT、Windows 2000、および Windows XP に固有のものです。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">基になるシステム API にアクセスしようとして、問題が発生しました。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcessesByName(System.String)">
      <summary>新しい <see cref="T:System.Diagnostics.Process" /> コンポーネントの配列を作成し、指定したプロセス名を共有するローカル コンピューター上のすべてのプロセス リソースに関連付けます。</summary>
      <param name="processName">プロセスのフレンドリ名。</param>
      <returns>指定したアプリケーションまたはファイルを実行しているプロセス リソースを表す <see cref="T:System.Diagnostics.Process" /> 型の配列。</returns>
      <exception cref="T:System.InvalidOperationException">プロセス情報を取得するために使用するパフォーマンス カウンター API へのアクセスに問題があります。 この例外は、Windows NT、Windows 2000、および Windows XP に固有のものです。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
      <summary>新しい <see cref="T:System.Diagnostics.Process" /> コンポーネントの配列を作成し、指定したプロセス名を共有するリモート コンピューター上のすべてのプロセス リソースに関連付けます。</summary>
      <param name="processName">プロセスのフレンドリ名。</param>
      <param name="machineName">ネットワーク上のコンピューターの名前。</param>
      <returns>指定したアプリケーションまたはファイルを実行しているプロセス リソースを表す <see cref="T:System.Diagnostics.Process" /> 型の配列。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="machineName" /> パラメーターの構文が正しくありません。 長さがゼロ (0) の可能性があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="machineName" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.PlatformNotSupportedException">リモート コンピューターに対してこの操作を実行することは、オペレーティング システム プラットフォームでサポートされていません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="machineName" /> に接続する試みが失敗しました。
または 
プロセス情報を取得するために使用するパフォーマンス カウンター API へのアクセスに問題があります。 この例外は、Windows NT、Windows 2000、および Windows XP に固有のものです。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">基になるシステム API にアクセスしようとして、問題が発生しました。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.Handle">
      <summary>関連付けられたプロセスのネイティブ ハンドルを取得します。</summary>
      <returns>関連付けられたプロセスを起動したときに、オペレーティング システムがプロセスに割り当てたハンドル。 システムはこのハンドルを使用して、プロセス属性の追跡を続けます。</returns>
      <exception cref="T:System.InvalidOperationException">プロセスが開始されていないか、終了しました。 この <see cref="T:System.Diagnostics.Process" /> インスタンスにプロセスが関連付けられていないので、<see cref="P:System.Diagnostics.Process.Handle" /> プロパティを読み取ることができません。  

または - 
<see cref="T:System.Diagnostics.Process" /> インスタンスは実行中のプロセスにアタッチされていますが、フル アクセス権を持つハンドルを取得するために必要なアクセス許可がありません。</exception>
      <exception cref="T:System.NotSupportedException">リモート コンピューターで実行中のプロセスの <see cref="P:System.Diagnostics.Process.Handle" /> プロパティにアクセスしようとしています。 このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.HandleCount">
      <summary>プロセスが開いたハンドルの数を取得します。</summary>
      <returns>プロセスが開いたオペレーティング システム ハンドルの数。</returns>
    </member>
    <member name="P:System.Diagnostics.Process.HasExited">
      <summary>関連付けられているプロセスが終了したかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Diagnostics.Process" /> コンポーネントが参照するオペレーティング システム プロセスが終了している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">オブジェクトに関連付けられているプロセスはありません。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">プロセスの終了コードを取得できませんでした。</exception>
      <exception cref="T:System.NotSupportedException">リモート コンピューターで実行中のプロセスの <see cref="P:System.Diagnostics.Process.HasExited" /> プロパティにアクセスしようとしています。 このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.Id">
      <summary>関連付けられたプロセスの一意の識別子を取得します。</summary>
      <returns>この <see cref="T:System.Diagnostics.Process" /> インスタンスが参照する、システムが生成したプロセスの一意の識別子。</returns>
      <exception cref="T:System.InvalidOperationException">プロセスの <see cref="P:System.Diagnostics.Process.Id" /> プロパティが設定されていません。  

または - 
この <see cref="T:System.Diagnostics.Process" /> オブジェクトに関連付けられているプロセスはありません。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.Kill">
      <summary>関連付けられたプロセスを即時中断します。</summary>
      <exception cref="T:System.ComponentModel.Win32Exception">関連付けられたプロセスを終了できませんでした。  
 または  
 プロセスを終了しています。</exception>
      <exception cref="T:System.NotSupportedException">リモート コンピューターで実行されているプロセスの <see cref="M:System.Diagnostics.Process.Kill" /> を呼び出そうとしています。 このメソッドはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</exception>
      <exception cref="T:System.InvalidOperationException">プロセスは既に終了しています。  
または 
この <see cref="T:System.Diagnostics.Process" /> オブジェクトに関連付けられているプロセスはありません。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.Kill(System.Boolean)">
      <summary>関連付けられているプロセスと、任意で、その子/子孫プロセスを直ちに停止します。</summary>
      <param name="entireProcessTree">
        <see langword="true" /> の場合、関連付けられているプロセスとその子孫が中止されます。<see langword="false" /> の場合、関連付けられているプロセスのみが中止されます。</param>
      <exception cref="T:System.ComponentModel.Win32Exception">関連付けられたプロセスを終了できませんでした。  

または -  

 プロセスを終了しています。</exception>
      <exception cref="T:System.NotSupportedException">リモート コンピューターで実行されているプロセスの <see cref="M:System.Diagnostics.Process.Kill" /> を呼び出そうとしています。 このメソッドはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</exception>
      <exception cref="T:System.InvalidOperationException">プロセスは既に終了しています。  

または - 
この <see cref="T:System.Diagnostics.Process" /> オブジェクトに関連付けられているプロセスはありません。

または
呼び出しプロセスは、関連付けられているプロセスの子孫ツリーのメンバーです。</exception>
      <exception cref="T:System.AggregateException">関連付けられているプロセスの子孫ツリーの一部のプロセスを強制終了できませんでした。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.LeaveDebugMode">
      <summary>
        <see cref="T:System.Diagnostics.Process" /> コンポーネントを、特殊なモードで実行されているオペレーティング システム プロセスと対話する状態から解放します。</summary>
    </member>
    <member name="P:System.Diagnostics.Process.MachineName">
      <summary>関連付けられたプロセスを実行しているコンピューターの名前を取得します。</summary>
      <returns>関連付けられたプロセスを実行しているコンピューターの名前。</returns>
      <exception cref="T:System.InvalidOperationException">この <see cref="T:System.Diagnostics.Process" /> オブジェクトに関連付けられているプロセスはありません。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.MainModule">
      <summary>関連付けられたプロセスのメイン モジュールを取得します。</summary>
      <returns>プロセスを開始する際に使用した <see cref="T:System.Diagnostics.ProcessModule" />。</returns>
      <exception cref="T:System.NotSupportedException">リモート コンピューターで実行中のプロセスの <see cref="P:System.Diagnostics.Process.MainModule" /> プロパティにアクセスしようとしています。 このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">32 ビット プロセスが 64 ビット プロセスのモジュールにアクセスしようとしています。</exception>
      <exception cref="T:System.InvalidOperationException">プロセス <see cref="P:System.Diagnostics.Process.Id" /> が使用できません。  

または - 
プロセスが終了しています。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.MainWindowHandle">
      <summary>関連付けられたプロセスのメイン ウィンドウで使用するウィンドウ ハンドルを取得します。</summary>
      <returns>関連付けられたプロセスのメイン ウィンドウで使用する、システムが生成したウィンドウ ハンドル。</returns>
      <exception cref="T:System.InvalidOperationException">プロセスが終了したため、<see cref="P:System.Diagnostics.Process.MainWindowHandle" /> が定義されていません。</exception>
      <exception cref="T:System.NotSupportedException">リモート コンピューターで実行中のプロセスの <see cref="P:System.Diagnostics.Process.MainWindowHandle" /> プロパティにアクセスしようとしています。 このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.MainWindowTitle">
      <summary>プロセスのメイン ウィンドウのキャプションを取得します。</summary>
      <returns>プロセスのメイン ウィンドウのタイトル。</returns>
      <exception cref="T:System.InvalidOperationException">プロセスが終了したため、<see cref="P:System.Diagnostics.Process.MainWindowTitle" /> プロパティが定義されていません。</exception>
      <exception cref="T:System.NotSupportedException">リモート コンピューターで実行中のプロセスの <see cref="P:System.Diagnostics.Process.MainWindowTitle" /> プロパティにアクセスしようとしています。 このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.MaxWorkingSet">
      <summary>関連付けられたプロセスに許可されるワーキング セットの最大サイズ (バイト単位) を取得または設定します。</summary>
      <returns>プロセスに許可されるメモリ上のワーキング セットの最大サイズ (バイト単位)。</returns>
      <exception cref="T:System.ArgumentException">ワーキング セットの最大サイズが正しくありません。 この値は、ワーキング セットの最小サイズ以上である必要があります。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">関連付けられているプロセス リソースからワーキング セット情報を取得できません。  

または -  

 プロセスが開始されていないので、プロセス識別子またはプロセス ハンドルが 0 です。</exception>
      <exception cref="T:System.NotSupportedException">リモート コンピューターで実行中のプロセスの <see cref="P:System.Diagnostics.Process.MaxWorkingSet" /> プロパティにアクセスしようとしています。 このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</exception>
      <exception cref="T:System.InvalidOperationException">プロセス <see cref="P:System.Diagnostics.Process.Id" /> が使用できません。  

または - 
プロセスが終了しています。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.MinWorkingSet">
      <summary>関連付けられたプロセスに許可されるワーキング セットの最小サイズ (バイト単位) を取得または設定します。</summary>
      <returns>プロセスに必要なメモリ上のワーキング セットの最小サイズ (バイト単位)。</returns>
      <exception cref="T:System.ArgumentException">ワーキング セットの最小サイズが正しくありません。 この値は、ワーキング セットの最大サイズ以下にする必要があります。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">関連付けられているプロセス リソースからワーキング セット情報を取得できません。  
 または  
 プロセスが開始されていないので、プロセス識別子またはプロセス ハンドルが 0 です。</exception>
      <exception cref="T:System.NotSupportedException">リモート コンピューターで実行中のプロセスの <see cref="P:System.Diagnostics.Process.MinWorkingSet" /> プロパティにアクセスしようとしています。 このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</exception>
      <exception cref="T:System.InvalidOperationException">プロセス <see cref="P:System.Diagnostics.Process.Id" /> が使用できません。  

または - 
プロセスが終了しています。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.Modules">
      <summary>関連付けられたプロセスに読み込まれたモジュールを取得します。</summary>
      <returns>関連付けられたプロセスに読み込まれたモジュールを表す <see cref="T:System.Diagnostics.ProcessModule" /> 型の配列。</returns>
      <exception cref="T:System.NotSupportedException">リモート コンピューターで実行されているプロセスの <see cref="P:System.Diagnostics.Process.Modules" /> プロパティにアクセスしようとしています。 このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</exception>
      <exception cref="T:System.InvalidOperationException">プロセス <see cref="P:System.Diagnostics.Process.Id" /> が使用できません。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">システム プロセスまたはアイドル状態のプロセスのいずれかの <see cref="P:System.Diagnostics.Process.Modules" /> プロパティにアクセスしようとしています。 これらのプロセスには、モジュールが存在しません。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.NonpagedSystemMemorySize">
      <summary>関連付けられたプロセスに割り当てられたページングされないシステム メモリの量 (バイト単位) を取得します。</summary>
      <returns>システムによって関連付けられたプロセスに割り当てられた、仮想メモリ ページング ファイルに書き込むことができないメモリの容量 (バイト単位)。</returns>
    </member>
    <member name="P:System.Diagnostics.Process.NonpagedSystemMemorySize64">
      <summary>関連付けられたプロセスに割り当てられたページングされないシステム メモリの量 (バイト単位) を取得します。</summary>
      <returns>関連付けられたプロセスに割り当てられた、仮想メモリ ページング ファイルに書き込むことができないシステム メモリの容量 (バイト単位)。</returns>
    </member>
    <member name="M:System.Diagnostics.Process.OnExited">
      <summary>
        <see cref="E:System.Diagnostics.Process.Exited" /> イベントを発生させます。</summary>
    </member>
    <member name="E:System.Diagnostics.Process.OutputDataReceived">
      <summary>アプリケーションが、リダイレクトされた <see cref="P:System.Diagnostics.Process.StandardOutput" /> ストリームに行を書き込む度に発生します。</summary>
    </member>
    <member name="P:System.Diagnostics.Process.PagedMemorySize">
      <summary>関連付けられたプロセスに割り当てられたページ メモリの量 (バイト単位) を取得します。</summary>
      <returns>仮想メモリ ページング ファイルに書き込むことができる関連付けられたプロセスによって割り当てられたメモリの容量 (バイト単位)。</returns>
    </member>
    <member name="P:System.Diagnostics.Process.PagedMemorySize64">
      <summary>関連付けられたプロセスに割り当てられたページ メモリの量 (バイト単位) を取得します。</summary>
      <returns>関連付けられたプロセスの仮想メモリ ページング ファイル内で割り当てられたメモリの量 (バイト単位)。</returns>
    </member>
    <member name="P:System.Diagnostics.Process.PagedSystemMemorySize">
      <summary>関連付けられたプロセスに割り当てられたページング可能なシステム メモリの量 (バイト単位) を取得します。</summary>
      <returns>システムによって関連付けられたプロセスに割り当てられた、仮想メモリ ページング ファイルに書き込むことができるメモリの容量 (バイト単位)。</returns>
    </member>
    <member name="P:System.Diagnostics.Process.PagedSystemMemorySize64">
      <summary>関連付けられたプロセスに割り当てられたページング可能なシステム メモリの量 (バイト単位) を取得します。</summary>
      <returns>関連付けられたプロセスに割り当てられた、仮想メモリ ページング ファイルに書き込むことができるシステム メモリの容量 (バイト単位)。</returns>
    </member>
    <member name="P:System.Diagnostics.Process.PeakPagedMemorySize">
      <summary>関連付けられたプロセスによって使用される、仮想メモリ ページング ファイル内のメモリの最大量を取得します (バイト単位)。</summary>
      <returns>関連付けられたプロセスによって割り当てられた、仮想メモリ ページング ファイルに書き込むことができたメモリの最大容量 (バイト単位)。</returns>
    </member>
    <member name="P:System.Diagnostics.Process.PeakPagedMemorySize64">
      <summary>関連付けられたプロセスによって使用される、仮想メモリ ページング ファイル内のメモリの最大量を取得します (バイト単位)。</summary>
      <returns>プロセスの開始以降、関連付けられたプロセスの仮想メモリ ページング ファイル内で割り当てられたメモリの最大量 (バイト単位)。</returns>
    </member>
    <member name="P:System.Diagnostics.Process.PeakVirtualMemorySize">
      <summary>関連付けられたプロセスによって使用される仮想メモリの最大量を取得します (バイト単位)。</summary>
      <returns>関連付けられたプロセスが要求した仮想メモリの最大容量 (バイト単位)。</returns>
    </member>
    <member name="P:System.Diagnostics.Process.PeakVirtualMemorySize64">
      <summary>関連付けられたプロセスによって使用される仮想メモリの最大量を取得します (バイト単位)。</summary>
      <returns>プロセスの開始以降、関連付けられたプロセスに割り当てられた仮想メモリの最大量 (バイト単位)。</returns>
    </member>
    <member name="P:System.Diagnostics.Process.PeakWorkingSet">
      <summary>関連付けられたプロセスのピーク ワーキング セット サイズをバイト単位で取得します。</summary>
      <returns>関連づけられたプロセスが一度に要求した物理メモリのバイト単位での最大容量。</returns>
    </member>
    <member name="P:System.Diagnostics.Process.PeakWorkingSet64">
      <summary>関連付けられたプロセスによって使用される物理メモリの最大量をバイト数として取得します。</summary>
      <returns>プロセスの開始以降、関連付けられたプロセスに割り当てられた物理メモリの最大量 (バイト単位)。</returns>
    </member>
    <member name="P:System.Diagnostics.Process.PriorityBoostEnabled">
      <summary>メイン ウィンドウのフォーカス時に、オペレーティング システムによって関連付けられたプロセスの優先順位を一時的に上げるかどうかを示す値を取得または設定します。</summary>
      <returns>待機状態から抜けたときにプロセスの優先順位を動的に上げる場合は<see langword="true" /> 。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">関連付けられているプロセス リソースから priority boost 情報を取得できませんでした。</exception>
      <exception cref="T:System.PlatformNotSupportedException">プロセス識別子またはプロセス ハンドルが 0 です。 (プロセスは開始されていません。)</exception>
      <exception cref="T:System.NotSupportedException">リモート コンピューターで実行されているプロセスの <see cref="P:System.Diagnostics.Process.PriorityBoostEnabled" /> プロパティにアクセスしようとしています。 このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</exception>
      <exception cref="T:System.InvalidOperationException">プロセス <see cref="P:System.Diagnostics.Process.Id" /> が使用できません。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PriorityClass">
      <summary>関連付けられたプロセスの全体的な優先順位カテゴリを取得または設定します。</summary>
      <returns>プロセスの <see cref="P:System.Diagnostics.Process.BasePriority" /> を計算するときに使用する、関連付けられたプロセスの優先順位カテゴリ。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">関連付けられているプロセスのリソースからプロセス優先度情報を設定できないか、取得できませんでした。  

または -  

 プロセス識別子またはプロセス ハンドルが 0 です。 (プロセスは開始されていません。)</exception>
      <exception cref="T:System.NotSupportedException">リモート コンピューターで実行されているプロセスの <see cref="P:System.Diagnostics.Process.PriorityClass" /> プロパティにアクセスしようとしています。 このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</exception>
      <exception cref="T:System.InvalidOperationException">プロセス <see cref="P:System.Diagnostics.Process.Id" /> が使用できません。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <see cref="T:System.Diagnostics.ProcessPriorityClass" /> 列挙体で定義されている有効な値が使用されていないため、優先度クラスを設定できません。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PrivateMemorySize">
      <summary>関連付けられたプロセスに割り当てられたプライベート メモリの量 (バイト単位) を取得します。</summary>
      <returns>関連付けられたプロセスに割り当てられ、他のプロセスと共有できないバイト数。</returns>
    </member>
    <member name="P:System.Diagnostics.Process.PrivateMemorySize64">
      <summary>関連付けられたプロセスに割り当てられたプライベート メモリの量 (バイト単位) を取得します。</summary>
      <returns>関連付けられたプロセスに割り当てられ、他のプロセスと共有できないメモリの量 (バイト単位)。</returns>
    </member>
    <member name="P:System.Diagnostics.Process.PrivilegedProcessorTime">
      <summary>このプロセスの特権プロセッサ時間を取得します。</summary>
      <returns>プロセスが、オペレーティング システム コア内でコードを実行した合計時間を示す <see cref="T:System.TimeSpan" />。</returns>
      <exception cref="T:System.NotSupportedException">リモート コンピューターで実行されているプロセスの <see cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" /> プロパティにアクセスしようとしています。 このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.ProcessName">
      <summary>プロセスの名前を取得します。</summary>
      <returns>システムで使用する、ユーザーがプロセスを識別するための名前。</returns>
      <exception cref="T:System.InvalidOperationException">プロセスに ID がないか、<see cref="T:System.Diagnostics.Process" /> に関連付けられているプロセスがありません。  
または 
関連付けられたプロセスが終了しました。</exception>
      <exception cref="T:System.NotSupportedException">プロセスはこのコンピューター上のものではありません。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.ProcessorAffinity">
      <summary>このプロセスでのスレッドの実行をスケジュールできるプロセッサを取得または設定します。</summary>
      <returns>関連付けられたプロセスのスレッドを実行できるプロセッサを示すビットマスク。 既定値は、コンピューターのプロセッサ数によって異なります。 既定値は 2 n -1 です。ここで、n はプロセッサ数です。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">関連付けられているプロセスのリソースから <see cref="P:System.Diagnostics.Process.ProcessorAffinity" /> 情報を設定できないか、取得できませんでした。  
または 
プロセス識別子またはプロセス ハンドルが 0 です。 (プロセスは開始されていません。)</exception>
      <exception cref="T:System.NotSupportedException">リモート コンピューターで実行されているプロセスの <see cref="P:System.Diagnostics.Process.ProcessorAffinity" /> プロパティにアクセスしようとしています。 このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</exception>
      <exception cref="T:System.InvalidOperationException">プロセス <see cref="P:System.Diagnostics.Process.Id" /> が使用できませんでした。  

または - 
プロセスが終了しています。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.Refresh">
      <summary>プロセス コンポーネントにキャッシュされている関連付けられたプロセスに関するすべての情報を破棄します。</summary>
    </member>
    <member name="P:System.Diagnostics.Process.Responding">
      <summary>プロセスのユーザー インターフェイスが応答するかどうかを示す値を取得します。</summary>
      <returns>関連付けられたプロセスのユーザー インターフェイスがシステムに応答する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">この <see cref="T:System.Diagnostics.Process" /> オブジェクトに関連付けられているプロセスはありません。</exception>
      <exception cref="T:System.NotSupportedException">リモート コンピューターで実行されているプロセスの <see cref="P:System.Diagnostics.Process.Responding" /> プロパティにアクセスしようとしています。 このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.SafeHandle">
      <summary>このプロセスへのネイティブ ハンドルを取得します。</summary>
      <returns>このプロセスへのネイティブ ハンドル。</returns>
    </member>
    <member name="P:System.Diagnostics.Process.SessionId">
      <summary>関連付けられたプロセスのターミナル サービス セッション識別子を取得します。</summary>
      <returns>関連付けられたプロセスのターミナル サービス セッション識別子。</returns>
      <exception cref="T:System.NullReferenceException">このプロセスに関連付けられているセッションはありません。</exception>
      <exception cref="T:System.InvalidOperationException">このセッション識別子に関連付けられているプロセスはありません。  
 または  
 関連付けられたプロセスが、このコンピューター上にありません。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.StandardError">
      <summary>アプリケーションのエラー出力の読み取りに使用されるストリームを取得します。</summary>
      <returns>アプリケーションの標準エラー ストリームの読み取りに使用できる <see cref="T:System.IO.StreamReader" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.Process.StandardError" /> ストリームがリダイレクト用に定義されていません。<see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> が <see langword="true" /> に設定されており、<see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> が <see langword="false" /> に設定されていることを確認してください。  

または - 
<see cref="P:System.Diagnostics.Process.StandardError" /> ストリームが、<see cref="M:System.Diagnostics.Process.BeginErrorReadLine" /> を使用した非同期読み取り操作のために開いています。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.StandardInput">
      <summary>アプリケーションの入力の書き込みに使用されるストリームを取得します。</summary>
      <returns>アプリケーションの標準入力ストリームの書き込みに使用できる <see cref="T:System.IO.StreamWriter" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" /> が <see langword="false" /> に設定されているため、<see cref="P:System.Diagnostics.Process.StandardInput" /> ストリームが定義されませんでした。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.StandardOutput">
      <summary>アプリケーションのテキスト出力の読み取りに使用されるストリームを取得します。</summary>
      <returns>アプリケーションの標準出力ストリームの読み取りに使用できる <see cref="T:System.IO.StreamReader" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.Process.StandardOutput" /> ストリームがリダイレクト用に定義されていません。<see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> が <see langword="true" /> に設定されており、<see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> が <see langword="false" /> に設定されていることを確認してください。  

または - 
<see cref="P:System.Diagnostics.Process.StandardOutput" /> ストリームが、<see cref="M:System.Diagnostics.Process.BeginOutputReadLine" /> を使用した非同期読み取り操作のために開いています。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.Start">
      <summary>この <see cref="T:System.Diagnostics.Process" /> コンポーネントの <see cref="P:System.Diagnostics.Process.StartInfo" /> プロパティで指定されたプロセス リソースを起動 (または再利用) し、コンポーネントに関連付けます。</summary>
      <returns>プロセス リソースが起動された場合は <see langword="true" />。新しいプロセス リソースが起動されなかった場合は <see langword="false" /> (既存のプロセスを再利用した場合など)。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Diagnostics.Process" /> コンポーネントの <see cref="P:System.Diagnostics.Process.StartInfo" /> にファイル名が指定されませんでした。
あるいは、<see cref="P:System.Diagnostics.Process.StartInfo" /> プロパティの<see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> メンバーは <see langword="true" /> ですが、<see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" />、<see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />、または <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> は <see langword="true" /> です。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">関連付けられているファイルを開いているときにエラーが発生しました。</exception>
      <exception cref="T:System.ObjectDisposedException">プロセス オブジェクトは既には破棄されています。</exception>
      <exception cref="T:System.PlatformNotSupportedException">メソッドはシェルがサポートされていない Nano Server (.NET Core のみ) などのオペレーティング システムではサポートされていません。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
      <summary>プロセス起動情報 (起動するプロセスのファイル名など) が格納されているパラメーターで指定されたプロセス リソースを起動し、リソースを新しい <see cref="T:System.Diagnostics.Process" /> コンポーネントに関連付けます。</summary>
      <param name="startInfo">ファイル名やコマンド ライン引数など、プロセスの起動に使用する情報が格納されている <see cref="T:System.Diagnostics.ProcessStartInfo" />。</param>
      <returns>プロセス リソースに関連付けられている新しい <see cref="T:System.Diagnostics.Process" />。プロセス リソースが起動されていない場合は <see langword="null" />。 同じプロセスのインスタンスが既に実行されているときに起動された新しいプロセスは、他のインスタンスから独立します。 また、Start では、<see cref="P:System.Diagnostics.Process.HasExited" /> プロパティが既に <see langword="true" /> に設定されている null 以外の Process が返される場合があります。 その場合、起動されたプロセス自体の既存のインスタンスがアクティブ化され、その後に終了されることがあります。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="startInfo" /> パラメーターの <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> プロパティにファイル名が指定されませんでした。  
または 
<paramref name="startInfo" /> パラメーターの <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> プロパティは <see langword="true" /> であり、<see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" />、<see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />、または <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> プロパティも <see langword="true" /> です。  
または 
<paramref name="startInfo" /> パラメーターの <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> プロパティは <see langword="true" /> であり、<see cref="P:System.Diagnostics.ProcessStartInfo.UserName" /> プロパティは <see langword="null" /> でも空でもないか、または <see cref="P:System.Diagnostics.ProcessStartInfo.Password" /> プロパティは <see langword="null" /> ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="startInfo" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ObjectDisposedException">プロセス オブジェクトは既には破棄されています。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="startInfo" /> パラメーターの <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> プロパティに指定されたファイルを見つけることができませんでした。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">関連付けられているファイルを開いているときにエラーが発生しました。  
 または  
 引数の長さとプロセスへの完全パスの長さの合計が、2080 文字を超えています。 この例外に関連付けられたエラー メッセージは、次のいずれかになります。"システム コールに渡されるデータ領域が小さすぎます" または「アクセスが拒否されました。」</exception>
      <exception cref="T:System.PlatformNotSupportedException">メソッドはシェルがサポートされていない Nano Server (.NET Core のみ) などのオペレーティング システムではサポートされていません。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.Start(System.String)">
      <summary>文書またはアプリケーション ファイルの名前を指定してプロセス リソースを起動し、リソースを新しい <see cref="T:System.Diagnostics.Process" /> コンポーネントに関連付けます。</summary>
      <param name="fileName">プロセスで実行する文書またはアプリケーション ファイルの名前。</param>
      <returns>プロセス リソースに関連付けられている新しい <see cref="T:System.Diagnostics.Process" />。プロセス リソースが起動されていない場合は <see langword="null" />。 同じプロセスのインスタンスが既に実行されているときに起動された新しいプロセスは、他のインスタンスから独立します。 また、Start では、<see cref="P:System.Diagnostics.Process.HasExited" /> プロパティが既に <see langword="true" /> に設定されている null 以外の Process が返される場合があります。 その場合、起動されたプロセス自体の既存のインスタンスがアクティブ化され、その後に終了されることがあります。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">関連付けられているファイルを開いているときにエラーが発生しました。</exception>
      <exception cref="T:System.ObjectDisposedException">プロセス オブジェクトは既には破棄されています。</exception>
      <exception cref="T:System.IO.FileNotFoundException">PATH 環境変数に、引用符を含む文字列があります。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.Start(System.String,System.String)">
      <summary>アプリケーションの名前とコマンド ライン引数のセットを指定してプロセス リソースを起動し、リソースを新しい <see cref="T:System.Diagnostics.Process" /> コンポーネントに関連付けます。</summary>
      <param name="fileName">プロセスで実行するアプリケーション ファイルの名前。</param>
      <param name="arguments">プロセスを起動するときに渡すコマンド ライン引数。</param>
      <returns>プロセス リソースに関連付けられている新しい <see cref="T:System.Diagnostics.Process" />。プロセス リソースが起動されていない場合は <see langword="null" />。 同じプロセスのインスタンスが既に実行されているときに起動された新しいプロセスは、他のインスタンスから独立します。 また、Start では、<see cref="P:System.Diagnostics.Process.HasExited" /> プロパティが既に <see langword="true" /> に設定されている null 以外の Process が返される場合があります。 その場合、起動されたプロセス自体の既存のインスタンスがアクティブ化され、その後に終了されることがあります。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="fileName" /> パラメーターまたは <paramref name="arguments" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">関連付けられているファイルを開いているときにエラーが発生しました。  

または -  

 引数の長さとプロセスへの完全パスの長さの合計が、2080 文字を超えています。 この例外に関連付けられたエラー メッセージは、次のいずれかになります。"システム コールに渡されるデータ領域が小さすぎます" または「アクセスが拒否されました。」</exception>
      <exception cref="T:System.ObjectDisposedException">プロセス オブジェクトは既には破棄されています。</exception>
      <exception cref="T:System.IO.FileNotFoundException">PATH 環境変数に、引用符を含む文字列があります。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
      <summary>アプリケーションの名前、ユーザー名、パスワード、ドメインを指定してプロセス リソースを起動し、リソースを新しい <see cref="T:System.Diagnostics.Process" /> コンポーネントに関連付けます。</summary>
      <param name="fileName">プロセスで実行するアプリケーション ファイルの名前。</param>
      <param name="userName">プロセスの開始時に使用するユーザー名。</param>
      <param name="password">プロセスを開始するときに使用するパスワードを含む <see cref="T:System.Security.SecureString" />。</param>
      <param name="domain">プロセスの開始時に使用するドメイン。</param>
      <returns>プロセス リソースに関連付けられている新しい <see cref="T:System.Diagnostics.Process" />。プロセス リソースが起動されていない場合は <see langword="null" />。 同じプロセスのインスタンスが既に実行されているときに起動された新しいプロセスは、他のインスタンスから独立します。 また、Start では、<see cref="P:System.Diagnostics.Process.HasExited" /> プロパティが既に <see langword="true" /> に設定されている null 以外の Process が返される場合があります。 その場合、起動されたプロセス自体の既存のインスタンスがアクティブ化され、その後に終了されることがあります。</returns>
      <exception cref="T:System.InvalidOperationException">ファイル名が指定されませんでした。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">関連付けられているファイルを開いているときにエラーが発生しました。</exception>
      <exception cref="T:System.ObjectDisposedException">プロセス オブジェクトは既には破棄されています。</exception>
      <exception cref="T:System.PlatformNotSupportedException">このメンバーは Linux または macOS (.NET Core のみ) ではサポートされていません。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
      <summary>アプリケーションの名前、コマンド ライン引数のセット、ユーザー名、パスワード、およびドメインを指定してプロセス リソースを起動し、リソースを新しい <see cref="T:System.Diagnostics.Process" /> コンポーネントに関連付けます。</summary>
      <param name="fileName">プロセスで実行するアプリケーション ファイルの名前。</param>
      <param name="arguments">プロセスを起動するときに渡すコマンド ライン引数。</param>
      <param name="userName">プロセスの開始時に使用するユーザー名。</param>
      <param name="password">プロセスを開始するときに使用するパスワードを含む <see cref="T:System.Security.SecureString" />。</param>
      <param name="domain">プロセスの開始時に使用するドメイン。</param>
      <returns>プロセス リソースに関連付けられている新しい <see cref="T:System.Diagnostics.Process" />。プロセス リソースが起動されていない場合は <see langword="null" />。 同じプロセスのインスタンスが既に実行されているときに起動された新しいプロセスは、他のインスタンスから独立します。 また、Start では、<see cref="P:System.Diagnostics.Process.HasExited" /> プロパティが既に <see langword="true" /> に設定されている null 以外の Process が返される場合があります。 その場合、起動されたプロセス自体の既存のインスタンスがアクティブ化され、その後に終了されることがあります。</returns>
      <exception cref="T:System.InvalidOperationException">ファイル名が指定されませんでした。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">関連付けられているファイルを開いているときにエラーが発生しました。  

または -  

 引数の長さと関連ファイルへの完全パスの長さの合計が、2080 文字を超えています。 この例外に関連付けられたエラー メッセージは、次のいずれかになります。"システム コールに渡されるデータ領域が小さすぎます" または「アクセスが拒否されました。」</exception>
      <exception cref="T:System.ObjectDisposedException">プロセス オブジェクトは既には破棄されています。</exception>
      <exception cref="T:System.PlatformNotSupportedException">このメンバーは Linux または macOS (.NET Core のみ) ではサポートされていません。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.StartInfo">
      <summary>
        <see cref="T:System.Diagnostics.Process" /> の <see cref="M:System.Diagnostics.Process.Start" /> メソッドに渡すプロパティを取得または設定します。</summary>
      <returns>プロセスを起動するときに使用するデータを表す <see cref="T:System.Diagnostics.ProcessStartInfo" />。 これらの引数には、プロセスの起動時に使用する実行可能ファイルまたは文書の名前があります。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Diagnostics.Process.StartInfo" /> を指定する値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Diagnostics.Process.Start" /> メソッドはプロセスを開始するために使用されませんでした。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.StartTime">
      <summary>関連付けられたプロセスが起動された時刻を取得します。</summary>
      <returns>プロセスが起動された時刻を示すオブジェクト。 プロセスが実行中でない場合は、例外がスローされます。</returns>
      <exception cref="T:System.NotSupportedException">リモート コンピューターで実行されているプロセスの <see cref="P:System.Diagnostics.Process.StartTime" /> プロパティにアクセスしようとしています。 このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</exception>
      <exception cref="T:System.InvalidOperationException">プロセスが終了しています。  
 または  
 プロセスは開始されていません。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">Windows 関数の呼び出しでエラーが発生しました。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.SynchronizingObject">
      <summary>プロセス終了イベントの結果として発行されるイベント ハンドラー呼び出しをマーシャリングするために使用するオブジェクトを取得または設定します。</summary>
      <returns>プロセスの <see cref="E:System.Diagnostics.Process.Exited" /> イベントの結果として発行されるイベント ハンドラー呼び出しをマーシャリングするために使用する <see cref="T:System.ComponentModel.ISynchronizeInvoke" />。</returns>
    </member>
    <member name="P:System.Diagnostics.Process.Threads">
      <summary>関連付けられたプロセスで実行されているスレッドのセットを取得します。</summary>
      <returns>関連付けられたプロセスで現在実行中のオペレーティング システム スレッドを表す <see cref="T:System.Diagnostics.ProcessThread" /> 型の配列。</returns>
      <exception cref="T:System.SystemException">プロセスに <see cref="P:System.Diagnostics.Process.Id" /> がないか、<see cref="T:System.Diagnostics.Process" /> インスタンスに関連付けられているプロセスがありません。  

または - 
関連付けられたプロセスが終了しました。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.ToString">
      <summary>プロセス名の書式指定は文字列にします。親コンポーネント型があれば、この型と組み合わせます。</summary>
      <returns>ベース コンポーネントの <see cref="M:System.Object.ToString" /> の戻り値と組み合わせた <see cref="P:System.Diagnostics.Process.ProcessName" />。</returns>
    </member>
    <member name="P:System.Diagnostics.Process.TotalProcessorTime">
      <summary>このプロセスの合計プロセッサ時間を取得します。</summary>
      <returns>関連付けられたプロセスが CPU を使用した合計時間を示す <see cref="T:System.TimeSpan" />。 この値は、<see cref="P:System.Diagnostics.Process.UserProcessorTime" /> と <see cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" /> の合計です。</returns>
      <exception cref="T:System.NotSupportedException">リモート コンピューターで実行されているプロセスの <see cref="P:System.Diagnostics.Process.TotalProcessorTime" /> プロパティにアクセスしようとしています。 このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.UserProcessorTime">
      <summary>このプロセスのユーザー プロセッサ時間を取得します。</summary>
      <returns>関連付けられたプロセスが、プロセスのアプリケーション部分の内部 (オペレーティング システム コアの外部) でコードを実行した合計時間を示す <see cref="T:System.TimeSpan" />。</returns>
      <exception cref="T:System.NotSupportedException">リモート コンピューターで実行されているプロセスの <see cref="P:System.Diagnostics.Process.UserProcessorTime" /> プロパティにアクセスしようとしています。 このプロパティはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.VirtualMemorySize">
      <summary>プロセスの仮想メモリのサイズ (バイト単位) を取得します。</summary>
      <returns>関連付けられたプロセスが要求した仮想メモリの容量 (バイト単位)。</returns>
    </member>
    <member name="P:System.Diagnostics.Process.VirtualMemorySize64">
      <summary>関連付けられたプロセスに割り当てられた仮想メモリの量 (バイト単位) を取得します。</summary>
      <returns>関連付けられたプロセスに割り当てられた仮想メモリの量 (バイト単位)。</returns>
    </member>
    <member name="M:System.Diagnostics.Process.WaitForExit">
      <summary>関連付けられたプロセスが終了するまで無期限に待機するように <see cref="T:System.Diagnostics.Process" /> コンポーネントに指示します。</summary>
      <exception cref="T:System.ComponentModel.Win32Exception">待機の設定にアクセスできませんでした。</exception>
      <exception cref="T:System.SystemException">プロセス <see cref="P:System.Diagnostics.Process.Id" /> が設定されておらず、<see cref="P:System.Diagnostics.Process.Id" /> プロパティを判別する元となる <see cref="P:System.Diagnostics.Process.Handle" /> が存在しません。  
または 
この <see cref="T:System.Diagnostics.Process" /> オブジェクトに関連付けられているプロセスはありません。  

または - 
リモート コンピューターで実行されているプロセスの <see cref="M:System.Diagnostics.Process.WaitForExit" /> を呼び出そうとしています。 このメソッドはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
      <summary>関連付けられたプロセスが終了するまで、最大で指定したミリ秒間待機するように <see cref="T:System.Diagnostics.Process" /> コンポーネントに指示します。</summary>
      <param name="milliseconds">関連付けられたプロセスが終了するまで待機する時間。単位はミリ秒です。 最大値は、32 ビット整数で表現できる最大値で、オペレーティング システムに対して無限大で表現される値です。</param>
      <returns>関連付けられたプロセスが終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">待機の設定にアクセスできませんでした。</exception>
      <exception cref="T:System.SystemException">プロセス <see cref="P:System.Diagnostics.Process.Id" /> が設定されておらず、<see cref="P:System.Diagnostics.Process.Id" /> プロパティを判別する元となる <see cref="P:System.Diagnostics.Process.Handle" /> が存在しません。  

または - 
この <see cref="T:System.Diagnostics.Process" /> オブジェクトに関連付けられているプロセスはありません。  

または 
リモート コンピューターで実行されているプロセスの <see cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)" /> を呼び出そうとしています。 このメソッドはローカル コンピューターで実行中のプロセスに対してのみ使用可能です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="milliseconds" /> は無限のタイムアウトを表す -1 以外の負の数です。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.WaitForInputIdle">
      <summary>関連付けられたプロセスがアイドル状態になるまで、<see cref="T:System.Diagnostics.Process" /> コンポーネントを無期限に待機させます。 このオーバーロードは、ユーザー インターフェイスとメッセージ ループを持つプロセスにだけ適用されます。</summary>
      <returns>関連付けられたプロセスがアイドル状態になった場合は <see langword="true" />。</returns>
      <exception cref="T:System.InvalidOperationException">プロセスにグラフィカル インターフェイスがありません。  

または - 
不明なエラーが発生しました。 プロセスがアイドル状態になることができませんでした。  

または - 
プロセスは既に終了しています。  

または - 
この <see cref="T:System.Diagnostics.Process" /> オブジェクトに関連付けられているプロセスはありません。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)">
      <summary>関連付けられたプロセスがアイドル状態になるまで、最大で指定したミリ秒間、<see cref="T:System.Diagnostics.Process" /> コンポーネントを待機させます。 このオーバーロードは、ユーザー インターフェイスとメッセージ ループを持つプロセスにだけ適用されます。</summary>
      <param name="milliseconds">関連付けられたプロセスがアイドル状態になるまでの待機時間をミリ秒単位で指定する、1 ～ <see cref="F:System.Int32.MaxValue" /> の値。 値 0 の場合はすぐに制御が戻され、値 -1 の場合は無期限に待機することを示します。</param>
      <returns>関連付けられたプロセスがアイドル状態になった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">プロセスにグラフィカル インターフェイスがありません。  

または - 
不明なエラーが発生しました。 プロセスがアイドル状態になることができませんでした。  

または 
プロセスは既に終了しています。  
または 
この <see cref="T:System.Diagnostics.Process" /> オブジェクトに関連付けられているプロセスはありません。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.WorkingSet">
      <summary>関連付けられたプロセスの物理メモリ使用量 (バイト単位) を取得します。</summary>
      <returns>関連付けられたプロセスが使用している物理メモリの合計容量 (バイト単位)。</returns>
    </member>
    <member name="P:System.Diagnostics.Process.WorkingSet64">
      <summary>関連付けられたプロセスに割り当てられた物理メモリの量 (バイト単位) を取得します。</summary>
      <returns>関連付けられたプロセスに割り当てられた物理メモリの量 (バイト単位)。</returns>
    </member>
    <member name="T:System.Diagnostics.ProcessModule">
      <summary>特定のプロセスに読み込まれる .dll ファイルまたは .exe ファイルを表します。</summary>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.BaseAddress">
      <summary>モジュールが読み込まれたメモリ アドレスを取得します。</summary>
      <returns>モジュールの読み込みアドレス。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.EntryPointAddress">
      <summary>システムがモジュールを読み込んで実行するときの関数のメモリ アドレスを取得します。</summary>
      <returns>このモジュールのエントリ ポイント。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.FileName">
      <summary>モジュールの完全なパスを取得します。</summary>
      <returns>モジュールの場所を定義する完全修飾パス。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.FileVersionInfo">
      <summary>モジュールに関するバージョン情報を取得します。</summary>
      <returns>モジュールのバージョン情報を格納している <see cref="T:System.Diagnostics.FileVersionInfo" />。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.ModuleMemorySize">
      <summary>モジュールを読み込むために必要なメモリの量を取得します。</summary>
      <returns>モジュールが占有するメモリのサイズ (バイト単位)。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.ModuleName">
      <summary>プロセスのモジュール名を取得します。</summary>
      <returns>モジュールの名前です。</returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModule.ToString">
      <summary>モジュールの名前を文字列に変換します。</summary>
      <returns>
        <see cref="P:System.Diagnostics.ProcessModule.ModuleName" /> プロパティの値。</returns>
    </member>
    <member name="T:System.Diagnostics.ProcessModuleCollection">
      <summary>
        <see cref="T:System.Diagnostics.ProcessModule" /> オブジェクトの厳密に型指定されたコレクションを提供します。</summary>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.#ctor">
      <summary>
        <see cref="T:System.Diagnostics.ProcessModuleCollection" /> インスタンスに関連付けずに、<see cref="T:System.Diagnostics.ProcessModule" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.#ctor(System.Diagnostics.ProcessModule[])">
      <summary>
        <see cref="T:System.Diagnostics.ProcessModuleCollection" /> インスタンスの配列を指定して、<see cref="T:System.Diagnostics.ProcessModule" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="processModules">この <see cref="T:System.Diagnostics.ProcessModule" /> インスタンスを初期化するために使用する <see cref="T:System.Diagnostics.ProcessModuleCollection" /> インスタンスの配列。</param>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.Contains(System.Diagnostics.ProcessModule)">
      <summary>指定したプロセス モジュールがコレクション内にあるかどうかを調べます。</summary>
      <param name="module">コレクション内にあるかどうかを調べるモジュールを示す <see cref="T:System.Diagnostics.ProcessModule" /> インスタンス。</param>
      <returns>モジュールがコレクション内にある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.CopyTo(System.Diagnostics.ProcessModule[],System.Int32)">
      <summary>コレクションの指定したインデックスに <see cref="T:System.Diagnostics.ProcessModule" /> インスタンスの配列をコピーします。</summary>
      <param name="array">コレクションに追加する <see cref="T:System.Diagnostics.ProcessModule" /> インスタンスの配列。</param>
      <param name="index">新しいインスタンスを追加する位置。</param>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.IndexOf(System.Diagnostics.ProcessModule)">
      <summary>コレクション内の指定したモジュールの位置を提供します。</summary>
      <param name="module">インデックスを取得する <see cref="T:System.Diagnostics.ProcessModule" />。</param>
      <returns>
        <see cref="T:System.Diagnostics.ProcessModuleCollection" /> 内のモジュールの位置を定義する 0 から始まるインデックス番号。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessModuleCollection.Item(System.Int32)">
      <summary>一連のプロセス モジュールを反復処理するためのインデックスを取得します。</summary>
      <param name="index">コレクション内のモジュールの 0 から始まるインデックス値。</param>
      <returns>コレクション内のモジュールにインデックスを作成する <see cref="T:System.Diagnostics.ProcessModule" />。</returns>
    </member>
    <member name="T:System.Diagnostics.ProcessPriorityClass">
      <summary>システムがプロセスに関連付ける優先順位を示します。 この値は、プロセスの各スレッドの優先順位値と組み合わされ、各スレッドの基本優先順位を決定します。</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.AboveNormal">
      <summary>プロセスの優先順位を <see langword="Normal" /> より高く、<see langword="High" /> より低く指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.BelowNormal">
      <summary>プロセスの優先順位を <see langword="Idle" /> より高く <see langword="Normal" /> より低く指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.High">
      <summary>
        <see langword="Task List" /> ダイアログ ボックスなどの、ユーザーから呼び出されたらオペレーティング システムの負荷にかかわらずすぐに応答する必要のある、即時実行を要求される重要なタスクに対して、プロセス実行時間を指定します。 このプロセスのスレッドは、Normal または Idle 優先順位クラスのプロセスのスレッドよりも優先します。 プロセスの優先順位クラスに <see langword="High" /> を指定するときには細心の注意が必要です。High 優先順位クラスのアプリケーションは、使用可能なプロセッサ時間をほぼすべて使用する可能性があるためです。</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.Idle">
      <summary>このプロセスのスレッドが、スクリーン セーバーなど、システムがアイドル状態のときにだけ実行されるよう指定します。 このプロセスのスレッドよりも、より高い優先順位クラスで実行されているあらゆるプロセスのスレッドの方が優先します。 この優先順位クラスは子プロセスに継承されます。</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.Normal">
      <summary>プロセスが特別なスケジューリングを必要としないよう指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.RealTime">
      <summary>プロセスの優先順位をできるだけ高く指定します。 優先順位が <see langword="RealTime" /> のプロセスのスレッドは、重要なタスクを実行するオペレーティング システム プロセスも含め、他のすべてのプロセスのスレッドよりも優先されます。 そのため、優先順位が <see langword="RealTime" /> のプロセスが非常に短い間隔で実行されると、ディスク キャッシュがフラッシュされなくなったり、マウスが応答しなくなったりする可能性があります。</summary>
    </member>
    <member name="T:System.Diagnostics.ProcessStartInfo">
      <summary>プロセスを起動するときに使用する値のセットを指定します。</summary>
    </member>
    <member name="M:System.Diagnostics.ProcessStartInfo.#ctor">
      <summary>プロセスを起動するときに使用するファイル名を指定せずに、<see cref="T:System.Diagnostics.ProcessStartInfo" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Diagnostics.ProcessStartInfo.#ctor(System.String)">
      <summary>
        <see cref="T:System.Diagnostics.ProcessStartInfo" /> クラスの新しいインスタンスを初期化し、アプリケーションやドキュメントなど、プロセスを起動するときに使用するファイル名を指定します。</summary>
      <param name="fileName">プロセスを起動するときに使用するアプリケーションまたはドキュメント。</param>
    </member>
    <member name="M:System.Diagnostics.ProcessStartInfo.#ctor(System.String,System.String)">
      <summary>プロセスを起動するときに使用するアプリケーション ファイル名およびアプリケーションに渡すコマンド ライン引数のセットを指定して、<see cref="T:System.Diagnostics.ProcessStartInfo" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="fileName">プロセスを起動するときに使用するアプリケーション。</param>
      <param name="arguments">プロセスを起動するときにアプリケーションに渡すコマンド ライン引数。</param>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.ArgumentList">
      <summary>アプリケーションを起動するときに使用するコマンド ライン引数のコレクションを取得します。</summary>
      <returns>コマンドライン引数のコレクション。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.Arguments">
      <summary>アプリケーションを起動するときに使用するコマンド ライン引数のセットを取得または設定します。</summary>
      <returns>
        <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> プロパティで指定したターゲット アプリケーションに渡す引数を格納した単一の文字列。 既定値は、空の文字列 ("") です。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.CreateNoWindow">
      <summary>プロセスを新しいウィンドウで起動するかどうかを示す値を取得または設定します。</summary>
      <returns>プロセス用の新しいウィンドウを作成せずにプロセスを起動する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.Domain">
      <summary>プロセスを開始するときに使用されるドメインを指定する値を取得または設定します。 この値が <see langword="null" /> の場合は、<see cref="P:System.Diagnostics.ProcessStartInfo.UserName" /> プロパティを UPN 形式で指定する必要があります。</summary>
      <returns>プロセスを開始するときに使用する Active Directory ドメイン。 この値が <see langword="null" /> の場合は、<see cref="P:System.Diagnostics.ProcessStartInfo.UserName" /> プロパティを UPN 形式で指定する必要があります。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.Environment">
      <summary>このプロセスとその子プロセスに適用される環境変数を取得します。</summary>
      <returns>このプロセスと子のプロセスに適用される環境変数を格納している汎用ディクショナリ。 既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.EnvironmentVariables">
      <summary>ファイルの検索パス、一時ファイルのディレクトリ、アプリケーション固有のオプションなどの情報を取得します。</summary>
      <returns>このプロセスおよび子プロセスに適用される環境変数を提供する文字列ディクショナリ。 既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.ErrorDialog">
      <summary>プロセスを起動できなかったときにエラー ダイアログ ボックスを表示するかどうかを示す値を取得または設定します。</summary>
      <returns>プロセスを起動できなかったときにエラー ダイアログ ボックスを画面に表示する場合は<see langword="true" /> 。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle">
      <summary>プロセスを起動できないときにエラー ダイアログ ボックスを表示するのに使用するウィンドウ ハンドルを取得または設定します。</summary>
      <returns>プロセスの起動失敗によって生成されるエラー ダイアログ ボックスのハンドルへのポインター。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.FileName">
      <summary>起動するアプリケーションまたはドキュメントを取得または設定します。</summary>
      <returns>起動するアプリケーション名。または、アプリケーションに関連付けられていて、既定の "open" アクションが利用できるファイル タイプのドキュメント名。 既定値は、空の文字列 ("") です。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.LoadUserProfile">
      <summary>Windows ユーザー プロファイルをレジストリから読み込むかどうかを示す値を取得または設定します。</summary>
      <returns>Windows ユーザー プロファイルを読み込む必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.Password">
      <summary>プロセスを開始するときに使用されるユーザー パスワードを含んだセキュリティ文字列を取得または設定します。</summary>
      <returns>プロセスの開始時に使用するユーザー パスワード。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.PasswordInClearText">
      <summary>プロセスの開始時に使用する、クリア テキストのユーザーのパスワードを取得または設定します。</summary>
      <returns>クリア テキストのユーザー パスワード。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError">
      <summary>アプリケーションのエラー出力を <see cref="P:System.Diagnostics.Process.StandardError" /> ストリームに書き込むかどうかを示す値を取得または設定します。</summary>
      <returns>エラー出力を <see cref="P:System.Diagnostics.Process.StandardError" /> に書き込む場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput">
      <summary>アプリケーションの入力を <see cref="P:System.Diagnostics.Process.StandardInput" /> ストリームから読み取るかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="P:System.Diagnostics.Process.StandardInput" /> から入力を読み取る場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput">
      <summary>アプリケーションのテキスト出力を <see cref="P:System.Diagnostics.Process.StandardOutput" /> ストリームに書き込むかどうかを示す値を取得または設定します。</summary>
      <returns>出力を <see cref="P:System.Diagnostics.Process.StandardOutput" /> に書き込む場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.StandardErrorEncoding">
      <summary>エラー出力に最適なエンコーディングを取得または設定します。</summary>
      <returns>エラー出力に最適なエンコーディングを表すオブジェクト。 既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.StandardInputEncoding" />
    <member name="P:System.Diagnostics.ProcessStartInfo.StandardOutputEncoding">
      <summary>標準出力に最適なエンコーディングを取得または設定します。</summary>
      <returns>標準出力に最適なエンコーディングを表すオブジェクト。 既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.UserName">
      <summary>プロセスを開始するときに使用するユーザー名を取得または設定します。 UPN 形式 (<paramref name="user" />@<paramref name="DNS_domain_name" />) を使用する場合は、<see cref="P:System.Diagnostics.ProcessStartInfo.Domain" /> プロパティを <see langword="null" /> に設定する必要があります。</summary>
      <returns>プロセスの開始時に使用するユーザー名。 UPN 形式 (<paramref name="user" />@<paramref name="DNS_domain_name" />) を使用する場合は、<see cref="P:System.Diagnostics.ProcessStartInfo.Domain" /> プロパティを <see langword="null" /> に設定する必要があります。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.UseShellExecute">
      <summary>プロセスの起動にオペレーティング システムのシェルを使用するかどうかを示す値を取得または設定します。</summary>
      <returns>プロセスを起動するときにシェルを使用する場合は <see langword="true" />、プロセスを実行可能ファイルから直接作成する場合は <see langword="false" />。 既定値は<see langword="true" /> .NET Framework アプリと<see langword="false" /> .net Core アプリ上にあります。</returns>
      <exception cref="T:System.PlatformNotSupportedException">ユニバーサル Windows プラットフォーム (UWP) アプリで値を <see langword="true" /> に設定することが試みられます。</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.Verb">
      <summary>
        <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> プロパティで指定したアプリケーションまたはドキュメントを開くときに使用する動詞を取得または設定します。</summary>
      <returns>プロセスが開くファイルを使用して実行するアクション。 既定では、処理が行われないことを示す、空の文字列 ("") です。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.Verbs">
      <summary>
        <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> プロパティで指定したファイルの種類に関連付けられている動詞のセットを取得します。</summary>
      <returns>
        <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> プロパティで示されたファイルに適用できるアクション。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.WindowStyle">
      <summary>プロセスを起動するときに使用するウィンドウの状態を取得または設定します。</summary>
      <returns>プロセスの起動時のウィンドウを、最大化、最小化、通常 (最大化も最小化もしていない状態)、または非表示のどの状態にするかを示す列挙値のいずれか。 既定値は、<see langword="Normal" /> です。</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">ウィンドウ スタイルが、<see cref="T:System.Diagnostics.ProcessWindowStyle" /> 列挙体のメンバーではありません。</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.WorkingDirectory">
      <summary>
        <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> プロパティが <see langword="false" /> の場合に、開始するプロセスの作業ディレクトリを取得または設定します。 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> が <see langword="true" /> の場合に、開始するプロセスを含むディレクトリを取得または設定します。</summary>
      <returns>
        <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> が <see langword="true" /> の場合、起動するプロセスがあるディレクトリの完全修飾名。 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> プロパティが <see langword="false" /> の場合に、開始するプロセスの作業ディレクトリです。 既定値は、空の文字列 ("") です。</returns>
    </member>
    <member name="T:System.Diagnostics.ProcessThread">
      <summary>オペレーティング システムのプロセス スレッドを表します。</summary>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.BasePriority">
      <summary>スレッドの基本優先順位を取得します。</summary>
      <returns>プロセスの優先順位クラスと関連付けられたスレッドの優先順位との組み合わせからオペレーティング システムが算出した、スレッドの基本優先順位。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.CurrentPriority">
      <summary>スレッドの現在の優先順位を取得します。</summary>
      <returns>オペレーティング システムがスレッドをスケジュールする方法によっては、スレッドの現在の優先順位が基本優先順位と異なることがあります。 アクティブなスレッドの優先順位を一時的に上げることもできます。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.Id">
      <summary>スレッドの一意な識別子を取得します。</summary>
      <returns>特定のスレッドに関連付けられた一意な識別子。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.IdealProcessor">
      <summary>このスレッドを実行する優先プロセッサを設定します。</summary>
      <returns>スレッドの優先プロセッサは、システムがスレッドをスケジュールするときに、スレッドを実行するプロセッサを決定するために使用します。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">指定したプロセッサでスレッドを起動するよう設定できませんでした。</exception>
      <exception cref="T:System.NotSupportedException">プロセスは、リモート コンピューター上にあります。</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.PriorityBoostEnabled">
      <summary>スレッドのプロセスのメイン ウィンドウがフォーカスを受け取るたびに、関連付けられたスレッドの優先順位をオペレーティング システムが一時的に上げるかどうかを示す値を取得または設定します。</summary>
      <returns>ユーザーがプロセスのインターフェイスと対話しているときにスレッドの優先順位を上げる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">優先順位上昇情報を取得できませんでした。  

または -  

 優先順位上昇情報を設定できませんでした。</exception>
      <exception cref="T:System.NotSupportedException">プロセスは、リモート コンピューター上にあります。</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.PriorityLevel">
      <summary>スレッドの優先順位を取得または設定します。</summary>
      <returns>スレッドの優先順位の範囲を指定する <see cref="T:System.Diagnostics.ThreadPriorityLevel" /> 値のいずれか。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">スレッドの優先順位情報を取得できませんでした。  

または -  

 スレッドの優先順位を設定できませんでした。</exception>
      <exception cref="T:System.NotSupportedException">プロセスは、リモート コンピューター上にあります。</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.PrivilegedProcessorTime">
      <summary>スレッドが、オペレーティング システム コアでコードを実行した時間を取得します。</summary>
      <returns>スレッドが、オペレーティング システム コアでコードを実行した時間を示す <see cref="T:System.TimeSpan" />。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">スレッド時間を取得できませんでした。</exception>
      <exception cref="T:System.NotSupportedException">プロセスは、リモート コンピューター上にあります。</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.ProcessorAffinity">
      <summary>関連付けられたスレッドを実行できるプロセッサを設定します。</summary>
      <returns>スレッドを実行できるプロセッサを表すビットのセットを指す <see cref="T:System.IntPtr" />。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">プロセッサ アフィニティを設定できませんでした。</exception>
      <exception cref="T:System.NotSupportedException">プロセスは、リモート コンピューター上にあります。</exception>
    </member>
    <member name="M:System.Diagnostics.ProcessThread.ResetIdealProcessor">
      <summary>このスレッドに最も適したプロセッサをリセットして、単一の最も適したプロセッサがないことを示します。 つまり、どのプロセッサも適しています。</summary>
      <exception cref="T:System.ComponentModel.Win32Exception">最適なプロセッサをリセットできませんでした。</exception>
      <exception cref="T:System.NotSupportedException">プロセスは、リモート コンピューター上にあります。</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.StartAddress">
      <summary>このスレッドを起動するときにオペレーティング システムが呼び出した関数のメモリ アドレスを取得します。</summary>
      <returns>スレッドを実行するアプリケーション定義の関数を指すスレッドの起動アドレス。</returns>
      <exception cref="T:System.NotSupportedException">プロセスは、リモート コンピューター上にあります。</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.StartTime">
      <summary>オペレーティング システムによってスレッドを起動した時刻を取得します。</summary>
      <returns>オペレーティング システムがスレッドを起動したときのシステム上の時刻を表す <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">スレッド時間を取得できませんでした。</exception>
      <exception cref="T:System.NotSupportedException">プロセスは、リモート コンピューター上にあります。</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.ThreadState">
      <summary>このスレッドの現在の状態を取得します。</summary>
      <returns>実行中、待機中、終了など、スレッドの実行状態を示す <see cref="T:System.Diagnostics.ThreadState" />。</returns>
      <exception cref="T:System.NotSupportedException">プロセスは、リモート コンピューター上にあります。</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.TotalProcessorTime">
      <summary>このスレッドがプロセッサを使用した時間の合計を取得します。</summary>
      <returns>スレッドがプロセッサの制御を取得していた時間の合計を示す <see cref="T:System.TimeSpan" />。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">スレッド時間を取得できませんでした。</exception>
      <exception cref="T:System.NotSupportedException">プロセスは、リモート コンピューター上にあります。</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.UserProcessorTime">
      <summary>関連付けられたスレッドが、アプリケーションでコードを実行した時間を取得します。</summary>
      <returns>スレッドによるコード実行がオペレーティング システム コアではなくアプリケーションで行われた時間を示す <see cref="T:System.TimeSpan" />。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">スレッド時間を取得できませんでした。</exception>
      <exception cref="T:System.NotSupportedException">プロセスは、リモート コンピューター上にあります。</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.WaitReason">
      <summary>スレッドが待機している理由を取得します。</summary>
      <returns>スレッドが待機状態にある理由を表す <see cref="T:System.Diagnostics.ThreadWaitReason" />。</returns>
      <exception cref="T:System.InvalidOperationException">スレッドが待機状態にありません。</exception>
      <exception cref="T:System.NotSupportedException">プロセスは、リモート コンピューター上にあります。</exception>
    </member>
    <member name="T:System.Diagnostics.ProcessThreadCollection">
      <summary>
        <see cref="T:System.Diagnostics.ProcessThread" /> オブジェクトの厳密に型指定されたコレクションを提供します。</summary>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.#ctor">
      <summary>
        <see cref="T:System.Diagnostics.ProcessThreadCollection" /> インスタンスに関連付けずに、<see cref="T:System.Diagnostics.ProcessThread" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.#ctor(System.Diagnostics.ProcessThread[])">
      <summary>
        <see cref="T:System.Diagnostics.ProcessThreadCollection" /> インスタンスの配列を指定して、<see cref="T:System.Diagnostics.ProcessThread" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="processThreads">この <see cref="T:System.Diagnostics.ProcessThread" /> インスタンスを初期化するために使用する <see cref="T:System.Diagnostics.ProcessThreadCollection" /> インスタンスの配列。</param>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.Add(System.Diagnostics.ProcessThread)">
      <summary>プロセス スレッドをコレクションに追加します。</summary>
      <param name="thread">コレクションに追加するスレッド。</param>
      <returns>コレクション内のスレッドの 0 から始まるインデックス番号。</returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.Contains(System.Diagnostics.ProcessThread)">
      <summary>指定したプロセス スレッドがコレクション内にあるかどうかを調べます。</summary>
      <param name="thread">コレクション内にあるかどうかを調べるスレッドを示す <see cref="T:System.Diagnostics.ProcessThread" /> インスタンス。</param>
      <returns>スレッドがコレクション内にある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.CopyTo(System.Diagnostics.ProcessThread[],System.Int32)">
      <summary>コレクションの指定したインデックスに <see cref="T:System.Diagnostics.ProcessThread" /> インスタンスの配列をコピーします。</summary>
      <param name="array">コレクションに追加する <see cref="T:System.Diagnostics.ProcessThread" /> インスタンスの配列。</param>
      <param name="index">新しいインスタンスを追加する位置。</param>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.IndexOf(System.Diagnostics.ProcessThread)">
      <summary>コレクション内の指定したスレッドの位置を提供します。</summary>
      <param name="thread">インデックスを取得する <see cref="T:System.Diagnostics.ProcessThread" />。</param>
      <returns>
        <see cref="T:System.Diagnostics.ProcessThreadCollection" /> 内のスレッドの位置を定義する 0 から始まるインデックス番号。</returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.Insert(System.Int32,System.Diagnostics.ProcessThread)">
      <summary>コレクション内の指定した位置にプロセス スレッドを挿入します。</summary>
      <param name="index">スレッドを挿入する位置を示す 0 から始まるインデックス番号。</param>
      <param name="thread">コレクションに挿入するスレッド。</param>
    </member>
    <member name="P:System.Diagnostics.ProcessThreadCollection.Item(System.Int32)">
      <summary>一連のプロセス スレッドを反復処理するためのインデックスを取得します。</summary>
      <param name="index">コレクション内のスレッドの 0 から始まるインデックス値。</param>
      <returns>コレクション内のスレッドにインデックスを作成する <see cref="T:System.Diagnostics.ProcessThread" />。</returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.Remove(System.Diagnostics.ProcessThread)">
      <summary>コレクションからプロセス スレッドを削除します。</summary>
      <param name="thread">コレクションから削除するスレッド。</param>
    </member>
    <member name="T:System.Diagnostics.ProcessWindowStyle">
      <summary>プロセスを起動するときに新しいウィンドウを表示する方法を指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessWindowStyle.Hidden">
      <summary>非表示のウィンドウ スタイル。 ウィンドウは表示または非表示のいずれかにできます。 システムは、ウィンドウが非表示であることを示す場合は、そのウィンドウを描画しません。 ウィンドウが非表示の場合、そのウィンドウは無効になります。 非表示のウィンドウは、システムまたはその他のウィンドウからのメッセージを処理できますが、ユーザーからの入力を処理したり、出力を表示することはできません。 アプリケーションは、新しいウィンドウを非表示にして、そのウィンドウの外観をカスタマイズしてから、ウィンドウ スタイルを <see cref="F:System.Diagnostics.ProcessWindowStyle.Normal" /> にすることがよくあります。 <see cref="F:System.Diagnostics.ProcessWindowStyle.Hidden" /> を使用するには、<see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> プロパティが <see langword="true" /> に設定されている必要があります。</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessWindowStyle.Maximized">
      <summary>最大化されたウィンドウ スタイル。 既定では、最大化されたウィンドウは画面全体に拡大されます。子ウィンドウの場合は、親ウィンドウのクライアント領域全体に拡大されます。 ウィンドウにタイトル バーがある場合、システムは画面の最上部または親ウィンドウのクライアント領域の最上部にタイトル バーを自動的に移動します。 さらに、システムは、タイトル バーのドラッグによるウィンドウの移動をできなくするために、ウィンドウのサイズ変更境界と、タイトル バーのウィンドウ位置変更機能を無効にします。</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessWindowStyle.Minimized">
      <summary>最小化されたウィンドウ スタイル。 既定では、最小化されたウィンドウはタスクバー ボタンのサイズに縮小され、タスクバーに移動します。</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessWindowStyle.Normal">
      <summary>通常の表示ウィンドウ スタイル。 ウィンドウは、画面上の既定の場所に、<see cref="F:System.Diagnostics.ProcessWindowStyle.Normal" /> スタイルで表示されます。 ウィンドウが表示されている場合は、そのウィンドウに入力したり、そのウィンドウの出力を確認できます。 アプリケーションは、新しいウィンドウを <see cref="F:System.Diagnostics.ProcessWindowStyle.Hidden" /> スタイルに初期化し、ウィンドウの外観をカスタマイズしてから、そのウィンドウ スタイルを <see cref="F:System.Diagnostics.ProcessWindowStyle.Normal" /> にすることがよくあります。</summary>
    </member>
    <member name="T:System.Diagnostics.ThreadPriorityLevel">
      <summary>スレッドの優先順位を指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.AboveNormal">
      <summary>関連付けられた <see cref="T:System.Diagnostics.ProcessPriorityClass" /> の通常の優先順位を基準に 1 段階上を指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.BelowNormal">
      <summary>関連付けられた <see cref="T:System.Diagnostics.ProcessPriorityClass" /> の通常の優先順位を基準に 1 段階下を指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.Highest">
      <summary>最も高い優先順位を指定します。 関連付けられた <see cref="T:System.Diagnostics.ProcessPriorityClass" /> の通常の優先順位から 2 段階上です。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.Idle">
      <summary>アイドル優先順位を指定します。 関連付けられた <see cref="T:System.Diagnostics.ProcessPriorityClass" /> の値とは関係なく、すべてのスレッドの優先順位値の中で最も低い優先順位です。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.Lowest">
      <summary>最も低い優先順位を指定します。 関連付けられた <see cref="T:System.Diagnostics.ProcessPriorityClass" /> の通常の優先順位から 2 段階下です。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.Normal">
      <summary>関連付けられた <see cref="T:System.Diagnostics.ProcessPriorityClass" /> の通常の優先順位を指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.TimeCritical">
      <summary>時間が重要な優先順位を指定します。 関連付けられた <see cref="T:System.Diagnostics.ProcessPriorityClass" /> の値とは無関係に、すべてのスレッドの中で最も高い優先順位です。</summary>
    </member>
    <member name="T:System.Diagnostics.ThreadState">
      <summary>スレッドの現在の実行状態を指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Initialized">
      <summary>スレッドは初期化されたが、まだ開始していないことを示す状態。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Ready">
      <summary>解放されているプロセッサがないため、スレッドがプロセッサの使用を待機していることを示す状態。 スレッドは、次に利用可能になるプロセッサで実行する準備が整っています。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Running">
      <summary>スレッドが現在プロセッサを使用していることを示す状態。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Standby">
      <summary>スレッドがすぐにプロセッサを使用することを示す状態。 一度に 1 つのスレッドだけが、この状態になることができます。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Terminated">
      <summary>スレッドが実行を終了しスレッド自身も終了したことを示す状態。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Transition">
      <summary>スレッドが、実行前にプロセッサ以外のリソースを待機していることを示す状態。 たとえば、ディスクから実行スタックのページングを待機している場合があります。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Unknown">
      <summary>スレッドの状態が不明です。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Wait">
      <summary>スレッドが、周辺操作の完了またはリソースの解放を待機しているために、プロセッサを使用する準備が整っていないことを示す状態。 スレッドの準備が整うと、スケジュールが再設定されます。</summary>
    </member>
    <member name="T:System.Diagnostics.ThreadWaitReason">
      <summary>スレッドが待機している理由を示します。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.EventPairHigh">
      <summary>スレッドは、イベント ペア High を待機しています。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.EventPairLow">
      <summary>スレッドは、イベント ペア Low を待機しています。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.ExecutionDelay">
      <summary>スレッドの実行が遅延しています。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.Executive">
      <summary>スレッドは、スケジューラを待機しています。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.FreePage">
      <summary>スレッドは、空き仮想メモリ ページを待機しています。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.LpcReceive">
      <summary>スレッドは、ローカル プロシージャ呼び出しの到達を待機しています。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.LpcReply">
      <summary>スレッドは、ローカル プロシージャ呼び出しへの応答の到達を待機しています。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.PageIn">
      <summary>スレッドは、仮想メモリ ページのメモリへの到達を待機しています。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.PageOut">
      <summary>スレッドは、仮想メモリ ページのディスクへの書き込みを待機しています。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.Suspended">
      <summary>スレッドの実行は中断しています。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.SystemAllocation">
      <summary>スレッドは、システムによる割り当てを待機しています。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.Unknown">
      <summary>スレッドは、不明な理由のために待機しています。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.UserRequest">
      <summary>スレッドは、ユーザー要求を待機しています。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.VirtualMemory">
      <summary>スレッドは、仮想メモリの割り当てを待機しています。</summary>
    </member>
  </members>
</doc>
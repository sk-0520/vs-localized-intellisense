<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.ObjectModel</name>
  </assembly>
  <members>
    <member name="T:System.Collections.ObjectModel.KeyedCollection`2">
      <summary vsli:raw="Provides the abstract base class for a collection whose keys are embedded in the values.">キーが値に埋め込まれているコレクションの抽象基本クラスを提供します。</summary>
      <typeparam name="TKey" vsli:raw="The type of keys in the collection.">コレクション内のキーの型。</typeparam>
      <typeparam name="TItem" vsli:raw="The type of items in the collection.">コレクション内の項目の型。</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt; class that uses the default equality comparer.">既定の等値比較子を使用する <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt; class that uses the specified equality comparer.">指定した等値比較子を使用する <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="comparer" vsli:raw="The implementation of the &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; generic interface to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default equality comparer for the type of the key, obtained from &lt;see cref=&quot;P:System.Collections.Generic.EqualityComparer`1.Default&quot; /&gt;.">キーを比較する場合に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> ジェネリック インターフェイスの実装。または、<see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /> から取得する、キーの型の既定の等値比較子を使用する場合は <see langword="null" />。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt; class that uses the specified equality comparer and creates a lookup dictionary when the specified threshold is exceeded.">指定した等値比較子を使用し、指定したしきい値を超えた場合に検索ディクショナリを作成する、<see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="comparer" vsli:raw="The implementation of the &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; generic interface to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default equality comparer for the type of the key, obtained from &lt;see cref=&quot;P:System.Collections.Generic.EqualityComparer`1.Default&quot; /&gt;.">キーを比較する場合に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> ジェネリック インターフェイスの実装。または、<see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /> から取得する、キーの型の既定の等値比較子を使用する場合は <see langword="null" />。</param>
      <param name="dictionaryCreationThreshold" vsli:raw="The number of elements the collection can hold without creating a lookup dictionary (0 creates the lookup dictionary when the first item is added), or -1 to specify that a lookup dictionary is never created.">検索ディクショナリを作成せずにコレクションが保有できる要素数 (0 を指定すると最初の項目の追加時に検索ディクショナリが作成される)。検索ディクショナリを作成しない場合は -1。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;dictionaryCreationThreshold&quot; /&gt; is less than -1.">
        <paramref name="dictionaryCreationThreshold" /> が -1 未満です。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
      <summary vsli:raw="Changes the key associated with the specified element in the lookup dictionary.">検索ディクショナリの指定した要素に関連付けられたキーを変更します。</summary>
      <param name="item" vsli:raw="The element to change the key of.">変更するキーの要素。</param>
      <param name="newKey" vsli:raw="The new key for &lt;paramref name=&quot;item&quot; /&gt;.">
        <paramref name="item" /> の新しいキー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;item&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="item" /> が <see langword="null" /> です。  

または - 
<paramref name="key" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;item&quot; /&gt; is not found.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;key&quot; /&gt; already exists in the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt;.">
        <paramref name="item" /> が見つかりません。  
または 
 <paramref name="key" /> は <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> に既に存在します。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
      <summary vsli:raw="Removes all elements from the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt;.">
        <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> からすべての要素を削除します。</summary>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer">
      <summary vsli:raw="Gets the generic equality comparer that is used to determine equality of keys in the collection.">コレクションの複数のキーの値が等しいかどうかを確認するために使用される、ジェネリック等値比較子を取得します。</summary>
      <returns vsli:raw="The implementation of the &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; generic interface that is used to determine equality of keys in the collection.">コレクションの複数のキーの値が等しいかどうかを確認するために使用される <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> ジェネリック インターフェイスの実装。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
      <summary vsli:raw="Determines whether the collection contains an element with the specified key.">指定したキーの要素がコレクションに含まれているかどうかを確認します。</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt;.">
        <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 内で検索されるキー。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
      <summary vsli:raw="Gets the lookup dictionary of the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt;.">
        <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> の検索ディクショナリを取得します。</summary>
      <returns vsli:raw="The lookup dictionary of the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt;, if it exists; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">存在する場合は <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> の検索ディクショナリ。それ以外の場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
      <summary vsli:raw="When implemented in a derived class, extracts the key from the specified element.">派生クラスで実装された場合、指定した要素からキーを抽出します。</summary>
      <param name="item" vsli:raw="The element from which to extract the key.">キーの抽出元要素。</param>
      <returns vsli:raw="The key for the specified element.">指定した要素のキー。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
      <summary vsli:raw="Inserts an element into the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt; at the specified index.">
        <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 内の指定したインデックスの位置に要素を挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">
        <paramref name="item" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="item" vsli:raw="The object to insert.">挿入するオブジェクト。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see cref=&quot;P:System.Collections.ObjectModel.Collection`1.Count&quot; /&gt;.">
        <paramref name="index" /> が 0 未満です。  

または - 
<paramref name="index" /> が <see cref="P:System.Collections.ObjectModel.Collection`1.Count" /> より大きくなっています。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
      <summary vsli:raw="Gets the element with the specified key.">指定したキーを持つ要素を取得します。</summary>
      <param name="key" vsli:raw="The key of the element to get.">取得する要素のキー。</param>
      <returns vsli:raw="The element with the specified key. If an element with the specified key is not found, an exception is thrown.">指定したキーを持つ要素。 指定したキーを持つ要素が見つからない場合は、例外がスローされます。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="An element with the specified key does not exist in the collection.">指定したキーを持つ要素がコレクション内に存在しません。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt;.">指定したキーを持つ要素を <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> から削除します。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">削除する要素のキー。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is not found in the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt;.">要素が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  このメソッドは、<see langword="false" /> が <paramref name="key" /> に見つからない場合にも <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> を返します。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the &lt;see cref=&quot;T:System.Collections.ObjectModel.KeyedCollection`2&quot; /&gt;.">
        <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> の指定したインデックスにある要素を削除します。</summary>
      <param name="index" vsli:raw="The index of the element to remove.">削除する要素のインデックス。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">指定したインデックス位置の項目を、指定した項目で置き換えます。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to be replaced.">置き換えられる項目の 0 から始まるインデックス。</param>
      <param name="item" vsli:raw="The new item.">新しい項目。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.TryGetValue(`0,`1@)">
      <param name="key" vsli:raw="The key of the item to search in the collection." />
      <param name="item" vsli:raw="When this method returns &lt;see langword=&quot;true&quot; /&gt;, the item from the collection that matches the provided key; when this method returns &lt;see langword=&quot;false&quot; /&gt;, the &lt;see langword=&quot;default&quot; /&gt; value for the type of the collection." />
    </member>
    <member name="T:System.Collections.ObjectModel.ObservableCollection`1">
      <summary vsli:raw="Represents a dynamic data collection that provides notifications when items get added or removed, or when the whole list is refreshed.">項目が追加、削除されたとき、またはリスト全体が更新されたときに通知を提供する動的なデータ コレクションを表します。</summary>
      <typeparam name="T" vsli:raw="The type of elements in the collection.">コレクション内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.ObjectModel.ObservableCollection`1&quot; /&gt; class.">
        <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.ObjectModel.ObservableCollection`1&quot; /&gt; class that contains elements copied from the specified collection.">指定したコレクションからコピーされた要素を格納する、<see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection" vsli:raw="The collection from which the elements are copied.">要素のコピー元のコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collection&quot; /&gt; parameter cannot be &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> パラメーターとして <see langword="null" /> を使用することはできません。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.List{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.ObjectModel.ObservableCollection`1&quot; /&gt; class that contains elements copied from the specified list.">指定したリストからコピーされた要素を格納する <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="list" vsli:raw="The list from which the elements are copied.">要素のコピー元のリスト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;list&quot; /&gt; parameter cannot be &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="list" /> パラメーターとして <see langword="null" /> を使用することはできません。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy">
      <summary vsli:raw="Disallows reentrant attempts to change this collection.">このコレクションを変更するための再入試行を禁止します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.IDisposable&quot; /&gt; object that can be used to dispose of the object.">オブジェクトの破棄に使用できる <see cref="T:System.IDisposable" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.CheckReentrancy">
      <summary vsli:raw="Checks for reentrant attempts to change this collection.">このコレクションを変更するための再入試行をチェックします。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If there was a call to &lt;see cref=&quot;M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy&quot; /&gt; of which the &lt;see cref=&quot;T:System.IDisposable&quot; /&gt; return value has not yet been disposed of. Typically, this means when there are additional attempts to change this collection during a &lt;see cref=&quot;E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged&quot; /&gt; event. However, it depends on when derived classes choose to call &lt;see cref=&quot;M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy&quot; /&gt;.">
        <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy" /> が呼び出され、その <see cref="T:System.IDisposable" /> 戻り値がまだ破棄されていない場合。 通常、これは <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> イベントの発生中に、コレクションに対して追加の変更が実行されることを意味します。 ただし、このような状況が発生するかどうかは、派生クラスが <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy" /> の呼び出しを選択するタイミングに応じて異なります。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.ClearItems">
      <summary vsli:raw="Removes all items from the collection.">コレクションからすべての項目を削除します。</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged">
      <summary vsli:raw="Occurs when an item is added, removed, or moved, or the entire list is refreshed.">項目が追加、削除、変更、移動された場合、またはリスト全体が更新されたときに発生します。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.InsertItem(System.Int32,`0)">
      <summary vsli:raw="Inserts an item into the collection at the specified index.">コレクション内の指定したインデックスの位置に項目を挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">
        <paramref name="item" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="item" vsli:raw="The object to insert.">挿入するオブジェクト。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.Move(System.Int32,System.Int32)">
      <summary vsli:raw="Moves the item at the specified index to a new location in the collection.">指定したインデックスが示す位置にある項目を、コレクション内の新しい場所に移動します。</summary>
      <param name="oldIndex" vsli:raw="The zero-based index specifying the location of the item to be moved.">移動する項目の場所を指定する、0 から始まるインデックス。</param>
      <param name="newIndex" vsli:raw="The zero-based index specifying the new location of the item.">項目の新しい場所を指定する、0 から始まるインデックス。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.MoveItem(System.Int32,System.Int32)">
      <summary vsli:raw="Moves the item at the specified index to a new location in the collection.">指定したインデックスが示す位置にある項目を、コレクション内の新しい場所に移動します。</summary>
      <param name="oldIndex" vsli:raw="The zero-based index specifying the location of the item to be moved.">移動する項目の場所を指定する、0 から始まるインデックス。</param>
      <param name="newIndex" vsli:raw="The zero-based index specifying the new location of the item.">項目の新しい場所を指定する、0 から始まるインデックス。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged&quot; /&gt; event with the provided arguments.">指定された引数を使用して、<see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> イベントを発生させます。</summary>
      <param name="e" vsli:raw="Arguments of the event being raised.">発生しているイベントの引数。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged&quot; /&gt; event with the provided arguments.">指定された引数を使用して、<see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> イベントを発生させます。</summary>
      <param name="e" vsli:raw="Arguments of the event being raised.">発生しているイベントの引数。</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged">
      <summary vsli:raw="Occurs when a property value changes.">プロパティ値が変更するときに発生します。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.RemoveItem(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the collection.">指定したインデックスが示す位置にある項目をコレクションから削除します。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">削除する要素の 0 から始まるインデックス。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the element at the specified index.">指定したインデックス位置にある要素を置き換えます。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to replace.">置き換える要素の 0 から始まるインデックス番号。</param>
      <param name="item" vsli:raw="The new value for the element at the specified index.">指定したインデックス位置に存在する要素の新しい値。</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary vsli:raw="Occurs when a property value changes.">プロパティ値が変更するときに発生します。</summary>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyDictionary`2">
      <summary>キーと値のペアの読み取り専用ジェネリック コレクションを表します。</summary>
      <typeparam name="TKey">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリ内の値の型。</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>指定したディクショナリのラッパーである、<see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary">ラップするディクショナリ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ContainsKey(`0)">
      <summary>指定されたキーを持つ要素がディクショナリに格納されているかどうかを確認します。</summary>
      <param name="key">ディクショナリ内で検索するキー。</param>
      <returns>指定したキーを持つ要素がディクショナリに格納されている場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Count">
      <summary>ディクショナリ内の項目の数を取得します。</summary>
      <returns>ディクショナリ内の項目の数。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Dictionary">
      <summary>この <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> オブジェクトによってラップされるディクショナリを取得します。</summary>
      <returns>このオブジェクトにラップされているディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> を反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Item(`0)">
      <summary>指定したキーを持つ要素を取得します。</summary>
      <param name="key">取得する要素のキー。</param>
      <returns>指定したキーを持つ要素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">プロパティは取得されますが、<paramref name="key" /> が見つかりません。</exception>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection">
      <summary>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> オブジェクトのキーの読み取り専用コレクションを表します。</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>特定の配列インデックスを開始位置として、コレクションの要素を配列にコピーします。</summary>
      <param name="array">コレクションから要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。  

または - 
コピー元のコレクションの要素数が、コピー先の <paramref name="arrayIndex" /> の <paramref name="array" /> から最後までの領域を超えています。  

または 
型 <paramref name="T" /> をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.Count">
      <summary>コレクション内の要素の数を取得します。</summary>
      <returns>コレクション内の要素の数。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
      <summary>常に <see cref="T:System.NotSupportedException" /> 例外をスローします。</summary>
      <param name="item">コレクションに追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
      <summary>常に <see cref="T:System.NotSupportedException" /> 例外をスローします。</summary>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
      <summary>コレクションに特定の値が格納されているかどうかを判断します。</summary>
      <param name="item">コレクション内で検索するオブジェクト。</param>
      <returns>
        <paramref name="item" /> がコレクションに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
      <summary>ディクショナリが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>常に <see langword="true" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
      <summary>常に <see cref="T:System.NotSupportedException" /> 例外をスローします。</summary>
      <param name="item">コレクションから削除するオブジェクト。</param>
      <returns>
        <paramref name="item" /> がコレクションから正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 また、このメソッドは、元のコレクションに <paramref name="item" /> が見つからない場合にも <see langword="false" /> を返します。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>特定の配列インデックスを開始位置として、コレクションの要素を配列にコピーします。</summary>
      <param name="array">コレクションから要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。  

または - 
コピー元のコレクションの要素数が、コピー先の <paramref name="index" /> の <paramref name="array" /> から最後までの領域を超えています。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary>コレクションへのアクセスが同期されるかどうか (スレッド セーフかどうか) を示す値を取得します。</summary>
      <returns>コレクションへのアクセスが同期されている (スレッド セーフである) 場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary>コレクションへのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>コレクションへのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Keys">
      <summary>ディクショナリのキーが格納されているキー コレクションを取得します。</summary>
      <returns>ディクショナリのキーが格納されているキー コレクション。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>常に <see cref="T:System.NotSupportedException" /> 例外をスローします。</summary>
      <param name="item">ディクショナリに追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear">
      <summary>常に <see cref="T:System.NotSupportedException" /> 例外をスローします。</summary>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>ディクショナリに特定の値が含まれているかどうかを判断します。</summary>
      <param name="item">ディクショナリ内で検索するオブジェクト。</param>
      <returns>
        <paramref name="item" /> がディクショナリに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>指定した配列インデックスを開始位置として、ディクショナリの要素を配列にコピーします。</summary>
      <param name="array">ディクショナリから要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。

または - 
コピー元のディクショナリの要素数が、コピー先の <paramref name="arrayIndex" /> の <paramref name="array" /> から最後までの領域を超えています。

または 
型 <paramref name="T" /> をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>ディクショナリが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>ディクショナリが<see langword="true" />読み取り専用であることを示すために、常にを返します。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>常に <see cref="T:System.NotSupportedException" /> 例外をスローします。</summary>
      <param name="item">ディクショナリから削除するオブジェクト。</param>
      <returns>常に <see cref="T:System.NotSupportedException" /> 例外をスローします。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <summary>常に <see cref="T:System.NotSupportedException" /> 例外をスローします。</summary>
      <param name="key">追加する要素のキーとして使用するオブジェクト。</param>
      <param name="value">追加する要素の値として使用するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <summary>指定したキーを持つ要素を取得します。</summary>
      <param name="key">取得または設定する要素のキー。</param>
      <returns>指定したキーを持つ要素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">プロパティは取得されますが、<paramref name="key" /> が見つかりません。</exception>
      <exception cref="T:System.NotSupportedException">プロパティが設定されています。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>ディクショナリのキーを含むコレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> を実装するオブジェクトのキーが格納されているコレクション。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <summary>常に <see cref="T:System.NotSupportedException" /> 例外をスローします。</summary>
      <param name="key">削除する要素のキー。</param>
      <returns>常に <see cref="T:System.NotSupportedException" /> 例外をスローします。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>ディクショナリ内の値を含むコレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> を実装するオブジェクト内の値が格納されているコレクション。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary>読み取り専用のディクショナリのキーを含む列挙可能なコレクションを取得します。</summary>
      <returns>読み取り専用のディクショナリのキーを含む列挙可能なコレクション。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary>読み取り専用のディクショナリの値を含む列挙可能なコレクションを取得します。</summary>
      <returns>読み取り専用のディクショナリの値を含む列挙可能なコレクション。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>指定した配列インデックスを開始位置として、ディクショナリの要素を配列にコピーします。</summary>
      <param name="array">ディクショナリから要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。  
または 
コピー元のディクショナリの要素数が、コピー先の <paramref name="index" /> の <paramref name="array" /> から最後までの領域を超えています。  

または - 
コピー元のディクショナリの型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>ディクショナリへのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>ディクショナリへのアクセスが同期されている (スレッド セーフである) 場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>ディクショナリへのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>ディクショナリへのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>常に <see cref="T:System.NotSupportedException" /> 例外をスローします。</summary>
      <param name="key">追加する要素のキー。</param>
      <param name="value">追加する要素の値。</param>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Clear">
      <summary>常に <see cref="T:System.NotSupportedException" /> 例外をスローします。</summary>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>指定されたキーを持つ要素がディクショナリに格納されているかどうかを確認します。</summary>
      <param name="key">ディクショナリ内で検索するキー。</param>
      <returns>指定したキーを持つ要素がディクショナリに格納されている場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>ディクショナリの列挙子を返します。</summary>
      <returns>このディクショナリの列挙子。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>ディクショナリが固定サイズかどうかを示す値を取得します。</summary>
      <returns>ディクショナリが固定サイズの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>ディクショナリが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>常に <see langword="true" />。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>指定したキーを持つ要素を取得します。</summary>
      <param name="key">取得または設定する要素のキー。</param>
      <returns>指定したキーを持つ要素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">プロパティが設定されています。  

または - 
このプロパティが設定されていますが、<paramref name="key" /> がコレクション内に存在しません。また、ディクショナリが固定サイズです。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Keys">
      <summary>ディクショナリのキーを含むコレクションを取得します。</summary>
      <returns>ディクショナリのキーが格納されているコレクション。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>常に <see cref="T:System.NotSupportedException" /> 例外をスローします。</summary>
      <param name="key">削除する要素のキー。</param>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Values">
      <summary>ディクショナリ内の値を含むコレクションを取得します。</summary>
      <returns>ディクショナリ内の値が格納されているコレクション。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
      <summary>指定されたキーに関連付けられている値を取得します。</summary>
      <param name="key">値を取得するキー。</param>
      <param name="value">このメソッドが返されるときに、キーが見つかった場合は、指定したキーに関連付けられている値。それ以外の場合は <paramref name="value" /> パラメーターの型に対する既定の値。 このパラメーターは初期化せずに渡されます。</param>
      <returns>指定したキーを持つ要素が <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> を実装するオブジェクトに格納されている場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection">
      <summary>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> オブジェクトの値の読み取り専用コレクションを表します。</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>特定の配列インデックスを開始位置として、コレクションの要素を配列にコピーします。</summary>
      <param name="array">コレクションから要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。  

または - 
コピー元のコレクションの要素数が、コピー先の <paramref name="arrayIndex" /> の <paramref name="array" /> から最後までの領域を超えています。  

または - 
型 <paramref name="T" /> をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.Count">
      <summary>コレクション内の要素の数を取得します。</summary>
      <returns>コレクション内の要素の数。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
      <summary>常に <see cref="T:System.NotSupportedException" /> 例外をスローします。</summary>
      <param name="item">コレクションに追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
      <summary>常に <see cref="T:System.NotSupportedException" /> 例外をスローします。</summary>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
      <summary>コレクションに特定の値が格納されているかどうかを判断します。</summary>
      <param name="item">コレクション内で検索するオブジェクト。</param>
      <returns>
        <paramref name="item" /> がコレクションに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
      <summary>コレクションが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>常に <see langword="true" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
      <summary>常に <see cref="T:System.NotSupportedException" /> 例外をスローします。</summary>
      <param name="item">コレクションから削除するオブジェクト。</param>
      <returns>
        <paramref name="item" /> がコレクションから正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドは、項目が元のコレクションに見つからない場合にも <see langword="false" /> を返します。</returns>
      <exception cref="T:System.NotSupportedException">すべての場合。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>特定の配列インデックスを開始位置として、コレクションの要素を配列にコピーします。</summary>
      <param name="array">コレクションから要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。  
または 
コピー元のコレクションの要素数が、コピー先の <paramref name="index" /> の <paramref name="array" /> から最後までの領域を超えています。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary>コレクションへのアクセスが同期されるかどうか (スレッド セーフかどうか) を示す値を取得します。</summary>
      <returns>コレクションへのアクセスが同期されている (スレッド セーフである) 場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary>コレクションへのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>コレクションへのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Values">
      <summary>ディクショナリ内の値を含むコレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> を実装するオブジェクト内の値が格納されているコレクション。</returns>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1">
      <summary vsli:raw="Represents a read-only &lt;see cref=&quot;T:System.Collections.ObjectModel.ObservableCollection`1&quot; /&gt;.">読み取り専用の <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> を表します。</summary>
      <typeparam name="T" vsli:raw="The type of elements in the collection.">コレクション内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1&quot; /&gt; class that serves as a wrapper around the specified &lt;see cref=&quot;T:System.Collections.ObjectModel.ObservableCollection`1&quot; /&gt;.">指定した <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" /> のラッパーとして使用される <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="list" vsli:raw="The &lt;see cref=&quot;T:System.Collections.ObjectModel.ObservableCollection`1&quot; /&gt; with which to create this instance of the &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1&quot; /&gt; class.">
        <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> クラスのこのインスタンスを作成するために使用する <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;list&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="list" /> は <see langword="null" />です。</exception>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged">
      <summary vsli:raw="Occurs when an item is added or removed.">項目が追加または削除されたときに発生します。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged&quot; /&gt; event using the provided arguments.">指定された引数を使用して、<see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged" /> イベントを発生させます。</summary>
      <param name="args" vsli:raw="Arguments of the event being raised.">発生しているイベントの引数。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged&quot; /&gt; event using the provided arguments.">指定された引数を使用して、<see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged" /> イベントを発生させます。</summary>
      <param name="args" vsli:raw="Arguments of the event being raised.">発生しているイベントの引数。</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged">
      <summary vsli:raw="Occurs when a property value changes.">プロパティ値が変更するときに発生します。</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary vsli:raw="Occurs when the collection changes.">コレクションが変更されたときに発生します。</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary vsli:raw="Occurs when a property value changes.">プロパティ値が変更するときに発生します。</summary>
    </member>
    <member name="T:System.Collections.Specialized.INotifyCollectionChanged">
      <summary vsli:raw="Notifies listeners of dynamic changes, such as when an item is added and removed or the whole list is cleared.">項目が追加、削除された場合やリスト全体がクリアされた場合など、動的な変更をリスナーに通知します。</summary>
    </member>
    <member name="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged">
      <summary vsli:raw="Occurs when the collection changes.">コレクションが変更されたときに発生します。</summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedAction">
      <summary vsli:raw="Describes the action that caused a &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event.">
        <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントの原因となったアクションについて記述します。</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add">
      <summary vsli:raw="An item was added to the collection.">コレクションに項目が追加されました。</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move">
      <summary vsli:raw="An item was moved within the collection.">コレクション内で項目が移動されました。</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove">
      <summary vsli:raw="An item was removed from the collection.">コレクションから項目が削除されました。</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace">
      <summary vsli:raw="An item was replaced in the collection.">コレクションの項目が置き換えられました。</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset">
      <summary vsli:raw="The contents of the collection changed dramatically.">コレクションの内容が消去されました。</summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event.">
        <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset&quot; /&gt; change.">
        <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" /> の変更を記述する <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action" vsli:raw="The action that caused the event. This must be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset&quot; /&gt;.">イベントの原因となったアクション。 これは、<see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" /> に設定する必要があります。</param>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a multi-item change.">複数項目の変更を表す <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action" vsli:raw="The action that caused the event. This can be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset&quot; /&gt;, &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Add&quot; /&gt;, or &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove&quot; /&gt;.">イベントの原因となったアクション。 これは <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />、 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" />、または <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />に設定できます。</param>
      <param name="changedItems" vsli:raw="The items that are affected by the change.">変更の影響を受ける項目。</param>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a multi-item &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt; change.">複数項目の <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> の変更について記述する <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action" vsli:raw="The action that caused the event. This can only be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt;.">イベントの原因となったアクション。 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> にのみ設定できます。</param>
      <param name="newItems" vsli:raw="The new items that are replacing the original items.">元の項目を置き換える新しい項目。</param>
      <param name="oldItems" vsli:raw="The original items that are replaced.">置き換えられる元の項目。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is not Replace.">
        <paramref name="action" /> が Replace ではない場合。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="If &lt;paramref name=&quot;oldItems&quot; /&gt; or &lt;paramref name=&quot;newItems&quot; /&gt; is null.">
        <paramref name="oldItems" /> または <paramref name="newItems" /> が null の場合。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a multi-item &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt; change.">複数項目の <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> の変更について記述する <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action" vsli:raw="The action that caused the event. This can only be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt;.">イベントの原因となったアクション。 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> にのみ設定できます。</param>
      <param name="newItems" vsli:raw="The new items that are replacing the original items.">元の項目を置き換える新しい項目。</param>
      <param name="oldItems" vsli:raw="The original items that are replaced.">置き換えられる元の項目。</param>
      <param name="startingIndex" vsli:raw="The index of the first item of the items that are being replaced.">置き換えられる項目の最初の項目のインデックス。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is not Replace.">
        <paramref name="action" /> が Replace ではない場合。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="If &lt;paramref name=&quot;oldItems&quot; /&gt; or &lt;paramref name=&quot;newItems&quot; /&gt; is null.">
        <paramref name="oldItems" /> または <paramref name="newItems" /> が null の場合。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a multi-item change or a &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset&quot; /&gt; change.">複数項目の変更または <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" /> による変更を記述する <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action" vsli:raw="The action that caused the event. This can be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset&quot; /&gt;, &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Add&quot; /&gt;, or &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove&quot; /&gt;.">イベントの原因となったアクション。 これは <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />、<see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" />、または <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> に設定できます。</param>
      <param name="changedItems" vsli:raw="The items affected by the change.">変更の影響を受ける項目。</param>
      <param name="startingIndex" vsli:raw="The index where the change occurred.">変更が発生したインデックス。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is not Reset, Add, or Remove, if &lt;paramref name=&quot;action&quot; /&gt; is Reset and either &lt;paramref name=&quot;changedItems&quot; /&gt; is not null or &lt;paramref name=&quot;startingIndex&quot; /&gt; is not -1, or if action is Add or Remove and &lt;paramref name=&quot;startingIndex&quot; /&gt; is less than -1.">
        <paramref name="action" /> が Reset、Add、Remove ではない場合、<paramref name="action" /> が Reset で、かつ<paramref name="changedItems" /> が null ではないか、<paramref name="startingIndex" /> が -1 ではない場合、またはアクションが Add または Remove で、かつ <paramref name="startingIndex" /> が -1 より小さい場合。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is Add or Remove and &lt;paramref name=&quot;changedItems&quot; /&gt; is null.">
        <paramref name="action" /> が Add または Remove で、<paramref name="changedItems" /> が null の場合。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a multi-item &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Move&quot; /&gt; change.">複数項目の <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" /> の変更について記述する <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action" vsli:raw="The action that caused the event. This can only be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Move&quot; /&gt;.">イベントの原因となったアクション。 これは <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />にのみ設定できます。</param>
      <param name="changedItems" vsli:raw="The items affected by the change.">変更の影響を受ける項目。</param>
      <param name="index" vsli:raw="The new index for the changed items.">変更された項目の新しいインデックス。</param>
      <param name="oldIndex" vsli:raw="The old index for the changed items.">変更された項目の古いインデックス。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is not Move or &lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="action" /> が Move でないか、<paramref name="index" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a one-item change.">単一項目の変更を記述する <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action" vsli:raw="The action that caused the event. This can be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset&quot; /&gt;, &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Add&quot; /&gt;, or &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove&quot; /&gt;.">イベントの原因となったアクション。 これは <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />、<see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" />、または <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> に設定できます。</param>
      <param name="changedItem" vsli:raw="The item that is affected by the change.">変更の影響を受ける項目。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is not Reset, Add, or Remove, or if &lt;paramref name=&quot;action&quot; /&gt; is Reset and &lt;paramref name=&quot;changedItem&quot; /&gt; is not null.">
        <paramref name="action" /> が Reset、Add、Remove ではない場合、または <paramref name="action" /> が Reset で、かつ <paramref name="changedItem" /> が null ではない場合。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a one-item change.">単一項目の変更を記述する <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action" vsli:raw="The action that caused the event. This can be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset&quot; /&gt;, &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Add&quot; /&gt;, or &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove&quot; /&gt;.">イベントの原因となったアクション。 これは <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />、<see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" />、または <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> に設定できます。</param>
      <param name="changedItem" vsli:raw="The item that is affected by the change.">変更の影響を受ける項目。</param>
      <param name="index" vsli:raw="The index where the change occurred.">変更が発生したインデックス。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is not Reset, Add, or Remove, or if &lt;paramref name=&quot;action&quot; /&gt; is Reset and either &lt;paramref name=&quot;changedItems&quot; /&gt; is not null or &lt;paramref name=&quot;index&quot; /&gt; is not -1.">
        <paramref name="action" /> が Reset、Add、Remove のいずれでもない場合。または、<paramref name="action" /> が Reset であり、かつ <paramref name="changedItems" /> が null でないか、<paramref name="index" /> が -1 でない場合。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a one-item &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Move&quot; /&gt; change.">単一項目 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" /> の変更を記述する <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action" vsli:raw="The action that caused the event. This can only be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Move&quot; /&gt;.">イベントの原因となったアクション。 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" /> にのみ設定できます。</param>
      <param name="changedItem" vsli:raw="The item affected by the change.">変更の影響を受ける項目。</param>
      <param name="index" vsli:raw="The new index for the changed item.">変更された項目の新しいインデックス。</param>
      <param name="oldIndex" vsli:raw="The old index for the changed item.">変更された項目の古いインデックス。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is not Move or &lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="action" /> が Move でないか、<paramref name="index" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a one-item &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt; change.">単一項目 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> の変更を記述する <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action" vsli:raw="The action that caused the event. This can only be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt;.">イベントの原因となったアクション。 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> にのみ設定できます。</param>
      <param name="newItem" vsli:raw="The new item that is replacing the original item.">元の項目を置き換える新しい項目。</param>
      <param name="oldItem" vsli:raw="The original item that is replaced.">置き換えられる元の項目。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is not Replace.">
        <paramref name="action" /> が Replace ではない場合。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedEventArgs&quot; /&gt; class that describes a one-item &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt; change.">単一項目 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> の変更を記述する <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action" vsli:raw="The action that caused the event. This can be set to &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt;.">イベントの原因となったアクション。 これは <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> に設定できます。</param>
      <param name="newItem" vsli:raw="The new item that is replacing the original item.">元の項目を置き換える新しい項目。</param>
      <param name="oldItem" vsli:raw="The original item that is replaced.">置き換えられる元の項目。</param>
      <param name="index" vsli:raw="The index of the item being replaced.">置き換えられる項目のインデックス。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="If &lt;paramref name=&quot;action&quot; /&gt; is not Replace.">
        <paramref name="action" /> が Replace ではない場合。</exception>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.Action">
      <summary vsli:raw="Gets the action that caused the event.">イベントの原因となったアクションを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Specialized.NotifyCollectionChangedAction&quot; /&gt; value that describes the action that caused the event.">イベントの原因となったアクションを説明する <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction" /> 値。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems">
      <summary vsli:raw="Gets the list of new items involved in the change.">変更に関連する新しい項目のリストを取得します。</summary>
      <returns vsli:raw="The list of new items involved in the change.">変更に関連する新しい項目のリスト。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewStartingIndex">
      <summary vsli:raw="Gets the index at which the change occurred.">変更が発生した位置のインデックスを取得します。</summary>
      <returns vsli:raw="The zero-based index at which the change occurred.">変更が発生した位置の 0 から始まるインデックス。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldItems">
      <summary vsli:raw="Gets the list of items affected by a &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt;, Remove, or Move action.">
        <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />、Remove、Move アクションの影響を受ける項目の一覧を取得します。</summary>
      <returns vsli:raw="The list of items affected by a &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace&quot; /&gt;, Remove, or Move action.">
        <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />、Remove、または Move アクションで影響を受ける項目のリスト。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldStartingIndex">
      <summary vsli:raw="Gets the index at which a &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Move&quot; /&gt;, Remove, or Replace action occurred.">
        <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />、Remove、または Replace アクションが発生した位置のインデックスを取得します。</summary>
      <returns vsli:raw="The zero-based index at which a &lt;see cref=&quot;F:System.Collections.Specialized.NotifyCollectionChangedAction.Move&quot; /&gt;, Remove, or Replace action occurred.">
        <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />、Remove、または Replace アクションが発生した位置の 0 から始まるインデックス。</returns>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event.">
        <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender" vsli:raw="The object that raised the event.">イベントを発生させたオブジェクト。</param>
      <param name="e" vsli:raw="Information about the event.">イベントに関する情報。</param>
    </member>
    <member name="T:System.ComponentModel.DataErrorsChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.DataErrorsChangedEventArgs.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataErrorsChangedEventArgs&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.DataErrorsChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="propertyName" vsli:raw="The name of the property that has an error.  &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; if the error is object-level.">エラーのあるプロパティの名前。  エラーがオブジェクト レベルの場合、<see langword="null" /> または <see cref="F:System.String.Empty" /> となります。</param>
    </member>
    <member name="P:System.ComponentModel.DataErrorsChangedEventArgs.PropertyName">
      <summary vsli:raw="Gets the name of the property that has an error.">エラーのあるプロパティの名前を取得します。</summary>
      <returns vsli:raw="The name of the property that has an error. &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; if the error is object-level.">エラーのあるプロパティの名前。 エラーがオブジェクト レベルの場合、<see langword="null" /> または <see cref="F:System.String.Empty" /> となります。</returns>
    </member>
    <member name="T:System.ComponentModel.INotifyDataErrorInfo">
      <summary vsli:raw="Defines members that data entity classes can implement to provide custom synchronous and asynchronous validation support.">カスタムの同期検証および非同期検証サポートを提供するためにデータ エンティティ クラスに実装できるメンバーを定義します。</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged">
      <summary vsli:raw="Occurs when the validation errors have changed for a property or for the entire entity.">プロパティまたはエンティティ全体の検証エラーが変更されたときに発生します。</summary>
    </member>
    <member name="M:System.ComponentModel.INotifyDataErrorInfo.GetErrors(System.String)">
      <summary vsli:raw="Gets the validation errors for a specified property or for the entire entity.">指定されたプロパティまたはエンティティ全体の検証エラーを取得します。</summary>
      <param name="propertyName" vsli:raw="The name of the property to retrieve validation errors for; or &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt;, to retrieve entity-level errors.">検証エラーを取得するプロパティの名前。または、エンティティ レベルのエラーを取得する場合は <see langword="null" /> または <see cref="F:System.String.Empty" />。</param>
      <returns vsli:raw="The validation errors for the property or entity.">プロパティまたはエンティティの検証エラー。</returns>
    </member>
    <member name="P:System.ComponentModel.INotifyDataErrorInfo.HasErrors">
      <summary vsli:raw="Gets a value that indicates whether the entity has validation errors.">エンティティに検証エラーがあるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entity currently has validation errors; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在エンティティに検証エラーがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanged">
      <summary vsli:raw="Notifies clients that a property value has changed.">プロパティ値が変更されたことをクライアントに通知します。</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
      <summary vsli:raw="Occurs when a property value changes.">プロパティ値が変更するときに発生します。</summary>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanging">
      <summary vsli:raw="Notifies clients that a property value is changing.">プロパティ値が変更されようとしていることをクライアントに通知します。</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging">
      <summary vsli:raw="Occurs when a property value is changing.">プロパティ値が変更されようとしている場合に発生します。</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventArgs.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyChangedEventArgs&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="propertyName" vsli:raw="The name of the property that changed.">変更されたプロパティの名前。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName">
      <summary vsli:raw="Gets the name of the property that changed.">変更されたプロパティの名前を取得します。</summary>
      <returns vsli:raw="The name of the property that changed.">変更されたプロパティの名前。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt; event raised when a property is changed on a component.">コンポーネントでプロパティが変更されたときに発生する <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> イベントを処理するメソッドを表します</summary>
      <param name="sender" vsli:raw="The source of the event.">イベントのソース。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyChangedEventArgs&quot; /&gt; that contains the event data.">イベント データを格納している <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.PropertyChangingEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangingEventArgs.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyChangingEventArgs&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.PropertyChangingEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="propertyName" vsli:raw="The name of the property whose value is changing.">値が変更されようとしているプロパティの名前。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangingEventArgs.PropertyName">
      <summary vsli:raw="Gets the name of the property whose value is changing.">値が変更されようとしているプロパティの名前を取得します。</summary>
      <returns vsli:raw="The name of the property whose value is changing.">値が変更されようとしているプロパティの名前。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyChangingEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging&quot; /&gt; event of an &lt;see cref=&quot;T:System.ComponentModel.INotifyPropertyChanging&quot; /&gt; interface.">
        <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging" /> インターフェイスの <see cref="T:System.ComponentModel.INotifyPropertyChanging" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender" vsli:raw="The source of the event.">イベントのソース。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyChangingEventArgs&quot; /&gt; that contains the event data.">イベント データを格納している <see cref="T:System.ComponentModel.PropertyChangingEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary vsli:raw="Specifies what type to use as a converter for the object this attribute is bound to.">この属性が関連付けられているオブジェクトのコンバーターとして使用する型を指定します。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverterAttribute&quot; /&gt; class with the default type converter, which is an empty string (&quot;&quot;).">既定の型コンバーターである空の文字列 ("") を使用して、<see cref="T:System.ComponentModel.TypeConverterAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverterAttribute&quot; /&gt; class, using the specified type name as the data converter for the object this attribute is bound to.">この属性が関連付けられているオブジェクトのデータ コンバーターとして指定した型名を使用して、<see cref="T:System.ComponentModel.TypeConverterAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeName" vsli:raw="The fully qualified name of the class to use for data conversion for the object this attribute is bound to.">この属性が関連付けられているオブジェクトのデータ変換で使用するクラスの完全修飾名。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverterAttribute&quot; /&gt; class, using the specified type as the data converter for the object this attribute is bound to.">この属性が関連付けられているオブジェクトのデータ コンバーターとして型名を指定して、<see cref="T:System.ComponentModel.TypeConverterAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the converter class to use for data conversion for the object this attribute is bound to.">この属性が関連付けられているオブジェクトのデータ変換で使用するコンバーター クラスの型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary vsli:raw="Gets the fully qualified type name of the &lt;see cref=&quot;T:System.Type&quot; /&gt; to use as a converter for the object this attribute is bound to.">この属性が関連付けられているオブジェクトのコンバーターとして使用する <see cref="T:System.Type" /> の完全修飾型名を取得します。</summary>
      <returns vsli:raw="The fully qualified type name of the &lt;see cref=&quot;T:System.Type&quot; /&gt; to use as a converter for the object this attribute is bound to, or an empty string (&quot;&quot;) if none exists. The default value is an empty string (&quot;&quot;).">この属性が関連付けられているオブジェクトのコンバーターとして使用する <see cref="T:System.Type" /> の完全修飾型名。コンバーターとして使用する型がない場合は空の文字列 ("")。 既定値は、空の文字列 ("") です。</returns>
    </member>
    <member name="F:System.ComponentModel.TypeConverterAttribute.Default">
      <summary vsli:raw="Specifies the type to use as a converter for the object this attribute is bound to.">この属性が関連付けられているオブジェクトのコンバーターとして使用する型を指定します。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.TypeConverterAttribute&quot; /&gt;.">指定したオブジェクトの値が現在の <see cref="T:System.ComponentModel.TypeConverterAttribute" /> と等しいかどうかを示す値を返します。</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">値が等しいかどうかを確認するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current &lt;see cref=&quot;T:System.ComponentModel.TypeConverterAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したオブジェクトの値が現在の <see cref="T:System.ComponentModel.TypeConverterAttribute" /> の値と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">このインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.TypeConverterAttribute&quot; /&gt;.">現在の <see cref="T:System.ComponentModel.TypeConverterAttribute" /> のハッシュ コード。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProviderAttribute">
      <summary vsli:raw="Specifies the custom type description provider for a class. This class cannot be inherited.">クラスのカスタムの型説明のプロバイダーを指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProviderAttribute&quot; /&gt; class using the specified type name.">型名を指定して、<see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeName" vsli:raw="The qualified name of the type.">型の修飾名。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeName" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProviderAttribute&quot; /&gt; class using the specified type.">型を指定して、<see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="The type to store in the attribute.">属性に格納する型。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptionProviderAttribute.TypeName">
      <summary vsli:raw="Gets the type name for the type description provider.">型説明のプロバイダーの型名を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the qualified type name for the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt;.">
        <see cref="T:System.String" /> の修飾型名を格納する <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
    </member>
    <member name="T:System.Reflection.ICustomTypeProvider">
      <summary vsli:raw="Represents an object that provides a custom type.">カスタム型を提供するオブジェクトを表します。</summary>
    </member>
    <member name="M:System.Reflection.ICustomTypeProvider.GetCustomType">
      <summary vsli:raw="Gets the custom type provided by this object.">このオブジェクトによって提供されたカスタム型を取得します。</summary>
      <returns vsli:raw="The custom type.">カスタム型。</returns>
    </member>
    <member name="T:System.Windows.Input.ICommand">
      <summary vsli:raw="Defines a command.">コマンドを定義します。</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.CanExecute(System.Object)">
      <summary vsli:raw="Defines the method that determines whether the command can execute in its current state.">現在の状態でコマンドが実行可能かどうかを決定するメソッドを定義します。</summary>
      <param name="parameter" vsli:raw="Data used by the command.  If the command does not require data to be passed, this object can be set to &lt;see langword=&quot;null&quot; /&gt;.">コマンドにより使用されるデータです。  コマンドにデータを渡す必要がない場合は、このオブジェクトを <see langword="null" /> に設定できます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this command can be executed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このコマンドを実行できる場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="E:System.Windows.Input.ICommand.CanExecuteChanged">
      <summary vsli:raw="Occurs when changes occur that affect whether or not the command should execute.">コマンドを実行するかどうかに影響するような変更があった場合に発生します。</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.Execute(System.Object)">
      <summary vsli:raw="Defines the method to be called when the command is invoked.">コマンドが起動される際に呼び出すメソッドを定義します。</summary>
      <param name="parameter" vsli:raw="Data used by the command.  If the command does not require data to be passed, this object can be set to &lt;see langword=&quot;null&quot; /&gt;.">コマンドにより使用されるデータです。  コマンドにデータを渡す必要がない場合は、このオブジェクトを <see langword="null" /> に設定できます。</param>
    </member>
    <member name="T:System.Windows.Markup.ValueSerializerAttribute">
      <summary vsli:raw="Identifies the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; class that a type or property should use when it is serialized.">型またはプロパティがシリアル化時に使用する <see cref="T:System.Windows.Markup.ValueSerializer" /> クラスを識別します。</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializerAttribute&quot; /&gt; class, using an assembly qualified type name string.">アセンブリ修飾型名文字列を使用して、<see cref="T:System.Windows.Markup.ValueSerializerAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="valueSerializerTypeName" vsli:raw="The assembly qualified type name string for the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; class to use.">使用する <see cref="T:System.Windows.Markup.ValueSerializer" /> クラスのアセンブリ修飾型名文字列。</param>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializerAttribute&quot; /&gt; class, using the specified type.">指定された型を使用して、<see cref="T:System.Windows.Markup.ValueSerializerAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="valueSerializerType" vsli:raw="A type that represents the type of the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.ValueSerializer" /> クラスの型を表す型。</param>
    </member>
    <member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerType">
      <summary vsli:raw="Gets the type of the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; class reported by this attribute.">この属性で報告される <see cref="T:System.Windows.Markup.ValueSerializer" /> クラスの型を取得します。</summary>
      <returns vsli:raw="The type of the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt;.">
        <see cref="T:System.Windows.Markup.ValueSerializer" />の型。</returns>
    </member>
    <member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerTypeName">
      <summary vsli:raw="Gets the assembly qualified name of the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; type for this type or property.">この型またはプロパティの <see cref="T:System.Windows.Markup.ValueSerializer" /> 型のアセンブリ修飾名を取得します。</summary>
      <returns vsli:raw="The assembly qualified name of the type.">型のアセンブリ修飾名。</returns>
    </member>
  </members>
</doc>
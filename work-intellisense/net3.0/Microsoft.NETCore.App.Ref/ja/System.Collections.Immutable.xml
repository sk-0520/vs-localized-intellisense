<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Collections.Immutable</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Immutable.IImmutableDictionary`2">
      <summary>キーと値のペアの変更できないコレクションを表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="TKey">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリ内の値の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Add(`0,`1)">
      <summary>指定したキーおよび値を持つ要素をディクショナリに追加します。</summary>
      <param name="key">追加する要素のキー。</param>
      <param name="value">追加する要素の値。</param>
      <returns>追加のキーと値のペアを格納する、新しい変更できないディクショナリ。</returns>
      <exception cref="T:System.ArgumentException">所定のキーはディクショナリに既に存在しますが、値が異なります。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>指定したキーと値のペアをディクショナリに追加します。</summary>
      <param name="pairs">追加するキーと値のペア。</param>
      <returns>追加のキーと値のペアを格納する、新しい変更できないディクショナリ。</returns>
      <exception cref="T:System.ArgumentException">所定のキーの 1 つはディクショナリに既に存在しますが、値が異なります。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Clear">
      <summary>このディクショナリ インスタンスと同じ順序付けとキー/値の比較規則を使用する空のディクショナリを取得します。</summary>
      <returns>順序付けとキー/値の比較規則が同等の空のディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>変更できないディクショナリに、指定されたキーと値のペアが含まれているかどうかを判定します。</summary>
      <param name="pair">検索するキーと値のペア。</param>
      <returns>指定したキーと値のペアがディクショナリ内に見つかる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Remove(`0)">
      <summary>指定したキーを持つ要素を、変更できないディクショナリから削除します。</summary>
      <param name="key">削除する要素のキー。</param>
      <returns>指定した要素が削除された、新しい変更できないディクショナリ。指定したキーがディクショナリで見つからない場合はこのインスタンス。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>指定したキーを持つ要素を、変更できないディクショナリから削除します。</summary>
      <param name="keys">削除する要素のキー。</param>
      <returns>指定したキーが削除された、新しい変更できないディクショナリ。指定したキーがディクショナリで見つからない場合はこのインスタンス。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItem(`0,`1)">
      <summary>変更できないディクショナリで指定されたキーと値を設定します。キーの既存の値が上書きされる可能性があります。</summary>
      <param name="key">追加するエントリのキー。</param>
      <param name="value">設定するキー値。</param>
      <returns>指定したキーと値のペアが格納されている、新しい変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>変更できないディクショナリで指定されたキーと値のペアを設定します。キーの既存の値が上書きされる可能性があります。</summary>
      <param name="items">ディクショナリで設定するキーと値のペア。 キーのいずれかが既にディクショナリに存在する場合、このメソッドでその以前の値が上書きされます。</param>
      <returns>指定したキーと値のペアが格納されている、新しい変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary>指定したキーがこのディクショナリに格納されているかどうかを判断します。</summary>
      <param name="equalKey">検索対象のキー。</param>
      <param name="actualKey">一致するものが見つかった場合は、ディクショナリ内にある一致するキー。見つからない場合は <c>equalkey</c>。</param>
      <returns>
        <paramref name="equalKey" /> に一致が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableList`1">
      <summary>変更できない要素のリストを表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T">リスト内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Add(`0)">
      <summary>リストのコピーを作成し、コピーしたリストの末尾に、指定されたオブジェクトを追加します。</summary>
      <param name="value">リストに追加するオブジェクト。</param>
      <returns>オブジェクトが追加された新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>リストのコピーを作成し、コピーしたリストの末尾に、指定されたオブジェクトを追加します。</summary>
      <param name="items">リストに追加するオブジェクト。</param>
      <returns>要素が追加された新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Clear">
      <summary>すべての項目が削除されたリストを作成します。ただし、並べ替えと順序付けのセマンティクスは、このリストと同じになります。</summary>
      <returns>並べ替えと順序付けのセマンティクスがこのインスタンスと同じ空のリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>指定したインデックスから始まり、指定した数の要素が含まれる <see cref="T:System.Collections.Immutable.IImmutableList`1" /> の要素範囲内で、指定したオブジェクトを検索し、最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Immutable.IImmutableList`1" /> 内で検索するオブジェクト。 参照型の場合は、この値を null にできます。</param>
      <param name="index">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 (ゼロ) は有効です。</param>
      <param name="count">検索対象の範囲内にある要素の数。</param>
      <param name="equalityComparer">
        <paramref name="item" /> の検索に使用する等値比較子。</param>
      <returns>
        <see cref="T:System.Collections.Immutable.IImmutableList`1" /> のうち、<paramref name="index" /> から始まり、要素数が <paramref name="count" /> 個の要素範囲の中で <paramref name="item" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)">
      <summary>指定した要素を、変更できないリストの指定したインデックス位置に挿入します。</summary>
      <param name="index">値を挿入する位置を示す、0 から始まるインデックス。</param>
      <param name="element">挿入するオブジェクト。</param>
      <returns>指定した要素が含まれている新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>指定した要素を、変更できないリストの指定したインデックス位置に挿入します。</summary>
      <param name="index">新しい要素が挿入される位置の 0 から始まるインデックス。</param>
      <param name="items">挿入する要素。</param>
      <returns>指定した要素が含まれている新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
        <see cref="T:System.Collections.Immutable.IImmutableList`1" /> のうち、指定した要素数が含まれ、指定したインデックスの位置で終了する要素範囲の中で、指定したオブジェクトを検索し、最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="item">リスト内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <param name="index">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 (ゼロ) は有効です。</param>
      <param name="count">検索対象の範囲内にある要素の数。</param>
      <param name="equalityComparer">
        <paramref name="item" /> の照合に使用する等値比較子。</param>
      <returns>
        <see cref="T:System.Int32" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>この変更できないリストから、指定したオブジェクトのうち最初に出現したものを削除します。</summary>
      <param name="value">リストから削除するオブジェクト。</param>
      <param name="equalityComparer">
        <paramref name="value" /> の検索に使用する等値比較子。</param>
      <returns>指定したオブジェクトが削除された新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary>指定した述語によって定義される条件に一致するすべての要素を削除します。</summary>
      <param name="match">削除する要素の条件を定義するデリゲート。</param>
      <returns>要素が削除された新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)">
      <summary>変更できないリストの指定したインデックス位置にある要素を削除します。</summary>
      <param name="index">削除する要素のインデックス。</param>
      <returns>要素が削除された新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>指定したオブジェクトをリストから削除します。</summary>
      <param name="items">リストから削除するオブジェクト。</param>
      <param name="equalityComparer">
        <paramref name="items" /> がリスト内のいずれかのオブジェクトと一致するかどうかを判断するために使用する等値比較子。</param>
      <returns>
        <paramref name="items" /> がリスト内のオブジェクトと一致した場合は、指定したオブジェクトが削除された、新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Collections.Immutable.IImmutableList`1" /> から要素の範囲を削除します。</summary>
      <param name="index">削除する要素の範囲の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count">削除する要素の数を指定します。</param>
      <returns>要素が削除された新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>リスト内で最初に一致した要素が、指定した要素に置き換えられた、新しいリストを返します。</summary>
      <param name="oldValue">置き換えられる要素。</param>
      <param name="newValue">最初に見つかった <paramref name="oldValue" /> を置き換える要素。</param>
      <param name="equalityComparer">
        <paramref name="oldValue" /> の照合に使用する等値比較子。</param>
      <returns>
        <paramref name="oldvalue" /> が <paramref name="newValue" /> と同じ場合でも、<paramref name="newValue" /> を含む新しいリスト。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> はリストに存在しません。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)">
      <summary>リスト内の指定された位置にある要素を、指定した要素に置換します。</summary>
      <param name="index">リスト内の置換する要素の位置。</param>
      <param name="value">古い要素を置換する要素。</param>
      <returns>指定した位置にある要素が新しい要素と同じ場合でも、新しい要素を含む新しいリスト。</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableQueue`1">
      <summary>オブジェクトの変更できない先入れ先出しコレクションを表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T">キュー内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Clear">
      <summary>要素がすべて削除された新しいキューを返します。</summary>
      <returns>空の変更できないキュー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Dequeue">
      <summary>変更できないキューの最初の要素を削除し、新しいキューを返します。</summary>
      <returns>最初の要素が削除された、新しい変更できないキュー。 この値が <c>null</c> になることはありません。</returns>
      <exception cref="T:System.InvalidOperationException">キューが空です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Enqueue(`0)">
      <summary>変更できないキューの末尾に要素を追加し、新しいキューを返します。</summary>
      <param name="value">追加する要素。</param>
      <returns>指定された要素が追加された、新しい変更できないキュー。</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableQueue`1.IsEmpty">
      <summary>この変更できないキューが空かどうかを示す値を取得します。</summary>
      <returns>このキューが空の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Peek">
      <summary>変更できないキューの先頭にある要素を削除せずに返します。</summary>
      <returns>キューの先頭にある要素。</returns>
      <exception cref="T:System.InvalidOperationException">キューが空です。</exception>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableSet`1">
      <summary>セットの新しいインスタンスを作成することによってのみ変更可能な要素のセットを表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T">セット内に格納されている要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Add(`0)">
      <summary>この変更できないセットに、指定した要素を追加します。</summary>
      <param name="value">追加する要素。</param>
      <returns>要素が追加された新しいセット。または、要素がセット内に既に存在する場合は、このセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Clear">
      <summary>並べ替えと順序付けのセマンティクスがこのインスタンスと同じ空の変更できないセットを取得します。</summary>
      <returns>並べ替えと順序付けのセマンティクスがこのインスタンスと同じ空のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Contains(`0)">
      <summary>指定した要素がこの変更できないセットに格納されているかどうかを判断します。</summary>
      <param name="value">セット内で検索する要素。</param>
      <returns>指定した値がセットに含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の変更できないセットから、指定されたコレクションに含まれる要素を削除します。</summary>
      <param name="other">このセットから削除する項目のコレクション。</param>
      <returns>項目が削除された新しいセット。セットに項目がなかった場合は、元のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>このセットと指定されたセットに存在する要素のみを含む、変更できないセットを作成します。</summary>
      <param name="other">現在の <see cref="T:System.Collections.Immutable.IImmutableSet`1" /> と比較するコレクション。</param>
      <returns>両方のセットに存在する要素を含む、新しい変更できないセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の変更できないセットが、指定されたコレクションの真のサブセット (真部分集合) であるかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットが、指定されたコレクションの真のサブセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の変更できないセットが、指定されたコレクションの真のスーパーセット (真部分集合) であるかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットが、指定されたコレクションの真のスーパーセットの場合は <see langword="true" />。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の変更できないセットが、指定されたコレクションのサブセットであるかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットが、指定されたコレクションのサブセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の変更できないセットが、指定されたコレクションのスーパーセットであるかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットが、指定されたコレクションのスーパーセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の変更できないセットと、指定されたコレクションとで重なり合う部分が存在するかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットと指定されたコレクションとの間に共通する要素が 1 つでも存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Remove(`0)">
      <summary>この変更できないセットから、指定した要素を削除します。</summary>
      <param name="value">削除する要素。</param>
      <returns>指定した要素が削除された新しいセット。セット内に要素が見つからない場合は、現在のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の変更できないセットと指定されたコレクションに同じ要素が存在するかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>セットが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納された、変更できないセットを作成します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納された、新しいセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)">
      <summary>セットに指定された値が含まれているかどうかを判断します。</summary>
      <param name="equalValue">検索する値。</param>
      <param name="actualValue">セット内に一致する値が見つかった場合は、その値。一致する値がない場合は <c>equalvalue</c>。</param>
      <returns>一致する値が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットと指定されたコレクションのどちらかに存在するすべての要素が格納された、新しい変更できないセットを作成します。</summary>
      <param name="other">要素の追加元のコレクション。</param>
      <returns>項目が追加された、新しい変更できないセット。すべての項目が既にセットにあった場合は、元のセット。</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableStack`1">
      <summary>変更できない後入れ先出し (LIFO) コレクションを表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T">スタック内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Clear">
      <summary>変更できないスタックからすべてのオブジェクトを削除します。</summary>
      <returns>空の変更できないスタック。</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableStack`1.IsEmpty">
      <summary>この変更できないスタックが空かどうかを示す値を取得します。</summary>
      <returns>このスタックが空の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Peek">
      <summary>変更できないスタックの一番上にある要素を削除せずに返します。</summary>
      <returns>スタックの一番上にある要素。</returns>
      <exception cref="T:System.InvalidOperationException">スタックが空です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Pop">
      <summary>変更できないスタックの一番上にある要素を削除し、新しいスタックを返します。</summary>
      <returns>新しいスタック。<c>null</c> になることはありません。</returns>
      <exception cref="T:System.InvalidOperationException">スタックが空です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Push(`0)">
      <summary>変更できないスタックの一番上に要素を挿入し、新しいスタックを返します。</summary>
      <param name="value">スタックにプッシュする要素。</param>
      <returns>新しいスタック。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray">
      <summary>変更できない配列を作成するためのメソッドを提供します。つまり、この配列は、作成後に変更することができません。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)">
      <summary>既定の比較子を使用して、並べ替えられた変更できない配列で、指定された要素を検索します。見つかった場合は、その要素の 0 から始まるインデックスを返します。</summary>
      <param name="array">検索する並べ替えられた配列。</param>
      <param name="value">検索するオブジェクト。</param>
      <typeparam name="T">配列内に格納されている要素の型。</typeparam>
      <returns>項目が見つかった場合は、配列内の項目の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="value" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.Generic.ICollection`1.Count" /> のビットごとの補数です。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> が <see cref="T:System.IComparable" /> を実装していないか、または検索で <see cref="T:System.IComparable" /> を実装していない要素が検出されました。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})">
      <summary>並べ替えられた変更できない配列で、指定された要素を検索します。見つかった場合は、その要素の 0 から始まるインデックスを返します。</summary>
      <param name="array">検索する並べ替えられた配列。</param>
      <param name="value">検索するオブジェクト。</param>
      <param name="comparer">要素を比較する場合に使用する比較子実装。または、既定の比較子を使用する場合は null。</param>
      <typeparam name="T">配列内に格納されている要素の型。</typeparam>
      <returns>項目が見つかった場合は、配列内の項目の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="value" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.Generic.ICollection`1.Count" /> のビットごとの補数です。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> が null であり <paramref name="value" /> が <see cref="T:System.IComparable" /> を実装していないか、または検索で <see cref="T:System.IComparable" /> を実装していない要素が検出されました。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)">
      <summary>並べ替えられた変更できない配列で、指定された要素を検索します。見つかった場合は、その要素の 0 から始まるインデックスを返します。</summary>
      <param name="array">検索する並べ替えられた配列。</param>
      <param name="index">検索範囲の開始位置を示すインデックス。</param>
      <param name="length">検索する範囲の長さ。</param>
      <param name="value">検索するオブジェクト。</param>
      <typeparam name="T">配列内に格納されている要素の型。</typeparam>
      <returns>項目が見つかった場合は、配列内の項目の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="value" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.Generic.ICollection`1.Count" /> のビットごとの補数です。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> が <see cref="T:System.IComparable" /> を実装していないか、または検索で <see cref="T:System.IComparable" /> を実装していない要素が検出されました。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> および <paramref name="length" /> は <paramref name="array" /> の有効な範囲を指定していません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> は、<paramref name="array" /> の下限を下回っています。

または -

<paramref name="length" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary>並べ替えられた変更できない配列で、指定された要素を検索し、その要素のゼロから始まるインデックスを返します。</summary>
      <param name="array">検索する並べ替えられた配列。</param>
      <param name="index">検索範囲の開始位置を示すインデックス。</param>
      <param name="length">検索する範囲の長さ。</param>
      <param name="value">検索するオブジェクト。</param>
      <param name="comparer">要素の等値性を比較する場合に使用する比較子。または、既定の比較子を使用する場合は <see langword="null" />。</param>
      <typeparam name="T">配列内に格納されている要素の型。</typeparam>
      <returns>項目が見つかった場合は、配列内の項目の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="value" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.Generic.ICollection`1.Count" /> のビットごとの補数です。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> が null であり <paramref name="value" /> が <see cref="T:System.IComparable" /> を実装していないか、または検索で <see cref="T:System.IComparable" /> を実装していない要素が検出されました。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> および <paramref name="length" /> は <paramref name="array" /> の有効な範囲を指定していません。
または
<paramref name="comparer" /> が <see langword="null" /> で、<paramref name="value" /> は <paramref name="array" /> の要素と互換性がない型です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> は、<paramref name="array" /> の下限を下回っています。
または
<paramref name="length" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1">
      <summary>空の変更できない配列を作成します。</summary>
      <typeparam name="T">配列内に格納されている要素の型。</typeparam>
      <returns>空の変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0)">
      <summary>指定されたオブジェクトを格納する、変更できない配列を作成します。</summary>
      <param name="item">配列に格納するオブジェクト。</param>
      <typeparam name="T">配列内に格納されている要素の型。</typeparam>
      <returns>指定されたオブジェクトを格納する、変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)">
      <summary>指定されたオブジェクトを格納する、変更できない配列を作成します。</summary>
      <param name="item1">配列に格納する最初のオブジェクト。</param>
      <param name="item2">配列に格納する 2 番目のオブジェクト。</param>
      <typeparam name="T">配列内に格納されている要素の型。</typeparam>
      <returns>指定されたオブジェクトを格納する、変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)">
      <summary>指定されたオブジェクトを格納する、変更できない配列を作成します。</summary>
      <param name="item1">配列に格納する最初のオブジェクト。</param>
      <param name="item2">配列に格納する 2 番目のオブジェクト。</param>
      <param name="item3">配列に格納する 3 番目のオブジェクト。</param>
      <typeparam name="T">配列内に格納されている要素の型。</typeparam>
      <returns>指定されたオブジェクトを格納する、変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)">
      <summary>指定されたオブジェクトを格納する、変更できない配列を作成します。</summary>
      <param name="item1">配列に格納する最初のオブジェクト。</param>
      <param name="item2">配列に格納する 2 番目のオブジェクト。</param>
      <param name="item3">配列に格納する 3 番目のオブジェクト。</param>
      <param name="item4">配列に格納する 4 番目のオブジェクト。</param>
      <typeparam name="T">配列内に格納されている要素の型。</typeparam>
      <returns>指定されたオブジェクトを格納する、変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[])">
      <summary>指定されたオブジェクトの配列から、変更できない配列を作成します。</summary>
      <param name="items">配列に読み込むオブジェクトの配列。</param>
      <typeparam name="T">配列内に格納されている要素の型。</typeparam>
      <returns>項目の配列を格納する、変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)">
      <summary>別の配列から指定されたオブジェクトで、変更できない配列を作成します。</summary>
      <param name="items">オブジェクトのソース配列。</param>
      <param name="start">
        <paramref name="items" /> からコピーする最初の要素のインデックス。</param>
      <param name="length">この変更できない配列に含める、<paramref name="items" /> の要素の数。</param>
      <typeparam name="T">配列内に格納されている要素の型。</typeparam>
      <returns>ソース配列から指定されたオブジェクトを格納する、変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)">
      <summary>別の変更できない配列から指定されたオブジェクトで、変更できない配列を作成します。</summary>
      <param name="items">オブジェクトのソース配列。</param>
      <param name="start">
        <paramref name="items" /> からコピーする最初の要素のインデックス。</param>
      <param name="length">この変更できない配列に含める、<paramref name="items" /> の要素の数。</param>
      <typeparam name="T">配列内に格納されている要素の型。</typeparam>
      <returns>ソース配列から指定されたオブジェクトを格納する、変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1">
      <summary>新しいメモリを割り当てずに <see cref="T:System.Collections.Immutable.ImmutableArray" /> に変換できる可変配列を作成します。</summary>
      <typeparam name="T">ビルダー内に格納されている要素の型。</typeparam>
      <returns>変更できない配列に効率的に変換できる、指定された型の可変配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)">
      <summary>新しいメモリを割り当てずに <see cref="T:System.Collections.Immutable.ImmutableArray" /> に変換できる可変配列を作成します。</summary>
      <param name="initialCapacity">ビルダーの初期量。</param>
      <typeparam name="T">ビルダー内に格納されている要素の型。</typeparam>
      <returns>変更できない配列に効率的に変換できる、指定された型の可変配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>指定された項目が設定された、新しい <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> を作成します。</summary>
      <param name="items">配列に追加する要素。</param>
      <typeparam name="T">配列内に格納されている要素の型。</typeparam>
      <returns>指定された項目を格納する、変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="items">結果の配列の初期化に使うソース配列。</param>
      <param name="selector">ソース配列の各要素に適用する関数。</param>
      <typeparam name="TSource" />
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="items">結果の配列の初期化に使うソース配列。</param>
      <param name="start">結果の配列に含める、ソース配列の最初の要素のインデックス。</param>
      <param name="length">結果の配列に含める、ソース配列の要素の数。</param>
      <param name="selector">結果の配列に含める、ソース配列の各要素に適用する関数。</param>
      <typeparam name="TSource" />
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="items">結果の配列の初期化に使うソース配列。</param>
      <param name="selector">ソース配列の各要素に適用する関数。</param>
      <param name="arg">セレクター マッピング関数に渡す引数。</param>
      <typeparam name="TSource" />
      <typeparam name="TArg" />
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="items">結果の配列の初期化に使うソース配列。</param>
      <param name="start">結果の配列に含める、ソース配列の最初の要素のインデックス。</param>
      <param name="length">結果の配列に含める、ソース配列の要素の数。</param>
      <param name="selector">結果の配列に含める、ソース配列の各要素に適用する関数。</param>
      <param name="arg">セレクター マッピング関数に渡す引数。</param>
      <typeparam name="TSource" />
      <typeparam name="TArg" />
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>指定されたコレクションから、変更できない配列を作成します。</summary>
      <param name="items">変更できない配列にコピーするオブジェクトのコレクション。</param>
      <typeparam name="TSource">
        <paramref name="items" /> に格納されている要素の型。</typeparam>
      <returns>指定されたオブジェクトのコレクションを格納する、変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>ビルダーの配列の現在の内容から、変更できない配列を作成します。</summary>
      <param name="builder">変更できない配列を作成するためのビルダー。</param>
      <typeparam name="TSource">変更できない配列に格納されている要素の型。</typeparam>
      <returns>ビルダーの配列の現在の内容を含む、変更できない配列。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1">
      <summary>変更できない配列を表します。つまり、この配列は、作成後に変更することができません。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T">配列に格納される要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Add(`0)">
      <summary>元の配列のコピーの末尾に指定した項目を追加して返します。</summary>
      <param name="item">配列の末尾に追加する項目。</param>
      <returns>指定した項目が末尾に追加された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>元の配列のコピーの末尾に指定した要素を追加して返します。</summary>
      <param name="items">配列に追加する要素。</param>
      <returns>要素が追加された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>元の配列のコピーの末尾に指定した要素を追加して返します。</summary>
      <param name="items">配列に追加する要素。</param>
      <returns>要素が追加された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.As``1">
      <summary>異なる型にキャストされる配列の要素が格納された、新しい変更できない配列を返します。</summary>
      <typeparam name="TOther">返される配列要素の型。</typeparam>
      <returns>異なる型にキャストされる配列の要素が格納された、変更できない配列。 キャストに失敗した場合、<see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> プロパティが <see langword="true" /> を返す配列を返します。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsMemory">
      <summary>この変更できない配列に対して、新しい読み取り専用のメモリ領域を作成します。</summary>
      <returns>この変更できない配列の読み取り専用のメモリ表現。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsSpan">
      <summary>この変更できない配列に対して、新しい読み取り専用のスパンを作成します。</summary>
      <returns>この変更できない配列の読み取り専用のスパン表現。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Builder">
      <summary>余分なメモリを割り当てずに <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> インスタンスに変換できる書き込み可能な配列アクセサー。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Add(`0)">
      <summary>指定した項目を配列に追加します。</summary>
      <param name="item">配列に追加するオブジェクト。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[])">
      <summary>指定した項目を配列の末尾に追加します。</summary>
      <param name="items">配列に追加する項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[],System.Int32)">
      <summary>指定した項目を配列の末尾に追加します。</summary>
      <param name="items">配列に追加する項目。</param>
      <param name="length">追加するソース配列の要素の数。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>指定した項目を配列の末尾に追加します。</summary>
      <param name="items">配列に追加する項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>指定した項目を配列の末尾に追加します。</summary>
      <param name="items">配列に追加する項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0},System.Int32)">
      <summary>指定した項目を配列の末尾に追加します。</summary>
      <param name="items">配列に追加する項目。</param>
      <param name="length">追加するソース配列の要素の数。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0}.Builder)">
      <summary>指定した項目を配列の末尾に追加します。</summary>
      <param name="items">配列に追加する項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(``0[])">
      <summary>配列の末尾に、配列内の現在の型から派生する、指定した項目を追加します。</summary>
      <param name="items">配列の末尾に追加する項目。</param>
      <typeparam name="TDerived">配列内の既存の項目の型から派生する型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>配列の末尾に、配列内の現在の型から派生する、指定した項目を追加します。</summary>
      <param name="items">配列の末尾に追加する項目。</param>
      <typeparam name="TDerived">配列内の既存の項目の型から派生する型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>配列の末尾に、配列内の現在の型から派生する、指定した項目を追加します。</summary>
      <param name="items">配列の末尾に追加する項目。</param>
      <typeparam name="TDerived">配列内の既存の項目の型から派生する型。</typeparam>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">
      <summary>内部配列の長さを取得または設定します。 設定すると、内部配列は、指定した長さになっていない場合、所定の容量に再割り当てされます。</summary>
      <returns>内部配列の長さ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Clear">
      <summary>配列からすべての項目を削除します。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Contains(`0)">
      <summary>配列に特定の値が格納されているかどうかを判断します。</summary>
      <param name="item">配列内で検索するオブジェクト。</param>
      <returns>オブジェクトが見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.CopyTo(`0[],System.Int32)">
      <summary>指定した配列に現在の内容をコピーします。</summary>
      <param name="array">コピー先の配列。</param>
      <param name="index">コピー操作の開始位置を示すインデックス。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">
      <summary>配列内の項目の数を取得または設定します。</summary>
      <returns>配列内の項目の数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.GetEnumerator">
      <summary>コレクションを反復処理するために使用できるオブジェクトを取得します。</summary>
      <returns>コレクションを反復処理するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0)">
      <summary>配列内の特定の項目のインデックスを確認します。</summary>
      <param name="item">配列内で検索する項目。</param>
      <returns>リストに存在する場合は <paramref name="item" /> のインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32)">
      <summary>指定した項目のインデックスを確認します。</summary>
      <param name="item">配列内で検索する項目。</param>
      <param name="startIndex">検索の開始位置。</param>
      <returns>リストに存在する場合は <paramref name="item" /> のインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary>指定した項目のインデックスを確認します。</summary>
      <param name="item">配列内で検索する項目。</param>
      <param name="startIndex">検索の開始位置。</param>
      <param name="count">検索する要素数。</param>
      <returns>リストに存在する場合は <paramref name="item" /> のインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>指定した項目のインデックスを決定します。</summary>
      <param name="item">配列内で検索する項目。</param>
      <param name="startIndex">検索の開始位置を示すインデックス。</param>
      <param name="count">検索の開始位置。</param>
      <param name="equalityComparer">検索に使用する等値比較子。</param>
      <returns>リストに存在する場合は <paramref name="item" /> のインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Insert(System.Int32,`0)">
      <summary>配列内の指定したインデックス位置に項目を挿入します。</summary>
      <param name="index">項目を挿入する位置を示す 0 から始まるインデックス。</param>
      <param name="item">配列に挿入するオブジェクト。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Item(System.Int32)">
      <summary>指定したインデックス位置にある項目を取得または設定します。</summary>
      <param name="index">取得または設定する項目のインデックス。</param>
      <returns>指定したインデックスにある項目。</returns>
      <exception cref="T:System.IndexOutOfRangeException">指定したインデックスは配列内にありません。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ItemRef(System.Int32)">
      <summary>指定したインデックスにある要素への読み取り専用参照を取得します。</summary>
      <param name="index">項目のインデックス。</param>
      <returns>指定したインデックスにある要素への読み取り専用参照。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> が配列数以上です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0)">
      <summary>指定した項目がこの配列内で最後に出現する位置を表す、0 から始まるインデックスを決定します。</summary>
      <param name="item">検索対象の項目。</param>
      <returns>項目が見つかった位置を示す、0 から始まるインデックス。見つからなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary>指定した項目がこの配列内で最後に出現する位置を表す、0 から始まるインデックスを決定します。</summary>
      <param name="item">検索対象の項目。</param>
      <param name="startIndex">検索の開始位置。</param>
      <returns>項目が見つかった位置を示す、配列の 0 から始まるインデックス。見つからなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>指定した項目がこの配列内で最後に出現する位置を表す、0 から始まるインデックスを決定します。</summary>
      <param name="item">検索対象の項目。</param>
      <param name="startIndex">検索の開始位置。</param>
      <param name="count">検索する要素数。</param>
      <returns>項目が見つかった位置を示す、配列の 0 から始まるインデックス。見つからなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>指定した項目がこの配列内で最後に出現する位置を表す、0 から始まるインデックスを決定します。</summary>
      <param name="item">検索対象の項目。</param>
      <param name="startIndex">検索の開始位置。</param>
      <param name="count">検索する要素数。</param>
      <param name="equalityComparer">検索に使用する等値比較子。</param>
      <returns>項目が見つかった位置を示す、配列の 0 から始まるインデックス。見つからなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.MoveToImmutable">
      <summary>内部配列を <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> として抽出し、長さ 0 の配列で置き換えます。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count" /> が <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity" /> と等しくない場合。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Remove(`0)">
      <summary>指定された要素を削除します。</summary>
      <param name="element">削除する項目。</param>
      <returns>
        <paramref name="element" /> が見つかって削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.RemoveAt(System.Int32)">
      <summary>配列内の指定したインデックス位置にある項目を削除します。</summary>
      <param name="index">削除する項目の 0 から始まるインデックス。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Reverse">
      <summary>コレクションの要素の順序を反転させます。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort">
      <summary>配列の内容を並べ替えます。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>配列の内容を並べ替えます。</summary>
      <param name="comparer">並べ替えに使用する比較子。 比較子が <see langword="null" /> の場合、配列内の要素の型の既定の比較子が使用されます。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Comparison{`0})">
      <summary>指定した <see cref="T:System.Comparison`1" /> を使って、配列全体の要素を並べ替えます。</summary>
      <param name="comparison">要素を比較する場合に使用する <see cref="T:System.Comparison`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>配列の内容を並べ替えます。</summary>
      <param name="index">並べ替えの開始インデックス。</param>
      <param name="count">並べ替えに含める要素の数。</param>
      <param name="comparer">並べ替えに使用する比較子。 比較子が <see langword="null" /> の場合、配列内の要素の型の既定の比較子が使用されます。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>配列を反復処理する列挙子を返します。</summary>
      <returns>配列を反復処理する列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>配列を反復処理する列挙子を返します。</summary>
      <returns>配列を反復処理する列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToArray">
      <summary>この <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" /> の現在の内容を使用して、新しい配列を作成します。</summary>
      <returns>この <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" /> の内容を使用した新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable">
      <summary>この <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" /> の現在の内容を含む、変更できない配列を返します。</summary>
      <returns>この <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" /> の現在の内容を含む、変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastArray``1">
      <summary>基になる配列を <paramref name="TOther" /> 型の配列にキャストすることによって、<see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 構造体のインスタンスを初期化します。</summary>
      <typeparam name="TOther" />
      <exception cref="T:System.InvalidCastException">キャストが正しくない場合にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>既存のインスタンスの内容に基づいて、<see cref="T:System.Collections.Immutable.ImmutableArray`1" /> の新しいインスタンスを初期化します。既存の配列を効率的に再利用するために、共変の静的キャストを許可します。</summary>
      <param name="items">配列の初期化に使用する配列。 コピーは作成されません。</param>
      <typeparam name="TDerived" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Clear">
      <summary>要素がすべて削除された配列を返します。</summary>
      <returns>要素がすべて削除された配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Contains(`0)">
      <summary>指定した項目が配列内にあるかどうかを判断します。</summary>
      <param name="item">検索対象の項目。</param>
      <returns>指定した項目が配列内で見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])">
      <summary>この配列の内容を指定した配列にコピーします。</summary>
      <param name="destination">コピー先の配列。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)">
      <summary>この配列の内容を、指定した配列の指定したインデックスを開始位置としてコピーします。</summary>
      <param name="destination">コピー先の配列。</param>
      <param name="destinationIndex">
        <paramref name="array" /> 内のコピー開始位置を示すインデックス。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>この配列内の指定した項目を、指定した配列の指定したインデックスを開始位置としてコピーします。</summary>
      <param name="sourceIndex">この配列内のコピー開始位置を示すインデックス。</param>
      <param name="destination">コピー先の配列。</param>
      <param name="destinationIndex">
        <paramref name="array" /> 内のコピー開始位置を示すインデックス。</param>
      <param name="length">この配列からコピーする要素の数。</param>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableArray`1.Empty">
      <summary>空の変更できない配列を取得します。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Enumerator">
      <summary>配列の列挙子。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Enumerator.Current">
      <summary>現在の項目を取得します。</summary>
      <returns>現在の項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext">
      <summary>配列内の次の値に進みます。</summary>
      <returns>配列に他の項目が存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>指定した配列がこの配列と等しいかどうかを示します。</summary>
      <param name="other">このオブジェクトと比較するオブジェクト。</param>
      <returns>
        <paramref name="other" /> がこの配列と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)">
      <summary>この配列が指定したオブジェクトと等しいかどうかを判断します。</summary>
      <param name="obj">この配列と比較する <see cref="T:System.Object" />。</param>
      <returns>この配列が <paramref name="obj" /> と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetEnumerator">
      <summary>配列の内容を反復処理する列挙子を返します。</summary>
      <returns>列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>このインスタンスのハッシュ コード。ハッシュ アルゴリズムでもハッシュ テーブルのようなデータ構造でも使用できるもの。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)">
      <summary>指定された項目を配列内で検索します。</summary>
      <param name="item">検索対象の項目。</param>
      <returns>項目が見つかった場合は、その項目の 0 から始まるインデックスでの位置。見つからなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)">
      <summary>指定された項目を配列内で検索します。</summary>
      <param name="item">検索対象の項目。</param>
      <param name="startIndex">検索の開始位置を示すインデックス。</param>
      <returns>項目が見つかった場合は、その項目の 0 から始まるインデックスでの位置。見つからなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>指定された項目を配列内で検索します。</summary>
      <param name="item">検索対象の項目。</param>
      <param name="startIndex">検索の開始位置を示すインデックス。</param>
      <param name="equalityComparer">検索に使用する等値比較子。</param>
      <returns>項目が見つかった場合は、その項目の 0 から始まるインデックスでの位置。見つからなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary>指定された項目を配列内で検索します。</summary>
      <param name="item">検索対象の項目。</param>
      <param name="startIndex">検索の開始位置を示すインデックス。</param>
      <param name="count">検索する要素数。</param>
      <returns>項目が見つかった場合は、その項目の 0 から始まるインデックスでの位置。見つからなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>指定された項目を配列内で検索します。</summary>
      <param name="item">検索対象の項目。</param>
      <param name="startIndex">検索の開始位置を示すインデックス。</param>
      <param name="count">検索する要素数。</param>
      <param name="equalityComparer">検索に使用する等値比較子。</param>
      <returns>項目が見つかった場合は、その項目の 0 から始まるインデックスでの位置。見つからなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)">
      <summary>指定した値が指定した位置に挿入された新しい配列を返します。</summary>
      <param name="index">新しい項目が追加される位置を示す、配列の 0 から始まるインデックス。</param>
      <param name="item">配列の先頭に挿入する項目。</param>
      <returns>指定したインデックス位置に項目が挿入された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>指定したインデックス位置に指定した値を挿入します。</summary>
      <param name="index">値を挿入する位置を示すインデックス。</param>
      <param name="items">挿入する要素。</param>
      <returns>指定したインデックス位置に項目が挿入された新しい変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})">
      <summary>指定したインデックス位置に指定した値を挿入します。</summary>
      <param name="index">値を挿入する位置を示すインデックス。</param>
      <param name="items">挿入する要素。</param>
      <returns>指定したインデックス位置に項目が挿入された新しい変更できない配列。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefault">
      <summary>この配列が宣言されていても初期化されていないかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> が <see langword="null" /> の場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty">
      <summary>この <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> が空か、初期化されていないかを示す値を取得します。</summary>
      <returns>
        <see langword="true" />が<see cref="T:System.Collections.Immutable.ImmutableArray`1" /> また<see langword="null" />は<see langword="false" />の場合は。それ以外の場合は。 <see cref="F:System.Collections.Immutable.ImmutableArray`1.Empty" /></returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsEmpty">
      <summary>この <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> が空かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が空の場合は <see cref="T:System.Collections.Immutable.ImmutableArray`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)">
      <summary>変更できない配列内の指定したインデックス位置にある要素を取得します。</summary>
      <param name="index">取得する要素の 0 から始まるインデックス。</param>
      <returns>変更できない配列内の指定したインデックス位置にある要素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ItemRef(System.Int32)">
      <summary>読み取り専用のリスト内の指定した <paramref name="index" /> にある要素への読み取り専用参照を取得します。</summary>
      <param name="index">参照を取得する要素の、0 から始まるインデックス番号。</param>
      <returns>読み取り専用のリスト内の指定した <paramref name="index" /> にある要素への読み取り専用参照。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)">
      <summary>指定された項目を配列内で検索します。検索は、配列の末尾から開始されます。</summary>
      <param name="item">検索対象の項目。</param>
      <returns>項目が見つかった位置を示す、配列の 0 から始まるインデックス。見つからなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)">
      <summary>指定された項目を配列内で検索します。検索は、配列の末尾から開始されます。</summary>
      <param name="item">検索対象の項目。</param>
      <param name="startIndex">検索の開始位置を示すインデックス。</param>
      <returns>項目が見つかった位置を示す、配列の 0 から始まるインデックス。見つからなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>指定された項目を配列内で検索します。検索は、配列の末尾から開始されます。</summary>
      <param name="item">検索対象の項目。</param>
      <param name="startIndex">検索の開始位置を示すインデックス。</param>
      <param name="count">検索する要素数。</param>
      <returns>項目が見つかった位置を示す、配列の 0 から始まるインデックス。見つからなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>指定された項目を配列内で検索します。検索は、配列の末尾から開始されます。</summary>
      <param name="item">検索対象の項目。</param>
      <param name="startIndex">検索の開始位置を示すインデックス。</param>
      <param name="count">検索する要素数。</param>
      <param name="equalityComparer">検索に使用する等値比較子。</param>
      <returns>項目が見つかった位置を示す、配列の 0 から始まるインデックス。見つからなかった場合は -1。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Length">
      <summary>配列内の要素の数を取得します。</summary>
      <returns>配列の要素数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.OfType``1">
      <summary>この配列の要素をフィルター処理して、指定された型に割り当てることができる要素を抽出します。</summary>
      <typeparam name="TResult">シーケンスの要素をフィルター処理する型。</typeparam>
      <returns>
        <paramref name="TResult" /> の型の入力シーケンスの要素を格納する <see cref="T:System.Collections.IEnumerable" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary>2 つの配列が等しいかどうかを示す値を返します。</summary>
      <param name="left">演算子の左辺にある配列。</param>
      <param name="right">演算子の右辺にある配列。</param>
      <returns>配列が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary>2 つの配列が等しいかどうかを示す値を返します。</summary>
      <param name="left">演算子の左辺にある配列。</param>
      <param name="right">演算子の右辺にある配列。</param>
      <returns>配列が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary>2 つの配列が等しくないかどうかを示す値を返します。</summary>
      <param name="left">演算子の左辺にある配列。</param>
      <param name="right">演算子の右辺にある配列。</param>
      <returns>配列が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary>2 つの配列が等しくないかどうかを確認します。</summary>
      <param name="left">演算子の左辺にあるオブジェクト。</param>
      <param name="right">演算子の右辺にあるオブジェクト。</param>
      <returns>2 つの配列が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0)">
      <summary>最初に見つかった指定された要素を配列から削除した配列を返します。 一致するものが見つからない場合は、現在の配列が返されます。</summary>
      <param name="item">削除する項目。</param>
      <returns>項目が削除された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>最初に見つかった指定された要素を配列から削除した配列を返します。  
 一致するものが見つからない場合は、現在の配列が返されます。</summary>
      <param name="item">削除する項目。</param>
      <param name="equalityComparer">検索に使用する等値比較子。</param>
      <returns>指定した項目が削除された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})">
      <summary>指定した条件を満たすすべての項目を配列から削除します。</summary>
      <param name="match">削除する要素の条件を定義するデリゲート。</param>
      <returns>指定された条件を満たす項目が削除された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)">
      <summary>指定した位置の要素が削除された配列を返します。</summary>
      <param name="index">返された配列から削除する要素の 0 から始まるインデックス。</param>
      <returns>指定したインデックス位置の項目が削除された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>指定した項目をこの配列から削除します。</summary>
      <param name="items">このリストに一致するものが見つかった場合に削除する項目。</param>
      <returns>要素が削除された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>指定した項目をこの配列から削除します。</summary>
      <param name="items">このリストに一致するものが見つかった場合に削除する項目。</param>
      <param name="equalityComparer">検索に使用する等値比較子。</param>
      <returns>要素が削除された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>指定した値をこのリストから削除します。</summary>
      <param name="items">このリストに一致するものが見つかった場合に削除する項目。</param>
      <returns>要素が削除された新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>指定した項目をこのリストから削除します。</summary>
      <param name="items">このリストに一致するものが見つかった場合に削除する項目。</param>
      <param name="equalityComparer">検索に使用する等値比較子。</param>
      <returns>要素が削除された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)">
      <summary>指定した位置の要素が削除された配列を返します。</summary>
      <param name="index">配列から削除する開始要素の 0 から始まるインデックス。</param>
      <param name="length">配列から削除する要素の数。</param>
      <returns>指定した要素が削除された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)">
      <summary>指定された値と等しい、配列内の最初の要素を検索して、その値を、指定した新しい値に置き換えます。</summary>
      <param name="oldValue">配列内で検索して置換する値。</param>
      <param name="newValue">
        <c>oldvalue</c> を置き換える値。</param>
      <returns>新しい値と古い値が同じ場合でも、<paramref name="newValue" /> が格納されている新しい配列。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> が配列内に見つかりません。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>指定された値と等しい、配列内の最初の要素を検索して、その値を、指定した新しい値に置き換えます。</summary>
      <param name="oldValue">配列内で検索して置換する値。</param>
      <param name="newValue">
        <c>oldvalue</c> を置き換える値。</param>
      <param name="equalityComparer">値の比較に使用する等値比較子。</param>
      <returns>新しい値と古い値が同じ場合でも、<paramref name="newValue" /> が格納されている新しい配列。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> が配列内に見つかりません。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)">
      <summary>指定したインデックス位置の項目を、指定した項目で置き換えます。</summary>
      <param name="index">置換する項目のインデックス。</param>
      <param name="item">リストに追加する項目。</param>
      <returns>指定したインデックス位置に <paramref name="item" /> を格納している新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort">
      <summary>既定の比較子を使用して、変更できない配列内の要素を並べ替えます。</summary>
      <returns>配列内の項目を並べ替えた順で格納している新しい変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>指定した比較子を使用して、変更できない配列内の要素を並べ替えます。</summary>
      <param name="comparer">要素を比較する場合に使用する実装。または、既定の比較子を使用する場合は <see langword="null" />。</param>
      <returns>配列内の項目を並べ替えた順で格納している新しい変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Comparison{`0})">
      <summary>指定した <see cref="T:System.Comparison`1" /> を使用して、<see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 全体の要素を並べ替えます。</summary>
      <param name="comparison">要素を比較する場合に使用する <see cref="T:System.Comparison`1" />。</param>
      <returns>並べ替えられたリスト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>指定した比較子を使用して、変更できない配列内の指定した要素を並べ替えます。</summary>
      <param name="index">並べ替える最初の要素を示すインデックス。</param>
      <param name="count">並べ替えに含める要素の数。</param>
      <param name="comparer">要素を比較する場合に使用する実装。または、既定の比較子を使用する場合は <see langword="null" />。</param>
      <returns>配列内の項目を並べ替えた順で格納している新しい変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="item">配列の末尾に追加する項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count">
      <summary>コレクション内の配列の数を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> プロパティが true を返す場合にスローされます。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>このインスタンスが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>このインスタンスが読み取り専用の場合は<c>true</c> 。それ以外の場合は<c>false</c>。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="item">配列から削除するオブジェクト。</param>
      <returns>常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>配列を反復処理する列挙子を返します。</summary>
      <returns>配列の反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="index">項目を挿入する位置のインデックス。</param>
      <param name="item">挿入する項目。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>読み取り専用のリスト内の指定したインデックスにある要素を取得または設定します。</summary>
      <param name="index">取得する要素の 0 から始まるインデックス。</param>
      <returns>読み取り専用のリスト内の指定したインデックスにある要素。</returns>
      <exception cref="T:System.NotSupportedException">セッターから常にスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> プロパティが true を返す場合にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="index">インデックス。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count">
      <summary>コレクション内の配列の数を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> プロパティが true を返す場合にスローされます。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
      <summary>指定したインデックス位置にある要素を取得します。</summary>
      <param name="index">インデックス。</param>
      <returns>要素。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> プロパティが true を返す場合にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>指定されたインデックスを開始位置として、この配列を別の配列にコピーします。</summary>
      <param name="array">この配列のコピー先の配列。</param>
      <param name="index">コピー操作の開始位置を示す、コピー先の配列内のインデックス。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count">
      <summary>配列のサイズを取得します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> プロパティが true を返す場合にスローされます。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> インターフェイスをご覧ください。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot">
      <summary>同期ルートを取得します。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>変更できない配列を反復処理する列挙子を返します。</summary>
      <returns>変更できない配列を反復処理する列挙子。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> プロパティは、<see langword="true" /> を返します。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)">
      <summary>常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="value">配列に追加する値。</param>
      <returns>常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
      <exception cref="T:System.NotSupportedException">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear">
      <summary>常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <exception cref="T:System.NotSupportedException">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)">
      <summary>常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="value">確認する値。</param>
      <returns>常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>指定したインデックス位置にある値を取得します。</summary>
      <param name="value">インデックスを返す対象の値。</param>
      <returns>指定されたインデックス位置にある要素の値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="index">項目を挿入する位置を示すインデックス。</param>
      <param name="value">挿入する値。</param>
      <exception cref="T:System.NotSupportedException">常にスローされます。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize">
      <summary>このインスタンスが固定サイズかどうかを示す値を取得します。</summary>
      <returns>このインスタンスが固定サイズの場合は<c>true</c> 。それ以外の場合は<c>false</c>。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly">
      <summary>このインスタンスが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>このインスタンスが読み取り専用の場合は<c>true</c> 。それ以外の場合は<c>false</c>。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)">
      <summary>指定したインデックス位置にある <see cref="T:System.Object" /> を取得または設定します。</summary>
      <param name="index">インデックス。</param>
      <exception cref="T:System.NotSupportedException">セッターから常にスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> プロパティが true を返す場合にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)">
      <summary>常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="value">配列から削除する値。</param>
      <exception cref="T:System.NotSupportedException">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="index">削除する項目のインデックス。</param>
      <exception cref="T:System.NotSupportedException">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary>元の配列のコピーの末尾に指定した項目を追加して返します。</summary>
      <param name="value">配列の末尾に追加する値。</param>
      <returns>指定した項目が末尾に追加された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>元の配列のコピーの末尾に指定した要素を追加して返します。</summary>
      <param name="items">配列の末尾に追加する要素。</param>
      <returns>末尾に要素が追加された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary>要素がすべて削除された配列を返します。</summary>
      <returns>要素がすべて削除された配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary>指定した値が指定した位置に挿入された新しい配列を返します。</summary>
      <param name="index">新しい項目が追加される位置を示す、配列の 0 から始まるインデックス。</param>
      <param name="element">配列の先頭に挿入する項目。</param>
      <returns>指定した値が挿入された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>指定したインデックス位置に、指定した値を挿入します。</summary>
      <param name="index">値を挿入する位置を示すインデックス。</param>
      <param name="items">挿入する要素。</param>
      <returns>指定した値が挿入された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>配列内で最初に見つかった指定の要素が削除された配列を返します。一致するものが見つからない場合は、現在の配列が返されます。</summary>
      <param name="value">配列から削除する値。</param>
      <param name="equalityComparer">検索に使用する等値比較子。</param>
      <returns>値が削除された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary>指定した条件を満たすすべての項目を配列から削除します。</summary>
      <param name="match">削除する要素の条件を定義するデリゲート。</param>
      <returns>指定された条件を満たす項目が削除された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary>指定した位置の要素が削除された配列を返します。</summary>
      <param name="index">返された配列から削除する要素の 0 から始まるインデックス。</param>
      <returns>指定した項目が削除された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>指定した項目をこの配列から削除します。</summary>
      <param name="items">このリストに一致するものが見つかった場合に削除する項目。</param>
      <param name="equalityComparer">検索に使用する等値比較子。</param>
      <returns>要素が削除された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary>指定した位置の要素が削除された配列を返します。</summary>
      <param name="index">配列から削除する開始要素の 0 から始まるインデックス。</param>
      <param name="count">配列から削除する要素の数。</param>
      <returns>指定した要素が削除された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>指定された値と等しい、配列内の最初の要素を検索して、その値を、指定した新しい値に置き換えます。</summary>
      <param name="oldValue">配列内で検索して置換する値。</param>
      <param name="newValue">
        <c>oldvalue</c> を置き換える値。</param>
      <param name="equalityComparer">値の比較に使用する等値比較子。</param>
      <returns>新しい値と古い値が同じ場合でも、<paramref name="newValue" /> が格納されている新しい配列。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> が配列内に見つかりません。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary>指定したインデックス位置の項目を、指定した項目で置き換えます。</summary>
      <param name="index">置換する項目のインデックス。</param>
      <param name="value">リストに追加する値。</param>
      <returns>指定したインデックス位置に <paramref name="item" /> を格納している新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>並べ替え順序において、現在のコレクション要素の位置が別のオブジェクトの前になるか、同じであるか、後になるかを判断します。</summary>
      <param name="other">現在のインスタンスと比較する要素。</param>
      <param name="comparer">現在の配列のメンバーと他の配列の対応するメンバーの比較に使用されるオブジェクト。</param>
      <returns>現在の要素の位置が他の要素の前になるか、同じであるか、後になるかを示す整数。</returns>
      <exception cref="T:System.ArgumentException">配列が同じ長さではありません。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>この配列が指定された配列と構造的に等しいかどうかを判断します。</summary>
      <param name="other">現在のインスタンスと比較する配列。</param>
      <param name="comparer">現在のインスタンスと他のインスタンスが構造的に等しいかどうかを判断するオブジェクト。</param>
      <returns>2 つの配列が構造的に等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>現在のインスタンスのハッシュ コードを返します。</summary>
      <param name="comparer">現在のオブジェクトのハッシュ コードを計算するオブジェクト。</param>
      <returns>現在のインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ToBuilder">
      <summary>この配列と同じ内容で、標準の変更可能なインターフェイスを使用して複数の操作で効率的に変更できる配列を作成します。</summary>
      <returns>この配列と同じ内容を含む新しいビルダー。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableDictionary`2" /> クラスのインスタンスの一連の初期化メソッドを提供します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Contains``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary>指定された変更できないディクショナリに、指定したキーと値のペアが格納されているかどうかを判定します。</summary>
      <param name="map">検索対象の変更できないディクショナリ。</param>
      <param name="key">変更できないディクショナリ内で検索するキー。</param>
      <param name="value">キーが見つかった場合は、指定したキーで検索する値。</param>
      <typeparam name="TKey">変更できないディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue">変更できないディクショナリ内の値の型。</typeparam>
      <returns>指定したキーと値のペアがこのマップに含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2">
      <summary>空の変更できないディクショナリを作成します。</summary>
      <typeparam name="TKey">ディクショナリによって格納されるキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリによって格納される値の型。</typeparam>
      <returns>空の変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>指定されたキーの比較子を使用する、空の変更できないディクショナリを作成します。</summary>
      <param name="keyComparer">ディクショナリ内のキーが等しいかどうかを判定するために使用する実装。</param>
      <typeparam name="TKey">ディクショナリによって格納されるキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリによって格納される値の型。</typeparam>
      <returns>空の変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>指定されたキーの比較子と値の比較子を使用する、空の変更できないディクショナリを作成します。</summary>
      <param name="keyComparer">ディクショナリ内のキーが等しいかどうかを判定するために使用する実装。</param>
      <param name="valueComparer">ディクショナリ内の値が等しいかどうかを判定するために使用する実装。</param>
      <typeparam name="TKey">ディクショナリによって格納されるキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリによって格納される値の型。</typeparam>
      <returns>空の変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2">
      <summary>新しい変更できないディクショナリ ビルダーを作成します。</summary>
      <typeparam name="TKey">ディクショナリによって格納されるキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリによって格納される値の型。</typeparam>
      <returns>新しいビルダー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>新しい変更できないディクショナリ ビルダーを作成します。</summary>
      <param name="keyComparer">キーの比較子。</param>
      <typeparam name="TKey">ディクショナリによって格納されるキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリによって格納される値の型。</typeparam>
      <returns>新しいビルダー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>新しい変更できないディクショナリ ビルダーを作成します。</summary>
      <param name="keyComparer">キーの比較子。</param>
      <param name="valueComparer">値の比較子。</param>
      <typeparam name="TKey">ディクショナリによって格納されるキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリによって格納される値の型。</typeparam>
      <returns>新しいビルダー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>指定された項目を格納する、新しい変更できないディクショナリを作成します。</summary>
      <param name="items">変更できなくなる前にディクショナリの作成に使用される項目。</param>
      <typeparam name="TKey">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリ内の値の型。</typeparam>
      <returns>指定された項目を格納する、新しい変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>指定された項目を格納し、指定されたキーの比較子を使用する、新しい変更できないディクショナリを作成します。</summary>
      <param name="keyComparer">キーの等価性の比較に使用する比較子の実装。</param>
      <param name="items">変更できなくなる前に、ディクショナリに追加する項目。</param>
      <typeparam name="TKey">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリ内の値の型。</typeparam>
      <returns>指定された項目を格納し、指定された比較子を使用する、新しい変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>指定された項目を格納し、指定されたキーの比較子を使用する、新しい変更できないディクショナリを作成します。</summary>
      <param name="keyComparer">キーの等価性の比較に使用する比較子の実装。</param>
      <param name="valueComparer">値の等価性の比較に使用する比較子の実装。</param>
      <param name="items">変更できなくなる前に、ディクショナリに追加する項目。</param>
      <typeparam name="TKey">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリ内の値の型。</typeparam>
      <returns>指定された項目を格納し、指定された比較子を使用する、新しい変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0)">
      <summary>一致するキーがディクショナリ内に存在する場合は指定されたキーの値を取得します。</summary>
      <param name="dictionary">値の取得元となるディクショナリ。</param>
      <param name="key">検索対象のキー。</param>
      <typeparam name="TKey">キーの型。</typeparam>
      <typeparam name="TValue">値の型。</typeparam>
      <returns>キーの値、または一致するキーが見つからなかった場合は <c>default(TValue)</c>。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary>一致するキーがディクショナリ内に存在する場合は指定されたキーの値を取得します。</summary>
      <param name="dictionary">値の取得元となるディクショナリ。</param>
      <param name="key">検索対象のキー。</param>
      <param name="defaultValue">ディクショナリ内に一致するキーが見つからない場合に返される既定値。</param>
      <typeparam name="TKey">キーの型。</typeparam>
      <typeparam name="TValue">値の型。</typeparam>
      <returns>キーの値、または一致するキーが見つからなかった場合は <paramref name="defaultValue" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>ソース キーに変換関数を適用し、変更できないディクショナリを既存の要素のコレクションから作成します。</summary>
      <param name="source">変更できないディクショナリの生成に使用されるソース コレクション。</param>
      <param name="keySelector">変更できないディクショナリのキーの変換に使用される関数。</param>
      <typeparam name="TSource">ソース コレクション内の要素の型。</typeparam>
      <typeparam name="TKey">結果として作成される変更できないディクショナリ内のキーの型。</typeparam>
      <returns>
        <paramref name="keySelector" /> の適用によってキーが変換された、<paramref name="source" /> の要素を格納する変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>シーケンスの変換に基づき、変更できないディクショナリを作成します。</summary>
      <param name="source">変更できないディクショナリの生成に使用されるソース コレクション。</param>
      <param name="keySelector">変更できないディクショナリのキーの変換に使用される関数。</param>
      <param name="keyComparer">ディクショナリに使用するキーの比較子。</param>
      <typeparam name="TSource">ソース コレクション内の要素の型。</typeparam>
      <typeparam name="TKey">結果として作成される変更できないディクショナリ内のキーの型。</typeparam>
      <returns>
        <paramref name="keySelector" /> の適用によってキーが変換された、<paramref name="source" /> の要素を格納する変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>キーと値のペアのシーケンスを列挙し、その内容の変更できないディクショナリを生成します。</summary>
      <param name="source">列挙するキーと値のペアのシーケンス。</param>
      <typeparam name="TKey">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリ内の値の型。</typeparam>
      <returns>指定されたシーケンス内のキーと値のペアを格納する、変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>キーと値のペアのシーケンスを列挙し、指定されたキーの比較子を使用してその内容の変更できないディクショナリを生成します。</summary>
      <param name="source">列挙するキーと値のペアのシーケンス。</param>
      <param name="keyComparer">変更できないディクショナリの作成時に使用するキーの比較子。</param>
      <typeparam name="TKey">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリ内の値の型。</typeparam>
      <returns>指定されたシーケンス内のキーと値のペアを格納する、変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>キーと値のペアのシーケンスを列挙し、指定されたキーの比較子と値の比較子を使用してその内容の変更できないディクショナリを生成します。</summary>
      <param name="source">列挙するキーと値のペアのシーケンス。</param>
      <param name="keyComparer">変更できないディクショナリの作成時に使用するキーの比較子。</param>
      <param name="valueComparer">変更できないディクショナリに使用する値の比較子。</param>
      <typeparam name="TKey">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリ内の値の型。</typeparam>
      <returns>指定されたシーケンス内のキーと値のペアを格納する、変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}.Builder)">
      <summary>ビルダーのディクショナリの現在の内容から、変更できないディクショナリを作成します。</summary>
      <param name="builder">変更できないディクショナリを作成するためのビルダー。</param>
      <typeparam name="TKey">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリ内の値の型。</typeparam>
      <returns>ビルダーのディクショナリの現在の内容を含む、変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>シーケンスを列挙して変換し、その内容の変更できないディクショナリを生成します。</summary>
      <param name="source">ディクショナリを生成するために列挙するシーケンス。</param>
      <param name="keySelector">各シーケンス要素からディクショナリのキーを生成する関数。</param>
      <param name="elementSelector">各シーケンス要素からディクショナリの値を生成する関数。</param>
      <typeparam name="TSource">シーケンス内の要素の型。</typeparam>
      <typeparam name="TKey">結果として生成されたディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue">結果として生成されたディクショナリ内の値の型。</typeparam>
      <returns>指定されたシーケンス内の項目を格納する、変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>シーケンスを列挙して変換し、指定されたキーの比較子を使用してその内容の変更できないディクショナリを生成します。</summary>
      <param name="source">ディクショナリを生成するために列挙するシーケンス。</param>
      <param name="keySelector">各シーケンス要素からディクショナリのキーを生成する関数。</param>
      <param name="elementSelector">各シーケンス要素からディクショナリの値を生成する関数。</param>
      <param name="keyComparer">ディクショナリに使用するキーの比較子。</param>
      <typeparam name="TSource">シーケンス内の要素の型。</typeparam>
      <typeparam name="TKey">結果として生成されたディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue">結果として生成されたディクショナリ内の値の型。</typeparam>
      <returns>指定されたシーケンス内の項目を格納する、変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>シーケンスを列挙して変換し、指定されたキーの比較子および値の比較子を使用してその内容の変更できないディクショナリを生成します。</summary>
      <param name="source">ディクショナリを生成するために列挙するシーケンス。</param>
      <param name="keySelector">各シーケンス要素からディクショナリのキーを生成する関数。</param>
      <param name="elementSelector">各シーケンス要素からディクショナリの値を生成する関数。</param>
      <param name="keyComparer">ディクショナリに使用するキーの比較子。</param>
      <param name="valueComparer">ディクショナリに使用する値の比較子。</param>
      <typeparam name="TSource">シーケンス内の要素の型。</typeparam>
      <typeparam name="TKey">結果として生成されたディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue">結果として生成されたディクショナリ内の値の型。</typeparam>
      <returns>指定されたシーケンス内の項目を格納する、変更できないディクショナリ。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2">
      <summary>変更できない、順序指定されていないキーと値のコレクションを表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="TKey">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリ内の値の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Add(`0,`1)">
      <summary>指定したキーおよび値を持つ要素を、変更できないディクショナリに追加します。</summary>
      <param name="key">追加する要素のキー。</param>
      <param name="value">追加する要素の値。</param>
      <returns>追加のキーと値のペアを格納する、新しい変更できないディクショナリ。</returns>
      <exception cref="T:System.ArgumentException">所定のキーはディクショナリに既に存在しますが、値が異なります。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>指定されたキーと値のペアを、変更できないディクショナリに追加します。</summary>
      <param name="pairs">追加するキーと値のペア。</param>
      <returns>追加のキーと値のペアを格納する、新しい変更できないディクショナリ。</returns>
      <exception cref="T:System.ArgumentException">所定のキーの 1 つはディクショナリに既に存在しますが、値が異なります。</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Builder">
      <summary>メモリ割り当てがほとんどまたはまったくない場合でも変化し、変更できないハッシュ マップのインスタンス上で非常に効率よく生成またはビルドできるハッシュ マップを表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(`0,`1)">
      <summary>指定したキーと値を持つ要素を、変更できないディクショナリに追加します。</summary>
      <param name="key">追加する要素のキー。</param>
      <param name="value">追加する要素の値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">ディクショナリには、同じキーを持つ要素が既に存在します。</exception>
      <exception cref="T:System.NotSupportedException">ディクショナリは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>指定された項目を、変更できないディクショナリに追加します。</summary>
      <param name="item">ディクショナリに追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">ディクショナリは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>一連の値をこのコレクションに追加します。</summary>
      <param name="items">このコレクションに追加する項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Clear">
      <summary>変更できないディクショナリからすべての項目を削除します。</summary>
      <exception cref="T:System.NotSupportedException">ディクショナリは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>変更できないディクショナリに特定の値が含まれているかどうかを判定します。</summary>
      <param name="item">ディクショナリ内で検索するオブジェクト。</param>
      <returns>
        <paramref name="item" /> がディクショナリに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsKey(`0)">
      <summary>指定されたキーを持つ要素が、変更できないディクショナリに格納されているかどうかを判定します。</summary>
      <param name="key">ディクショナリ内で検索するキー。</param>
      <returns>指定したキーを持つ要素がディクショナリに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsValue(`1)">
      <summary>指定された値を持つ要素が、変更できないディクショナリに格納されているかどうかを判定します。</summary>
      <param name="value">変更できないディクショナリ内で検索する値。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns>指定した値を持つ要素がディクショナリに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Count">
      <summary>変更できないディクショナリに格納されている要素の数を取得します。</summary>
      <returns>変更できないディクショナリに格納されている要素の数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetEnumerator">
      <summary>変更できないディクショナリを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary>一致するキーがディクショナリ内に存在する場合は指定されたキーの値を取得します。</summary>
      <param name="key">検索対象のキー。</param>
      <returns>キーの値、または一致するキーが見つからなかった場合は <c>default(TValue)</c>。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary>一致するキーがディクショナリ内に存在する場合は指定されたキーの値を取得します。</summary>
      <param name="key">検索対象のキー。</param>
      <param name="defaultValue">ディクショナリ内に一致するキーが見つからない場合に返される既定値。</param>
      <returns>キーの値、または一致するキーが見つからなかった場合は <paramref name="defaultValue" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Item(`0)">
      <summary>指定したキーを持つ要素を取得または設定します。</summary>
      <param name="key">取得または設定する要素。</param>
      <returns>指定したキーを持つ要素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">プロパティは取得されていますが、<paramref name="key" /> が見つかりません。</exception>
      <exception cref="T:System.NotSupportedException">このプロパティが設定されていますが、<see cref="T:System.Collections.Generic.IDictionary`2" /> は読み取り専用です。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.KeyComparer">
      <summary>キーの比較子を取得または設定します。</summary>
      <returns>キーの比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Keys">
      <summary>変更できないディクショナリのキーが格納されているコレクションを取得します。</summary>
      <returns>変更できないディクショナリを実装するオブジェクトのキーが格納されているコレクション。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(`0)">
      <summary>指定したキーを持つ要素を、変更できないディクショナリから削除します。</summary>
      <param name="key">削除する要素のキー。</param>
      <returns>要素が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  このメソッドは、<paramref name="key" /> がディクショナリに見つからなかった場合にも <see langword="false" /> を返します。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
      <exception cref="T:System.NotSupportedException">ディクショナリは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>特定のオブジェクトの最初に出現したものを、変更できないディクショナリから削除します。</summary>
      <param name="item">ディクショナリから削除するオブジェクト。</param>
      <returns>
        <paramref name="item" /> がディクショナリから正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドは、<paramref name="item" /> がディクショナリに見つからない場合にも false を返します。</returns>
      <exception cref="T:System.NotSupportedException">ディクショナリは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>指定したシーケンス内のキーと一致するキーを持つエントリを、変更できないディクショナリから削除します。</summary>
      <param name="keys">ディクショナリから削除するエントリのキー。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>指定した配列インデックスを開始位置として、ディクショナリの要素を <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 型の配列にコピーします。</summary>
      <param name="array">ディクショナリからコピーされる要素のコピー先である <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 型の 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>指定したキーおよび値を持つ要素をディクショナリ オブジェクトに追加します。</summary>
      <param name="key">追加する要素のキー。</param>
      <param name="value">追加する要素の値。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary>指定したキーを持つ要素がディクショナリ オブジェクトに格納されているかどうかを判断します。</summary>
      <param name="key">検索するキー。</param>
      <returns>指定したキーを持つ要素がディクショナリに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary>ディクショナリの <see cref="T:System.Collections.IDictionaryEnumerator" /> オブジェクトを返します。</summary>
      <returns>ディクショナリの <see cref="T:System.Collections.IDictionaryEnumerator" /> オブジェクト。</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> オブジェクトが固定サイズかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> オブジェクトが固定サイズの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary>指定したキーを持つ要素を取得または設定します。</summary>
      <param name="key">キー。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> のキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> を実装するオブジェクトのキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary>指定したキーを持つ要素をディクショナリから削除します。</summary>
      <param name="key">削除する要素のキー。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内の値を格納している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> を実装するオブジェクトの値を保持している <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子オブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ToImmutable">
      <summary>このインスタンスの内容に基づいて、変更できないディクショナリを作成します。</summary>
      <returns>変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary>指定したキーがこのディクショナリに格納されているかどうかを判断します。</summary>
      <param name="equalKey">検索対象のキー。</param>
      <param name="actualKey">一致するものが見つかった場合は、ディクショナリ内にある一致するキー。見つからない場合は <c>equalkey</c>。</param>
      <returns>
        <paramref name="equalKey" /> に一致が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary>指定したキーに関連付けられている値を返します。</summary>
      <param name="key">値を取得するキー。</param>
      <param name="value">このメソッドから制御が戻るときに、キーが見つかった場合は、指定したキーに関連付けられている値が格納されます。それ以外の場合は <paramref name="value" /> パラメーターの型に対する既定の値が返されます。 このパラメーターは初期化せずに渡されます。</param>
      <returns>指定したキーを持つ要素が、変更できないディクショナリを実装するオブジェクトに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.ValueComparer">
      <summary>値の比較子を取得または設定します。</summary>
      <returns>値の比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Values">
      <summary>変更できないディクショナリの値が格納されているコレクションを取得します。</summary>
      <returns>ディクショナリを実装するオブジェクトの値が格納されているコレクション。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Clear">
      <summary>このディクショナリ インスタンスと同じ順序付けとキー/値の比較規則を使用する、空の変更できないディクショナリを取得します。</summary>
      <returns>順序付けとキー/値の比較規則が同等の空のディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>この変更できないディクショナリに、指定されたキーと値のペアが含まれているかどうかを判定します。</summary>
      <param name="pair">検索するキーと値のペア。</param>
      <returns>指定したキーと値のペアがディクショナリ内に見つかる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsKey(`0)">
      <summary>指定したキーを持つ要素が、変更できないディクショナリに格納されているかどうかを判定します。</summary>
      <param name="key">検索するキー。</param>
      <returns>指定したキーを持つ要素が、変更できないディクショナリに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsValue(`1)">
      <summary>指定した値を持つ要素が、変更できないディクショナリに格納されているかどうかを判定します。</summary>
      <param name="value">検索する値。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns>指定した値を持つ要素がディクショナリに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Count">
      <summary>変更できないディクショナリに格納されているキーと値のペアの数を取得します。</summary>
      <returns>ディクショナリに格納されているキーと値のペアの数。</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableDictionary`2.Empty">
      <summary>空の変更できないディクショナリを取得します。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator">
      <summary>メモリを割り当てずに変更できないディクショナリの内容を列挙します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>ディクショナリ内の列挙子の現在位置にある要素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator" /> クラスの現在のインスタンスによって使用されているリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.MoveNext">
      <summary>列挙子を、変更できないディクショナリの次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がディクショナリの末尾を越えた場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子の作成後にディクショナリが変更されました。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Reset">
      <summary>列挙子を初期位置、つまりディクショナリの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException">列挙子の作成後にディクショナリが変更されました。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>現在の要素を取得します。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.GetEnumerator">
      <summary>変更できないディクショナリを反復処理する列挙子を返します。</summary>
      <returns>ディクショナリの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.IsEmpty">
      <summary>変更できないディクショナリのこのインスタンスが空かどうかを示す値を取得します。</summary>
      <returns>このインスタンスが空の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Item(`0)">
      <summary>指定したキーに関連付けられている <paramref name="TValue" /> を取得します。</summary>
      <param name="key">キーの型。</param>
      <returns>指定されたキーに関連付けられている値。 結果が見つからない場合は、操作によって例外がスローされます。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.KeyComparer">
      <summary>変更できないディクショナリのキーの比較子を取得します。</summary>
      <returns>キーの比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Keys">
      <summary>変更できないディクショナリのキーを取得します。</summary>
      <returns>変更できないディクショナリのキー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Remove(`0)">
      <summary>指定したキーを持つ要素を、変更できないディクショナリから削除します。</summary>
      <param name="key">削除する要素のキー。</param>
      <returns>指定した要素が削除された、新しい変更できないディクショナリ。指定したキーがディクショナリで見つからない場合はこのインスタンス。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>指定したキーを持つ要素を、変更できないディクショナリから削除します。</summary>
      <param name="keys">削除する要素のキー。</param>
      <returns>指定したキーが削除された、新しい変更できないディクショナリ。指定したキーがディクショナリで見つからない場合はこのインスタンス。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItem(`0,`1)">
      <summary>変更できないディクショナリで指定されたキーと値を設定します。キーの既存の値が上書きされる可能性があります。</summary>
      <param name="key">追加するエントリのキー。</param>
      <param name="value">設定するキー値。</param>
      <returns>指定したキーと値のペアが格納されている、新しい変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>変更できないディクショナリで指定されたキーと値のペアを設定します。キーの既存の値が上書きされる可能性があります。</summary>
      <param name="items">ディクショナリで設定するキーと値のペア。 キーのいずれかが既にディクショナリに存在する場合、このメソッドでその以前の値が上書きされます。</param>
      <returns>指定したキーと値のペアが格納されている、新しい変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>特定の配列インデックスを開始位置として、配列にディクショナリの要素をコピーします。</summary>
      <param name="array">ディクショナリから要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>指定したキーおよび値を持つ要素を、変更できないディクショナリ オブジェクトに追加します。</summary>
      <param name="key">追加する要素のキーとして使用するオブジェクト。</param>
      <param name="value">追加する要素の値として使用するオブジェクト。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Clear">
      <summary>このインスタンスをクリアします。</summary>
      <exception cref="T:System.NotSupportedException">ディクショナリ オブジェクトは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>指定したキーを持つ要素が、変更できないディクショナリ オブジェクトに格納されているかどうかを判断します。</summary>
      <param name="key">ディクショナリ オブジェクト内で検索するキー。</param>
      <returns>指定したキーを持つ要素がディクショナリに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>変更できないディクショナリ オブジェクトの <see cref="T:System.Collections.IDictionaryEnumerator" /> オブジェクトを返します。</summary>
      <returns>ディクショナリ オブジェクトの列挙子オブジェクトです。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> オブジェクトが固定サイズかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> オブジェクトが固定サイズの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>指定したキーを持つ要素を取得または設定します。</summary>
      <param name="key">キー。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Keys">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> のキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> を実装するオブジェクトのキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>指定したキーを持つ要素を、変更できないディクショナリ オブジェクトから削除します。</summary>
      <param name="key">削除する要素のキー。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Values">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内の値を格納している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> を実装するオブジェクトの値を保持している <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子オブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ToBuilder">
      <summary>標準の変更可能なインターフェイスを使用して複数の操作で効率的に変更できるこのディクショナリと同じ内容で、変更できないディクショナリを作成します。</summary>
      <returns>標準の変更可能なインターフェイスを使用して複数の操作で効率的に変更できるこのディクショナリと同じ内容のコレクション。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary>指定したキーがこのディクショナリに格納されているかどうかを判断します。</summary>
      <param name="equalKey">検索対象のキー。</param>
      <param name="actualKey">一致するものが見つかった場合は、ディクショナリ内にある一致するキー。見つからない場合は <c>equalkey</c>。</param>
      <returns>
        <paramref name="equalKey" /> に一致が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetValue(`0,`1@)">
      <summary>指定したキーに関連付けられている値を取得します。</summary>
      <param name="key">値を取得するキー。</param>
      <param name="value">このメソッドから制御が戻るときに、キーが見つかった場合は、指定したキーに関連付けられている値が格納されます。それ以外の場合は、<paramref name="value" /> パラメーターの型に対する既定値が格納されます。 このパラメーターは初期化せずに渡されます。</param>
      <returns>指定したキーを持つ要素が、ディクショナリを実装するオブジェクトに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.ValueComparer">
      <summary>値が等しいかどうかの判断に使用される値の比較子を取得します。</summary>
      <returns>値が等しいかどうかの判断に使用される値の比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Values">
      <summary>変更できないディクショナリ内の値を取得します。</summary>
      <returns>変更できないディクショナリ内の値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>指定されたキーの比較子を使用する、変更できないディクショナリのインスタンスを取得します。</summary>
      <param name="keyComparer">使用するキーの比較子。</param>
      <returns>指定された比較子を使用する、変更できないディクショナリのインスタンス。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary>指定されたキーと値の比較子を使用する、変更できないディクショナリのインスタンスを取得します。</summary>
      <param name="keyComparer">使用するキーの比較子。</param>
      <param name="valueComparer">使用する値の比較子。</param>
      <returns>指定された比較子を使用する、変更できないディクショナリのインスタンス。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" /> クラスのインスタンスの一連の初期化メソッドを提供します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1">
      <summary>空の変更できないハッシュ セットを作成します。</summary>
      <typeparam name="T">変更できないハッシュ セットに格納する項目の型。</typeparam>
      <returns>空の変更できないハッシュ セット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0)">
      <summary>指定した項目を含む新しい変更できないハッシュ セットを作成します。</summary>
      <param name="item">ハッシュ セットに事前に設定する項目。</param>
      <typeparam name="T">変更できないハッシュ セット内の項目の型。</typeparam>
      <returns>指定した項目を含む新しい変更できないハッシュ セット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0[])">
      <summary>指定した項目の配列を含む新しい変更できないハッシュ セットを作成します。</summary>
      <param name="items">ハッシュ セットに事前に設定する項目を格納している配列。</param>
      <typeparam name="T">変更できないハッシュ セット内の項目の型。</typeparam>
      <returns>指定した項目を含む新しい変更できないハッシュ セット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>指定された等値比較子を使用する、空の変更できないハッシュ セットを作成します。</summary>
      <param name="equalityComparer">セット内のオブジェクトが等しいかどうかを比較するために使用するオブジェクト。</param>
      <typeparam name="T">変更できないハッシュ セット内の項目の型。</typeparam>
      <returns>空の変更できないハッシュ セット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0)">
      <summary>指定された項目を含み、指定された等値比較子をセットの種類に使用する、新しい変更できないハッシュ セットを作成します。</summary>
      <param name="equalityComparer">セット内のオブジェクトが等しいかどうかを比較するために使用するオブジェクト。</param>
      <param name="item">ハッシュ セットに事前に設定する項目。</param>
      <typeparam name="T">変更できないハッシュ セット内の項目の型。</typeparam>
      <returns>指定した項目を含む新しい変更できないハッシュ セット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0[])">
      <summary>指定された項目を含み、指定された等値比較子をセットの種類に使用する、新しい変更できないハッシュ セットを作成します。</summary>
      <param name="equalityComparer">セット内のオブジェクトが等しいかどうかを比較するために使用するオブジェクト。</param>
      <param name="items">ハッシュ セットに事前に設定する項目を格納している配列。</param>
      <typeparam name="T">変更できないハッシュ セットに格納されている項目の型。</typeparam>
      <returns>指定した項目を含む新しい変更できないハッシュ セット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1">
      <summary>新しい変更できないハッシュ セット ビルダーを作成します。</summary>
      <typeparam name="T">コレクションによって格納される項目の型。</typeparam>
      <returns>変更できないハッシュ セット ビルダー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>新しい変更できないハッシュ セット ビルダーを作成します。</summary>
      <param name="equalityComparer">セット内のオブジェクトが等しいかどうかを比較するために使用するオブジェクト。</param>
      <typeparam name="T">コレクションによって格納される項目の型。</typeparam>
      <returns>新しい変更できないハッシュ セット ビルダー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>指定した項目が事前に設定された、新しい変更できないハッシュ セットを作成します。</summary>
      <param name="items">ハッシュ セットに追加する項目。</param>
      <typeparam name="T">コレクションによって格納される項目の型。</typeparam>
      <returns>指定した項目を含む新しい変更できないハッシュ セット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>指定された項目を含み、指定された等値比較子をセットの種類に使用する、新しい変更できないハッシュ セットを作成します。</summary>
      <param name="equalityComparer">セット内のオブジェクトが等しいかどうかを比較するために使用するオブジェクト。</param>
      <param name="items">変更不可が適用される前にコレクションに追加する項目。</param>
      <typeparam name="T">コレクションに格納される項目の型。</typeparam>
      <returns>新しい変更できないハッシュ セット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>シーケンスを列挙し、その内容の変更できないハッシュ セットを生成します。</summary>
      <param name="source">列挙するシーケンス。</param>
      <typeparam name="TSource">シーケンス内の要素の型。</typeparam>
      <returns>指定されたシーケンス内の項目を含む、変更できないハッシュ セット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>シーケンスを列挙し、その内容の変更できないハッシュ セットを生成して、指定された等値比較子をセットの種類に使用します。</summary>
      <param name="source">列挙するシーケンス。</param>
      <param name="equalityComparer">セット内のオブジェクトが等しいかどうかを比較するために使用するオブジェクト。</param>
      <typeparam name="TSource">シーケンス内の要素の型。</typeparam>
      <returns>指定したシーケンス内の項目を含み、指定された等値比較子を使用する、変更できないハッシュ セット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Immutable.ImmutableHashSet{``0}.Builder)">
      <summary>ビルダーのセットの現在の内容から、変更できないハッシュ セットを作成します。</summary>
      <param name="builder">変更できないハッシュ セットを作成するためのビルダー。</param>
      <typeparam name="TSource">ハッシュセット内の要素の型。</typeparam>
      <returns>ビルダーのセットの現在の内容を含む、変更できないハッシュ セット。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1">
      <summary>変更できない、順序が指定されていないハッシュ セットを表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T">ハッシュ セット内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Add(`0)">
      <summary>指定した要素をハッシュ セットに追加します。</summary>
      <param name="item">セットに追加する要素。</param>
      <returns>追加された値と、<see cref="T:System.Collections.Immutable.ImmutableHashSet`1" /> オブジェクトによって以前に保持されていたすべての値を含む、ハッシュ セット。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Builder">
      <summary>メモリ割り当てがほとんどまたはまったくない場合でも変化し、変更できないハッシュ セットのインスタンス上で非常に効率よく生成またはビルドできるハッシュ セットを表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Add(`0)">
      <summary>指定された項目を、変更できないハッシュ セットに追加します。</summary>
      <param name="item">追加する項目。</param>
      <returns>項目がまだコレクションに属していない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Clear">
      <summary>変更できないハッシュ セットからすべての項目を削除します。</summary>
      <exception cref="T:System.NotSupportedException">ハッシュ セットとは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Contains(`0)">
      <summary>変更できないハッシュ セットに特定の値が含まれているかどうかを判定します。</summary>
      <param name="item">ハッシュ セット内で検索するオブジェクト。</param>
      <returns>
        <paramref name="item" /> がハッシュ セットに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.Count">
      <summary>変更できないハッシュ セットに含まれている要素の数を取得します。</summary>
      <returns>変更できないハッシュ セットに含まれている要素の数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のハッシュ セットから、指定されたコレクションに含まれる要素をすべて削除します。</summary>
      <param name="other">セットから削除する項目のコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.GetEnumerator">
      <summary>変更できないハッシュ セットを反復処理する列挙子を返します。</summary>
      <returns>セットの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>指定されたコレクションに存在する要素だけが含まれるように現在のセットを変更します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットが、指定されたコレクションの真のサブセット (真部分集合) であるかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットが <paramref name="other" /> の真のサブセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットが、指定されたコレクションの真のスーパーセット (真部分集合) であるかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットが <paramref name="other" /> の真のスーパーセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットが、指定されたコレクションのサブセットであるかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットが <paramref name="other" /> パラメーターのサブセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットが、指定されたコレクションのスーパーセットであるかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットが <paramref name="other" /> パラメーターのスーパーセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.KeyComparer">
      <summary>キーの比較子を取得または設定します。</summary>
      <returns>キーの比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットと、指定されたコレクションとで重なり合う部分が存在するかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットと <paramref name="other" /> との間に共通する要素が 1 つでも存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Remove(`0)">
      <summary>特定のオブジェクトの最初に出現したものを、変更できないハッシュ セットから削除します。</summary>
      <param name="item">セットから削除するオブジェクト。</param>
      <returns>
        <paramref name="item" /> がセットから正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドは、<paramref name="item" /> が元のセットに見つからない場合にも <see langword="false" /> を返します。</returns>
      <exception cref="T:System.NotSupportedException">セットは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットと指定されたコレクションに同じ要素が存在するかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットが <paramref name="other" /> と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットを、そのセットと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納されるように変更します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>ハッシュ セットに項目を追加します。</summary>
      <param name="item">セットに追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">セットは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>特定の配列インデックスを開始位置として、配列にハッシュ セットの要素をコピーします。</summary>
      <param name="array">ハッシュ セットから要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ToImmutable">
      <summary>このインスタンスの内容に基づいて、変更できないハッシュ セットを作成します。</summary>
      <returns>変更できないセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットを、現在のセットと指定したコレクションの両方に存在するすべての要素が格納されるように変更します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Clear">
      <summary>並べ替えと順序付けのセマンティクスがこのインスタンスと同じ空の変更できないハッシュ セットを取得します。</summary>
      <returns>並べ替えと順序付けのセマンティクスがこのインスタンスと同じ空のハッシュ セット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Contains(`0)">
      <summary>指定した要素がこの変更できないハッシュ セットに格納されているかどうかを判断します。</summary>
      <param name="item">変更できないハッシュ セット内で検索するオブジェクト。</param>
      <returns>
        <see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Count">
      <summary>変更できないハッシュ セット内の要素の数を取得します。</summary>
      <returns>ハッシュ セット内の要素の数。</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableHashSet`1.Empty">
      <summary>既定の <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用する、この型の変更できないハッシュ セットを取得します。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator">
      <summary>メモリを割り当てずに変更できないハッシュ セットの内容を列挙します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>列挙子の現在位置の要素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator" /> クラスの現在のインスタンスによって使用されているリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.MoveNext">
      <summary>列挙子を、変更できないハッシュ セットの次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がハッシュ セットの末尾を越えた場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">ハッシュ セットが、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Reset">
      <summary>列挙子を初期位置、つまりハッシュ セットの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException">ハッシュ セットが、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>現在の要素を取得します。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の変更できないハッシュ セットから、指定されたコレクションに含まれる要素を削除します。</summary>
      <param name="other">このセットから削除する項目のコレクション。</param>
      <returns>項目が削除された新しいセット。セットに項目がなかった場合は、元のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>このセットと指定されたセットの両方に存在する要素を含む、変更できないハッシュ セットを作成します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>両方のセットに存在するすべての要素を含む、新しい変更できないセット。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.IsEmpty">
      <summary>現在の変更できないハッシュ セットが空かどうかを示す値を取得します。</summary>
      <returns>このインスタンスが空の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の変更できないハッシュ セットが、指定されたコレクションの真のサブセット (真部分集合) であるかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットが、指定されたコレクションの真のサブセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の変更できないハッシュ セットが、指定されたコレクションの真のスーパーセット (真部分集合) であるかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットが、指定されたコレクションの真のスーパーセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の変更できないハッシュ セットが、指定されたコレクションのサブセットであるかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットが、指定されたコレクションのサブセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の変更できないハッシュ セットが、指定されたコレクションのスーパーセットであるかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットが、指定されたコレクションのスーパーセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.KeyComparer">
      <summary>キーのハッシュ コードを取得し、変更できないハッシュ セット内の値が等しいかどうかを確認するために使用されるオブジェクトを取得します。</summary>
      <returns>キーのハッシュ コードを取得し、等しいかどうかを確認するために使用される比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の変更できないハッシュ セットと、指定されたコレクションとで重なり合う部分が存在するかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットと指定されたコレクションとの間に共通する要素が 1 つでも存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Remove(`0)">
      <summary>この変更できないハッシュ セットから、指定した要素を削除します。</summary>
      <param name="item">削除する要素。</param>
      <returns>指定した要素が削除された新しいセット。セット内に要素が見つからない場合は、現在のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の変更できないハッシュ セットと指定されたコレクションに同じ要素が存在するかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>セットが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納された、変更できないハッシュ セットを作成します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納された、新しいセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>セットに項目を追加します。</summary>
      <param name="item">セットに追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">セットは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>このセットからすべての項目を削除します。</summary>
      <exception cref="T:System.NotSupportedException">セットは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>特定のインデックスを開始位置として、配列にセットの要素をコピーします。</summary>
      <param name="array">セットから要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> インターフェイスをご覧ください。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>セット内で最初に見つかった特定のオブジェクトを削除します。</summary>
      <param name="item">セットから削除するオブジェクト。</param>
      <returns>要素が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理する列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary>現在のセットに要素を追加し、その要素が正常に追加されたかどうかを示す値を返します。</summary>
      <param name="item">コレクションに追加する要素。</param>
      <returns>要素がセットに追加された場合は <see langword="true" />。セットに既存の要素が存在していた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットから、指定されたコレクションに含まれる要素をすべて削除します。</summary>
      <param name="other">削除する項目のコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>指定されたコレクションに存在する要素だけが含まれるように現在のセットを変更します。</summary>
      <param name="other">現在のコレクションと比較するコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットを、そのセットと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納されるように変更します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットを、現在のセットまたは指定したコレクションのいずれかに存在するすべての要素が格納されるように変更します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>特定のインデックスを開始位置として、配列にセットの要素をコピーします。</summary>
      <param name="array">セットから要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> インターフェイスをご覧ください。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#SyncRoot">
      <summary>以下を参照してください。<see cref="T:System.Collections.ICollection" /></summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>セットを反復処理する列挙子を返します。</summary>
      <returns>セットの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary>この変更できないセットに、指定した要素を追加します。</summary>
      <param name="item">追加する要素。</param>
      <returns>要素が追加された新しいセット。または、要素がセット内に既に存在する場合は、このセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary>並べ替えと順序付けのセマンティクスがこのインスタンスと同じ空のセットを取得します。</summary>
      <returns>並べ替えと順序付けのセマンティクスがこのインスタンスと同じ空のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットから、指定されたコレクションに含まれている要素を削除します。</summary>
      <param name="other">このセットから削除する項目のコレクション。</param>
      <returns>項目が削除された新しいセット。セットに項目がなかった場合は、元のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>このセットと指定されたセットの両方に存在する要素を含む、変更できないセットを作成します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>両方のセットに存在するすべての要素を含む、新しい変更できないセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary>この変更できないセットから、指定した要素を削除します。</summary>
      <param name="item">削除する要素。</param>
      <returns>指定した要素が削除された新しいセット。セット内に要素が見つからない場合は、現在のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納された、変更できないセットを作成します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納された、新しいセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットと指定されたコレクションのどちらかに存在するすべての要素が格納された、新しい変更できないセットを作成します。</summary>
      <param name="other">要素の追加元のコレクション。</param>
      <returns>項目が追加された、新しい変更できないセット。すべての項目が既にセットにあった場合は、元のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.ToBuilder">
      <summary>このセットと同じ内容で、標準の変更可能なインターフェイスを使用して複数の操作で効率的に変更できる、変更できないハッシュ セットを作成します。</summary>
      <returns>標準の変更可能なインターフェイスを使用して複数の操作で効率的に変更できるこのセットと同じ内容のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.TryGetValue(`0,`0@)">
      <summary>指定された値をセットで検索し、見つかった場合は同じ値を返します。</summary>
      <param name="equalValue">検索する値。</param>
      <param name="actualValue">セット内の検索で見つかった値。検索で一致するものがなかった場合は、元の値。</param>
      <returns>検索が成功したかどうかを示す値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットと指定されたコレクションのどちらかに存在するすべての要素が格納された、新しい変更できないハッシュ セットを作成します。</summary>
      <param name="other">要素の追加元のコレクション。</param>
      <returns>項目が追加された、新しい変更できないハッシュ セット。すべての項目が既にセットにあった場合は、元のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.WithComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>指定された等値比較子を検索方法に使用する、変更できないハッシュ セットのインスタンスを取得します。</summary>
      <param name="equalityComparer">使用する等値比較子。</param>
      <returns>指定された比較子を使用する、この変更できないハッシュ セットのインスタンス。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableInterlocked">
      <summary>変更できないコレクションのインタロック交換メカニズムが含まれています。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})">
      <summary>値の追加または既存のエントリの更新後に、その値をディクショナリから取得します。</summary>
      <param name="location">ディクショナリで指定されていない場合にアトミックに更新する変数またはフィールド。</param>
      <param name="key">追加または更新する値のキー。</param>
      <param name="addValue">前の値が存在しない場合に使用する値。</param>
      <param name="updateValueFactory">キーと以前の値を受け取り、ディクショナリの更新に使用する新しい値を返す関数。</param>
      <typeparam name="TKey">ディクショナリによって格納されているキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリによって格納される値の型。</typeparam>
      <returns>追加または更新された値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
      <summary>値の追加または既存のエントリの更新後に、その値をディクショナリから取得します。</summary>
      <param name="location">ディクショナリで指定されていない場合にアトミックに更新する変数またはフィールド。</param>
      <param name="key">追加または更新する値のキー。</param>
      <param name="addValueFactory">キーを受け取り、値がまだ存在しない場合にディクショナリに追加する新しい値を返す関数。</param>
      <param name="updateValueFactory">キーと以前の値を受け取り、ディクショナリの更新に使用する新しい値を返す関数。</param>
      <typeparam name="TKey">ディクショナリによって格納されているキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリによって格納される値の型。</typeparam>
      <returns>追加または更新された値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)">
      <summary>要素をキューの末尾にアトミックに入れます。</summary>
      <param name="location">アトミックに更新する変数またはフィールド。</param>
      <param name="value">キューに入れる値。</param>
      <typeparam name="T">コレクションに格納されている項目の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary>指定されたキーの値をディクショナリから取得するか、キーが見つからなかった場合は、ディクショナリに新しい値を追加します。</summary>
      <param name="location">指定したキーがディクショナリに存在しない場合にアトミックに更新する変数またはフィールド。</param>
      <param name="key">取得または追加する値のキー。</param>
      <param name="value">キーが見つからなかったディクショナリに追加する値。</param>
      <typeparam name="TKey">コレクションに格納されているキーの型。</typeparam>
      <typeparam name="TValue">コレクションに格納されている値の型。</typeparam>
      <returns>指定したキーの値、またはキーが存在しなかった場合は <paramref name="valueFactory" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})">
      <summary>指定されたキーの値をディクショナリから取得するか、キーが見つからなかった場合は、ディクショナリに新しい値を追加します。</summary>
      <param name="location">ディクショナリで指定されていない場合にアトミックに更新する変数またはフィールド。</param>
      <param name="key">取得または追加する値のキー。</param>
      <param name="valueFactory">キーが見つからない場合にディクショナリに挿入する値を取得するために実行する関数。 このデリゲートは 2 回以上呼び出されることはありません。</param>
      <typeparam name="TKey">コレクションに格納されているキーの型。</typeparam>
      <typeparam name="TValue">コレクションに格納されている値の型。</typeparam>
      <returns>指定したキーの値、またはキーが存在しなかった場合は <paramref name="valueFactory" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)">
      <summary>指定されたキーの値をディクショナリから取得するか、キーが見つからなかった場合は、ディクショナリに新しい値を追加します。</summary>
      <param name="location">ディクショナリで指定されていない場合に更新する変数またはフィールド。</param>
      <param name="key">取得または追加する値のキー。</param>
      <param name="valueFactory">キーが見つからない場合にディクショナリに挿入する値を取得するために実行する関数。</param>
      <param name="factoryArgument">値ファクトリに渡す引数。</param>
      <typeparam name="TKey">コレクションに格納されているキーの型。</typeparam>
      <typeparam name="TValue">コレクションに格納されている値の型。</typeparam>
      <typeparam name="TArg">値ファクトリに渡される引数の型。</typeparam>
      <returns>指定したキーの値、またはキーが存在しなかった場合は <paramref name="valueFactory" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})">
      <summary>2 つの変更できない配列が等しいかどうかを比較し、等しい場合は、その配列のいずれかを置き換えます。</summary>
      <param name="location">値を <paramref name="comparand" /> と比較し、場合によっては置き換える比較先。</param>
      <param name="value">比較した結果が等しい場合に比較先の値を置き換える値。</param>
      <param name="comparand">
        <paramref name="location" /> にある値と比較する値。</param>
      <typeparam name="T">配列に格納される要素の型。</typeparam>
      <returns>
        <paramref name="location" /> の元の値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary>分割不可能な操作として、指定した配列を配列として設定し、元の配列への参照を返します。</summary>
      <param name="location">指定した値に設定する配列。</param>
      <param name="value">
        <paramref name="location" /> パラメーターに設定される値。</param>
      <typeparam name="T">配列に格納される要素の型。</typeparam>
      <returns>
        <paramref name="location" /> の元の値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary>配列が初期化されていない場合に、指定した配列を配列として設定します。</summary>
      <param name="location">指定した値に設定する配列。</param>
      <param name="value">初期化されない場合に、<paramref name="location" /> パラメーターに設定される値。</param>
      <typeparam name="T">配列に格納される要素の型。</typeparam>
      <returns>指定した値が配列に割り当てられた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)">
      <summary>新しい要素をスタックにプッシュします。</summary>
      <param name="location">更新するスタック。</param>
      <param name="value">スタックにプッシュする値。</param>
      <typeparam name="T">スタック内の項目の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary>キーがディクショナリ内に存在しない場合、指定したキーと値をディクショナリに追加します。</summary>
      <param name="location">指定したキーと値で更新するディクショナリ。</param>
      <param name="key">ディクショナリでまだ定義されていない場合に追加するキー。</param>
      <param name="value">加算する値。</param>
      <typeparam name="TKey">コレクションに格納されているキーの型。</typeparam>
      <typeparam name="TValue">コレクションに格納されている値の型。</typeparam>
      <returns>キーがディクショナリ内に存在しない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)">
      <summary>キューが空ではない場合、キューの先頭にある指定した要素をアトミックに削除して返します。</summary>
      <param name="location">アトミックに更新する変数またはフィールド。</param>
      <param name="value">キューが空ではない場合、キューの先頭から値に設定します。</param>
      <typeparam name="T">キュー内の項目の型。</typeparam>
      <returns>キューが空ではなく、head 要素が削除されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)">
      <summary>削除する要素が存在する場合は、スタックの先頭から要素を削除します。</summary>
      <param name="location">更新するスタック。</param>
      <param name="value">スタックが空でない場合、スタックから削除された値を受け取ります。</param>
      <typeparam name="T">スタック内の項目の型。</typeparam>
      <returns>要素がスタックから削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)">
      <summary>キーが存在する場合は、指定したキーを持つ要素を削除します。</summary>
      <param name="location">更新するディクショナリ。</param>
      <param name="key">削除するキー。</param>
      <param name="value">ディクショナリが空でない場合は、削除された項目の値を受け取ります。</param>
      <typeparam name="TKey">コレクションに格納されているキーの型。</typeparam>
      <typeparam name="TValue">コレクションに格納されている値の型。</typeparam>
      <returns>キーが見つかって削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)">
      <summary>指定したキーが既に特定の値に設定されている場合は、指定されたキーに指定された値を設定します。</summary>
      <param name="location">更新するディクショナリ。</param>
      <param name="key">更新するキー。</param>
      <param name="newValue">設定する新しい値。</param>
      <param name="comparisonValue">更新を成功させるための <paramref name="key" /> の現在の値。</param>
      <typeparam name="TKey">コレクションに格納されているキーの型。</typeparam>
      <typeparam name="TValue">コレクションに格納されている値の型。</typeparam>
      <returns>
        <paramref name="key" /> と <paramref name="comparisonValue" /> がディクショナリに存在し、比較が <paramref name="newValue" /> に更新された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})">
      <summary>指定した変換関数により、楽観的ロック トランザクション セマンティクスを使って値をその場で変更します。             変換は、楽観的ロックの競合を獲得するために必要な回数だけ再試行されます。</summary>
      <param name="location">変更する変数またはフィールド。複数のスレッドによってアクセスされる場合があります。</param>
      <param name="transformer">値を変更する関数。 この関数は、他のスレッドとの競合が発生すると複数回実行される可能性があるので、副作用が生じないようにする必要があります。</param>
      <typeparam name="T">データの型。</typeparam>
      <returns>
        <paramref name="transformer" /> 関数の結果を適用することにより場所の値が変更された場合は <see langword="true" />。<paramref name="transformer" /> の最後の呼び出しで既存の値が返されたために場所の値が同じままだった場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)">
      <summary>指定した変換関数により、楽観的ロック トランザクション セマンティクスを使って値をその場で変更します。             変換は、楽観的ロックの競合を獲得するために必要な回数だけ再試行されます。</summary>
      <param name="location">変更する変数またはフィールド。複数のスレッドによってアクセスされる場合があります。</param>
      <param name="transformer">値を変更する関数。 この関数は、他のスレッドとの競合が発生すると複数回実行される可能性があるので、副作用が生じないようにする必要があります。</param>
      <param name="transformerArgument">
        <paramref name="transformer" /> に渡す引数。</param>
      <typeparam name="T">データの型。</typeparam>
      <typeparam name="TArg">に渡される引数の型<paramref name="transformer" />。</typeparam>
      <returns>
        <paramref name="transformer" /> 関数の結果を適用することにより場所の値が変更された場合は <see langword="true" />。<paramref name="transformer" /> の最後の呼び出しで既存の値が返されたために場所の値が同じままだった場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableList`1" /> クラスのインスタンスの一連の初期化メソッドを提供します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1">
      <summary>空の変更できないリストを作成します。</summary>
      <typeparam name="T">リストに格納する項目の型。</typeparam>
      <returns>空の変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0)">
      <summary>指定された項目を含む、新しい変更できないリストを作成します。</summary>
      <param name="item">リストに事前に設定する項目。</param>
      <typeparam name="T">リスト内の項目の型。</typeparam>
      <returns>指定した項目を含む、新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0[])">
      <summary>指定された項目の配列を含む、新しい変更できないリストを作成します。</summary>
      <param name="items">リストに事前に設定する項目を格納している配列。</param>
      <typeparam name="T">リスト内の項目の型。</typeparam>
      <returns>指定された項目を含む、新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateBuilder``1">
      <summary>新しい変更できないリスト ビルダーを作成します。</summary>
      <typeparam name="T">コレクションによって格納される項目の型。</typeparam>
      <returns>変更できないコレクション ビルダー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>指定された項目を含む、新しい変更できないリストを作成します。</summary>
      <param name="items">リストに追加する項目。</param>
      <typeparam name="T">リスト内の項目の型。</typeparam>
      <returns>指定された項目を含む、変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>リスト内で指定したオブジェクトを検索し、最初に見つかったオブジェクトの 0 から始まるインデックスを返します。</summary>
      <param name="list">検索するリスト。</param>
      <param name="item">リスト内で検索するオブジェクト。 参照型の場合は、値を null にできます。</param>
      <typeparam name="T">リスト内の項目の型。</typeparam>
      <returns>リストで、インデックスから最後の要素までの要素範囲内で項目が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>リスト内で指定したオブジェクトを検索し、最初に見つかったオブジェクトの 0 から始まるインデックスを返します。</summary>
      <param name="list">検索するリスト。</param>
      <param name="item">変更できないリスト内で検索するオブジェクト。 参照型の場合は、値を null にできます。</param>
      <param name="equalityComparer">検索に使用する等値比較子。</param>
      <typeparam name="T">リスト内の項目の型。</typeparam>
      <returns>変更できないリストで、インデックスから最後の要素までの要素範囲内で項目が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary>変更できないリストのうち、指定したインデックスから最後の要素までの要素範囲の中から、指定したオブジェクトを検索し、最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="list">検索するリスト。</param>
      <param name="item">変更できないリスト内で検索するオブジェクト。 参照型の場合は、値を null にできます。</param>
      <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 (ゼロ) は有効です。</param>
      <typeparam name="T">リスト内の項目の型。</typeparam>
      <returns>変更できないリストで、インデックスから最後の要素までの要素範囲内で項目が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary>変更できないリストのうち、指定したインデックスから最後の要素までの要素範囲の中から、指定したオブジェクトを検索し、最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="list">検索するリスト。</param>
      <param name="item">変更できないリスト内で検索するオブジェクト。 参照型の場合は、値を null にできます。</param>
      <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 (ゼロ) は有効です。</param>
      <param name="count">検索対象の範囲内にある要素の数。</param>
      <typeparam name="T">リスト内の項目の型。</typeparam>
      <returns>変更できないリストで、インデックスから最後の要素までの要素範囲内で項目が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>変更できないリスト全体から、指定したオブジェクトを検索し、最後に見つかったオブジェクトの 0 から始まるインデックスを返します。</summary>
      <param name="list">検索するリスト。</param>
      <param name="item">変更できないリスト内で検索するオブジェクト。 参照型の場合は、値を null にできます。</param>
      <typeparam name="T">リスト内の項目の型。</typeparam>
      <returns>変更できないリスト全体で項目を検索し、見つかった場合は、インデックス番号の最も大きい要素の 0 から始まるインデックス番号、それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>変更できないリスト全体から、指定したオブジェクトを検索し、最後に見つかったオブジェクトの 0 から始まるインデックスを返します。</summary>
      <param name="list">検索するリスト。</param>
      <param name="item">変更できないリスト内で検索するオブジェクト。 参照型の場合は、値を null にできます。</param>
      <param name="equalityComparer">検索に使用する等値比較子。</param>
      <typeparam name="T">リスト内の項目の型。</typeparam>
      <returns>変更できないリスト全体で項目を検索し、見つかった場合は、インデックス番号の最も大きい要素の 0 から始まるインデックス番号、それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary>変更できないリストのうち、最初の要素から指定したインデックスまでの要素範囲の中で、指定したオブジェクトを検索し、最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="list">検索するリスト。</param>
      <param name="item">変更できないリスト内で検索するオブジェクト。 参照型の場合は、値を null にできます。</param>
      <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <typeparam name="T">リスト内の項目の型。</typeparam>
      <returns>変更できないリストのうち、最初の要素からインデックスまでの要素範囲内で項目が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary>変更できないリストのうち、最初の要素から指定したインデックスまでの要素範囲の中で、指定したオブジェクトを検索し、最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="list">検索するリスト。</param>
      <param name="item">変更できないリスト内で検索するオブジェクト。 参照型の場合は、値を null にできます。</param>
      <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count">検索対象の範囲内にある要素の数。</param>
      <typeparam name="T">リスト内の項目の型。</typeparam>
      <returns>変更できないリストのうち、最初の要素からインデックスまでの要素範囲内で項目が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>指定した値をこのリストから削除します。</summary>
      <param name="list">検索するリスト。</param>
      <param name="value">削除する値。</param>
      <typeparam name="T">リスト内の項目の型。</typeparam>
      <returns>要素が削除された、新しい変更できないリスト。このリスト内に要素がない場合は、このリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>指定した値をこのリストから削除します。</summary>
      <param name="list">検索するリスト。</param>
      <param name="items">このリストに一致するものが見つかった場合に削除する項目。</param>
      <typeparam name="T">リスト内の項目の型。</typeparam>
      <returns>要素が削除された新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)">
      <summary>リスト内で最初に一致する要素を、指定した要素に置換します。</summary>
      <param name="list">検索するリスト。</param>
      <param name="oldValue">置換する要素。</param>
      <param name="newValue">古い要素を置換する要素。</param>
      <typeparam name="T">リスト内の項目の型。</typeparam>
      <returns>新しいリスト (置き換えられる値がその位置の新しい値と同じ場合も)。</returns>
      <exception cref="T:System.ArgumentException">リスト内に古い値が存在しない場合にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>シーケンスを列挙し、その内容の変更できないリストを生成します。</summary>
      <param name="source">列挙するシーケンス。</param>
      <typeparam name="TSource">シーケンス内の要素の型。</typeparam>
      <returns>指定されたシーケンス内の項目を含む、変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Immutable.ImmutableList{``0}.Builder)">
      <summary>ビルダーのコレクションの現在の内容から、変更できないリストを作成します。</summary>
      <param name="builder">変更できないリストを作成するためのビルダー。</param>
      <typeparam name="TSource">リスト内の要素の型。</typeparam>
      <returns>ビルダーのコレクションの現在の内容を含む、変更できないリスト。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1">
      <summary>変更できないリスト (インデックスを使用してアクセスできる、厳密に型指定されたオブジェクトのリスト) を表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T">リスト内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Add(`0)">
      <summary>指定したオブジェクトを、変更できないリストの末尾に追加します。</summary>
      <param name="value">追加するオブジェクト。</param>
      <returns>オブジェクトが追加された新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>指定したコレクションの要素を、変更できないリストの末尾に追加します。</summary>
      <param name="items">リストの末尾に追加する要素を含むコレクション。</param>
      <returns>要素が追加された新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)">
      <summary>既定の比較子を使用して、並べ替えられたリスト全体から要素を検索し、その要素の 0 から始まるインデックスを返します。</summary>
      <param name="item">検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns>item が見つかった場合は、並べ替えられたリスト内の item の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、item の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.ICollection.Count" /> のビットごとの補数です。</returns>
      <exception cref="T:System.InvalidOperationException">既定の比較子は、T 型の比較子の実装を見つけることができません。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>指定した比較子を使用して、並べ替えられたリスト全体から要素を検索し、その要素の 0 から始まるインデックスを返します。</summary>
      <param name="item">検索するオブジェクト。 参照型の場合は、値を null にできます。</param>
      <param name="comparer">要素を比較する場合に使用する比較子実装。または、既定の比較子を使用する場合は null。</param>
      <returns>item が見つかった場合は、並べ替えられたリスト内の item の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、item の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.ICollection.Count" /> のビットごとの補数です。</returns>
      <exception cref="T:System.InvalidOperationException">comparer は <see langword="null" /> であり、既定の比較子は T 型の比較子の実装を見つけることができません。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>指定した比較子を使用して、並べ替えられたリスト内の要素範囲から要素を検索し、その要素の 0 から始まるインデックスを返します。</summary>
      <param name="index">検索範囲の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count">検索する範囲の長さ。</param>
      <param name="item">検索するオブジェクト。 参照型の場合は、値を null にできます。</param>
      <param name="comparer">要素を比較する場合に使用する比較子実装。または、既定の比較子を使用する場合は <see langword="null" />。</param>
      <returns>item が見つかった場合は、並べ替えられたリスト内の item の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、item の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<paramref name="count" /> のビットごとの補数です。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">index が 0 未満または <paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">index および <paramref name="count" /> がリストの有効な範囲を表していません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> は <see langword="null" /> であり、既定の比較子は T 型の比較子の実装を見つけることができません。</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Builder">
      <summary>メモリ割り当てがほとんどまたはまったくない場合でも変化し、変更できないリストのインスタンス上で非常に効率よく生成またはビルドできるリストを表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Add(`0)">
      <summary>変更できないリストに項目を追加します。</summary>
      <param name="item">リストに追加する項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>このリストの末尾に一連の要素を追加します。</summary>
      <param name="items">リストの末尾に追加する要素。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0)">
      <summary>既定の比較子を使用して、<see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 全体で要素を検索し、その要素の 0 から始まるインデックスを返します。</summary>
      <param name="item">検索するオブジェクト。 参照型の場合は、値を null にできます。</param>
      <returns>項目が見つかった場合は、<see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 内の項目の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="item" /> の次に大きい要素のインデックスのビットごとの補数です。</returns>
      <exception cref="T:System.InvalidOperationException">既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> では、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスの実装、または型 T の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>指定した比較子を使用して、<see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 全体で要素を検索し、その要素の 0 から始まるインデックスを返します。</summary>
      <param name="item">検索するオブジェクト。 参照型の場合は、この値を null にできます。</param>
      <param name="comparer">要素を比較する場合に使用する実装。または、既定の比較子を使用する場合は <see langword="null" />。</param>
      <returns>項目が見つかった場合は、<see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 内の項目の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="item" /> の次に大きい要素のインデックスのビットごとの補数です。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> が <see langword="null" /> です。また、既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> では、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスの実装、または型 T の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>指定した比較子を使用して、<see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> の指定された範囲内で要素を検索し、その要素の 0 から始まるインデックスを返します。</summary>
      <param name="index">検索範囲の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count">検索する範囲の長さ。</param>
      <param name="item">検索するオブジェクト。 参照型の場合は、この値を null にできます。</param>
      <param name="comparer">要素を比較する場合に使用する実装。または、既定の比較子を使用する場合は <see langword="null" />。</param>
      <returns>項目が見つかった場合は、<see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 内の項目の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="item" /> の次に大きい要素のインデックスのビットごとの補数です。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。
または
<paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.Generic.List`1" /> において有効な範囲を表していません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> が <see langword="null" /> です。また、既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> では、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスの実装、または型 T の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Clear">
      <summary>変更できないリストからすべての項目を削除します。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Contains(`0)">
      <summary>変更できないリストに特定の値が含まれているかどうかを判定します。</summary>
      <param name="item">リスト内で検索するオブジェクト。</param>
      <returns>リストで項目が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ConvertAll``1(System.Func{`0,``0})">
      <summary>コンバーター関数を使用して、このビルダーによって表されるリストから、新しい変更できないリストを作成します。</summary>
      <param name="converter">コンバーター関数。</param>
      <typeparam name="TOutput">デリゲート コンバーター関数の出力の型。</typeparam>
      <returns>このビルダーによって表されるリストから作成した、新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[])">
      <summary>変更できないリスト全体を互換性のある 1 次元配列にコピーします。コピー操作は、コピー先の配列の先頭から始まります。</summary>
      <param name="array">変更できないリストの要素のコピー先である 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[],System.Int32)">
      <summary>変更できないリスト全体を互換性のある 1 次元配列にコピーします。コピー操作は、コピー先配列の指定したインデックス位置から始まります。</summary>
      <param name="array">変更できないリストの要素のコピー先である 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex">コピーの開始位置となる、配列の 0 から始まるインデックス。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>変更できないリスト全体を互換性のある 1 次元配列にコピーします。コピー操作は、コピー先配列の指定したインデックス位置から始まります。</summary>
      <param name="index">コピー元の変更できないリスト内でコピーを開始する位置を示す、0 から始まるインデックス。</param>
      <param name="array">変更できないリストの要素のコピー先である 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <param name="count">コピーする要素の数。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Count">
      <summary>この変更できないリスト内の要素の数を取得します。</summary>
      <returns>このリスト内の要素の数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Exists(System.Predicate{`0})">
      <summary>変更できないリストに、指定された述語によって定義された条件と一致する要素が含まれているかどうかを判断します。</summary>
      <param name="match">検索する要素の条件を定義するデリゲート。</param>
      <returns>指定された述語によって定義された条件と一致する要素が少なくとも 1 つ、変更できないリストに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Find(System.Predicate{`0})">
      <summary>指定された述語によって定義された条件と一致する要素を検索し、変更できないリスト全体の中で最もインデックス番号の小さい要素を返します。</summary>
      <param name="match">検索する要素の条件を定義するデリゲート。</param>
      <returns>見つかった場合は、指定された述語によって定義された条件と一致する最初の要素。それ以外の場合は、型 <paramref name="T" /> の既定値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindAll(System.Predicate{`0})">
      <summary>指定された述語によって定義された条件と一致するすべての要素を取得します。</summary>
      <param name="match">検索する要素の条件を定義するデリゲート。</param>
      <returns>指定した述語によって定義される条件に一致する要素が見つかった場合は、そのすべての要素を格納する変更できないリスト。それ以外の場合は、空の変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>変更できないリストのうち、指定したインデックスから始まり、指定した要素数が含まれる範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</summary>
      <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count">検索対象の範囲内にある要素の数。</param>
      <param name="match">検索する要素の条件を定義するデリゲート。</param>
      <returns>
        <paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>変更できないリストの指定したインデックスから最後の要素までの範囲内で、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</summary>
      <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="match">検索する要素の条件を定義するデリゲート。</param>
      <returns>
        <paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Predicate{`0})">
      <summary>変更できないリスト全体から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</summary>
      <param name="match">検索する要素の条件を定義するデリゲート。</param>
      <returns>
        <paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLast(System.Predicate{`0})">
      <summary>指定された述語によって定義された条件と一致する要素を、変更できないリスト全体を対象に検索し、最もインデックス番号の大きい要素を返します。</summary>
      <param name="match">検索する要素の条件を定義するデリゲート。</param>
      <returns>見つかった場合は、指定された述語によって定義された条件と一致する最後の要素。それ以外の場合は、型 <paramref name="T" /> の既定値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>変更できないリストのうち、指定したインデックスで終わり、指定した要素数が含まれる範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</summary>
      <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count">検索対象の範囲内にある要素の数。</param>
      <param name="match">検索する要素の条件を定義するデリゲート。</param>
      <returns>
        <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>変更できないリストのうち、先頭の要素から指定したインデックスまでの範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</summary>
      <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="match">検索する要素の条件を定義するデリゲート。</param>
      <returns>
        <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Predicate{`0})">
      <summary>変更できないリスト全体から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</summary>
      <param name="match">検索する要素の条件を定義するデリゲート。</param>
      <returns>
        <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ForEach(System.Action{`0})">
      <summary>リストの各要素に対して、指定された処理を実行します。</summary>
      <param name="action">リストの各要素に対して実行するデリゲート。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>リストの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetRange(System.Int32,System.Int32)">
      <summary>コピー元の変更できないリスト内の、ある範囲の要素の簡易コピーを作成します。</summary>
      <param name="index">範囲の開始位置を示す、0 から始まるインデックス番号。</param>
      <param name="count">範囲内の要素の数。</param>
      <returns>コピー元の変更できないリスト内の、ある範囲の要素の簡易コピー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0)">
      <summary>変更できないリストの要素の範囲内で、指定したオブジェクトを検索し、最初に見つかったオブジェクトの 0 から始まるインデックスを返します。</summary>
      <param name="item">変更できないリスト内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns>見つかった場合は、変更できないリストの要素範囲内で最初に見つかった <paramref name="item" /> の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32)">
      <summary>変更できないリストのうち、指定したインデックスから最後の要素までの要素範囲の中から、指定したオブジェクトを検索し、最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="item">変更できないリスト内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <param name="index">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 (ゼロ) は有効です。</param>
      <returns>見つかった場合は、変更できないリストにおいて、<paramref name="index" /> から最後の要素までの要素範囲内で最初に見つかった項目の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary>変更できないリストのうち、指定したインデックスから始まり、指定した要素数が含まれる範囲内で、指定したオブジェクトを検索し、最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="item">変更できないリスト内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <param name="index">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 (ゼロ) は有効です。</param>
      <param name="count">検索対象の範囲内にある要素の数。</param>
      <returns>見つかった場合は、変更できないリストにおいて、<paramref name="index" /> から始まって <paramref name="count" /> 個の要素が含まれている要素範囲内で最初に見つかった項目の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>指定したインデックスから始まり、指定した数の要素が含まれる <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> の要素範囲内で、指定したオブジェクトを検索し、最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="item">変更できないリスト内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <param name="index">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 (ゼロ) は有効です。</param>
      <param name="count">検索する要素数。</param>
      <param name="equalityComparer">要素が等しいかどうかを比較するために使用する、値の比較子。</param>
      <returns>見つかった場合は、変更できないリストにおいて、<paramref name="index" /> から始まって <paramref name="count" /> 個の要素が含まれる要素範囲内で最初に見つかった項目の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Insert(System.Int32,`0)">
      <summary>変更できないリスト内の指定したインデックス位置に項目を挿入します。</summary>
      <param name="index">
        <paramref name="item" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="item">変更できないリストに挿入するオブジェクト。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>コレクションの要素を、変更できないリスト内の指定したインデックス位置に挿入します。</summary>
      <param name="index">新しい要素が挿入される位置の 0 から始まるインデックス。</param>
      <param name="items">変更できないリストに挿入する要素を持つコレクション。 コレクション自体を <see langword="null" /> にすることはできませんが、<c>T</c> 型が参照型の場合、コレクションに格納する要素は null であってもかまいません。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Item(System.Int32)">
      <summary>リスト内の指定されたインデックスの値を取得または設定します。</summary>
      <param name="index">取得または設定する項目のインデックス。</param>
      <returns>指定したインデックス位置にある値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ItemRef(System.Int32)">
      <summary>リストに指定した <paramref name="index" /> の値への読み取り専用の参照を取得します。</summary>
      <param name="index">目的の要素のインデックス。</param>
      <returns>指定した <paramref name="index" /> にある値への読み取り専用の参照。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0)">
      <summary>変更できないリスト全体から、指定したオブジェクトを検索し、最後に見つかったオブジェクトの 0 から始まるインデックスを返します。</summary>
      <param name="item">変更できないリスト内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns>見つかった場合は、変更できないリスト全体で最後に見つかった <paramref name="item" /> の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary>変更できないリストのうち、最初の要素から指定したインデックスまでの要素範囲の中で、指定したオブジェクトを検索し、最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="item">変更できないリスト内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <returns>見つかった場合は、変更できないリストにおいて、最初の要素から <paramref name="index" /> までの要素範囲内で最後に見つかった <paramref name="item" /> の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>変更できないリストのうち、指定した要素数が含まれ、指定したインデックスの位置で終了する要素範囲の中で、指定したオブジェクトを検索し、最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="item">変更できないリスト内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count">検索対象の範囲内にある要素の数。</param>
      <returns>見つかった場合は、変更できないリストにおいて、<paramref name="count" /> 個の要素が含まれていて <paramref name="index" /> で終了する要素範囲内で最後に見つかった <paramref name="item" /> の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>変更できないリストのうち、指定した要素数が含まれ、指定したインデックスの位置で終了する要素範囲の中で、指定したオブジェクトを検索し、最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="item">変更できないリスト内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 (ゼロ) は有効です。</param>
      <param name="count">検索する要素数。</param>
      <param name="equalityComparer">要素が等しいかどうかを比較するために使用する、値の比較子。</param>
      <returns>見つかった場合は、変更できないリストにおいて、<paramref name="index" /> から始まって <paramref name="count" /> 個の要素が含まれる要素範囲内で最初に見つかった項目の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Remove(`0)">
      <summary>特定のオブジェクトの最初に出現したものを、変更できないリストから削除します。</summary>
      <param name="item">リストから削除するオブジェクト。</param>
      <returns>項目がリストから正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドは、項目がリストに見つからない場合にも <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAll(System.Predicate{`0})">
      <summary>指定した述語によって定義される条件に一致するすべての要素を削除します。</summary>
      <param name="match">削除する要素の条件を定義するデリゲート。</param>
      <returns>変更できないリストから削除される要素の数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAt(System.Int32)">
      <summary>変更できないリストの指定したインデックス位置にある項目を削除します。</summary>
      <param name="index">リストから削除する項目の 0 から始まるインデックス。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse">
      <summary>変更できないリスト全体の要素の順序を反転させます。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse(System.Int32,System.Int32)">
      <summary>変更できないリストの指定した範囲内の要素の順序を反転させます。</summary>
      <param name="index">反転させる範囲の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count">反転させる範囲内にある要素の数。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort">
      <summary>既定の比較子を使用して、変更できないリスト全体の要素を並べ替えます。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>指定された比較子を使用して、変更できないリスト全体の要素を並べ替えます。</summary>
      <param name="comparer">要素を比較する場合に使用する実装。または、既定の比較子 (<see cref="P:System.Collections.Generic.Comparer`1.Default" />) を使用する場合は <see langword="null" />。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Comparison{`0})">
      <summary>指定された比較オブジェクトを使用して、変更できないリスト全体の要素を並べ替えます。</summary>
      <param name="comparison">要素を比較する場合に使用するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>指定した比較子を使用して、変更できないリストで範囲内の要素を並べ替えます。</summary>
      <param name="index">並べ替える範囲の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count">並べ替える範囲の長さ。</param>
      <param name="comparer">要素を比較する場合に使用する実装。または、既定の比較子 (<see cref="P:System.Collections.Generic.Comparer`1.Default" />) を使用する場合は <see langword="null" />。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>このインスタンスが読み取り専用かどうかを示す値が取得されます。</summary>
      <returns>常に<c>false</c>です。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>特定の配列インデックスを開始位置として、配列にリストの要素をコピーします。</summary>
      <param name="array">リストから要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Add(System.Object)">
      <summary>リストに項目を追加します。</summary>
      <param name="value">リストに追加するオブジェクト。</param>
      <returns>新しい要素が挿入された位置、または項目がコレクションに挿入されなかったことを示す -1。</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Clear">
      <summary>リストからすべての項目を削除します。</summary>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Contains(System.Object)">
      <summary>リストに特定の値が含まれているかどうかを確認します。</summary>
      <param name="value">リスト内で検索するオブジェクト。</param>
      <returns>リストで <see cref="T:System.Object" /> が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IndexOf(System.Object)">
      <summary>リスト内の特定の項目のインデックスを確認します。</summary>
      <param name="value">リスト内で検索するオブジェクト。</param>
      <returns>リストに存在する場合は <paramref name="value" /> のインデックス。それ以外の場合は -1。</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>リスト内の指定されたインデックス位置に項目を挿入します。</summary>
      <param name="index">
        <paramref name="value" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="value">リストに挿入するオブジェクト。</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IList" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Item(System.Int32)">
      <summary>指定したインデックス位置にある <see cref="T:System.Object" /> を取得または設定します。</summary>
      <param name="index">インデックス。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Remove(System.Object)">
      <summary>リスト内で最初に見つかった特定のオブジェクトを削除します。</summary>
      <param name="value">リストから削除するオブジェクト。</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ToImmutable">
      <summary>このインスタンスの内容に基づいて、変更できないリストを作成します。</summary>
      <returns>変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.TrueForAll(System.Predicate{`0})">
      <summary>変更できないリスト内のすべての要素が、指定された述語によって定義された条件と一致するかどうかを調べます。</summary>
      <param name="match">要素の条件を定義するデリゲート。</param>
      <returns>変更できないリスト内のすべての要素が、指定した述語によって定義される条件に一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 リストに要素がない場合、戻り値は <see langword="true" /> です。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Clear">
      <summary>変更できないリストからすべての要素を削除します。</summary>
      <returns>このインスタンスと同じ並べ替えセマンティクスまたは順序なしのセマンティクスを保持する空のリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Contains(`0)">
      <summary>指定した値がこの変更できないリストに格納されているかどうかを判断します。</summary>
      <param name="value">検索する値。</param>
      <returns>指定した値がリストに含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})">
      <summary>現在の変更できないリストの要素を別の型に変換し、変換された要素が格納されたリストを返します。</summary>
      <param name="converter">各要素の型を変換するデリゲート。</param>
      <typeparam name="TOutput">変換後の配列要素の型。</typeparam>
      <returns>現在の <see cref="T:System.Collections.Immutable.ImmutableList`1" /> から変換された要素を含むターゲットの型のリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])">
      <summary>変更できないリスト全体を互換性のある 1 次元配列にコピーします。コピー操作は、コピー先の配列の先頭から始まります。</summary>
      <param name="array">変更できないリストの要素のコピー先である 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[],System.Int32)">
      <summary>変更できないリスト全体を互換性のある 1 次元配列にコピーします。コピー操作は、コピー先配列の指定したインデックス位置から始まります。</summary>
      <param name="array">変更できないリストの要素のコピー先である 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>要素の範囲を、変更できないリストから互換性のある 1 次元配列にコピーします。コピー操作は、コピー先の配列の指定したインデックス位置から始まります。</summary>
      <param name="index">コピー元の変更できないリスト内でコピーを開始する位置を示す、0 から始まるインデックス。</param>
      <param name="array">変更できないリストの要素のコピー先である 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex">コピーの開始位置となる、配列の 0 から始まるインデックス。</param>
      <param name="count">コピーする要素の数。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Count">
      <summary>リストに格納されている要素の数を取得します。</summary>
      <returns>リストの要素数。</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableList`1.Empty">
      <summary>既定の並べ替え比較子を使用する空のセットを取得します。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Enumerator">
      <summary>バイナリ ツリーの内容を列挙します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>列挙子の現在位置の要素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableList`1.Enumerator" /> クラスの現在のインスタンスによって使用されているリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.MoveNext">
      <summary>列挙体を、変更できないリストの次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がリストの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Reset">
      <summary>列挙子を初期位置、つまり変更できないリストの最初の要素の前に設定します。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>現在の要素。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})">
      <summary>変更できないリストに、指定された述語によって定義された条件と一致する要素が含まれているかどうかを判断します。</summary>
      <param name="match">検索する要素の条件を定義するデリゲート。</param>
      <returns>指定された述語によって定義された条件と一致する要素が少なくとも 1 つ、変更できないリストに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})">
      <summary>指定された述語によって定義された条件と一致する要素を検索し、変更できないリスト全体の中で最もインデックス番号の小さい要素を返します。</summary>
      <param name="match">検索する要素の条件を定義するデリゲート。</param>
      <returns>見つかった場合は、指定された述語によって定義された条件と一致する最初の要素。それ以外の場合は、型 <paramref name="T" /> の既定値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})">
      <summary>指定された述語によって定義された条件と一致するすべての要素を取得します。</summary>
      <param name="match">検索する要素の条件を定義するデリゲート。</param>
      <returns>指定した述語によって定義される条件に一致する要素が見つかった場合は、そのすべての要素を格納する変更できないリスト。それ以外の場合は、空の変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>変更できないリストのうち、指定したインデックスから始まり、指定した要素数が含まれる範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</summary>
      <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count">検索対象の範囲内にある要素の数。</param>
      <param name="match">検索する要素の条件を定義するデリゲート。</param>
      <returns>match で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>変更できないリストの指定したインデックスから最後の要素までの範囲内で、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</summary>
      <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="match">検索する要素の条件を定義するデリゲート。</param>
      <returns>match で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})">
      <summary>変更できないリスト全体から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</summary>
      <param name="match">検索する要素の条件を定義するデリゲート。</param>
      <returns>match で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})">
      <summary>指定された述語によって定義された条件と一致する要素を、変更できないリスト全体を対象に検索し、最もインデックス番号の大きい要素を返します。</summary>
      <param name="match">検索する要素の条件を定義するデリゲート。</param>
      <returns>見つかった場合は、指定された述語によって定義された条件と一致する最後の要素。それ以外の場合は、型 <paramref name="T" /> の既定値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>変更できないリストのうち、指定したインデックスで終わり、指定した要素数が含まれる範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</summary>
      <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count">検索対象の範囲内にある要素の数。</param>
      <param name="match">検索する要素の条件を定義するデリゲート。</param>
      <returns>
        <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>変更できないリストのうち、先頭の要素から指定したインデックスまでの範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</summary>
      <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="match">検索する要素の条件を定義するデリゲート。</param>
      <returns>
        <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})">
      <summary>変更できないリスト全体から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</summary>
      <param name="match">検索する要素の条件を定義するデリゲート。</param>
      <returns>
        <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})">
      <summary>変更できないリスト内の各要素に対して、指定された処理を実行します。</summary>
      <param name="action">変更できないリストの各要素に対して実行するデリゲート。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetEnumerator">
      <summary>変更できないリストを反復処理する列挙子を返します。</summary>
      <returns>変更できないリストの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)">
      <summary>コピー元の変更できないリスト内の、ある範囲の要素の簡易コピーを作成します。</summary>
      <param name="index">範囲の開始位置を示す、0 から始まるインデックス番号。</param>
      <param name="count">範囲内の要素の数。</param>
      <returns>コピー元の変更できないリスト内の、ある範囲の要素の簡易コピー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0)">
      <summary>変更できないリスト全体から、指定したオブジェクトを検索し、最初に見つかったオブジェクトの 0 から始まるインデックスを返します。</summary>
      <param name="value">変更できないリスト内で検索するオブジェクト。 参照型の場合は、値を <c>null</c> にできます。</param>
      <returns>変更できないリスト全体で <paramref name="value" /> を検索し、見つかった場合は、インデックス番号の最も小さい要素の 0 から始まるインデックス番号、それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>リストのうち、指定したインデックスから始まり、指定した要素数が含まれる要素範囲内で、指定したオブジェクトを検索し、最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="item">リスト内で検索するオブジェクト。参照型の場合は null の値を使用できます。</param>
      <param name="index">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 (ゼロ) は有効です。</param>
      <param name="count">検索対象の範囲内にある要素の数。</param>
      <param name="equalityComparer">検索に使用する等値比較子。</param>
      <returns>index から始まって count 個の要素を格納するリスト内の要素の範囲内で item が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)">
      <summary>指定したオブジェクトを、変更できないリストの指定したインデックス位置に挿入します。</summary>
      <param name="index">オブジェクトを挿入する位置を示す 0 から始まるインデックス。</param>
      <param name="item">挿入するオブジェクト。</param>
      <returns>オブジェクトを挿入した後の新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>コレクションの要素を、変更できないリスト内の指定したインデックス位置に挿入します。</summary>
      <param name="index">要素を挿入する位置を示す 0 から始まるインデックス。</param>
      <param name="items">挿入する要素を含むコレクション。</param>
      <returns>要素を挿入した後の新しい変更できないリスト。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.IsEmpty">
      <summary>このリストが空かどうかを示す値を取得します。</summary>
      <returns>リストが空である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Item(System.Int32)">
      <summary>リストの指定したインデックス位置にある要素を取得します。</summary>
      <param name="index">取得する要素のインデックス。</param>
      <returns>指定したインデックス位置にある要素。</returns>
      <exception cref="T:System.IndexOutOfRangeException">取得操作で、<paramref name="index" /> が負の値であるか、<see cref="P:System.Collections.Immutable.ImmutableList`1.Count" /> より小さくありません。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ItemRef(System.Int32)">
      <summary>指定した <paramref name="index" /> にあるセットの要素への読み取り専用の参照を取得します。</summary>
      <param name="index">取得するセット内の要素の、0 から始まるインデックス番号。</param>
      <returns>指定した位置にある要素への読み取り専用の参照。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> が負の値であるか、<see cref="P:System.Collections.Immutable.ImmutableList`1.Count" /> より小さくありません。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>リストのうち、指定した要素数が含まれ、指定したインデックスの位置で終了する要素範囲の中で、指定したオブジェクトを検索し、最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="item">リスト内で検索するオブジェクト。 参照型の場合は、値を null にできます。</param>
      <param name="index">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count">検索対象の範囲内にある要素の数。</param>
      <param name="equalityComparer">検索に使用する等値比較子。</param>
      <returns>count 個の要素を格納し、index の位置で終了するリスト内の要素の範囲内で item が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0)">
      <summary>この変更できないリストから、指定したオブジェクトのうち最初に出現したものを削除します。</summary>
      <param name="value">削除するオブジェクト。</param>
      <returns>オブジェクトが削除された新しいリスト。または、指定したオブジェクトがこのリストに存在しない場合は、このリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>この変更できないリストから、指定した値と一致するオブジェクトのうち最初に出現したものを削除します。</summary>
      <param name="value">リストから削除する要素の値。</param>
      <param name="equalityComparer">検索に使用する等値比較子。</param>
      <returns>オブジェクトが削除された新しいリスト。または、指定したオブジェクトがこのリストに存在しない場合は、このリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary>指定した述語によって定義される条件に一致するすべての要素を削除します。</summary>
      <param name="match">削除する要素の条件を定義するデリゲート。</param>
      <returns>要素が削除された新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)">
      <summary>指定したインデックス位置にある要素を削除します。</summary>
      <param name="index">削除する要素の 0 から始まるインデックス。</param>
      <returns>要素が削除された新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>この変更できないリストから要素の範囲を削除します。</summary>
      <param name="items">このリストに一致するものが見つかった場合に要素が削除されるコレクション。</param>
      <returns>要素が削除された新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>指定した値をこのリストから削除します。</summary>
      <param name="items">このリストに一致するものが見つかった場合に削除する項目。</param>
      <param name="equalityComparer">検索に使用する等値比較子。</param>
      <returns>要素が削除された新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary>指定したインデックスから開始し、指定した数の要素を含む要素の範囲をこの変更できないリストから削除します。</summary>
      <param name="index">削除の開始インデックス。</param>
      <param name="count">削除する要素の数を指定します。</param>
      <returns>要素が削除された新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)">
      <summary>変更できないリスト内の指定された要素を新しい要素に置換します。</summary>
      <param name="oldValue">置換する要素。</param>
      <param name="newValue">
        <paramref name="oldValue" /> を置換する要素。</param>
      <returns>要素が置換された新しいリスト (古い要素と同じ場合でも置換されます)。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> は変更できないリストに存在しません。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>変更できないリスト内の指定された要素を新しい要素に置換します。</summary>
      <param name="oldValue">リスト内の置換する要素。</param>
      <param name="newValue">
        <paramref name="oldValue" /> を置換する要素。</param>
      <param name="equalityComparer">等しいかどうかを確認するために使用する比較子。</param>
      <returns>オブジェクトが置換された新しいリスト。指定したオブジェクトがこのリストに存在しない場合はこのリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse">
      <summary>変更できないリスト全体の要素の順序を反転させます。</summary>
      <returns>逆順のリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)">
      <summary>変更できないリストの指定した範囲内の要素の順序を反転させます。</summary>
      <param name="index">反転させる範囲の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count">反転させる範囲内にある要素の数。</param>
      <returns>逆順のリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)">
      <summary>変更できないリスト内の指定された位置にある要素を指定した要素に置換します。</summary>
      <param name="index">リスト内の置換する要素の位置。</param>
      <param name="value">古い要素を置換する要素。</param>
      <returns>要素が置換された新しいリスト (その位置にある古い要素と同じ場合でも置換されます)。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort">
      <summary>既定の比較子を使用して、変更できないリスト全体の要素を並べ替えます。</summary>
      <returns>並べ替えられたリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>指定した比較子を使用して、変更できないリスト全体の要素を並べ替えます。</summary>
      <param name="comparer">要素を比較する場合に使用する実装。または、既定の比較子 (<see cref="P:System.Collections.Generic.Comparer`1.Default" />) を使用する場合は <see langword="null" />。</param>
      <returns>並べ替えられたリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})">
      <summary>指定した比較子を使用して、変更できないリスト全体の要素を並べ替えます。</summary>
      <param name="comparison">要素を比較する場合に使用するデリゲート。</param>
      <returns>並べ替えられたリスト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>指定した比較子を使用して、変更できないリスト全体のある範囲の要素を並べ替えます。</summary>
      <param name="index">並べ替える範囲の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count">並べ替える範囲の長さ。</param>
      <param name="comparer">要素を比較する場合に使用する実装。または、既定の比較子 (<see cref="P:System.Collections.Generic.Comparer`1.Default" />) を使用する場合は <see langword="null" />。</param>
      <returns>並べ替えられたリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>指定された項目を、変更できないリストに追加します。</summary>
      <param name="item">追加する項目。</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>変更できないリストからすべての項目を削除します。</summary>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>特定のオブジェクトの最初に出現したものを、変更できないリストから削除します。</summary>
      <param name="item">削除するオブジェクト。</param>
      <returns>
        <paramref name="item" /> がリストから正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドは、<paramref name="item" /> が元のリストに見つからない場合にも <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>変更できないリストを反復処理する列挙子を返します。</summary>
      <returns>リストの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>オブジェクトを、変更できないリストの指定したインデックス位置に挿入します。</summary>
      <param name="index">
        <paramref name="item" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="item">挿入するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>指定したインデックス位置にある値を取得または設定します。</summary>
      <param name="index" />
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> が負の場合、または <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" /> より小さくない場合に、ゲッターからスローされます。</exception>
      <exception cref="T:System.NotSupportedException">セッターから常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>指定したインデックス位置にある値を削除します。</summary>
      <param name="index">削除する項目の 0 から始まるインデックス。</param>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>変更できないリスト全体を互換性のある 1 次元配列にコピーします。コピー操作は、配列の指定したインデックス位置から始まります。</summary>
      <param name="array">変更できないリストの要素のコピー先である 1 次元配列。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> インターフェイスをご覧ください。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#SyncRoot">
      <summary>以下を参照してください。<see cref="T:System.Collections.ICollection" /></summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>変更できないリストを反復処理する列挙子を返します。</summary>
      <returns>リストの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Add(System.Object)">
      <summary>変更できないリストに項目を追加します。</summary>
      <param name="value">リストに追加するオブジェクト。</param>
      <returns>新しい要素が挿入された位置。または、項目がリストに挿入されなかった場合は -1。</returns>
      <exception cref="T:System.NotSupportedException">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Clear">
      <summary>変更できないリストからすべての項目を削除します。</summary>
      <exception cref="T:System.NotSupportedException">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Contains(System.Object)">
      <summary>変更できないリストに特定の値が含まれているかどうかを判定します。</summary>
      <param name="value">リスト内で検索するオブジェクト。</param>
      <returns>オブジェクトがリスト内で見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>変更できないリスト内の特定の項目のインデックスを確認します。</summary>
      <param name="value">リスト内で検索するオブジェクト。</param>
      <returns>リストに存在する場合は <paramref name="value" /> のインデックス。それ以外の場合は -1。</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>変更できないリスト内の指定したインデックス位置に項目を挿入します。</summary>
      <param name="index">
        <paramref name="value" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="value">リストに挿入するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">常にスローされます。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IList" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Item(System.Int32)">
      <summary>指定したインデックス位置にある <see cref="T:System.Object" /> を取得または設定します。</summary>
      <param name="index">インデックス。</param>
      <returns>指定したインデックス位置にある値。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> が負の場合、または <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" /> より小さくない場合に、ゲッターからスローされます。</exception>
      <exception cref="T:System.NotSupportedException">セッターから常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Remove(System.Object)">
      <summary>特定のオブジェクトの最初に出現したものを、変更できないリストから削除します。</summary>
      <param name="value">リストから削除するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>変更できないリストの指定したインデックス位置にある項目を削除します。</summary>
      <param name="index">削除する項目の 0 から始まるインデックス。</param>
      <exception cref="T:System.NotSupportedException">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary>指定した値をこの変更できないリストに追加します。</summary>
      <param name="value">加算する値。</param>
      <returns>要素が追加された新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>指定した値をこの変更できないリストに追加します。</summary>
      <param name="items">追加する値。</param>
      <returns>要素が追加された新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary>並べ替えと順序付けのセマンティクスがこのインスタンスと同じ空のリストを取得します。</summary>
      <returns>並べ替えと順序付けのセマンティクスがこのインスタンスと同じ空のリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary>指定した要素を、変更できないリストの指定したインデックス位置に挿入します。</summary>
      <param name="index">値を挿入する位置を示すインデックス。</param>
      <param name="item">挿入する要素。</param>
      <returns>指定した要素が含まれている新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>指定した要素を、変更できないリストの指定したインデックス位置に挿入します。</summary>
      <param name="index">要素を挿入する位置を示すインデックス。</param>
      <param name="items">挿入する要素。</param>
      <returns>指定した要素が含まれている新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>指定した値を持つ要素をリストから削除します。</summary>
      <param name="value">リストから削除する要素の値。</param>
      <param name="equalityComparer">要素が等しいかどうかを比較するために使用する比較子。</param>
      <returns>指定した要素が削除された新しい <see cref="T:System.Collections.Immutable.ImmutableList`1" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary>指定した述語によって定義される条件に一致するすべての要素を削除します。</summary>
      <param name="match">削除する要素の条件を定義するデリゲート。</param>
      <returns>要素が削除された新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary>変更できないリストの指定したインデックス位置にある要素を削除します。</summary>
      <param name="index">削除する要素のインデックス。</param>
      <returns>要素が削除された新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>この変更できないリストから、指定した項目に一致する要素の範囲を削除します。</summary>
      <param name="items">見つかった場合にリストから削除する項目の範囲。</param>
      <param name="equalityComparer">要素の比較に使用する等値比較子。</param>
      <returns>項目が削除された変更できないリスト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> または <paramref name="equalityComparer" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary>指定された位置にある指定された数の要素をこのリストから削除します。</summary>
      <param name="index">削除する要素の範囲の開始インデックス。</param>
      <param name="count">削除する要素の数を指定します。</param>
      <returns>要素が削除された新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>リスト内の要素を、指定した要素に置換します。</summary>
      <param name="oldValue">置換する要素。</param>
      <param name="newValue">古い要素を置換する要素。</param>
      <param name="equalityComparer">検索に使用する等値比較子。</param>
      <returns>新しいリスト。</returns>
      <exception cref="T:System.ArgumentException">リスト内に古い値が存在しない場合にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary>リスト内の指定された位置にある要素を、指定した要素に置換します。</summary>
      <param name="index">リスト内の置換する要素の位置。</param>
      <param name="value">古い要素を置換する要素。</param>
      <returns>新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ToBuilder">
      <summary>このリストと同じ内容で、標準の変更可能なインターフェイスを使用して複数の操作で効率的に変更できるリストを作成します。</summary>
      <returns>このリストと同じ内容で作成されたリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})">
      <summary>変更できないリスト内のすべての要素が、指定された述語によって定義された条件と一致するかどうかを調べます。</summary>
      <param name="match">要素の条件を定義するデリゲート。</param>
      <returns>変更できないリスト内のすべての要素が、指定した述語によって定義される条件に一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 リストに要素がない場合、戻り値は <see langword="true" /> です。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableQueue`1" /> クラスのインスタンスの一連の初期化メソッドを提供します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1">
      <summary>空の変更できないキューを作成します。</summary>
      <typeparam name="T">変更できないキューに格納される項目の型。</typeparam>
      <returns>空の変更できないキュー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0)">
      <summary>指定された項目を含む新しい変更できないキューを作成します。</summary>
      <param name="item">キューに事前に設定する項目。</param>
      <typeparam name="T">変更できないキュー内の項目の型。</typeparam>
      <returns>指定された項目を含む新しい変更できないキュー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0[])">
      <summary>指定された項目の配列を含む新しい変更できないキューを作成します。</summary>
      <param name="items">キューに事前に設定する項目が含まれている配列。</param>
      <typeparam name="T">変更できないキュー内の項目の型。</typeparam>
      <returns>指定された項目を含む新しい変更できないキュー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>指定された項目を含む新しい変更できないキューを作成します。</summary>
      <param name="items">変更不可が適用される前にキューに追加する項目。</param>
      <typeparam name="T">キュー内の要素の型。</typeparam>
      <returns>指定した項目が格納されている変更できないキュー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Dequeue``1(System.Collections.Immutable.IImmutableQueue{``0},``0@)">
      <summary>変更できないキューの先頭にある項目を削除し、新しいキューを返します。</summary>
      <param name="queue">項目を削除するキュー。</param>
      <param name="value">このメソッドから制御が戻った時点で、キューの先頭の項目が格納されます。</param>
      <typeparam name="T">変更できないキュー内の要素の型。</typeparam>
      <returns>項目が削除された新しいキュー。</returns>
      <exception cref="T:System.InvalidOperationException">スタックが空です。</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1">
      <summary>変更できないキューを表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T">キュー内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Clear">
      <summary>変更できないキューからすべてのオブジェクトを削除します。</summary>
      <returns>空の変更できないキュー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue">
      <summary>変更できないキューの先頭にある要素を削除し、新しいキューを返します。</summary>
      <returns>新しい変更できないキュー。<c>null</c> になることはありません。</returns>
      <exception cref="T:System.InvalidOperationException">キューが空です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue(`0@)">
      <summary>変更できないキューの先頭にある項目を削除し、新しいキューを返します。</summary>
      <param name="value">このメソッドから制御が戻った時点で、キューの先頭にある要素が格納されます。</param>
      <returns>先頭の要素が削除された、新しい変更できないキュー。</returns>
      <exception cref="T:System.InvalidOperationException">キューが空です。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Empty">
      <summary>空の変更できないキューを取得します。</summary>
      <returns>空の変更できないキュー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enqueue(`0)">
      <summary>変更できないキューの末尾に要素を追加し、新しいキューを返します。</summary>
      <param name="value">追加する要素。</param>
      <returns>新しい変更できないキュー。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1.Enumerator">
      <summary>メモリを割り当てずに変更できないキューの内容を列挙します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Enumerator.Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>列挙子の現在位置の要素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enumerator.MoveNext">
      <summary>列挙子を、変更できないキューの次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がキューの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.GetEnumerator">
      <summary>変更できないキューを反復処理する列挙子を返します。</summary>
      <returns>キューの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.IsEmpty">
      <summary>この変更できないキューが空かどうかを示す値を取得します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <returns>このキューが空の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Peek">
      <summary>変更できないキューの先頭にある要素を削除せずに返します。</summary>
      <returns>キューの先頭にある要素。</returns>
      <exception cref="T:System.InvalidOperationException">キューが空です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.PeekRef">
      <summary>キューの先頭にある要素への読み取り専用の参照を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">キューが空です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Clear">
      <summary>変更できないキューからすべての要素を削除します。</summary>
      <returns>空の変更できないキュー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Dequeue">
      <summary>変更できないキューの先頭にある要素を削除し、新しいキューを返します。</summary>
      <returns>新しい変更できないキュー。<c>null</c> になることはありません。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Enqueue(`0)">
      <summary>変更できないキューの末尾に要素を追加し、新しいキューを返します。</summary>
      <param name="value">追加する要素。</param>
      <returns>新しい変更できないキュー。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2" /> クラスのインスタンスの一連の初期化メソッドを提供します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2">
      <summary>空の変更できない並べ替えられたディクショナリを作成します。</summary>
      <typeparam name="TKey">ディクショナリによって格納されるキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリによって格納される値の型。</typeparam>
      <returns>空の変更できない並べ替えられたディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0})">
      <summary>指定されたキーの比較子を使用する、空の変更できない並べ替えられたディクショナリを作成します。</summary>
      <param name="keyComparer">ディクショナリ内のキーが等しいかどうかを判定するために使用する実装。</param>
      <typeparam name="TKey">ディクショナリによって格納されるキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリによって格納される値の型。</typeparam>
      <returns>空の変更できない並べ替えられたディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>指定されたキーと値の比較子を使用する、空の変更できない並べ替えられたディクショナリを作成します。</summary>
      <param name="keyComparer">ディクショナリ内のキーが等しいかどうかを判定するために使用する実装。</param>
      <param name="valueComparer">ディクショナリ内の値が等しいかどうかを判定するために使用する実装。</param>
      <typeparam name="TKey">ディクショナリによって格納されるキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリによって格納される値の型。</typeparam>
      <returns>空の変更できない並べ替えられたディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2">
      <summary>新しい変更できない並べ替えられたディクショナリ ビルダーを作成します。</summary>
      <typeparam name="TKey">ディクショナリによって格納されるキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリによって格納される値の型。</typeparam>
      <returns>変更できないコレクション ビルダー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0})">
      <summary>新しい変更できない並べ替えられたディクショナリ ビルダーを作成します。</summary>
      <param name="keyComparer">キーの比較子。</param>
      <typeparam name="TKey">ディクショナリによって格納されるキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリによって格納される値の型。</typeparam>
      <returns>変更できないコレクション ビルダー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>新しい変更できない並べ替えられたディクショナリ ビルダーを作成します。</summary>
      <param name="keyComparer">キーの比較子。</param>
      <param name="valueComparer">値の比較子。</param>
      <typeparam name="TKey">ディクショナリによって格納されるキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリによって格納される値の型。</typeparam>
      <returns>変更できないコレクション ビルダー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>指定されたキーの比較子を使用して、指定された範囲の項目から新しい変更できない並べ替えられたディクショナリを作成します。</summary>
      <param name="keyComparer">キーの等価性と並べ替えの評価に使用する比較子の実装。</param>
      <param name="items">並べ替えられたディクショナリに追加する項目。</param>
      <typeparam name="TKey">ディクショナリに格納されているキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリに格納されている値の型。</typeparam>
      <returns>指定された項目を格納し、指定されたキーの比較子を使用する、新しい変更できない並べ替えられたディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>指定されたキーの比較子と値の比較子を使用して、指定された範囲の項目から新しい変更できない並べ替えられたディクショナリを作成します。</summary>
      <param name="keyComparer">キーの等価性と並べ替えの比較に使用する比較子の実装。</param>
      <param name="valueComparer">値の等価性と並べ替えの比較に使用する比較子の実装。</param>
      <param name="items">変更できなくなる前に、並べ替えられたディクショナリに追加する項目。</param>
      <typeparam name="TKey">ディクショナリに格納されているキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリに格納されている値の型。</typeparam>
      <returns>指定された項目を格納し、指定された比較子を使用する、変更できない並べ替えられたディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>指定された項目を格納し、既定の比較子を使用する、変更できない並べ替えられたディクショナリを作成します。</summary>
      <param name="items">変更できなくなる前に、並べ替えられたディクショナリに追加する項目。</param>
      <typeparam name="TKey">ディクショナリに格納されているキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリに格納されている値の型。</typeparam>
      <returns>指定された項目を格納する、変更できない並べ替えられたディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>キーと値のペアのシーケンスを列挙し、その内容の変更できない並べ替えられたディクショナリを生成します。</summary>
      <param name="source">列挙するキーと値のペアのシーケンス。</param>
      <typeparam name="TKey">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリ内の値の型。</typeparam>
      <returns>指定されたシーケンス内のキーと値のペアを格納する、変更できない並べ替えられたディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})">
      <summary>キーと値のペアのシーケンスを列挙し、指定されたキーの比較子を使用してその内容の変更できないディクショナリを生成します。</summary>
      <param name="source">列挙するキーと値のペアのシーケンス。</param>
      <param name="keyComparer">変更できないディクショナリの作成時に使用するキーの比較子。</param>
      <typeparam name="TKey">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリ内の値の型。</typeparam>
      <returns>指定されたシーケンス内のキーと値のペアを格納する、変更できない並べ替えられたディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>キーと値のペアのシーケンスを列挙し、指定されたキーの比較子と値の比較子を使用してその内容の変更できない並べ替えられたディクショナリを生成します。</summary>
      <param name="source">列挙するキーと値のペアのシーケンス。</param>
      <param name="keyComparer">変更できないディクショナリの作成時に使用するキーの比較子。</param>
      <param name="valueComparer">変更できないディクショナリに使用する値の比較子。</param>
      <typeparam name="TKey">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリ内の値の型。</typeparam>
      <returns>指定されたシーケンス内のキーと値のペアを格納する、変更できない並べ替えられたディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Immutable.ImmutableSortedDictionary{``0,``1}.Builder)">
      <summary>ビルダーのディクショナリの現在の内容から、変更できない並べ替えられたディクショナリを作成します。</summary>
      <param name="builder">変更できない並べ替えられたディクショナリを作成するためのビルダー。</param>
      <typeparam name="TKey">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリ内の値の型。</typeparam>
      <returns>ビルダーのディクショナリの現在の内容を含む、変更できない並べ替えられたディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>シーケンスを列挙して変換し、その内容の変更できない並べ替えられたディクショナリを生成します。</summary>
      <param name="source">ディクショナリを生成するために列挙するシーケンス。</param>
      <param name="keySelector">各シーケンス要素からディクショナリのキーを生成する関数。</param>
      <param name="elementSelector">各シーケンス要素からディクショナリの値を生成する関数。</param>
      <typeparam name="TSource">シーケンス内の要素の型。</typeparam>
      <typeparam name="TKey">結果として生成されたディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue">結果として生成されたディクショナリ内の値の型。</typeparam>
      <returns>指定されたシーケンス内の項目を格納する、変更できない並べ替えられたディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})">
      <summary>シーケンスを列挙して変換し、指定されたキーの比較子を使用してその内容の変更できない並べ替えられたディクショナリを生成します。</summary>
      <param name="source">ディクショナリを生成するために列挙するシーケンス。</param>
      <param name="keySelector">各シーケンス要素からディクショナリのキーを生成する関数。</param>
      <param name="elementSelector">各シーケンス要素からディクショナリの値を生成する関数。</param>
      <param name="keyComparer">ディクショナリに使用するキーの比較子。</param>
      <typeparam name="TSource">シーケンス内の要素の型。</typeparam>
      <typeparam name="TKey">結果として生成されたディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue">結果として生成されたディクショナリ内の値の型。</typeparam>
      <returns>指定されたシーケンス内の項目を格納する、変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>シーケンスを列挙して変換し、指定されたキーの比較子と値の比較子を使用してその内容の変更できない並べ替えられたディクショナリを生成します。</summary>
      <param name="source">ディクショナリを生成するために列挙するシーケンス。</param>
      <param name="keySelector">各シーケンス要素からディクショナリのキーを生成する関数。</param>
      <param name="elementSelector">各シーケンス要素からディクショナリの値を生成する関数。</param>
      <param name="keyComparer">ディクショナリに使用するキーの比較子。</param>
      <param name="valueComparer">ディクショナリに使用する値の比較子。</param>
      <typeparam name="TSource">シーケンス内の要素の型。</typeparam>
      <typeparam name="TKey">結果として生成されたディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue">結果として生成されたディクショナリ内の値の型。</typeparam>
      <returns>指定されたシーケンス内の項目を格納する、変更できない並べ替えられたディクショナリ。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2">
      <summary>変更できない並べ替えられたディクショナリを表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="TKey">ディクショナリに格納されているキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリに格納されている値の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Add(`0,`1)">
      <summary>指定したキーと値を持つ要素を、変更できない並べ替えられたディクショナリに追加します。</summary>
      <param name="key">追加するエントリのキー。</param>
      <param name="value">追加するエントリの値。</param>
      <returns>追加のキーと値のペアを格納する、新しい変更できない並べ替えられたディクショナリ。</returns>
      <exception cref="T:System.ArgumentException">所定のキーはディクショナリに既に存在しますが、値が異なります。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>特定のキーと値のペアを、変更できない並べ替えられたディクショナリに追加します。</summary>
      <param name="items">追加するキーと値のペア。</param>
      <returns>追加のキーと値のペアを格納する、新しい変更できないディクショナリ。</returns>
      <exception cref="T:System.ArgumentException">所定のキーの 1 つはディクショナリに既に存在しますが、値が異なります。</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder">
      <summary>メモリ割り当てがほとんどまたはまったくない場合でも変化し、変更できない並べ替えられたディクショナリのインスタンス上で非常に効率よく生成またはビルドできる、並べ替えられたディクショナリを表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(`0,`1)">
      <summary>指定したキーと値を持つ要素を、変更できない並べ替えられたディクショナリに追加します。</summary>
      <param name="key">追加する要素のキー。</param>
      <param name="value">追加する要素の値。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>指定された項目を、変更できない並べ替えられたディクショナリに追加します。</summary>
      <param name="item">ディクショナリに追加するオブジェクト。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>変更できない並べ替えられたディクショナリに値のシーケンスを追加します。</summary>
      <param name="items">ディクショナリに追加する項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Clear">
      <summary>変更できない並べ替えられたディクショナリからすべての項目を削除します。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>変更できない並べ替えられたディクショナリに特定の値が格納されているかどうかを確認します。</summary>
      <param name="item">ディクショナリ内で検索するオブジェクト。</param>
      <returns>
        <paramref name="item" /> がディクショナリに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsKey(`0)">
      <summary>指定したキーを持つ要素が、変更できない並べ替えられたディクショナリに格納されているかどうかを判断します。</summary>
      <param name="key">ディクショナリ内で検索するキー。</param>
      <returns>指定したキーを持つ要素がディクショナリに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsValue(`1)">
      <summary>指定した値を持つ要素が、変更できない並べ替えられたディクショナリに格納されているかどうかを判断します。</summary>
      <param name="value">ディクショナリ内で検索する値。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns>指定した値を持つ要素が、変更できない並べ替えられたディクショナリに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Count">
      <summary>この変更できない並べ替えられたディクショナリ内の要素の数を取得します。</summary>
      <returns>このディクショナリ内の要素の数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetEnumerator">
      <summary>変更できない並べ替えられたディクショナリを反復処理する列挙子を返します。</summary>
      <returns>ディクショナリの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary>一致するキーがディクショナリ内に存在する場合は指定されたキーの値を取得します。それ以外の場合は既定値を取得します。</summary>
      <param name="key">検索対象のキー。</param>
      <returns>キーの値、または一致するキーが見つからなかった場合は <c>default(TValue)</c>。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary>一致するキーがディクショナリ内に存在する場合は指定されたキーの値を取得します。それ以外の場合は既定値を取得します。</summary>
      <param name="key">検索対象のキー。</param>
      <param name="defaultValue">ディクショナリ内に一致するキーが見つからない場合に返される既定値。</param>
      <returns>キーの値、または一致するキーが見つからなかった場合は <paramref name="defaultValue" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Item(`0)">
      <summary>変更できない並べ替えられたディクショナリで指定されたキーの値を取得または設定します。</summary>
      <param name="key">値を取得する対象のキー。</param>
      <returns>指定したキーに関連付けられている値。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.KeyComparer">
      <summary>キーの比較子を取得または設定します。</summary>
      <returns>キーの比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Keys">
      <summary>厳密に型指定された読み取り専用の要素のコレクションを取得します。</summary>
      <returns>厳密に型指定された読み取り専用の要素のコレクション。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(`0)">
      <summary>指定したキーを持つ要素を、変更できない並べ替えられたディクショナリから削除します。</summary>
      <param name="key">削除する要素のキー。</param>
      <returns>要素が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドは、元のディクショナリで <paramref name="key" /> が見つからなかった場合にも <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>特定のオブジェクトの最初に出現したものを、変更できない並べ替えられたディクショナリから削除します。</summary>
      <param name="item">ディクショナリから削除するオブジェクト。</param>
      <returns>
        <paramref name="item" /> がディクショナリから正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドは、<paramref name="item" /> がディクショナリに見つからない場合にも <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>指定したシーケンス内のキーと一致するキーを持つエントリを、変更できない並べ替えられたディクショナリから削除します。</summary>
      <param name="keys">ディクショナリから削除するエントリのキー。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>特定の配列インデックスを開始位置として、配列にディクショナリの要素をコピーします。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <param name="array">ディクショナリから要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>指定したキーおよび値を持つ要素をディクショナリ オブジェクトに追加します。</summary>
      <param name="key">追加する要素のキー。</param>
      <param name="value">追加する要素の値。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary>指定したキーを持つ要素がディクショナリ オブジェクトに格納されているかどうかを判断します。</summary>
      <param name="key">検索するキー。</param>
      <returns>指定したキーを持つ要素がディクショナリに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary>ディクショナリの <see cref="T:System.Collections.IDictionaryEnumerator" /> オブジェクトを返します。</summary>
      <returns>ディクショナリの <see cref="T:System.Collections.IDictionaryEnumerator" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> オブジェクトが固定サイズかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> オブジェクトが固定サイズの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary>指定したキーを持つ要素を取得または設定します。</summary>
      <param name="key">キー。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> のキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> を実装するオブジェクトのキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary>指定したキーを持つ要素をディクショナリから削除します。</summary>
      <param name="key">削除する要素のキー。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内の値を格納している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> を実装するオブジェクトの値を保持している <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子オブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ToImmutable">
      <summary>このインスタンスの内容に基づいて、変更できない並べ替えられたディクショナリを作成します。</summary>
      <returns>変更できない並べ替えられたディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary>指定したキーがこのディクショナリに格納されているかどうかを判断します。</summary>
      <param name="equalKey">検索対象のキー。</param>
      <param name="actualKey">一致するものが見つかった場合は、ディクショナリ内にある一致するキー。見つからない場合は <c>equalkey</c>。</param>
      <returns>
        <paramref name="equalKey" /> に一致が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary>指定したキーに関連付けられている値を取得します。</summary>
      <param name="key">値を取得するキー。</param>
      <param name="value">このメソッドから制御が戻るときに、キーが見つかった場合は、指定したキーに関連付けられている値が格納されます。それ以外の場合は、<paramref name="value" /> パラメーターの型に対する既定値が格納されます。 このパラメーターは初期化せずに渡されます。</param>
      <returns>指定したキーを持つ要素が、ディクショナリを実装するオブジェクトに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueComparer">
      <summary>値の比較子を取得または設定します。</summary>
      <returns>値の比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueRef(`0)">
      <summary>指定された <paramref name="key" /> に関連付けられている値への読み取り専用の参照を返します。</summary>
      <param name="key" />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <paramref name="key" /> が存在しません。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Values">
      <summary>変更できない並べ替えられたディクショナリの値が格納されているコレクションを取得します。</summary>
      <returns>ディクショナリを実装するオブジェクトの値が格納されているコレクション。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Clear">
      <summary>このディクショナリ インスタンスと同じ順序付けとキー/値の比較規則を使用する、空の変更できない並べ替えられたディクショナリを取得します。</summary>
      <returns>順序付けとキー/値の比較規則が同等の空のディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>この変更できない並べ替えられたディクショナリに、指定したキーと値のペアが格納されているかどうかを判断します。</summary>
      <param name="pair">検索するキーと値のペア。</param>
      <returns>指定したキーと値のペアがディクショナリ内に見つかる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsKey(`0)">
      <summary>指定したキーがこの変更できない並べ替えられたマップに格納されているかどうかを判断します。</summary>
      <param name="key">検索するキー。</param>
      <returns>指定したキーが変更できないディクショナリに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsValue(`1)">
      <summary>指定した値を持つ要素が、変更できない並べ替えられたディクショナリに格納されているかどうかを判断します。</summary>
      <param name="value">検索する値。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns>指定した値を持つ要素がディクショナリに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Count">
      <summary>変更できない並べ替えられたディクショナリに格納されているキーと値のペアの数を取得します。</summary>
      <returns>ディクショナリに格納されているキーと値のペアの数。</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedDictionary`2.Empty">
      <summary>空の変更できない並べ替えられたディクショナリを取得します。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator">
      <summary>バイナリ ツリーの内容を列挙します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>列挙子の現在位置の要素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator" /> クラスの現在のインスタンスによって使用されているリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.MoveNext">
      <summary>列挙子を、変更できない並べ替えられたディクショナリの次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子が並べ替えられたディクショナリの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Reset">
      <summary>列挙子を初期位置、つまり変更できない並べ替えられたディクショナリの最初の要素の前に設定します。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>現在の要素。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.GetEnumerator">
      <summary>変更できない並べ替えられたディクショナリを反復処理する列挙子を返します。</summary>
      <returns>ディクショナリの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.IsEmpty">
      <summary>変更できない並べ替えられたディクショナリのこのインスタンスが空かどうかを示す値を取得します。</summary>
      <returns>このインスタンスが空の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Item(`0)">
      <summary>指定したキーに関連付けられている <paramref name="TValue" /> を取得します。</summary>
      <param name="key">値を取得する対象のキー。</param>
      <returns>指定されたキーに関連付けられている値。 結果が見つからない場合は、操作によって例外がスローされます。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.KeyComparer">
      <summary>変更できない並べ替えられたディクショナリのキーの比較子を取得します。</summary>
      <returns>ディクショナリのキーの比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Keys">
      <summary>変更できない並べ替えられたディクショナリのキーを取得します。</summary>
      <returns>変更できないディクショナリのキー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Remove(`0)">
      <summary>指定した値を持つ要素を、変更できない並べ替えられたディクショナリから削除します。</summary>
      <param name="value">削除する要素の値。</param>
      <returns>指定した要素が削除された、新しい変更できないディクショナリ。指定した値がディクショナリで見つからない場合はこのインスタンス。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>指定したキーを持つ要素を、変更できない並べ替えられたディクショナリから削除します。</summary>
      <param name="keys">削除する要素のキー。</param>
      <returns>指定したキーが削除された、新しい変更できないディクショナリ。指定したキーがディクショナリで見つからない場合はこのインスタンス。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItem(`0,`1)">
      <summary>変更できない並べ替えられたディクショナリで指定されたキーと値を設定します。指定されたキーの既存の値が上書きされる可能性があります。</summary>
      <param name="key">追加するエントリのキー。</param>
      <param name="value">設定するキー値。</param>
      <returns>指定したキーと値のペアが格納されている、新しい変更できない並べ替えられたディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>変更できない並べ替えられたディクショナリで指定されたキーと値のペアを設定します。キーの既存の値が上書きされる可能性があります。</summary>
      <param name="items">ディクショナリで設定するキーと値のペア。 キーのいずれかが既にディクショナリに存在する場合、このメソッドでその以前の値が上書きされます。</param>
      <returns>指定されたキーと値のペアが格納されている変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>特定の配列インデックスを開始位置として、配列にディクショナリの要素をコピーします。</summary>
      <param name="array">ディクショナリから要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>指定したキーおよび値を持つ要素をディクショナリ オブジェクトに追加します。</summary>
      <param name="key">追加する要素のキーとして使用するオブジェクト。</param>
      <param name="value">追加する要素の値として使用するオブジェクト。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Clear">
      <summary>このインスタンスをクリアします。</summary>
      <exception cref="T:System.NotSupportedException">ディクショナリ オブジェクトは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>指定したキーを持つ要素が、変更できないディクショナリ オブジェクトに格納されているかどうかを判断します。</summary>
      <param name="key">ディクショナリ オブジェクト内で検索するキー。</param>
      <returns>指定したキーを持つ要素がディクショナリに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>変更できないディクショナリ オブジェクトの <see cref="T:System.Collections.IDictionaryEnumerator" /> オブジェクトを返します。</summary>
      <returns>ディクショナリ オブジェクトの列挙子オブジェクトです。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> オブジェクトが固定サイズかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> オブジェクトが固定サイズの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>指定したキーを持つ要素を取得または設定します。</summary>
      <param name="key">キー。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> のキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> を実装するオブジェクトのキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>指定したキーを持つ要素を、変更できないディクショナリ オブジェクトから削除します。</summary>
      <param name="key">削除する要素のキー。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Values">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内の値を格納している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> を実装するオブジェクトの値を保持している <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子オブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ToBuilder">
      <summary>標準の変更可能なインターフェイスを使用して複数の操作で効率的に変更できるこのディクショナリと同じ内容で、変更できない並べ替えられたディクショナリを作成します。</summary>
      <returns>このディクショナリと同じ内容を持つコレクション。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetKey(`0,`0@)">
      <summary>指定したキーがこのディクショナリに格納されているかどうかを判断します。</summary>
      <param name="equalKey">検索対象のキー。</param>
      <param name="actualKey">一致するものが見つかった場合は、ディクショナリ内にある一致するキー。見つからない場合は <c>equalkey</c>。</param>
      <returns>
        <paramref name="equalKey" /> に一致が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetValue(`0,`1@)">
      <summary>指定したキーに関連付けられている値を取得します。</summary>
      <param name="key">値を取得するキー。</param>
      <param name="value">このメソッドから制御が戻るときに、キーが見つかった場合は、指定したキーに関連付けられている値が格納されます。それ以外の場合は、<paramref name="value" /> パラメーターの型に対する既定値が格納されます。</param>
      <returns>指定したキーを持つ要素がディクショナリに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueComparer">
      <summary>値が等しいかどうかの判断に使用される値の比較子を取得します。</summary>
      <returns>値が等しいかどうかの判断に使用される値の比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueRef(`0)">
      <summary>指定された <paramref name="key" /> に関連付けられている値への読み取り専用の参照を返します。</summary>
      <param name="key" />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <paramref name="key" /> が存在しません。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Values">
      <summary>変更できない並べ替えられたディクショナリの値を取得します。</summary>
      <returns>ディクショナリ内の値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0})">
      <summary>指定されたキーの比較子を使用する、変更できない並べ替えられたディクショナリのインスタンスを取得します。</summary>
      <param name="keyComparer">使用するキーの比較子。</param>
      <returns>指定された比較子を使用する、変更できないディクショナリのインスタンス。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary>指定されたキーと値の比較子を使用する、変更できない並べ替えられたディクショナリのインスタンスを取得します。</summary>
      <param name="keyComparer">使用するキーの比較子。</param>
      <param name="valueComparer">使用する値の比較子。</param>
      <returns>指定された比較子を使用する、変更できないディクショナリのインスタンス。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1" /> クラスのインスタンスの一連の初期化メソッドを提供します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1">
      <summary>空の変更できない並べ替えられたセットを作成します。</summary>
      <typeparam name="T">変更できないセットに格納する項目の型。</typeparam>
      <returns>空の変更できない並べ替えられたセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)">
      <summary>指定した項目を含む、新しい変更できない並べ替えられたセットを作成します。</summary>
      <param name="item">セットに事前に設定する項目。</param>
      <typeparam name="T">変更できないセット内の項目の型。</typeparam>
      <returns>指定した項目を含む、新しい変更できないセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0[])">
      <summary>指定した項目の配列を含む、新しい変更できない並べ替えられたセットを作成します。</summary>
      <param name="items">セットに事前に設定する項目を格納している配列。</param>
      <typeparam name="T">変更できないセット内の項目の型。</typeparam>
      <returns>指定した項目を含む、新しい変更できないセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})">
      <summary>指定された比較子を使用する、空の変更できない並べ替えられたセットを作成します。</summary>
      <param name="comparer">セット内の項目を比較する場合に使用する実装。</param>
      <typeparam name="T">変更できないセット内の項目の型。</typeparam>
      <returns>空の変更できないセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)">
      <summary>指定された項目を含み、指定された比較子を使用する、新しい変更できない並べ替えられたセットを作成します。</summary>
      <param name="comparer">セット内の項目を比較する場合に使用する実装。</param>
      <param name="item">セットに事前に設定する項目。</param>
      <typeparam name="T">変更できないセットに格納されている項目の型。</typeparam>
      <returns>指定した項目を含む、新しい変更できないセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0[])">
      <summary>指定された項目の配列を含み、指定された比較子を使用する、新しい変更できない並べ替えられたセットを作成します。</summary>
      <param name="comparer">セット内の項目を比較する場合に使用する実装。</param>
      <param name="items">セットに事前に設定する項目を格納している配列。</param>
      <typeparam name="T">変更できないセット内の項目の型。</typeparam>
      <returns>指定した項目を含む、新しい変更できないセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1">
      <summary>変更できない並べ替えられたセットの作成に使用できるコレクションを返します。</summary>
      <typeparam name="T">コレクションによって格納される項目の型。</typeparam>
      <returns>変更できないコレクション ビルダー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})">
      <summary>変更できない並べ替えられたセットの作成に使用できるコレクションを返します。</summary>
      <param name="comparer">セット内の項目が等しいかどうかの比較に使用される比較子。</param>
      <typeparam name="T">コレクションによって格納される項目の型。</typeparam>
      <returns>変更できないコレクション。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>指定した項目を格納する、新しい変更できないコレクションを作成します。</summary>
      <param name="comparer">このセット内の要素を比較するために使用する比較子。</param>
      <param name="items">変更できなくなる前にセットに追加する項目。</param>
      <typeparam name="T">コレクションによって格納される項目の型。</typeparam>
      <returns>指定した項目を含む、新しい変更できないセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>指定した項目を格納する、新しい変更できないコレクションを作成します。</summary>
      <param name="items">変更できなくなる前にセットに追加する項目。</param>
      <typeparam name="T">コレクションによって格納される項目の型。</typeparam>
      <returns>指定した項目を含む、新しい変更できないセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>シーケンスを列挙し、その内容の変更できない並べ替えられたセットを生成します。</summary>
      <param name="source">列挙するシーケンス。</param>
      <typeparam name="TSource">シーケンス内の要素の型。</typeparam>
      <returns>指定されたシーケンス内の項目を含む、変更できない並べ替えられたセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>シーケンスを列挙し、その内容の変更できない並べ替えられたセットを生成して、指定された比較子を使用します。</summary>
      <param name="source">列挙するシーケンス。</param>
      <param name="comparer">並べ替えられたセットのメンバーの初期化と追加に使用する比較子。</param>
      <typeparam name="TSource">シーケンス内の要素の型。</typeparam>
      <returns>指定されたシーケンス内の項目を含む、変更できない並べ替えられたセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Immutable.ImmutableSortedSet{``0}.Builder)">
      <summary>ビルダーのセットの現在の内容から、変更できない並べ替えられたセットを作成します。</summary>
      <param name="builder">変更できない並べ替えられたセットを作成するためのビルダー。</param>
      <typeparam name="TSource">変更できない並べ替えられたセット内の要素の型。</typeparam>
      <returns>ビルダーのセットの現在の内容を含む、変更できない並べ替えられたセット。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1">
      <summary>変更できない並べ替えられたセットの実装を表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T">セット内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)">
      <summary>指定した値をこの変更できない並べ替えられたセットに追加します。</summary>
      <param name="value">加算する値。</param>
      <returns>要素が追加された新しいセット。または、要素がセット内に既に存在する場合は、このセット。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Builder">
      <summary>メモリの割り当てをほとんどまたはまったく伴わずに変更が可能な並べ替えられたセットを表し、変更できない並べ替えられたセットを効率的に操作または構築します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Add(`0)">
      <summary>現在のセットに要素を追加し、その要素が正常に追加されたかどうかを示す値を返します。</summary>
      <param name="item">セットに追加する要素。</param>
      <returns>要素がセットに追加された場合は <see langword="true" />。セットに既存の要素が存在していた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Clear">
      <summary>このセットからすべての要素を削除します。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Contains(`0)">
      <summary>指定したオブジェクトがセットに格納されているかどうかを確認します。</summary>
      <param name="item">セット内で検索するオブジェクト。</param>
      <returns>
        <paramref name="item" /> がセットに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Count">
      <summary>変更できない並べ替えられたセット内の要素の数を取得します。</summary>
      <returns>このセット内の要素の数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>指定された項目のセットを現在のセットから削除します。</summary>
      <param name="other">セットから削除する項目のコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.GetEnumerator">
      <summary>セットを反復処理する列挙子を返します。</summary>
      <returns>セットの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>指定されたコレクションに存在する要素だけが含まれるように現在のセットを変更します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットが、指定されたコレクションの真のサブセット (真部分集合) であるかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットが <paramref name="other" /> の真のサブセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットが、指定されたコレクションの真のスーパーセット (真部分集合) であるかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットが <paramref name="other" /> の真のスーパーセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットが、指定されたコレクションのサブセットであるかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットが <paramref name="other" /> パラメーターのサブセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットが、指定されたコレクションのスーパーセットであるかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットが <paramref name="other" /> パラメーターのスーパーセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Item(System.Int32)">
      <summary>指定したインデックス位置にあるセットの要素を取得します。</summary>
      <param name="index">取得するセット内の要素の、0 から始まるインデックス番号。</param>
      <returns>指定した位置にある要素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ItemRef(System.Int32)">
      <summary>指定した <paramref name="index" /> にあるセットの要素への読み取り専用の参照を取得します。</summary>
      <param name="index">取得するセット内の要素の、0 から始まるインデックス番号。</param>
      <returns>指定した位置にある要素への読み取り専用の参照。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.KeyComparer">
      <summary>変更できない並べ替えられたセット内の値が等しいかどうかを調べるためのオブジェクトを取得または設定します。</summary>
      <returns>セット内の値の等価性を調べるための比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Max">
      <summary>比較子によって定義された、変更できない並べ替えられたセット内の最大値を取得します。</summary>
      <returns>セット内の最大値。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Min">
      <summary>比較子によって定義された、変更できない並べ替えられたセット内の最小値を取得します。</summary>
      <returns>セット内の最小値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットと、指定されたコレクションとで重なり合う部分が存在するかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットと <paramref name="other" /> との間に共通する要素が 1 つでも存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Remove(`0)">
      <summary>指定したオブジェクトのうち、セットで最初に出現したオブジェクトを削除します。</summary>
      <param name="item">セットから削除するオブジェクト。</param>
      <returns>
        <paramref name="item" /> がセットから削除された場合は <see langword="true" />。<paramref name="item" /> がセット内に見つからない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Reverse">
      <summary>変更できない並べ替えられたセットを逆順で反復処理する列挙子を返します。</summary>
      <returns>セットを逆順で反復処理する列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットと指定されたコレクションに同じ要素が存在するかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットが <paramref name="other" /> と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットを、そのセットと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納されるように変更します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>現在のセットに要素を追加し、その要素が正常に追加されたかどうかを示す値を返します。</summary>
      <param name="item">セットに追加する要素。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>特定の配列インデックスを開始位置として、配列にコレクションの要素をコピーします。</summary>
      <param name="array">コレクションから要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>このインスタンスが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>常に<c>false</c>です。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>特定の配列インデックスを開始位置として、配列にセットの要素をコピーします。</summary>
      <param name="array">セットから要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ToImmutable">
      <summary>このインスタンスの内容に基づいて、変更できない並べ替えられたセットを作成します。</summary>
      <returns>変更できないセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットを、現在のセットと指定したコレクションの両方に存在するすべての要素が格納されるように変更します。</summary>
      <param name="other">現在の状態と比較するコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Clear">
      <summary>変更できない並べ替えられたセットからすべての要素を削除します。</summary>
      <returns>要素が削除された空のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)">
      <summary>指定した値がこの変更できない並べ替えられたセットに格納されているかどうかを判断します。</summary>
      <param name="value">確認する値。</param>
      <returns>指定した値がセットに含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Count">
      <summary>変更できない並べ替えられたセット内の要素の数を取得します。</summary>
      <returns>変更できない並べ替えられたセット内の要素の数。</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedSet`1.Empty">
      <summary>空の変更できない並べ替えられたセットを取得します。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator">
      <summary>バイナリ ツリーの内容を列挙します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Current">
      <summary>列挙子の現在位置の要素を取得します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <returns>列挙子の現在位置の要素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator" /> クラスの現在のインスタンスによって使用されているリソースを解放します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.MoveNext">
      <summary>列挙子を、変更できない並べ替えられたセットの次の要素に進めます。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子が並べ替えられたセットの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Reset">
      <summary>列挙子を初期位置、つまり変更できない並べ替えられたセットの最初の要素の前に設定します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>現在の要素。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>この変更できない並べ替えられたセットから、指定された一連の項目を削除します。</summary>
      <param name="other">このセットから削除する項目。</param>
      <returns>項目が削除された新しいセット。セットに項目がなかった場合は、元のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator">
      <summary>変更できない並べ替えられたセットを反復処理する列挙子を返します。</summary>
      <returns>セットの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)">
      <summary>この変更できない並べ替えられたセット内で、指定された値が表示される位置を取得します。</summary>
      <param name="item">位置が検索されている値。</param>
      <returns>指定した <paramref name="item" /> が存在する場合は、並べ替えられたセットにおけるその <paramref name="item" /> のインデックス。 <paramref name="item" /> が見つからず、このセット内の 1 つ以上の要素よりも小さい場合、このメソッドは負の値を返します。これは、値より大きい最初の要素のインデックスのビットごとの補数となります。 <paramref name="item" /> が見つからず、セット内のどの要素よりも大きい場合、このメソッドは負の値を返します。これは、最後の要素のインデックス + 1 のビットごとの補数となります。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>このセットと指定されたセットの両方に存在する要素を含む、変更できない並べ替えられたセットを作成します。</summary>
      <param name="other">このセットと交差するセット。</param>
      <returns>両方のセットに存在するすべての要素を含む、新しい変更できない並べ替えられたセット。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.IsEmpty">
      <summary>この変更できない並べ替えられたセットが空かどうかを示す値を取得します。</summary>
      <returns>このセットが空の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の変更できない並べ替えられたセットが、指定されたコレクションの真のサブセット (真部分集合) であるかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットが <paramref name="other" /> の真のサブセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の変更できない並べ替えられたセットが、指定されたコレクションの真のスーパーセットであるかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットが <paramref name="other" /> の真のスーパーセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の変更できない並べ替えられたセットが、指定されたコレクションのサブセットであるかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットが <paramref name="other" /> パラメーターのサブセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の変更できない並べ替えられたセットが、指定されたコレクションのスーパーセットであるかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットが <paramref name="other" /> パラメーターのスーパーセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Item(System.Int32)">
      <summary>変更できない並べ替えられたセットの、指定したインデックス位置にある要素を取得します。</summary>
      <param name="index">並べ替えられたセットから取得する要素のインデックス。</param>
      <returns>指定されたインデックス位置にある要素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ItemRef(System.Int32)">
      <summary>指定した <paramref name="index" /> にあるセットの要素の読み取り専用の参照を取得します。</summary>
      <param name="index">取得するセット内の要素の、0 から始まるインデックス番号。</param>
      <returns>指定した位置にある要素の読み取り専用の参照。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.KeyComparer">
      <summary>変更できない並べ替えられたセットでのキーの並べ替えに使用される比較子を取得します。</summary>
      <returns>キーの並べ替えに使用される比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Max">
      <summary>比較子によって定義された、変更できない並べ替えられたセット内の最大値を取得します。</summary>
      <returns>セット内の最大値。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Min">
      <summary>比較子によって定義された、変更できない並べ替えられたセット内の最小値を取得します。</summary>
      <returns>セット内の最小値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の変更できない並べ替えられたセットと指定されたコレクションとが共通の要素を共有しているかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットと <paramref name="other" /> との間に共通する要素が 1 つでも存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)">
      <summary>指定した値を、この変更できない並べ替えられたセットから削除します。</summary>
      <param name="value">削除する要素。</param>
      <returns>要素が削除された、新しい変更できない並べ替えられたセット。セット内に要素が見つからなかった場合は、このセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Reverse">
      <summary>この変更できない並べ替えられたセットを逆順で反復処理する <see cref="T:System.Collections.Generic.IEnumerable`1" /> を返します。</summary>
      <returns>変更できない並べ替えられたセットを逆順で反復処理する列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の変更できない並べ替えられたセットと指定されたコレクションに同じ要素が存在するかどうかを判断します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>セットが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>このセットと指定されたシーケンスの両方ではなく、いずれかに存在する要素を含む、変更できない並べ替えられたセットを作成します。</summary>
      <param name="other">項目のその他のシーケンス。</param>
      <returns>新しい変更できない並べ替えられたセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>指定された値をコレクションに追加します。</summary>
      <param name="item">加算する値。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>コレクションからすべての項目を削除します。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>特定の配列インデックスを開始位置として、配列にコレクションの要素をコピーします。</summary>
      <param name="array">コレクションから要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> インターフェイスをご覧ください。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>特定のオブジェクトの最初に出現したものをコレクションから削除します。</summary>
      <param name="item">コレクションから削除するオブジェクト。</param>
      <returns>
        <paramref name="item" /> がコレクションから正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>セット内の指定されたインデックス位置に項目を挿入します。</summary>
      <param name="index">
        <paramref name="item" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="item">セットに挿入するオブジェクト。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.IList`1" /> インターフェイスをご覧ください。</summary>
      <param name="index" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>指定したインデックス位置にある項目を削除します。</summary>
      <param name="index">削除する項目の 0 から始まるインデックス。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary>現在のセットに要素を追加し、その要素が正常に追加されたかどうかを示す値を返します。</summary>
      <param name="item">セットに追加する要素。</param>
      <returns>要素がセットに追加された場合は <see langword="true" />。セットに既存の要素が存在していた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットから、指定されたコレクションに含まれる要素をすべて削除します。</summary>
      <param name="other">セットから削除する項目のコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>指定されたコレクションに存在する要素だけが含まれるように現在のセットを変更します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットを、そのセットと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納されるように変更します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットを、現在のセットまたは指定したコレクションのいずれかに存在するすべての要素が格納されるように変更します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>特定の配列インデックスを開始位置として、配列にセットの要素をコピーします。</summary>
      <param name="array">セットから要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> インターフェイスをご覧ください。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary>「<see cref="T:System.Collections.ICollection" />」を参照してください。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子オブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Add(System.Object)">
      <summary>セットに項目を追加します。</summary>
      <param name="value">セットに追加するオブジェクト。</param>
      <returns>新しい要素が挿入された位置、または項目がコレクションに挿入されなかったことを示す -1。</returns>
      <exception cref="T:System.NotSupportedException">セットが読み取り専用か、または固定サイズです。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Clear">
      <summary>セットからすべての項目を削除します。</summary>
      <exception cref="T:System.NotSupportedException">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Contains(System.Object)">
      <summary>セットに特定の値が含まれているかどうかを判断します。</summary>
      <param name="value">セット内で検索するオブジェクト。</param>
      <returns>オブジェクトがセット内で見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>セット内の特定の項目のインデックスを確認します。</summary>
      <param name="value">セット内で検索するオブジェクト。</param>
      <returns>リストに存在する場合は <paramref name="value" /> のインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>セット内の指定したインデックス位置に項目を挿入します。</summary>
      <param name="index">
        <paramref name="value" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="value">セットに挿入するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">セットが読み取り専用か、または固定サイズです。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IList" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Item(System.Int32)">
      <summary>指定したインデックス位置にある <see cref="T:System.Object" /> を取得または設定します。</summary>
      <param name="index">インデックス。</param>
      <returns>
        <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Remove(System.Object)">
      <summary>セット内で最初に見つかった特定のオブジェクトを削除します。</summary>
      <param name="value">セットから削除するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">セットが読み取り専用か、または固定サイズです。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>指定したインデックス位置にある項目をセットから削除します。</summary>
      <param name="index">削除する項目の 0 から始まるインデックス。</param>
      <exception cref="T:System.NotSupportedException">セットが読み取り専用か、または固定サイズです。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary>この変更できないセットに、指定した要素を追加します。</summary>
      <param name="value">追加する要素。</param>
      <returns>要素が追加された新しいセット。または、要素がセット内に既に存在する場合は、このセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary>並べ替えと順序付けのセマンティクスがこのインスタンスと同じ空の変更できないセットを取得します。</summary>
      <returns>並べ替えと順序付けのセマンティクスがこのインスタンスと同じ空のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の変更できないセットから、指定されたコレクションに含まれる要素を削除します。</summary>
      <param name="other">このセットから削除する項目。</param>
      <returns>項目が削除された新しいセット。セットに項目がなかった場合は、元のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>このセットと指定されたセットの両方に存在する要素を含む、変更できないセットを作成します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>両方のセットに存在するすべての要素を含む、新しい変更できないセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary>この変更できないセットから、指定した要素を削除します。</summary>
      <param name="value">削除する要素。</param>
      <returns>指定した要素が削除された新しいセット。セット内に要素が見つからない場合は、現在のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納された、変更できないセットを作成します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <returns>現在のセットと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納された、新しいセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットと指定されたコレクションのどちらかに存在するすべての要素が格納された、新しい変更できないセットを作成します。</summary>
      <param name="other">要素の追加元のコレクション。</param>
      <returns>項目が追加された、新しい変更できないセット。すべての項目が既にセットにあった場合は、元のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder">
      <summary>標準の変更可能なインターフェイスを使用して効率的に操作できる、この変更できない並べ替えられたセットと同じ内容のコレクションを作成します。</summary>
      <returns>並べ替えられたセットのビルダー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)">
      <summary>指定された値をセットで検索し、見つかった場合は同じ値を返します。</summary>
      <param name="equalValue">検索する値。</param>
      <param name="actualValue">セット内の検索で見つかった値。検索で一致するものがなかった場合は、元の値。</param>
      <returns>検索が成功したかどうかを示す値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>この変更できない並べ替えられたセットに、指定された一連の項目を追加します。</summary>
      <param name="other">追加する項目。</param>
      <returns>項目が追加された、新しいセット。すべての項目が既にセットにあった場合は、元のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})">
      <summary>指定したキーの比較子を持つ、変更できない並べ替えられたセットを返します。</summary>
      <param name="comparer">確認する比較子。</param>
      <returns>指定したキーの比較子を持つ、変更できない並べ替えられたセット。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack">
      <summary>
        <see cref="T:System.Collections.Immutable.ImmutableStack`1" /> クラスのインスタンスの一連の初期化メソッドを提供します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1">
      <summary>空の変更できないスタックを作成します。</summary>
      <typeparam name="T">変更できないスタックに格納する項目の型。</typeparam>
      <returns>空の変更できないスタック。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0)">
      <summary>指定した項目が格納される新しい変更できないスタックを作成します。</summary>
      <param name="item">スタックに事前に設定する項目。</param>
      <typeparam name="T">変更できないスタック内の項目の型。</typeparam>
      <returns>指定した項目が格納される新しい変更できないコレクション。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0[])">
      <summary>指定した項目の配列が格納される新しい変更できないスタックを作成します。</summary>
      <param name="items">スタックに事前に設定する項目が格納されている配列。</param>
      <typeparam name="T">変更できないスタック内の項目の型。</typeparam>
      <returns>指定した項目が格納されている新しい変更できないスタック。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>指定した項目が格納される新しい変更できないスタックを作成します。</summary>
      <param name="items">変更できなくなる前にスタックに追加する項目。</param>
      <typeparam name="T">スタック内の項目の型。</typeparam>
      <returns>指定した項目が格納されている変更できないスタック。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Pop``1(System.Collections.Immutable.IImmutableStack{``0},``0@)">
      <summary>指定した項目を、変更できないスタックから削除します。</summary>
      <param name="stack">変更するスタック。</param>
      <param name="value">スタックから削除する項目。</param>
      <typeparam name="T">スタックに格納されている項目の型。</typeparam>
      <returns>スタック。<see langword="null" /> になることはありません。</returns>
      <exception cref="T:System.InvalidOperationException">スタックが空です。</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1">
      <summary>変更できないスタックを表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T">スタックの要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Clear">
      <summary>変更できないスタックからすべてのオブジェクトを削除します。</summary>
      <returns>空の変更できないスタック。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Empty">
      <summary>空の変更できないスタックを取得します。</summary>
      <returns>空の変更できないスタック。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1.Enumerator">
      <summary>メモリを割り当てずに変更できないスタックの内容を列挙します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Enumerator.Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>列挙子の現在位置の要素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Enumerator.MoveNext">
      <summary>列挙子を、変更できないスタックの次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がスタックの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.GetEnumerator">
      <summary>変更できないスタックを反復処理する列挙子を返します。</summary>
      <returns>スタックの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.IsEmpty">
      <summary>変更できないスタックのこのインスタンスが空かどうかを示す値を取得します。</summary>
      <returns>このインスタンスが空の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Peek">
      <summary>スタックの一番上にあるオブジェクトを削除せずに返します。</summary>
      <returns>スタックの一番上にあるオブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException">スタックが空です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.PeekRef">
      <summary>スタックの一番上にある要素への読み取り専用の参照を取得します。</summary>
      <returns>スタックの一番上にある要素への読み取り専用の参照。</returns>
      <exception cref="T:System.InvalidOperationException">スタックが空の場合にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop">
      <summary>変更できないスタックの一番上にある要素を削除し、削除後のスタックを返します。</summary>
      <returns>スタック。<see langword="null" /> になることはありません。</returns>
      <exception cref="T:System.InvalidOperationException">スタックが空です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop(`0@)">
      <summary>変更できないスタックから指定された要素を削除し、削除後のスタックを返します。</summary>
      <param name="value">スタックから削除する値。</param>
      <returns>スタック。<see langword="null" /> になることはありません。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Push(`0)">
      <summary>変更できないスタックの一番上にオブジェクトを挿入し、新しいスタックを返します。</summary>
      <param name="value">スタックにプッシュするオブジェクト。</param>
      <returns>新しいスタック。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Clear">
      <summary>変更できないスタックからすべての要素を削除します。</summary>
      <returns>空の変更できないスタック。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Pop">
      <summary>変更できないスタックの一番上にある要素を削除し、新しいスタックを返します。</summary>
      <returns>新しいスタック。<see langword="null" /> になることはありません。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Push(`0)">
      <summary>変更できないスタックの一番上に要素を挿入し、新しいスタックを返します。</summary>
      <param name="value">スタックにプッシュする要素。</param>
      <returns>新しいスタック。</returns>
    </member>
    <member name="T:System.Linq.ImmutableArrayExtensions">
      <summary>標準的な LINQ メソッドよりも <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> に対する効率が高い、LINQ 拡張メソッドのオーバーライド 
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})">
      <summary>累積的に要素のシーケンスに関数を適用します。</summary>
      <param name="immutableArray">関数の適用先のコレクション。</param>
      <param name="func">累積的に各要素で呼び出される関数。</param>
      <typeparam name="T">コレクションに含まれる要素の型。</typeparam>
      <returns>関数がすべての要素に適用された後の最終的な値。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})">
      <summary>累積的に要素のシーケンスに関数を適用します。</summary>
      <param name="immutableArray">関数の適用先のコレクション。</param>
      <param name="seed">最初のアキュムレータ値。</param>
      <param name="func">累積的に各要素で呼び出される関数。</param>
      <typeparam name="TAccumulate">累積値の型。</typeparam>
      <typeparam name="T">コレクションに含まれる要素の型。</typeparam>
      <returns>最終的なアキュムレータ値。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})">
      <summary>累積的に要素のシーケンスに関数を適用します。</summary>
      <param name="immutableArray">関数の適用先のコレクション。</param>
      <param name="seed">最初のアキュムレータ値。</param>
      <param name="func">累積的に各要素で呼び出される関数。</param>
      <param name="resultSelector" />
      <typeparam name="TAccumulate">累積値の型。</typeparam>
      <typeparam name="TResult">結果のセレクターによって返される結果の型。</typeparam>
      <typeparam name="T">コレクションに含まれる要素の型。</typeparam>
      <returns>最終的なアキュムレータ値。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>この配列内のすべての要素が特定の条件に一致するかどうかを示す値を取得します。</summary>
      <param name="immutableArray">一致するかどうかを確認する配列。</param>
      <param name="predicate">述語。</param>
      <typeparam name="T">コレクションに含まれる要素の型。</typeparam>
      <returns>指定された述語でソース シーケンスの各要素がテストに合格する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>配列に要素が格納されているかどうかを示す値を取得します。</summary>
      <param name="immutableArray">要素について確認する配列。</param>
      <typeparam name="T">コレクションに含まれる要素の型。</typeparam>
      <returns>配列に要素が含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>指定された条件に一致する要素が配列に格納されているかどうかを示す値を取得します。</summary>
      <param name="immutableArray">要素について確認する配列。</param>
      <param name="predicate">要素と一致する条件を定義するデリゲート。</param>
      <typeparam name="T">コレクションに含まれる要素の型。</typeparam>
      <returns>指定した条件と要素が一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>このコレクションに要素が格納されているかどうかを示す値を返します。</summary>
      <param name="builder">一致するかどうかを確認するビルダー。</param>
      <typeparam name="T">配列内の要素の型。</typeparam>
      <returns>配列ビルダーに要素が格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary>配列内の指定されたインデックス位置にある要素を返します。</summary>
      <param name="immutableArray">要素の検索対象となる配列。</param>
      <param name="index">取得する要素のインデックス。</param>
      <typeparam name="T">コレクションに含まれる要素の型。</typeparam>
      <returns>指定したインデックスにある項目。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary>シーケンス内の指定したインデックス位置にある要素を返します。インデックスが範囲外の場合は既定値を返します。</summary>
      <param name="immutableArray">要素の検索対象となる配列。</param>
      <param name="index">取得する要素のインデックス。</param>
      <typeparam name="T">コレクションに含まれる要素の型。</typeparam>
      <returns>指定したインデックス位置にある項目。インデックスが見つからない場合は既定値。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>配列内の最初の要素を返します。</summary>
      <param name="immutableArray">取得する項目が格納されている配列。</param>
      <typeparam name="T">コレクションに含まれる要素の型。</typeparam>
      <returns>配列内の最初の項目。</returns>
      <exception cref="T:System.InvalidOperationException">配列が空の場合。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>指定された条件を満たす、シーケンスの最初の要素を返します。</summary>
      <param name="immutableArray">取得する項目が格納されている配列。</param>
      <param name="predicate">検索する要素の条件を定義するデリゲート。</param>
      <typeparam name="T">コレクションに含まれる要素の型。</typeparam>
      <returns>
        <paramref name="predicate" /> で指定された条件を満たしている場合は、リスト内の最初の項目。</returns>
      <exception cref="T:System.InvalidOperationException">配列が空の場合。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>コレクション内の最初の要素を返します。</summary>
      <param name="builder">取得する項目が含まれているビルダー。</param>
      <typeparam name="T">配列内の項目の型。</typeparam>
      <returns>リスト内の最初の項目。</returns>
      <exception cref="T:System.InvalidOperationException">配列が空の場合。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>シーケンスの最初の要素を返します。シーケンスに要素が含まれていない場合は既定値を返します。</summary>
      <param name="immutableArray">取得する項目が格納されている配列。</param>
      <typeparam name="T">コレクションに含まれる要素の型。</typeparam>
      <returns>見つかった場合はリスト内の最初の項目。それ以外の場合はその項目の型の既定値。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>条件を満たす、シーケンスの最初の要素を返します。このような要素が見つからない場合は既定値を返します。</summary>
      <param name="immutableArray">取得する要素が格納されている配列。</param>
      <param name="predicate">検索する要素の条件を定義するデリゲート。</param>
      <typeparam name="T">コレクションに含まれる要素の型。</typeparam>
      <returns>見つかった場合はリスト内の最初の項目。それ以外の場合はその項目の型の既定値。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>コレクション内の最初の要素を返します。コレクションが空の場合は既定値を返します。</summary>
      <param name="builder">取得する要素が含まれているビルダー。</param>
      <typeparam name="T">ビルダー内の項目の型。</typeparam>
      <returns>見つかった場合はリスト内の最初の項目。それ以外の場合はその項目の型の既定値。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>配列の最後の要素を返します。</summary>
      <param name="immutableArray">取得する項目が格納されている配列。</param>
      <typeparam name="T">配列に含まれる要素の型。</typeparam>
      <returns>配列内の最後の要素。</returns>
      <exception cref="T:System.InvalidOperationException">コレクションが空の場合にスローされます。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>指定された条件を満たす、シーケンスの最後の要素を返します。</summary>
      <param name="immutableArray">取得する要素が格納されている配列。</param>
      <param name="predicate">取得する要素の条件を定義するデリゲート。</param>
      <typeparam name="T">コレクションに含まれる要素の型。</typeparam>
      <returns>
        <paramref name="predicate" /> 条件を満たす、配列の最後の要素。</returns>
      <exception cref="T:System.InvalidOperationException">コレクションが空の場合にスローされます。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>コレクション内の最後の要素を返します。</summary>
      <param name="builder">取得する要素が含まれているビルダー。</param>
      <typeparam name="T">ビルダー内の項目の型。</typeparam>
      <returns>ビルダー内の最後の要素。</returns>
      <exception cref="T:System.InvalidOperationException">コレクションが空の場合にスローされます。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>シーケンスの最後の要素を返します。シーケンスに要素が含まれていない場合は既定値を返します。</summary>
      <param name="immutableArray">取得する項目が格納されている配列。</param>
      <typeparam name="T">コレクションに含まれる要素の型。</typeparam>
      <returns>シーケンスの最後の要素。シーケンスに要素が含まれていない場合は既定値。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>条件を満たす、シーケンスの最後の要素を返します。このような要素が見つからない場合は既定値を返します。</summary>
      <param name="immutableArray">取得する要素が格納されている配列。</param>
      <param name="predicate">検索する要素の条件を定義するデリゲート。</param>
      <typeparam name="T">コレクションに含まれる要素の型。</typeparam>
      <returns>シーケンスの最後の要素。シーケンスに要素が含まれていない場合は既定値。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>コレクション内の最後の要素を返します。コレクションが空の場合は既定値を返します。</summary>
      <param name="builder">取得する要素が含まれているビルダー。</param>
      <typeparam name="T">ビルダー内の項目の型。</typeparam>
      <returns>シーケンスの最後の要素。シーケンスに要素が含まれていない場合は既定値。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary>シーケンスの各要素を新しいフォームに射影します。</summary>
      <param name="immutableArray">選択する項目が格納されている変更できない配列。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="T">コレクションに含まれる要素の型。</typeparam>
      <typeparam name="TResult">結果の要素の型。</typeparam>
      <returns>ソースの各要素に対して変換関数を呼び出した結果として得られる要素を格納している <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>シーケンスの各要素を <see cref="T:System.Collections.Generic.IEnumerable`1" /> に射影し、結果のシーケンスを 1 つのシーケンスにフラット化して、その各要素に対して結果のセレクター関数を呼び出します。</summary>
      <param name="immutableArray">不変配列。</param>
      <param name="collectionSelector">入力シーケンスの各要素に適用する変換関数。</param>
      <param name="resultSelector">中間シーケンスの各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="immutableArray" /> の要素の型。</typeparam>
      <typeparam name="TCollection">
        <paramref name="collectionSelector" /> によって収集される中間要素の型。</typeparam>
      <typeparam name="TResult">結果のシーケンスの要素の型。</typeparam>
      <returns>
        <paramref name="immutableArray" /> の各要素で一対多の変換関数 <paramref name="collectionSelector" /> を呼び出し、こうしたシーケンスの各要素とそれに対応するソース要素を結果の要素に割り当てた結果として得られる要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>等値比較子に従って 2 つのシーケンスが等しいかどうかを判断します。</summary>
      <param name="immutableArray">比較に使用する配列。</param>
      <param name="items">比較に使用する項目。</param>
      <param name="comparer">等しいかどうかを確認するために使用する比較子。</param>
      <typeparam name="TDerived">比較対象の配列内の要素の型。</typeparam>
      <typeparam name="TBase">コレクションに含まれる要素の型。</typeparam>
      <returns>シーケンスが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>等値比較子に従って 2 つのシーケンスが等しいかどうかを判断します。</summary>
      <param name="immutableArray">比較に使用する配列。</param>
      <param name="items">比較に使用する項目。</param>
      <param name="comparer">等しいかどうかを確認するために使用する比較子。</param>
      <typeparam name="TDerived">比較対象の配列内の要素の型。</typeparam>
      <typeparam name="TBase">コレクションに含まれる要素の型。</typeparam>
      <returns>シーケンスが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})">
      <summary>等値比較子に従って 2 つのシーケンスが等しいかどうかを判断します。</summary>
      <param name="immutableArray">比較に使用する配列。</param>
      <param name="items">比較に使用する項目。</param>
      <param name="predicate">等しいかどうかを確認するために使用する比較子。</param>
      <typeparam name="TDerived">比較対象の配列内の要素の型。</typeparam>
      <typeparam name="TBase">コレクションに含まれる要素の型。</typeparam>
      <returns>シーケンスが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>シーケンスの唯一の要素を返し、シーケンス内の要素が 1 つだけでない場合は例外をスローします。</summary>
      <param name="immutableArray">取得する要素が格納されている配列。</param>
      <typeparam name="T">コレクションに含まれる要素の型。</typeparam>
      <returns>シーケンス内の要素。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>指定された条件を満たす、シーケンスの唯一の要素を返し、そのような要素が複数存在する場合は例外をスローします。</summary>
      <param name="immutableArray" />
      <param name="predicate" />
      <typeparam name="T">コレクションに含まれる要素の型。</typeparam>
      <returns>
        <see cref="T:System.Boolean" /> を返します。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>配列の唯一の要素、またはシーケンスが空の場合は既定値を返します。このメソッドは、シーケンス内に要素が複数ある場合に例外をスローします。</summary>
      <param name="immutableArray">配列。</param>
      <typeparam name="T">コレクションに含まれる要素の型。</typeparam>
      <returns>配列内の要素、または配列が空の場合は既定値。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> には複数の要素が含まれています。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>指定された条件を満たすシーケンスの唯一の要素、またはそのような要素がない場合は既定値を返します。このメソッドは、複数の要素が条件を満たす場合に例外をスローします。</summary>
      <param name="immutableArray">要素を取得する配列。</param>
      <param name="predicate">要素が満たす必要がある条件。</param>
      <typeparam name="T">コレクションに含まれる要素の型。</typeparam>
      <returns>指定された条件を満たしている場合はその要素。それ以外の場合は既定の要素。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" /> の条件を満たす要素が複数あります。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>この配列の内容を可変配列にコピーします。</summary>
      <param name="immutableArray" />
      <typeparam name="T">コレクションに含まれる要素の型。</typeparam>
      <returns>新しくインスタンス化された配列。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})">
      <summary>この配列の内容に基づいてディクショナリを作成します。</summary>
      <param name="immutableArray">ディクショナリの作成元となる配列。</param>
      <param name="keySelector">キー セレクター。</param>
      <typeparam name="TKey">キーの型。</typeparam>
      <typeparam name="T">コレクションに含まれる要素の型。</typeparam>
      <returns>新しく初期化されたディクショナリ。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>この配列の内容に基づいてディクショナリを作成します。</summary>
      <param name="immutableArray">ディクショナリの作成元となる配列。</param>
      <param name="keySelector">キー セレクター。</param>
      <param name="comparer">ディクショナリの初期化に使用する比較子。</param>
      <typeparam name="TKey">キーの型。</typeparam>
      <typeparam name="T">コレクションに含まれる要素の型。</typeparam>
      <returns>新しく初期化されたディクショナリ。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})">
      <summary>この配列の内容に基づいてディクショナリを作成します。</summary>
      <param name="immutableArray">ディクショナリの作成元となる配列。</param>
      <param name="keySelector">キー セレクター。</param>
      <param name="elementSelector">要素セレクター。</param>
      <typeparam name="TKey">キーの型。</typeparam>
      <typeparam name="TElement">要素の型。</typeparam>
      <typeparam name="T">コレクションに含まれる要素の型。</typeparam>
      <returns>新しく初期化されたディクショナリ。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>この配列の内容に基づいてディクショナリを作成します。</summary>
      <param name="immutableArray">ディクショナリの作成元となる配列。</param>
      <param name="keySelector">キー セレクター。</param>
      <param name="elementSelector">要素セレクター。</param>
      <param name="comparer">ディクショナリの初期化に使用する比較子。</param>
      <typeparam name="TKey">キーの型。</typeparam>
      <typeparam name="TElement">要素の型。</typeparam>
      <typeparam name="T">コレクションに含まれる要素の型。</typeparam>
      <returns>新しく初期化されたディクショナリ。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>述語に基づいて値のシーケンスをフィルター処理します。</summary>
      <param name="immutableArray">フィルター処理する配列。</param>
      <param name="predicate">配列の内容をフィルター処理するために使用する条件。</param>
      <typeparam name="T">コレクションに含まれる要素の型。</typeparam>
      <returns>条件を満たす要素を格納する <see cref="T:System.Collections.Generic.IEnumerable`1" /> を返します。</returns>
    </member>
  </members>
</doc>
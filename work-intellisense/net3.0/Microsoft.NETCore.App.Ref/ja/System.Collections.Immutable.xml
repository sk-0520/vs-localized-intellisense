<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Collections.Immutable</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Immutable.IImmutableDictionary`2">
      <summary vsli:raw="Represents an immutable collection of key/value pairs.  &#xA;&#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">キーと値のペアの変更できないコレクションを表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">ディクショナリ内の値の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the dictionary.">指定したキーおよび値を持つ要素をディクショナリに追加します。</summary>
      <param name="key" vsli:raw="The key of the element to add.">追加する要素のキー。</param>
      <param name="value" vsli:raw="The value of the element to add.">追加する要素の値。</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pair.">追加のキーと値のペアを格納する、新しい変更できないディクショナリ。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">所定のキーはディクショナリに既に存在しますが、値が異なります。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specified key/value pairs to the dictionary.">指定したキーと値のペアをディクショナリに追加します。</summary>
      <param name="pairs" vsli:raw="The key/value pairs to add.">追加するキーと値のペア。</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">追加のキーと値のペアを格納する、新しい変更できないディクショナリ。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">所定のキーの 1 つはディクショナリに既に存在しますが、値が異なります。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">このディクショナリ インスタンスと同じ順序付けとキー/値の比較規則を使用する空のディクショナリを取得します。</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">順序付けとキー/値の比較規則が同等の空のディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable dictionary contains the specified key/value pair.">変更できないディクショナリに、指定されたキーと値のペアが含まれているかどうかを判定します。</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">検索するキーと値のペア。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーと値のペアがディクショナリ内に見つかる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">指定したキーを持つ要素を、変更できないディクショナリから削除します。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">削除する要素のキー。</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary.">指定した要素が削除された、新しい変更できないディクショナリ。指定したキーがディクショナリで見つからない場合はこのインスタンス。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable dictionary.">指定したキーを持つ要素を、変更できないディクショナリから削除します。</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">削除する要素のキー。</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">指定したキーが削除された、新しい変更できないディクショナリ。指定したキーがディクショナリで見つからない場合はこのインスタンス。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.">変更できないディクショナリで指定されたキーと値を設定します。キーの既存の値が上書きされる可能性があります。</summary>
      <param name="key" vsli:raw="The key of the entry to add.">追加するエントリのキー。</param>
      <param name="value" vsli:raw="The key value to set.">設定するキー値。</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pair.">指定したキーと値のペアが格納されている、新しい変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys.">変更できないディクショナリで指定されたキーと値のペアを設定します。キーの既存の値が上書きされる可能性があります。</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">ディクショナリで設定するキーと値のペア。 キーのいずれかが既にディクショナリに存在する場合、このメソッドでその以前の値が上書きされます。</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pairs.">指定したキーと値のペアが格納されている、新しい変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">指定したキーがこのディクショナリに格納されているかどうかを判断します。</summary>
      <param name="equalKey" vsli:raw="The key to search for.">検索対象のキー。</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">一致するものが見つかった場合は、ディクショナリ内にある一致するキー。見つからない場合は <c>equalkey</c>。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="equalKey" /> に一致が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableList`1">
      <summary vsli:raw="Represents a list of elements that cannot be modified.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">変更できない要素のリストを表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">リスト内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Add(`0)">
      <summary vsli:raw="Makes a copy of the list, and adds the specified object to the end of the copied list.">リストのコピーを作成し、コピーしたリストの末尾に、指定されたオブジェクトを追加します。</summary>
      <param name="value" vsli:raw="The object to add to the list.">リストに追加するオブジェクト。</param>
      <returns vsli:raw="A new list with the object added.">オブジェクトが追加された新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Makes a copy of the list and adds the specified objects to the end of the copied list.">リストのコピーを作成し、コピーしたリストの末尾に、指定されたオブジェクトを追加します。</summary>
      <param name="items" vsli:raw="The objects to add to the list.">リストに追加するオブジェクト。</param>
      <returns vsli:raw="A new list with the elements added.">要素が追加された新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Clear">
      <summary vsli:raw="Creates  a list with all the items removed, but with the same sorting and ordering semantics as this list.">すべての項目が削除されたリストを作成します。ただし、並べ替えと順序付けのセマンティクスは、このリストと同じになります。</summary>
      <returns vsli:raw="An empty list that has the same sorting and ordering semantics as this instance.">並べ替えと順序付けのセマンティクスがこのインスタンスと同じ空のリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that starts at the specified index and contains the specified number of elements.">指定したインデックスから始まり、指定した数の要素が含まれる <see cref="T:System.Collections.Immutable.IImmutableList`1" /> の要素範囲内で、指定したオブジェクトを検索し、最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt;. This value can be null for reference types.">
        <see cref="T:System.Collections.Immutable.IImmutableList`1" /> 内で検索するオブジェクト。 参照型の場合は、この値を null にできます。</param>
      <param name="index" vsli:raw="The zero-based starting indexes of the search. 0 (zero) is valid in an empty list.">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 (ゼロ) は有効です。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">検索対象の範囲内にある要素の数。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to locate &lt;paramref name=&quot;item&quot; /&gt;.">
        <paramref name="item" /> の検索に使用する等値比較子。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements if found; otherwise -1.">
        <see cref="T:System.Collections.Immutable.IImmutableList`1" /> のうち、<paramref name="index" /> から始まり、要素数が <paramref name="count" /> 個の要素範囲の中で <paramref name="item" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified element at the specified index in the immutable list.">指定した要素を、変更できないリストの指定したインデックス位置に挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the value.">値を挿入する位置を示す、0 から始まるインデックス。</param>
      <param name="element" vsli:raw="The object to insert.">挿入するオブジェクト。</param>
      <returns vsli:raw="A new immutable list that includes the specified element.">指定した要素が含まれている新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified elements at the specified index in the immutable list.">指定した要素を、変更できないリストの指定したインデックス位置に挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index at which the new elements should be inserted.">新しい要素が挿入される位置の 0 から始まるインデックス。</param>
      <param name="items" vsli:raw="The elements to insert.">挿入する要素。</param>
      <returns vsli:raw="A new immutable list that includes the specified elements.">指定した要素が含まれている新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that contains the specified number of elements and ends at the specified index.">
        <see cref="T:System.Collections.Immutable.IImmutableList`1" /> のうち、指定した要素数が含まれ、指定したインデックスの位置で終了する要素範囲の中で、指定したオブジェクトを検索し、最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="item" vsli:raw="The object to locate in the list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">リスト内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 (ゼロ) は有効です。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">検索対象の範囲内にある要素の数。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to match &lt;paramref name=&quot;item&quot; /&gt;.">
        <paramref name="item" /> の照合に使用する等値比較子。</param>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <see cref="T:System.Int32" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the first occurrence of a specified object from this immutable list.">この変更できないリストから、指定したオブジェクトのうち最初に出現したものを削除します。</summary>
      <param name="value" vsli:raw="The object to remove from the list.">リストから削除するオブジェクト。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to locate &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" /> の検索に使用する等値比較子。</param>
      <returns vsli:raw="A new list with the specified object removed.">指定したオブジェクトが削除された新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">指定した述語によって定義される条件に一致するすべての要素を削除します。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">削除する要素の条件を定義するデリゲート。</param>
      <returns vsli:raw="A new immutable list with the elements removed.">要素が削除された新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the immutable list.">変更できないリストの指定したインデックス位置にある要素を削除します。</summary>
      <param name="index" vsli:raw="The index of the element to remove.">削除する要素のインデックス。</param>
      <returns vsli:raw="A new list with the element removed.">要素が削除された新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified object from the list.">指定したオブジェクトをリストから削除します。</summary>
      <param name="items" vsli:raw="The objects to remove from the list.">リストから削除するオブジェクト。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to determine if &lt;paramref name=&quot;items&quot; /&gt; match any objects in the list.">
        <paramref name="items" /> がリスト内のいずれかのオブジェクトと一致するかどうかを判断するために使用する等値比較子。</param>
      <returns vsli:raw="A new immutable list with the specified objects removed, if &lt;paramref name=&quot;items&quot; /&gt; matched objects in the list.">
        <paramref name="items" /> がリスト内のオブジェクトと一致した場合は、指定したオブジェクトが削除された、新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes a range of elements from the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Immutable.IImmutableList`1" /> から要素の範囲を削除します。</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range of elements to remove.">削除する要素の範囲の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count" vsli:raw="The number of elements to remove.">削除する要素の数を指定します。</param>
      <returns vsli:raw="A new immutable list with the elements removed.">要素が削除された新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns a new list with the first matching element in the list replaced with the specified element.">リスト内で最初に一致した要素が、指定した要素に置き換えられた、新しいリストを返します。</summary>
      <param name="oldValue" vsli:raw="The element to be replaced.">置き換えられる要素。</param>
      <param name="newValue" vsli:raw="The element to replace the first occurrence of &lt;paramref name=&quot;oldValue&quot; /&gt; with.">最初に見つかった <paramref name="oldValue" /> を置き換える要素。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use for matching &lt;paramref name=&quot;oldValue&quot; /&gt;.">
        <paramref name="oldValue" /> の照合に使用する等値比較子。</param>
      <returns vsli:raw="A new list that contains &lt;paramref name=&quot;newValue&quot; /&gt;, even if &lt;paramref name=&quot;oldvalue&quot; /&gt; is the same as &lt;paramref name=&quot;newValue&quot; /&gt;.">
        <paramref name="oldvalue" /> が <paramref name="newValue" /> と同じ場合でも、<paramref name="newValue" /> を含む新しいリスト。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">
        <paramref name="oldValue" /> はリストに存在しません。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element in the list at a given position with the specified element.">リスト内の指定された位置にある要素を、指定した要素に置換します。</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">リスト内の置換する要素の位置。</param>
      <param name="value" vsli:raw="The element to replace the old element with.">古い要素を置換する要素。</param>
      <returns vsli:raw="A new list that contains the new element, even if the element at the specified location is the same as the new element.">指定した位置にある要素が新しい要素と同じ場合でも、新しい要素を含む新しいリスト。</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableQueue`1">
      <summary vsli:raw="Represents an immutable first-in, first-out collection of objects.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">オブジェクトの変更できない先入れ先出しコレクションを表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">キュー内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Clear">
      <summary vsli:raw="Returns a new queue with all the elements removed.">要素がすべて削除された新しいキューを返します。</summary>
      <returns vsli:raw="An empty immutable queue.">空の変更できないキュー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Dequeue">
      <summary vsli:raw="Removes the first element in the immutable queue, and returns the new queue.">変更できないキューの最初の要素を削除し、新しいキューを返します。</summary>
      <returns vsli:raw="The new immutable queue with the first element removed. This value is never &lt;see langword=&quot;null&quot; /&gt;.">最初の要素が削除された、新しい変更できないキュー。 この値が <c>null</c> になることはありません。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">キューが空です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">変更できないキューの末尾に要素を追加し、新しいキューを返します。</summary>
      <param name="value" vsli:raw="The element to add.">追加する要素。</param>
      <returns vsli:raw="The new immutable queue with the specified element added.">指定された要素が追加された、新しい変更できないキュー。</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableQueue`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable queue is empty.">この変更できないキューが空かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this queue is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このキューが空の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Peek">
      <summary vsli:raw="Returns the element at the beginning of the immutable queue without removing it.">変更できないキューの先頭にある要素を削除せずに返します。</summary>
      <returns vsli:raw="The element at the beginning of the queue.">キューの先頭にある要素。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">キューが空です。</exception>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableSet`1">
      <summary vsli:raw="Represents a set of elements that can only be modified by creating a new instance of the set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">セットの新しいインスタンスを作成することによってのみ変更可能な要素のセットを表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" vsli:raw="The type of element stored in the set.">セット内に格納されている要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">この変更できないセットに、指定した要素を追加します。</summary>
      <param name="value" vsli:raw="The element to add.">追加する要素。</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">要素が追加された新しいセット。または、要素がセット内に既に存在する場合は、このセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Clear">
      <summary vsli:raw="Retrieves an empty immutable set that has the same sorting and ordering semantics as this instance.">並べ替えと順序付けのセマンティクスがこのインスタンスと同じ空の変更できないセットを取得します。</summary>
      <returns vsli:raw="An empty set that has the same sorting and ordering semantics as this instance.">並べ替えと順序付けのセマンティクスがこのインスタンスと同じ空のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable set contains a specified element.">指定した要素がこの変更できないセットに格納されているかどうかを判断します。</summary>
      <param name="value" vsli:raw="The element to locate in the set.">セット内で検索する要素。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した値がセットに含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable set.">現在の変更できないセットから、指定されたコレクションに含まれる要素を削除します。</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">このセットから削除する項目のコレクション。</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">項目が削除された新しいセット。セットに項目がなかった場合は、元のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that exist in this set and the specified set.">このセットと指定されたセットに存在する要素のみを含む、変更できないセットを作成します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableSet`1&quot; /&gt;.">現在の <see cref="T:System.Collections.Immutable.IImmutableSet`1" /> と比較するコレクション。</param>
      <returns vsli:raw="A new immutable set that contains elements that exist in both sets.">両方のセットに存在する要素を含む、新しい変更できないセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a proper (strict) subset of the specified collection.">現在の変更できないセットが、指定されたコレクションの真のサブセット (真部分集合) であるかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のセットが、指定されたコレクションの真のサブセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a proper (strict) superset of the specified collection.">現在の変更できないセットが、指定されたコレクションの真のスーパーセット (真部分集合) であるかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のセットが、指定されたコレクションの真のスーパーセットの場合は <see langword="true" />。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a subset of a specified collection.">現在の変更できないセットが、指定されたコレクションのサブセットであるかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のセットが、指定されたコレクションのサブセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a superset of a specified collection.">現在の変更できないセットが、指定されたコレクションのスーパーセットであるかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のセットが、指定されたコレクションのスーパーセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set overlaps with the specified collection.">現在の変更できないセットと、指定されたコレクションとで重なり合う部分が存在するかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and the specified collection share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のセットと指定されたコレクションとの間に共通する要素が 1 つでも存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">この変更できないセットから、指定した要素を削除します。</summary>
      <param name="value" vsli:raw="The element to remove.">削除する要素。</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">指定した要素が削除された新しいセット。セット内に要素が見つからない場合は、現在のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set and the specified collection contain the same elements.">現在の変更できないセットと指定されたコレクションに同じ要素が存在するかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">セットが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">現在のセットと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納された、変更できないセットを作成します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">現在のセットと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納された、新しいセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Determines whether the set contains a specified value.">セットに指定された値が含まれているかどうかを判断します。</summary>
      <param name="equalValue" vsli:raw="The value to search for.">検索する値。</param>
      <param name="actualValue" vsli:raw="The matching value from the set, if found, or &lt;c&gt;equalvalue&lt;/c&gt; if there are no matches.">セット内に一致する値が見つかった場合は、その値。一致する値がない場合は <c>equalvalue</c>。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a matching value was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">一致する値が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">現在のセットと指定されたコレクションのどちらかに存在するすべての要素が格納された、新しい変更できないセットを作成します。</summary>
      <param name="other" vsli:raw="The collection to add elements from.">要素の追加元のコレクション。</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">項目が追加された、新しい変更できないセット。すべての項目が既にセットにあった場合は、元のセット。</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableStack`1">
      <summary vsli:raw="Represents an immutable last-in-first-out (LIFO) collection.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">変更できない後入れ先出し (LIFO) コレクションを表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the stack.">スタック内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable stack.">変更できないスタックからすべてのオブジェクトを削除します。</summary>
      <returns vsli:raw="An empty immutable stack.">空の変更できないスタック。</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableStack`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable stack is empty.">この変更できないスタックが空かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this stack is empty; otherwise,&lt;see langword=&quot;false&quot; /&gt;.">このスタックが空の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Peek">
      <summary vsli:raw="Returns the element at the top of the immutable stack without removing it.">変更できないスタックの一番上にある要素を削除せずに返します。</summary>
      <returns vsli:raw="The element at the top of the stack.">スタックの一番上にある要素。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">スタックが空です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the new stack.">変更できないスタックの一番上にある要素を削除し、新しいスタックを返します。</summary>
      <returns vsli:raw="The new stack; never &lt;see langword=&quot;null&quot; /&gt;.">新しいスタック。<c>null</c> になることはありません。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">スタックが空です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Push(`0)">
      <summary vsli:raw="Inserts an element at the top of the immutable stack and returns the new stack.">変更できないスタックの一番上に要素を挿入し、新しいスタックを返します。</summary>
      <param name="value" vsli:raw="The element to push onto the stack.">スタックにプッシュする要素。</param>
      <returns vsli:raw="The new stack.">新しいスタック。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray">
      <summary vsli:raw="Provides methods for creating an array that is immutable; meaning it cannot be changed once it is created.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">変更できない配列を作成するためのメソッドを提供します。つまり、この配列は、作成後に変更することができません。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)">
      <summary vsli:raw="Searches the sorted immutable array for a specified element using the default comparer and returns the zero-based index of the element, if it's found.">既定の比較子を使用して、並べ替えられた変更できない配列で、指定された要素を検索します。見つかった場合は、その要素の 0 から始まるインデックスを返します。</summary>
      <param name="array" vsli:raw="The sorted array to search.">検索する並べ替えられた配列。</param>
      <param name="value" vsli:raw="The object to search for.">検索するオブジェクト。</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">配列内に格納されている要素の型。</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">項目が見つかった場合は、配列内の項目の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="value" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.Generic.ICollection`1.Count" /> のビットごとの補数です。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="value" /> が <see cref="T:System.IComparable" /> を実装していないか、または検索で <see cref="T:System.IComparable" /> を実装していない要素が検出されました。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it's found.">並べ替えられた変更できない配列で、指定された要素を検索します。見つかった場合は、その要素の 0 から始まるインデックスを返します。</summary>
      <param name="array" vsli:raw="The sorted array to search.">検索する並べ替えられた配列。</param>
      <param name="value" vsli:raw="The object to search for.">検索するオブジェクト。</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements, or null to use the default comparer.">要素を比較する場合に使用する比較子実装。または、既定の比較子を使用する場合は null。</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">配列内に格納されている要素の型。</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">項目が見つかった場合は、配列内の項目の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="value" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.Generic.ICollection`1.Count" /> のビットごとの補数です。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is null and &lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="comparer" /> が null であり <paramref name="value" /> が <see cref="T:System.IComparable" /> を実装していないか、または検索で <see cref="T:System.IComparable" /> を実装していない要素が検出されました。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it's found.">並べ替えられた変更できない配列で、指定された要素を検索します。見つかった場合は、その要素の 0 から始まるインデックスを返します。</summary>
      <param name="array" vsli:raw="The sorted array to search.">検索する並べ替えられた配列。</param>
      <param name="index" vsli:raw="The starting index of the range to search.">検索範囲の開始位置を示すインデックス。</param>
      <param name="length" vsli:raw="The length of the range to search.">検索する範囲の長さ。</param>
      <param name="value" vsli:raw="The object to search for.">検索するオブジェクト。</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">配列内に格納されている要素の型。</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">項目が見つかった場合は、配列内の項目の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="value" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.Generic.ICollection`1.Count" /> のビットごとの補数です。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="value" /> が <see cref="T:System.IComparable" /> を実装していないか、または検索で <see cref="T:System.IComparable" /> を実装していない要素が検出されました。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; do not specify a valid range in &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> および <paramref name="length" /> は <paramref name="array" /> の有効な範囲を指定していません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the lower bound of &lt;paramref name=&quot;array&quot; /&gt;.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;length&quot; /&gt; is less than zero.">
        <paramref name="index" /> は、<paramref name="array" /> の下限を下回っています。

または -

<paramref name="length" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element.">並べ替えられた変更できない配列で、指定された要素を検索し、その要素のゼロから始まるインデックスを返します。</summary>
      <param name="array" vsli:raw="The sorted array to search.">検索する並べ替えられた配列。</param>
      <param name="index" vsli:raw="The starting index of the range to search.">検索範囲の開始位置を示すインデックス。</param>
      <param name="length" vsli:raw="The length of the range to search.">検索する範囲の長さ。</param>
      <param name="value" vsli:raw="The object to search for.">検索するオブジェクト。</param>
      <param name="comparer" vsli:raw="The comparer to use when comparing elements for equality or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">要素の等値性を比較する場合に使用する比較子。または、既定の比較子を使用する場合は <see langword="null" />。</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">配列内に格納されている要素の型。</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">項目が見つかった場合は、配列内の項目の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="value" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.Generic.ICollection`1.Count" /> のビットごとの補数です。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is null and &lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="comparer" /> が null であり <paramref name="value" /> が <see cref="T:System.IComparable" /> を実装していないか、または検索で <see cref="T:System.IComparable" /> を実装していない要素が検出されました。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; do not specify a valid range in &lt;paramref name=&quot;array&quot; /&gt;.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not compatible with the elements of &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> および <paramref name="length" /> は <paramref name="array" /> の有効な範囲を指定していません。
または
<paramref name="comparer" /> が <see langword="null" /> で、<paramref name="value" /> は <paramref name="array" /> の要素と互換性がない型です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the lower bound of &lt;paramref name=&quot;array&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;length&quot; /&gt; is less than zero.">
        <paramref name="index" /> は、<paramref name="array" /> の下限を下回っています。
または
<paramref name="length" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1">
      <summary vsli:raw="Creates an empty immutable array.">空の変更できない配列を作成します。</summary>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">配列内に格納されている要素の型。</typeparam>
      <returns vsli:raw="An empty immutable array.">空の変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified object.">指定されたオブジェクトを格納する、変更できない配列を作成します。</summary>
      <param name="item" vsli:raw="The object to store in the array.">配列に格納するオブジェクト。</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">配列内に格納されている要素の型。</typeparam>
      <returns vsli:raw="An immutable array that contains the specified object.">指定されたオブジェクトを格納する、変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">指定されたオブジェクトを格納する、変更できない配列を作成します。</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">配列に格納する最初のオブジェクト。</param>
      <param name="item2" vsli:raw="The second object to store in the array.">配列に格納する 2 番目のオブジェクト。</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">配列内に格納されている要素の型。</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">指定されたオブジェクトを格納する、変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">指定されたオブジェクトを格納する、変更できない配列を作成します。</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">配列に格納する最初のオブジェクト。</param>
      <param name="item2" vsli:raw="The second object to store in the array.">配列に格納する 2 番目のオブジェクト。</param>
      <param name="item3" vsli:raw="The third object to store in the array.">配列に格納する 3 番目のオブジェクト。</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">配列内に格納されている要素の型。</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">指定されたオブジェクトを格納する、変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">指定されたオブジェクトを格納する、変更できない配列を作成します。</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">配列に格納する最初のオブジェクト。</param>
      <param name="item2" vsli:raw="The second object to store in the array.">配列に格納する 2 番目のオブジェクト。</param>
      <param name="item3" vsli:raw="The third object to store in the array.">配列に格納する 3 番目のオブジェクト。</param>
      <param name="item4" vsli:raw="The fourth object to store in the array.">配列に格納する 4 番目のオブジェクト。</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">配列内に格納されている要素の型。</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">指定されたオブジェクトを格納する、変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[])">
      <summary vsli:raw="Creates an immutable array from the specified array of objects.">指定されたオブジェクトの配列から、変更できない配列を作成します。</summary>
      <param name="items" vsli:raw="The array of objects to populate the array with.">配列に読み込むオブジェクトの配列。</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">配列内に格納されている要素の型。</typeparam>
      <returns vsli:raw="An immutable array that contains the array of items.">項目の配列を格納する、変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates an immutable array with specified objects from another array.">別の配列から指定されたオブジェクトで、変更できない配列を作成します。</summary>
      <param name="items" vsli:raw="The source array of objects.">オブジェクトのソース配列。</param>
      <param name="start" vsli:raw="The index of the first element to copy from &lt;paramref name=&quot;items&quot; /&gt;.">
        <paramref name="items" /> からコピーする最初の要素のインデックス。</param>
      <param name="length" vsli:raw="The number of elements from &lt;paramref name=&quot;items&quot; /&gt; to include in this immutable array.">この変更できない配列に含める、<paramref name="items" /> の要素の数。</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">配列内に格納されている要素の型。</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects from the source array.">ソース配列から指定されたオブジェクトを格納する、変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)">
      <summary vsli:raw="Creates an immutable array with the specified objects from another immutable array.">別の変更できない配列から指定されたオブジェクトで、変更できない配列を作成します。</summary>
      <param name="items" vsli:raw="The source array of objects.">オブジェクトのソース配列。</param>
      <param name="start" vsli:raw="The index of the first element to copy from &lt;paramref name=&quot;items&quot; /&gt;.">
        <paramref name="items" /> からコピーする最初の要素のインデックス。</param>
      <param name="length" vsli:raw="The number of elements from &lt;paramref name=&quot;items&quot; /&gt; to include in this immutable array.">この変更できない配列に含める、<paramref name="items" /> の要素の数。</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">配列内に格納されている要素の型。</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects from the source array.">ソース配列から指定されたオブジェクトを格納する、変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1">
      <summary vsli:raw="Creates a mutable array that can be converted to an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray&quot; /&gt; without allocating new memory.">新しいメモリを割り当てずに <see cref="T:System.Collections.Immutable.ImmutableArray" /> に変換できる可変配列を作成します。</summary>
      <typeparam name="T" vsli:raw="The type of elements stored in the builder.">ビルダー内に格納されている要素の型。</typeparam>
      <returns vsli:raw="A mutable array of the specified type that can be efficiently converted to an immutable array.">変更できない配列に効率的に変換できる、指定された型の可変配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)">
      <summary vsli:raw="Creates a mutable array that can be converted to an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray&quot; /&gt; without allocating new memory.">新しいメモリを割り当てずに <see cref="T:System.Collections.Immutable.ImmutableArray" /> に変換できる可変配列を作成します。</summary>
      <param name="initialCapacity" vsli:raw="The initial capacity of the builder.">ビルダーの初期量。</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the builder.">ビルダー内に格納されている要素の型。</typeparam>
      <returns vsli:raw="A mutable array of the specified type that can be efficiently converted to an immutable array.">変更できない配列に効率的に変換できる、指定された型の可変配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; populated with the specified items.">指定された項目が設定された、新しい <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> を作成します。</summary>
      <param name="items" vsli:raw="The elements to add to the array.">配列に追加する要素。</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">配列内に格納されている要素の型。</typeparam>
      <returns vsli:raw="An immutable array that contains the specified items.">指定された項目を格納する、変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">
        <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">結果の配列の初期化に使うソース配列。</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array.">ソース配列の各要素に適用する関数。</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">
        <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">結果の配列の初期化に使うソース配列。</param>
      <param name="start" vsli:raw="The index of the first element in the source array to include in the resulting array.">結果の配列に含める、ソース配列の最初の要素のインデックス。</param>
      <param name="length" vsli:raw="The number of elements from the source array to include in the resulting array.">結果の配列に含める、ソース配列の要素の数。</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array included in the resulting array.">結果の配列に含める、ソース配列の各要素に適用する関数。</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">
        <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">結果の配列の初期化に使うソース配列。</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array.">ソース配列の各要素に適用する関数。</param>
      <param name="arg" vsli:raw="An argument to be passed to the selector mapping function.">セレクター マッピング関数に渡す引数。</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TArg" vsli:raw="The type of argument to pass to the selector mapping function." />
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">
        <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">結果の配列の初期化に使うソース配列。</param>
      <param name="start" vsli:raw="The index of the first element in the source array to include in the resulting array.">結果の配列に含める、ソース配列の最初の要素のインデックス。</param>
      <param name="length" vsli:raw="The number of elements from the source array to include in the resulting array.">結果の配列に含める、ソース配列の要素の数。</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array included in the resulting array.">結果の配列に含める、ソース配列の各要素に適用する関数。</param>
      <param name="arg" vsli:raw="An argument to be passed to the selector mapping function.">セレクター マッピング関数に渡す引数。</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TArg" vsli:raw="The type of argument to be passed to the selector mapping function." />
      <typeparam name="TResult" vsli:raw="The type of element to be stored in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates an immutable array from the specified collection.">指定されたコレクションから、変更できない配列を作成します。</summary>
      <param name="items" vsli:raw="The collection of objects to copy to the immutable array.">変更できない配列にコピーするオブジェクトのコレクション。</param>
      <typeparam name="TSource" vsli:raw="The type of elements contained in &lt;paramref name=&quot;items&quot; /&gt;.">
        <paramref name="items" /> に格納されている要素の型。</typeparam>
      <returns vsli:raw="An immutable array that contains the specified collection of objects.">指定されたオブジェクトのコレクションを格納する、変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Creates an immutable array from the current contents of the builder's array.">ビルダーの配列の現在の内容から、変更できない配列を作成します。</summary>
      <param name="builder" vsli:raw="The builder to create the immutable array from.">変更できない配列を作成するためのビルダー。</param>
      <typeparam name="TSource" vsli:raw="The type of elements contained in the immutable array.">変更できない配列に格納されている要素の型。</typeparam>
      <returns vsli:raw="An immutable array that contains the current contents of the builder's array.">ビルダーの配列の現在の内容を含む、変更できない配列。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1">
      <summary vsli:raw="Represents an array that is immutable; meaning it cannot be changed once it is created.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">変更できない配列を表します。つまり、この配列は、作成後に変更することができません。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">配列に格納される要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Add(`0)">
      <summary vsli:raw="Returns a copy of the original array with the specified item added to the end.">元の配列のコピーの末尾に指定した項目を追加して返します。</summary>
      <param name="item" vsli:raw="The item to be added to the end of the array.">配列の末尾に追加する項目。</param>
      <returns vsli:raw="A new array with the specified item added to the end.">指定した項目が末尾に追加された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">元の配列のコピーの末尾に指定した要素を追加して返します。</summary>
      <param name="items" vsli:raw="The elements to add to the array.">配列に追加する要素。</param>
      <returns vsli:raw="A new array with the elements added.">要素が追加された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">元の配列のコピーの末尾に指定した要素を追加して返します。</summary>
      <param name="items" vsli:raw="The elements to add to the array.">配列に追加する要素。</param>
      <returns vsli:raw="A new array with the elements added.">要素が追加された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.As``1">
      <summary vsli:raw="Returns a new immutable array that contains the elements of this array cast to a different type.">異なる型にキャストされる配列の要素が格納された、新しい変更できない配列を返します。</summary>
      <typeparam name="TOther" vsli:raw="The type of array element to return.">返される配列要素の型。</typeparam>
      <returns vsli:raw="An immutable array that contains the elements of this array, cast to a different type. If the cast fails, returns an array whose &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">異なる型にキャストされる配列の要素が格納された、変更できない配列。 キャストに失敗した場合、<see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> プロパティが <see langword="true" /> を返す配列を返します。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsMemory">
      <summary vsli:raw="Creates a new read-only memory region over this immutable array.">この変更できない配列に対して、新しい読み取り専用のメモリ領域を作成します。</summary>
      <returns vsli:raw="The read-only memory representation of this immutable array.">この変更できない配列の読み取り専用のメモリ表現。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsSpan">
      <summary vsli:raw="Creates a new read-only span over this immutable array.">この変更できない配列に対して、新しい読み取り専用のスパンを作成します。</summary>
      <returns vsli:raw="The read-only span representation of this immutable array.">この変更できない配列の読み取り専用のスパン表現。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Builder">
      <summary vsli:raw="A writable array accessor that can be converted into an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; instance without allocating extra memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">余分なメモリを割り当てずに <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> インスタンスに変換できる書き込み可能な配列アクセサー。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Add(`0)">
      <summary vsli:raw="Adds the specified item to the array.">指定した項目を配列に追加します。</summary>
      <param name="item" vsli:raw="The object to add to the array.">配列に追加するオブジェクト。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[])">
      <summary vsli:raw="Adds the specified items to the end of the array.">指定した項目を配列の末尾に追加します。</summary>
      <param name="items" vsli:raw="The items to add to the array.">配列に追加する項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[],System.Int32)">
      <summary vsli:raw="Adds the specified items to the end of the array.">指定した項目を配列の末尾に追加します。</summary>
      <param name="items" vsli:raw="The items to add to the array.">配列に追加する項目。</param>
      <param name="length" vsli:raw="The number of elements from the source array to add.">追加するソース配列の要素の数。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the specified items to the end of the array.">指定した項目を配列の末尾に追加します。</summary>
      <param name="items" vsli:raw="The items to add to the array.">配列に追加する項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Adds the specified items to the end of the array.">指定した項目を配列の末尾に追加します。</summary>
      <param name="items" vsli:raw="The items to add to the array.">配列に追加する項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0},System.Int32)">
      <summary vsli:raw="Adds the specified items to the end of the array.">指定した項目を配列の末尾に追加します。</summary>
      <param name="items" vsli:raw="The items to add to the array.">配列に追加する項目。</param>
      <param name="length" vsli:raw="The number of elements from the source array to add.">追加するソース配列の要素の数。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0}.Builder)">
      <summary vsli:raw="Adds the specified items to the end of the array.">指定した項目を配列の末尾に追加します。</summary>
      <param name="items" vsli:raw="The items to add to the array.">配列に追加する項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(``0[])">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">配列の末尾に、配列内の現在の型から派生する、指定した項目を追加します。</summary>
      <param name="items" vsli:raw="The items to add to end of the array.">配列の末尾に追加する項目。</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">配列内の既存の項目の型から派生する型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">配列の末尾に、配列内の現在の型から派生する、指定した項目を追加します。</summary>
      <param name="items" vsli:raw="The items to add to the end of the array.">配列の末尾に追加する項目。</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">配列内の既存の項目の型から派生する型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">配列の末尾に、配列内の現在の型から派生する、指定した項目を追加します。</summary>
      <param name="items" vsli:raw="The items to add to the end of the array.">配列の末尾に追加する項目。</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">配列内の既存の項目の型から派生する型。</typeparam>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">
      <summary vsli:raw="Gets or sets the length of the internal array. When set, the internal array is reallocated to the given capacity if it is not already the specified length.">内部配列の長さを取得または設定します。 設定すると、内部配列は、指定した長さになっていない場合、所定の容量に再割り当てされます。</summary>
      <returns vsli:raw="The length of the internal array.">内部配列の長さ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the array.">配列からすべての項目を削除します。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the array contains a specific value.">配列に特定の値が格納されているかどうかを判断します。</summary>
      <param name="item" vsli:raw="The object to locate in the array.">配列内で検索するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">オブジェクトが見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the current contents to the specified array.">指定した配列に現在の内容をコピーします。</summary>
      <param name="array" vsli:raw="The array to copy to.">コピー先の配列。</param>
      <param name="index" vsli:raw="The index to start the copy operation.">コピー操作の開始位置を示すインデックス。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">
      <summary vsli:raw="Gets or sets the number of items in the array.">配列内の項目の数を取得または設定します。</summary>
      <returns vsli:raw="The number of items in the array.">配列内の項目の数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.GetEnumerator">
      <summary vsli:raw="Gets an object that can be used to iterate through the collection.">コレクションを反復処理するために使用できるオブジェクトを取得します。</summary>
      <returns vsli:raw="An object that can be used to iterate through the collection.">コレクションを反復処理するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0)">
      <summary vsli:raw="Determines the index of a specific item in the array.">配列内の特定の項目のインデックスを確認します。</summary>
      <param name="item" vsli:raw="The item to locate in the array.">配列内で検索する項目。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">リストに存在する場合は <paramref name="item" /> のインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Determines the index of the specified item.">指定した項目のインデックスを確認します。</summary>
      <param name="item" vsli:raw="The item to locate in the array.">配列内で検索する項目。</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">検索の開始位置。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">リストに存在する場合は <paramref name="item" /> のインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Determines the index of the specified item.">指定した項目のインデックスを確認します。</summary>
      <param name="item" vsli:raw="The item to locate in the array.">配列内で検索する項目。</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">検索の開始位置。</param>
      <param name="count" vsli:raw="The number of elements to search.">検索する要素数。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">リストに存在する場合は <paramref name="item" /> のインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Determines the index for the specified item.">指定した項目のインデックスを決定します。</summary>
      <param name="item" vsli:raw="The item to locate in the array.">配列内で検索する項目。</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">検索の開始位置を示すインデックス。</param>
      <param name="count" vsli:raw="The starting position of the search.">検索の開始位置。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">検索に使用する等値比較子。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">リストに存在する場合は <paramref name="item" /> のインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item in the array at the specified index.">配列内の指定したインデックス位置に項目を挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the item.">項目を挿入する位置を示す 0 から始まるインデックス。</param>
      <param name="item" vsli:raw="The object to insert into the array.">配列に挿入するオブジェクト。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the item at the specified index.">指定したインデックス位置にある項目を取得または設定します。</summary>
      <param name="index" vsli:raw="The index of the item to get or set.">取得または設定する項目のインデックス。</param>
      <returns vsli:raw="The item at the specified index.">指定したインデックスにある項目。</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="The specified index is not in the array.">指定したインデックスは配列内にありません。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element at the specified index.">指定したインデックスにある要素への読み取り専用参照を取得します。</summary>
      <param name="index" vsli:raw="The item index.">項目のインデックス。</param>
      <returns vsli:raw="The read-only reference to the element at the specified index.">指定したインデックスにある要素への読み取り専用参照。</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is greater or equal to the array count.">
        <paramref name="index" /> が配列数以上です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">指定した項目がこの配列内で最後に出現する位置を表す、0 から始まるインデックスを決定します。</summary>
      <param name="item" vsli:raw="The item to search for.">検索対象の項目。</param>
      <returns vsli:raw="The 0-based index where the item was found; or -1 if it could not be found.">項目が見つかった位置を示す、0 から始まるインデックス。見つからなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">指定した項目がこの配列内で最後に出現する位置を表す、0 から始まるインデックスを決定します。</summary>
      <param name="item" vsli:raw="The item to search for.">検索対象の項目。</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">検索の開始位置。</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">項目が見つかった位置を示す、配列の 0 から始まるインデックス。見つからなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">指定した項目がこの配列内で最後に出現する位置を表す、0 から始まるインデックスを決定します。</summary>
      <param name="item" vsli:raw="The item to search for.">検索対象の項目。</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">検索の開始位置。</param>
      <param name="count" vsli:raw="The number of elements to search.">検索する要素数。</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">項目が見つかった位置を示す、配列の 0 から始まるインデックス。見つからなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">指定した項目がこの配列内で最後に出現する位置を表す、0 から始まるインデックスを決定します。</summary>
      <param name="item" vsli:raw="The item to search for.">検索対象の項目。</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">検索の開始位置。</param>
      <param name="count" vsli:raw="The number of elements to search.">検索する要素数。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">検索に使用する等値比較子。</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">項目が見つかった位置を示す、配列の 0 から始まるインデックス。見つからなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.MoveToImmutable">
      <summary vsli:raw="Extracts the internal array as an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; and replaces it              with a zero length array.">内部配列を <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> として抽出し、長さ 0 の配列で置き換えます。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="When &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.Builder.Count&quot; /&gt; doesn't              equal &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity&quot; /&gt;.">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count" /> が <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity" /> と等しくない場合。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the specified element.">指定された要素を削除します。</summary>
      <param name="element" vsli:raw="The item to remove.">削除する項目。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;element&quot; /&gt; was found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="element" /> が見つかって削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index from the array.">配列内の指定したインデックス位置にある項目を削除します。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">削除する項目の 0 から始まるインデックス。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Reverse">
      <summary vsli:raw="Reverses the order of elements in the collection.">コレクションの要素の順序を反転させます。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort">
      <summary vsli:raw="Sorts the contents of the array.">配列の内容を並べ替えます。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the contents of the array.">配列の内容を並べ替えます。</summary>
      <param name="comparer" vsli:raw="The comparer to use for sorting. If comparer is &lt;see langword=&quot;null&quot; /&gt;, the default comparer for the elements type in the array is used.">並べ替えに使用する比較子。 比較子が <see langword="null" /> の場合、配列内の要素の型の既定の比較子が使用されます。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire array using the specified &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt;.">指定した <see cref="T:System.Comparison`1" /> を使って、配列全体の要素を並べ替えます。</summary>
      <param name="comparison" vsli:raw="The &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt; to use when comparing elements.">要素を比較する場合に使用する <see cref="T:System.Comparison`1" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is null.">
        <paramref name="comparison" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the contents of the array.">配列の内容を並べ替えます。</summary>
      <param name="index" vsli:raw="The starting index for the sort.">並べ替えの開始インデックス。</param>
      <param name="count" vsli:raw="The number of elements to include in the sort.">並べ替えに含める要素の数。</param>
      <param name="comparer" vsli:raw="The comparer to use for sorting. If comparer is &lt;see langword=&quot;null&quot; /&gt;, the default comparer for the elements type in the array is used.">並べ替えに使用する比較子。 比較子が <see langword="null" /> の場合、配列内の要素の型の既定の比較子が使用されます。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">配列を反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that iterates through the array.">配列を反復処理する列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">配列を反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that iterates through the array.">配列を反復処理する列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToArray">
      <summary vsli:raw="Creates a new array with the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">この <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" /> の現在の内容を使用して、新しい配列を作成します。</summary>
      <returns vsli:raw="A new array with the contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">この <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" /> の内容を使用した新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable">
      <summary vsli:raw="Returns an immutable array that contains the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">この <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" /> の現在の内容を含む、変更できない配列を返します。</summary>
      <returns vsli:raw="An immutable array that contains the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">この <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" /> の現在の内容を含む、変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastArray``1">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct by casting the underlying array to an array of type &lt;typeparamref name=&quot;TOther&quot; /&gt;.">基になる配列を <paramref name="TOther" /> 型の配列にキャストすることによって、<see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 構造体のインスタンスを初期化します。</summary>
      <typeparam name="TOther" vsli:raw="The type of array element to return." />
      <exception cref="T:System.InvalidCastException" vsli:raw="The cast is illegal.">キャストが正しくない場合にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct based on the contents of an existing instance, allowing a covariant static cast to efficiently reuse the existing array.">既存のインスタンスの内容に基づいて、<see cref="T:System.Collections.Immutable.ImmutableArray`1" /> の新しいインスタンスを初期化します。既存の配列を効率的に再利用するために、共変の静的キャストを許可します。</summary>
      <param name="items" vsli:raw="The array to initialize the array with. No copy is made.">配列の初期化に使用する配列。 コピーは作成されません。</param>
      <typeparam name="TDerived" vsli:raw="The type of array element to return." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Clear">
      <summary vsli:raw="Returns an array with all the elements removed.">要素がすべて削除された配列を返します。</summary>
      <returns vsli:raw="An array with all of the elements removed.">要素がすべて削除された配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Contains(`0)">
      <summary vsli:raw="Determines whether the specified item exists in the array.">指定した項目が配列内にあるかどうかを判断します。</summary>
      <param name="item" vsli:raw="The item to search for.">検索対象の項目。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified item was found in the array; otherwise &lt;see langword=&quot;false&quot; /&gt;.">指定した項目が配列内で見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the contents of this array to the specified array.">この配列の内容を指定した配列にコピーします。</summary>
      <param name="destination" vsli:raw="The array to copy to.">コピー先の配列。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the contents of this array to the specified array starting at the specified destination index.">この配列の内容を、指定した配列の指定したインデックスを開始位置としてコピーします。</summary>
      <param name="destination" vsli:raw="The array to copy to.">コピー先の配列。</param>
      <param name="destinationIndex" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; where copying begins.">
        <paramref name="array" /> 内のコピー開始位置を示すインデックス。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies the specified items in this array to the specified array at the specified starting index.">この配列内の指定した項目を、指定した配列の指定したインデックスを開始位置としてコピーします。</summary>
      <param name="sourceIndex" vsli:raw="The index of this array where copying begins.">この配列内のコピー開始位置を示すインデックス。</param>
      <param name="destination" vsli:raw="The array to copy to.">コピー先の配列。</param>
      <param name="destinationIndex" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; where copying begins.">
        <paramref name="array" /> 内のコピー開始位置を示すインデックス。</param>
      <param name="length" vsli:raw="The number of elements to copy from this array.">この配列からコピーする要素の数。</param>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableArray`1.Empty">
      <summary vsli:raw="Gets an empty immutable array.">空の変更できない配列を取得します。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Enumerator">
      <summary vsli:raw="An array enumerator.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">配列の列挙子。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Enumerator.Current">
      <summary vsli:raw="Gets the current item.">現在の項目を取得します。</summary>
      <returns vsli:raw="The current item.">現在の項目。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances to the next value in the array.">配列内の次の値に進みます。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if another item exists in the array; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">配列に他の項目が存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Indicates whether specified array is equal to this array.">指定した配列がこの配列と等しいかどうかを示します。</summary>
      <param name="other" vsli:raw="An object to compare with this object.">このオブジェクトと比較するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;other&quot; /&gt; is equal to this array; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="other" /> がこの配列と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)">
      <summary vsli:raw="Determines if this array is equal to the specified object.">この配列が指定したオブジェクトと等しいかどうかを判断します。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this array.">この配列と比較する <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this array is equal to &lt;paramref name=&quot;obj&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">この配列が <paramref name="obj" /> と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the contents of the array.">配列の内容を反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator.">列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetHashCode">
      <summary vsli:raw="Returns a hash code for this instance.">このインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.">このインスタンスのハッシュ コード。ハッシュ アルゴリズムでもハッシュ テーブルのようなデータ構造でも使用できるもの。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)">
      <summary vsli:raw="Searches the array for the specified item.">指定された項目を配列内で検索します。</summary>
      <param name="item" vsli:raw="The item to search for.">検索対象の項目。</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">項目が見つかった場合は、その項目の 0 から始まるインデックスでの位置。見つからなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item.">指定された項目を配列内で検索します。</summary>
      <param name="item" vsli:raw="The item to search for.">検索対象の項目。</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">検索の開始位置を示すインデックス。</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">項目が見つかった場合は、その項目の 0 から始まるインデックスでの位置。見つからなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item.">指定された項目を配列内で検索します。</summary>
      <param name="item" vsli:raw="The item to search for.">検索対象の項目。</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">検索の開始位置を示すインデックス。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">検索に使用する等値比較子。</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">項目が見つかった場合は、その項目の 0 から始まるインデックスでの位置。見つからなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item.">指定された項目を配列内で検索します。</summary>
      <param name="item" vsli:raw="The item to search for.">検索対象の項目。</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">検索の開始位置を示すインデックス。</param>
      <param name="count" vsli:raw="The number of elements to search.">検索する要素数。</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">項目が見つかった場合は、その項目の 0 から始まるインデックスでの位置。見つからなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item.">指定された項目を配列内で検索します。</summary>
      <param name="item" vsli:raw="The item to search for.">検索対象の項目。</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">検索の開始位置を示すインデックス。</param>
      <param name="count" vsli:raw="The number of elements to search.">検索する要素数。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">検索に使用する等値比較子。</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">項目が見つかった場合は、その項目の 0 から始まるインデックスでの位置。見つからなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Returns a new array with the specified value inserted at the specified position.">指定した値が指定した位置に挿入された新しい配列を返します。</summary>
      <param name="index" vsli:raw="The 0-based index into the array at which the new item should be added.">新しい項目が追加される位置を示す、配列の 0 から始まるインデックス。</param>
      <param name="item" vsli:raw="The item to insert at the start of the array.">配列の先頭に挿入する項目。</param>
      <returns vsli:raw="A new array with the item inserted at the specified index.">指定したインデックス位置に項目が挿入された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">指定したインデックス位置に指定した値を挿入します。</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">値を挿入する位置を示すインデックス。</param>
      <param name="items" vsli:raw="The elements to insert.">挿入する要素。</param>
      <returns vsli:raw="A new immutable array with the items inserted at the specified index.">指定したインデックス位置に項目が挿入された新しい変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">指定したインデックス位置に指定した値を挿入します。</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">値を挿入する位置を示すインデックス。</param>
      <param name="items" vsli:raw="The elements to insert.">挿入する要素。</param>
      <returns vsli:raw="A new immutable array with the items inserted at the specified index.">指定したインデックス位置に項目が挿入された新しい変更できない配列。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefault">
      <summary vsli:raw="Gets a value indicating whether this array was declared but not initialized.">この配列が宣言されていても初期化されていないかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> が <see langword="null" /> の場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty">
      <summary vsli:raw="Gets a value indicating whether this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty or is not initialized.">この <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> が空か、初期化されていないかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.Collections.Immutable.ImmutableArray`1.Empty&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />が<see cref="T:System.Collections.Immutable.ImmutableArray`1" /> また<see langword="null" />は<see langword="false" />の場合は。それ以外の場合は。 <see cref="F:System.Collections.Immutable.ImmutableArray`1.Empty" /></returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsEmpty">
      <summary vsli:raw="Gets a value indicating whether this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty.">この <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> が空かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が空の場合は <see cref="T:System.Collections.Immutable.ImmutableArray`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index in the immutable array.">変更できない配列内の指定したインデックス位置にある要素を取得します。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get.">取得する要素の 0 から始まるインデックス。</param>
      <returns vsli:raw="The element at the specified index in the immutable array.">変更できない配列内の指定したインデックス位置にある要素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element at the specified &lt;paramref name=&quot;index&quot; /&gt; in the read-only list.">読み取り専用のリスト内の指定した <paramref name="index" /> にある要素への読み取り専用参照を取得します。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get a reference to.">参照を取得する要素の、0 から始まるインデックス番号。</param>
      <returns vsli:raw="A read-only reference to the element at the specified &lt;paramref name=&quot;index&quot; /&gt; in the read-only list.">読み取り専用のリスト内の指定した <paramref name="index" /> にある要素への読み取り専用参照。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">指定された項目を配列内で検索します。検索は、配列の末尾から開始されます。</summary>
      <param name="item" vsli:raw="The item to search for.">検索対象の項目。</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">項目が見つかった位置を示す、配列の 0 から始まるインデックス。見つからなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">指定された項目を配列内で検索します。検索は、配列の末尾から開始されます。</summary>
      <param name="item" vsli:raw="The item to search for.">検索対象の項目。</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">検索の開始位置を示すインデックス。</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">項目が見つかった位置を示す、配列の 0 から始まるインデックス。見つからなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">指定された項目を配列内で検索します。検索は、配列の末尾から開始されます。</summary>
      <param name="item" vsli:raw="The item to search for.">検索対象の項目。</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">検索の開始位置を示すインデックス。</param>
      <param name="count" vsli:raw="The number of elements to search.">検索する要素数。</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">項目が見つかった位置を示す、配列の 0 から始まるインデックス。見つからなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">指定された項目を配列内で検索します。検索は、配列の末尾から開始されます。</summary>
      <param name="item" vsli:raw="The item to search for.">検索対象の項目。</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">検索の開始位置を示すインデックス。</param>
      <param name="count" vsli:raw="The number of elements to search.">検索する要素数。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">検索に使用する等値比較子。</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">項目が見つかった位置を示す、配列の 0 から始まるインデックス。見つからなかった場合は -1。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Length">
      <summary vsli:raw="Gets the number of elements in the array.">配列内の要素の数を取得します。</summary>
      <returns vsli:raw="The number of elements in the array.">配列の要素数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.OfType``1">
      <summary vsli:raw="Filters the elements of this array to those assignable to the specified type.">この配列の要素をフィルター処理して、指定された型に割り当てることができる要素を抽出します。</summary>
      <typeparam name="TResult" vsli:raw="The type to filter the elements of the sequence on.">シーケンスの要素をフィルター処理する型。</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; that contains elements from the input sequence of type of &lt;paramref name=&quot;TResult&quot; /&gt;.">
        <paramref name="TResult" /> の型の入力シーケンスの要素を格納する <see cref="T:System.Collections.IEnumerable" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a value that indicates if two arrays are equal.">2 つの配列が等しいかどうかを示す値を返します。</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">演算子の左辺にある配列。</param>
      <param name="right" vsli:raw="The array to the right of the operator.">演算子の右辺にある配列。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">配列が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary vsli:raw="Returns a value that indicates if two arrays are equal.">2 つの配列が等しいかどうかを示す値を返します。</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">演算子の左辺にある配列。</param>
      <param name="right" vsli:raw="The array to the right of the operator.">演算子の右辺にある配列。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">配列が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a value that indicates whether two arrays are not equal.">2 つの配列が等しくないかどうかを示す値を返します。</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">演算子の左辺にある配列。</param>
      <param name="right" vsli:raw="The array to the right of the operator.">演算子の右辺にある配列。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">配列が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary vsli:raw="Checks for inequality between two array.">2 つの配列が等しくないかどうかを確認します。</summary>
      <param name="left" vsli:raw="The object to the left of the operator.">演算子の左辺にあるオブジェクト。</param>
      <param name="right" vsli:raw="The object to the right of the operator.">演算子の右辺にあるオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two arrays are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">2 つの配列が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0)">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array. If no match is found, the current array is returned.">最初に見つかった指定された要素を配列から削除した配列を返します。 一致するものが見つからない場合は、現在の配列が返されます。</summary>
      <param name="item" vsli:raw="The item to remove.">削除する項目。</param>
      <returns vsli:raw="A new array with the item removed.">項目が削除された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array.  &#xA;  &#xA; If no match is found, the current array is returned.">最初に見つかった指定された要素を配列から削除した配列を返します。  
 一致するものが見つからない場合は、現在の配列が返されます。</summary>
      <param name="item" vsli:raw="The item to remove.">削除する項目。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">検索に使用する等値比較子。</param>
      <returns vsli:raw="A new array with the specified item removed.">指定した項目が削除された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the items from the array that meet the specified condition.">指定した条件を満たすすべての項目を配列から削除します。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">削除する要素の条件を定義するデリゲート。</param>
      <returns vsli:raw="A new array with items that meet the specified condition removed.">指定された条件を満たす項目が削除された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Returns an array with the element at the specified position removed.">指定した位置の要素が削除された配列を返します。</summary>
      <param name="index" vsli:raw="The 0-based index of the element to remove from the returned array.">返された配列から削除する要素の 0 から始まるインデックス。</param>
      <returns vsli:raw="A new array with the item at the specified index removed.">指定したインデックス位置の項目が削除された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the specified items from this array.">指定した項目をこの配列から削除します。</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">このリストに一致するものが見つかった場合に削除する項目。</param>
      <returns vsli:raw="A new array with the elements removed.">要素が削除された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this array.">指定した項目をこの配列から削除します。</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">このリストに一致するものが見つかった場合に削除する項目。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">検索に使用する等値比較子。</param>
      <returns vsli:raw="A new array with the elements removed.">要素が削除された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Removes the specified values from this list.">指定した値をこのリストから削除します。</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">このリストに一致するものが見つかった場合に削除する項目。</param>
      <returns vsli:raw="A new list with the elements removed.">要素が削除された新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this list.">指定した項目をこのリストから削除します。</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">このリストに一致するものが見つかった場合に削除する項目。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">検索に使用する等値比較子。</param>
      <returns vsli:raw="A new array with the elements removed.">要素が削除された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Returns an array with the elements at the specified position removed.">指定した位置の要素が削除された配列を返します。</summary>
      <param name="index" vsli:raw="The 0-based index of the starting element to remove from the array.">配列から削除する開始要素の 0 から始まるインデックス。</param>
      <param name="length" vsli:raw="The number of elements to remove from the array.">配列から削除する要素の数。</param>
      <returns vsli:raw="The new array with the specified elements removed.">指定した要素が削除された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">指定された値と等しい、配列内の最初の要素を検索して、その値を、指定した新しい値に置き換えます。</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">配列内で検索して置換する値。</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">
        <c>oldvalue</c> を置き換える値。</param>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">新しい値と古い値が同じ場合でも、<paramref name="newValue" /> が格納されている新しい配列。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">
        <paramref name="oldValue" /> が配列内に見つかりません。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">指定された値と等しい、配列内の最初の要素を検索して、その値を、指定した新しい値に置き換えます。</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">配列内で検索して置換する値。</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">
        <c>oldvalue</c> を置き換える値。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare values.">値の比較に使用する等値比較子。</param>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">新しい値と古い値が同じ場合でも、<paramref name="newValue" /> が格納されている新しい配列。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">
        <paramref name="oldValue" /> が配列内に見つかりません。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">指定したインデックス位置の項目を、指定した項目で置き換えます。</summary>
      <param name="index" vsli:raw="The index of the item to replace.">置換する項目のインデックス。</param>
      <param name="item" vsli:raw="The item to add to the list.">リストに追加する項目。</param>
      <returns vsli:raw="The new array that contains &lt;paramref name=&quot;item&quot; /&gt; at the specified index.">指定したインデックス位置に <paramref name="item" /> を格納している新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort">
      <summary vsli:raw="Sorts the elements in the immutable array using the default comparer.">既定の比較子を使用して、変更できない配列内の要素を並べ替えます。</summary>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">配列内の項目を並べ替えた順で格納している新しい変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the immutable array using the specified comparer.">指定した比較子を使用して、変更できない配列内の要素を並べ替えます。</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">要素を比較する場合に使用する実装。または、既定の比較子を使用する場合は <see langword="null" />。</param>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">配列内の項目を並べ替えた順で格納している新しい変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; using             the specified &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt;.">指定した <see cref="T:System.Comparison`1" /> を使用して、<see cref="T:System.Collections.Immutable.ImmutableArray`1" /> 全体の要素を並べ替えます。</summary>
      <param name="comparison" vsli:raw="The &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt; to use when comparing elements.">要素を比較する場合に使用する <see cref="T:System.Comparison`1" />。</param>
      <returns vsli:raw="The sorted list.">並べ替えられたリスト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is null.">
        <paramref name="comparison" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the specified elements in the immutable array using the specified comparer.">指定した比較子を使用して、変更できない配列内の指定した要素を並べ替えます。</summary>
      <param name="index" vsli:raw="The index of the first element to sort.">並べ替える最初の要素を示すインデックス。</param>
      <param name="count" vsli:raw="The number of elements to include in the sort.">並べ替えに含める要素の数。</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">要素を比較する場合に使用する実装。または、既定の比較子を使用する場合は <see langword="null" />。</param>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">配列内の項目を並べ替えた順で格納している新しい変更できない配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="item" vsli:raw="The item to add to the end of the array.">配列の末尾に追加する項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count">
      <summary vsli:raw="Gets the number of items in the collection.">コレクション内の配列の数を取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> プロパティが true を返す場合にスローされます。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this instance is read only.">このインスタンスが読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is read only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このインスタンスが読み取り専用の場合は<c>true</c> 。それ以外の場合は<c>false</c>。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="item" vsli:raw="The object to remove from the array.">配列から削除するオブジェクト。</param>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">配列を反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the array.">配列の反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="index" vsli:raw="The index of the location to insert the item.">項目を挿入する位置のインデックス。</param>
      <param name="item" vsli:raw="The item to insert.">挿入する項目。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index in the read-only list.">読み取り専用のリスト内の指定したインデックスにある要素を取得または設定します。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get.">取得する要素の 0 から始まるインデックス。</param>
      <returns vsli:raw="The element at the specified index in the read-only list.">読み取り専用のリスト内の指定したインデックスにある要素。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">セッターから常にスローされます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> プロパティが true を返す場合にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="index" vsli:raw="The index.">インデックス。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count">
      <summary vsli:raw="Gets the number of items in the collection.">コレクション内の配列の数を取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> プロパティが true を返す場合にスローされます。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index.">指定したインデックス位置にある要素を取得します。</summary>
      <param name="index" vsli:raw="The index.">インデックス。</param>
      <returns vsli:raw="The element.">要素。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> プロパティが true を返す場合にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies this array to another array starting at the specified index.">指定されたインデックスを開始位置として、この配列を別の配列にコピーします。</summary>
      <param name="array" vsli:raw="The array to copy this array to.">この配列のコピー先の配列。</param>
      <param name="index" vsli:raw="The index in the destination array to start the copy operation.">コピー操作の開始位置を示す、コピー先の配列内のインデックス。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the size of the array.">配列のサイズを取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> プロパティが true を返す場合にスローされます。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface. Always returns &lt;see langword=&quot;true&quot; /&gt; since since immutable collections are thread-safe.">
        <see cref="T:System.Collections.ICollection" /> インターフェイスをご覧ください。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets the sync root.">同期ルートを取得します。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable array.">変更できない配列を反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that iterates through the immutable array.">変更できない配列を反復処理する列挙子。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> プロパティは、<see langword="true" /> を返します。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="value" vsli:raw="The value to add to the array.">配列に追加する値。</param>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="value" vsli:raw="The value to check for.">確認する値。</param>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Gets the value at the specified index.">指定したインデックス位置にある値を取得します。</summary>
      <param name="value" vsli:raw="The value to return the index of.">インデックスを返す対象の値。</param>
      <returns vsli:raw="The value of the element at the specified index.">指定されたインデックス位置にある要素の値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="index" vsli:raw="Index that indicates where to insert the item.">項目を挿入する位置を示すインデックス。</param>
      <param name="value" vsli:raw="The value to insert.">挿入する値。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">常にスローされます。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether this instance is fixed size.">このインスタンスが固定サイズかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このインスタンスが固定サイズの場合は<c>true</c> 。それ以外の場合は<c>false</c>。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this instance is read only.">このインスタンスが読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is read only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このインスタンスが読み取り専用の場合は<c>true</c> 。それ以外の場合は<c>false</c>。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">指定したインデックス位置にある <see cref="T:System.Object" /> を取得または設定します。</summary>
      <param name="index" vsli:raw="The index.">インデックス。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">セッターから常にスローされます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> プロパティが true を返す場合にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="value" vsli:raw="The value to remove from the array.">配列から削除する値。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="index" vsli:raw="The index of the item to remove.">削除する項目のインデックス。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary vsli:raw="Returns a copy of the original array with the specified item added to the end.">元の配列のコピーの末尾に指定した項目を追加して返します。</summary>
      <param name="value" vsli:raw="The value to add to the end of the array.">配列の末尾に追加する値。</param>
      <returns vsli:raw="A new array with the specified item added to the end.">指定した項目が末尾に追加された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">元の配列のコピーの末尾に指定した要素を追加して返します。</summary>
      <param name="items" vsli:raw="The elements to add to the end of the array.">配列の末尾に追加する要素。</param>
      <returns vsli:raw="A new array with the elements added to the end.">末尾に要素が追加された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary vsli:raw="Returns an array with all the elements removed.">要素がすべて削除された配列を返します。</summary>
      <returns vsli:raw="An array with all the elements removed.">要素がすべて削除された配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Returns a new array with the specified value inserted at the specified position.">指定した値が指定した位置に挿入された新しい配列を返します。</summary>
      <param name="index" vsli:raw="The 0-based index into the array at which the new item should be added.">新しい項目が追加される位置を示す、配列の 0 から始まるインデックス。</param>
      <param name="element" vsli:raw="The item to insert at the start of the array.">配列の先頭に挿入する項目。</param>
      <returns vsli:raw="A new array with the specified value inserted.">指定した値が挿入された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">指定したインデックス位置に、指定した値を挿入します。</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">値を挿入する位置を示すインデックス。</param>
      <param name="items" vsli:raw="The elements to insert.">挿入する要素。</param>
      <returns vsli:raw="A new array with the specified values inserted.">指定した値が挿入された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array; if no match is found, the current array is returned.">配列内で最初に見つかった指定の要素が削除された配列を返します。一致するものが見つからない場合は、現在の配列が返されます。</summary>
      <param name="value" vsli:raw="The value to remove from the array.">配列から削除する値。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">検索に使用する等値比較子。</param>
      <returns vsli:raw="A new array with the value removed.">値が削除された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the items from the array that meet the specified condition.">指定した条件を満たすすべての項目を配列から削除します。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">削除する要素の条件を定義するデリゲート。</param>
      <returns vsli:raw="A new array with items that meet the specified condition removed.">指定された条件を満たす項目が削除された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Returns an array with the element at the specified position removed.">指定した位置の要素が削除された配列を返します。</summary>
      <param name="index" vsli:raw="The 0-based index of the element to remove from the returned array.">返された配列から削除する要素の 0 から始まるインデックス。</param>
      <returns vsli:raw="A new array with the specified item removed.">指定した項目が削除された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this array.">指定した項目をこの配列から削除します。</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">このリストに一致するものが見つかった場合に削除する項目。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">検索に使用する等値比較子。</param>
      <returns vsli:raw="A new array with the elements removed.">要素が削除された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Returns an array with the elements at the specified position removed.">指定した位置の要素が削除された配列を返します。</summary>
      <param name="index" vsli:raw="The 0-based index of the starting element to remove from the array.">配列から削除する開始要素の 0 から始まるインデックス。</param>
      <param name="count" vsli:raw="The number of elements to remove from the array.">配列から削除する要素の数。</param>
      <returns vsli:raw="The new array with the specified elements removed.">指定した要素が削除された新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">指定された値と等しい、配列内の最初の要素を検索して、その値を、指定した新しい値に置き換えます。</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">配列内で検索して置換する値。</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">
        <c>oldvalue</c> を置き換える値。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare values.">値の比較に使用する等値比較子。</param>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">新しい値と古い値が同じ場合でも、<paramref name="newValue" /> が格納されている新しい配列。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">
        <paramref name="oldValue" /> が配列内に見つかりません。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">指定したインデックス位置の項目を、指定した項目で置き換えます。</summary>
      <param name="index" vsli:raw="The index of the item to replace.">置換する項目のインデックス。</param>
      <param name="value" vsli:raw="The value to add to the list.">リストに追加する値。</param>
      <returns vsli:raw="The new array that contains &lt;paramref name=&quot;item&quot; /&gt; at the specified index.">指定したインデックス位置に <paramref name="item" /> を格納している新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary vsli:raw="Determines whether the current collection element precedes, occurs in the same position as, or follows another element in the sort order.">並べ替え順序において、現在のコレクション要素の位置が別のオブジェクトの前になるか、同じであるか、後になるかを判断します。</summary>
      <param name="other" vsli:raw="The element to compare with the current instance.">現在のインスタンスと比較する要素。</param>
      <param name="comparer" vsli:raw="The object used to compare members of the current array with the corresponding members of other array.">現在の配列のメンバーと他の配列の対応するメンバーの比較に使用されるオブジェクト。</param>
      <returns vsli:raw="An integer that indicates whether the current element precedes, is in the same position or follows the other element.">現在の要素の位置が他の要素の前になるか、同じであるか、後になるかを示す整数。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The arrays are not the same length.">配列が同じ長さではありません。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary vsli:raw="Determines whether this array is structurally equal to the specified array.">この配列が指定された配列と構造的に等しいかどうかを判断します。</summary>
      <param name="other" vsli:raw="The array to compare with the current instance.">現在のインスタンスと比較する配列。</param>
      <param name="comparer" vsli:raw="An object that determines whether the current instance and other are structurally equal.">現在のインスタンスと他のインスタンスが構造的に等しいかどうかを判断するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two arrays are structurally equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">2 つの配列が構造的に等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary vsli:raw="Returns a hash code for the current instance.">現在のインスタンスのハッシュ コードを返します。</summary>
      <param name="comparer" vsli:raw="An object that computes the hash code of the current object.">現在のオブジェクトのハッシュ コードを計算するオブジェクト。</param>
      <returns vsli:raw="The hash code for the current instance.">現在のインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ToBuilder">
      <summary vsli:raw="Creates a mutable array that has the same contents as this array and can be efficiently mutated across multiple operations using standard mutable interfaces.">この配列と同じ内容で、標準の変更可能なインターフェイスを使用して複数の操作で効率的に変更できる配列を作成します。</summary>
      <returns vsli:raw="The new builder with the same contents as this array.">この配列と同じ内容を含む新しいビルダー。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableDictionary`2&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">
        <see cref="T:System.Collections.Immutable.ImmutableDictionary`2" /> クラスのインスタンスの一連の初期化メソッドを提供します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Contains``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary vsli:raw="Determines whether the specified immutable dictionary contains the specified key/value pair.">指定された変更できないディクショナリに、指定したキーと値のペアが格納されているかどうかを判定します。</summary>
      <param name="map" vsli:raw="The immutable dictionary to search.">検索対象の変更できないディクショナリ。</param>
      <param name="key" vsli:raw="The key to locate in the immutable dictionary.">変更できないディクショナリ内で検索するキー。</param>
      <param name="value" vsli:raw="The value to locate on the specified key, if the key is found.">キーが見つかった場合は、指定したキーで検索する値。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the immutable dictionary.">変更できないディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the immutable dictionary.">変更できないディクショナリ内の値の型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this map contains the specified key/value pair; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーと値のペアがこのマップに含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2">
      <summary vsli:raw="Creates an empty immutable dictionary.">空の変更できないディクショナリを作成します。</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">ディクショナリによって格納されるキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">ディクショナリによって格納される値の型。</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">空の変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates an empty immutable dictionary that uses the specified key comparer.">指定されたキーの比較子を使用する、空の変更できないディクショナリを作成します。</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">ディクショナリ内のキーが等しいかどうかを判定するために使用する実装。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">ディクショナリによって格納されるキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">ディクショナリによって格納される値の型。</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">空の変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates an empty immutable dictionary that uses the specified key and value comparers.">指定されたキーの比較子と値の比較子を使用する、空の変更できないディクショナリを作成します。</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">ディクショナリ内のキーが等しいかどうかを判定するために使用する実装。</param>
      <param name="valueComparer" vsli:raw="The implementation to use to determine the equality of values in the dictionary.">ディクショナリ内の値が等しいかどうかを判定するために使用する実装。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">ディクショナリによって格納されるキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">ディクショナリによって格納される値の型。</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">空の変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2">
      <summary vsli:raw="Creates a new immutable dictionary builder.">新しい変更できないディクショナリ ビルダーを作成します。</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">ディクショナリによって格納されるキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">ディクショナリによって格納される値の型。</typeparam>
      <returns vsli:raw="The new builder.">新しいビルダー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a new immutable dictionary builder.">新しい変更できないディクショナリ ビルダーを作成します。</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">キーの比較子。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">ディクショナリによって格納されるキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">ディクショナリによって格納される値の型。</typeparam>
      <returns vsli:raw="The new builder.">新しいビルダー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates a new immutable dictionary builder.">新しい変更できないディクショナリ ビルダーを作成します。</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">キーの比較子。</param>
      <param name="valueComparer" vsli:raw="The value comparer.">値の比較子。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">ディクショナリによって格納されるキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">ディクショナリによって格納される値の型。</typeparam>
      <returns vsli:raw="The new builder.">新しいビルダー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items.">指定された項目を格納する、新しい変更できないディクショナリを作成します。</summary>
      <param name="items" vsli:raw="The items used to populate the dictionary before it's immutable.">変更できなくなる前にディクショナリの作成に使用される項目。</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">ディクショナリ内の値の型。</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items.">指定された項目を格納する、新しい変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items and uses the specified key comparer.">指定された項目を格納し、指定されたキーの比較子を使用する、新しい変更できないディクショナリを作成します。</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality.">キーの等価性の比較に使用する比較子の実装。</param>
      <param name="items" vsli:raw="The items to add to the dictionary before it's immutable.">変更できなくなる前に、ディクショナリに追加する項目。</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">ディクショナリ内の値の型。</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items and uses the specified comparer.">指定された項目を格納し、指定された比較子を使用する、新しい変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items and uses the specified key comparer.">指定された項目を格納し、指定されたキーの比較子を使用する、新しい変更できないディクショナリを作成します。</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality.">キーの等価性の比較に使用する比較子の実装。</param>
      <param name="valueComparer" vsli:raw="The comparer implementation to use to compare values for equality.">値の等価性の比較に使用する比較子の実装。</param>
      <param name="items" vsli:raw="The items to add to the dictionary before it's immutable.">変更できなくなる前に、ディクショナリに追加する項目。</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">ディクショナリ内の値の型。</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items and uses the specified comparer.">指定された項目を格納し、指定された比較子を使用する、新しい変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">一致するキーがディクショナリ内に存在する場合は指定されたキーの値を取得します。</summary>
      <param name="dictionary" vsli:raw="The dictionary to retrieve the value from.">値の取得元となるディクショナリ。</param>
      <param name="key" vsli:raw="The key to search for.">検索対象のキー。</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">キーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value.">値の型。</typeparam>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">キーの値、または一致するキーが見つからなかった場合は <c>default(TValue)</c>。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">一致するキーがディクショナリ内に存在する場合は指定されたキーの値を取得します。</summary>
      <param name="dictionary" vsli:raw="The dictionary to retrieve the value from.">値の取得元となるディクショナリ。</param>
      <param name="key" vsli:raw="The key to search for.">検索対象のキー。</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">ディクショナリ内に一致するキーが見つからない場合に返される既定値。</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">キーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value.">値の型。</typeparam>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">キーの値、または一致するキーが見つからなかった場合は <paramref name="defaultValue" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Constructs an immutable dictionary from an existing collection of elements, applying a transformation function to the source keys.">ソース キーに変換関数を適用し、変更できないディクショナリを既存の要素のコレクションから作成します。</summary>
      <param name="source" vsli:raw="The source collection used to generate the immutable dictionary.">変更できないディクショナリの生成に使用されるソース コレクション。</param>
      <param name="keySelector" vsli:raw="The function used to transform keys for the immutable dictionary.">変更できないディクショナリのキーの変換に使用される関数。</param>
      <typeparam name="TSource" vsli:raw="The type of element in the source collection.">ソース コレクション内の要素の型。</typeparam>
      <typeparam name="TKey" vsli:raw="The type of key in the resulting immutable dictionary.">結果として作成される変更できないディクショナリ内のキーの型。</typeparam>
      <returns vsli:raw="The immutable dictionary that contains elements from &lt;paramref name=&quot;source&quot; /&gt;, with keys transformed by applying &lt;paramref name=&quot;keySelector&quot; /&gt;.">
        <paramref name="keySelector" /> の適用によってキーが変換された、<paramref name="source" /> の要素を格納する変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Constructs an immutable dictionary based on some transformation of a sequence.">シーケンスの変換に基づき、変更できないディクショナリを作成します。</summary>
      <param name="source" vsli:raw="The source collection used to generate the immutable dictionary.">変更できないディクショナリの生成に使用されるソース コレクション。</param>
      <param name="keySelector" vsli:raw="The function used to transform keys for the immutable dictionary.">変更できないディクショナリのキーの変換に使用される関数。</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">ディクショナリに使用するキーの比較子。</param>
      <typeparam name="TSource" vsli:raw="The type of element in the source collection.">ソース コレクション内の要素の型。</typeparam>
      <typeparam name="TKey" vsli:raw="The type of key in the resulting immutable dictionary.">結果として作成される変更できないディクショナリ内のキーの型。</typeparam>
      <returns vsli:raw="The immutable dictionary that contains elements from &lt;paramref name=&quot;source&quot; /&gt;, with keys transformed by applying &lt;paramref name=&quot;keySelector&quot; /&gt;.">
        <paramref name="keySelector" /> の適用によってキーが変換された、<paramref name="source" /> の要素を格納する変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents.">キーと値のペアのシーケンスを列挙し、その内容の変更できないディクショナリを生成します。</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">列挙するキーと値のペアのシーケンス。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">ディクショナリ内の値の型。</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">指定されたシーケンス内のキーと値のペアを格納する、変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key comparer.">キーと値のペアのシーケンスを列挙し、指定されたキーの比較子を使用してその内容の変更できないディクショナリを生成します。</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">列挙するキーと値のペアのシーケンス。</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">変更できないディクショナリの作成時に使用するキーの比較子。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">ディクショナリ内の値の型。</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">指定されたシーケンス内のキーと値のペアを格納する、変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key and value comparers.">キーと値のペアのシーケンスを列挙し、指定されたキーの比較子と値の比較子を使用してその内容の変更できないディクショナリを生成します。</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">列挙するキーと値のペアのシーケンス。</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">変更できないディクショナリの作成時に使用するキーの比較子。</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the immutable dictionary.">変更できないディクショナリに使用する値の比較子。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">ディクショナリ内の値の型。</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">指定されたシーケンス内のキーと値のペアを格納する、変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}.Builder)">
      <summary vsli:raw="Creates an immutable dictionary from the current contents of the builder's dictionary.">ビルダーのディクショナリの現在の内容から、変更できないディクショナリを作成します。</summary>
      <param name="builder" vsli:raw="The builder to create the immutable dictionary from.">変更できないディクショナリを作成するためのビルダー。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">ディクショナリ内の値の型。</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the current contents in the builder's dictionary.">ビルダーのディクショナリの現在の内容を含む、変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents.">シーケンスを列挙して変換し、その内容の変更できないディクショナリを生成します。</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">ディクショナリを生成するために列挙するシーケンス。</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">各シーケンス要素からディクショナリのキーを生成する関数。</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">各シーケンス要素からディクショナリの値を生成する関数。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">シーケンス内の要素の型。</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">結果として生成されたディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">結果として生成されたディクショナリ内の値の型。</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">指定されたシーケンス内の項目を格納する、変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents by using the specified key comparer.">シーケンスを列挙して変換し、指定されたキーの比較子を使用してその内容の変更できないディクショナリを生成します。</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">ディクショナリを生成するために列挙するシーケンス。</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">各シーケンス要素からディクショナリのキーを生成する関数。</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">各シーケンス要素からディクショナリの値を生成する関数。</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">ディクショナリに使用するキーの比較子。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">シーケンス内の要素の型。</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">結果として生成されたディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">結果として生成されたディクショナリ内の値の型。</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">指定されたシーケンス内の項目を格納する、変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents by using the specified key and value comparers.">シーケンスを列挙して変換し、指定されたキーの比較子および値の比較子を使用してその内容の変更できないディクショナリを生成します。</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">ディクショナリを生成するために列挙するシーケンス。</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">各シーケンス要素からディクショナリのキーを生成する関数。</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">各シーケンス要素からディクショナリの値を生成する関数。</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">ディクショナリに使用するキーの比較子。</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the dictionary.">ディクショナリに使用する値の比較子。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">シーケンス内の要素の型。</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">結果として生成されたディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">結果として生成されたディクショナリ内の値の型。</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">指定されたシーケンス内の項目を格納する、変更できないディクショナリ。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2">
      <summary vsli:raw="Represents an immutable, unordered collection of keys and values.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">変更できない、順序指定されていないキーと値のコレクションを表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">ディクショナリ内の値の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the immutable dictionary.">指定したキーおよび値を持つ要素を、変更できないディクショナリに追加します。</summary>
      <param name="key" vsli:raw="The key of the element to add.">追加する要素のキー。</param>
      <param name="value" vsli:raw="The value of the element to add.">追加する要素の値。</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pair.">追加のキーと値のペアを格納する、新しい変更できないディクショナリ。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">所定のキーはディクショナリに既に存在しますが、値が異なります。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specified key/value pairs to the immutable dictionary.">指定されたキーと値のペアを、変更できないディクショナリに追加します。</summary>
      <param name="pairs" vsli:raw="The key/value pairs to add.">追加するキーと値のペア。</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">追加のキーと値のペアを格納する、新しい変更できないディクショナリ。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">所定のキーの 1 つはディクショナリに既に存在しますが、値が異なります。</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Builder">
      <summary vsli:raw="Represents a hash map that mutates with little or no memory allocations and that can produce or build on immutable hash map instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">メモリ割り当てがほとんどまたはまったくない場合でも変化し、変更できないハッシュ マップのインスタンス上で非常に効率よく生成またはビルドできるハッシュ マップを表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(`0,`1)">
      <summary vsli:raw="Adds an element that has the specified key and value to the immutable dictionary.">指定したキーと値を持つ要素を、変更できないディクショナリに追加します。</summary>
      <param name="key" vsli:raw="The key of the element to add.">追加する要素のキー。</param>
      <param name="value" vsli:raw="The value of the element to add.">追加する要素の値。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> が null です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the dictionary.">ディクショナリには、同じキーを持つ要素が既に存在します。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">ディクショナリは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds the specified item to the immutable dictionary.">指定された項目を、変更できないディクショナリに追加します。</summary>
      <param name="item" vsli:raw="The object to add to the dictionary.">ディクショナリに追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">ディクショナリは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds a sequence of values to this collection.">一連の値をこのコレクションに追加します。</summary>
      <param name="items" vsli:raw="The items to add to this collection.">このコレクションに追加する項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable dictionary.">変更できないディクショナリからすべての項目を削除します。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">ディクショナリは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable dictionary contains a specific value.">変更できないディクショナリに特定の値が含まれているかどうかを判定します。</summary>
      <param name="item" vsli:raw="The object to locate in the dictionary.">ディクショナリ内で検索するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="item" /> がディクショナリに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element that has the specified key.">指定されたキーを持つ要素が、変更できないディクショナリに格納されているかどうかを判定します。</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary.">ディクショナリ内で検索するキー。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーを持つ要素がディクショナリに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element that has the specified value.">指定された値を持つ要素が、変更できないディクショナリに格納されているかどうかを判定します。</summary>
      <param name="value" vsli:raw="The value to locate in the immutable dictionary. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">変更できないディクショナリ内で検索する値。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した値を持つ要素がディクショナリに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Count">
      <summary vsli:raw="Gets the number of elements contained in the immutable dictionary.">変更できないディクショナリに格納されている要素の数を取得します。</summary>
      <returns vsli:raw="The number of elements contained in the immutable dictionary.">変更できないディクショナリに格納されている要素の数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable dictionary.">変更できないディクショナリを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">一致するキーがディクショナリ内に存在する場合は指定されたキーの値を取得します。</summary>
      <param name="key" vsli:raw="The key to search for.">検索対象のキー。</param>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">キーの値、または一致するキーが見つからなかった場合は <c>default(TValue)</c>。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">一致するキーがディクショナリ内に存在する場合は指定されたキーの値を取得します。</summary>
      <param name="key" vsli:raw="The key to search for.">検索対象のキー。</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">ディクショナリ内に一致するキーが見つからない場合に返される既定値。</param>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">キーの値、または一致するキーが見つからなかった場合は <paramref name="defaultValue" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Item(`0)">
      <summary vsli:raw="Gets or sets the element with the specified key.">指定したキーを持つ要素を取得または設定します。</summary>
      <param name="key" vsli:raw="The element to get or set.">取得または設定する要素。</param>
      <returns vsli:raw="The element that has the specified key.">指定したキーを持つ要素。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The property is being retrieved, and &lt;paramref name=&quot;key&quot; /&gt; is not found.">プロパティは取得されていますが、<paramref name="key" /> が見つかりません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The property is being set, and the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; is read-only.">このプロパティが設定されていますが、<see cref="T:System.Collections.Generic.IDictionary`2" /> は読み取り専用です。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">キーの比較子を取得または設定します。</summary>
      <returns vsli:raw="The key comparer.">キーの比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Keys">
      <summary vsli:raw="Gets a collection that contains the keys of the immutable dictionary.">変更できないディクショナリのキーが格納されているコレクションを取得します。</summary>
      <returns vsli:raw="A collection that contains the keys of the object that implements the immutable dictionary.">変更できないディクショナリを実装するオブジェクトのキーが格納されているコレクション。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">指定したキーを持つ要素を、変更できないディクショナリから削除します。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">削除する要素のキー。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; was not found in the dictionary.">要素が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  このメソッドは、<paramref name="key" /> がディクショナリに見つからなかった場合にも <see langword="false" /> を返します。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> が null です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">ディクショナリは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable dictionary.">特定のオブジェクトの最初に出現したものを、変更できないディクショナリから削除します。</summary>
      <param name="item" vsli:raw="The object to remove from the dictionary.">ディクショナリから削除するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns false if &lt;paramref name=&quot;item&quot; /&gt; is not found in the dictionary.">
        <paramref name="item" /> がディクショナリから正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドは、<paramref name="item" /> がディクショナリに見つからない場合にも false を返します。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">ディクショナリは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes any entries with keys that match those found in the specified sequence from the immutable dictionary.">指定したシーケンス内のキーと一致するキーを持つエントリを、変更できないディクショナリから削除します。</summary>
      <param name="keys" vsli:raw="The keys for entries to remove from the dictionary.">ディクショナリから削除するエントリのキー。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt;, starting at the specified array index.">指定した配列インデックスを開始位置として、ディクショナリの要素を <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 型の配列にコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional array of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">ディクショナリからコピーされる要素のコピー先である <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 型の 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">指定したキーおよび値を持つ要素をディクショナリ オブジェクトに追加します。</summary>
      <param name="key" vsli:raw="The key of the element to add.">追加する要素のキー。</param>
      <param name="value" vsli:raw="The value of the element to add.">追加する要素の値。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the dictionary object contains an element with the specified key.">指定したキーを持つ要素がディクショナリ オブジェクトに格納されているかどうかを判断します。</summary>
      <param name="key" vsli:raw="The key to locate.">検索するキー。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーを持つ要素がディクショナリに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">ディクショナリの <see cref="T:System.Collections.IDictionaryEnumerator" /> オブジェクトを返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">ディクショナリの <see cref="T:System.Collections.IDictionaryEnumerator" /> オブジェクト。</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">
        <see cref="T:System.Collections.IDictionary" /> オブジェクトが固定サイズかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionary" /> オブジェクトが固定サイズの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">指定したキーを持つ要素を取得または設定します。</summary>
      <param name="key" vsli:raw="The key.">キー。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> のキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> を実装するオブジェクトのキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the dictionary.">指定したキーを持つ要素をディクショナリから削除します。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">削除する要素のキー。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内の値を格納している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> を実装するオブジェクトの値を保持している <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">コレクションの反復処理に使用できる列挙子オブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable dictionary based on the contents of this instance.">このインスタンスの内容に基づいて、変更できないディクショナリを作成します。</summary>
      <returns vsli:raw="An immutable dictionary.">変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">指定したキーがこのディクショナリに格納されているかどうかを判断します。</summary>
      <param name="equalKey" vsli:raw="The key to search for.">検索対象のキー。</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">一致するものが見つかった場合は、ディクショナリ内にある一致するキー。見つからない場合は <c>equalkey</c>。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="equalKey" /> に一致が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary vsli:raw="Returns the value associated with the specified key.">指定したキーに関連付けられている値を返します。</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">値を取得するキー。</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, returns the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">このメソッドから制御が戻るときに、キーが見つかった場合は、指定したキーに関連付けられている値が格納されます。それ以外の場合は <paramref name="value" /> パラメーターの型に対する既定の値が返されます。 このパラメーターは初期化せずに渡されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the immutable dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーを持つ要素が、変更できないディクショナリを実装するオブジェクトに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> が null です。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.ValueComparer">
      <summary vsli:raw="Gets or sets the value comparer.">値の比較子を取得または設定します。</summary>
      <returns vsli:raw="The value comparer.">値の比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Values">
      <summary vsli:raw="Gets a collection that contains the values of the immutable dictionary.">変更できないディクショナリの値が格納されているコレクションを取得します。</summary>
      <returns vsli:raw="A collection that contains the values of the object that implements the dictionary.">ディクショナリを実装するオブジェクトの値が格納されているコレクション。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty immutable dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">このディクショナリ インスタンスと同じ順序付けとキー/値の比較規則を使用する、空の変更できないディクショナリを取得します。</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">順序付けとキー/値の比較規則が同等の空のディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether this immutable dictionary contains the specified key/value pair.">この変更できないディクショナリに、指定されたキーと値のペアが含まれているかどうかを判定します。</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">検索するキーと値のペア。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーと値のペアがディクショナリ内に見つかる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element with the specified key.">指定したキーを持つ要素が、変更できないディクショナリに格納されているかどうかを判定します。</summary>
      <param name="key" vsli:raw="The key to locate.">検索するキー。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーを持つ要素が、変更できないディクショナリに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element with the specified value.">指定した値を持つ要素が、変更できないディクショナリに格納されているかどうかを判定します。</summary>
      <param name="value" vsli:raw="The value to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">検索する値。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した値を持つ要素がディクショナリに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs in the immutable dictionary.">変更できないディクショナリに格納されているキーと値のペアの数を取得します。</summary>
      <returns vsli:raw="The number of key/value pairs in the dictionary.">ディクショナリに格納されているキーと値のペアの数。</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableDictionary`2.Empty">
      <summary vsli:raw="Gets an empty immutable dictionary.">空の変更できないディクショナリを取得します。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator">
      <summary vsli:raw="Enumerates the contents of the immutable dictionary without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">メモリを割り当てずに変更できないディクショナリの内容を列挙します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <returns vsli:raw="The element in the dictionary at the current position of the enumerator.">ディクショナリ内の列挙子の現在位置にある要素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator&quot; /&gt; class.">
        <see cref="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator" /> クラスの現在のインスタンスによって使用されているリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable dictionary.">列挙子を、変更できないディクショナリの次の要素に進めます。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the dictionary.">列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がディクショナリの末尾を越えた場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dictionary was modified after the enumerator was created.">列挙子の作成後にディクショナリが変更されました。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the dictionary.">列挙子を初期位置、つまりディクショナリの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dictionary was modified after the enumerator was created.">列挙子の作成後にディクショナリが変更されました。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the current element.">現在の要素を取得します。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable dictionary.">変更できないディクショナリを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">ディクショナリの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable dictionary is empty.">変更できないディクショナリのこのインスタンスが空かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このインスタンスが空の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Item(`0)">
      <summary vsli:raw="Gets the &lt;paramref name=&quot;TValue&quot; /&gt; associated with the specified key.">指定したキーに関連付けられている <paramref name="TValue" /> を取得します。</summary>
      <param name="key" vsli:raw="The type of the key.">キーの型。</param>
      <returns vsli:raw="The value associated with the specified key. If no results are found, the operation throws an exception.">指定されたキーに関連付けられている値。 結果が見つからない場合は、操作によって例外がスローされます。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.KeyComparer">
      <summary vsli:raw="Gets the key comparer for the immutable dictionary.">変更できないディクショナリのキーの比較子を取得します。</summary>
      <returns vsli:raw="The key comparer.">キーの比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Keys">
      <summary vsli:raw="Gets the keys in the immutable dictionary.">変更できないディクショナリのキーを取得します。</summary>
      <returns vsli:raw="The keys in the immutable dictionary.">変更できないディクショナリのキー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">指定したキーを持つ要素を、変更できないディクショナリから削除します。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">削除する要素のキー。</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary.">指定した要素が削除された、新しい変更できないディクショナリ。指定したキーがディクショナリで見つからない場合はこのインスタンス。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable dictionary.">指定したキーを持つ要素を、変更できないディクショナリから削除します。</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">削除する要素のキー。</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">指定したキーが削除された、新しい変更できないディクショナリ。指定したキーがディクショナリで見つからない場合はこのインスタンス。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.">変更できないディクショナリで指定されたキーと値を設定します。キーの既存の値が上書きされる可能性があります。</summary>
      <param name="key" vsli:raw="The key of the entry to add.">追加するエントリのキー。</param>
      <param name="value" vsli:raw="The key value to set.">設定するキー値。</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pair.">指定したキーと値のペアが格納されている、新しい変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys.">変更できないディクショナリで指定されたキーと値のペアを設定します。キーの既存の値が上書きされる可能性があります。</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">ディクショナリで設定するキーと値のペア。 キーのいずれかが既にディクショナリに存在する場合、このメソッドでその以前の値が上書きされます。</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pairs.">指定したキーと値のペアが格納されている、新しい変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="The object to use as the key of the element to add." />
      <param name="value" vsli:raw="The object to use as the value of the element to add." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" vsli:raw="The type of the key." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="The key of the element to remove." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.">特定の配列インデックスを開始位置として、配列にディクショナリの要素をコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">ディクショナリから要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the immutable dictionary object.">指定したキーおよび値を持つ要素を、変更できないディクショナリ オブジェクトに追加します。</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to add.">追加する要素のキーとして使用するオブジェクト。</param>
      <param name="value" vsli:raw="The object to use as the value of the element to add.">追加する要素の値として使用するオブジェクト。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Clear">
      <summary vsli:raw="Clears this instance.">このインスタンスをクリアします。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary object is read-only.">ディクショナリ オブジェクトは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable dictionary object contains an element with the specified key.">指定したキーを持つ要素が、変更できないディクショナリ オブジェクトに格納されているかどうかを判断します。</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary object.">ディクショナリ オブジェクト内で検索するキー。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーを持つ要素がディクショナリに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the immutable dictionary object.">変更できないディクショナリ オブジェクトの <see cref="T:System.Collections.IDictionaryEnumerator" /> オブジェクトを返します。</summary>
      <returns vsli:raw="An enumerator object for the dictionary object.">ディクショナリ オブジェクトの列挙子オブジェクトです。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">
        <see cref="T:System.Collections.IDictionary" /> オブジェクトが固定サイズかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionary" /> オブジェクトが固定サイズの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">指定したキーを持つ要素を取得または設定します。</summary>
      <param name="key" vsli:raw="The key.">キー。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> のキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> を実装するオブジェクトのキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary object.">指定したキーを持つ要素を、変更できないディクショナリ オブジェクトから削除します。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">削除する要素のキー。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内の値を格納している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> を実装するオブジェクトの値を保持している <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">コレクションの反復処理に使用できる列挙子オブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="Key of the entry to be added." />
      <param name="value" vsli:raw="Value of the entry to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" vsli:raw="Sequence of key/value pairs to be added to the dictionary." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="Key of the entry to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" vsli:raw="Sequence of keys to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" vsli:raw="Key of entry to be added." />
      <param name="value" vsli:raw="Value of the entry to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" vsli:raw="The key-value pairs to set on the map. Any keys that conflict with existing keys will replace the previous values." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ToBuilder">
      <summary vsli:raw="Creates an immutable dictionary with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">標準の変更可能なインターフェイスを使用して複数の操作で効率的に変更できるこのディクショナリと同じ内容で、変更できないディクショナリを作成します。</summary>
      <returns vsli:raw="A collection with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">標準の変更可能なインターフェイスを使用して複数の操作で効率的に変更できるこのディクショナリと同じ内容のコレクション。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">指定したキーがこのディクショナリに格納されているかどうかを判断します。</summary>
      <param name="equalKey" vsli:raw="The key to search for.">検索対象のキー。</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">一致するものが見つかった場合は、ディクショナリ内にある一致するキー。見つからない場合は <c>equalkey</c>。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="equalKey" /> に一致が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">指定したキーに関連付けられている値を取得します。</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">値を取得するキー。</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">このメソッドから制御が戻るときに、キーが見つかった場合は、指定したキーに関連付けられている値が格納されます。それ以外の場合は、<paramref name="value" /> パラメーターの型に対する既定値が格納されます。 このパラメーターは初期化せずに渡されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーを持つ要素が、ディクショナリを実装するオブジェクトに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> が null です。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.ValueComparer">
      <summary vsli:raw="Gets the value comparer used to determine whether values are equal.">値が等しいかどうかの判断に使用される値の比較子を取得します。</summary>
      <returns vsli:raw="The value comparer used to determine whether values are equal.">値が等しいかどうかの判断に使用される値の比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Values">
      <summary vsli:raw="Gets the values in the immutable dictionary.">変更できないディクショナリ内の値を取得します。</summary>
      <returns vsli:raw="The values in the immutable dictionary.">変更できないディクショナリ内の値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable dictionary that uses the specified key comparer.">指定されたキーの比較子を使用する、変更できないディクショナリのインスタンスを取得します。</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">使用するキーの比較子。</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparer.">指定された比較子を使用する、変更できないディクショナリのインスタンス。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary vsli:raw="Gets an instance of the immutable dictionary that uses the specified key and value comparers.">指定されたキーと値の比較子を使用する、変更できないディクショナリのインスタンスを取得します。</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">使用するキーの比較子。</param>
      <param name="valueComparer" vsli:raw="The value comparer to use.">使用する値の比較子。</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparers.">指定された比較子を使用する、変更できないディクショナリのインスタンス。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">
        <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" /> クラスのインスタンスの一連の初期化メソッドを提供します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1">
      <summary vsli:raw="Creates an empty immutable hash set.">空の変更できないハッシュ セットを作成します。</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable hash set.">変更できないハッシュ セットに格納する項目の型。</typeparam>
      <returns vsli:raw="An empty immutable hash set.">空の変更できないハッシュ セット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified item.">指定した項目を含む新しい変更できないハッシュ セットを作成します。</summary>
      <param name="item" vsli:raw="The item to prepopulate the hash set with.">ハッシュ セットに事前に設定する項目。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">変更できないハッシュ セット内の項目の型。</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified item.">指定した項目を含む新しい変更できないハッシュ セット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified array of items.">指定した項目の配列を含む新しい変更できないハッシュ セットを作成します。</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the hash set with.">ハッシュ セットに事前に設定する項目を格納している配列。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">変更できないハッシュ セット内の項目の型。</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified items.">指定した項目を含む新しい変更できないハッシュ セット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates an empty immutable hash set that uses the specified equality comparer.">指定された等値比較子を使用する、空の変更できないハッシュ セットを作成します。</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">セット内のオブジェクトが等しいかどうかを比較するために使用するオブジェクト。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">変更できないハッシュ セット内の項目の型。</typeparam>
      <returns vsli:raw="An empty immutable hash set.">空の変更できないハッシュ セット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0)">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified item and uses the specified equality comparer for the set type.">指定された項目を含み、指定された等値比較子をセットの種類に使用する、新しい変更できないハッシュ セットを作成します。</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">セット内のオブジェクトが等しいかどうかを比較するために使用するオブジェクト。</param>
      <param name="item" vsli:raw="The item to prepopulate the hash set with.">ハッシュ セットに事前に設定する項目。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">変更できないハッシュ セット内の項目の型。</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified item.">指定した項目を含む新しい変更できないハッシュ セット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0[])">
      <summary vsli:raw="Creates a new immutable hash set that contains the items in the specified collection and uses the specified equality comparer for the set type.">指定された項目を含み、指定された等値比較子をセットの種類に使用する、新しい変更できないハッシュ セットを作成します。</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">セット内のオブジェクトが等しいかどうかを比較するために使用するオブジェクト。</param>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the hash set with.">ハッシュ セットに事前に設定する項目を格納している配列。</param>
      <typeparam name="T" vsli:raw="The type of items stored in the immutable hash set.">変更できないハッシュ セットに格納されている項目の型。</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified items.">指定した項目を含む新しい変更できないハッシュ セット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1">
      <summary vsli:raw="Creates a new immutable hash set builder.">新しい変更できないハッシュ セット ビルダーを作成します。</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">コレクションによって格納される項目の型。</typeparam>
      <returns vsli:raw="The immutable hash set builder.">変更できないハッシュ セット ビルダー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a new immutable hash set builder.">新しい変更できないハッシュ セット ビルダーを作成します。</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">セット内のオブジェクトが等しいかどうかを比較するために使用するオブジェクト。</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">コレクションによって格納される項目の型。</typeparam>
      <returns vsli:raw="The new immutable hash set builder.">新しい変更できないハッシュ セット ビルダー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable hash set prefilled with the specified items.">指定した項目が事前に設定された、新しい変更できないハッシュ セットを作成します。</summary>
      <param name="items" vsli:raw="The items to add to the hash set.">ハッシュ セットに追加する項目。</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">コレクションによって格納される項目の型。</typeparam>
      <returns vsli:raw="The new immutable hash set that contains the specified items.">指定した項目を含む新しい変更できないハッシュ セット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified items and uses the specified equality comparer for the set type.">指定された項目を含み、指定された等値比較子をセットの種類に使用する、新しい変更できないハッシュ セットを作成します。</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">セット内のオブジェクトが等しいかどうかを比較するために使用するオブジェクト。</param>
      <param name="items" vsli:raw="The items add to the collection before immutability is applied.">変更不可が適用される前にコレクションに追加する項目。</param>
      <typeparam name="T" vsli:raw="The type of items stored in the collection.">コレクションに格納される項目の型。</typeparam>
      <returns vsli:raw="The new immutable hash set.">新しい変更できないハッシュ セット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable hash set of its contents.">シーケンスを列挙し、その内容の変更できないハッシュ セットを生成します。</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">列挙するシーケンス。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">シーケンス内の要素の型。</typeparam>
      <returns vsli:raw="An immutable hash set that contains the items in the specified sequence.">指定されたシーケンス内の項目を含む、変更できないハッシュ セット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Enumerates a sequence, produces an immutable hash set of its contents, and uses the specified equality comparer for the set type.">シーケンスを列挙し、その内容の変更できないハッシュ セットを生成して、指定された等値比較子をセットの種類に使用します。</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">列挙するシーケンス。</param>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">セット内のオブジェクトが等しいかどうかを比較するために使用するオブジェクト。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">シーケンス内の要素の型。</typeparam>
      <returns vsli:raw="An immutable hash set that contains the items in the specified sequence and uses the specified equality comparer.">指定したシーケンス内の項目を含み、指定された等値比較子を使用する、変更できないハッシュ セット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Immutable.ImmutableHashSet{``0}.Builder)">
      <summary vsli:raw="Creates an immutable hash set from the current contents of the builder's set.">ビルダーのセットの現在の内容から、変更できないハッシュ セットを作成します。</summary>
      <param name="builder" vsli:raw="The builder to create the immutable hash set from.">変更できないハッシュ セットを作成するためのビルダー。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the hash set.">ハッシュセット内の要素の型。</typeparam>
      <returns vsli:raw="An immutable hash set that contains the current contents in the builder's set.">ビルダーのセットの現在の内容を含む、変更できないハッシュ セット。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1">
      <summary vsli:raw="Represents an immutable, unordered hash set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">変更できない、順序が指定されていないハッシュ セットを表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the hash set.">ハッシュ セット内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified element to the hash set.">指定した要素をハッシュ セットに追加します。</summary>
      <param name="item" vsli:raw="The element to add to the set.">セットに追加する要素。</param>
      <returns vsli:raw="A hash set that contains the added value and any values previously held by the  &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt; object.">追加された値と、<see cref="T:System.Collections.Immutable.ImmutableHashSet`1" /> オブジェクトによって以前に保持されていたすべての値を含む、ハッシュ セット。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Builder">
      <summary vsli:raw="Represents a hash set that mutates with little or no memory allocations and that can produce or build on immutable hash set instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">メモリ割り当てがほとんどまたはまったくない場合でも変化し、変更できないハッシュ セットのインスタンス上で非常に効率よく生成またはビルドできるハッシュ セットを表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Add(`0)">
      <summary vsli:raw="Adds the specified item to the immutable hash set.">指定された項目を、変更できないハッシュ セットに追加します。</summary>
      <param name="item" vsli:raw="The item to add.">追加する項目。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item did not already belong to the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">項目がまだコレクションに属していない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable hash set.">変更できないハッシュ セットからすべての項目を削除します。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The hash set is read-only.">ハッシュ セットとは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the immutable hash set contains a specific value.">変更できないハッシュ セットに特定の値が含まれているかどうかを判定します。</summary>
      <param name="item" vsli:raw="The object to locate in the hash set.">ハッシュ セット内で検索するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the hash set ; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="item" /> がハッシュ セットに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements contained in the immutable hash set.">変更できないハッシュ セットに含まれている要素の数を取得します。</summary>
      <returns vsli:raw="The number of elements contained in the immutable hash set.">変更できないハッシュ セットに含まれている要素の数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current hash set.">現在のハッシュ セットから、指定されたコレクションに含まれる要素をすべて削除します。</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">セットから削除する項目のコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable hash set.">変更できないハッシュ セットを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">セットの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">指定されたコレクションに存在する要素だけが含まれるように現在のセットを変更します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) subset of a specified collection.">現在のセットが、指定されたコレクションの真のサブセット (真部分集合) であるかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のセットが <paramref name="other" /> の真のサブセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) superset of a specified collection.">現在のセットが、指定されたコレクションの真のスーパーセット (真部分集合) であるかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のセットが <paramref name="other" /> の真のスーパーセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a subset of a specified collection.">現在のセットが、指定されたコレクションのサブセットであるかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のセットが <paramref name="other" /> パラメーターのサブセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a superset of a specified collection.">現在のセットが、指定されたコレクションのスーパーセットであるかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のセットが <paramref name="other" /> パラメーターのスーパーセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">キーの比較子を取得または設定します。</summary>
      <returns vsli:raw="The key comparer.">キーの比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set overlaps with the specified collection.">現在のセットと、指定されたコレクションとで重なり合う部分が存在するかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のセットと <paramref name="other" /> との間に共通する要素が 1 つでも存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable hash set.">特定のオブジェクトの最初に出現したものを、変更できないハッシュ セットから削除します。</summary>
      <param name="item" vsli:raw="The object to remove from the set.">セットから削除するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the set ; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the original set.">
        <paramref name="item" /> がセットから正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドは、<paramref name="item" /> が元のセットに見つからない場合にも <see langword="false" /> を返します。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">セットは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set and the specified collection contain the same elements.">現在のセットと指定されたコレクションに同じ要素が存在するかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is equal to &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のセットが <paramref name="other" /> と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">現在のセットを、そのセットと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納されるように変更します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item to the hash set.">ハッシュ セットに項目を追加します。</summary>
      <param name="item" vsli:raw="The object to add to the set.">セットに追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">セットは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the hash set to an array, starting at a particular array index.">特定の配列インデックスを開始位置として、配列にハッシュ セットの要素をコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the hash set. The array must have zero-based indexing.">ハッシュ セットから要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable hash set based on the contents of this instance.">このインスタンスの内容に基づいて、変更できないハッシュ セットを作成します。</summary>
      <returns vsli:raw="An immutable set.">変更できないセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.">現在のセットを、現在のセットと指定したコレクションの両方に存在するすべての要素が格納されるように変更します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Clear">
      <summary vsli:raw="Retrieves an empty immutable hash set that has the same sorting and ordering semantics as this instance.">並べ替えと順序付けのセマンティクスがこのインスタンスと同じ空の変更できないハッシュ セットを取得します。</summary>
      <returns vsli:raw="An empty hash set that has the same sorting and ordering semantics as this instance.">並べ替えと順序付けのセマンティクスがこのインスタンスと同じ空のハッシュ セット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable hash set contains the specified element.">指定した要素がこの変更できないハッシュ セットに格納されているかどうかを判断します。</summary>
      <param name="item" vsli:raw="The object to locate in the immutable hash set.">変更できないハッシュ セット内で検索するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Count">
      <summary vsli:raw="Gets the number of elements in the immutable hash set.">変更できないハッシュ セット内の要素の数を取得します。</summary>
      <returns vsli:raw="The number of elements in the hash set.">ハッシュ セット内の要素の数。</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableHashSet`1.Empty">
      <summary vsli:raw="Gets an immutable hash set for this type that uses the default &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">既定の <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用する、この型の変更できないハッシュ セットを取得します。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of the immutable hash set without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">メモリを割り当てずに変更できないハッシュ セットの内容を列挙します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">列挙子の現在位置の要素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator&quot; /&gt; class.">
        <see cref="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator" /> クラスの現在のインスタンスによって使用されているリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable hash set.">列挙子を、変更できないハッシュ セットの次の要素に進めます。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the hash set.">列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がハッシュ セットの末尾を越えた場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The hash set was modified after the enumerator was created.">ハッシュ セットが、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the hash set.">列挙子を初期位置、つまりハッシュ セットの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The hash set was modified after the enumerator was created.">ハッシュ セットが、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the current element.">現在の要素を取得します。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable hash set.">現在の変更できないハッシュ セットから、指定されたコレクションに含まれる要素を削除します。</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">このセットから削除する項目のコレクション。</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">項目が削除された新しいセット。セットに項目がなかった場合は、元のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable hash set that contains elements that exist in both this set and the specified set.">このセットと指定されたセットの両方に存在する要素を含む、変更できないハッシュ セットを作成します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">両方のセットに存在するすべての要素を含む、新しい変更できないセット。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether the current immutable hash set is empty.">現在の変更できないハッシュ セットが空かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このインスタンスが空の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a proper (strict) subset of a specified collection.">現在の変更できないハッシュ セットが、指定されたコレクションの真のサブセット (真部分集合) であるかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のセットが、指定されたコレクションの真のサブセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a proper (strict) superset of a specified collection.">現在の変更できないハッシュ セットが、指定されたコレクションの真のスーパーセット (真部分集合) であるかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のセットが、指定されたコレクションの真のスーパーセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a subset of a specified collection.">現在の変更できないハッシュ セットが、指定されたコレクションのサブセットであるかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のセットが、指定されたコレクションのサブセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a superset of a specified collection.">現在の変更できないハッシュ セットが、指定されたコレクションのスーパーセットであるかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のセットが、指定されたコレクションのスーパーセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.KeyComparer">
      <summary vsli:raw="Gets the object that is used to obtain hash codes for the keys and to check the equality of values in the immutable hash set.">キーのハッシュ コードを取得し、変更できないハッシュ セット内の値が等しいかどうかを確認するために使用されるオブジェクトを取得します。</summary>
      <returns vsli:raw="The comparer used to obtain hash codes for the keys and check equality.">キーのハッシュ コードを取得し、等しいかどうかを確認するために使用される比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set overlaps with the specified collection.">現在の変更できないハッシュ セットと、指定されたコレクションとで重なり合う部分が存在するかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and the specified collection share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のセットと指定されたコレクションとの間に共通する要素が 1 つでも存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable hash set.">この変更できないハッシュ セットから、指定した要素を削除します。</summary>
      <param name="item" vsli:raw="The element to remove.">削除する要素。</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">指定した要素が削除された新しいセット。セット内に要素が見つからない場合は、現在のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set and the specified collection contain the same elements.">現在の変更できないハッシュ セットと指定されたコレクションに同じ要素が存在するかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">セットが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable hash set that contains only elements that are present either in the current set or in the specified collection, but not both.">現在のセットと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納された、変更できないハッシュ セットを作成します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">現在のセットと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納された、新しいセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item to the set.">セットに項目を追加します。</summary>
      <param name="item" vsli:raw="The object to add to the set.">セットに追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">セットは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all items from this set.">このセットからすべての項目を削除します。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">セットは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular index.">特定のインデックスを開始位置として、配列にセットの要素をコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">セットから要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; interface.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> インターフェイスをご覧ください。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the set.">セット内で最初に見つかった特定のオブジェクトを削除します。</summary>
      <param name="item" vsli:raw="The object to remove from the set.">セットから削除するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">要素が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that iterates through the collection.">コレクションを反復処理する列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value that indicates whether the element was successfully added.">現在のセットに要素を追加し、その要素が正常に追加されたかどうかを示す値を返します。</summary>
      <param name="item" vsli:raw="The element to add to the collection.">コレクションに追加する要素。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">要素がセットに追加された場合は <see langword="true" />。セットに既存の要素が存在していた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current set.">現在のセットから、指定されたコレクションに含まれる要素をすべて削除します。</summary>
      <param name="other" vsli:raw="The collection of items to remove.">削除する項目のコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">指定されたコレクションに存在する要素だけが含まれるように現在のセットを変更します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current collection.">現在のコレクションと比較するコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">現在のセットを、そのセットと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納されるように変更します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in either the current set or in the specified collection.">現在のセットを、現在のセットまたは指定したコレクションのいずれかに存在するすべての要素が格納されるように変更します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular index.">特定のインデックスを開始位置として、配列にセットの要素をコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">セットから要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">
        <see cref="T:System.Collections.ICollection" /> インターフェイスをご覧ください。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">以下を参照してください。<see cref="T:System.Collections.ICollection" /></summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a set.">セットを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">セットの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">この変更できないセットに、指定した要素を追加します。</summary>
      <param name="item" vsli:raw="The element to add.">追加する要素。</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">要素が追加された新しいセット。または、要素がセット内に既に存在する場合は、このセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary vsli:raw="Retrieves an empty set that has the same sorting and ordering semantics as this instance.">並べ替えと順序付けのセマンティクスがこのインスタンスと同じ空のセットを取得します。</summary>
      <returns vsli:raw="An empty set that has the same sorting or ordering semantics as this instance.">並べ替えと順序付けのセマンティクスがこのインスタンスと同じ空のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current set.">現在のセットから、指定されたコレクションに含まれている要素を削除します。</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">このセットから削除する項目のコレクション。</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">項目が削除された新しいセット。セットに項目がなかった場合は、元のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains elements that exist in both this set and the specified set.">このセットと指定されたセットの両方に存在する要素を含む、変更できないセットを作成します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">両方のセットに存在するすべての要素を含む、新しい変更できないセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">この変更できないセットから、指定した要素を削除します。</summary>
      <param name="item" vsli:raw="The element to remove.">削除する要素。</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">指定した要素が削除された新しいセット。セット内に要素が見つからない場合は、現在のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">現在のセットと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納された、変更できないセットを作成します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">現在のセットと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納された、新しいセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">現在のセットと指定されたコレクションのどちらかに存在するすべての要素が格納された、新しい変更できないセットを作成します。</summary>
      <param name="other" vsli:raw="The collection to add elements from.">要素の追加元のコレクション。</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">項目が追加された、新しい変更できないセット。すべての項目が既にセットにあった場合は、元のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.ToBuilder">
      <summary vsli:raw="Creates an immutable hash set that has the same contents as this set and can be efficiently mutated across multiple operations by using standard mutable interfaces.">このセットと同じ内容で、標準の変更可能なインターフェイスを使用して複数の操作で効率的に変更できる、変更できないハッシュ セットを作成します。</summary>
      <returns vsli:raw="A set with the same contents as this set that can be efficiently mutated across multiple operations by using standard mutable interfaces.">標準の変更可能なインターフェイスを使用して複数の操作で効率的に変更できるこのセットと同じ内容のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">指定された値をセットで検索し、見つかった場合は同じ値を返します。</summary>
      <param name="equalValue" vsli:raw="The value to search for.">検索する値。</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the original value if the search yielded no match.">セット内の検索で見つかった値。検索で一致するものがなかった場合は、元の値。</param>
      <returns vsli:raw="A value indicating whether the search was successful.">検索が成功したかどうかを示す値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable hash set that contains all elements that are present in either the current set or in the specified collection.">現在のセットと指定されたコレクションのどちらかに存在するすべての要素が格納された、新しい変更できないハッシュ セットを作成します。</summary>
      <param name="other" vsli:raw="The collection to add elements from.">要素の追加元のコレクション。</param>
      <returns vsli:raw="A new immutable hash set with the items added; or the original set if all the items were already in the set.">項目が追加された、新しい変更できないハッシュ セット。すべての項目が既にセットにあった場合は、元のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.WithComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable hash set that uses the specified equality comparer for its search methods.">指定された等値比較子を検索方法に使用する、変更できないハッシュ セットのインスタンスを取得します。</summary>
      <param name="equalityComparer" vsli:raw="The equality comparer to use.">使用する等値比較子。</param>
      <returns vsli:raw="An instance of this immutable hash set that uses the given comparer.">指定された比較子を使用する、この変更できないハッシュ セットのインスタンス。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableInterlocked">
      <summary vsli:raw="Contains interlocked exchange mechanisms for immutable collections.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">変更できないコレクションのインタロック交換メカニズムが含まれています。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})">
      <summary vsli:raw="Obtains the value from a dictionary after having added it or updated an existing entry.">値の追加または既存のエントリの更新後に、その値をディクショナリから取得します。</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">ディクショナリで指定されていない場合にアトミックに更新する変数またはフィールド。</param>
      <param name="key" vsli:raw="The key for the value to add or update.">追加または更新する値のキー。</param>
      <param name="addValue" vsli:raw="The value to use if no previous value exists.">前の値が存在しない場合に使用する値。</param>
      <param name="updateValueFactory" vsli:raw="The function that receives the key and prior value and returns the new value with which to update the dictionary.">キーと以前の値を受け取り、ディクショナリの更新に使用する新しい値を返す関数。</param>
      <typeparam name="TKey" vsli:raw="The type of key stored by the dictionary.">ディクショナリによって格納されているキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of value stored by the dictionary.">ディクショナリによって格納される値の型。</typeparam>
      <returns vsli:raw="The added or updated value.">追加または更新された値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
      <summary vsli:raw="Obtains the value from a dictionary after having added it or updated an existing entry.">値の追加または既存のエントリの更新後に、その値をディクショナリから取得します。</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">ディクショナリで指定されていない場合にアトミックに更新する変数またはフィールド。</param>
      <param name="key" vsli:raw="The key for the value to add or update.">追加または更新する値のキー。</param>
      <param name="addValueFactory" vsli:raw="The function that receives the key and returns a new value to add to the dictionary when no value previously exists.">キーを受け取り、値がまだ存在しない場合にディクショナリに追加する新しい値を返す関数。</param>
      <param name="updateValueFactory" vsli:raw="The function that receives the key and prior value and returns the new value with which to update the dictionary.">キーと以前の値を受け取り、ディクショナリの更新に使用する新しい値を返す関数。</param>
      <typeparam name="TKey" vsli:raw="The type of key stored by the dictionary.">ディクショナリによって格納されているキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of value stored by the dictionary.">ディクショナリによって格納される値の型。</typeparam>
      <returns vsli:raw="The added or updated value.">追加または更新された値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)">
      <summary vsli:raw="Atomically enqueues an element to the end of a queue.">要素をキューの末尾にアトミックに入れます。</summary>
      <param name="location" vsli:raw="The variable or field to atomically update.">アトミックに更新する変数またはフィールド。</param>
      <param name="value" vsli:raw="The value to enqueue.">キューに入れる値。</param>
      <typeparam name="T" vsli:raw="The type of items contained in the collection.">コレクションに格納されている項目の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">指定されたキーの値をディクショナリから取得するか、キーが見つからなかった場合は、ディクショナリに新しい値を追加します。</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified key is not in the dictionary.">指定したキーがディクショナリに存在しない場合にアトミックに更新する変数またはフィールド。</param>
      <param name="key" vsli:raw="The key for the value to get or add.">取得または追加する値のキー。</param>
      <param name="value" vsli:raw="The value to add to the dictionary the key is not found.">キーが見つからなかったディクショナリに追加する値。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">コレクションに格納されているキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">コレクションに格納されている値の型。</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">指定したキーの値、またはキーが存在しなかった場合は <paramref name="valueFactory" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">指定されたキーの値をディクショナリから取得するか、キーが見つからなかった場合は、ディクショナリに新しい値を追加します。</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">ディクショナリで指定されていない場合にアトミックに更新する変数またはフィールド。</param>
      <param name="key" vsli:raw="The key for the value to retrieve or add.">取得または追加する値のキー。</param>
      <param name="valueFactory" vsli:raw="The function to execute to obtain the value to insert into the dictionary if the key is not found. This delegate will not be invoked more than once.">キーが見つからない場合にディクショナリに挿入する値を取得するために実行する関数。 このデリゲートは 2 回以上呼び出されることはありません。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">コレクションに格納されているキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">コレクションに格納されている値の型。</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">指定したキーの値、またはキーが存在しなかった場合は <paramref name="valueFactory" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">指定されたキーの値をディクショナリから取得するか、キーが見つからなかった場合は、ディクショナリに新しい値を追加します。</summary>
      <param name="location" vsli:raw="The variable or field to update if the specified is not in the dictionary.">ディクショナリで指定されていない場合に更新する変数またはフィールド。</param>
      <param name="key" vsli:raw="The key for the value to retrieve or add.">取得または追加する値のキー。</param>
      <param name="valueFactory" vsli:raw="The function to execute to obtain the value to insert into the dictionary if the key is not found.">キーが見つからない場合にディクショナリに挿入する値を取得するために実行する関数。</param>
      <param name="factoryArgument" vsli:raw="The argument to pass to the value factory.">値ファクトリに渡す引数。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">コレクションに格納されているキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">コレクションに格納されている値の型。</typeparam>
      <typeparam name="TArg" vsli:raw="The type of the argument supplied to the value factory.">値ファクトリに渡される引数の型。</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">指定したキーの値、またはキーが存在しなかった場合は <paramref name="valueFactory" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Compares two immutable arrays for equality and, if they are equal, replaces one of the arrays.">2 つの変更できない配列が等しいかどうかを比較し、等しい場合は、その配列のいずれかを置き換えます。</summary>
      <param name="location" vsli:raw="The destination, whose value is compared with &lt;paramref name=&quot;comparand&quot; /&gt; and possibly replaced.">値を <paramref name="comparand" /> と比較し、場合によっては置き換える比較先。</param>
      <param name="value" vsli:raw="The value that replaces the destination value if the comparison results in equality.">比較した結果が等しい場合に比較先の値を置き換える値。</param>
      <param name="comparand" vsli:raw="The value that is compared to the value at &lt;paramref name=&quot;location&quot; /&gt;.">
        <paramref name="location" /> にある値と比較する値。</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">配列に格納される要素の型。</typeparam>
      <returns vsli:raw="The original value in &lt;paramref name=&quot;location&quot; /&gt;.">
        <paramref name="location" /> の元の値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Sets an array to the specified array and returns a reference to the original array, as an atomic operation.">分割不可能な操作として、指定した配列を配列として設定し、元の配列への参照を返します。</summary>
      <param name="location" vsli:raw="The array to set to the specified value.">指定した値に設定する配列。</param>
      <param name="value" vsli:raw="The value to which the &lt;paramref name=&quot;location&quot; /&gt; parameter is set.">
        <paramref name="location" /> パラメーターに設定される値。</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">配列に格納される要素の型。</typeparam>
      <returns vsli:raw="The original value of &lt;paramref name=&quot;location&quot; /&gt;.">
        <paramref name="location" /> の元の値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Sets an array to the specified array if the array has not been initialized.">配列が初期化されていない場合に、指定した配列を配列として設定します。</summary>
      <param name="location" vsli:raw="The array to set to the specified value.">指定した値に設定する配列。</param>
      <param name="value" vsli:raw="The value to which the &lt;paramref name=&quot;location&quot; /&gt; parameter is set, if it's not initialized.">初期化されない場合に、<paramref name="location" /> パラメーターに設定される値。</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">配列に格納される要素の型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array was assigned the specified value;  otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した値が配列に割り当てられた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)">
      <summary vsli:raw="Pushes a new element onto the stack.">新しい要素をスタックにプッシュします。</summary>
      <param name="location" vsli:raw="The stack to update.">更新するスタック。</param>
      <param name="value" vsli:raw="The value to push on the stack.">スタックにプッシュする値。</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">スタック内の項目の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary vsli:raw="Adds the specified key and value to the dictionary if the key is not in the dictionary.">キーがディクショナリ内に存在しない場合、指定したキーと値をディクショナリに追加します。</summary>
      <param name="location" vsli:raw="The dictionary to update with the specified key and value.">指定したキーと値で更新するディクショナリ。</param>
      <param name="key" vsli:raw="The key to add, if is not already defined in the dictionary.">ディクショナリでまだ定義されていない場合に追加するキー。</param>
      <param name="value" vsli:raw="The value to add.">加算する値。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">コレクションに格納されているキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">コレクションに格納されている値の型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key is not in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">キーがディクショナリ内に存在しない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)">
      <summary vsli:raw="Atomically removes and returns the specified element at the head of the queue, if the queue is not empty.">キューが空ではない場合、キューの先頭にある指定した要素をアトミックに削除して返します。</summary>
      <param name="location" vsli:raw="The variable or field to atomically update.">アトミックに更新する変数またはフィールド。</param>
      <param name="value" vsli:raw="Set to the value from the head of the queue, if the queue not empty.">キューが空ではない場合、キューの先頭から値に設定します。</param>
      <typeparam name="T" vsli:raw="The type of items in the queue.">キュー内の項目の型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the queue is not empty and the head element is removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">キューが空ではなく、head 要素が削除されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)">
      <summary vsli:raw="Removes an element from the top of the stack, if there is an element to remove.">削除する要素が存在する場合は、スタックの先頭から要素を削除します。</summary>
      <param name="location" vsli:raw="The stack to update.">更新するスタック。</param>
      <param name="value" vsli:raw="Receives the value removed from the stack, if the stack is not empty.">スタックが空でない場合、スタックから削除された値を受け取ります。</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">スタック内の項目の型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element is removed from the stack; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">要素がスタックから削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)">
      <summary vsli:raw="Removes the element with the specified key, if the key exists.">キーが存在する場合は、指定したキーを持つ要素を削除します。</summary>
      <param name="location" vsli:raw="The dictionary to update.">更新するディクショナリ。</param>
      <param name="key" vsli:raw="The key to remove.">削除するキー。</param>
      <param name="value" vsli:raw="Receives the value of the removed item, if the dictionary is not empty.">ディクショナリが空でない場合は、削除された項目の値を受け取ります。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">コレクションに格納されているキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">コレクションに格納されている値の型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key was found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">キーが見つかって削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)">
      <summary vsli:raw="Sets the specified key to the specified value if the specified key already is set to a specific value.">指定したキーが既に特定の値に設定されている場合は、指定されたキーに指定された値を設定します。</summary>
      <param name="location" vsli:raw="The dictionary to update.">更新するディクショナリ。</param>
      <param name="key" vsli:raw="The key to update.">更新するキー。</param>
      <param name="newValue" vsli:raw="The new value to set.">設定する新しい値。</param>
      <param name="comparisonValue" vsli:raw="The current value for &lt;paramref name=&quot;key&quot; /&gt; in order for the update to succeed.">更新を成功させるための <paramref name="key" /> の現在の値。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">コレクションに格納されているキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">コレクションに格納されている値の型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; and &lt;paramref name=&quot;comparisonValue&quot; /&gt; are present in the dictionary and comparison was updated to &lt;paramref name=&quot;newValue&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="key" /> と <paramref name="comparisonValue" /> がディクショナリに存在し、比較が <paramref name="newValue" /> に更新された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})">
      <summary vsli:raw="Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.             The transformation is retried as many times as necessary to win the optimistic locking race.">指定した変換関数により、楽観的ロック トランザクション セマンティクスを使って値をその場で変更します。             変換は、楽観的ロックの競合を獲得するために必要な回数だけ再試行されます。</summary>
      <param name="location" vsli:raw="The variable or field to be changed, which may be accessed by multiple threads.">変更する変数またはフィールド。複数のスレッドによってアクセスされる場合があります。</param>
      <param name="transformer" vsli:raw="A function that mutates the value. This function should be side-effect free,              as it may run multiple times when races occur with other threads.">値を変更する関数。 この関数は、他のスレッドとの競合が発生すると複数回実行される可能性があるので、副作用が生じないようにする必要があります。</param>
      <typeparam name="T" vsli:raw="The type of data.">データの型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the location's value is changed by applying the result of the &lt;paramref name=&quot;transformer&quot; /&gt; function; &lt;see langword=&quot;false&quot; /&gt; if the location's value remained the same because the last invocation of &lt;paramref name=&quot;transformer&quot; /&gt; returned the existing value.">
        <paramref name="transformer" /> 関数の結果を適用することにより場所の値が変更された場合は <see langword="true" />。<paramref name="transformer" /> の最後の呼び出しで既存の値が返されたために場所の値が同じままだった場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)">
      <summary vsli:raw="Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.             The transformation is retried as many times as necessary to win the optimistic locking race.">指定した変換関数により、楽観的ロック トランザクション セマンティクスを使って値をその場で変更します。             変換は、楽観的ロックの競合を獲得するために必要な回数だけ再試行されます。</summary>
      <param name="location" vsli:raw="The variable or field to be changed, which may be accessed by multiple threads.">変更する変数またはフィールド。複数のスレッドによってアクセスされる場合があります。</param>
      <param name="transformer" vsli:raw="A function that mutates the value. This function should be side-effect free,              as it may run multiple times when races occur with other threads.">値を変更する関数。 この関数は、他のスレッドとの競合が発生すると複数回実行される可能性があるので、副作用が生じないようにする必要があります。</param>
      <param name="transformerArgument" vsli:raw="The argument to pass to &lt;paramref name=&quot;transformer&quot; /&gt;.">
        <paramref name="transformer" /> に渡す引数。</param>
      <typeparam name="T" vsli:raw="The type of data.">データの型。</typeparam>
      <typeparam name="TArg" vsli:raw="The type of argument passed to the &lt;paramref name=&quot;transformer&quot; /&gt;.">に渡される引数の型<paramref name="transformer" />。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the location's value is changed by applying the result of the &lt;paramref name=&quot;transformer&quot; /&gt; function; &lt;see langword=&quot;false&quot; /&gt; if the location's value remained the same because the last invocation of &lt;paramref name=&quot;transformer&quot; /&gt; returned the existing value.">
        <paramref name="transformer" /> 関数の結果を適用することにより場所の値が変更された場合は <see langword="true" />。<paramref name="transformer" /> の最後の呼び出しで既存の値が返されたために場所の値が同じままだった場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">
        <see cref="T:System.Collections.Immutable.ImmutableList`1" /> クラスのインスタンスの一連の初期化メソッドを提供します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1">
      <summary vsli:raw="Creates an empty immutable list.">空の変更できないリストを作成します。</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the .">リストに格納する項目の型。</typeparam>
      <returns vsli:raw="An empty immutable list.">空の変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable list that contains the specified item.">指定された項目を含む、新しい変更できないリストを作成します。</summary>
      <param name="item" vsli:raw="The item to prepopulate the list with.">リストに事前に設定する項目。</param>
      <typeparam name="T" vsli:raw="The type of items in the .">リスト内の項目の型。</typeparam>
      <returns vsli:raw="A new  that contains the specified item.">指定した項目を含む、新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable list that contains the specified array of items.">指定された項目の配列を含む、新しい変更できないリストを作成します。</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the list with.">リストに事前に設定する項目を格納している配列。</param>
      <typeparam name="T" vsli:raw="The type of items in the .">リスト内の項目の型。</typeparam>
      <returns vsli:raw="A new immutable list that contains the specified items.">指定された項目を含む、新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateBuilder``1">
      <summary vsli:raw="Creates a new immutable list builder.">新しい変更できないリスト ビルダーを作成します。</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">コレクションによって格納される項目の型。</typeparam>
      <returns vsli:raw="The immutable collection builder.">変更できないコレクション ビルダー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable list that contains the specified items.">指定された項目を含む、新しい変更できないリストを作成します。</summary>
      <param name="items" vsli:raw="The items to add to the list.">リストに追加する項目。</param>
      <typeparam name="T" vsli:raw="The type of items in the .">リスト内の項目の型。</typeparam>
      <returns vsli:raw="An immutable list that contains the specified items.">指定された項目を含む、変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the list.">リスト内で指定したオブジェクトを検索し、最初に見つかったオブジェクトの 0 から始まるインデックスを返します。</summary>
      <param name="list" vsli:raw="The list to search.">検索するリスト。</param>
      <param name="item" vsli:raw="The object to locate in the list. The value can be null for reference types.">リスト内で検索するオブジェクト。 参照型の場合は、値を null にできます。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">リスト内の項目の型。</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the list that extends from index to the last element, if found; otherwise, -1.">リストで、インデックスから最後の要素までの要素範囲内で項目が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the list.">リスト内で指定したオブジェクトを検索し、最初に見つかったオブジェクトの 0 から始まるインデックスを返します。</summary>
      <param name="list" vsli:raw="The list to search.">検索するリスト。</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">変更できないリスト内で検索するオブジェクト。 参照型の場合は、値を null にできます。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">検索に使用する等値比較子。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">リスト内の項目の型。</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that extends from index to the last element, if found; otherwise, -1.">変更できないリストで、インデックスから最後の要素までの要素範囲内で項目が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">変更できないリストのうち、指定したインデックスから最後の要素までの要素範囲の中から、指定したオブジェクトを検索し、最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="list" vsli:raw="The list to search.">検索するリスト。</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">変更できないリスト内で検索するオブジェクト。 参照型の場合は、値を null にできます。</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 (ゼロ) は有効です。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">リスト内の項目の型。</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, -1.">変更できないリストで、インデックスから最後の要素までの要素範囲内で項目が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">変更できないリストのうち、指定したインデックスから最後の要素までの要素範囲の中から、指定したオブジェクトを検索し、最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="list" vsli:raw="The list to search.">検索するリスト。</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">変更できないリスト内で検索するオブジェクト。 参照型の場合は、値を null にできます。</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 (ゼロ) は有効です。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">検索対象の範囲内にある要素の数。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">リスト内の項目の型。</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, -1.">変更できないリストで、インデックスから最後の要素までの要素範囲内で項目が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">変更できないリスト全体から、指定したオブジェクトを検索し、最後に見つかったオブジェクトの 0 から始まるインデックスを返します。</summary>
      <param name="list" vsli:raw="The list to search.">検索するリスト。</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">変更できないリスト内で検索するオブジェクト。 参照型の場合は、値を null にできます。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">リスト内の項目の型。</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, -1.">変更できないリスト全体で項目を検索し、見つかった場合は、インデックス番号の最も大きい要素の 0 から始まるインデックス番号、それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">変更できないリスト全体から、指定したオブジェクトを検索し、最後に見つかったオブジェクトの 0 から始まるインデックスを返します。</summary>
      <param name="list" vsli:raw="The list to search.">検索するリスト。</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">変更できないリスト内で検索するオブジェクト。 参照型の場合は、値を null にできます。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">検索に使用する等値比較子。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">リスト内の項目の型。</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, -1.">変更できないリスト全体で項目を検索し、見つかった場合は、インデックス番号の最も大きい要素の 0 から始まるインデックス番号、それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">変更できないリストのうち、最初の要素から指定したインデックスまでの要素範囲の中で、指定したオブジェクトを検索し、最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="list" vsli:raw="The list to search.">検索するリスト。</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">変更できないリスト内で検索するオブジェクト。 参照型の場合は、値を null にできます。</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">リスト内の項目の型。</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, -1.">変更できないリストのうち、最初の要素からインデックスまでの要素範囲内で項目が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">変更できないリストのうち、最初の要素から指定したインデックスまでの要素範囲の中で、指定したオブジェクトを検索し、最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="list" vsli:raw="The list to search.">検索するリスト。</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">変更できないリスト内で検索するオブジェクト。 参照型の場合は、値を null にできます。</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">検索対象の範囲内にある要素の数。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">リスト内の項目の型。</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, -1.">変更できないリストのうち、最初の要素からインデックスまでの要素範囲内で項目が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Removes the specified value from this list.">指定した値をこのリストから削除します。</summary>
      <param name="list" vsli:raw="The list to search.">検索するリスト。</param>
      <param name="value" vsli:raw="The value to remove.">削除する値。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">リスト内の項目の型。</typeparam>
      <returns vsli:raw="A new immutable list with the element removed, or this list if the element is not in this list.">要素が削除された、新しい変更できないリスト。このリスト内に要素がない場合は、このリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Removes the specified values from this list.">指定した値をこのリストから削除します。</summary>
      <param name="list" vsli:raw="The list to search.">検索するリスト。</param>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">このリストに一致するものが見つかった場合に削除する項目。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">リスト内の項目の型。</typeparam>
      <returns vsli:raw="A new immutable list with the elements removed.">要素が削除された新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)">
      <summary vsli:raw="Replaces the first equal element in the list with the specified element.">リスト内で最初に一致する要素を、指定した要素に置換します。</summary>
      <param name="list" vsli:raw="The list to search.">検索するリスト。</param>
      <param name="oldValue" vsli:raw="The element to replace.">置換する要素。</param>
      <param name="newValue" vsli:raw="The element to replace the old element with.">古い要素を置換する要素。</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">リスト内の項目の型。</typeparam>
      <returns vsli:raw="The new list -- even if the value being replaced is equal to the new value for that position.">新しいリスト (置き換えられる値がその位置の新しい値と同じ場合も)。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">リスト内に古い値が存在しない場合にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable list of its contents.">シーケンスを列挙し、その内容の変更できないリストを生成します。</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">列挙するシーケンス。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">シーケンス内の要素の型。</typeparam>
      <returns vsli:raw="An immutable list that contains the items in the specified sequence.">指定されたシーケンス内の項目を含む、変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Immutable.ImmutableList{``0}.Builder)">
      <summary vsli:raw="Creates an immutable list from the current contents of the builder's collection.">ビルダーのコレクションの現在の内容から、変更できないリストを作成します。</summary>
      <param name="builder" vsli:raw="The builder to create the immutable list from.">変更できないリストを作成するためのビルダー。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the list.">リスト内の要素の型。</typeparam>
      <returns vsli:raw="An immutable list that contains the current contents in the builder's collection.">ビルダーのコレクションの現在の内容を含む、変更できないリスト。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1">
      <summary vsli:raw="Represents an immutable list, which is a strongly typed list of objects that can be accessed by index.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">変更できないリスト (インデックスを使用してアクセスできる、厳密に型指定されたオブジェクトのリスト) を表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">リスト内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Add(`0)">
      <summary vsli:raw="Adds the specified object to the end of the immutable list.">指定したオブジェクトを、変更できないリストの末尾に追加します。</summary>
      <param name="value" vsli:raw="The object to add.">追加するオブジェクト。</param>
      <returns vsli:raw="A new immutable list with the object added.">オブジェクトが追加された新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the elements of the specified collection to the end of the immutable list.">指定したコレクションの要素を、変更できないリストの末尾に追加します。</summary>
      <param name="items" vsli:raw="The collection whose elements will be added to the end of the list.">リストの末尾に追加する要素を含むコレクション。</param>
      <returns vsli:raw="A new immutable list with the elements added.">要素が追加された新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)">
      <summary vsli:raw="Searches the entire sorted list for an element using the default comparer and returns the zero-based index of the element.">既定の比較子を使用して、並べ替えられたリスト全体から要素を検索し、その要素の 0 から始まるインデックスを返します。</summary>
      <param name="item" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns vsli:raw="The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.ICollection.Count&quot; /&gt;.">item が見つかった場合は、並べ替えられたリスト内の item の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、item の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.ICollection.Count" /> のビットごとの補数です。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The default comparer cannot find a comparer implementation of the for type T.">既定の比較子は、T 型の比較子の実装を見つけることができません。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the entire sorted list for an element using the specified comparer and returns the zero-based index of the element.">指定した比較子を使用して、並べ替えられたリスト全体から要素を検索し、その要素の 0 から始まるインデックスを返します。</summary>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">検索するオブジェクト。 参照型の場合は、値を null にできます。</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements or null to use the default comparer.">要素を比較する場合に使用する比較子実装。または、既定の比較子を使用する場合は null。</param>
      <returns vsli:raw="The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.ICollection.Count&quot; /&gt;.">item が見つかった場合は、並べ替えられたリスト内の item の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、item の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.ICollection.Count" /> のビットごとの補数です。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="comparer is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer cannot find an comparer implementation for type T.">comparer は <see langword="null" /> であり、既定の比較子は T 型の比較子の実装を見つけることができません。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches a range of elements in the sorted list for an element using the specified comparer and returns the zero-based index of the element.">指定した比較子を使用して、並べ替えられたリスト内の要素範囲から要素を検索し、その要素の 0 から始まるインデックスを返します。</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to search.">検索範囲の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count" vsli:raw="The length of the range to search.">検索する範囲の長さ。</param>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">検索するオブジェクト。 参照型の場合は、値を null にできます。</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">要素を比較する場合に使用する比較子実装。または、既定の比較子を使用する場合は <see langword="null" />。</param>
      <returns vsli:raw="The zero-based index of item in the sorted list, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;paramref name=&quot;count&quot; /&gt;.">item が見つかった場合は、並べ替えられたリスト内の item の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、item の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<paramref name="count" /> のビットごとの補数です。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="index is less than 0 or &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">index が 0 未満または <paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="index and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range in the list.">index および <paramref name="count" /> がリストの有効な範囲を表していません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer cannot find an comparer implementation for type T.">
        <paramref name="comparer" /> は <see langword="null" /> であり、既定の比較子は T 型の比較子の実装を見つけることができません。</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Builder">
      <summary vsli:raw="Represents a list that mutates with little or no memory allocations and that can produce or build on immutable list instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">メモリ割り当てがほとんどまたはまったくない場合でも変化し、変更できないリストのインスタンス上で非常に効率よく生成またはビルドできるリストを表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Add(`0)">
      <summary vsli:raw="Adds an item to the immutable list.">変更できないリストに項目を追加します。</summary>
      <param name="item" vsli:raw="The item to add to the list.">リストに追加する項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds a series of elements to the end of this list.">このリストの末尾に一連の要素を追加します。</summary>
      <param name="items" vsli:raw="The elements to add to the end of the list.">リストの末尾に追加する要素。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0)">
      <summary vsli:raw="Searches the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the default comparer and returns the zero-based index of the element.">既定の比較子を使用して、<see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 全体で要素を検索し、その要素の 0 から始まるインデックスを返します。</summary>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">検索するオブジェクト。 参照型の場合は、値を null にできます。</param>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">項目が見つかった場合は、<see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 内の項目の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="item" /> の次に大きい要素のインデックスのビットごとの補数です。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> では、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスの実装、または型 T の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the specified comparer and returns the zero-based index of the element.">指定した比較子を使用して、<see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 全体で要素を検索し、その要素の 0 から始まるインデックスを返します。</summary>
      <param name="item" vsli:raw="The object to locate. This value can be null for reference types.">検索するオブジェクト。 参照型の場合は、この値を null にできます。</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; for the default comparer.">要素を比較する場合に使用する実装。または、既定の比較子を使用する場合は <see langword="null" />。</param>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">項目が見つかった場合は、<see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 内の項目の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="item" /> の次に大きい要素のインデックスのビットごとの補数です。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">
        <paramref name="comparer" /> が <see langword="null" /> です。また、既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> では、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスの実装、または型 T の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the specified range of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the specified comparer and returns the zero-based index of the element.">指定した比較子を使用して、<see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> の指定された範囲内で要素を検索し、その要素の 0 から始まるインデックスを返します。</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to search.">検索範囲の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count" vsli:raw="The length of the range to search.">検索する範囲の長さ。</param>
      <param name="item" vsli:raw="The object to locate. This value can be null for reference types.">検索するオブジェクト。 参照型の場合は、この値を null にできます。</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; for the default comparer.">要素を比較する場合に使用する実装。または、既定の比較子を使用する場合は <see langword="null" />。</param>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">項目が見つかった場合は、<see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> 内の項目の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="item" /> の次に大きい要素のインデックスのビットごとの補数です。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" /> が 0 未満です。
または
<paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.Generic.List`1" /> において有効な範囲を表していません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">
        <paramref name="comparer" /> が <see langword="null" /> です。また、既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> では、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスの実装、または型 T の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable list.">変更できないリストからすべての項目を削除します。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the immutable list contains a specific value.">変更できないリストに特定の値が含まれているかどうかを判定します。</summary>
      <param name="item" vsli:raw="The object to locate in the list.">リスト内で検索するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">リストで項目が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ConvertAll``1(System.Func{`0,``0})">
      <summary vsli:raw="Creates a new immutable list from the list represented by this builder by using the converter function.">コンバーター関数を使用して、このビルダーによって表されるリストから、新しい変更できないリストを作成します。</summary>
      <param name="converter" vsli:raw="The converter function.">コンバーター関数。</param>
      <typeparam name="TOutput" vsli:raw="The type of the output of the delegate converter function.">デリゲート コンバーター関数の出力の型。</typeparam>
      <returns vsli:raw="A new immutable list from the list represented by this builder.">このビルダーによって表されるリストから作成した、新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[])">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the beginning of the target array.">変更できないリスト全体を互換性のある 1 次元配列にコピーします。コピー操作は、コピー先の配列の先頭から始まります。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">変更できないリストの要素のコピー先である 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">変更できないリスト全体を互換性のある 1 次元配列にコピーします。コピー操作は、コピー先配列の指定したインデックス位置から始まります。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">変更できないリストの要素のコピー先である 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in array at which copying begins.">コピーの開始位置となる、配列の 0 から始まるインデックス。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">変更できないリスト全体を互換性のある 1 次元配列にコピーします。コピー操作は、コピー先配列の指定したインデックス位置から始まります。</summary>
      <param name="index" vsli:raw="The zero-based index in the source immutable list at which copying begins.">コピー元の変更できないリスト内でコピーを開始する位置を示す、0 から始まるインデックス。</param>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">変更できないリストの要素のコピー先である 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <param name="count" vsli:raw="The number of elements to copy.">コピーする要素の数。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements in this immutable list.">この変更できないリスト内の要素の数を取得します。</summary>
      <returns vsli:raw="The number of elements in this list.">このリスト内の要素の数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Exists(System.Predicate{`0})">
      <summary vsli:raw="Determines whether the immutable list contains elements that match the conditions defined by the specified predicate.">変更できないリストに、指定された述語によって定義された条件と一致する要素が含まれているかどうかを判断します。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">検索する要素の条件を定義するデリゲート。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable list contains one or more elements that match the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定された述語によって定義された条件と一致する要素が少なくとも 1 つ、変更できないリストに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Find(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire immutable list.">指定された述語によって定義された条件と一致する要素を検索し、変更できないリスト全体の中で最もインデックス番号の小さい要素を返します。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">検索する要素の条件を定義するデリゲート。</param>
      <returns vsli:raw="The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">見つかった場合は、指定された述語によって定義された条件と一致する最初の要素。それ以外の場合は、型 <paramref name="T" /> の既定値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindAll(System.Predicate{`0})">
      <summary vsli:raw="Retrieves all the elements that match the conditions defined by the specified predicate.">指定された述語によって定義された条件と一致するすべての要素を取得します。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">検索する要素の条件を定義するデリゲート。</param>
      <returns vsli:raw="An immutable list containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty immutable list.">指定した述語によって定義される条件に一致する要素が見つかった場合は、そのすべての要素を格納する変更できないリスト。それ以外の場合は、空の変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">変更できないリストのうち、指定したインデックスから始まり、指定した要素数が含まれる範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">検索対象の範囲内にある要素の数。</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">検索する要素の条件を定義するデリゲート。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">変更できないリストの指定したインデックスから最後の要素までの範囲内で、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">検索する要素の条件を定義するデリゲート。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire immutable list.">変更できないリスト全体から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">検索する要素の条件を定義するデリゲート。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLast(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire immutable list.">指定された述語によって定義された条件と一致する要素を、変更できないリスト全体を対象に検索し、最もインデックス番号の大きい要素を返します。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">検索する要素の条件を定義するデリゲート。</param>
      <returns vsli:raw="The last element that matches the conditions defined by the specified predicate, found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">見つかった場合は、指定された述語によって定義された条件と一致する最後の要素。それ以外の場合は、型 <paramref name="T" /> の既定値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">変更できないリストのうち、指定したインデックスで終わり、指定した要素数が含まれる範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">検索対象の範囲内にある要素の数。</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">検索する要素の条件を定義するデリゲート。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">変更できないリストのうち、先頭の要素から指定したインデックスまでの範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">検索する要素の条件を定義するデリゲート。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire immutable list.">変更できないリスト全体から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">検索する要素の条件を定義するデリゲート。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ForEach(System.Action{`0})">
      <summary vsli:raw="Performs the specified action on each element of the list.">リストの各要素に対して、指定された処理を実行します。</summary>
      <param name="action" vsli:raw="The delegate to perform on each element of the list.">リストの各要素に対して実行するデリゲート。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">リストの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetRange(System.Int32,System.Int32)">
      <summary vsli:raw="Creates a shallow copy of a range of elements in the source immutable list.">コピー元の変更できないリスト内の、ある範囲の要素の簡易コピーを作成します。</summary>
      <param name="index" vsli:raw="The zero-based index at which the range starts.">範囲の開始位置を示す、0 から始まるインデックス番号。</param>
      <param name="count" vsli:raw="The number of elements in the range.">範囲内の要素の数。</param>
      <returns vsli:raw="A shallow copy of a range of elements in the source immutable list.">コピー元の変更できないリスト内の、ある範囲の要素の簡易コピー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list.">変更できないリストの要素の範囲内で、指定したオブジェクトを検索し、最初に見つかったオブジェクトの 0 から始まるインデックスを返します。</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">変更できないリスト内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list, if found; otherwise, -1.">見つかった場合は、変更できないリストの要素範囲内で最初に見つかった <paramref name="item" /> の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">変更できないリストのうち、指定したインデックスから最後の要素までの要素範囲の中から、指定したオブジェクトを検索し、最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">変更できないリスト内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 (ゼロ) は有効です。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that extends from &lt;paramref name=&quot;index&quot; /&gt; to the last element, if found; otherwise, -1.">見つかった場合は、変更できないリストにおいて、<paramref name="index" /> から最後の要素までの要素範囲内で最初に見つかった項目の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">変更できないリストのうち、指定したインデックスから始まり、指定した要素数が含まれる範囲内で、指定したオブジェクトを検索し、最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">変更できないリスト内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 (ゼロ) は有効です。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">検索対象の範囲内にある要素の数。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1.">見つかった場合は、変更できないリストにおいて、<paramref name="index" /> から始まって <paramref name="count" /> 個の要素が含まれている要素範囲内で最初に見つかった項目の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; that starts at the specified index and contains the specified number of elements.">指定したインデックスから始まり、指定した数の要素が含まれる <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> の要素範囲内で、指定したオブジェクトを検索し、最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">変更できないリスト内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 (ゼロ) は有効です。</param>
      <param name="count" vsli:raw="The number of elements to search.">検索する要素数。</param>
      <param name="equalityComparer" vsli:raw="The value comparer to use for comparing elements for equality.">要素が等しいかどうかを比較するために使用する、値の比較子。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1">見つかった場合は、変更できないリストにおいて、<paramref name="index" /> から始まって <paramref name="count" /> 個の要素が含まれる要素範囲内で最初に見つかった項目の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item to the immutable list at the specified index.">変更できないリスト内の指定したインデックス位置に項目を挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">
        <paramref name="item" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="item" vsli:raw="The object to insert into the immutable list.">変更できないリストに挿入するオブジェクト。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the elements of a collection into the immutable list at the specified index.">コレクションの要素を、変更できないリスト内の指定したインデックス位置に挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index at which the new elements should be inserted.">新しい要素が挿入される位置の 0 から始まるインデックス。</param>
      <param name="items" vsli:raw="The collection whose elements should be inserted into the immutable list. The collection itself cannot be &lt;see langword=&quot;null&quot; /&gt;, but it can contain elements that are null, if type &lt;c&gt;T&lt;/c&gt; is a reference type.">変更できないリストに挿入する要素を持つコレクション。 コレクション自体を <see langword="null" /> にすることはできませんが、<c>T</c> 型が参照型の場合、コレクションに格納する要素は null であってもかまいません。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the value for a given index in the list.">リスト内の指定されたインデックスの値を取得または設定します。</summary>
      <param name="index" vsli:raw="The index of the item to get or set.">取得または設定する項目のインデックス。</param>
      <returns vsli:raw="The value at the specified index.">指定したインデックス位置にある値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the value for a given &lt;paramref name=&quot;index&quot; /&gt; into the list.">リストに指定した <paramref name="index" /> の値への読み取り専用の参照を取得します。</summary>
      <param name="index" vsli:raw="The index of the desired element.">目的の要素のインデックス。</param>
      <returns vsli:raw="A read-only reference to the value at the specified &lt;paramref name=&quot;index&quot; /&gt;.">指定した <paramref name="index" /> にある値への読み取り専用の参照。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">変更できないリスト全体から、指定したオブジェクトを検索し、最後に見つかったオブジェクトの 0 から始まるインデックスを返します。</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">変更できないリスト内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the entire immutable list, if found; otherwise, -1.">見つかった場合は、変更できないリスト全体で最後に見つかった <paramref name="item" /> の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">変更できないリストのうち、最初の要素から指定したインデックスまでの要素範囲の中で、指定したオブジェクトを検索し、最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">変更できないリスト内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list that extends from the first element to &lt;paramref name=&quot;index&quot; /&gt;, if found; otherwise, -1.">見つかった場合は、変更できないリストにおいて、最初の要素から <paramref name="index" /> までの要素範囲内で最後に見つかった <paramref name="item" /> の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">変更できないリストのうち、指定した要素数が含まれ、指定したインデックスの位置で終了する要素範囲の中で、指定したオブジェクトを検索し、最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">変更できないリスト内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">検索対象の範囲内にある要素の数。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list that contains &lt;paramref name=&quot;count&quot; /&gt; number of elements and ends at &lt;paramref name=&quot;index&quot; /&gt;, if found; otherwise, -1.">見つかった場合は、変更できないリストにおいて、<paramref name="count" /> 個の要素が含まれていて <paramref name="index" /> で終了する要素範囲内で最後に見つかった <paramref name="item" /> の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">変更できないリストのうち、指定した要素数が含まれ、指定したインデックスの位置で終了する要素範囲の中で、指定したオブジェクトを検索し、最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">変更できないリスト内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 (ゼロ) は有効です。</param>
      <param name="count" vsli:raw="The number of elements to search.">検索する要素数。</param>
      <param name="equalityComparer" vsli:raw="The value comparer to use for comparing elements for equality.">要素が等しいかどうかを比較するために使用する、値の比較子。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1">見つかった場合は、変更できないリストにおいて、<paramref name="index" /> から始まって <paramref name="count" /> 個の要素が含まれる要素範囲内で最初に見つかった項目の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">特定のオブジェクトの最初に出現したものを、変更できないリストから削除します。</summary>
      <param name="item" vsli:raw="The object to remove from the list.">リストから削除するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item was successfully removed from the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if item is not found in the list.">項目がリストから正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドは、項目がリストに見つからない場合にも <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">指定した述語によって定義される条件に一致するすべての要素を削除します。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">削除する要素の条件を定義するデリゲート。</param>
      <returns vsli:raw="The number of elements removed from the immutable list.">変更できないリストから削除される要素の数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the immutable list.">変更できないリストの指定したインデックス位置にある項目を削除します。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove from the list.">リストから削除する項目の 0 から始まるインデックス。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse">
      <summary vsli:raw="Reverses the order of the elements in the entire immutable list.">変更できないリスト全体の要素の順序を反転させます。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse(System.Int32,System.Int32)">
      <summary vsli:raw="Reverses the order of the elements in the specified range of the immutable list.">変更できないリストの指定した範囲内の要素の順序を反転させます。</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to reverse.">反転させる範囲の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count" vsli:raw="The number of elements in the range to reverse.">反転させる範囲内にある要素の数。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the default comparer.">既定の比較子を使用して、変更できないリスト全体の要素を並べ替えます。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the specified comparer.">指定された比較子を使用して、変更できないリスト全体の要素を並べ替えます。</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">要素を比較する場合に使用する実装。または、既定の比較子 (<see cref="P:System.Collections.Generic.Comparer`1.Default" />) を使用する場合は <see langword="null" />。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the specified comparison object.">指定された比較オブジェクトを使用して、変更できないリスト全体の要素を並べ替えます。</summary>
      <param name="comparison" vsli:raw="The object to use when comparing elements.">要素を比較する場合に使用するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparison" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in a range of elements in the immutable list  by using the specified comparer.">指定した比較子を使用して、変更できないリストで範囲内の要素を並べ替えます。</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to sort.">並べ替える範囲の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count" vsli:raw="The length of the range to sort.">並べ替える範囲の長さ。</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">要素を比較する場合に使用する実装。または、既定の比較子 (<see cref="P:System.Collections.Generic.Comparer`1.Default" />) を使用する場合は <see langword="null" />。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether this instance is read-only.">このインスタンスが読み取り専用かどうかを示す値が取得されます。</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;.">常に<c>false</c>です。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the list to an array, starting at a particular array index.">特定の配列インデックスを開始位置として、配列にリストの要素をコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the list. The array must have zero-based indexing.">リストから要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the list.">リストに項目を追加します。</summary>
      <param name="value" vsli:raw="The object to add to the list.">リストに追加するオブジェクト。</param>
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.">新しい要素が挿入された位置、または項目がコレクションに挿入されなかったことを示す -1。</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the list.">リストからすべての項目を削除します。</summary>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the list contains a specific value.">リストに特定の値が含まれているかどうかを確認します。</summary>
      <param name="value" vsli:raw="The object to locate in the list.">リスト内で検索するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">リストで <see cref="T:System.Object" /> が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the list.">リスト内の特定の項目のインデックスを確認します。</summary>
      <param name="value" vsli:raw="The object to locate in the list.">リスト内で検索するオブジェクト。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">リストに存在する場合は <paramref name="value" /> のインデックス。それ以外の場合は -1。</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item to the list at the specified index.">リスト内の指定されたインデックス位置に項目を挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">
        <paramref name="value" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="value" vsli:raw="The object to insert into the list.">リストに挿入するオブジェクト。</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">
        <see cref="T:System.Collections.IList" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">指定したインデックス位置にある <see cref="T:System.Object" /> を取得または設定します。</summary>
      <param name="index" vsli:raw="The index.">インデックス。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the list.">リスト内で最初に見つかった特定のオブジェクトを削除します。</summary>
      <param name="value" vsli:raw="The object to remove from the list.">リストから削除するオブジェクト。</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable list based on the contents of this instance.">このインスタンスの内容に基づいて、変更できないリストを作成します。</summary>
      <returns vsli:raw="An immutable list.">変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.TrueForAll(System.Predicate{`0})">
      <summary vsli:raw="Determines whether every element in the immutable list matches the conditions defined by the specified predicate.">変更できないリスト内のすべての要素が、指定された述語によって定義された条件と一致するかどうかを調べます。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions to check against the elements.">要素の条件を定義するデリゲート。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element in the immutable list matches the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If the list has no elements, the return value is &lt;see langword=&quot;true&quot; /&gt;.">変更できないリスト内のすべての要素が、指定した述語によって定義される条件に一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 リストに要素がない場合、戻り値は <see langword="true" /> です。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Clear">
      <summary vsli:raw="Removes all elements from the immutable list.">変更できないリストからすべての要素を削除します。</summary>
      <returns vsli:raw="An empty list that retains the same sort or unordered semantics that this instance has.">このインスタンスと同じ並べ替えセマンティクスまたは順序なしのセマンティクスを保持する空のリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable list contains the specified value.">指定した値がこの変更できないリストに格納されているかどうかを判断します。</summary>
      <param name="value" vsli:raw="The value to locate.">検索する値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した値がリストに含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})">
      <summary vsli:raw="Converts the elements in the current immutable list to another type, and returns a list containing the converted elements.">現在の変更できないリストの要素を別の型に変換し、変換された要素が格納されたリストを返します。</summary>
      <param name="converter" vsli:raw="A delegate that converts each element from one type to another type.">各要素の型を変換するデリゲート。</param>
      <typeparam name="TOutput" vsli:raw="The type of the elements of the target array.">変換後の配列要素の型。</typeparam>
      <returns vsli:raw="A list of the target type containing the converted elements from the current &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt;.">現在の <see cref="T:System.Collections.Immutable.ImmutableList`1" /> から変換された要素を含むターゲットの型のリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the beginning of the target array.">変更できないリスト全体を互換性のある 1 次元配列にコピーします。コピー操作は、コピー先の配列の先頭から始まります。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">変更できないリストの要素のコピー先である 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">変更できないリスト全体を互換性のある 1 次元配列にコピーします。コピー操作は、コピー先配列の指定したインデックス位置から始まります。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">変更できないリストの要素のコピー先である 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies a range of elements from the immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">要素の範囲を、変更できないリストから互換性のある 1 次元配列にコピーします。コピー操作は、コピー先の配列の指定したインデックス位置から始まります。</summary>
      <param name="index" vsli:raw="The zero-based index in the source immutable list at which copying begins.">コピー元の変更できないリスト内でコピーを開始する位置を示す、0 から始まるインデックス。</param>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">変更できないリストの要素のコピー先である 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in array at which copying begins.">コピーの開始位置となる、配列の 0 から始まるインデックス。</param>
      <param name="count" vsli:raw="The number of elements to copy.">コピーする要素の数。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the list.">リストに格納されている要素の数を取得します。</summary>
      <returns vsli:raw="The number of elements in the list.">リストの要素数。</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableList`1.Empty">
      <summary vsli:raw="Gets an empty immutable list.">既定の並べ替え比較子を使用する空のセットを取得します。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">バイナリ ツリーの内容を列挙します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">列挙子の現在位置の要素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Enumerator&quot; /&gt; class.">
        <see cref="T:System.Collections.Immutable.ImmutableList`1.Enumerator" /> クラスの現在のインスタンスによって使用されているリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances enumeration to the next element of the immutable list.">列挙体を、変更できないリストの次の要素に進めます。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the list.">列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がリストの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable list.">列挙子を初期位置、つまり変更できないリストの最初の要素の前に設定します。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">現在の要素。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})">
      <summary vsli:raw="Determines whether the immutable list contains elements that match the conditions defined by the specified predicate.">変更できないリストに、指定された述語によって定義された条件と一致する要素が含まれているかどうかを判断します。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">検索する要素の条件を定義するデリゲート。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable list contains one or more elements that match the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定された述語によって定義された条件と一致する要素が少なくとも 1 つ、変更できないリストに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire immutable list.">指定された述語によって定義された条件と一致する要素を検索し、変更できないリスト全体の中で最もインデックス番号の小さい要素を返します。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">検索する要素の条件を定義するデリゲート。</param>
      <returns vsli:raw="The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">見つかった場合は、指定された述語によって定義された条件と一致する最初の要素。それ以外の場合は、型 <paramref name="T" /> の既定値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})">
      <summary vsli:raw="Retrieves all the elements that match the conditions defined by the specified predicate.">指定された述語によって定義された条件と一致するすべての要素を取得します。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">検索する要素の条件を定義するデリゲート。</param>
      <returns vsli:raw="An immutable list that contains all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty immutable list.">指定した述語によって定義される条件に一致する要素が見つかった場合は、そのすべての要素を格納する変更できないリスト。それ以外の場合は、空の変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">変更できないリストのうち、指定したインデックスから始まり、指定した要素数が含まれる範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">検索対象の範囲内にある要素の数。</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">検索する要素の条件を定義するデリゲート。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.">match で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">変更できないリストの指定したインデックスから最後の要素までの範囲内で、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">検索する要素の条件を定義するデリゲート。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.">match で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire immutable list.">変更できないリスト全体から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">検索する要素の条件を定義するデリゲート。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, -1.">match で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire immutable list.">指定された述語によって定義された条件と一致する要素を、変更できないリスト全体を対象に検索し、最もインデックス番号の大きい要素を返します。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">検索する要素の条件を定義するデリゲート。</param>
      <returns vsli:raw="The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">見つかった場合は、指定された述語によって定義された条件と一致する最後の要素。それ以外の場合は、型 <paramref name="T" /> の既定値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">変更できないリストのうち、指定したインデックスで終わり、指定した要素数が含まれる範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">検索対象の範囲内にある要素の数。</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">検索する要素の条件を定義するデリゲート。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">
        <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">変更できないリストのうち、先頭の要素から指定したインデックスまでの範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">検索する要素の条件を定義するデリゲート。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">
        <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire immutable list.">変更できないリスト全体から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">検索する要素の条件を定義するデリゲート。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">
        <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})">
      <summary vsli:raw="Performs the specified action on each element of the immutable list.">変更できないリスト内の各要素に対して、指定された処理を実行します。</summary>
      <param name="action" vsli:raw="The delegate to perform on each element of the immutable list.">変更できないリストの各要素に対して実行するデリゲート。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">変更できないリストを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the immutable list.">変更できないリストの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)">
      <summary vsli:raw="Creates a shallow copy of a range of elements in the source immutable list.">コピー元の変更できないリスト内の、ある範囲の要素の簡易コピーを作成します。</summary>
      <param name="index" vsli:raw="The zero-based index at which the range starts.">範囲の開始位置を示す、0 から始まるインデックス番号。</param>
      <param name="count" vsli:raw="The number of elements in the range.">範囲内の要素の数。</param>
      <returns vsli:raw="A shallow copy of a range of elements in the source immutable list.">コピー元の変更できないリスト内の、ある範囲の要素の簡易コピー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the entire immutable list.">変更できないリスト全体から、指定したオブジェクトを検索し、最初に見つかったオブジェクトの 0 から始まるインデックスを返します。</summary>
      <param name="value" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">変更できないリスト内で検索するオブジェクト。 参照型の場合は、値を <c>null</c> にできます。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;value&quot; /&gt; within the entire immutable list, if found; otherwise, ?1.">変更できないリスト全体で <paramref name="value" /> を検索し、見つかった場合は、インデックス番号の最も小さい要素の 0 から始まるインデックス番号、それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the list that starts at the specified index and contains the specified number of elements.">リストのうち、指定したインデックスから始まり、指定した要素数が含まれる要素範囲内で、指定したオブジェクトを検索し、最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="item" vsli:raw="The object to locate in the list The value can be null for reference types.">リスト内で検索するオブジェクト。参照型の場合は null の値を使用できます。</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 (ゼロ) は有効です。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">検索対象の範囲内にある要素の数。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">検索に使用する等値比較子。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the list that starts at index and contains count number of elements, if found; otherwise, -1.">index から始まって count 個の要素を格納するリスト内の要素の範囲内で item が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified object into the immutable list at the specified index.">指定したオブジェクトを、変更できないリストの指定したインデックス位置に挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the object.">オブジェクトを挿入する位置を示す 0 から始まるインデックス。</param>
      <param name="item" vsli:raw="The object to insert.">挿入するオブジェクト。</param>
      <returns vsli:raw="The new immutable list after the object is inserted.">オブジェクトを挿入した後の新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the elements of a collection into the immutable list at the specified index.">コレクションの要素を、変更できないリスト内の指定したインデックス位置に挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the elements.">要素を挿入する位置を示す 0 から始まるインデックス。</param>
      <param name="items" vsli:raw="The collection whose elements should be inserted.">挿入する要素を含むコレクション。</param>
      <returns vsli:raw="The new immutable list after the elements are inserted.">要素を挿入した後の新しい変更できないリスト。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this list is empty.">このリストが空かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">リストが空である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index of the list.">リストの指定したインデックス位置にある要素を取得します。</summary>
      <param name="index" vsli:raw="The index of the element to retrieve.">取得する要素のインデックス。</param>
      <returns vsli:raw="The element at the specified index.">指定したインデックス位置にある要素。</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="In a get operation, &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">取得操作で、<paramref name="index" /> が負の値であるか、<see cref="P:System.Collections.Immutable.ImmutableList`1.Count" /> より小さくありません。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">指定した <paramref name="index" /> にあるセットの要素への読み取り専用の参照を取得します。</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">取得するセット内の要素の、0 から始まるインデックス番号。</param>
      <returns vsli:raw="A read-only reference to the element at the given position.">指定した位置にある要素への読み取り専用の参照。</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">
        <paramref name="index" /> が負の値であるか、<see cref="P:System.Collections.Immutable.ImmutableList`1.Count" /> より小さくありません。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the list that contains the specified number of elements and ends at the specified index.">リストのうち、指定した要素数が含まれ、指定したインデックスの位置で終了する要素範囲の中で、指定したオブジェクトを検索し、最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="item" vsli:raw="The object to locate in the list. The value can be null for reference types.">リスト内で検索するオブジェクト。 参照型の場合は、値を null にできます。</param>
      <param name="index" vsli:raw="The zero-based starting index of the backward search.">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">検索対象の範囲内にある要素の数。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">検索に使用する等値比較子。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the list that contains count number of elements and ends at index, if found; otherwise, -1.">count 個の要素を格納し、index の位置で終了するリスト内の要素の範囲内で item が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of the specified object from this immutable list.">この変更できないリストから、指定したオブジェクトのうち最初に出現したものを削除します。</summary>
      <param name="value" vsli:raw="The object to remove.">削除するオブジェクト。</param>
      <returns vsli:raw="A new list with the object removed, or this list if the specified object is not in this list.">オブジェクトが削除された新しいリスト。または、指定したオブジェクトがこのリストに存在しない場合は、このリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the first occurrence of the object that matches the specified value from this immutable list.">この変更できないリストから、指定した値と一致するオブジェクトのうち最初に出現したものを削除します。</summary>
      <param name="value" vsli:raw="The value of the element to remove from the list.">リストから削除する要素の値。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">検索に使用する等値比較子。</param>
      <returns vsli:raw="A new list with the object removed, or this list if the specified object is not in this list.">オブジェクトが削除された新しいリスト。または、指定したオブジェクトがこのリストに存在しない場合は、このリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">指定した述語によって定義される条件に一致するすべての要素を削除します。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">削除する要素の条件を定義するデリゲート。</param>
      <returns vsli:raw="The new list with the elements removed.">要素が削除された新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index.">指定したインデックス位置にある要素を削除します。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">削除する要素の 0 から始まるインデックス。</param>
      <returns vsli:raw="A new list with the element removed.">要素が削除された新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes a range of elements from this immutable list.">この変更できないリストから要素の範囲を削除します。</summary>
      <param name="items" vsli:raw="The collection whose elements should be removed if matches are found in this list.">このリストに一致するものが見つかった場合に要素が削除されるコレクション。</param>
      <returns vsli:raw="A new list with the elements removed.">要素が削除された新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified values from this list.">指定した値をこのリストから削除します。</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">このリストに一致するものが見つかった場合に削除する項目。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">検索に使用する等値比較子。</param>
      <returns vsli:raw="A new list with the elements removed.">要素が削除された新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes a range of elements, starting from the specified index and containing the specified number of elements, from this immutable list.">指定したインデックスから開始し、指定した数の要素を含む要素の範囲をこの変更できないリストから削除します。</summary>
      <param name="index" vsli:raw="The starting index to begin removal.">削除の開始インデックス。</param>
      <param name="count" vsli:raw="The number of elements to remove.">削除する要素の数を指定します。</param>
      <returns vsli:raw="A new list with the elements removed.">要素が削除された新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)">
      <summary vsli:raw="Replaces the specified element in the immutable list with a new element.">変更できないリスト内の指定された要素を新しい要素に置換します。</summary>
      <param name="oldValue" vsli:raw="The element to replace.">置換する要素。</param>
      <param name="newValue" vsli:raw="The element to replace &lt;paramref name=&quot;oldValue&quot; /&gt; with.">
        <paramref name="oldValue" /> を置換する要素。</param>
      <returns vsli:raw="The new list with the replaced element, even if it is equal to the old element.">要素が置換された新しいリスト (古い要素と同じ場合でも置換されます)。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the immutable list.">
        <paramref name="oldValue" /> は変更できないリストに存在しません。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Replaces the specified element in the immutable list with a new element.">変更できないリスト内の指定された要素を新しい要素に置換します。</summary>
      <param name="oldValue" vsli:raw="The element to replace in the list.">リスト内の置換する要素。</param>
      <param name="newValue" vsli:raw="The element to replace &lt;paramref name=&quot;oldValue&quot; /&gt; with.">
        <paramref name="oldValue" /> を置換する要素。</param>
      <param name="equalityComparer" vsli:raw="The comparer to use to check for equality.">等しいかどうかを確認するために使用する比較子。</param>
      <returns vsli:raw="A new list with the object replaced, or this list if the specified object is not in this list.">オブジェクトが置換された新しいリスト。指定したオブジェクトがこのリストに存在しない場合はこのリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse">
      <summary vsli:raw="Reverses the order of the elements in the entire immutable list.">変更できないリスト全体の要素の順序を反転させます。</summary>
      <returns vsli:raw="The reversed list.">逆順のリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)">
      <summary vsli:raw="Reverses the order of the elements in the specified range of the immutable list.">変更できないリストの指定した範囲内の要素の順序を反転させます。</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to reverse.">反転させる範囲の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count" vsli:raw="The number of elements in the range to reverse.">反転させる範囲内にある要素の数。</param>
      <returns vsli:raw="The reversed list.">逆順のリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element at a given position in the immutable list with the specified element.">変更できないリスト内の指定された位置にある要素を指定した要素に置換します。</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">リスト内の置換する要素の位置。</param>
      <param name="value" vsli:raw="The element to replace the old element with.">古い要素を置換する要素。</param>
      <returns vsli:raw="The new list with the replaced element, even if it is equal to the old element at that position.">要素が置換された新しいリスト (その位置にある古い要素と同じ場合でも置換されます)。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the default comparer.">既定の比較子を使用して、変更できないリスト全体の要素を並べ替えます。</summary>
      <returns vsli:raw="The sorted list.">並べ替えられたリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the specified comparer.">指定した比較子を使用して、変更できないリスト全体の要素を並べ替えます。</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">要素を比較する場合に使用する実装。または、既定の比較子 (<see cref="P:System.Collections.Generic.Comparer`1.Default" />) を使用する場合は <see langword="null" />。</param>
      <returns vsli:raw="The sorted list.">並べ替えられたリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the specified comparer.">指定した比較子を使用して、変更できないリスト全体の要素を並べ替えます。</summary>
      <param name="comparison" vsli:raw="The delegate to use when comparing elements.">要素を比較する場合に使用するデリゲート。</param>
      <returns vsli:raw="The sorted list.">並べ替えられたリスト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparison" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts a range of elements in the immutable list using the specified comparer.">指定した比較子を使用して、変更できないリスト全体のある範囲の要素を並べ替えます。</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to sort.">並べ替える範囲の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count" vsli:raw="The length of the range to sort.">並べ替える範囲の長さ。</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">要素を比較する場合に使用する実装。または、既定の比較子 (<see cref="P:System.Collections.Generic.Comparer`1.Default" />) を使用する場合は <see langword="null" />。</param>
      <returns vsli:raw="The sorted list.">並べ替えられたリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds the specified item to the immutable list.">指定された項目を、変更できないリストに追加します。</summary>
      <param name="item" vsli:raw="The item to add.">追加する項目。</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all items from the immutable list.">変更できないリストからすべての項目を削除します。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">特定のオブジェクトの最初に出現したものを、変更できないリストから削除します。</summary>
      <param name="item" vsli:raw="The object to remove.">削除するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the original list.">
        <paramref name="item" /> がリストから正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドは、<paramref name="item" /> が元のリストに見つからない場合にも <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">変更できないリストを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">リストの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an object in the immutable list at the specified index.">オブジェクトを、変更できないリストの指定したインデックス位置に挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">
        <paramref name="item" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="item" vsli:raw="The object to insert.">挿入するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the value at the specified index.">指定したインデックス位置にある値を取得または設定します。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to access." />
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="Thrown from getter when &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">
        <paramref name="index" /> が負の場合、または <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" /> より小さくない場合に、ゲッターからスローされます。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">セッターから常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the value at the specified index.">指定したインデックス位置にある値を削除します。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">削除する項目の 0 から始まるインデックス。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified array index.">変更できないリスト全体を互換性のある 1 次元配列にコピーします。コピー操作は、配列の指定したインデックス位置から始まります。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from immutable list.">変更できないリストの要素のコピー先である 1 次元配列。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="This type is immutable, so it is always thread-safe. See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">
        <see cref="T:System.Collections.ICollection" /> インターフェイスをご覧ください。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">以下を参照してください。<see cref="T:System.Collections.ICollection" /></summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">変更できないリストを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">リストの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the immutable list.">変更できないリストに項目を追加します。</summary>
      <param name="value" vsli:raw="The object to add to the list.">リストに追加するオブジェクト。</param>
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the list.">新しい要素が挿入された位置。または、項目がリストに挿入されなかった場合は -1。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the immutable list.">変更できないリストからすべての項目を削除します。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable list contains a specific value.">変更できないリストに特定の値が含まれているかどうかを判定します。</summary>
      <param name="value" vsli:raw="The object to locate in the list.">リスト内で検索するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">オブジェクトがリスト内で見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the immutable list.">変更できないリスト内の特定の項目のインデックスを確認します。</summary>
      <param name="value" vsli:raw="The object to locate in the list.">リスト内で検索するオブジェクト。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">リストに存在する場合は <paramref name="value" /> のインデックス。それ以外の場合は -1。</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the immutable list at the specified index.">変更できないリスト内の指定したインデックス位置に項目を挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">
        <paramref name="value" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="value" vsli:raw="The object to insert into the list.">リストに挿入するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">常にスローされます。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">
        <see cref="T:System.Collections.IList" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">指定したインデックス位置にある <see cref="T:System.Object" /> を取得または設定します。</summary>
      <param name="index" vsli:raw="The index.">インデックス。</param>
      <returns vsli:raw="The value at the specified index.">指定したインデックス位置にある値。</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="Thrown from getter when &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">
        <paramref name="index" /> が負の場合、または <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" /> より小さくない場合に、ゲッターからスローされます。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">セッターから常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">特定のオブジェクトの最初に出現したものを、変更できないリストから削除します。</summary>
      <param name="value" vsli:raw="The object to remove from the list.">リストから削除するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the immutable list.">変更できないリストの指定したインデックス位置にある項目を削除します。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">削除する項目の 0 から始まるインデックス。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary vsli:raw="Adds the specified value to this immutable list.">指定した値をこの変更できないリストに追加します。</summary>
      <param name="value" vsli:raw="The value to add.">加算する値。</param>
      <returns vsli:raw="A new list with the element added.">要素が追加された新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the specified values to this immutable list.">指定した値をこの変更できないリストに追加します。</summary>
      <param name="items" vsli:raw="The values to add.">追加する値。</param>
      <returns vsli:raw="A new list with the elements added.">要素が追加された新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary vsli:raw="Retrieves an empty list that has the same sorting and ordering semantics as this instance.">並べ替えと順序付けのセマンティクスがこのインスタンスと同じ空のリストを取得します。</summary>
      <returns vsli:raw="An empty list that has the same sorting and ordering semantics as this instance.">並べ替えと順序付けのセマンティクスがこのインスタンスと同じ空のリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified element at the specified index in the immutable list.">指定した要素を、変更できないリストの指定したインデックス位置に挿入します。</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">値を挿入する位置を示すインデックス。</param>
      <param name="item" vsli:raw="The element to insert.">挿入する要素。</param>
      <returns vsli:raw="A new immutable list that includes the specified element.">指定した要素が含まれている新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified elements at the specified index in the immutable list.">指定した要素を、変更できないリストの指定したインデックス位置に挿入します。</summary>
      <param name="index" vsli:raw="The index at which to insert the elements.">要素を挿入する位置を示すインデックス。</param>
      <param name="items" vsli:raw="The elements to insert.">挿入する要素。</param>
      <returns vsli:raw="A new immutable list that includes the specified elements.">指定した要素が含まれている新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the element with the specified value from the list.">指定した値を持つ要素をリストから削除します。</summary>
      <param name="value" vsli:raw="The value of the element to remove from the list.">リストから削除する要素の値。</param>
      <param name="equalityComparer" vsli:raw="The comparer to use to compare elements for equality.">要素が等しいかどうかを比較するために使用する比較子。</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt; with the specified element removed.">指定した要素が削除された新しい <see cref="T:System.Collections.Immutable.ImmutableList`1" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">指定した述語によって定義される条件に一致するすべての要素を削除します。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">削除する要素の条件を定義するデリゲート。</param>
      <returns vsli:raw="A new immutable list with the elements removed.">要素が削除された新しい変更できないリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the immutable list.">変更できないリストの指定したインデックス位置にある要素を削除します。</summary>
      <param name="index" vsli:raw="The index of the element to remove.">削除する要素のインデックス。</param>
      <returns vsli:raw="A new list with the element removed.">要素が削除された新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes a range of elements from this immutable list that match the items specified.">この変更できないリストから、指定した項目に一致する要素の範囲を削除します。</summary>
      <param name="items" vsli:raw="The range of items to remove from the list, if found.">見つかった場合にリストから削除する項目の範囲。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare elements.">要素の比較に使用する等値比較子。</param>
      <returns vsli:raw="An immutable list with the items removed.">項目が削除された変更できないリスト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;items&quot; /&gt; or &lt;paramref name=&quot;equalityComparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="items" /> または <paramref name="equalityComparer" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes the specified number of elements at the specified location from this list.">指定された位置にある指定された数の要素をこのリストから削除します。</summary>
      <param name="index" vsli:raw="The starting index of the range of elements to remove.">削除する要素の範囲の開始インデックス。</param>
      <param name="count" vsli:raw="The number of elements to remove.">削除する要素の数を指定します。</param>
      <returns vsli:raw="A new list with the elements removed.">要素が削除された新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Replaces an element in the list with the specified element.">リスト内の要素を、指定した要素に置換します。</summary>
      <param name="oldValue" vsli:raw="The element to replace.">置換する要素。</param>
      <param name="newValue" vsli:raw="The element to replace the old element with.">古い要素を置換する要素。</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">検索に使用する等値比較子。</param>
      <returns vsli:raw="The new list.">新しいリスト。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">リスト内に古い値が存在しない場合にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element in the list at a given position with the specified element.">リスト内の指定された位置にある要素を、指定した要素に置換します。</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">リスト内の置換する要素の位置。</param>
      <param name="value" vsli:raw="The element to replace the old element with.">古い要素を置換する要素。</param>
      <returns vsli:raw="The new list.">新しいリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ToBuilder">
      <summary vsli:raw="Creates a list that has the same contents as this list and can be efficiently mutated across multiple operations using standard mutable interfaces.">このリストと同じ内容で、標準の変更可能なインターフェイスを使用して複数の操作で効率的に変更できるリストを作成します。</summary>
      <returns vsli:raw="The created list with the same contents as this list.">このリストと同じ内容で作成されたリスト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})">
      <summary vsli:raw="Determines whether every element in the immutable list matches the conditions defined by the specified predicate.">変更できないリスト内のすべての要素が、指定された述語によって定義された条件と一致するかどうかを調べます。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions to check against the elements.">要素の条件を定義するデリゲート。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element in the immutable list matches the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If the list has no elements, the return value is &lt;see langword=&quot;true&quot; /&gt;.">変更できないリスト内のすべての要素が、指定した述語によって定義される条件に一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 リストに要素がない場合、戻り値は <see langword="true" /> です。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableQueue`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">
        <see cref="T:System.Collections.Immutable.ImmutableQueue`1" /> クラスのインスタンスの一連の初期化メソッドを提供します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1">
      <summary vsli:raw="Creates an empty immutable queue.">空の変更できないキューを作成します。</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable queue.">変更できないキューに格納される項目の型。</typeparam>
      <returns vsli:raw="An empty immutable queue.">空の変更できないキュー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable queue that contains the specified item.">指定された項目を含む新しい変更できないキューを作成します。</summary>
      <param name="item" vsli:raw="The item to prepopulate the queue with.">キューに事前に設定する項目。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable queue.">変更できないキュー内の項目の型。</typeparam>
      <returns vsli:raw="A new immutable queue that contains the specified item.">指定された項目を含む新しい変更できないキュー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable queue that contains the specified array of items.">指定された項目の配列を含む新しい変更できないキューを作成します。</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the queue with.">キューに事前に設定する項目が含まれている配列。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable queue.">変更できないキュー内の項目の型。</typeparam>
      <returns vsli:raw="A new immutable queue that contains the specified items.">指定された項目を含む新しい変更できないキュー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable queue that contains the specified items.">指定された項目を含む新しい変更できないキューを作成します。</summary>
      <param name="items" vsli:raw="The items to add to the queue before immutability is applied.">変更不可が適用される前にキューに追加する項目。</param>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">キュー内の要素の型。</typeparam>
      <returns vsli:raw="An immutable queue that contains the specified items.">指定した項目が格納されている変更できないキュー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Dequeue``1(System.Collections.Immutable.IImmutableQueue{``0},``0@)">
      <summary vsli:raw="Removes the item at the beginning of the immutable queue, and returns the new queue.">変更できないキューの先頭にある項目を削除し、新しいキューを返します。</summary>
      <param name="queue" vsli:raw="The queue to remove the item from.">項目を削除するキュー。</param>
      <param name="value" vsli:raw="When this method returns, contains the item from the beginning of the queue.">このメソッドから制御が戻った時点で、キューの先頭の項目が格納されます。</param>
      <typeparam name="T" vsli:raw="The type of elements in the immutable queue.">変更できないキュー内の要素の型。</typeparam>
      <returns vsli:raw="The new queue with the item removed.">項目が削除された新しいキュー。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">スタックが空です。</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1">
      <summary vsli:raw="Represents an immutable queue.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">変更できないキューを表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">キュー内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable queue.">変更できないキューからすべてのオブジェクトを削除します。</summary>
      <returns vsli:raw="The empty immutable queue.">空の変更できないキュー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue">
      <summary vsli:raw="Removes the element at the beginning of the immutable queue, and returns the new queue.">変更できないキューの先頭にある要素を削除し、新しいキューを返します。</summary>
      <returns vsli:raw="The new immutable queue; never &lt;see langword=&quot;null&quot; /&gt;.">新しい変更できないキュー。<c>null</c> になることはありません。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">キューが空です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue(`0@)">
      <summary vsli:raw="Removes the item at the beginning of the immutable queue, and returns the new queue.">変更できないキューの先頭にある項目を削除し、新しいキューを返します。</summary>
      <param name="value" vsli:raw="When this method returns, contains the element from the beginning of the queue.">このメソッドから制御が戻った時点で、キューの先頭にある要素が格納されます。</param>
      <returns vsli:raw="The new immutable queue with the beginning element removed.">先頭の要素が削除された、新しい変更できないキュー。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">キューが空です。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Empty">
      <summary vsli:raw="Gets an empty immutable queue.">空の変更できないキューを取得します。</summary>
      <returns vsli:raw="An empty immutable queue.">空の変更できないキュー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">変更できないキューの末尾に要素を追加し、新しいキューを返します。</summary>
      <param name="value" vsli:raw="The element to add.">追加する要素。</param>
      <returns vsli:raw="The new immutable queue.">新しい変更できないキュー。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of an immutable queue without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">メモリを割り当てずに変更できないキューの内容を列挙します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">列挙子の現在位置の要素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable queue.">列挙子を、変更できないキューの次の要素に進めます。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the queue.">列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がキューの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable queue.">変更できないキューを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the queue.">キューの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable queue is empty.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">この変更できないキューが空かどうかを示す値を取得します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this queue is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このキューが空の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Peek">
      <summary vsli:raw="Returns the element at the beginning of the immutable queue without removing it.">変更できないキューの先頭にある要素を削除せずに返します。</summary>
      <returns vsli:raw="The element at the beginning of the queue.">キューの先頭にある要素。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">キューが空です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.PeekRef">
      <summary vsli:raw="Gets a read-only reference to the element at the front of the queue.">キューの先頭にある要素への読み取り専用の参照を取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">キューが空です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the collection.">コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Clear">
      <summary vsli:raw="Removes all elements from the immutable queue.">変更できないキューからすべての要素を削除します。</summary>
      <returns vsli:raw="The empty immutable queue.">空の変更できないキュー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Dequeue">
      <summary vsli:raw="Removes the element at the beginning of the immutable queue, and returns the new queue.">変更できないキューの先頭にある要素を削除し、新しいキューを返します。</summary>
      <returns vsli:raw="The new immutable queue; never &lt;see langword=&quot;null&quot; /&gt;.">新しい変更できないキュー。<c>null</c> になることはありません。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">変更できないキューの末尾に要素を追加し、新しいキューを返します。</summary>
      <param name="value" vsli:raw="The element to add.">追加する要素。</param>
      <returns vsli:raw="The new immutable queue.">新しい変更できないキュー。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedDictionary`2&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">
        <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2" /> クラスのインスタンスの一連の初期化メソッドを提供します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2">
      <summary vsli:raw="Creates an empty immutable sorted dictionary.">空の変更できない並べ替えられたディクショナリを作成します。</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">ディクショナリによって格納されるキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">ディクショナリによって格納される値の型。</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">空の変更できない並べ替えられたディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates an empty immutable sorted dictionary that uses the specified key comparer.">指定されたキーの比較子を使用する、空の変更できない並べ替えられたディクショナリを作成します。</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">ディクショナリ内のキーが等しいかどうかを判定するために使用する実装。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">ディクショナリによって格納されるキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">ディクショナリによって格納される値の型。</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">空の変更できない並べ替えられたディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates an empty immutable sorted dictionary that uses the specified key and value comparers.">指定されたキーと値の比較子を使用する、空の変更できない並べ替えられたディクショナリを作成します。</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">ディクショナリ内のキーが等しいかどうかを判定するために使用する実装。</param>
      <param name="valueComparer" vsli:raw="The implementation to use to determine the equality of values in the dictionary.">ディクショナリ内の値が等しいかどうかを判定するために使用する実装。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">ディクショナリによって格納されるキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">ディクショナリによって格納される値の型。</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">空の変更できない並べ替えられたディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">新しい変更できない並べ替えられたディクショナリ ビルダーを作成します。</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">ディクショナリによって格納されるキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">ディクショナリによって格納される値の型。</typeparam>
      <returns vsli:raw="The immutable collection builder.">変更できないコレクション ビルダー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">新しい変更できない並べ替えられたディクショナリ ビルダーを作成します。</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">キーの比較子。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">ディクショナリによって格納されるキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">ディクショナリによって格納される値の型。</typeparam>
      <returns vsli:raw="The immutable collection builder.">変更できないコレクション ビルダー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">新しい変更できない並べ替えられたディクショナリ ビルダーを作成します。</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">キーの比較子。</param>
      <param name="valueComparer" vsli:raw="The value comparer.">値の比較子。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">ディクショナリによって格納されるキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">ディクショナリによって格納される値の型。</typeparam>
      <returns vsli:raw="The immutable collection builder.">変更できないコレクション ビルダー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable sorted dictionary from the specified range of items with the specified key comparer.">指定されたキーの比較子を使用して、指定された範囲の項目から新しい変更できない並べ替えられたディクショナリを作成します。</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to evaluate keys for equality and sorting.">キーの等価性と並べ替えの評価に使用する比較子の実装。</param>
      <param name="items" vsli:raw="The items to add to the sorted dictionary.">並べ替えられたディクショナリに追加する項目。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">ディクショナリに格納されているキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">ディクショナリに格納されている値の型。</typeparam>
      <returns vsli:raw="The new immutable sorted dictionary that contains the specified items and uses the specified key comparer.">指定された項目を格納し、指定されたキーの比較子を使用する、新しい変更できない並べ替えられたディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable sorted dictionary from the specified range of items with the specified key and value comparers.">指定されたキーの比較子と値の比較子を使用して、指定された範囲の項目から新しい変更できない並べ替えられたディクショナリを作成します。</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality and sorting.">キーの等価性と並べ替えの比較に使用する比較子の実装。</param>
      <param name="valueComparer" vsli:raw="The comparer implementation to use to compare values for equality.">値の等価性と並べ替えの比較に使用する比較子の実装。</param>
      <param name="items" vsli:raw="The items to add to the sorted dictionary before it's immutable.">変更できなくなる前に、並べ替えられたディクショナリに追加する項目。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">ディクショナリに格納されているキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">ディクショナリに格納されている値の型。</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the specified items and uses the specified comparers.">指定された項目を格納し、指定された比較子を使用する、変更できない並べ替えられたディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates an immutable sorted dictionary that contains the specified items and uses the default comparer.">指定された項目を格納し、既定の比較子を使用する、変更できない並べ替えられたディクショナリを作成します。</summary>
      <param name="items" vsli:raw="The items to add to the sorted dictionary before it's immutable.">変更できなくなる前に、並べ替えられたディクショナリに追加する項目。</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">ディクショナリに格納されているキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">ディクショナリに格納されている値の型。</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the specified items.">指定された項目を格納する、変更できない並べ替えられたディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable sorted dictionary of its contents.">キーと値のペアのシーケンスを列挙し、その内容の変更できない並べ替えられたディクショナリを生成します。</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">列挙するキーと値のペアのシーケンス。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">ディクショナリ内の値の型。</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">指定されたシーケンス内のキーと値のペアを格納する、変更できない並べ替えられたディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key comparer.">キーと値のペアのシーケンスを列挙し、指定されたキーの比較子を使用してその内容の変更できないディクショナリを生成します。</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">列挙するキーと値のペアのシーケンス。</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">変更できないディクショナリの作成時に使用するキーの比較子。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">ディクショナリ内の値の型。</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">指定されたシーケンス内のキーと値のペアを格納する、変更できない並べ替えられたディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable sorted dictionary of its contents by using the specified key and value comparers.">キーと値のペアのシーケンスを列挙し、指定されたキーの比較子と値の比較子を使用してその内容の変更できない並べ替えられたディクショナリを生成します。</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">列挙するキーと値のペアのシーケンス。</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">変更できないディクショナリの作成時に使用するキーの比較子。</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the immutable dictionary.">変更できないディクショナリに使用する値の比較子。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">ディクショナリ内の値の型。</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">指定されたシーケンス内のキーと値のペアを格納する、変更できない並べ替えられたディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Immutable.ImmutableSortedDictionary{``0,``1}.Builder)">
      <summary vsli:raw="Creates an immutable sorted dictionary from the current contents of the builder's dictionary.">ビルダーのディクショナリの現在の内容から、変更できない並べ替えられたディクショナリを作成します。</summary>
      <param name="builder" vsli:raw="The builder to create the immutable sorted dictionary from.">変更できない並べ替えられたディクショナリを作成するためのビルダー。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">ディクショナリ内の値の型。</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the current contents in the builder's dictionary.">ビルダーのディクショナリの現在の内容を含む、変更できない並べ替えられたディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents.">シーケンスを列挙して変換し、その内容の変更できない並べ替えられたディクショナリを生成します。</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">ディクショナリを生成するために列挙するシーケンス。</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">各シーケンス要素からディクショナリのキーを生成する関数。</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">各シーケンス要素からディクショナリの値を生成する関数。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">シーケンス内の要素の型。</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">結果として生成されたディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">結果として生成されたディクショナリ内の値の型。</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the items in the specified sequence.">指定されたシーケンス内の項目を格納する、変更できない並べ替えられたディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents by using the specified key comparer.">シーケンスを列挙して変換し、指定されたキーの比較子を使用してその内容の変更できない並べ替えられたディクショナリを生成します。</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">ディクショナリを生成するために列挙するシーケンス。</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">各シーケンス要素からディクショナリのキーを生成する関数。</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">各シーケンス要素からディクショナリの値を生成する関数。</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">ディクショナリに使用するキーの比較子。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">シーケンス内の要素の型。</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">結果として生成されたディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">結果として生成されたディクショナリ内の値の型。</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">指定されたシーケンス内の項目を格納する、変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents by using the specified key and value comparers.">シーケンスを列挙して変換し、指定されたキーの比較子と値の比較子を使用してその内容の変更できない並べ替えられたディクショナリを生成します。</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">ディクショナリを生成するために列挙するシーケンス。</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">各シーケンス要素からディクショナリのキーを生成する関数。</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">各シーケンス要素からディクショナリの値を生成する関数。</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">ディクショナリに使用するキーの比較子。</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the dictionary.">ディクショナリに使用する値の比較子。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">シーケンス内の要素の型。</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">結果として生成されたディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">結果として生成されたディクショナリ内の値の型。</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the items in the specified sequence.">指定されたシーケンス内の項目を格納する、変更できない並べ替えられたディクショナリ。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2">
      <summary vsli:raw="Represents an immutable sorted dictionary.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">変更できない並べ替えられたディクショナリを表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="TKey" vsli:raw="The type of the key contained in the dictionary.">ディクショナリに格納されているキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value contained in the dictionary.">ディクショナリに格納されている値の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the immutable sorted dictionary.">指定したキーと値を持つ要素を、変更できない並べ替えられたディクショナリに追加します。</summary>
      <param name="key" vsli:raw="The key of the entry to add.">追加するエントリのキー。</param>
      <param name="value" vsli:raw="The value of entry to add.">追加するエントリの値。</param>
      <returns vsli:raw="A new immutable sorted dictionary that contains the additional key/value pair.">追加のキーと値のペアを格納する、新しい変更できない並べ替えられたディクショナリ。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">所定のキーはディクショナリに既に存在しますが、値が異なります。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specific key/value pairs to the immutable sorted dictionary.">特定のキーと値のペアを、変更できない並べ替えられたディクショナリに追加します。</summary>
      <param name="items" vsli:raw="The key/value pairs to add.">追加するキーと値のペア。</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">追加のキーと値のペアを格納する、新しい変更できないディクショナリ。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">所定のキーの 1 つはディクショナリに既に存在しますが、値が異なります。</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder">
      <summary vsli:raw="Represents a sorted dictionary that mutates with little or no memory allocations and that can produce or build on immutable sorted dictionary instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">メモリ割り当てがほとんどまたはまったくない場合でも変化し、変更できない並べ替えられたディクショナリのインスタンス上で非常に効率よく生成またはビルドできる、並べ替えられたディクショナリを表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(`0,`1)">
      <summary vsli:raw="Adds an element that has the specified key and value to the immutable sorted dictionary.">指定したキーと値を持つ要素を、変更できない並べ替えられたディクショナリに追加します。</summary>
      <param name="key" vsli:raw="The key of the element to add.">追加する要素のキー。</param>
      <param name="value" vsli:raw="The value of the element to add.">追加する要素の値。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds the specified item to the immutable sorted dictionary.">指定された項目を、変更できない並べ替えられたディクショナリに追加します。</summary>
      <param name="item" vsli:raw="The object to add to the dictionary.">ディクショナリに追加するオブジェクト。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds a sequence of values to the immutable sorted dictionary.">変更できない並べ替えられたディクショナリに値のシーケンスを追加します。</summary>
      <param name="items" vsli:raw="The items to add to the dictionary.">ディクショナリに追加する項目。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable sorted dictionary.">変更できない並べ替えられたディクショナリからすべての項目を削除します。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains a specific value.">変更できない並べ替えられたディクショナリに特定の値が格納されているかどうかを確認します。</summary>
      <param name="item" vsli:raw="The object to locate in the dictionary.">ディクショナリ内で検索するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="item" /> がディクショナリに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified key.">指定したキーを持つ要素が、変更できない並べ替えられたディクショナリに格納されているかどうかを判断します。</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary.">ディクショナリ内で検索するキー。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーを持つ要素がディクショナリに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified value.">指定した値を持つ要素が、変更できない並べ替えられたディクショナリに格納されているかどうかを判断します。</summary>
      <param name="value" vsli:raw="The value to locate in the dictionary. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">ディクショナリ内で検索する値。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable sorted dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した値を持つ要素が、変更できない並べ替えられたディクショナリに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Count">
      <summary vsli:raw="Gets the number of elements in this immutable sorted dictionary.">この変更できない並べ替えられたディクショナリ内の要素の数を取得します。</summary>
      <returns vsli:raw="The number of elements in this dictionary.">このディクショナリ内の要素の数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted dictionary.">変更できない並べ替えられたディクショナリを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">ディクショナリの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary; otherwise the default value.">一致するキーがディクショナリ内に存在する場合は指定されたキーの値を取得します。それ以外の場合は既定値を取得します。</summary>
      <param name="key" vsli:raw="The key to search for.">検索対象のキー。</param>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">キーの値、または一致するキーが見つからなかった場合は <c>default(TValue)</c>。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary; otherwise the default value.">一致するキーがディクショナリ内に存在する場合は指定されたキーの値を取得します。それ以外の場合は既定値を取得します。</summary>
      <param name="key" vsli:raw="The key to search for.">検索対象のキー。</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">ディクショナリ内に一致するキーが見つからない場合に返される既定値。</param>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">キーの値、または一致するキーが見つからなかった場合は <paramref name="defaultValue" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Item(`0)">
      <summary vsli:raw="Gets or sets the value for a specified key in the immutable sorted dictionary.">変更できない並べ替えられたディクショナリで指定されたキーの値を取得または設定します。</summary>
      <param name="key" vsli:raw="The key to retrieve the value for.">値を取得する対象のキー。</param>
      <returns vsli:raw="The value associated with the given key.">指定したキーに関連付けられている値。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">キーの比較子を取得または設定します。</summary>
      <returns vsli:raw="The key comparer.">キーの比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Keys">
      <summary vsli:raw="Gets a strongly typed, read-only collection of elements.">厳密に型指定された読み取り専用の要素のコレクションを取得します。</summary>
      <returns vsli:raw="A strongly typed, read-only collection of elements.">厳密に型指定された読み取り専用の要素のコレクション。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable sorted dictionary.">指定したキーを持つ要素を、変更できない並べ替えられたディクショナリから削除します。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">削除する要素のキー。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; was not found in the original dictionary.">要素が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドは、元のディクショナリで <paramref name="key" /> が見つからなかった場合にも <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable sorted dictionary.">特定のオブジェクトの最初に出現したものを、変更できない並べ替えられたディクショナリから削除します。</summary>
      <param name="item" vsli:raw="The object to remove from the dictionary.">ディクショナリから削除するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the dictionary.">
        <paramref name="item" /> がディクショナリから正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドは、<paramref name="item" /> がディクショナリに見つからない場合にも <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes any entries with keys that match those found in the specified sequence from the immutable sorted dictionary.">指定したシーケンス内のキーと一致するキーを持つエントリを、変更できない並べ替えられたディクショナリから削除します。</summary>
      <param name="keys" vsli:raw="The keys for entries to remove from the dictionary.">ディクショナリから削除するエントリのキー。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">特定の配列インデックスを開始位置として、配列にディクショナリの要素をコピーします。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">ディクショナリから要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">指定したキーおよび値を持つ要素をディクショナリ オブジェクトに追加します。</summary>
      <param name="key" vsli:raw="The key of the element to add.">追加する要素のキー。</param>
      <param name="value" vsli:raw="The value of the element to add.">追加する要素の値。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the dictionary object contains an element with the specified key.">指定したキーを持つ要素がディクショナリ オブジェクトに格納されているかどうかを判断します。</summary>
      <param name="key" vsli:raw="The key to locate.">検索するキー。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーを持つ要素がディクショナリに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">ディクショナリの <see cref="T:System.Collections.IDictionaryEnumerator" /> オブジェクトを返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">ディクショナリの <see cref="T:System.Collections.IDictionaryEnumerator" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">
        <see cref="T:System.Collections.IDictionary" /> オブジェクトが固定サイズかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionary" /> オブジェクトが固定サイズの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">指定したキーを持つ要素を取得または設定します。</summary>
      <param name="key" vsli:raw="The key.">キー。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> のキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> を実装するオブジェクトのキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the dictionary.">指定したキーを持つ要素をディクショナリから削除します。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">削除する要素のキー。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内の値を格納している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> を実装するオブジェクトの値を保持している <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">コレクションの反復処理に使用できる列挙子オブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable sorted dictionary based on the contents of this instance.">このインスタンスの内容に基づいて、変更できない並べ替えられたディクショナリを作成します。</summary>
      <returns vsli:raw="An immutable sorted dictionary.">変更できない並べ替えられたディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">指定したキーがこのディクショナリに格納されているかどうかを判断します。</summary>
      <param name="equalKey" vsli:raw="The key to search for.">検索対象のキー。</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">一致するものが見つかった場合は、ディクショナリ内にある一致するキー。見つからない場合は <c>equalkey</c>。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="equalKey" /> に一致が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">指定したキーに関連付けられている値を取得します。</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">値を取得するキー。</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">このメソッドから制御が戻るときに、キーが見つかった場合は、指定したキーに関連付けられている値が格納されます。それ以外の場合は、<paramref name="value" /> パラメーターの型に対する既定値が格納されます。 このパラメーターは初期化せずに渡されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーを持つ要素が、ディクショナリを実装するオブジェクトに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueComparer">
      <summary vsli:raw="Gets or sets the value comparer.">値の比較子を取得または設定します。</summary>
      <returns vsli:raw="The value comparer.">値の比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueRef(`0)">
      <summary vsli:raw="Returns a read-only reference to the value associated with the provided &lt;paramref name=&quot;key&quot; /&gt;.">指定された <paramref name="key" /> に関連付けられている値への読み取り専用の参照を返します。</summary>
      <param name="key" vsli:raw="Key of the entry to be looked up." />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The &lt;paramref name=&quot;key&quot; /&gt; is not present.">
        <paramref name="key" /> が存在しません。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Values">
      <summary vsli:raw="Gets a collection that contains the values of the immutable sorted dictionary.">変更できない並べ替えられたディクショナリの値が格納されているコレクションを取得します。</summary>
      <returns vsli:raw="A collection that contains the values of the object that implements the dictionary.">ディクショナリを実装するオブジェクトの値が格納されているコレクション。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty immutable sorted dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">このディクショナリ インスタンスと同じ順序付けとキー/値の比較規則を使用する、空の変更できない並べ替えられたディクショナリを取得します。</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">順序付けとキー/値の比較規則が同等の空のディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether this immutable sorted dictionary contains the specified key/value pair.">この変更できない並べ替えられたディクショナリに、指定したキーと値のペアが格納されているかどうかを判断します。</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">検索するキーと値のペア。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーと値のペアがディクショナリ内に見つかる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether this immutable sorted map contains the specified key.">指定したキーがこの変更できない並べ替えられたマップに格納されているかどうかを判断します。</summary>
      <param name="key" vsli:raw="The key to locate.">検索するキー。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable dictionary contains the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーが変更できないディクショナリに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified value.">指定した値を持つ要素が、変更できない並べ替えられたディクショナリに格納されているかどうかを判断します。</summary>
      <param name="value" vsli:raw="The value to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">検索する値。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した値を持つ要素がディクショナリに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs in the immutable sorted dictionary.">変更できない並べ替えられたディクショナリに格納されているキーと値のペアの数を取得します。</summary>
      <returns vsli:raw="The number of key/value pairs in the dictionary.">ディクショナリに格納されているキーと値のペアの数。</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedDictionary`2.Empty">
      <summary vsli:raw="Gets an empty immutable sorted dictionary.">空の変更できない並べ替えられたディクショナリを取得します。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">バイナリ ツリーの内容を列挙します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">列挙子の現在位置の要素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator&quot; /&gt; class.">
        <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator" /> クラスの現在のインスタンスによって使用されているリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable sorted dictionary.">列挙子を、変更できない並べ替えられたディクショナリの次の要素に進めます。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the sorted dictionary.">列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子が並べ替えられたディクショナリの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable sorted dictionary.">列挙子を初期位置、つまり変更できない並べ替えられたディクショナリの最初の要素の前に設定します。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">現在の要素。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted dictionary.">変更できない並べ替えられたディクショナリを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">ディクショナリの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable sorted dictionary is empty.">変更できない並べ替えられたディクショナリのこのインスタンスが空かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このインスタンスが空の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Item(`0)">
      <summary vsli:raw="Gets the &lt;paramref name=&quot;TValue&quot; /&gt; associated with the specified key.">指定したキーに関連付けられている <paramref name="TValue" /> を取得します。</summary>
      <param name="key" vsli:raw="The key to retrieve the value for.">値を取得する対象のキー。</param>
      <returns vsli:raw="The value associated with the specified key. If no results are found, the operation throws an exception.">指定されたキーに関連付けられている値。 結果が見つからない場合は、操作によって例外がスローされます。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.KeyComparer">
      <summary vsli:raw="Gets the key comparer for the immutable sorted dictionary.">変更できない並べ替えられたディクショナリのキーの比較子を取得します。</summary>
      <returns vsli:raw="The key comparer for the dictionary.">ディクショナリのキーの比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Keys">
      <summary vsli:raw="Gets the keys in the immutable sorted dictionary.">変更できない並べ替えられたディクショナリのキーを取得します。</summary>
      <returns vsli:raw="The keys in the immutable dictionary.">変更できないディクショナリのキー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified value from the immutable sorted dictionary.">指定した値を持つ要素を、変更できない並べ替えられたディクショナリから削除します。</summary>
      <param name="value" vsli:raw="The value of the element to remove.">削除する要素の値。</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified value cannot be found in the dictionary.">指定した要素が削除された、新しい変更できないディクショナリ。指定した値がディクショナリで見つからない場合はこのインスタンス。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable sorted dictionary.">指定したキーを持つ要素を、変更できない並べ替えられたディクショナリから削除します。</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">削除する要素のキー。</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">指定したキーが削除された、新しい変更できないディクショナリ。指定したキーがディクショナリで見つからない場合はこのインスタンス。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable sorted dictionary, possibly overwriting an existing value for the given key.">変更できない並べ替えられたディクショナリで指定されたキーと値を設定します。指定されたキーの既存の値が上書きされる可能性があります。</summary>
      <param name="key" vsli:raw="The key of the entry to add.">追加するエントリのキー。</param>
      <param name="value" vsli:raw="The key value to set.">設定するキー値。</param>
      <returns vsli:raw="A new immutable sorted dictionary that contains the specified key/value pair.">指定したキーと値のペアが格納されている、新しい変更できない並べ替えられたディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable sorted dictionary, possibly overwriting existing values for the keys.">変更できない並べ替えられたディクショナリで指定されたキーと値のペアを設定します。キーの既存の値が上書きされる可能性があります。</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">ディクショナリで設定するキーと値のペア。 キーのいずれかが既にディクショナリに存在する場合、このメソッドでその以前の値が上書きされます。</param>
      <returns vsli:raw="An immutable dictionary that contains the specified key/value pairs.">指定されたキーと値のペアが格納されている変更できないディクショナリ。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="The object to use as the key of the element to add." />
      <param name="value" vsli:raw="The object to use as the value of the element to add." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" vsli:raw="The object to use as the key of the element to access." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="The key of the element to remove." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.">特定の配列インデックスを開始位置として、配列にディクショナリの要素をコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">ディクショナリから要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">指定したキーおよび値を持つ要素をディクショナリ オブジェクトに追加します。</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to add.">追加する要素のキーとして使用するオブジェクト。</param>
      <param name="value" vsli:raw="The object to use as the value of the element to add.">追加する要素の値として使用するオブジェクト。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Clear">
      <summary vsli:raw="Clears this instance.">このインスタンスをクリアします。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary object is read-only.">ディクショナリ オブジェクトは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable dictionary object contains an element with the specified key.">指定したキーを持つ要素が、変更できないディクショナリ オブジェクトに格納されているかどうかを判断します。</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary object.">ディクショナリ オブジェクト内で検索するキー。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーを持つ要素がディクショナリに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the immutable dictionary object.">変更できないディクショナリ オブジェクトの <see cref="T:System.Collections.IDictionaryEnumerator" /> オブジェクトを返します。</summary>
      <returns vsli:raw="An enumerator object for the dictionary object.">ディクショナリ オブジェクトの列挙子オブジェクトです。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">
        <see cref="T:System.Collections.IDictionary" /> オブジェクトが固定サイズかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionary" /> オブジェクトが固定サイズの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">指定したキーを持つ要素を取得または設定します。</summary>
      <param name="key" vsli:raw="The key of the element to be accessed.">キー。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> のキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> を実装するオブジェクトのキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary object.">指定したキーを持つ要素を、変更できないディクショナリ オブジェクトから削除します。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">削除する要素のキー。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内の値を格納している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> を実装するオブジェクトの値を保持している <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">コレクションの反復処理に使用できる列挙子オブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="Key of the entry to be added." />
      <param name="value" vsli:raw="Value of the entry to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" vsli:raw="Sequence of key/value pairs to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="Key of entry to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" vsli:raw="Sequence of keys to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" vsli:raw="Key of entry to be updated." />
      <param name="value" vsli:raw="Value of entry to be updated." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" vsli:raw="A set of key-value pairs to set on the map." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ToBuilder">
      <summary vsli:raw="Creates an immutable sorted dictionary with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">標準の変更可能なインターフェイスを使用して複数の操作で効率的に変更できるこのディクショナリと同じ内容で、変更できない並べ替えられたディクショナリを作成します。</summary>
      <returns vsli:raw="A collection with the same contents as this dictionary.">このディクショナリと同じ内容を持つコレクション。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">指定したキーがこのディクショナリに格納されているかどうかを判断します。</summary>
      <param name="equalKey" vsli:raw="The key to search for.">検索対象のキー。</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">一致するものが見つかった場合は、ディクショナリ内にある一致するキー。見つからない場合は <c>equalkey</c>。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="equalKey" /> に一致が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">指定したキーに関連付けられている値を取得します。</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">値を取得するキー。</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">このメソッドから制御が戻るときに、キーが見つかった場合は、指定したキーに関連付けられている値が格納されます。それ以外の場合は、<paramref name="value" /> パラメーターの型に対する既定値が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーを持つ要素がディクショナリに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueComparer">
      <summary vsli:raw="Gets the value comparer used to determine whether values are equal.">値が等しいかどうかの判断に使用される値の比較子を取得します。</summary>
      <returns vsli:raw="The value comparer used to determine whether values are equal.">値が等しいかどうかの判断に使用される値の比較子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueRef(`0)">
      <summary vsli:raw="Returns a read-only reference to the value associated with the provided &lt;paramref name=&quot;key&quot; /&gt;.">指定された <paramref name="key" /> に関連付けられている値への読み取り専用の参照を返します。</summary>
      <param name="key" vsli:raw="Key of the entry to be looked up." />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The &lt;paramref name=&quot;key&quot; /&gt; is not present.">
        <paramref name="key" /> が存在しません。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Values">
      <summary vsli:raw="Gets the values in the immutable sorted dictionary.">変更できない並べ替えられたディクショナリの値を取得します。</summary>
      <returns vsli:raw="The values in the dictionary.">ディクショナリ内の値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable sorted dictionary that uses the specified key comparer.">指定されたキーの比較子を使用する、変更できない並べ替えられたディクショナリのインスタンスを取得します。</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">使用するキーの比較子。</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparer.">指定された比較子を使用する、変更できないディクショナリのインスタンス。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary vsli:raw="Gets an instance of the immutable sorted dictionary that uses the specified key and value comparers.">指定されたキーと値の比較子を使用する、変更できない並べ替えられたディクショナリのインスタンスを取得します。</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">使用するキーの比較子。</param>
      <param name="valueComparer" vsli:raw="The value comparer to use.">使用する値の比較子。</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparers.">指定された比較子を使用する、変更できないディクショナリのインスタンス。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedSet`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">
        <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1" /> クラスのインスタンスの一連の初期化メソッドを提供します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1">
      <summary vsli:raw="Creates an empty immutable sorted set.">空の変更できない並べ替えられたセットを作成します。</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable set.">変更できないセットに格納する項目の型。</typeparam>
      <returns vsli:raw="An empty immutable sorted set.">空の変更できない並べ替えられたセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified item.">指定した項目を含む、新しい変更できない並べ替えられたセットを作成します。</summary>
      <param name="item" vsli:raw="The item to prepopulate the set with.">セットに事前に設定する項目。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">変更できないセット内の項目の型。</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified item.">指定した項目を含む、新しい変更できないセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified array of items.">指定した項目の配列を含む、新しい変更できない並べ替えられたセットを作成します。</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the set with.">セットに事前に設定する項目を格納している配列。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">変更できないセット内の項目の型。</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified items.">指定した項目を含む、新しい変更できないセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates an empty immutable sorted set that uses the specified comparer.">指定された比較子を使用する、空の変更できない並べ替えられたセットを作成します。</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">セット内の項目を比較する場合に使用する実装。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">変更できないセット内の項目の型。</typeparam>
      <returns vsli:raw="An empty immutable set.">空の変更できないセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified item and uses the specified comparer.">指定された項目を含み、指定された比較子を使用する、新しい変更できない並べ替えられたセットを作成します。</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">セット内の項目を比較する場合に使用する実装。</param>
      <param name="item" vsli:raw="The item to prepopulate the set with.">セットに事前に設定する項目。</param>
      <typeparam name="T" vsli:raw="The type of items stored in the immutable set.">変更できないセットに格納されている項目の型。</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified item.">指定した項目を含む、新しい変更できないセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0[])">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified array of items and uses the specified comparer.">指定された項目の配列を含み、指定された比較子を使用する、新しい変更できない並べ替えられたセットを作成します。</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">セット内の項目を比較する場合に使用する実装。</param>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the set with.">セットに事前に設定する項目を格納している配列。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">変更できないセット内の項目の型。</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified items.">指定した項目を含む、新しい変更できないセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1">
      <summary vsli:raw="Returns a collection that can be used to build an immutable sorted set.">変更できない並べ替えられたセットの作成に使用できるコレクションを返します。</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">コレクションによって格納される項目の型。</typeparam>
      <returns vsli:raw="The immutable collection builder.">変更できないコレクション ビルダー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Returns a collection that can be used to build an immutable sorted set.">変更できない並べ替えられたセットの作成に使用できるコレクションを返します。</summary>
      <param name="comparer" vsli:raw="The comparer used to compare items in the set for equality.">セット内の項目が等しいかどうかの比較に使用される比較子。</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">コレクションによって格納される項目の型。</typeparam>
      <returns vsli:raw="The immutable collection.">変更できないコレクション。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable collection that contains the specified items.">指定した項目を格納する、新しい変更できないコレクションを作成します。</summary>
      <param name="comparer" vsli:raw="The comparer to use to compare elements in this set.">このセット内の要素を比較するために使用する比較子。</param>
      <param name="items" vsli:raw="The items to add to the set before it's immutable.">変更できなくなる前にセットに追加する項目。</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">コレクションによって格納される項目の型。</typeparam>
      <returns vsli:raw="The new immutable set that contains the specified items.">指定した項目を含む、新しい変更できないセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable collection that contains the specified items.">指定した項目を格納する、新しい変更できないコレクションを作成します。</summary>
      <param name="items" vsli:raw="The items to add to the set with before it's immutable.">変更できなくなる前にセットに追加する項目。</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">コレクションによって格納される項目の型。</typeparam>
      <returns vsli:raw="The new immutable set that contains the specified items.">指定した項目を含む、新しい変更できないセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable sorted set of its contents.">シーケンスを列挙し、その内容の変更できない並べ替えられたセットを生成します。</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">列挙するシーケンス。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">シーケンス内の要素の型。</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the items in the specified sequence.">指定されたシーケンス内の項目を含む、変更できない並べ替えられたセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Enumerates a sequence, produces an immutable sorted set of its contents, and uses the specified comparer.">シーケンスを列挙し、その内容の変更できない並べ替えられたセットを生成して、指定された比較子を使用します。</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">列挙するシーケンス。</param>
      <param name="comparer" vsli:raw="The comparer to use for initializing and adding members to the sorted set.">並べ替えられたセットのメンバーの初期化と追加に使用する比較子。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">シーケンス内の要素の型。</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the items in the specified sequence.">指定されたシーケンス内の項目を含む、変更できない並べ替えられたセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Immutable.ImmutableSortedSet{``0}.Builder)">
      <summary vsli:raw="Creates an immutable sorted set from the current contents of the builder's set.">ビルダーのセットの現在の内容から、変更できない並べ替えられたセットを作成します。</summary>
      <param name="builder" vsli:raw="The builder to create the immutable sorted set from.">変更できない並べ替えられたセットを作成するためのビルダー。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the immutable sorted set.">変更できない並べ替えられたセット内の要素の型。</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the current contents in the builder's set.">ビルダーのセットの現在の内容を含む、変更できない並べ替えられたセット。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1">
      <summary vsli:raw="Represents an immutable sorted set implementation.&#xA;&#xA;NuGet package: System.Collections.Immutable (about immutable collections and how to install)">変更できない並べ替えられたセットの実装を表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the set.">セット内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified value to this immutable sorted set.">指定した値をこの変更できない並べ替えられたセットに追加します。</summary>
      <param name="value" vsli:raw="The value to add.">加算する値。</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in this set.">要素が追加された新しいセット。または、要素がセット内に既に存在する場合は、このセット。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Builder">
      <summary vsli:raw="Represents a sorted set that enables changes with little or no memory allocations, and efficiently manipulates or builds immutable sorted sets.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">メモリの割り当てをほとんどまたはまったく伴わずに変更が可能な並べ替えられたセットを表し、変更できない並べ替えられたセットを効率的に操作または構築します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate whether the element was successfully added.">現在のセットに要素を追加し、その要素が正常に追加されたかどうかを示す値を返します。</summary>
      <param name="item" vsli:raw="The element to add to the set.">セットに追加する要素。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">要素がセットに追加された場合は <see langword="true" />。セットに既存の要素が存在していた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Clear">
      <summary vsli:raw="Removes all elements from this set.">このセットからすべての要素を削除します。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the set contains the specified object.">指定したオブジェクトがセットに格納されているかどうかを確認します。</summary>
      <param name="item" vsli:raw="The object to locate in the set.">セット内で検索するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="item" /> がセットに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements in the immutable sorted set.">変更できない並べ替えられたセット内の要素の数を取得します。</summary>
      <returns vsli:raw="The number of elements in this set.">このセット内の要素の数。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the specified set of items from the current set.">指定された項目のセットを現在のセットから削除します。</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">セットから削除する項目のコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the set.">セットを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the set.">セットの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">指定されたコレクションに存在する要素だけが含まれるように現在のセットを変更します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) subset of a specified collection.">現在のセットが、指定されたコレクションの真のサブセット (真部分集合) であるかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のセットが <paramref name="other" /> の真のサブセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) superset of a specified collection.">現在のセットが、指定されたコレクションの真のスーパーセット (真部分集合) であるかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のセットが <paramref name="other" /> の真のスーパーセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a subset of a specified collection.">現在のセットが、指定されたコレクションのサブセットであるかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection is compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のセットが <paramref name="other" /> パラメーターのサブセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a superset of a specified collection.">現在のセットが、指定されたコレクションのスーパーセットであるかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のセットが <paramref name="other" /> パラメーターのスーパーセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets the element of the set at the given index.">指定したインデックス位置にあるセットの要素を取得します。</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">取得するセット内の要素の、0 から始まるインデックス番号。</param>
      <returns vsli:raw="The element at the given position.">指定した位置にある要素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">指定した <paramref name="index" /> にあるセットの要素への読み取り専用の参照を取得します。</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">取得するセット内の要素の、0 から始まるインデックス番号。</param>
      <returns vsli:raw="A read-only reference to the element at the given position.">指定した位置にある要素への読み取り専用の参照。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the object that is used to determine equality for the values in the immutable sorted set.">変更できない並べ替えられたセット内の値が等しいかどうかを調べるためのオブジェクトを取得または設定します。</summary>
      <returns vsli:raw="The comparer that is used to determine equality for the values in the set.">セット内の値の等価性を調べるための比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Max">
      <summary vsli:raw="Gets the maximum value in the immutable sorted set, as defined by the comparer.">比較子によって定義された、変更できない並べ替えられたセット内の最大値を取得します。</summary>
      <returns vsli:raw="The maximum value in the set.">セット内の最大値。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Min">
      <summary vsli:raw="Gets the minimum value in the immutable sorted set, as defined by the comparer.">比較子によって定義された、変更できない並べ替えられたセット内の最小値を取得します。</summary>
      <returns vsli:raw="The minimum value in the set.">セット内の最小値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set overlaps with the specified collection.">現在のセットと、指定されたコレクションとで重なり合う部分が存在するかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のセットと <paramref name="other" /> との間に共通する要素が 1 つでも存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of the specified object from the set.">指定したオブジェクトのうち、セットで最初に出現したオブジェクトを削除します。</summary>
      <param name="item" vsli:raw="The object to remove from the set.">セットから削除するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was removed from the set; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was not found in the set.">
        <paramref name="item" /> がセットから削除された場合は <see langword="true" />。<paramref name="item" /> がセット内に見つからない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Reverse">
      <summary vsli:raw="Returns an enumerator that iterates over the immutable sorted set in reverse order.">変更できない並べ替えられたセットを逆順で反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that iterates over the set in reverse order.">セットを逆順で反復処理する列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set and the specified collection contain the same elements.">現在のセットと指定されたコレクションに同じ要素が存在するかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is equal to &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のセットが <paramref name="other" /> と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">現在のセットを、そのセットと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納されるように変更します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate whether the element was successfully added.">現在のセットに要素を追加し、その要素が正常に追加されたかどうかを示す値を返します。</summary>
      <param name="item" vsli:raw="The element to add to the set.">セットに追加する要素。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an array, starting at a particular array index.">特定の配列インデックスを開始位置として、配列にコレクションの要素をコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing.">コレクションから要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether this instance is read-only.">このインスタンスが読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;.">常に<c>false</c>です。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the collection.">コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular array index.">特定の配列インデックスを開始位置として、配列にセットの要素をコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">セットから要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe).">
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the collection.">コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable sorted set based on the contents of this instance.">このインスタンスの内容に基づいて、変更できない並べ替えられたセットを作成します。</summary>
      <returns vsli:raw="An immutable set.">変更できないセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.">現在のセットを、現在のセットと指定したコレクションの両方に存在するすべての要素が格納されるように変更します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current state.">現在の状態と比較するコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Clear">
      <summary vsli:raw="Removes all elements from the immutable sorted set.">変更できない並べ替えられたセットからすべての要素を削除します。</summary>
      <returns vsli:raw="An empty set with the elements removed.">要素が削除された空のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable sorted set contains the specified value.">指定した値がこの変更できない並べ替えられたセットに格納されているかどうかを判断します。</summary>
      <param name="value" vsli:raw="The value to check for.">確認する値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した値がセットに含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Count">
      <summary vsli:raw="Gets the number of elements in the immutable sorted set.">変更できない並べ替えられたセット内の要素の数を取得します。</summary>
      <returns vsli:raw="The number of elements in the immutable sorted set.">変更できない並べ替えられたセット内の要素の数。</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedSet`1.Empty">
      <summary vsli:raw="Gets an empty immutable sorted set.">空の変更できない並べ替えられたセットを取得します。</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">バイナリ ツリーの内容を列挙します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">列挙子の現在位置の要素を取得します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">列挙子の現在位置の要素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">
        <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator" /> クラスの現在のインスタンスによって使用されているリソースを解放します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable sorted set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">列挙子を、変更できない並べ替えられたセットの次の要素に進めます。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the sorted set.">列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子が並べ替えられたセットの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable sorted set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">列挙子を初期位置、つまり変更できない並べ替えられたセットの最初の要素の前に設定します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">現在の要素。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes a specified set of items from this immutable sorted set.">この変更できない並べ替えられたセットから、指定された一連の項目を削除します。</summary>
      <param name="other" vsli:raw="The items to remove from this set.">このセットから削除する項目。</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">項目が削除された新しいセット。セットに項目がなかった場合は、元のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted set.">変更できない並べ替えられたセットを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">セットの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)">
      <summary vsli:raw="Gets the position within this immutable sorted set that the specified value appears in.">この変更できない並べ替えられたセット内で、指定された値が表示される位置を取得します。</summary>
      <param name="item" vsli:raw="The value whose position is being sought.">位置が検索されている値。</param>
      <returns vsli:raw="The index of the specified &lt;paramref name=&quot;item&quot; /&gt; in the sorted set, if &lt;paramref name=&quot;item&quot; /&gt; is found. If &lt;paramref name=&quot;item&quot; /&gt; is not found and is less than one or more elements in this set, this method returns a negative number that is the bitwise complement of the index of the first element that is larger than value. If &lt;paramref name=&quot;item&quot; /&gt; is not found and is greater than any of the elements in the set, this method returns a negative number that is the bitwise complement of the index of the last element plus 1.">指定した <paramref name="item" /> が存在する場合は、並べ替えられたセットにおけるその <paramref name="item" /> のインデックス。 <paramref name="item" /> が見つからず、このセット内の 1 つ以上の要素よりも小さい場合、このメソッドは負の値を返します。これは、値より大きい最初の要素のインデックスのビットごとの補数となります。 <paramref name="item" /> が見つからず、セット内のどの要素よりも大きい場合、このメソッドは負の値を返します。これは、最後の要素のインデックス + 1 のビットごとの補数となります。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable sorted set that contains elements that exist both in this set and in the specified set.">このセットと指定されたセットの両方に存在する要素を含む、変更できない並べ替えられたセットを作成します。</summary>
      <param name="other" vsli:raw="The set to intersect with this one.">このセットと交差するセット。</param>
      <returns vsli:raw="A new immutable sorted set that contains any elements that exist in both sets.">両方のセットに存在するすべての要素を含む、新しい変更できない並べ替えられたセット。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable sorted set is empty.">この変更できない並べ替えられたセットが空かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this set is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このセットが空の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a proper (strict) subset of the specified collection.">現在の変更できない並べ替えられたセットが、指定されたコレクションの真のサブセット (真部分集合) であるかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のセットが <paramref name="other" /> の真のサブセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a proper superset of a specified collection.">現在の変更できない並べ替えられたセットが、指定されたコレクションの真のスーパーセットであるかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のセットが <paramref name="other" /> の真のスーパーセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a subset of a specified collection.">現在の変更できない並べ替えられたセットが、指定されたコレクションのサブセットであるかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のセットが <paramref name="other" /> パラメーターのサブセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a superset of a specified collection.">現在の変更できない並べ替えられたセットが、指定されたコレクションのスーパーセットであるかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のセットが <paramref name="other" /> パラメーターのスーパーセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element of the immutable sorted set at the given index.">変更できない並べ替えられたセットの、指定したインデックス位置にある要素を取得します。</summary>
      <param name="index" vsli:raw="The index of the element to retrieve from the sorted set.">並べ替えられたセットから取得する要素のインデックス。</param>
      <returns vsli:raw="The element at the given index.">指定されたインデックス位置にある要素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference of the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">指定した <paramref name="index" /> にあるセットの要素の読み取り専用の参照を取得します。</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">取得するセット内の要素の、0 から始まるインデックス番号。</param>
      <returns vsli:raw="A read-only reference of the element at the given position.">指定した位置にある要素の読み取り専用の参照。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.KeyComparer">
      <summary vsli:raw="Gets the comparer used to sort keys in the immutable sorted set.">変更できない並べ替えられたセットでのキーの並べ替えに使用される比較子を取得します。</summary>
      <returns vsli:raw="The comparer used to sort keys.">キーの並べ替えに使用される比較子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Max">
      <summary vsli:raw="Gets the maximum value in the immutable sorted set, as defined by the comparer.">比較子によって定義された、変更できない並べ替えられたセット内の最大値を取得します。</summary>
      <returns vsli:raw="The maximum value in the set.">セット内の最大値。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Min">
      <summary vsli:raw="Gets the minimum value in the immutable sorted set, as defined by the comparer.">比較子によって定義された、変更できない並べ替えられたセット内の最小値を取得します。</summary>
      <returns vsli:raw="The minimum value in the set.">セット内の最小値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set and a specified collection share common elements.">現在の変更できない並べ替えられたセットと指定されたコレクションとが共通の要素を共有しているかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のセットと <paramref name="other" /> との間に共通する要素が 1 つでも存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified value from this immutable sorted set.">指定した値を、この変更できない並べ替えられたセットから削除します。</summary>
      <param name="value" vsli:raw="The element to remove.">削除する要素。</param>
      <returns vsli:raw="A new immutable sorted set with the element removed, or this set if the element was not found in the set.">要素が削除された、新しい変更できない並べ替えられたセット。セット内に要素が見つからなかった場合は、このセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Reverse">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that iterates over this immutable sorted set in reverse order.">この変更できない並べ替えられたセットを逆順で反復処理する <see cref="T:System.Collections.Generic.IEnumerable`1" /> を返します。</summary>
      <returns vsli:raw="An enumerator that iterates over the immutable sorted set in reverse order.">変更できない並べ替えられたセットを逆順で反復処理する列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set and the specified collection contain the same elements.">現在の変更できない並べ替えられたセットと指定されたコレクションに同じ要素が存在するかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">セットが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable sorted set that contains elements that exist either in this set or in a given sequence, but not both.">このセットと指定されたシーケンスの両方ではなく、いずれかに存在する要素を含む、変更できない並べ替えられたセットを作成します。</summary>
      <param name="other" vsli:raw="The other sequence of items.">項目のその他のシーケンス。</param>
      <returns vsli:raw="The new immutable sorted set.">新しい変更できない並べ替えられたセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds the specified value to the collection.">指定された値をコレクションに追加します。</summary>
      <param name="item" vsli:raw="The value to add.">加算する値。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all the items from the collection.">コレクションからすべての項目を削除します。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an array, starting at a particular array index.">特定の配列インデックスを開始位置として、配列にコレクションの要素をコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing.">コレクションから要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Returns true, since immutable collections are always read-only. See the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; interface.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> インターフェイスをご覧ください。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the collection.">特定のオブジェクトの最初に出現したものをコレクションから削除します。</summary>
      <param name="item" vsli:raw="The object to remove from the collection.">コレクションから削除するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="item" /> がコレクションから正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item in the set at the specified index.">セット内の指定されたインデックス位置に項目を挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">
        <paramref name="item" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="item" vsli:raw="The object to insert into the set.">セットに挿入するオブジェクト。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; interface.">
        <see cref="T:System.Collections.Generic.IList`1" /> インターフェイスをご覧ください。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to access." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">指定したインデックス位置にある項目を削除します。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">削除する項目の 0 から始まるインデックス。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate if the element was successfully added.">現在のセットに要素を追加し、その要素が正常に追加されたかどうかを示す値を返します。</summary>
      <param name="item" vsli:raw="The element to add to the set.">セットに追加する要素。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">要素がセットに追加された場合は <see langword="true" />。セットに既存の要素が存在していた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current set.">現在のセットから、指定されたコレクションに含まれる要素をすべて削除します。</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">セットから削除する項目のコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">指定されたコレクションに存在する要素だけが含まれるように現在のセットを変更します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">現在のセットを、そのセットと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納されるように変更します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in either the current set or the specified collection.">現在のセットを、現在のセットまたは指定したコレクションのいずれかに存在するすべての要素が格納されるように変更します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular array index.">特定の配列インデックスを開始位置として、配列にセットの要素をコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">セットから要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Returns true, since immutable collections are always thread-safe. See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">
        <see cref="T:System.Collections.ICollection" /> インターフェイスをご覧ください。</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">「<see cref="T:System.Collections.ICollection" />」を参照してください。</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">コレクションの反復処理に使用できる列挙子オブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the set.">セットに項目を追加します。</summary>
      <param name="value" vsli:raw="The object to add to the set.">セットに追加するオブジェクト。</param>
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.">新しい要素が挿入された位置、または項目がコレクションに挿入されなかったことを示す -1。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">セットが読み取り専用か、または固定サイズです。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the set.">セットからすべての項目を削除します。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the set contains a specific value.">セットに特定の値が含まれているかどうかを判断します。</summary>
      <param name="value" vsli:raw="The object to locate in the set.">セット内で検索するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found in the set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">オブジェクトがセット内で見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the set.">セット内の特定の項目のインデックスを確認します。</summary>
      <param name="value" vsli:raw="The object to locate in the set.">セット内で検索するオブジェクト。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">リストに存在する場合は <paramref name="value" /> のインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the set at the specified index.">セット内の指定したインデックス位置に項目を挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">
        <paramref name="value" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="value" vsli:raw="The object to insert into the set.">セットに挿入するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">セットが読み取り専用か、または固定サイズです。</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">
        <see cref="T:System.Collections.IList" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">指定したインデックス位置にある <see cref="T:System.Object" /> を取得または設定します。</summary>
      <param name="index" vsli:raw="The index.">インデックス。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt;.">
        <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the set.">セット内で最初に見つかった特定のオブジェクトを削除します。</summary>
      <param name="value" vsli:raw="The object to remove from the set.">セットから削除するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">セットが読み取り専用か、または固定サイズです。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the set.">指定したインデックス位置にある項目をセットから削除します。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">削除する項目の 0 から始まるインデックス。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">セットが読み取り専用か、または固定サイズです。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">この変更できないセットに、指定した要素を追加します。</summary>
      <param name="value" vsli:raw="The element to add.">追加する要素。</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">要素が追加された新しいセット。または、要素がセット内に既に存在する場合は、このセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary vsli:raw="Retrieves an empty immutable set that has the same sorting and ordering semantics as this instance.">並べ替えと順序付けのセマンティクスがこのインスタンスと同じ空の変更できないセットを取得します。</summary>
      <returns vsli:raw="An empty set that has the same sorting and ordering semantics as this instance.">並べ替えと順序付けのセマンティクスがこのインスタンスと同じ空のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable set.">現在の変更できないセットから、指定されたコレクションに含まれる要素を削除します。</summary>
      <param name="other" vsli:raw="The items to remove from this set.">このセットから削除する項目。</param>
      <returns vsli:raw="The new set with the items removed; or the original set if none of the items were in the set.">項目が削除された新しいセット。セットに項目がなかった場合は、元のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains elements that exist in both this set and the specified set.">このセットと指定されたセットの両方に存在する要素を含む、変更できないセットを作成します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">両方のセットに存在するすべての要素を含む、新しい変更できないセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">この変更できないセットから、指定した要素を削除します。</summary>
      <param name="value" vsli:raw="The element to remove.">削除する要素。</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">指定した要素が削除された新しいセット。セット内に要素が見つからない場合は、現在のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">現在のセットと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納された、変更できないセットを作成します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">現在のセットと比較するコレクション。</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">現在のセットと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納された、新しいセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">現在のセットと指定されたコレクションのどちらかに存在するすべての要素が格納された、新しい変更できないセットを作成します。</summary>
      <param name="other" vsli:raw="The collection to add elements from.">要素の追加元のコレクション。</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">項目が追加された、新しい変更できないセット。すべての項目が既にセットにあった場合は、元のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder">
      <summary vsli:raw="Creates a collection that has the same contents as this immutable sorted set that can be efficiently manipulated by using standard mutable interfaces.">標準の変更可能なインターフェイスを使用して効率的に操作できる、この変更できない並べ替えられたセットと同じ内容のコレクションを作成します。</summary>
      <returns vsli:raw="The sorted set builder.">並べ替えられたセットのビルダー。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">指定された値をセットで検索し、見つかった場合は同じ値を返します。</summary>
      <param name="equalValue" vsli:raw="The value to search for.">検索する値。</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the original value if the search yielded no match.">セット内の検索で見つかった値。検索で一致するものがなかった場合は、元の値。</param>
      <returns vsli:raw="A value indicating whether the search was successful.">検索が成功したかどうかを示す値。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds a given set of items to this immutable sorted set.">この変更できない並べ替えられたセットに、指定された一連の項目を追加します。</summary>
      <param name="other" vsli:raw="The items to add.">追加する項目。</param>
      <returns vsli:raw="The new set with the items added; or the original set if all the items were already in the set.">項目が追加された、新しいセット。すべての項目が既にセットにあった場合は、元のセット。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Returns the immutable sorted set that has the specified key comparer.">指定したキーの比較子を持つ、変更できない並べ替えられたセットを返します。</summary>
      <param name="comparer" vsli:raw="The comparer to check for.">確認する比較子。</param>
      <returns vsli:raw="The immutable sorted set that has the specified key comparer.">指定したキーの比較子を持つ、変更できない並べ替えられたセット。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableStack`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">
        <see cref="T:System.Collections.Immutable.ImmutableStack`1" /> クラスのインスタンスの一連の初期化メソッドを提供します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1">
      <summary vsli:raw="Creates an empty immutable stack.">空の変更できないスタックを作成します。</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable stack.">変更できないスタックに格納する項目の型。</typeparam>
      <returns vsli:raw="An empty immutable stack.">空の変更できないスタック。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable stack that contains the specified item.">指定した項目が格納される新しい変更できないスタックを作成します。</summary>
      <param name="item" vsli:raw="The item to prepopulate the stack with.">スタックに事前に設定する項目。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable stack.">変更できないスタック内の項目の型。</typeparam>
      <returns vsli:raw="A new immutable collection that contains the specified item.">指定した項目が格納される新しい変更できないコレクション。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable stack that contains the specified array of items.">指定した項目の配列が格納される新しい変更できないスタックを作成します。</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the stack with.">スタックに事前に設定する項目が格納されている配列。</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable stack.">変更できないスタック内の項目の型。</typeparam>
      <returns vsli:raw="A new immutable stack that contains the specified items.">指定した項目が格納されている新しい変更できないスタック。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable stack that contains the specified items.">指定した項目が格納される新しい変更できないスタックを作成します。</summary>
      <param name="items" vsli:raw="The items to add to the stack before it's immutable.">変更できなくなる前にスタックに追加する項目。</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">スタック内の項目の型。</typeparam>
      <returns vsli:raw="An immutable stack that contains the specified items.">指定した項目が格納されている変更できないスタック。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Pop``1(System.Collections.Immutable.IImmutableStack{``0},``0@)">
      <summary vsli:raw="Removes the specified item from an immutable stack.">指定した項目を、変更できないスタックから削除します。</summary>
      <param name="stack" vsli:raw="The stack to modify.">変更するスタック。</param>
      <param name="value" vsli:raw="The item to remove from the stack.">スタックから削除する項目。</param>
      <typeparam name="T" vsli:raw="The type of items contained in the stack.">スタックに格納されている項目の型。</typeparam>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">スタック。<see langword="null" /> になることはありません。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">スタックが空です。</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1">
      <summary vsli:raw="Represents an immutable stack.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">変更できないスタックを表します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" vsli:raw="The type of element on the stack.">スタックの要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable stack.">変更できないスタックからすべてのオブジェクトを削除します。</summary>
      <returns vsli:raw="An empty immutable stack.">空の変更できないスタック。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Empty">
      <summary vsli:raw="Gets an empty immutable stack.">空の変更できないスタックを取得します。</summary>
      <returns vsli:raw="An empty immutable stack.">空の変更できないスタック。</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of an immutable stack without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">メモリを割り当てずに変更できないスタックの内容を列挙します。  
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">列挙子の現在位置の要素。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable stack.">列挙子を、変更できないスタックの次の要素に進めます。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the stack.">列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がスタックの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable stack.">変更できないスタックを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the stack.">スタックの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable stack is empty.">変更できないスタックのこのインスタンスが空かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このインスタンスが空の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Peek">
      <summary vsli:raw="Returns the object at the top of the stack without removing it.">スタックの一番上にあるオブジェクトを削除せずに返します。</summary>
      <returns vsli:raw="The object at the top of the stack.">スタックの一番上にあるオブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">スタックが空です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.PeekRef">
      <summary vsli:raw="Gets a read-only reference to the element on the top of the stack.">スタックの一番上にある要素への読み取り専用の参照を取得します。</summary>
      <returns vsli:raw="A read-only reference to the element on the top of the stack.">スタックの一番上にある要素への読み取り専用の参照。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">スタックが空の場合にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the stack after the removal.">変更できないスタックの一番上にある要素を削除し、削除後のスタックを返します。</summary>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">スタック。<see langword="null" /> になることはありません。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">スタックが空です。</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop(`0@)">
      <summary vsli:raw="Removes the specified element from the immutable stack and returns the stack after the removal.">変更できないスタックから指定された要素を削除し、削除後のスタックを返します。</summary>
      <param name="value" vsli:raw="The value to remove from the stack.">スタックから削除する値。</param>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">スタック。<see langword="null" /> になることはありません。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Push(`0)">
      <summary vsli:raw="Inserts an object at the top of the immutable stack and returns the new stack.">変更できないスタックの一番上にオブジェクトを挿入し、新しいスタックを返します。</summary>
      <param name="value" vsli:raw="The object to push onto the stack.">スタックにプッシュするオブジェクト。</param>
      <returns vsli:raw="The new stack.">新しいスタック。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the collection.">コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Clear">
      <summary vsli:raw="Removes all elements from the immutable stack.">変更できないスタックからすべての要素を削除します。</summary>
      <returns vsli:raw="The empty immutable stack.">空の変更できないスタック。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the new stack.">変更できないスタックの一番上にある要素を削除し、新しいスタックを返します。</summary>
      <returns vsli:raw="The new stack; never &lt;see langword=&quot;null&quot; /&gt;.">新しいスタック。<see langword="null" /> になることはありません。</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Push(`0)">
      <summary vsli:raw="Inserts an element at the top of the immutable stack and returns the new stack.">変更できないスタックの一番上に要素を挿入し、新しいスタックを返します。</summary>
      <param name="value" vsli:raw="The element to push onto the stack.">スタックにプッシュする要素。</param>
      <returns vsli:raw="The new stack.">新しいスタック。</returns>
    </member>
    <member name="T:System.Linq.ImmutableArrayExtensions">
      <summary vsli:raw="LINQ extension method overrides that offer greater efficiency for &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; than the standard LINQ methods  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">標準的な LINQ メソッドよりも <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> に対する効率が高い、LINQ 拡張メソッドのオーバーライド 
 NuGet パッケージ:System.Collections.Immutable (変更できないコレクションの概要とインストール方法)</summary>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">累積的に要素のシーケンスに関数を適用します。</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">関数の適用先のコレクション。</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">累積的に各要素で呼び出される関数。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">コレクションに含まれる要素の型。</typeparam>
      <returns vsli:raw="The final value after the cumulative function has been applied to all elements.">関数がすべての要素に適用された後の最終的な値。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">累積的に要素のシーケンスに関数を適用します。</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">関数の適用先のコレクション。</param>
      <param name="seed" vsli:raw="The initial accumulator value.">最初のアキュムレータ値。</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">累積的に各要素で呼び出される関数。</param>
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulated value.">累積値の型。</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">コレクションに含まれる要素の型。</typeparam>
      <returns vsli:raw="The final accumulator value.">最終的なアキュムレータ値。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">累積的に要素のシーケンスに関数を適用します。</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">関数の適用先のコレクション。</param>
      <param name="seed" vsli:raw="The initial accumulator value.">最初のアキュムレータ値。</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">累積的に各要素で呼び出される関数。</param>
      <param name="resultSelector" vsli:raw="A function to transform the final accumulator value into the result type." />
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulated value.">累積値の型。</typeparam>
      <typeparam name="TResult" vsli:raw="The type of result returned by the result selector.">結果のセレクターによって返される結果の型。</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">コレクションに含まれる要素の型。</typeparam>
      <returns vsli:raw="The final accumulator value.">最終的なアキュムレータ値。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Gets a value indicating whether all elements in this array match a given condition.">この配列内のすべての要素が特定の条件に一致するかどうかを示す値を取得します。</summary>
      <param name="immutableArray" vsli:raw="The array to check for matches.">一致するかどうかを確認する配列。</param>
      <param name="predicate" vsli:raw="The predicate.">述語。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">コレクションに含まれる要素の型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element of the source sequence passes the test in the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定された述語でソース シーケンスの各要素がテストに合格する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Gets a value indicating whether the array contains any elements.">配列に要素が格納されているかどうかを示す値を取得します。</summary>
      <param name="immutableArray" vsli:raw="The array to check for elements.">要素について確認する配列。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">コレクションに含まれる要素の型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array contains an elements; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">配列に要素が含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Gets a value indicating whether the array contains any elements that match a specified condition.">指定された条件に一致する要素が配列に格納されているかどうかを示す値を取得します。</summary>
      <param name="immutableArray" vsli:raw="The array to check for elements.">要素について確認する配列。</param>
      <param name="predicate" vsli:raw="The delegate that defines the condition to match to an element.">要素と一致する条件を定義するデリゲート。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">コレクションに含まれる要素の型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element matches the specified condition; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した条件と要素が一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns a value indicating whether this collection contains any elements.">このコレクションに要素が格納されているかどうかを示す値を返します。</summary>
      <param name="builder" vsli:raw="The builder to check for matches.">一致するかどうかを確認するビルダー。</param>
      <typeparam name="T" vsli:raw="The type of elements in the array.">配列内の要素の型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array builder contains any elements; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">配列ビルダーに要素が格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in the array.">配列内の指定されたインデックス位置にある要素を返します。</summary>
      <param name="immutableArray" vsli:raw="The array to find an element in.">要素の検索対象となる配列。</param>
      <param name="index" vsli:raw="The index for the element to retrieve.">取得する要素のインデックス。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">コレクションに含まれる要素の型。</typeparam>
      <returns vsli:raw="The item at the specified index.">指定したインデックスにある項目。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in a sequence or a default value if the index is out of range.">シーケンス内の指定したインデックス位置にある要素を返します。インデックスが範囲外の場合は既定値を返します。</summary>
      <param name="immutableArray" vsli:raw="The array to find an element in.">要素の検索対象となる配列。</param>
      <param name="index" vsli:raw="The index for the element to retrieve.">取得する要素のインデックス。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">コレクションに含まれる要素の型。</typeparam>
      <returns vsli:raw="The item at the specified index, or the default value if the index is not found.">指定したインデックス位置にある項目。インデックスが見つからない場合は既定値。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the first element in an array.">配列内の最初の要素を返します。</summary>
      <param name="immutableArray" vsli:raw="The array to get an item from.">取得する項目が格納されている配列。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">コレクションに含まれる要素の型。</typeparam>
      <returns vsli:raw="The first item in the array.">配列内の最初の項目。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">配列が空の場合。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the first element in a sequence that satisfies a specified condition.">指定された条件を満たす、シーケンスの最初の要素を返します。</summary>
      <param name="immutableArray" vsli:raw="The array to get an item from.">取得する項目が格納されている配列。</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">検索する要素の条件を定義するデリゲート。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">コレクションに含まれる要素の型。</typeparam>
      <returns vsli:raw="The first item in the list if it meets the condition specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">
        <paramref name="predicate" /> で指定された条件を満たしている場合は、リスト内の最初の項目。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">配列が空の場合。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the first element in the collection.">コレクション内の最初の要素を返します。</summary>
      <param name="builder" vsli:raw="The builder to retrieve an item from.">取得する項目が含まれているビルダー。</param>
      <typeparam name="T" vsli:raw="The type of items in the array.">配列内の項目の型。</typeparam>
      <returns vsli:raw="The first item in the list.">リスト内の最初の項目。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">配列が空の場合。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the first element of a sequence, or a default value if the sequence contains no elements.">シーケンスの最初の要素を返します。シーケンスに要素が含まれていない場合は既定値を返します。</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">取得する項目が格納されている配列。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">コレクションに含まれる要素の型。</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">見つかった場合はリスト内の最初の項目。それ以外の場合はその項目の型の既定値。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.">条件を満たす、シーケンスの最初の要素を返します。このような要素が見つからない場合は既定値を返します。</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve elements from.">取得する要素が格納されている配列。</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">検索する要素の条件を定義するデリゲート。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">コレクションに含まれる要素の型。</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">見つかった場合はリスト内の最初の項目。それ以外の場合はその項目の型の既定値。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the first element in the collection, or the default value if the collection is empty.">コレクション内の最初の要素を返します。コレクションが空の場合は既定値を返します。</summary>
      <param name="builder" vsli:raw="The builder to retrieve an element from.">取得する要素が含まれているビルダー。</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">ビルダー内の項目の型。</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">見つかった場合はリスト内の最初の項目。それ以外の場合はその項目の型の既定値。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the last element of the array.">配列の最後の要素を返します。</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">取得する項目が格納されている配列。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the array.">配列に含まれる要素の型。</typeparam>
      <returns vsli:raw="The last element in the array.">配列内の最後の要素。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">コレクションが空の場合にスローされます。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a specified condition.">指定された条件を満たす、シーケンスの最後の要素を返します。</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve elements from.">取得する要素が格納されている配列。</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to retrieve.">取得する要素の条件を定義するデリゲート。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">コレクションに含まれる要素の型。</typeparam>
      <returns vsli:raw="The last element of the array that satisfies the &lt;paramref name=&quot;predicate&quot; /&gt; condition.">
        <paramref name="predicate" /> 条件を満たす、配列の最後の要素。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">コレクションが空の場合にスローされます。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the last element in the collection.">コレクション内の最後の要素を返します。</summary>
      <param name="builder" vsli:raw="The builder to retrieve elements from.">取得する要素が含まれているビルダー。</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">ビルダー内の項目の型。</typeparam>
      <returns vsli:raw="The last element in the builder.">ビルダー内の最後の要素。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">コレクションが空の場合にスローされます。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the last element of a sequence, or a default value if the sequence contains no elements.">シーケンスの最後の要素を返します。シーケンスに要素が含まれていない場合は既定値を返します。</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">取得する項目が格納されている配列。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">コレクションに含まれる要素の型。</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">シーケンスの最後の要素。シーケンスに要素が含まれていない場合は既定値。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.">条件を満たす、シーケンスの最後の要素を返します。このような要素が見つからない場合は既定値を返します。</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve an element from.">取得する要素が格納されている配列。</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">検索する要素の条件を定義するデリゲート。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">コレクションに含まれる要素の型。</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">シーケンスの最後の要素。シーケンスに要素が含まれていない場合は既定値。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the last element in the collection, or the default value if the collection is empty.">コレクション内の最後の要素を返します。コレクションが空の場合は既定値を返します。</summary>
      <param name="builder" vsli:raw="The builder to retrieve an element from.">取得する要素が含まれているビルダー。</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">ビルダー内の項目の型。</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">シーケンスの最後の要素。シーケンスに要素が含まれていない場合は既定値。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary vsli:raw="Projects each element of a sequence into a new form.">シーケンスの各要素を新しいフォームに射影します。</summary>
      <param name="immutableArray" vsli:raw="The immutable array to select items from.">選択する項目が格納されている変更できない配列。</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">各要素に適用する変換関数。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">コレクションに含まれる要素の型。</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result element.">結果の要素の型。</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result of invoking the transform function on each element of source.">ソースの各要素に対して変換関数を呼び出した結果として得られる要素を格納している <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;,             flattens the resulting sequences into one sequence, and invokes a result             selector function on each element therein.">シーケンスの各要素を <see cref="T:System.Collections.Generic.IEnumerable`1" /> に射影し、結果のシーケンスを 1 つのシーケンスにフラット化して、その各要素に対して結果のセレクター関数を呼び出します。</summary>
      <param name="immutableArray" vsli:raw="The immutable array.">不変配列。</param>
      <param name="collectionSelector" vsli:raw="A transform function to apply to each element of the input sequence.">入力シーケンスの各要素に適用する変換関数。</param>
      <param name="resultSelector" vsli:raw="A transform function to apply to each element of the intermediate sequence.">中間シーケンスの各要素に適用する変換関数。</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;immutableArray&quot; /&gt;.">
        <paramref name="immutableArray" /> の要素の型。</typeparam>
      <typeparam name="TCollection" vsli:raw="The type of the intermediate elements collected by &lt;paramref name=&quot;collectionSelector&quot; /&gt;.">
        <paramref name="collectionSelector" /> によって収集される中間要素の型。</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the resulting sequence.">結果のシーケンスの要素の型。</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result             of invoking the one-to-many transform function &lt;paramref name=&quot;collectionSelector&quot; /&gt; on each             element of &lt;paramref name=&quot;immutableArray&quot; /&gt; and then mapping each of those sequence elements and their             corresponding source element to a result element.">
        <paramref name="immutableArray" /> の各要素で一対多の変換関数 <paramref name="collectionSelector" /> を呼び出し、こうしたシーケンスの各要素とそれに対応するソース要素を結果の要素に割り当てた結果として得られる要素を含む <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">等値比較子に従って 2 つのシーケンスが等しいかどうかを判断します。</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">比較に使用する配列。</param>
      <param name="items" vsli:raw="The items to use for comparison.">比較に使用する項目。</param>
      <param name="comparer" vsli:raw="The comparer to use to check for equality.">等しいかどうかを確認するために使用する比較子。</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">比較対象の配列内の要素の型。</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">コレクションに含まれる要素の型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">シーケンスが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">等値比較子に従って 2 つのシーケンスが等しいかどうかを判断します。</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">比較に使用する配列。</param>
      <param name="items" vsli:raw="The items to use for comparison.">比較に使用する項目。</param>
      <param name="comparer" vsli:raw="The comparer to use to check for equality.">等しいかどうかを確認するために使用する比較子。</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">比較対象の配列内の要素の型。</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">コレクションに含まれる要素の型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">シーケンスが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">等値比較子に従って 2 つのシーケンスが等しいかどうかを判断します。</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">比較に使用する配列。</param>
      <param name="items" vsli:raw="The items to use for comparison.">比較に使用する項目。</param>
      <param name="predicate" vsli:raw="The comparer to use to check for equality.">等しいかどうかを確認するために使用する比較子。</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">比較対象の配列内の要素の型。</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">コレクションに含まれる要素の型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">シーケンスが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.">シーケンスの唯一の要素を返し、シーケンス内の要素が 1 つだけでない場合は例外をスローします。</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve the element from.">取得する要素が格納されている配列。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">コレクションに含まれる要素の型。</typeparam>
      <returns vsli:raw="The element in the sequence.">シーケンス内の要素。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.">指定された条件を満たす、シーケンスの唯一の要素を返し、そのような要素が複数存在する場合は例外をスローします。</summary>
      <param name="immutableArray" vsli:raw="The immutable array to return a single element from." />
      <param name="predicate" vsli:raw="The function to test whether an element should be returned." />
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">コレクションに含まれる要素の型。</typeparam>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">
        <see cref="T:System.Boolean" /> を返します。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the only element of the array, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.">配列の唯一の要素、またはシーケンスが空の場合は既定値を返します。このメソッドは、シーケンス内に要素が複数ある場合に例外をスローします。</summary>
      <param name="immutableArray" vsli:raw="The array.">配列。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">コレクションに含まれる要素の型。</typeparam>
      <returns vsli:raw="The element in the array, or the default value if the array is empty.">配列内の要素、または配列が空の場合は既定値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains more than one element.">
        <paramref name="source" /> には複数の要素が含まれています。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.">指定された条件を満たすシーケンスの唯一の要素、またはそのような要素がない場合は既定値を返します。このメソッドは、複数の要素が条件を満たす場合に例外をスローします。</summary>
      <param name="immutableArray" vsli:raw="The array to get the element from.">要素を取得する配列。</param>
      <param name="predicate" vsli:raw="The condition the element must satisfy.">要素が満たす必要がある条件。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">コレクションに含まれる要素の型。</typeparam>
      <returns vsli:raw="The element if it satisfies the specified condition; otherwise the default element.">指定された条件を満たしている場合はその要素。それ以外の場合は既定の要素。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="More than one element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.">
        <paramref name="predicate" /> の条件を満たす要素が複数あります。</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Copies the contents of this array to a mutable array.">この配列の内容を可変配列にコピーします。</summary>
      <param name="immutableArray" vsli:raw="The immutable array to copy into a mutable one." />
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">コレクションに含まれる要素の型。</typeparam>
      <returns vsli:raw="The newly instantiated array.">新しくインスタンス化された配列。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">この配列の内容に基づいてディクショナリを作成します。</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">ディクショナリの作成元となる配列。</param>
      <param name="keySelector" vsli:raw="The key selector.">キー セレクター。</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">キーの型。</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">コレクションに含まれる要素の型。</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">新しく初期化されたディクショナリ。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">この配列の内容に基づいてディクショナリを作成します。</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">ディクショナリの作成元となる配列。</param>
      <param name="keySelector" vsli:raw="The key selector.">キー セレクター。</param>
      <param name="comparer" vsli:raw="The comparer to initialize the dictionary with.">ディクショナリの初期化に使用する比較子。</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">キーの型。</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">コレクションに含まれる要素の型。</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">新しく初期化されたディクショナリ。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">この配列の内容に基づいてディクショナリを作成します。</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">ディクショナリの作成元となる配列。</param>
      <param name="keySelector" vsli:raw="The key selector.">キー セレクター。</param>
      <param name="elementSelector" vsli:raw="The element selector.">要素セレクター。</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">キーの型。</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the element.">要素の型。</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">コレクションに含まれる要素の型。</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">新しく初期化されたディクショナリ。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">この配列の内容に基づいてディクショナリを作成します。</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">ディクショナリの作成元となる配列。</param>
      <param name="keySelector" vsli:raw="The key selector.">キー セレクター。</param>
      <param name="elementSelector" vsli:raw="The element selector.">要素セレクター。</param>
      <param name="comparer" vsli:raw="The comparer to initialize the dictionary with.">ディクショナリの初期化に使用する比較子。</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">キーの型。</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the element.">要素の型。</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">コレクションに含まれる要素の型。</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">新しく初期化されたディクショナリ。</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Filters a sequence of values based on a predicate.">述語に基づいて値のシーケンスをフィルター処理します。</summary>
      <param name="immutableArray" vsli:raw="The array to filter.">フィルター処理する配列。</param>
      <param name="predicate" vsli:raw="The condition to use for filtering the array content.">配列の内容をフィルター処理するために使用する条件。</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">コレクションに含まれる要素の型。</typeparam>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains elements that meet the condition.">条件を満たす要素を格納する <see cref="T:System.Collections.Generic.IEnumerable`1" /> を返します。</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Text.Json</name>
  </assembly>
  <members>
    <member name="T:System.Text.Json.JsonCommentHandling">
      <summary vsli:raw="Defines how the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct handles comments.">
        <see cref="T:System.Text.Json.Utf8JsonReader" /> 構造体によるコメントの処理方法を定義します。</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Allow">
      <summary vsli:raw="Allows comments within the JSON input and treats them as valid tokens. While reading, the caller can access the comment values.">JSON 入力内のコメントを許可し、有効なトークンとして扱います。 読み取り中に、呼び出し元はコメント値にアクセスすることができます。</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Disallow">
      <summary vsli:raw="Doesn't allow comments within the JSON input. Comments are treated as invalid JSON if found, and a &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; is thrown. This is the default value.">JSON 入力内のコメントを許可しません。 コメントが見つかった場合、それは無効な JSON として扱われ、<see cref="T:System.Text.Json.JsonException" /> がスローされます。 これが既定値です。</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Skip">
      <summary vsli:raw="Allows comments within the JSON input and ignores them. The &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; behaves as if no comments are present.">JSON 入力内のコメントを許可し、それを無視します。 <see cref="T:System.Text.Json.Utf8JsonReader" /> は、コメントが存在しないかのように動作します。</summary>
    </member>
    <member name="T:System.Text.Json.JsonDocument">
      <summary vsli:raw="Provides a mechanism for examining the structural content of a JSON value without automatically instantiating data values.">データ値を自動的にインスタンス化せずに JSON 値の構造的な内容を調べるためのメカニズムを提供します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonDocument&quot;&gt;&lt;/xref&gt; instance.">この <see cref="T:System.Text.Json.JsonDocument" /> インスタンスによって使用されているリソースを解放します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses a sequence as UTF-8-encoded text representing a single JSON value into a JsonDocument.">単一の JSON バイト値を表す UTF-8 エンコード テキストとしてシーケンスを JsonDocument に解析します。</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">解析対象の JSON テキスト。</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">解析中にリーダーの動作を制御するオプション。</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">JSON 値の JsonDocument 表現。</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> では、有効な単一の JSON 値が表現されていません。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> に、サポート対象外のオプションが含まれています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; as UTF-8-encoded data representing a single JSON value into a JsonDocument. The stream is read to completion.">単一の JSON 値を表す UTF-8 エンコード データとして <see cref="T:System.IO.Stream" /> を JsonDocument に解析します。 ストリームは最後まで読み取られます。</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">解析対象の JSON データ。</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">解析中にリーダーの動作を制御するオプション。</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">JSON 値の JsonDocument 表現。</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> では、有効な単一の JSON 値が表現されていません。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> に、サポート対象外のオプションが含まれています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses memory as UTF-8-encoded text representing a single JSON value into a JsonDocument.">単一の JSON バイト値を表す UTF-8 エンコード テキストとしてメモリを JsonDocument に解析します。</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">解析対象の JSON テキスト。</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">解析中にリーダーの動作を制御するオプション。</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">JSON 値の JsonDocument 表現。</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> では、有効な単一の JSON 値が表現されていません。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> に、サポート対象外のオプションが含まれています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses text representing a single JSON value into a JsonDocument.">単一の JSON 文字値を表すテキストを JsonDocument に解析します。</summary>
      <param name="json" vsli:raw="The JSON text to parse.">解析対象の JSON テキスト。</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">解析中にリーダーの動作を制御するオプション。</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">JSON 値の JsonDocument 表現。</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="json" /> では、有効な単一の JSON 値が表現されていません。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> に、サポート対象外のオプションが含まれています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses text representing a single JSON string value into a JsonDocument.">単一の JSON 文字列値を表すテキストを JsonDocument に解析します。</summary>
      <param name="json" vsli:raw="The JSON text to parse.">解析対象の JSON テキスト。</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">解析中にリーダーの動作を制御するオプション。</param>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">JSON 値の JsonDocument 表現。</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="json" /> では、有効な単一の JSON 値が表現されていません。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> に、サポート対象外のオプションが含まれています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseAsync(System.IO.Stream,System.Text.Json.JsonDocumentOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; as UTF-8-encoded data representing a single JSON value into a JsonDocument. The stream is read to completion.">単一の JSON 値を表す UTF-8 エンコード データとして <see cref="T:System.IO.Stream" /> を JsonDocument に解析します。 ストリームは最後まで読み取られます。</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">解析対象の JSON データ。</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">解析中にリーダーの動作を制御するオプション。</param>
      <param name="cancellationToken" vsli:raw="The token to monitor for cancellation requests.">キャンセル要求を監視するためのトークン。</param>
      <returns vsli:raw="A task to produce a JsonDocument representation of the JSON value.">JSON 値の JsonDocument 表現を作成するタスク。</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> では、有効な単一の JSON 値が表現されていません。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="readerOptions" /> に、サポート対象外のオプションが含まれています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseValue(System.Text.Json.Utf8JsonReader@)">
      <summary vsli:raw="Parses one JSON value (including objects or arrays) from the provided reader.">指定されたリーダーからの 1 つの JSON 値 (オブジェクトまたは配列を含む) を解析します。</summary>
      <param name="reader" vsli:raw="The reader to read.">読み取りを行うリーダー。</param>
      <returns vsli:raw="A JsonDocument representing the value (and nested values) read from the reader.">リーダーから読み取られた値 (およびネストされた値) を表す JsonDocument。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; contains unsupported options.&#xA;&#xA;-or-&#xA;&#xA;The current &lt;paramref name=&quot;reader&quot; /&gt; token does not start or represent a value.">
        <paramref name="reader" /> に、サポート対象外のオプションが含まれています。</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="A value could not be read from the reader.">リーダーから値を読み取ることができませんでした。</exception>
    </member>
    <member name="P:System.Text.Json.JsonDocument.RootElement">
      <summary vsli:raw="Gets the root element of this JSON document.">この JSON ドキュメントのルート要素を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the document.">ドキュメントの値を表す。<see cref="T:System.Text.Json.JsonElement" /></returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.TryParseValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonDocument@)">
      <summary vsli:raw="Attempts to parse one JSON value (including objects or arrays) from the provided reader.">指定されたリーダーからの 1 つの JSON 値 (オブジェクトまたは配列を含む) の解析を試みます。</summary>
      <param name="reader" vsli:raw="The reader to read.">読み取りを行うリーダー。</param>
      <param name="document" vsli:raw="When the method returns, contains the parsed document.">このメソッドから戻るときに、解析されたドキュメントが格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a value was read and parsed into a JsonDocument; &lt;see langword=&quot;false&quot; /&gt; if the reader ran out of data while parsing. All other situations result in an exception being thrown.">値が読み取られ、JsonDocument に解析された場合は <see langword="true" />。解析中にリーダーでデータが不足した場合は <see langword="false" />。 他のすべての状況では、例外がスローされます。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; contains unsupported options.&#xA;&#xA;-or-&#xA;&#xA;The current &lt;paramref name=&quot;reader&quot; /&gt; token does not start or represent a value.">
        <paramref name="reader" /> に、サポート対象外のオプションが含まれています。</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="A value could not be read from the reader.">リーダーから値を読み取ることができませんでした。</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the document to the provided writer as a JSON value.">指定されたライターにドキュメントを JSON 値として書き込みます。</summary>
      <param name="writer" vsli:raw="The writer to which to write the document.">ドキュメントの書き込み先のライター。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;writer&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this &lt;see cref=&quot;P:System.Text.Json.JsonDocument.RootElement&quot; /&gt; would result in invalid JSON.">この <see cref="P:System.Text.Json.JsonDocument.RootElement" /> の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は無効な JSON となることがあります。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="T:System.Text.Json.JsonDocumentOptions">
      <summary vsli:raw="Provides the ability for the user to define custom behavior when parsing JSON to create a &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">JSON を解析して <see cref="T:System.Text.Json.JsonDocument" /> を作成するときにカスタム動作を定義する機能をユーザーに提供します。</summary>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.AllowTrailingCommas">
      <summary vsli:raw="Gets or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read.">読み取られる JSON ペイロード内でオブジェクトまたは配列の JSON 値の一覧の終わりにある余分なコンマが許可 (および無視) されるかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma at the end of a list of JSON values in an object or array is allowed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. Default is &lt;see langword=&quot;false&quot; /&gt;">
        <see langword="true" />オブジェクトまたは配列内の JSON 値の一覧の末尾に余分なコンマがある場合は。それ以外<see langword="false" />の場合は。 既定値は<see langword="false" /></returns>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.CommentHandling">
      <summary vsli:raw="Gets or sets a value that determines how the &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; handles comments when reading through the JSON data.">JSON データを読み取るときに <see cref="T:System.Text.Json.JsonDocument" /> がコメントを処理する方法を決定する値を取得または設定します。</summary>
      <returns vsli:raw="One of the enumeration values that indicates how comments are handled.">コメントの処理方法を示す列挙値の1つ。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The comment handling enum is set to a value that is not supported (or not within the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enum range).">コメント処理列挙型が、サポートされていない (または <see cref="T:System.Text.Json.JsonCommentHandling" /> 列挙型の範囲内ではない) 値に設定されています。</exception>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when parsing JSON data, with the default (that is, 0) indicating a maximum depth of 64.">JSON データを解析するときに許可される最大深度を取得または設定します。既定値 (つまり 0) は、最大深度が 64 であることを示します。</summary>
      <returns vsli:raw="The maximum depth allowed when parsing JSON data.">JSON データを解析するときに許容される最大の深さ。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The max depth is set to a negative value.">最大深度が負の値に設定されています。</exception>
    </member>
    <member name="T:System.Text.Json.JsonElement">
      <summary vsli:raw="Represents a specific JSON value within a &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">
        <see cref="T:System.Text.Json.JsonDocument" /> 内の特定の JSON 値を表します。</summary>
    </member>
    <member name="T:System.Text.Json.JsonElement.ArrayEnumerator">
      <summary vsli:raw="Represents an enumerator for the contents of a JSON array.">JSON 配列のコンテンツの列挙子を表します。</summary>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">列挙子の現在位置にあるコレクション内の要素を取得します。</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">コレクション内の、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonElement.ArrayEnumerator&quot;&gt;&lt;/xref&gt; instance.">この <see cref="T:System.Text.Json.JsonElement.ArrayEnumerator" /> インスタンスによって使用されているリソースを解放します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the array.">配列の反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the collection.">列挙子をコレクションの次の要素に進めます。</summary>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the enumerator was successfully advanced to the next element; &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt; if the enumerator has passed the end of the collection.">列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonElement}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる <see cref="T:System.Text.Json.JsonElement" /> の配列の列挙子。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">列挙子の現在位置にあるコレクション内の要素を取得します。</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">コレクション内の、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.Clone">
      <summary vsli:raw="Gets a JsonElement that can be safely stored beyond the lifetime of the original &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">元の <see cref="T:System.Text.Json.JsonDocument" /> の有効期間を超えて安全に格納できる JsonElement を取得します。</summary>
      <returns vsli:raw="A JsonElement that can be safely stored beyond the lifetime of the original &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">元の <see cref="T:System.Text.Json.JsonDocument" /> の有効期間を超えて安全に格納できる JsonElement。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateArray">
      <summary vsli:raw="Gets an enumerator to enumerate the values in the JSON array represented by this JsonElement.">この JsonElement によって表される JSON 配列内の値を列挙する列挙子を取得します。</summary>
      <returns vsli:raw="An enumerator to enumerate the values in the JSON array represented by this JsonElement.">この JsonElement によって表される JSON 配列内の値を列挙する列挙子。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Array" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateObject">
      <summary vsli:raw="Gets an enumerator to enumerate the properties in the JSON object represented by this JsonElement.">この JsonElement によって表される JSON オブジェクト内のプロパティを列挙する列挙子を取得します。</summary>
      <returns vsli:raw="An enumerator to enumerate the properties in the JSON object represented by this JsonElement.">この JsonElement によって表される JSON オブジェクト内のプロパティを列挙する列挙子。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Object" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetArrayLength">
      <summary vsli:raw="Gets the number of values contained within the current array value.">現在の配列値に含まれる値の数を取得します。</summary>
      <returns vsli:raw="The number of values contained within the current array value.">現在の配列値に含まれる値の数。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Array" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBoolean">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">要素の値を <see cref="T:System.Boolean" /> として取得します。</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">
        <see cref="T:System.Boolean" /> としての要素の値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is neither &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.True&quot; /&gt; nor &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.False&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> が <see cref="F:System.Text.Json.JsonValueKind.True" /> または <see cref="F:System.Text.Json.JsonValueKind.False" /> のいずれでもありません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetByte">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">現在の JSON 数値を <see cref="T:System.Byte" /> として取得します。</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">
        <see cref="T:System.Byte" /> としての現在の JSON 数値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">値を <see cref="T:System.Byte" /> として表すことはできません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBytesFromBase64">
      <summary vsli:raw="Gets the value of the element as a byte array.">バイト配列として要素の値を取得します。</summary>
      <returns vsli:raw="The value decoded as a byte array.">バイト配列としてデコードされた値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.String" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value is not encoded as Base64 text and hence cannot be decoded to bytes.">値は Base64 テキストとしてエンコードされていないため、バイトにデコードできません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTime">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">要素の値を <see cref="T:System.DateTime" /> として取得します。</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">
        <see cref="T:System.DateTime" /> としての要素の値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.String" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be read as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">値を <see cref="T:System.DateTime" /> として表すことはできません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTimeOffset">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">要素の値を <see cref="T:System.DateTimeOffset" /> として取得します。</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">
        <see cref="T:System.DateTimeOffset" /> としての要素の値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.String" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be read as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">値を <see cref="T:System.DateTimeOffset" /> として表すことはできません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDecimal">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">現在の JSON 数値を <see cref="T:System.Decimal" /> として取得します。</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">
        <see cref="T:System.Decimal" /> としての現在の JSON 数値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">値を <see cref="T:System.Decimal" /> として表すことはできません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDouble">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">現在の JSON 数値を <see cref="T:System.Double" /> として取得します。</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">
        <see cref="T:System.Double" /> としての現在の JSON 数値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">値を <see cref="T:System.Double" /> として表すことはできません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetGuid">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">要素の値を <see cref="T:System.Guid" /> として取得します。</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">
        <see cref="T:System.Guid" /> としての要素の値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.String" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">値を <see cref="T:System.Guid" /> として表すことはできません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt16">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">現在の JSON 数値を <see cref="T:System.Int16" /> として取得します。</summary>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">
        <see cref="T:System.Int16" /> としての現在の JSON 数値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">値を <see cref="T:System.Int16" /> として表すことはできません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt32">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">現在の JSON 数値を <see cref="T:System.Int32" /> として取得します。</summary>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <see cref="T:System.Int32" /> としての現在の JSON 数値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">値を <see cref="T:System.Int32" /> として表すことはできません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt64">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">現在の JSON 数値を <see cref="T:System.Int64" /> として取得します。</summary>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">
        <see cref="T:System.Int64" /> としての現在の JSON 数値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">値を <see cref="T:System.Int64" /> として表すことはできません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;utf8PropertyName&quot; /&gt;.">
        <paramref name="utf8PropertyName" /> によって識別される必須プロパティの値を表す <see cref="T:System.Text.Json.JsonElement" /> を取得します。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 representation (with no Byte-Order-Mark (BOM)) of the name of the property to return.">返されるプロパティの名前の UTF-8 表現 (バイト オーダー マーク (BOM) なし)。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">要求されたプロパティの値を表す <see cref="T:System.Text.Json.JsonElement" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Object" /> ではありません。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">要求された名前のプロパティは見つかりませんでした。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;propertyName&quot; /&gt;.">
        <paramref name="propertyName" /> によって識別される必須プロパティの値を表す <see cref="T:System.Text.Json.JsonElement" /> を取得します。</summary>
      <param name="propertyName" vsli:raw="The name of the property whose value is to be returned.">値が返されるプロパティの名前。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">要求されたプロパティの値を表す <see cref="T:System.Text.Json.JsonElement" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Object" /> ではありません。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">要求された名前のプロパティは見つかりませんでした。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.String)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;propertyName&quot; /&gt;.">
        <paramref name="propertyName" /> によって識別される必須プロパティの値を表す <see cref="T:System.Text.Json.JsonElement" /> を取得します。</summary>
      <param name="propertyName" vsli:raw="The name of the property whose value is to be returned.">値が返されるプロパティの名前。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">要求されたプロパティの値を表す <see cref="T:System.Text.Json.JsonElement" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Object" /> ではありません。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">要求された名前のプロパティは見つかりませんでした。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetRawText">
      <summary vsli:raw="Gets a string that represents the original input data backing this value.">この値を裏付ける元の入力データを表す文字列を取得します。</summary>
      <returns vsli:raw="The original input data backing this value.">この値を裏付ける元の入力データ。</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSByte">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">現在の JSON 数値を <see cref="T:System.SByte" /> として取得します。</summary>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">
        <see cref="T:System.SByte" /> としての現在の JSON 数値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">値を <see cref="T:System.SByte" /> として表すことはできません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSingle">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">現在の JSON 数値を <see cref="T:System.Single" /> として取得します。</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">
        <see cref="T:System.Single" /> としての現在の JSON 数値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">値を <see cref="T:System.Single" /> として表すことはできません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetString">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">要素の値を <see cref="T:System.String" /> として取得します。</summary>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.String" /> としての要素の値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is neither &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt; nor &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Null&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> が <see cref="F:System.Text.Json.JsonValueKind.String" /> または <see cref="F:System.Text.Json.JsonValueKind.Null" /> のいずれでもありません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt16">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">現在の JSON 数値を <see cref="T:System.UInt16" /> として取得します。</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">
        <see cref="T:System.UInt16" /> としての現在の JSON 数値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">値を <see cref="T:System.UInt16" /> として表すことはできません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt32">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">現在の JSON 数値を <see cref="T:System.UInt32" /> として取得します。</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">
        <see cref="T:System.UInt32" /> としての現在の JSON 数値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">値を <see cref="T:System.UInt32" /> として表すことはできません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt64">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">現在の JSON 数値を <see cref="T:System.UInt64" /> として取得します。</summary>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">
        <see cref="T:System.UInt64" /> としての現在の JSON 数値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">値を <see cref="T:System.UInt64" /> として表すことはできません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="P:System.Text.Json.JsonElement.Item(System.Int32)">
      <summary vsli:raw="Gets the value at the specified index if the current value is an &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">現在の値が <see cref="F:System.Text.Json.JsonValueKind.Array" /> の場合、指定されたインデックスの値を取得します。</summary>
      <param name="index" vsli:raw="The item index.">項目のインデックス。</param>
      <returns vsli:raw="The value at the specified index.">指定したインデックス位置にある値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Array" /> ではありません。</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is not in the range [0, &lt;see cref=&quot;M:System.Text.Json.JsonElement.GetArrayLength&quot; /&gt;()).">
        <paramref name="index" /> が [0, <see cref="M:System.Text.Json.JsonElement.GetArrayLength" />()) という範囲内にありません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="T:System.Text.Json.JsonElement.ObjectEnumerator">
      <summary vsli:raw="Represents an enumerator for the properties of a JSON object.">JSON オブジェクトのプロパティの列挙子を表します。</summary>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">列挙子の現在位置にあるコレクション内の要素を取得します。</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">コレクション内の、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonElement.ObjectEnumerator&quot;&gt;&lt;/xref&gt; instance.">この <see cref="T:System.Text.Json.JsonElement.ObjectEnumerator" /> インスタンスによって使用されているリソースを解放します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates the properties of an object.">オブジェクトのプロパティを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the object.">オブジェクトの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the collection.">列挙子をコレクションの次の要素に進めます。</summary>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the enumerator was successfully advanced to the next element; &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt; if the enumerator has passed the end of the collection.">列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonProperty}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>このコレクションの反復処理に使用できる <see cref="T:System.Text.Json.JsonProperty" /> オブジェクトの列挙子。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">列挙子の現在位置にあるコレクション内の要素を取得します。</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">コレクション内の、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ToString">
      <summary vsli:raw="Gets a string representation for the current value appropriate to the value type.">値の型に適した現在の値の文字列表現を取得します。</summary>
      <returns vsli:raw="A string representation for the current value appropriate to the value type.">値の型に適した現在の値の文字列表現。</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetByte(System.Byte@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">現在の JSON 数値を <see cref="T:System.Byte" /> として表現しようと試みます。</summary>
      <param name="value" vsli:raw="When this method returns, contains the byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">メソッドから制御が戻る時点で、変換が成功した場合は、現在の JSON 数値と等価のバイトが格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">数値が <see cref="T:System.Byte" /> として表現できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetBytesFromBase64(System.Byte[]@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a byte array, assuming that it is Base64 encoded.">Base64 でエンコードされていると想定として、現在の JSON 文字列をバイト配列として表現しようとします。</summary>
      <param name="value" vsli:raw="If the method succeeds, contains the decoded binary representation of the Base64 text.">メソッドが成功した場合、Base64 テキストのデコードされたバイナリ表現が含まれます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire token value is encoded as valid Base64 text and can be successfully decoded to bytes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">トークン値全体が有効な Base64 テキストとしてエンコードされ、正常にバイトにデコードできる場合は <see langword="true" />。
              それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.String" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTime(System.DateTime@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">現在の JSON 文字列を <see cref="T:System.DateTime" /> として表現しようと試みます。</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTime.MinValue&quot; /&gt; if the conversion failed.">このメソッドから戻るときに、現在の JSON 文字列と同等の日時の値が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">文字列が <see cref="T:System.DateTime" /> として表現できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.String" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">現在の JSON 文字列を <see cref="T:System.DateTimeOffset" /> として表現しようと試みます。</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTimeOffset.MinValue&quot; /&gt; if the conversion failed.">このメソッドから戻るときに、現在の JSON 文字列と同等の日時が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">文字列が <see cref="T:System.DateTimeOffset" /> として表現できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.String" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDecimal(System.Decimal@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">現在の JSON 数値を <see cref="T:System.Decimal" /> として表現しようと試みます。</summary>
      <param name="value" vsli:raw="When this method returns, contains the decimal equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">このメソッドから戻るときに、現在の JSON 数値の 10 進数に相当するものが格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">数値が <see cref="T:System.Decimal" /> として表現できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDouble(System.Double@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">現在の JSON 数値を <see cref="T:System.Double" /> として表現しようと試みます。</summary>
      <param name="value" vsli:raw="When this method returns, contains a double-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">このメソッドから戻るときに、現在の JSON 数値と同等の倍精度浮動小数点値が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Double&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">数値が <see cref="T:System.Double" /> として表現できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetGuid(System.Guid@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">現在の JSON 文字列を <see cref="T:System.Guid" /> として表現しようと試みます。</summary>
      <param name="value" vsli:raw="When this method returns, contains the GUID equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.Guid.Empty&quot; /&gt; if the conversion failed.">このメソッドから戻るときに、現在の JSON 文字列と同等の GUID が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">文字列が <see cref="T:System.Guid" /> として表現できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.String" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt16(System.Int16@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">現在の JSON 数値を <see cref="T:System.Int16" /> として表現しようと試みます。</summary>
      <param name="value" vsli:raw="When this method returns, contains the 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">メソッドから制御が戻る時点で、変換が成功した場合は、現在の JSON 数値と等価の 16 ビット整数が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">数値を <see cref="T:System.Int16" /> として表現できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt32(System.Int32@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">現在の JSON 数値を <see cref="T:System.Int32" /> として表現しようと試みます。</summary>
      <param name="value" vsli:raw="When this method returns, contains the 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">このメソッドから戻るときに、現在の JSON 数値と同等の 32 ビット整数値が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">数値を <see cref="T:System.Int32" /> として表現できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt64(System.Int64@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">現在の JSON 数値を <see cref="T:System.Int64" /> として表現しようと試みます。</summary>
      <param name="value" vsli:raw="When this method returns, contains the 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">このメソッドから戻るときに、現在の JSON 数値と同等の 64 ビット整数値が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">数値が <see cref="T:System.Int64" /> として表現できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;utf8PropertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, the method assigns its value to the &lt;paramref name=&quot;value&quot; /&gt; argument.">現在のオブジェクトで <paramref name="utf8PropertyName" /> という名前のプロパティを探し、そのようなプロパティが存在するかどうかを示す値を返します。 プロパティが存在する場合、メソッドではその値を <paramref name="value" /> 引数に割り当てます。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 (with no Byte-Order-Mark (BOM)) representation of the name of the property to return.">返されるプロパティの名前の UTF-8 (バイト オーダー マーク (BOM) なし) 表現。</param>
      <param name="value" vsli:raw="Receives the value of the located property.">特定されたプロパティの値を受け取ります。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">プロパティが見つかった場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Object" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Char},System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;propertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, the method assigns its value to the &lt;paramref name=&quot;value&quot; /&gt; argument.">現在のオブジェクトで <paramref name="propertyName" /> という名前のプロパティを探し、そのようなプロパティが存在するかどうかを示す値を返します。 プロパティが存在する場合、メソッドではその値を <paramref name="value" /> 引数に割り当てます。</summary>
      <param name="propertyName" vsli:raw="The name of the property to find.">検索するプロパティの名前。</param>
      <param name="value" vsli:raw="When this method returns, contains the value of the specified property.">このメソッドから戻るときに、指定したプロパティの値が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">プロパティが見つかった場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Object" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.String,System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;propertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, its value is assigned to the &lt;paramref name=&quot;value&quot; /&gt; argument.">現在のオブジェクトで <paramref name="propertyName" /> という名前のプロパティを探し、そのようなプロパティが存在するかどうかを示す値を返します。 プロパティが存在する場合、その値は <paramref name="value" /> 引数に割り当てられています。</summary>
      <param name="propertyName" vsli:raw="The name of the property to find.">検索するプロパティの名前。</param>
      <param name="value" vsli:raw="When this method returns, contains the value of the specified property.">このメソッドから戻るときに、指定したプロパティの値が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">プロパティが見つかった場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Object" /> ではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSByte(System.SByte@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">現在の JSON 数値を <see cref="T:System.SByte" /> として表現しようと試みます。</summary>
      <param name="value" vsli:raw="When this method returns, contains the signed byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">メソッドから制御が戻る時点で、変換が成功した場合は、現在の JSON 数値と等価の符号付きバイトが格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">数値を <see cref="T:System.SByte" /> として表現できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSingle(System.Single@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">現在の JSON 数値を <see cref="T:System.Single" /> として表現しようと試みます。</summary>
      <param name="value" vsli:raw="When this method returns, contains the single-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">このメソッドから戻るときに、現在の JSON 数値と同等の単精度浮動小数点値が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Single&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">数値が <see cref="T:System.Single" /> として表現できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt16(System.UInt16@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">現在の JSON 数値を <see cref="T:System.UInt16" /> として表現しようと試みます。</summary>
      <param name="value" vsli:raw="When this method returns, contains the unsigned 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">メソッドから制御が戻る時点で、変換が成功した場合は、現在の JSON 数値と等価の符号なし 16 ビット整数が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">数値が <see cref="T:System.UInt16" /> として表現できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt32(System.UInt32@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">現在の JSON 数値を <see cref="T:System.UInt32" /> として表現しようと試みます。</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">このメソッドから戻るときに、現在の JSON 数値と同等の 32 ビット符号なし整数値が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">数値が <see cref="T:System.UInt32" /> として表現できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt64(System.UInt64@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">現在の JSON 数値を <see cref="T:System.UInt64" /> として表現しようと試みます。</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">このメソッドから戻るときに、現在の JSON 数値と同等の 64 ビット符号なし整数値が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">数値が <see cref="T:System.UInt64" /> として表現できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the text represented by a UTF8-encoded byte span to the string value of this element.">UTF-8 でエンコードされたバイト スパンによって表されるテキストを、この要素の文字列値と比較します。</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">比較対象の UTF-8 でエンコードされたテキスト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element has the same UTF-8 encoding as&#xA;              &lt;paramref name=&quot;utf8Text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">この要素の文字列値に <paramref name="utf8Text" /> と同じ UTF-8 エンコードがある場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.String" /> ではありません。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares a specified read-only character span to the string value of this element.">指定された読み取り専用の文字スパンを、この要素の文字列値と比較します。</summary>
      <param name="text" vsli:raw="The text to compare against.">比較対象のテキスト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">この要素の文字列値が <paramref name="text" /> と一致する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.String" /> ではありません。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.String)">
      <summary vsli:raw="Compares a specified string to the string value of this element.">指定された文字列を、この要素の文字列値と比較します。</summary>
      <param name="text" vsli:raw="The text to compare against.">比較対象のテキスト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">この要素の文字列値が <paramref name="text" /> と一致する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.String" /> ではありません。</exception>
    </member>
    <member name="P:System.Text.Json.JsonElement.ValueKind">
      <summary vsli:raw="Gets the type of the current JSON value.">現在の JSON 値の型を取得します。</summary>
      <returns vsli:raw="The type of the current JSON value.">現在の JSON 値の型。</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the element to the specified writer as a JSON value.">要素を指定されたライターに JSON 値として書き込みます。</summary>
      <param name="writer" vsli:raw="The writer to which to write the element.">要素を書き込むライター。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;writer&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this value is &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Undefined&quot; /&gt;.">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Undefined" />です。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="T:System.Text.Json.JsonEncodedText">
      <summary vsli:raw="Provides methods to transform UTF-8 or UTF-16 encoded text into a form that is suitable for JSON.">UTF-8 または UTF-16 でエンコードされたテキストを JSON に最適なフォームに変換するメソッドを提供します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Byte},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes a UTF-8 text value as a JSON string.">UTF-8 テキスト値を JSON 文字列としてエンコードします。</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded text to convert to JSON encoded text.">JSON でエンコードされたテキストに変換するための UTF-8 でエンコードされたテキスト。</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">文字列をエスケープするときに使用するエンコーダー、または既定のエンコーダーを使用する場合は <see langword="null" />。</param>
      <returns vsli:raw="The encoded JSON text.">エンコードされた JSON テキスト。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;utf8Value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;utf8Value&quot; /&gt; contains invalid UTF-8 bytes.">
        <paramref name="utf8Value" /> が大きすぎます。
または
<paramref name="utf8Value" /> に無効な UTF-8 バイトが含まれています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Char},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes a specified text value as a JSON string.">指定されたテキスト値を JSON 文字列としてエンコードします。</summary>
      <param name="value" vsli:raw="The value to convert to JSON encoded text.">JSON でエンコードされたテキストに変換する値。</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">文字列をエスケープするときに使用するエンコーダー、または既定のエンコーダーを使用する場合は <see langword="null" />。</param>
      <returns vsli:raw="The encoded JSON text.">エンコードされた JSON テキスト。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains invalid UTF-16 characters.">
        <paramref name="value" /> が大きすぎます。
または
<paramref name="value" /> に無効な UTF-16 文字が含まれています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.String,System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes the string text value as a JSON string.">JSON 文字列として文字列テキスト値をエンコードします。</summary>
      <param name="value" vsli:raw="The value to convert to JSON encoded text.">JSON でエンコードされたテキストに変換する値。</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">文字列をエスケープするときに使用するエンコーダー、または既定のエンコーダーを使用する場合は <see langword="null" />。</param>
      <returns vsli:raw="The encoded JSON text.">エンコードされた JSON テキスト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains invalid UTF-16 characters.">
        <paramref name="value" /> が大きすぎます。

または -

<paramref name="value" /> に無効な UTF-16 文字が含まれています。</exception>
    </member>
    <member name="P:System.Text.Json.JsonEncodedText.EncodedUtf8Bytes">
      <summary vsli:raw="Gets the UTF-8 encoded representation of the pre-encoded JSON text.">事前にエンコードされた JSON テキストを UTF-8 でエンコードした表現を取得します。</summary>
      <returns vsli:raw="The UTF-8 encoded representation of the pre-encoded JSON text.">事前にエンコードされた JSON テキストの UTF-8 でエンコードされた表現。</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance and a specified object, which must also be a &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt; instance, have the same value.">このインスタンスと、指定したオブジェクトの値が同一かどうかを判断します。<see cref="T:System.Text.Json.JsonEncodedText" /> インスタンスを指定する必要があります。</summary>
      <param name="obj" vsli:raw="The object to compare to this instance.">このインスタンスと比較するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and &lt;paramref name=&quot;obj&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のインスタンスと <paramref name="obj" /> が等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Determines whether this instance and another specified &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt; instance have the same value.">このインスタンスと、指定した別の <see cref="T:System.Text.Json.JsonEncodedText" /> インスタンスの値が同一かどうかを判断します。</summary>
      <param name="other" vsli:raw="The object to compare to this instance.">このインスタンスと比較するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance and &lt;paramref name=&quot;other&quot; /&gt; have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このインスタンスの値と <paramref name="other" /> の値が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt;.">この <see cref="T:System.Text.Json.JsonEncodedText" /> のハッシュ コードを返します。</summary>
      <returns vsli:raw="The hash code for this instance.">対象のインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.ToString">
      <summary vsli:raw="Converts the value of this instance to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">このインスタンスの値を <see cref="T:System.String" /> に変換します。</summary>
      <returns vsli:raw="The underlying UTF-16 encoded string.">基になる UTF-16 でエンコードされた文字列。</returns>
    </member>
    <member name="T:System.Text.Json.JsonException">
      <summary vsli:raw="Defines a custom exception object that is thrown when invalid JSON text is encountered, the defined maximum depth is passed, or the JSON text is not compatible with the type of a property on an object.">無効な JSON テキストが見つかったとき、定義された最大深度が渡されたとき、あるいはオブジェクトのプロパティの型と JSON テキストの間に互換性がないときにスローされるカスタムの例外オブジェクトを定義します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class.">
        <see cref="T:System.Text.Json.JsonException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Creates a new exception object with serialized data.">シリアル化されたデータを使用して新しい例外オブジェクトを作成します。</summary>
      <param name="info" vsli:raw="The serialized object data about the exception being thrown.">スローされた例外に関するシリアル化されたオブジェクト データ。</param>
      <param name="context" vsli:raw="An object that contains contextual information about the source or destination.">転送元または転送先に関するコンテキスト情報を含むオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class with a specified error message.">指定したエラー メッセージを使用して、<see cref="T:System.Text.Json.JsonException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="The context-specific error message.">コンテキスト固有のエラー メッセージ。</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class, with a specified error message and a reference to the inner exception that is the cause of this exception.">指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.Text.Json.JsonException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="The context-specific error message.">コンテキスト固有のエラー メッセージ。</param>
      <param name="innerException" vsli:raw="The exception that caused the current exception.">現在の例外を引き起こした例外。</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
      <summary vsli:raw="Creates a new exception object to relay error information to the user.">ユーザーにエラー情報を伝えるための新しい例外オブジェクトを作成します。</summary>
      <param name="message" vsli:raw="The context-specific error message.">コンテキスト固有のエラー メッセージ。</param>
      <param name="path" vsli:raw="The path where the invalid JSON was encountered.">無効な JSON が検出されたパス。</param>
      <param name="lineNumber" vsli:raw="The line number (starting at 0) at which the invalid JSON was encountered when deserializing.">逆シリアル化したとき、無効な JSON が見つかった行番号 (0 から開始)。</param>
      <param name="bytePositionInLine" vsli:raw="The byte count within the current line (starting at 0) where the invalid JSON was encountered.">無効な JSON が見つかった現在の行 (0 から開始) 内のバイト数。</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Exception)">
      <summary vsli:raw="Creates a new exception object to relay error information to the user that includes a specified inner exception.">指定の内部例外が含まれ、ユーザーにエラー情報を伝える新しい例外オブジェクトを作成します。</summary>
      <param name="message" vsli:raw="The context-specific error message.">コンテキスト固有のエラー メッセージ。</param>
      <param name="path" vsli:raw="The path where the invalid JSON was encountered.">無効な JSON が検出されたパス。</param>
      <param name="lineNumber" vsli:raw="The line number (starting at 0) at which the invalid JSON was encountered when deserializing.">逆シリアル化したとき、無効な JSON が見つかった行番号 (0 から開始)。</param>
      <param name="bytePositionInLine" vsli:raw="The byte count (starting at 0) within the current line where the invalid JSON was encountered.">無効な JSON が見つかった現在の行 (0 から開始) 内のバイト数。</param>
      <param name="innerException" vsli:raw="The exception that caused the current exception.">現在の例外を引き起こした例外。</param>
    </member>
    <member name="P:System.Text.Json.JsonException.BytePositionInLine">
      <summary vsli:raw="Gets the zero-based number of bytes read within the current line before the exception.">例外発生前に現在の行から読み取られたバイト数 (0 から開始) を取得します。</summary>
      <returns vsli:raw="The zero-based number of bytes read within the current line before the exception.">例外の前に現在の行で読み取られたバイト数の0から始まる数。</returns>
    </member>
    <member name="M:System.Text.Json.JsonException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with information about the exception.">例外に関する情報を含む <see cref="T:System.Runtime.Serialization.SerializationInfo" /> を設定します。</summary>
      <param name="info" vsli:raw="The serialized object data about the exception being thrown.">スローされた例外に関するシリアル化されたオブジェクト データ。</param>
      <param name="context" vsli:raw="An object that contains contextual information about the source or destination.">転送元または転送先に関するコンテキスト情報を含むオブジェクト。</param>
    </member>
    <member name="P:System.Text.Json.JsonException.LineNumber">
      <summary vsli:raw="Gets the zero-based number of lines read before the exception.">例外発生前に読み取られた行数 (0 から開始) を取得します。</summary>
      <returns vsli:raw="The zero-based number of lines read before the exception.">例外の前に読み取られた、0から始まる行数。</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Message">
      <summary vsli:raw="Gets a message that describes the current exception.">現在の例外を説明するメッセージを取得します。</summary>
      <returns vsli:raw="The error message that describes the current exception.">現在の例外を説明するエラー メッセージ。</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Path">
      <summary vsli:raw="Gets The path within the JSON where the exception was encountered.">例外が発生した JSON 内のパスを取得します。</summary>
      <returns vsli:raw="The path within the JSON where the exception was encountered.">例外が発生した JSON 内のパス。</returns>
    </member>
    <member name="T:System.Text.Json.JsonNamingPolicy">
      <summary vsli:raw="Determines the naming policy used to convert a string-based name to another format, such as a camel-casing format.">文字列ベースの名前を、キャメルケース形式などの別の形式に変換するために使用される、名前付けポリシーを決定します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.JsonNamingPolicy&quot; /&gt;.">
        <see cref="T:System.Text.Json.JsonNamingPolicy" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Text.Json.JsonNamingPolicy.CamelCase">
      <summary vsli:raw="Gets the naming policy for camel-casing.">キャメルケース形式の名前付けポリシーを取得します。</summary>
      <returns vsli:raw="The naming policy for camel-casing.">Camel 形式の文字種の名前付けポリシー。</returns>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.ConvertName(System.String)">
      <summary vsli:raw="When overridden in a derived class, converts the specified name according to the policy.">派生クラスでオーバーライドされると、ポリシーに従って指定された名前を変換します。</summary>
      <param name="name" vsli:raw="The name to convert.">変換対象の名前。</param>
      <returns vsli:raw="The converted name.">変換された名前。</returns>
    </member>
    <member name="T:System.Text.Json.JsonProperty">
      <summary vsli:raw="Represents a single property for a JSON object.">JSON オブジェクトの単一のプロパティを表します。</summary>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Name">
      <summary vsli:raw="Gets the name of this property.">このプロパティの名前を取得します。</summary>
      <returns vsli:raw="The name of this property.">このプロパティの名前。</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the specified UTF-8 encoded text to the name of this property.">指定された UTF-8 でエンコードされたテキストを、このプロパティの名前と比較します。</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">比較対象の UTF-8 でエンコードされたテキスト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property has the same UTF-8 encoding as &lt;paramref name=&quot;utf8Text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このプロパティの名前が <paramref name="utf8Text" /> と同じ UTF-8 エンコードである場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">この値の <see cref="T:System.Type" /> は <see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> ではありません。</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares the specified text as a character span to the name of this property.">指定されたテキストを文字スパンとして、このプロパティの名前と比較します。</summary>
      <param name="text" vsli:raw="The text to compare against.">比較対象のテキスト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このプロパティの名前が <paramref name="text" /> と一致する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">この値の <see cref="T:System.Type" /> は <see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> ではありません。</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.String)">
      <summary vsli:raw="Compares the specified string to the name of this property.">指定された文字列を、このプロパティの名前と比較します。</summary>
      <param name="text" vsli:raw="The text to compare against.">比較対象のテキスト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise &lt;see langword=&quot;false&quot; /&gt;.">このプロパティの名前が <paramref name="text" /> と一致する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">この値の <see cref="T:System.Type" /> は <see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> ではありません。</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.ToString">
      <summary vsli:raw="Provides a string representation of the property for debugging purposes.">デバッグ目的でプロパティの文字列表現を指定します。</summary>
      <returns vsli:raw="A string containing the uninterpreted value of the property, beginning at the declaring open-quote and ending at the last character that is part of the value.">宣言の開始の引用符から始まり、値の一部である最後の文字で終わる、プロパティの解釈されていない値を含む文字列。</returns>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Value">
      <summary vsli:raw="Gets the value of this property.">このプロパティの値を取得します。</summary>
      <returns vsli:raw="The value of this property.">このプロパティの値。</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the property to the provided writer as a named JSON object property.">プロパティを、名前付き JSON オブジェクト プロパティとして提供されたライターに書き込みます。</summary>
      <param name="writer" vsli:raw="The writer to which to write the property.">プロパティを書き込むライター。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;see cref=&quot;P:System.Text.Json.JsonProperty.Name&quot; /&gt; is too large to be a JSON object property.">
        <see cref="P:System.Text.Json.JsonProperty.Name" /> は大きすぎるため JSON オブジェクトプロパティとはなりません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this JSON property's &lt;see cref=&quot;P:System.Text.Json.JsonProperty.Value&quot; /&gt; would result in invalid JSON.">この JSON プロパティの <see cref="P:System.Text.Json.JsonProperty.Value" /> の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は無効な JSON となることがあります。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="T:System.Text.Json.JsonReaderOptions">
      <summary vsli:raw="Provides the ability for the user to define custom behavior when reading JSON.">JSON の読み取り時にカスタム動作を定義する機能をユーザーに提供します。</summary>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas">
      <summary vsli:raw="Gets or sets a value that defines whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read.">読み取られる JSON ペイロード内でオブジェクトまたは配列の JSON 値の一覧の終わりにある余分なコンマが許可 (および無視) されるかどうかを定義する値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma is allowed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />exra コンマが許可される場合は。それ以外<see langword="false" />の場合は。</returns>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.CommentHandling">
      <summary vsli:raw="Gets or sets a value that determines how the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; handles comments when reading through the JSON data.">JSON データを読み取るときに <see cref="T:System.Text.Json.Utf8JsonReader" /> がコメントを処理する方法を決定する値を取得または設定します。</summary>
      <returns vsli:raw="One of the enumeration values that indicates how comments are handled.">コメントの処理方法を示す列挙値の1つ。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The property is being set to a value that is not a member of the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enumeration.">
        <see cref="T:System.Text.Json.JsonCommentHandling" /> 列挙のメンバーではない値にプロパティを設定しようとしています。</exception>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when reading JSON, with the default (that is, 0) indicating a maximum depth of 64.">JSON の読み取り時に許可される最大深度を取得または設定します。既定値 (つまり 0) は、最大深度が 64 であることを示します。</summary>
      <returns vsli:raw="The maximum depth allowed when reading JSON.">JSON を読み取るときに許可される最大深度。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The maximum depth is being set to a negative value.">最大深度を負の値に設定しようとしています。</exception>
    </member>
    <member name="T:System.Text.Json.JsonReaderState">
      <summary vsli:raw="Defines an opaque type that holds and saves all the relevant state information, which must be provided to the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; to continue reading after processing incomplete data.">関連するすべての状態情報を保持および保存する不透明な型を定義します。これは、不完全なデータを処理した後で読み取りを続行する場合に、<see cref="T:System.Text.Json.Utf8JsonReader" /> に指定する必要があります。</summary>
    </member>
    <member name="M:System.Text.Json.JsonReaderState.#ctor(System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Constructs a new &lt;see cref=&quot;T:System.Text.Json.JsonReaderState&quot; /&gt; instance.">新しい <see cref="T:System.Text.Json.JsonReaderState" /> インスタンスを作成します。</summary>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that is different from the JSON RFC (for example how to handle comments, or the maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly (comments within the JSON are invalid) and reads up to a maximum depth of 64.">JSON RFC とは異なる <see cref="T:System.Text.Json.Utf8JsonReader" /> のカスタマイズされた動作を定義します (たとえば、コメントの処理方法、読み取り時に許容される最大深度など)。 既定で、<see cref="T:System.Text.Json.Utf8JsonReader" /> は JSON RFC に厳密に従い (JSON 内のコメントは無効です)、最大 64 の深度まで読み取ります。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The maximum depth is set to a non-positive value (&amp;lt; 0).">最大深度が、正でない値 (&lt; 0) に設定されています。</exception>
    </member>
    <member name="P:System.Text.Json.JsonReaderState.Options">
      <summary vsli:raw="Gets the custom behavior to use when reading JSON data using the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct that may deviate from strict adherence to the JSON specification, which is the default behavior.">JSON 仕様への厳格な準拠 (これが既定の動作) から逸脱する場合がある <see cref="T:System.Text.Json.Utf8JsonReader" /> 構造体を使用して JSON データを読み取る際に使用するカスタム動作を取得します。</summary>
      <returns vsli:raw="The custom behavior to use when reading JSON data.">JSON データを読み取るときに使用するカスタム動作。</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializer">
      <summary vsli:raw="Provides functionality to serialize objects or value types to JSON and to deserialize JSON into objects or value types.">オブジェクトまたは値型を JSON にシリアル化したり、JSON をオブジェクトまたは値型に逆シリアル化したりする機能を提供します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the UTF-8 encoded text representing a single JSON value into an instance of a specified type.">単一の JSON 値を表す UTF-8 エンコード テキストを、指定された型のインスタンスに解析します。</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">解析対象の JSON テキスト。</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">変換元または変換先のオブジェクトの型。</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">解析中の動作を制御するオプション。</param>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">JSON 値の <paramref name="returnType" /> 表現。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="returnType" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;returnType&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the span beyond a single JSON value.">JSON が無効であるか、<paramref name="returnType" /> と JSON の間に互換性がないか、または Stream にデータが残っています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the text representing a single JSON value into an instance of a specified type.">単一の JSON 値を表すテキストを、指定された型のインスタンスに解析します。</summary>
      <param name="json" vsli:raw="The JSON text to parse.">解析対象の JSON テキスト。</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">変換元または変換先のオブジェクトの型。</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">解析中の動作を制御するオプション。</param>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">JSON 値の <paramref name="returnType" /> 表現。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; or &lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="json" /> または <paramref name="returnType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the string beyond a single JSON value.">JSON が無効であるか、<paramref name="returnType" /> と JSON の間に互換性がないか、または Stream にデータが残っています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads one JSON value (including objects or arrays) from the provided reader and converts it into an instance of  a specified type.">提供されたリーダーから 1 つの JSON 値 (オブジェクトまたは配列を含む) を読み取り、それを指定された型のインスタンスに変換します。</summary>
      <param name="reader" vsli:raw="The reader to read the JSON from.">読み取りを行うリーダー。</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">変換元または変換先のオブジェクトの型。</param>
      <param name="options" vsli:raw="Options to control the serializer behavior during reading.">読み取り中にシリアライザーの動作を制御するオプション。</param>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">JSON 値の <paramref name="returnType" /> 表現。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="returnType" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;returnType&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;A value could not be read from the reader.">JSON が無効であるか、<paramref name="returnType" /> と JSON の間に互換性がないか、またはリーダーから値を読み取ることができません。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; is using unsupported options.">
        <paramref name="reader" /> で、サポートされていないオプションが使用されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the UTF-8 encoded text representing a single JSON value into an instance of the type specified by a generic type parameter.">単一の JSON 値を表す UTF-8 エンコード テキストを、ジェネリック型パラメーターで指定された型のインスタンスに解析します。</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">解析対象の JSON テキスト。</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">解析中の動作を制御するオプション。</param>
      <typeparam name="TValue" vsli:raw="The target type of the UTF-8 encoded text.">UTF-8 でエンコードされたテキストの対象の型。</typeparam>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">JSON 値の <typeparamref name="TValue" /> 表現。</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the span beyond a single JSON value.">JSON が無効です。

または -

<typeparamref name="TValue" /> は JSON と互換性がありません。

または -

ストリームにデータが残っています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the text representing a single JSON value into an instance of the type specified by a generic type parameter.">単一の JSON 値を表すテキストを、ジェネリック型パラメーターで指定された型のインスタンスに解析します。</summary>
      <param name="json" vsli:raw="The JSON text to parse.">解析対象の JSON テキスト。</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">解析中の動作を制御するオプション。</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">JSON 値の対象の型。</typeparam>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">JSON 値の <typeparamref name="TValue" /> 表現。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="json" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the string beyond a single JSON value.">JSON が無効です。

または -

<typeparamref name="TValue" /> は JSON と互換性がありません。

または -

ストリームにデータが残っています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads one JSON value (including objects or arrays) from the provided reader into an instance of the type specified by a generic type parameter.">提供されたリーダーから、ジェネリック型パラメーターで指定された型のインスタンスに、1 つの JSON 値 (オブジェクトまたは配列を含む) を読み取ります。</summary>
      <param name="reader" vsli:raw="The reader to read the JSON from.">読み取りを行うリーダー。</param>
      <param name="options" vsli:raw="Options to control serializer behavior during reading.">読み取り中にシリアライザーの動作を制御するオプション。</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">JSON 値の対象の型。</typeparam>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">JSON 値の <typeparamref name="TValue" /> 表現。</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;A value could not be read from the reader.">JSON が無効です。
または
<typeparamref name="TValue" /> は JSON と互換性がありません。
または
ストリームにデータが残っています。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; uses unsupported options.">
        <paramref name="reader" /> で、サポートされていないオプションが使用されています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a specified type. The stream will be read to completion.">単一の JSON 値を表す UTF-8 エンコード テキストを、指定された型のインスタンスに、非同期に読み取ります。 ストリームは最後まで読み取られます。</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">解析対象の JSON データ。</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">変換元または変換先のオブジェクトの型。</param>
      <param name="options" vsli:raw="Options to control the behavior during reading.">読み取り中の動作を制御するオプション。</param>
      <param name="cancellationToken" vsli:raw="A cancellation token that may be used to cancel the read operation.">読み取り操作を取り消すために使用できるキャンセル トークン。</param>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">JSON 値の <paramref name="returnType" /> 表現。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; or &lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> または <paramref name="returnType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the stream.">JSON が無効です。

または -

<typeparamref name="TValue" /> は JSON と互換性がありません。

または -

ストリームにデータが残っています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a type specified by a generic type parameter. The stream will be read to completion.">単一の JSON 値を表す UTF-8 エンコード テキストを、ジェネリック型パラメーターで指定された型のインスタンスに、非同期に読み取ります。 ストリームは最後まで読み取られます。</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">解析対象の JSON データ。</param>
      <param name="options" vsli:raw="Options to control the behavior during reading.">読み取り中の動作を制御するオプション。</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the read operation.">読み取り操作を取り消すために使用できるトークン。</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">JSON 値の対象の型。</typeparam>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">JSON 値の <typeparamref name="TValue" /> 表現。</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the stream.">JSON が無効です。
または
<typeparamref name="TValue" /> は JSON と互換性がありません。
または
ストリームにデータが残っています。</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a specified type into a JSON string.">指定された型の値を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="The value to convert.">変換する値。</param>
      <param name="type">変換対象の <paramref name="value" /> の型。</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">変換動作を制御するオプション。</param>
      <returns vsli:raw="The JSON string representation of the value.">値の文字列表現。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes the JSON representation of the specified type to the provided writer.">指定された型の 1 つの JSON 値 (オブジェクトまたは配列を含む) を、提供されたライターに書き込みます。</summary>
      <param name="writer" vsli:raw="The JSON writer to write to.">JSON ライター。</param>
      <param name="value" vsli:raw="The value to convert and write.">変換して書き込む値。</param>
      <param name="type">変換対象の <paramref name="value" /> の型。</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">シリアル化動作を制御するオプション。</param>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a type specified by a generic type parameter into a JSON string.">ジェネリック型パラメーターによって指定された型の値を、<see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="The value to convert.">変換する値。</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">シリアル化動作を制御するオプション。</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">シリアル化する値の型。</typeparam>
      <returns vsli:raw="A JSON string representation of the value.">値の文字列表現。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes the JSON representation of a type specified by a generic type parameter to the provided writer.">ジェネリック型パラメーターによって指定された型の 1 つの JSON 値 (オブジェクトまたは配列を含む) を、提供されたライターに書き込みます。</summary>
      <param name="writer" vsli:raw="A JSON writer to write to.">JSON ライター。</param>
      <param name="value" vsli:raw="The value to convert and write.">変換して書き込む値。</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">シリアル化動作を制御するオプション。</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">シリアル化する値の型。</typeparam>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously converts the value of a specified type to UTF-8 encoded JSON text and writes it to the specified stream.">指定された型の値を UTF-8 でエンコードされた JSON テキストに非同期に変換し、指定されたストリームに書き込みます。</summary>
      <param name="utf8Json" vsli:raw="The UTF-8 stream to write to.">書き込み先の UTF-8 ストリーム。</param>
      <param name="value" vsli:raw="The value to convert.">変換する値。</param>
      <param name="type">変換対象の <paramref name="value" /> の型。</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">シリアル化動作を制御するオプション。</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the write operation.">書き込み操作を取り消すために使用できるトークン。</param>
      <returns vsli:raw="A task that represents the asynchronous write operation.">非同期の書き込み操作を表すタスク。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously converts a value of a type specified by a generic type parameter to UTF-8 encoded JSON text and writes it to a stream.">ジェネリック型パラメーターによって指定された型の値を UTF-8 でエンコードされた JSON テキストに非同期に変換し、ストリームに書き込みます。</summary>
      <param name="utf8Json" vsli:raw="The UTF-8 stream to write to.">書き込み先の UTF-8 ストリーム。</param>
      <param name="value" vsli:raw="The value to convert.">変換する値。</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">シリアル化動作を制御するオプション。</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the write operation.">書き込み操作を取り消すために使用できるトークン。</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">シリアル化する値の型。</typeparam>
      <returns vsli:raw="A task that represents the asynchronous write operation.">非同期の書き込み操作を表すタスク。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts a value of the specified type into a JSON string, encoded as UTF-8 bytes.">指定された型の値を、UTF-8 でエンコードされたバイト配列に変換します。</summary>
      <param name="value" vsli:raw="The value to convert.">変換する値。</param>
      <param name="type">変換対象の <paramref name="value" /> の型。</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">変換動作を制御するオプション。</param>
      <returns vsli:raw="A JSON string representation of the value, encoded as UTF-8 bytes.">値の UTF-8 表現。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a type specified by a generic type parameter into a JSON string, encoded as UTF-8 bytes.">ジェネリック型パラメーターによって指定された型の値を、UTF-8 でエンコードされたバイト配列に変換します。</summary>
      <param name="value" vsli:raw="The value to convert.">変換する値。</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">変換動作を制御するオプション。</param>
      <typeparam name="TValue" vsli:raw="The type of the value.">値の型。</typeparam>
      <returns vsli:raw="A JSON string representation of the value, encoded as UTF-8 bytes.">値の UTF-8 表現。</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializerOptions">
      <summary vsli:raw="Provides options to be used with &lt;see cref=&quot;T:System.Text.Json.JsonSerializer&quot; /&gt;.">
        <see cref="T:System.Text.Json.JsonSerializer" /> で使用されるオプションを提供します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonSerializerOptions&quot; /&gt; class.">
        <see cref="T:System.Text.Json.JsonSerializerOptions" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.AllowTrailingCommas">
      <summary vsli:raw="Get or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being deserialized.">逆シリアル化される JSON ペイロード内でオブジェクトまたは配列の JSON 値の一覧の終わりにある余分なコンマが許可 (および無視) されるかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored); &lt;see langword=&quot;false&quot; /&gt; otherwise.">
        <see langword="true" />オブジェクトまたは配列内の JSON 値の一覧の末尾に余分なコンマがある場合 (無視されます)。<see langword="false" />それ以外の場合は。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">このプロパティは、シリアル化または逆シリアル化が発生した後に設定されました。</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Converters">
      <summary vsli:raw="Gets the list of user-defined converters that were registered.">登録されたユーザー定義のコンバーターの一覧を取得します。</summary>
      <returns vsli:raw="The list of custom converters.">カスタムコンバーターの一覧。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DefaultBufferSize">
      <summary vsli:raw="Gets or sets the default buffer size, in bytes, to use when creating temporary buffers.">一時バッファーの作成時に使用する、既定のバッファー サイズ (バイト単位) を取得または設定します。</summary>
      <returns vsli:raw="The default buffer size in bytes.">既定のバッファーサイズ (バイト単位)。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The buffer size is less than 1.">バッファー サイズは 1 未満です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">このプロパティは、シリアル化または逆シリアル化が発生した後に設定されました。</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy">
      <summary vsli:raw="Gets or sets the policy used to convert a &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; key's name to another format, such as camel-casing.">
        <see cref="T:System.Collections.IDictionary" /> キーの名前を、camel 形式などの別の形式に変換するために使用されるポリシーを取得または設定します。</summary>
      <returns vsli:raw="The policy used to convert a &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; key's name to another format.">
        <see cref="T:System.Collections.IDictionary" />キーの名前を別の形式に変換するために使用されるポリシー。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Encoder">
      <summary vsli:raw="Gets or sets the encoder to use when escaping strings, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">文字列をエスケープするときに使用するエンコーダーを取得または設定します。既定のエンコーダーを使用する場合は <see langword="null" /> を設定します。</summary>
      <returns vsli:raw="The JavaScript character encoding.">JavaScript 文字エンコーディング。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.GetConverter(System.Type)">
      <summary vsli:raw="Returns the converter for the specified type.">指定された型のコンバーターを返します。</summary>
      <param name="typeToConvert" vsli:raw="The type to return a converter for.">コンバーターを返す型。</param>
      <returns vsli:raw="The first converter that supports the given type.">指定された型をサポートする最初のコンバーター。コンバーターがない場合は、<see langword="null" />。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues">
      <summary vsli:raw="Gets or sets a value that indicates whether &lt;see langword=&quot;null&quot; /&gt; values are ignored during serialization and deserialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">シリアル化および逆シリアル化の間に <see langword="null" /> 値を無視するかどうかを決定する値を取得または設定します。 既定値は <see langword="false" /> です。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if null values are ignored during serialization and deserialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />シリアル化および逆シリアル化中に null 値を無視する場合は。それ以外の場合は、「langword =&gt;"false"/」を参照してください。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.&#xA;&#xA;-or-&#xA;&#xA;&lt;see cref=&quot;P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition&quot; /&gt; has been set to a non-default value. These properties cannot be used together.">このプロパティは、シリアル化または逆シリアル化が発生した後に設定されました。</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties">
      <summary vsli:raw="Gets a value that indicates whether read-only properties are ignored during serialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">シリアル化中に読み取り専用プロパティを無視するかどうかを決定する値を取得します。 既定値は <see langword="false" /> です。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if read-only properties are ignored during serialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />シリアル化中に読み取り専用プロパティを無視する場合は。それ以外<see langword="false" />の場合は。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">このプロパティは、シリアル化または逆シリアル化が発生した後に設定されました。</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when serializing or deserializing JSON, with the default value of 0 indicating a maximum depth of 64.">JSON をシリアル化または逆シリアル化するときに許容される最大の深さを取得または設定します。既定値は 0 で、最大の深さが 64 であることを示します。</summary>
      <returns vsli:raw="The maximum depth allowed when serializing or deserializing JSON.">JSON をシリアル化または逆シリアル化するときに許容される最大の深さ。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">このプロパティは、シリアル化または逆シリアル化が発生した後に設定されました。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The max depth is set to a negative value.">最大深度が負の値に設定されています。</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive">
      <summary vsli:raw="Gets or sets a value that indicates whether a property's name uses a case-insensitive comparison during deserialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">逆シリアル化中に、プロパティの名前で大文字と小文字を区別しない比較が使用されるかどうかを決定する値を取得または設定します。 既定値は <see langword="false" /> です。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if property names are compared case-insensitively; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />大文字と小文字を区別しない比較を使用してプロパティ名を比較するにはそれ以外<see langword="false" />の場合は。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy">
      <summary vsli:raw="Gets or sets a value that specifies the policy used to convert a property's name on an object to another format, such as camel-casing, or &lt;see langword=&quot;null&quot; /&gt; to leave property names unchanged.">オブジェクトのプロパティの名前を、camel 形式などの別の形式に変換するために使用されるポリシーを指定する値を取得または設定します。</summary>
      <returns vsli:raw="A property naming policy, or &lt;see langword=&quot;null&quot; /&gt; to leave property names unchanged.">から<see cref="T:System.Text.Json.JsonNamingPolicy" />の列挙値の1つ。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.ReadCommentHandling">
      <summary vsli:raw="Gets or sets a value that defines how comments are handled during deserialization.">逆シリアル化中にコメントを処理する方法を定義する値を取得または設定します。</summary>
      <returns vsli:raw="A value that indicates whether comments are allowed, disallowed, or skipped.">コメントを許可するか、禁止するか、またはスキップするかを示す値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">このプロパティは、シリアル化または逆シリアル化が発生した後に設定されました。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The comment handling enum is set to a value that is not supported (or not within the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enum range).">コメント処理列挙型が、サポートされていない (または <see cref="T:System.Text.Json.JsonCommentHandling" /> 列挙型の範囲内ではない) 値に設定されています。</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.WriteIndented">
      <summary vsli:raw="Gets or sets a value that indicates whether JSON should use pretty printing. By default, JSON is serialized without any extra white space.">JSON で整形出力を使用する必要があるかどうかを定義する値を取得または設定します。 既定では、JSON は余分な空白なしでシリアル化されます。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if JSON is pretty printed on serialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />JSON がシリアル化で非常に印刷される必要がある場合は。それ以外<see langword="false" />の場合は。 既定値は、<see langword="false" /> です。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">このプロパティは、シリアル化または逆シリアル化が発生した後に設定されました。</exception>
    </member>
    <member name="T:System.Text.Json.JsonTokenType">
      <summary vsli:raw="Defines the various JSON tokens that make up a JSON text.">JSON テキストを構成するさまざまな JSON トークンを定義します。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Comment">
      <summary vsli:raw="The token type is a comment string.">トークン型はコメント文字列です。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndArray">
      <summary vsli:raw="The token type is the end of a JSON array.">トークン型は JSON 配列の終わりです。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndObject">
      <summary vsli:raw="The token type is the end of a JSON object.">トークン型は JSON オブジェクトの終わりです。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.False">
      <summary vsli:raw="The token type is the JSON literal false.">トークン型は JSON リテラル false です。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.None">
      <summary vsli:raw="There is no value (as distinct from &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;). This is the default token type if no data has been read by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">(<see cref="F:System.Text.Json.JsonTokenType.Null" /> とは異なり) 値がありません。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Null">
      <summary vsli:raw="The token type is the JSON literal null.">トークン型は JSON リテラル null です。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Number">
      <summary vsli:raw="The token type is a JSON number.">トークン型は JSON 番号です。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.PropertyName">
      <summary vsli:raw="The token type is a JSON property name.">トークン型は JSON プロパティ名です。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartArray">
      <summary vsli:raw="The token type is the start of a JSON array.">トークン型は JSON 配列の始まりです。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartObject">
      <summary vsli:raw="The token type is the start of a JSON object.">トークン型は JSON オブジェクトの始まりです。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.String">
      <summary vsli:raw="The token type is a JSON string.">トークン型は JSON 文字列です。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.True">
      <summary vsli:raw="The token type is the JSON literal true.">トークン型は JSON リテラル true です。</summary>
    </member>
    <member name="T:System.Text.Json.JsonValueKind">
      <summary vsli:raw="Specifies the data type of a JSON value.">JSON 値のデータ型を指定します。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Array">
      <summary vsli:raw="A JSON array.">JSON 配列。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.False">
      <summary vsli:raw="The JSON value false.">値が JSON 値 <see langword="false" /> であることを示します。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Null">
      <summary vsli:raw="The JSON value null.">JSON 値 <see langword="null" />。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Number">
      <summary vsli:raw="A JSON number.">JSON の数値。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Object">
      <summary vsli:raw="A JSON object.">JSON のオブジェクト。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.String">
      <summary vsli:raw="A JSON string.">JSON の文字列。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.True">
      <summary vsli:raw="The JSON value true.">JSON 値 <see langword="true" />。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Undefined">
      <summary vsli:raw="There is no value (as distinct from &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Null&quot; /&gt;).">(<see cref="F:System.Text.Json.JsonValueKind.Null" /> とは異なり) 値がありません。</summary>
    </member>
    <member name="T:System.Text.Json.JsonWriterOptions">
      <summary vsli:raw="Allows the user to define custom behavior when writing JSON using the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;.">
        <see cref="T:System.Text.Json.Utf8JsonWriter" /> を使用して JSON を書き込む際のカスタム動作をユーザーが定義することができます。</summary>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Encoder">
      <summary vsli:raw="Gets or sets the encoder to use when escaping strings, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">文字列をエスケープするときに使用するエンコーダーを取得または設定します。既定のエンコーダーを使用する場合は <see langword="null" /> を設定します。</summary>
      <returns vsli:raw="The JavaScript character encoder used to override the escaping behavior.">JavaScript 文字エンコーディング。</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Indented">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; should format the JSON output, which includes indenting nested JSON tokens, adding new lines, and adding white space between property names and values.">
        <see cref="T:System.Text.Json.Utf8JsonWriter" /> が JSON 出力を書式設定する必要があるかどうかを示す値を、取得または設定します。この書式設定には、入れ子になった JSON トークンのインデント、新規行の追加、プロパティ名と値の間への空白の挿入などが含まれます。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON output is formatted; &lt;see langword=&quot;false&quot; /&gt; if the JSON is written without any extra white space. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />JSON 出力を書式設定するには<see langword="false" />余分な空白を使用せずに書き込む場合は。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.SkipValidation">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; should skip structural validation and allow the user to write invalid JSON.">
        <see cref="T:System.Text.Json.Utf8JsonWriter" /> が構造検証をスキップし、無効な JSON の書き込みをユーザーに許可する必要があるかどうかを示す値を、取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if structural validation is skipped and invalid JSON is allowed; &lt;see langword=&quot;false&quot; /&gt; if an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown on any attempt to write invalid JSON.">
        <see langword="true" />構造検証をスキップして無効な JSON を許可するには無効な JSON の書き込みを試行したときにをスローする場合は<see cref="T:System.InvalidOperationException" />。 <see langword="false" /></returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonAttribute">
      <summary vsli:raw="Provides the base class for serialization attributes.">シリアル化属性のための基本クラスを提供します。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonAttribute.#ctor">
      <summary vsli:raw="Creates a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonAttribute&quot; /&gt;.">
        <see cref="T:System.Text.Json.Serialization.JsonAttribute" /> の新しいインスタンスを作成します。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter">
      <summary vsli:raw="Converts an object or value to or from JSON.">オブジェクトまたは値と JSON の間で変換を行います。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter.CanConvert(System.Type)">
      <summary vsli:raw="When overridden in a derived class, determines whether the converter instance can convert the specified object type.">派生クラスでオーバーライドされた場合、コンバーター インスタンスで指定されたオブジェクト型を変換できるかどうかを判断します。</summary>
      <param name="typeToConvert" vsli:raw="The type of the object to check whether it can be converted by this converter instance.">このコンバーター インスタンスで変換できるかどうかを確認するオブジェクトの型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instance can convert the specified object type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">インスタンスで指定されたオブジェクト型を変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter`1">
      <summary vsli:raw="Converts an object or value to or from JSON.">オブジェクトまたは値と JSON の間で変換を行います。</summary>
      <typeparam name="T" vsli:raw="The type of object or value handled by the converter.">コンバーターによって処理されるオブジェクトまたは値の型。</typeparam>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverter`1&quot; /&gt; instance.">新しい <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> インスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)">
      <summary vsli:raw="Determines whether the specified type can be converted.">指定した型を変換できるかどうかを判断します。</summary>
      <param name="typeToConvert" vsli:raw="The type to compare against.">比較対象の型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type can be converted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">型を変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads and converts the JSON to type &lt;typeparamref name=&quot;T&quot; /&gt;.">JSON を読み取り、<typeparamref name="T" /> 型に変換します。</summary>
      <param name="reader" vsli:raw="The reader.">リーダー。</param>
      <param name="typeToConvert" vsli:raw="The type to convert.">変換する型。</param>
      <param name="options" vsli:raw="An object that specifies serialization options to use.">使用するシリアル化オプションを指定するオブジェクト。</param>
      <returns vsli:raw="The converted value.">変換された値。</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes a specified value as JSON.">指定された値を JSON として書き込みます。</summary>
      <param name="writer" vsli:raw="The writer to write to.">書き込み先のライター。</param>
      <param name="value" vsli:raw="The value to convert to JSON.">JSON に変換する値。</param>
      <param name="options" vsli:raw="An object that specifies serialization options to use.">使用するシリアル化オプションを指定するオブジェクト。</param>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterAttribute">
      <summary vsli:raw="When placed on a property or type, specifies the converter type to use.">プロパティまたは型に配置された場合、使用するコンバーターの型が指定されます。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;.">
        <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt; with the specified converter type.">指定したコンバーターの型を使用して、<see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> の新しいインスタンスを初期化します。</summary>
      <param name="converterType" vsli:raw="The type of the converter.">コンバーターの型。</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType">
      <summary vsli:raw="Gets the type of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if it was created without a type.">
        <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> の型を取得します。型を指定せずに作成されている場合は <see langword="null" /> を取得します。</summary>
      <returns vsli:raw="The type of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if it was created without a type.">の<see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />型。型を指定<see langword="null" />せずに作成された場合は。</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.CreateConverter(System.Type)">
      <summary vsli:raw="When overridden in a derived class and &lt;see cref=&quot;P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, allows the derived class to create a &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverter&quot; /&gt; in order to pass additional state.">派生クラスでオーバーライドされ、<see cref="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType" /> が <see langword="null" /> である場合、追加の状態を渡すために、派生クラスが <see cref="T:System.Text.Json.Serialization.JsonConverter" /> を作成するのを許可します。</summary>
      <param name="typeToConvert" vsli:raw="The type of the converter.">コンバーターの型。</param>
      <returns vsli:raw="The custom converter.">カスタム コンバーター。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterFactory">
      <summary vsli:raw="Supports converting several types by using a factory pattern.">ファクトリ パターンを使用して複数の型の変換をサポートします。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.#ctor">
      <summary vsli:raw="When overridden in a derived class, initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterFactory&quot; /&gt; class.">派生クラスでオーバーライドされた場合、<see cref="T:System.Text.Json.Serialization.JsonConverterFactory" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Creates a converter for a specified type.">指定された型のコンバーターを作成します。</summary>
      <param name="typeToConvert" vsli:raw="The type handled by the converter.">コンバーターによって処理される型。</param>
      <param name="options" vsli:raw="The serialization options to use.">使用するシリアル化オプション。</param>
      <returns vsli:raw="A converter for which &lt;typeparamref name=&quot;T&quot; /&gt; is compatible with &lt;paramref name=&quot;typeToConvert&quot; /&gt;.">
        <typeparamref name="T" /> が <paramref name="typeToConvert" /> と互換性のあるコンバーター。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonExtensionDataAttribute">
      <summary vsli:raw="When placed on a property of type &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;, any properties that do not have a matching member are added to that dictionary during deserialization and written during serialization.">型 <see cref="T:System.Collections.Generic.IDictionary`2" /> のプロパティに置かれているとき、一致するメンバーがないプロパティは逆シリアル化中にそのディクショナリに追加され、シリアル化中に書き込まれます。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonExtensionDataAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonExtensionDataAttribute&quot; /&gt; class.">
        <see cref="T:System.Text.Json.Serialization.JsonExtensionDataAttribute" /> クラスの新しいインスタンスを生成します。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIgnoreAttribute">
      <summary vsli:raw="Prevents a property from being serialized or deserialized.">プロパティのシリアル化または逆シリアル化を防ぎます。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonIgnoreAttribute&quot; /&gt;.">
        <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonPropertyNameAttribute">
      <summary vsli:raw="Specifies the property name that is present in the JSON when serializing and deserializing. This overrides any naming policy specified by &lt;see cref=&quot;T:System.Text.Json.JsonNamingPolicy&quot; /&gt;.">シリアル化または逆シリアル化の際、JSON に存在するプロパティ名を指定します。 これにより、<see cref="T:System.Text.Json.JsonNamingPolicy" /> によって指定された名前付けポリシーがオーバーライドされます。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonPropertyNameAttribute&quot; /&gt; with the specified property name.">指定したプロパティ名を使用し、<see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute" /> の新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="The name of the property.">プロパティの名前。</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonPropertyNameAttribute.Name">
      <summary vsli:raw="Gets the name of the property.">プロパティの名前を取得します。</summary>
      <returns vsli:raw="The name of the property.">プロパティの名前。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonStringEnumConverter">
      <summary vsli:raw="Converts enumeration values to and from strings.">列挙値と文字列の間の変換を行います。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor">
      <summary vsli:raw="Initializes an instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonStringEnumConverter&quot; /&gt; class with the default naming policy that allows integer values.">整数値を許可する既定の名前付けポリシーを使用して、<see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> クラスのインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor(System.Text.Json.JsonNamingPolicy,System.Boolean)">
      <summary vsli:raw="Initializes an instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonStringEnumConverter&quot; /&gt; class with a specified naming policy and a value that indicates whether undefined enumeration values are allowed.">指定された名前付けポリシーと、未定義の列挙値を許可するかどうかを示す値を使用して、<see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> クラスのインスタンスを初期化します。</summary>
      <param name="namingPolicy" vsli:raw="The optional naming policy for writing enum values.">列挙値を書き込むためのオプションの名前付けポリシー。</param>
      <param name="allowIntegerValues" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow undefined enum values; otherwise, &lt;see langword=&quot;false&quot; /&gt;. When &lt;see langword=&quot;true&quot; /&gt;, if an enum value isn't defined, it will output as a number rather than a string.">未定義の列挙値を許可する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 <see langword="true" /> のとき、列挙値が定義されていない場合は、文字列ではなく数値として出力されます。</param>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CanConvert(System.Type)">
      <summary vsli:raw="Determines whether the specified type can be converted to an enum.">指定された型を列挙型に変換できるかどうかを決定します。</summary>
      <param name="typeToConvert" vsli:raw="The type to be checked.">確認する型。</param>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the type can be converted; otherwise, &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt;.">型を変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <param name="typeToConvert" vsli:raw="The type handled by the converter." />
      <param name="options" vsli:raw="The serialization options to use." />
    </member>
    <member name="T:System.Text.Json.Utf8JsonReader">
      <summary vsli:raw="Provides a high-performance API for forward-only, read-only access to UTF-8 encoded JSON text.">UTF-8 でエンコードされた JSON テキストに対する前方参照、読み取り専用のアクセスのための高パフォーマンスの API です。</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only sequence of UTF-8 encoded text and indicates whether the input contains all the text to process.">UTF-8 でエンコードされたテキストの読み取り専用のシーケンスを処理する <see cref="T:System.Text.Json.Utf8JsonReader" /> 構造体の新しいインスタンスを初期化し、処理するすべてのテキストが入力に含まれるかどうかを示します。</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">UTF-8 でエンコードされた、処理対象の JSON テキスト。</param>
      <param name="isFinalBlock" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the input sequence contains the entire data to process; &lt;see langword=&quot;false&quot; /&gt; to indicate that the input span contains partial data with more data to follow.">処理するデータ全体が入力シーケンスに含まれている場合は <see langword="true" />。一部のデータが入力スパンに含まれており、後続のデータがある場合は <see langword="false" />。</param>
      <param name="state" vsli:raw="The reader state. If this is the first call to the constructor, pass the default state; otherwise, pass the value of the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.CurrentState&quot; /&gt; property from the previous instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">リーダーの状態を格納するオブジェクト。 これがコンストラクターの最初の呼び出しである場合は、既定の状態が渡されます。 それ以外の場合は、<see cref="T:System.Text.Json.Utf8JsonReader" /> の前のインスタンスから状態を取り込んで、それを返します。</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only sequence of UTF-8 encoded text using the specified options.">指定したオプションを使用し、UTF-8 でエンコードされたテキストの読み取り専用シーケンスを処理する <see cref="T:System.Text.Json.Utf8JsonReader" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">UTF-8 でエンコードされた、処理対象の JSON テキスト。</param>
      <param name="options" vsli:raw="Options that define customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that differs from the JSON RFC (for example, how to handle comments or maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly; comments within the JSON are invalid, and the maximum depth is 64.">JSON RFC とは異なる <see cref="T:System.Text.Json.Utf8JsonReader" /> のカスタマイズされた動作を定義するオブジェクト (たとえば、コメントの処理方法、読み取り時に許容される最大深度など)。 既定で、<see cref="T:System.Text.Json.Utf8JsonReader" /> は JSON RFC に厳密に従います。JSON 内のコメントは無効で、最大深度は 64 です。</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only span of UTF-8 encoded text and indicates whether the input contains all the text to process.">UTF-8 でエンコードされたテキストの読み取り専用のスパンを処理する <see cref="T:System.Text.Json.Utf8JsonReader" /> 構造体の新しいインスタンスを初期化し、処理するすべてのテキストが入力に含まれるかどうかを示します。</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">UTF-8 でエンコードされた、処理対象の JSON テキスト。</param>
      <param name="isFinalBlock" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the input sequence contains the entire data to process; &lt;see langword=&quot;false&quot; /&gt; to indicate that the input span contains partial data with more data to follow.">処理するデータ全体が入力シーケンスに含まれている場合は <see langword="true" />。一部のデータが入力スパンに含まれており、後続のデータがある場合は <see langword="false" />。</param>
      <param name="state" vsli:raw="The reader state. If this is the first call to the constructor, pass the default state; otherwise, pass the value of the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.CurrentState&quot; /&gt; property from the previous instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">リーダーの状態を格納するオブジェクト。 これがコンストラクターの最初の呼び出しである場合、既定の状態が反映されます。それ以外の場合は、<see cref="T:System.Text.Json.Utf8JsonReader" /> の前のインスタンスから状態が取り込まれ、それが返されます。</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only span of UTF-8 encoded text using the specified options.">指定したオプションを使用し、UTF-8 でエンコードされたテキストの読み取り専用スパンを処理する <see cref="T:System.Text.Json.Utf8JsonReader" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">UTF-8 でエンコードされた、処理対象の JSON テキスト。</param>
      <param name="options" vsli:raw="Options that define customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that differs from the JSON RFC (for example, how to handle comments or maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly; comments within the JSON are invalid, and the maximum depth is 64.">JSON RFC とは異なる <see cref="T:System.Text.Json.Utf8JsonReader" /> のカスタマイズされた動作を定義するオブジェクト (たとえば、コメントの処理方法、読み取り時に許容される最大深度など)。 既定で、<see cref="T:System.Text.Json.Utf8JsonReader" /> は JSON RFC に厳密に従います。JSON 内のコメントは無効で、最大深度は 64 です。</param>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.BytesConsumed">
      <summary vsli:raw="Gets the total number of bytes consumed so far by this instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">
        <see cref="T:System.Text.Json.Utf8JsonReader" /> のこのインスタンスでこれまで消費された合計バイト数を取得します。</summary>
      <returns vsli:raw="The total number of bytes consumed so far.">これまでに使用されたバイト数の合計です。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentDepth">
      <summary vsli:raw="Gets the depth of the current token.">現在のトークンの深度を取得します。</summary>
      <returns vsli:raw="The depth of the current token.">現在のトークンの深さ。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentState">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; state to pass to a &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; constructor with more data.">
        <see cref="T:System.Text.Json.Utf8JsonReader" /> コンストラクターにより多くのデータを渡すのに、<see cref="T:System.Text.Json.Utf8JsonReader" /> の現在の状態を取得します。</summary>
      <returns vsli:raw="The current reader state.">現在のリーダーの状態。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBoolean">
      <summary vsli:raw="Reads the next JSON token value from the source as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">次の JSON トークン値をソースから <see cref="T:System.Boolean" /> として読み取ります。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.True&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.False&quot; /&gt;.">
        <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> が <see cref="F:System.Text.Json.JsonTokenType.True" /> の場合は <see langword="true" />。<see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> が <see cref="F:System.Text.Json.JsonTokenType.False" /> の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a Boolean value (that is, &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.True&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.False&quot; /&gt;).">JSON トークンの値はブール値 (つまり、<see cref="F:System.Text.Json.JsonTokenType.True" /> または <see cref="F:System.Text.Json.JsonTokenType.False" />) ではありません。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetByte">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">現在の JSON トークン値をソースから <see cref="T:System.Byte" /> として解析します。</summary>
      <returns vsli:raw="The value of the UTF-8 encoded token.">UTF-8 でエンコードされたトークンの値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON トークンの値が <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Byte.MinValue&quot;&gt;Byte.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Byte.MaxValue&quot;&gt;Byte.MaxValue&lt;/see&gt;.">JSON トークン値の数値形式が不正です (たとえば、小数点値が含まれているか、指数表記で記述されています)。

または -

JSON トークン値は、<see cref="F:System.Byte.MinValue" /> 未満の数値、または <see cref="F:System.Byte.MaxValue" /> より大きい数値を表しています。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBytesFromBase64">
      <summary vsli:raw="Parses the current JSON token value from the source and decodes the Base64 encoded JSON string as a byte array.">ソースから現在の JSON トークン値を解析し、Base64 でエンコードされた JSON 文字列をバイト配列としてデコードします。</summary>
      <returns vsli:raw="The byte array that represents the current JSON token value.">現在の JSON トークン値を表すバイト配列。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON トークンの型が <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value is not encoded as Base64 text, so it can't be decoded to bytes.&#xA;&#xA;-or-&#xA;&#xA;The value contains invalid or more than two padding characters.&#xA;&#xA;-or-&#xA;&#xA;The value is incomplete. That is, the JSON string length is not a multiple of 4.">値は Base64 テキストとしてエンコードされていないため、バイトにデコードできません。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetComment">
      <summary vsli:raw="Parses the current JSON token value from the source as a comment and transcodes it as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">ソースからの現在の JSON トークン値をコメントとして解析し、<see cref="T:System.String" /> としてトランスコードします。</summary>
      <returns vsli:raw="The comment that represents the current JSON token value.">現在の JSON トークン値を表すコメント。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a comment.">JSON トークンがコメントではありません。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTime">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">次の JSON トークン値をソースから読み取り、それを <see cref="T:System.DateTime" /> に解析します。</summary>
      <returns vsli:raw="The date and time value, if the entire UTF-8 encoded token value can be successfully parsed.">UTF-8 でエンコードされたトークン値全体を正常に解析できる場合は日時。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON トークン値が <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value cannot be read as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.&#xA;        &#xA;-or-&#xA;        &#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value is of an unsupported format.">JSON トークン値はサポートされていない形式です。 ISO 8601 形式のサブセットのみがサポートされます。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTimeOffset">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">次の JSON トークン値をソースから読み取り、それを <see cref="T:System.DateTimeOffset" /> に解析します。</summary>
      <returns vsli:raw="The date and time offset, if the entire UTF-8 encoded token value can be successfully parsed.">UTF-8 でエンコードされたトークン値全体を正常に解析できる場合は日時の値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON トークン値が <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value cannot be read as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.&#xA;&#xA;-or-&#xA;        &#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value is of an unsupported format.">JSON トークン値はサポートされていない形式です。 ISO 8601 形式のサブセットのみがサポートされます。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDecimal">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">次の JSON トークン値をソースから読み取り、それを <see cref="T:System.Decimal" /> に解析します。</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">
        <see cref="T:System.Decimal" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Decimal.MinValue&quot;&gt;Decimal.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">JSON トークン値は、<see cref="F:System.Decimal.MinValue" /> 未満の数値、または <see cref="F:System.Decimal.MaxValue" /> より大きい数値を表しています。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDouble">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">次の JSON トークン値をソースから読み取り、それを <see cref="T:System.Double" /> に解析します。</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">
        <see cref="T:System.Double" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Double.MinValue&quot;&gt;Double.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Double.MaxValue&quot;&gt;Double.MaxValue&lt;/see&gt;.">JSON トークン値は、<see cref="F:System.Double.MinValue" /> 未満の数値、または <see cref="F:System.Double.MaxValue" /> より大きい数値を表しています。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetGuid">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">次の JSON トークン値をソースから読み取り、それを <see cref="T:System.Guid" /> に解析します。</summary>
      <returns vsli:raw="The GUID value, if the entire UTF-8 encoded token value can be successfully parsed.">UTF-8 でエンコードされたトークン値全体を正常に解析できる場合は GUID の値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON トークン値が <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is in an unsupported format for a Guid.&#xA;        &#xA;-or-&#xA;&#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value.">JSON トークン値は、GUID でサポートされていない形式です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt16">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">現在の JSON トークン値をソースから <see cref="T:System.Int16" /> として解析します。</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">
        <see cref="T:System.Int16" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON トークンの値が <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int16.MinValue&quot;&gt;Int16.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int16.MaxValue&quot;&gt;Int16.MaxValue&lt;/see&gt;.">JSON トークン値の数値形式が不正です (たとえば、小数点値が含まれているか、指数表記で記述されています)。
または
JSON トークン値は、<see cref="F:System.Int16.MinValue" /> 未満の数値、または <see cref="F:System.Int16.MaxValue" /> より大きい数値を表しています。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt32">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">次の JSON トークン値をソースから読み取り、それを <see cref="T:System.Int32" /> に解析します。</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <see cref="T:System.Int32" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int32.MinValue&quot;&gt;Int32.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">JSON トークン値の数値形式が正しくありません。 たとえば、それに 10 進数が含まれている場合や、それが科学的表記法で記述されている場合が挙げられます。
または
JSON トークン値は、<see cref="F:System.Int32.MinValue" /> 未満の数値、または <see cref="F:System.Int32.MaxValue" /> より大きい数値を表しています。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt64">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">次の JSON トークン値をソースから読み取り、それを <see cref="T:System.Int64" /> に解析します。</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">
        <see cref="T:System.Int64" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int64.MinValue&quot;&gt;Int64.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">JSON トークン値の数値形式が正しくありません。 たとえば、それに 10 進数が含まれている場合や、それが科学的表記法で記述されている場合が挙げられます。

または -

JSON トークン値は、<see cref="F:System.Int64.MinValue" /> 未満の数値、または <see cref="F:System.Int64.MaxValue" /> より大きい数値を表しています。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSByte">
      <summary vsli:raw="Parses the current JSON token value from the source as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">現在の JSON トークン値をソースから <see cref="T:System.SByte" /> として解析します。</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">
        <see cref="T:System.SByte" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON トークンの値が <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.SByte.MinValue&quot;&gt;SByte.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.SByte.MaxValue&quot;&gt;SByte.MaxValue&lt;/see&gt;.">JSON トークン値の数値形式が不正です (たとえば、小数点値が含まれているか、指数表記で記述されています)。

または -

JSON トークン値は、<see cref="F:System.SByte.MinValue" /> 未満の数値、または <see cref="F:System.SByte.MaxValue" /> より大きい数値を表しています。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSingle">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">次の JSON トークン値をソースから読み取り、それを <see cref="T:System.Single" /> に解析します。</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">
        <see cref="T:System.Single" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Single.MinValue&quot;&gt;Single.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Single.MaxValue&quot;&gt;Single.MaxValue&lt;/see&gt;.">JSON トークン値は、<see cref="F:System.Single.MinValue" /> 未満の数値、または <see cref="F:System.Single.MaxValue" /> より大きい数値を表しています。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetString">
      <summary vsli:raw="Reads the next JSON token value from the source unescaped and transcodes it as a string.">次の JSON トークン値をソースから読み取り、エスケープ解除し、文字列としてトランスコードします。</summary>
      <returns vsli:raw="The token value parsed to a string, or &lt;see langword=&quot;null&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;.">文字列に解析されたトークン値。または、<see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> が <see cref="F:System.Text.Json.JsonTokenType.Null" /> の場合は <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a string (that is, not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;, &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;, or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;).&#xA;&#xA;-or-&#xA;&#xA;The JSON string contains invalid UTF-8 bytes or invalid UTF-16 surrogates.">トークン値は JSON 文字列ではありません (つまり、<see cref="F:System.Text.Json.JsonTokenType.String" /> または <see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> ではない)。
または
JSON 文字列に無効な UTF-8 バイトまたは無効な UTF-16 サロゲートが含まれています。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt16">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">現在の JSON トークン値をソースから <see cref="T:System.UInt16" /> として解析します。</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">
        <see cref="T:System.UInt16" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON トークンの値が <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt16.MinValue&quot;&gt;UInt16.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt16.MaxValue&quot;&gt;UInt16.MaxValue&lt;/see&gt;.">JSON トークン値の数値形式が不正です (たとえば、小数点値が含まれているか、指数表記で記述されています)。
または
JSON トークン値は、<see cref="F:System.UInt16.MinValue" /> 未満の数値、または <see cref="F:System.UInt16.MaxValue" /> より大きい数値を表しています。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt32">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">次の JSON トークン値をソースから読み取り、それを <see cref="T:System.UInt32" /> に解析します。</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">
        <see cref="T:System.UInt32" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt32.MinValue&quot;&gt;UInt32.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt32.MaxValue&quot;&gt;UInt32.MaxValue&lt;/see&gt;.">JSON トークン値の数値形式が正しくありません。 たとえば、それに 10 進数が含まれている場合や、それが科学的表記法で記述されている場合が挙げられます。

または -

JSON トークン値は、<see cref="F:System.UInt32.MinValue" /> 未満の数値、または <see cref="F:System.UInt32.MaxValue" /> より大きい数値を表しています。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt64">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">次の JSON トークン値をソースから読み取り、それを <see cref="T:System.UInt64" /> に解析します。</summary>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">
        <see cref="T:System.UInt64" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt64.MinValue&quot;&gt;UInt64.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt64.MaxValue&quot;&gt;UInt64.MaxValue&lt;/see&gt;.">JSON トークン値の数値形式が正しくありません。 たとえば、それに 10 進数が含まれている場合や、それが科学的表記法で記述されている場合が挙げられます。

または -

JSON トークン値は、<see cref="F:System.UInt64.MinValue" /> 未満の数値、または <see cref="F:System.UInt64.MaxValue" /> より大きい数値を表しています。</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.HasValueSequence">
      <summary vsli:raw="Gets a value that indicates which &lt;c&gt;Value&lt;/c&gt; property to use to get the token value.">トークン値を取得するために使用する <c>Value</c> プロパティを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.ValueSequence&quot; /&gt; should be used to get the token value; &lt;see langword=&quot;false&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.ValueSpan&quot; /&gt; should be used instead.">
        <see langword="true" />トークン<see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" />値を取得するためにを使用する必要がある場合は。<see langword="false" /> 代わりにを使用する<see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" />必要があります。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.IsFinalBlock">
      <summary vsli:raw="Gets a value that indicates whether all the JSON data was provided or there is more data to come.">すべての JSON データが与えられたか、あるいは他にもデータが入ってくるのかを示す <see cref="T:System.Text.Json.Utf8JsonReader" /> のこのインスタンスのモードを取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader was constructed with the input span or sequence containing the entire JSON data to process; &lt;see langword=&quot;false&quot; /&gt; if the reader was constructed with an input span or sequence that may contain partial JSON data with more data to follow.">
        <see langword="true" />処理する JSON データ全体を含む入力範囲またはシーケンスを使用してリーダーが構築された場合は。<see langword="false" />入力範囲またはシーケンスを使用してリーダーが構築され、その後に続くデータを含む部分的な JSON データが含まれている場合。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.Position">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; within the provided UTF-8 encoded input ReadOnlySequence&amp;lt;byte&amp;gt; or a default &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; if the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct was constructed with a ReadOnlySpan&amp;lt;byte&amp;gt;.">指定された UTF-8 でエンコードされた入力 ReadOnlySequence&lt;byte&gt; 内の現在の <see cref="T:System.SequencePosition" /> を取得します。<see cref="T:System.Text.Json.Utf8JsonReader" /> 構造体が ReadOnlySpan&lt;byte&gt; で構築されている場合は既定の <see cref="T:System.SequencePosition" /> を取得します。</summary>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; within the provided UTF-8 encoded input ReadOnlySequence&amp;lt;byte&amp;gt; or a default &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; if the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct was constructed with a ReadOnlySpan&amp;lt;byte&amp;gt;.">指定し<see cref="T:System.SequencePosition" />た utf-8 でエンコードされた入力 ReadOnlySequence&lt;バイト&gt; 、または<see cref="T:System.SequencePosition" /><see cref="T:System.Text.Json.Utf8JsonReader" />構造体が ReadOnlySpan&lt;バイト&gt;を使用して構築された場合は既定値である、現在の。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Read">
      <summary vsli:raw="Reads the next JSON token from the input source.">次の JSON トークンを入力ソースから読み取ります。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the token was read successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">トークンが正常に読み取られた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token according to the JSON RFC is encountered.&#xA;        &#xA;-or-&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">JSON RFC では無効な JSON トークンが検出されました。
または
現在の深度が、最大深度によって設定された再帰の限度を超えています。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Skip">
      <summary vsli:raw="Skips the children of the current JSON token.">現在の JSON トークンの子をスキップします。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The reader was given partial data with more data to follow (that is, &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.IsFinalBlock&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;).">リーダーに与えられたデータは一部であり、この後にデータが続きます (つまり、<see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" /> は <see langword="false" /> です)。</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token was encountered while skipping, according to the JSON RFC.&#xA;&#xA;-or-&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">JSON RFC に基づき、スキップ中、無効な JSON トークンが検出されました。

または -

現在の深度が、最大深度によって設定された再帰の限度を超えています。</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenStartIndex">
      <summary vsli:raw="Gets the index that the last processed JSON token starts at (within the given UTF-8 encoded input text), skipping any white space.">最後に処理された JSON トークンの (UTF-8 でエンコードされた指定の入力テキスト内の) 開始位置となるインデックスを取得します。空白はスキップされます。</summary>
      <returns vsli:raw="The starting index of the last processed JSON token within the given UTF-8 encoded input text.">指定した UTF-8 でエンコードされた入力テキスト内で最後に処理された JSON トークンの開始インデックス。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenType">
      <summary vsli:raw="Gets the type of the last processed JSON token in the UTF-8 encoded JSON text.">UTF-8 でエンコードされた JSON テキスト内で最後に処理された JSON トークンの種類を取得します。</summary>
      <returns vsli:raw="The type of the last processed JSON token.">最後に処理された JSON トークンの型。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetByte(System.Byte@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Byte&quot; /&gt; and returns a value that indicates whether the operation succeeded.">ソースから現在の JSON トークン値を <see cref="T:System.Byte" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value" vsli:raw="When this method returns, contains the byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">このメソッドから戻るときに、解析された値が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Byte&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">UTF-8 でエンコードされたトークン値全体を <see cref="T:System.Byte" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetBytesFromBase64(System.Byte[]@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source and decodes the Base64 encoded JSON string as a byte array and returns a value that indicates whether the operation succeeded.">ソースから現在の JSON トークン値を解析し、Base64 でエンコードされた JSON 文字列をバイト配列としてデコードし、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value" vsli:raw="When this method returns, contains the decoded binary representation of the Base64 text.">このメソッドが返される場合、Base64 テキストの (デコードされた) バイナリ表現が含まれます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire token value is encoded as valid Base64 text and can be successfully decoded to bytes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">トークン値全体が有効な Base64 テキストとしてエンコードされ、正常にバイトにデコードできる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON トークンが <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTime(System.DateTime@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; and returns a value that indicates whether the operation succeeded.">ソースから現在の JSON トークン値を <see cref="T:System.DateTime" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTime.MinValue&quot; /&gt; if the conversion failed.">このメソッドから戻るときに、解析された値が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">UTF-8 でエンコードされたトークン値全体を <see cref="T:System.DateTime" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON トークン値が <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; and returns a value that indicates whether the operation succeeded.">ソースから現在の JSON トークン値を <see cref="T:System.DateTimeOffset" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTimeOffset.MinValue&quot; /&gt; if the conversion failed.">このメソッドから戻るときに、解析された値が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">UTF-8 でエンコードされたトークン値全体を <see cref="T:System.DateTimeOffset" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON トークン値が <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; and returns a value that indicates whether the operation succeeded.">ソースから現在の JSON トークン値を <see cref="T:System.Decimal" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value" vsli:raw="When this method returns, contains the decimal equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">このメソッドから戻るときに、解析された値が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">UTF-8 でエンコードされたトークン値全体を <see cref="T:System.Decimal" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Double&quot; /&gt; and returns a value that indicates whether the operation succeeded.">ソースから現在の JSON トークン値を <see cref="T:System.Double" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value" vsli:raw="When this method returns, contains a double-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">このメソッドから戻るときに、解析された値が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Double&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">UTF-8 でエンコードされたトークン値全体を <see cref="T:System.Double" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetGuid(System.Guid@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Guid&quot; /&gt; and returns a value that indicates whether the operation succeeded.">ソースから現在の JSON トークン値を <see cref="T:System.Guid" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value" vsli:raw="When this method returns, contains the GUID equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.Guid.Empty&quot; /&gt; if the conversion failed.">このメソッドから戻るときに、解析された値が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">UTF-8 でエンコードされたトークン値全体を <see cref="T:System.Guid" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">JSON トークン値が <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt16(System.Int16@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int16&quot; /&gt; and returns a value that indicates whether the operation succeeded.">ソースから現在の JSON トークン値を <see cref="T:System.Int16" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value" vsli:raw="When this method returns, contains the 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">このメソッドから戻るときに、解析された値が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Int16&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">UTF-8 でエンコードされたトークン値全体を <see cref="T:System.Int16" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int32&quot; /&gt; and returns a value that indicates whether the operation succeeded.">ソースから現在の JSON トークン値を <see cref="T:System.Int32" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value" vsli:raw="When this method returns, contains the 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">このメソッドから戻るときに、解析された値が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">UTF-8 でエンコードされたトークン値全体を <see cref="T:System.Int32" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int64&quot; /&gt; and returns a value that indicates whether the operation succeeded.">ソースから現在の JSON トークン値を <see cref="T:System.Int64" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value" vsli:raw="When this method returns, contains the 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">このメソッドから戻るときに、解析された値が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">UTF-8 でエンコードされたトークン値全体を <see cref="T:System.Int64" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSByte(System.SByte@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.SByte&quot; /&gt; and returns a value that indicates whether the operation succeeded.">ソースから現在の JSON トークン値を <see cref="T:System.SByte" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value" vsli:raw="When this method returns, contains the signed byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">このメソッドから戻るときに、解析された値が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.SByte&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">UTF-8 でエンコードされたトークン値全体を <see cref="T:System.SByte" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Single&quot; /&gt; and returns a value that indicates whether the operation succeeded.">ソースから現在の JSON トークン値を <see cref="T:System.Single" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value" vsli:raw="When this method returns, contains the single-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">このメソッドから戻るときに、解析された値が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Single&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">UTF-8 でエンコードされたトークン値全体を <see cref="T:System.Single" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt16(System.UInt16@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; and returns a value that indicates whether the operation succeeded.">ソースから現在の JSON トークン値を <see cref="T:System.UInt16" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value" vsli:raw="When this method returns, contains the unsigned 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">このメソッドから戻るときに、解析された値が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">UTF-8 でエンコードされたトークン値全体を <see cref="T:System.UInt16" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; and returns a value that indicates whether the operation succeeded.">ソースから現在の JSON トークン値を <see cref="T:System.UInt32" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">このメソッドから戻るときに、解析された値が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">UTF-8 でエンコードされたトークン値全体を <see cref="T:System.UInt32" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; and returns a value that indicates whether the operation succeeded.">ソースから現在の JSON トークン値を <see cref="T:System.UInt64" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">このメソッドから戻るときに、解析された値が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">UTF-8 でエンコードされたトークン値全体を <see cref="T:System.UInt64" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TrySkip">
      <summary vsli:raw="Tries to skip the children of the current JSON token.">現在の JSON トークンの子のスキップを試行します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there was enough data for the children to be skipped successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">子を正常にスキップできるだけの十分なデータがあった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token was encountered while skipping, according to the JSON RFC.&#xA;          &#xA;-or -&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">JSON RFC に基づき、スキップ中、無効な JSON トークンが検出されました。
または
現在の深度が、最大深度によって設定された再帰の限度を超えています。</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSequence">
      <summary vsli:raw="Gets the raw value of the last processed token as a ReadOnlySequence&amp;lt;byte&amp;gt; slice of the input payload, only if the token is contained within multiple segments.">最後に処理されたトークンの値を、入力ペイロードの <see cref="T:System.ReadOnlySpan`1" /> スライスとして取得します。 JSON が <see cref="T:System.Buffers.ReadOnlySequence`1" /> 内に指定されていて、トークン値を表すスライスが単一のセグメント内に収まる場合、スパンとして表現できる <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> にはスライスされた値が格納されます。 それ以外の場合、<see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> にはトークン値が格納されます。</summary>
      <returns vsli:raw="A byte read-only sequence.">バイト読み取り専用シーケンス。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSpan">
      <summary vsli:raw="Gets the raw value of the last processed token as a ReadOnlySpan&amp;lt;byte&amp;gt; slice of the input payload, if the token fits in a single segment or if the reader was constructed with a JSON payload contained in a ReadOnlySpan&amp;lt;byte&amp;gt;.">最後に処理されたトークンの値を、入力ペイロードの ReadOnlySpan&lt;byte&gt; スライスとして取得します。 JSON が ReadOnlySequence&lt;byte&gt; 内に指定されていて、トークン値を表すスライスが単一のセグメント内に収まる場合、<see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> にはスライスされた値が格納されます。それをスパンとして表現できるからです。 それ以外の場合、<see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> にはトークン値が格納されます。</summary>
      <returns vsli:raw="A read-only span of bytes.">バイト型の読み取り専用スパン。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the UTF-8 encoded text in a read-only byte span to the unescaped JSON token value in the source and returns a value that indicates whether they match.">読み取り専用バイト スパン内の UTF-8 でエンコードされたテキストをソース内のエスケープされていない JSON トークン値と比較し、一致するかどうかを示す値を返します。</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">比較対象の UTF-8 でエンコードされたテキスト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the UTF-8 encoded lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">ソースの JSON トークン値が UTF-8 でエンコードされた検索テキストと一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">文字列ではない JSON トークン (つまり、<see cref="F:System.Text.Json.JsonTokenType.String" /> または <see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> ではない)。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares the text in a read-only character span to the unescaped JSON token value in the source and returns a value that indicates whether they match.">読み取り専用文字スパン内の UTF-8 でエンコードされたテキストをソース内のエスケープされていない JSON トークン値と比較し、一致するかどうかを示す値を返します。</summary>
      <param name="text" vsli:raw="The text to compare against.">比較対象の UTF-8 でエンコードされたテキスト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">ソースの JSON トークン値が UTF-8 でエンコードされた検索テキストと一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">文字列ではない JSON トークン (つまり、<see cref="F:System.Text.Json.JsonTokenType.String" /> または <see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> ではない)。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.String)">
      <summary vsli:raw="Compares the string text to the unescaped JSON token value in the source and returns a value that indicates whether they match.">文字スパン内のテキストをソース内のエスケープされていない JSON トークン値と比較し、一致するかどうかを示す値を返します。</summary>
      <param name="text" vsli:raw="The text to compare against.">比較対象のテキスト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">ソースの JSON トークン値が参照テキストと一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">文字列ではない JSON トークン (つまり、<see cref="F:System.Text.Json.JsonTokenType.String" /> または <see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> ではない)。</exception>
    </member>
    <member name="T:System.Text.Json.Utf8JsonWriter">
      <summary vsli:raw="Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.">UTF-8 でエンコードされた JSON テキストの前方参照、非キャッシュの書き込みのために、高パフォーマンスの API を提供します。</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; class using the specified &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt; to write the output to and customization options.">指定された <see langword="System.Buffers.IBufferWriter&lt;System.Byte&gt;" /> を使用して、新しい <see cref="T:System.Text.Json.Utf8JsonWriter" /> インスタンスを構築します。</summary>
      <param name="bufferWriter" vsli:raw="The destination for writing JSON text.">JSON テキストの書き込み先。</param>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;. By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.">
        <see cref="T:System.Text.Json.Utf8JsonWriter" /> のカスタマイズされた動作を定義します。既定では、最小化された JSON (余分な空白なし) を書き込み、書き込まれる JSON が構造上有効であることを JSON RFC に従って検証します。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;bufferWriter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="bufferWriter" /> は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; class using the specified stream to write the output to and customization options.">指定された <paramref name="utf8Json" /> を使用して、新しい <see cref="T:System.Text.Json.Utf8JsonWriter" /> インスタンスを構築します。</summary>
      <param name="utf8Json" vsli:raw="The destination for writing JSON text.">JSON テキストの書き込み先。</param>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;. By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.">
        <see cref="T:System.Text.Json.Utf8JsonWriter" /> のカスタマイズされた動作を定義します。既定では、最小化された JSON (余分な空白なし) を書き込み、書き込まれる JSON が構造上有効であることを JSON RFC に従って検証します。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesCommitted">
      <summary vsli:raw="Gets the total number of bytes committed to the output by the current instance so far.">現在のインスタンスによってこれまで出力にコミットされた合計バイト数を取得します。</summary>
      <returns vsli:raw="The total number of bytes committed to the output by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; so far.">これまでにによって<see cref="T:System.Text.Json.Utf8JsonWriter" />出力にコミットされたバイトの合計数。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesPending">
      <summary vsli:raw="Gets the number of bytes written by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; so far that have not yet been flushed to the output and committed.">これまでに <see cref="T:System.Text.Json.Utf8JsonWriter" /> によって書き込まれたバイト数のうち、まだ出力にフラッシュされてコミットされていないバイト数を取得します。</summary>
      <returns vsli:raw="The number of bytes written so far by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; that have not yet been flushed to the output and committed.">が<see cref="T:System.Text.Json.Utf8JsonWriter" />これまでに書き込まれたバイト数。出力にフラッシュされず、コミットされていません。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.CurrentDepth">
      <summary vsli:raw="Gets the depth of the current token.">現在のトークンの深度を取得します。</summary>
      <returns vsli:raw="The depth of the current token.">現在のトークンの深さ。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Dispose">
      <summary vsli:raw="Commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.">まだフラッシュされていない残りの JSON テキストがあればそれをコミットし、現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.DisposeAsync">
      <summary vsli:raw="Asynchronously commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.">まだフラッシュされていない残りの JSON テキストがあればそれを非同期的にコミットし、現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
      <returns vsli:raw="A task representing the asynchronous dispose operation.">非同期の破棄操作を表すタスク。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Flush">
      <summary vsli:raw="Commits the JSON text written so far, which makes it visible to the output destination.">これまでに書き込まれた JSON テキストをコミットします。これにより出力先で表示できるようになります。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">このインスタンスは破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously commits the JSON text written so far, which makes it visible to the output destination.">これまでに書き込まれた JSON テキストを非同期的にコミットします。これにより出力先で表示できるようになります。</summary>
      <param name="cancellationToken" vsli:raw="The token to monitor for cancellation requests. The default value is &lt;see cref=&quot;P:System.Threading.CancellationToken.None&quot; /&gt;.">キャンセル要求を監視するためのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns vsli:raw="A task representing the asynchronous flush operation.">非同期のフラッシュ操作を表すタスク。</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">このインスタンスは破棄されています。</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.Options">
      <summary vsli:raw="Gets the custom behavior when writing JSON using this instance, which indicates whether to format the output while writing, whether to skip structural JSON validation, and which characters to escape.">このインスタンスを使用して JSON を書き込む際のカスタム動作を取得します。これによって、書き込み中に出力をフォーマットするかどうか、および JSON の構造検証をスキップするかどうかが示されます。</summary>
      <returns vsli:raw="The custom behavior of this instance of the writer for formatting, validating, and escaping.">このインスタンスの書式設定および検証の動作を定義するオブジェクト。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused.">このインスタンスの内部状態をリセットして、それを再利用できるようにします。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">このインスタンスは破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused with a new instance of &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt;.">このインスタンスの内部状態をリセットして、<see cref="T:System.Buffers.IBufferWriter`1" /> の新しいインスタンスで再利用できるようにします。</summary>
      <param name="bufferWriter" vsli:raw="The destination for writing JSON text.">JSON テキストの書き込み先。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;bufferWriter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="bufferWriter" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">このインスタンスは破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused with a new instance of &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt;.">このインスタンスの内部状態をリセットして、<see cref="T:System.IO.Stream" /> の新しいインスタンスで再利用できるようにします。</summary>
      <param name="utf8Json" vsli:raw="The destination for writing JSON text.">JSON テキストの書き込み先。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">このインスタンスは破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、プロパティ名と生バイト値 (Base64 でエンコードされた JSON 文字列) を書き込みます。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded name of the property to write.">書き込むプロパティの UTF-8 でエンコードされた名前。</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Base64 でエンコードされたテキストとして書き込むバイナリ データ。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、プロパティ名と生バイト値 (Base64 でエンコードされた JSON 文字列) を書き込みます。</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトのプロパティ名。</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Base64 でエンコードされたテキストとして書き込むバイナリ データ。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、プロパティ名と生バイト値 (Base64 でエンコードされた JSON 文字列) を書き込みます。</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトのプロパティ名。</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Base64 でエンコードされたテキストとして書き込むバイナリ データ。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the pre-encoded property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と生バイト値 (Base64 でエンコードされた JSON 文字列) を書き込みます。</summary>
      <param name="propertyName" vsli:raw="The JSON-encoded name of the property to write.">書き込むプロパティの JSON でエンコードされた名前。</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Base64 でエンコードされたテキストとして書き込むバイナリ データ。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the raw bytes value as a Base64 encoded JSON string as an element of a JSON array.">JSON 配列の要素として、Base64 でエンコードされた JSON 文字列として生バイト値を書き込みます。</summary>
      <param name="bytes" vsli:raw="The binary data to be written as a Base64 encoded JSON string element of a JSON array.">JSON 配列の Base64 でエンコードされた JSON 文字列要素として書き込まれるバイナリ データ。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">指定した値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.Boolean" /> 値 (JSON リテラルの true または false として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">名前/値ペアの一部として、JSON リテラル true または false として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.Boolean" /> 値 (JSON リテラルの true または false として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">名前/値ペアの一部として、JSON リテラル true または false として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">文字列として指定されたプロパティ名と、<see cref="T:System.Boolean" /> 値 (JSON リテラルの true または false として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">名前/値ペアの一部として、JSON リテラル true または false として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.Boolean" /> 値 (JSON リテラル true または false) を書き込みます。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">名前/値ペアの一部として、JSON リテラル true または false として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as an element of a JSON array.">JSON 配列の要素として、<see cref="T:System.Boolean" /> 値 (JSON リテラル true または false として) を書き込みます。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as an element of a JSON array.">JSON 配列の一部として、JSON リテラル true または false として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 text value as a JSON comment.">UTF-8 テキスト値を JSON コメントとして書き込みます。</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">/../ 内に JSON コメントとして書き込まれる、UTF-8 でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;utf8Value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">指定した値が大きすぎます。

または -

<paramref name="utf8Value" /> にコメント区切り記号 (つまり */) が含まれています。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 text value as a JSON comment.">UTF-16 テキスト値を JSON コメントとして書き込みます。</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">/../ 内に UTF-8 でトランスコードされた JSON コメントとして書き込まれる、UTF-16 でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">指定した値は、過大な OR です。
または
<paramref name="value" /> にコメント区切り記号 (つまり */) が含まれています。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)">
      <summary vsli:raw="Writes a string text value as a JSON comment.">文字列テキスト値を JSON コメントとして書き込みます。</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">/../ 内に UTF-8 でトランスコードされた JSON コメントとして書き込まれる、UTF-16 でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">指定した値が大きすぎます。

または -

<paramref name="value" /> にコメント区切り記号 (つまり */) が含まれています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;value&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndArray">
      <summary vsli:raw="Writes the end of a JSON array.">JSON 配列の終了を書き込みます。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndObject">
      <summary vsli:raw="Writes the end of a JSON object.">JSON オブジェクトの終了を書き込みます。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and the JSON literal null as part of a name/value pair of a JSON object.">バイト型の読み取り専用スパンとして指定されたプロパティ名と、JSON リテラルの null を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a property name specified as a read-only character span and the JSON literal null as part of a name/value pair of a JSON object.">読み取り専用の文字範囲として指定されたプロパティ名と、JSON リテラルの null を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)">
      <summary vsli:raw="Writes a property name specified as a string and the JSON literal null as part of a name/value pair of a JSON object.">文字列として指定されたプロパティ名と、JSON リテラルの null を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name and the JSON literal null as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と JSON リテラル null を書き込みます。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNullValue">
      <summary vsli:raw="Writes the JSON literal null as an element of a JSON array.">JSON 配列の要素として、JSON リテラル null を書き込みます。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.Decimal" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.Double" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.Int32" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.Int64" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.Single" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.UInt32" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.UInt64" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.Decimal" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.Double" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.Int32" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.Int64" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.Single" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.UInt32" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.UInt64" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">文字列として指定されたプロパティ名と、<see cref="T:System.Decimal" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">文字列として指定されたプロパティ名と、<see cref="T:System.Double" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)">
      <summary vsli:raw="Writes a property name specified as a string and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">文字列として指定されたプロパティ名と、<see cref="T:System.Int32" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)">
      <summary vsli:raw="Writes a property name specified as a string and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">文字列として指定されたプロパティ名と、<see cref="T:System.Int64" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">文字列として指定されたプロパティ名と、<see cref="T:System.Single" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">文字列として指定されたプロパティ名と、<see cref="T:System.UInt32" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">文字列として指定されたプロパティ名と、<see cref="T:System.UInt64" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.Decimal" /> 値 (JSON 番号) を書き込みます。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.Double" /> 値 (JSON 番号) を書き込みます。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.Int32" /> 値 (JSON 番号) を書き込みます。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.Int64" /> 値 (JSON 番号) を書き込みます。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.Single" /> 値 (JSON 番号) を書き込みます。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.UInt32" /> 値 (JSON 番号) を書き込みます。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.UInt64" /> 値 (JSON 番号) を書き込みます。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as an element of a JSON array.">JSON 配列の要素として、<see cref="T:System.Decimal" /> 値 (JSON 数値として) を書き込みます。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">JSON 配列の一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as an element of a JSON array.">JSON 配列の要素として、<see cref="T:System.Double" /> 値 (JSON 数値として) を書き込みます。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">JSON 配列の一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as an element of a JSON array.">JSON 配列の要素として、<see cref="T:System.Int32" /> 値 (JSON 数値として) を書き込みます。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">JSON 配列の一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as an element of a JSON array.">JSON 配列の要素として、<see cref="T:System.Int64" /> 値 (JSON 数値として) を書き込みます。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">JSON 配列の一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as an element of a JSON array.">JSON 配列の要素として、<see cref="T:System.Single" /> 値 (JSON 数値として) を書き込みます。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">JSON 配列の一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as an element of a JSON array.">JSON 配列の要素として、<see cref="T:System.UInt32" /> 値 (JSON 数値として) を書き込みます。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">JSON 配列の一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as an element of a JSON array.">JSON 配列の要素として、<see cref="T:System.UInt64" /> 値 (JSON 数値として) を書き込みます。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">JSON 配列の一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the UTF-8 property name (as a JSON string) as the first part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの最初の部分として、UTF-8 プロパティ名 (JSON 文字列) を書き込みます。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの最初の部分として、プロパティ名 (JSON 文字列) を書き込みます。</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトのプロパティ名。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)">
      <summary vsli:raw="Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの最初の部分として、プロパティ名 (JSON 文字列) を書き込みます。</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトのプロパティ名。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name (as a JSON string) as the first part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの最初の部分として、事前にエンコードされたプロパティ名 (JSON 文字列) を書き込みます。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray">
      <summary vsli:raw="Writes the beginning of a JSON array.">JSON 配列の先頭を書き込みます。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;&#xA;Validation is enabled, and this write operation would produce invalid JSON.">JSON の深度が、最大深度 1000 を超えました。

または -

検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a read-only span of bytes as the key.">バイト型の読み取り専用スパンとして指定されたプロパティ名を含む JSON 配列の先頭をキーとして書き込みます。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON array to be written.">書き込み対象の JSON 配列の UTF-8 でエンコードされたプロパティ名。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">JSON の深度が、最大深度 1000 を超えました。
または
検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a read-only character span as the key.">読み取り専用の文字範囲として指定されたプロパティ名を含む JSON 配列の先頭をキーとして書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON 配列の UTF-16 でエンコードされたプロパティ名。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">JSON の深度が、最大深度 1000 を超えました。
または
検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a string as the key.">文字列として指定されたプロパティ名を含む JSON 配列の先頭をキーとして書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON 配列の UTF-16 でエンコードされたプロパティ名。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">JSON の深度が、最大深度 1000 を超えました。
または
検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the beginning of a JSON array with a pre-encoded property name as the key.">JSON 配列の先頭を、事前にエンコードされたプロパティ名をキーとして書き込みます。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON array to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON 配列の JSON でエンコードされたプロパティ名。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON has exceeded the maximum depth of 1,000.&#xA;    &#xA;-or-&#xA;&#xA;Validation is enabled, and this method would result in writing invalid JSON.">JSON の深度が、最大深度 1000 を超えています。
または
検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject">
      <summary vsli:raw="Writes the beginning of a JSON object.">JSON オブジェクトの先頭を書き込みます。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;&#xA;Validation is enabled, and the operation would result in writing invalid JSON.">JSON の深度が、最大深度 1000 を超えました。

または -

検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a read-only span of bytes as the key.">バイト型の読み取り専用スパンとして指定されたプロパティ名を含む JSON オブジェクトの先頭をキーとして書き込みます。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">JSON の深度が、最大深度 1000 を超えました。 

または -

検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a read-only character span as the key.">読み取り専用の文字範囲として指定されたプロパティ名を含む JSON オブジェクトの先頭をキーとして書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">JSON の深度が、最大深度 1000 を超えました。 

または -

検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a string as the key.">文字列として指定されたプロパティ名を含む JSON オブジェクトの先頭をキーとして書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">JSON の深度が、最大深度 1000 を超えました。 

または -

検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the beginning of a JSON object with a pre-encoded property name as the key.">JSON オブジェクトの先頭を、事前にエンコードされたプロパティ名をキーとして書き込みます。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON has exceeded the maximum depth of 1,000.&#xA;          &#xA;-or-&#xA;&#xA;Validation is enabled, and this method would result in writing invalid JSON.">JSON の深度が、最大深度 1000 を超えています。
または
検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、UTF-8 プロパティ名と <see cref="T:System.DateTime" /> 値 (JSON 文字列として) を書き込みます。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、UTF-8 プロパティ名と <see cref="T:System.DateTimeOffset" /> 値 (JSON 文字列として) を書き込みます。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、UTF-8 プロパティ名と <see cref="T:System.Guid" /> 値 (JSON 文字列として) を書き込みます。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、UTF-8 プロパティ名と UTF-8 テキスト値 (JSON 文字列として) を書き込みます。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">名前/値ペアの一部として、JSON 文字列として書き込まれる UTF-8 でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定されたプロパティ名または値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、UTF-8 プロパティ名と UTF-16 テキスト値 (JSON 文字列として) を書き込みます。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる UTF-16 でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定されたプロパティ名または値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)">
      <summary vsli:raw="Writes a UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、UTF-8 プロパティ名と文字列テキスト値 (JSON 文字列として) を書き込みます。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる UTF-16 でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定されたプロパティ名または値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the UTF-8 property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、UTF-8 プロパティ名と事前にエンコードされた値 (JSON 文字列) を書き込みます。</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる JSON でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.DateTime" /> 値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.DateTimeOffset" /> 値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.Guid" /> 値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、UTF-16 プロパティ名と UTF-8 テキスト値 (JSON 文字列として) を書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">名前/値ペアの一部として、JSON 文字列として書き込まれる UTF-8 でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定されたプロパティ名または値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、UTF-16 プロパティ名と UTF-16 テキスト値 (JSON 文字列として) を書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる UTF-16 でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定されたプロパティ名または値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)">
      <summary vsli:raw="Writes a UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、UTF-16 プロパティ名と文字列テキスト値 (JSON 文字列として) を書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる UTF-16 でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定されたプロパティ名または値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、プロパティ名と事前にエンコードされた値 (JSON 文字列) を書き込みます。</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトのプロパティ名。</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる JSON でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">文字列として指定されたプロパティ名と、<see cref="T:System.DateTime" /> 値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">文字列として指定されたプロパティ名と、<see cref="T:System.DateTimeOffset" /> 値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">文字列として指定されたプロパティ名と、<see cref="T:System.Guid" /> 値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a property name specified as a string and a UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">文字列として指定されたプロパティ名と、UTF-8 テキスト値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">名前/値ペアの一部として、JSON 文字列として書き込まれる UTF-8 でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定されたプロパティ名または値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a property name specified as a string and a UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">文字列として指定されたプロパティ名と、UTF-16 テキスト値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる UTF-16 でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定されたプロパティ名または値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)">
      <summary vsli:raw="Writes a property name specified as a string and a string text value (as a JSON string) as part of a name/value pair of a JSON object.">文字列として指定されたプロパティ名と、文字列テキスト値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる UTF-16 でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">指定されたプロパティ名または値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、プロパティ名と事前にエンコードされた値 (JSON 文字列) を書き込みます。</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトのプロパティ名。</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる JSON でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.DateTime" /> 値 (JSON 文字列) を書き込みます。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.DateTimeOffset" /> 値 (JSON 文字列) を書き込みます。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.Guid" /> 値 (JSON 文字列) を書き込みます。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the pre-encoded property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と UTF-8 テキスト値 (JSON 文字列) を書き込みます。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">名前/値ペアの一部として、JSON 文字列として書き込まれる UTF-8 でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">指定した値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the pre-encoded property name and text value (as a JSON string) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名とテキスト値 (JSON 文字列) を書き込みます。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">指定した値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)">
      <summary vsli:raw="Writes the pre-encoded property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と文字列テキスト値 (JSON 文字列) を書き込みます。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">指定した値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と事前にエンコードされた値 (JSON 文字列) を書き込みます。</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる JSON でエンコードされた値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as an element of a JSON array.">JSON 配列の要素として、<see cref="T:System.DateTime" /> 値 (JSON 文字列として) を書き込みます。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">JSON 配列の一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as an element of a JSON array.">JSON 配列の要素として、<see cref="T:System.DateTimeOffset" /> 値 (JSON 文字列として) を書き込みます。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">JSON 配列の一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as an element of a JSON array.">JSON 配列の要素として、<see cref="T:System.Guid" /> 値 (JSON 文字列として) を書き込みます。</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">JSON 配列の一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 text value (as a JSON string) as an element of a JSON array.">JSON 配列の要素として、UTF-8 テキスト値 (JSON 文字列) を書き込みます。</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string element of a JSON array.">JSON 配列の JSON 文字列要素として書き込まれる UTF-8 でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">指定した値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 text value (as a JSON string) as an element of a JSON array.">JSON 配列の要素として、UTF-16 テキスト値 (JSON 文字列) を書き込みます。</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">JSON 配列の UTF-8 でトランスコードされた JSON 文字列要素として書き込まれる UTF-16 でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">指定した値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)">
      <summary vsli:raw="Writes a string text value (as a JSON string) as an element of a JSON array.">JSON 配列の要素として、文字列テキスト値 (JSON 文字列) を書き込みます。</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">JSON 配列の UTF-8 でトランスコードされた JSON 文字列要素として書き込まれる UTF-16 でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">指定した値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded text value (as a JSON string) as an element of a JSON array.">JSON 配列の要素として、事前にエンコードされたテキスト値 (JSON 文字列) を書き込みます。</summary>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">JSON 配列の UTF-8 でトランスコードされた JSON 文字列要素として書き込まれる JSON でエンコードされた値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
  </members>
</doc>
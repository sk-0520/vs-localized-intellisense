<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Xml.ReaderWriter</name>
  </assembly>
  <members>
    <member name="T:System.Xml.ConformanceLevel">
      <summary vsli:raw="Specifies the amount of input or output checking that &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; and &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; objects perform.">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトおよび <see cref="T:System.Xml.XmlWriter" /> オブジェクトで実行する、入力チェックまたは出力チェックの量を指定します。</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Auto">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; or &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object automatically detects whether document-level or fragment-level checking should be performed, and does the appropriate checking. If you're wrapping another &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; or &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object, the outer object doesn't do any additional conformance checking. Conformance checking is left up to the underlying object.  &#xA;  &#xA; See the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.ConformanceLevel&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.ConformanceLevel&quot; /&gt; properties for details on how the compliance level is determined.">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトまたは <see cref="T:System.Xml.XmlWriter" /> オブジェクトは、ドキュメント レベルのチェックまたはフラグメント レベルのチェックを実行する必要があるかどうかを自動的に検出し、適切なチェックを実行します。 別の <see cref="T:System.Xml.XmlReader" /> オブジェクトまたは <see cref="T:System.Xml.XmlWriter" /> オブジェクトをラップしている場合、外側のオブジェクトは追加の準拠のチェックを実行しません。 準拠のチェックは、基になるオブジェクトだけで実行されます。  
準拠レベルの決定方法の詳細については、<see cref="P:System.Xml.XmlReaderSettings.ConformanceLevel" /> プロパティと <see cref="P:System.Xml.XmlWriterSettings.ConformanceLevel" /> プロパティを参照してください。</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Document">
      <summary vsli:raw="The XML data complies with the rules for a well-formed XML 1.0 document, as defined by the W3C. This level of checking ensures that the stream being read or written can be consumed by any processor as an XML 1.0 document.">XML データは、W3C によって定義された整形式の XML 1.0 ドキュメントのルールに準拠します。 このレベルのチェックにより、どのプロセッサでも、読み書きされるストリームを XML 1.0 ドキュメントとして使用できることが保証されます。</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Fragment">
      <summary vsli:raw="The XML data is a well-formed XML fragment, as defined by the W3C.  This conformance level represents an XML document that might not have a root element but is otherwise well-formed. This level of checking ensures that the stream being read or written can be consumed by any processor as an XML 1.0 external parsed entity].">XML データは、W3C によって定義されている、整形式の XML フラグメントです。  この準拠レベルは、ルート要素がない可能性があっても、それ以外は整形式の XML ドキュメントを表します。 このレベルのチェックにより、どのプロセッサでも、読み書きされるストリームを XML 1.0 の外部解析対象エンティティとして使用できることが保証されます。</summary>
    </member>
    <member name="T:System.Xml.DtdProcessing">
      <summary vsli:raw="Specifies the options for processing DTDs. The &lt;see cref=&quot;T:System.Xml.DtdProcessing&quot; /&gt; enumeration is used by the &lt;see cref=&quot;T:System.Xml.XmlReaderSettings&quot; /&gt; class.">DTD を処理するためのオプションを指定します。 <see cref="T:System.Xml.DtdProcessing" /> 列挙体は <see cref="T:System.Xml.XmlReaderSettings" /> クラスによって使用されます。</summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Ignore">
      <summary vsli:raw="Causes the DOCTYPE element to be ignored. No DTD processing occurs, and the DTD/DOCTYPE is lost on output.">DOCTYPE 要素は無視されます。 DTD 処理は発生せず、DTD/DOCTYPE は出力時に失われます。</summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Parse">
      <summary vsli:raw="Used for parsing DTDs.">DTD の解析に使用されます。</summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Prohibit">
      <summary vsli:raw="Specifies that when a DTD is encountered, an &lt;see cref=&quot;T:System.Xml.XmlException&quot; /&gt; is thrown with a message that states that DTDs are prohibited. This is the default behavior.">DTD を検出したときに、DTD が禁止されていることを示すメッセージと共に <see cref="T:System.Xml.XmlException" /> をスローします。 これが既定の動作です。</summary>
    </member>
    <member name="T:System.Xml.EntityHandling">
      <summary vsli:raw="Specifies how the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; or &lt;see cref=&quot;T:System.Xml.XmlValidatingReader&quot; /&gt; handle entities.">
        <see cref="T:System.Xml.XmlTextReader" /> または <see cref="T:System.Xml.XmlValidatingReader" /> でエンティティがどのように処理されるかを指定します。</summary>
    </member>
    <member name="F:System.Xml.EntityHandling.ExpandCharEntities">
      <summary vsli:raw="Expands character entities and returns general entities as &lt;see cref=&quot;F:System.Xml.XmlNodeType.EntityReference&quot; /&gt; nodes. &#xA;        &#xA;You must call &lt;see cref=&quot;Overload:System.Xml.XmlReader.ResolveEntity&quot; /&gt; to see what the general entities expand to. This enables you to optimize entity handling by only expanding the entity the first time it is used.  &#xA;  &#xA;When set to &lt;see langword=&quot;ExpandCharEntities&quot; /&gt;, a reader call to the &lt;see cref=&quot;Overload:System.Xml.XmlReader.GetAttribute&quot; /&gt; method expands all entities (both general and character entities).">文字エンティティを展開し、<see cref="F:System.Xml.XmlNodeType.EntityReference" /> ノードとしての一般エンティティを返します。 
<see cref="Overload:System.Xml.XmlReader.ResolveEntity" /> を呼び出して、一般エンティティの展開先を確認する必要があります。 これにより、エンティティを初めて使用するときにのみ展開することで、エンティティの処理を最適化できます。  
<see langword="ExpandCharEntities" /> に設定した場合、リーダーによる <see cref="Overload:System.Xml.XmlReader.GetAttribute" /> メソッドの呼び出しによって、すべてのエンティティ (一般エンティティと文字エンティティの両方) が展開されます。</summary>
    </member>
    <member name="F:System.Xml.EntityHandling.ExpandEntities">
      <summary vsli:raw="Expands all entities and returns the expanded nodes.&#xA;        &#xA;&lt;see cref=&quot;F:System.Xml.XmlNodeType.EntityReference&quot; /&gt; nodes are not returned. The entity text is expanded in place of the entity references.">すべてのエンティティを展開し、展開されたノードを返します。
<see cref="F:System.Xml.XmlNodeType.EntityReference" /> ノードは返されません。 エンティティのテキストがエンティティ参照の代わりに展開されます。</summary>
    </member>
    <member name="T:System.Xml.Formatting">
      <summary vsli:raw="Specifies formatting options for the &lt;see cref=&quot;T:System.Xml.XmlTextWriter&quot; /&gt;.">
        <see cref="T:System.Xml.XmlTextWriter" /> の書式オプションを指定します。</summary>
    </member>
    <member name="F:System.Xml.Formatting.Indented">
      <summary vsli:raw="Causes child elements to be indented according to the &lt;see cref=&quot;P:System.Xml.XmlTextWriter.Indentation&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlTextWriter.IndentChar&quot; /&gt; settings.&#xA;&#xA;This option indents element content only; mixed content is not affected. For the XML 1.0 definitions of these terms, see the World Wide Web Consortium (W3C) documentation Element Content and Mixed Content.">子要素が、<see cref="P:System.Xml.XmlTextWriter.Indentation" /> の設定および <see cref="P:System.Xml.XmlTextWriter.IndentChar" /> の設定に従ってインデント設定されます。
このオプションでは、要素コンテンツにのみインデントが設定されます。混合コンテンツは影響を受けません。 これらの用語の XML 1.0 定義については、World Wide Web コンソーシアム (W3C) のドキュメントの「Element Content (要素コンテンツ)」および「Mixed Content (混合コンテンツ)」をご覧ください。</summary>
    </member>
    <member name="F:System.Xml.Formatting.None">
      <summary vsli:raw="No special formatting is applied. This is the default.">特殊な書式は適用されません。 既定値です。</summary>
    </member>
    <member name="T:System.Xml.IApplicationResourceStreamResolver">
      <summary vsli:raw="Represents an application resource stream resolver.">アプリケーションのリソース ストリーム リゾルバーを表します。</summary>
    </member>
    <member name="M:System.Xml.IApplicationResourceStreamResolver.GetApplicationResourceStream(System.Uri)">
      <summary vsli:raw="Returns an application resource stream from the specified URI.">指定した URI からアプリケーション リソース ストリームを返します。</summary>
      <param name="relativeUri" vsli:raw="The relative URI.">相対 URI。</param>
      <returns vsli:raw="An application resource stream.">アプリケーションのリソース ストリーム。</returns>
    </member>
    <member name="T:System.Xml.IHasXmlNode">
      <summary vsli:raw="Enables a class to return an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; from the current context or position.">クラスが、現在のコンテキストまたは位置から <see cref="T:System.Xml.XmlNode" /> を返せるようにします。</summary>
    </member>
    <member name="M:System.Xml.IHasXmlNode.GetNode">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; for the current position.">現在位置の <see cref="T:System.Xml.XmlNode" /> を返します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlNode&quot; /&gt; for the current position.">現在位置の <see langword="XmlNode" />。</returns>
    </member>
    <member name="T:System.Xml.IXmlLineInfo">
      <summary vsli:raw="Provides an interface to enable a class to return line and position information.">クラスが行情報および位置情報を返せるようにするインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.Xml.IXmlLineInfo.HasLineInfo">
      <summary vsli:raw="Gets a value indicating whether the class can return line information.">クラスが行情報を返すことができるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;P:System.Xml.IXmlLineInfo.LineNumber&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.IXmlLineInfo.LinePosition&quot; /&gt; can be provided; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.Xml.IXmlLineInfo.LineNumber" /> および <see cref="P:System.Xml.IXmlLineInfo.LinePosition" /> を提供できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.IXmlLineInfo.LineNumber">
      <summary vsli:raw="Gets the current line number.">現在の行番号を取得します。</summary>
      <returns vsli:raw="The current line number or 0 if no line information is available (for example, &lt;see cref=&quot;M:System.Xml.IXmlLineInfo.HasLineInfo&quot; /&gt; returns &lt;see langword=&quot;false&quot; /&gt;).">現在の行番号。または行情報が取得できない場合は 0。たとえば、<see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" /> は <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.IXmlLineInfo.LinePosition">
      <summary vsli:raw="Gets the current line position.">現在の行の位置を取得します。</summary>
      <returns vsli:raw="The current line position or 0 if no line information is available (for example, &lt;see cref=&quot;M:System.Xml.IXmlLineInfo.HasLineInfo&quot; /&gt; returns &lt;see langword=&quot;false&quot; /&gt;).">現在の行の位置。または行情報が取得できない場合は 0。たとえば、<see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" /> は <see langword="false" /> を返します。</returns>
    </member>
    <member name="T:System.Xml.IXmlNamespaceResolver">
      <summary vsli:raw="Provides read-only access to a set of prefix and namespace mappings.">プレフィックスと名前空間の一連の割り当てに対する読み取り専用アクセスを提供します。</summary>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary vsli:raw="Gets a collection of defined prefix-namespace mappings that are currently in scope.">現在スコープ内にあるプレフィックスと名前空間の間に定義された割り当てのコレクションを取得します。</summary>
      <param name="scope" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNamespaceScope&quot; /&gt; value that specifies the type of namespace nodes to return.">返される名前空間ノードの種類を指定する <see cref="T:System.Xml.XmlNamespaceScope" /> 値。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; that contains the current in-scope namespaces.">現在のスコープ内にある名前空間が格納された <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)">
      <summary vsli:raw="Gets the namespace URI mapped to the specified prefix.">指定したプレフィックスに割り当てられた名前空間 URI を取得します。</summary>
      <param name="prefix" vsli:raw="The prefix whose namespace URI you wish to find.">検索対象の名前空間 URI を持つプレフィックス。</param>
      <returns vsli:raw="The namespace URI that is mapped to the prefix; &lt;see langword=&quot;null&quot; /&gt; if the prefix is not mapped to a namespace URI.">プレフィックスに割り当てられている名前空間 URI。このプレフィックスに名前空間 URI が割り当てられていない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)">
      <summary vsli:raw="Gets the prefix that is mapped to the specified namespace URI.">指定した名前空間 URI に割り当てられたプレフィックスを取得します。</summary>
      <param name="namespaceName" vsli:raw="The namespace URI whose prefix you wish to find.">検索対象のプレフィックスを持つ名前空間 URI。</param>
      <returns vsli:raw="The prefix that is mapped to the namespace URI; &lt;see langword=&quot;null&quot; /&gt; if the namespace URI is not mapped to a prefix.">名前空間 URI に割り当てられているプレフィックス。この名前空間 URI にプレフィックスが割り当てられていない場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.NamespaceHandling">
      <summary vsli:raw="Specifies whether to remove duplicate namespace declarations in the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">
        <see cref="T:System.Xml.XmlWriter" /> で重複する名前空間宣言を削除するかどうかを指定します。</summary>
    </member>
    <member name="F:System.Xml.NamespaceHandling.Default">
      <summary vsli:raw="Specifies that duplicate namespace declarations will not be removed.">重複する名前空間宣言が削除されないように指定します。</summary>
    </member>
    <member name="F:System.Xml.NamespaceHandling.OmitDuplicates">
      <summary vsli:raw="Specifies that duplicate namespace declarations will be removed. For the duplicate namespace to be removed, the prefix and the namespace must match.">重複する名前空間宣言を削除するように指定します。 重複する名前空間を削除するには、プレフィックスと名前空間が一致している必要があります。</summary>
    </member>
    <member name="T:System.Xml.NameTable">
      <summary vsli:raw="Implements a single-threaded &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">シングルスレッド <see cref="T:System.Xml.XmlNameTable" /> を実装します。</summary>
    </member>
    <member name="M:System.Xml.NameTable.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;NameTable&quot; /&gt; class.">
        <see langword="NameTable" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.NameTable.Add(System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="Atomizes the specified string and adds it to the &lt;see langword=&quot;NameTable&quot; /&gt;.">指定した文字列を最小単位に分割し、<see langword="NameTable" /> に追加します。</summary>
      <param name="key" vsli:raw="The character array containing the string to add.">追加する文字列を格納している文字配列。</param>
      <param name="start" vsli:raw="The zero-based index into the array specifying the first character of the string.">文字列の最初の文字を指定する配列の、0 から始まるインデックス番号。</param>
      <param name="len" vsli:raw="The number of characters in the string.">文字列の文字数。</param>
      <returns vsli:raw="The atomized string or the existing string if one already exists in the &lt;see langword=&quot;NameTable&quot; /&gt;. If &lt;paramref name=&quot;len&quot; /&gt; is zero, String.Empty is returned.">最小単位に分割された文字列。または <see langword="NameTable" /> に既に存在している場合は既存の文字列。 <paramref name="len" /> が 0 の場合は、String.Empty が返されます。</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="0 &amp;gt; &lt;paramref name=&quot;start&quot; /&gt;  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;start&quot; /&gt; &amp;gt;= &lt;paramref name=&quot;key&quot; /&gt;.Length  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;len&quot; /&gt; &amp;gt;= &lt;paramref name=&quot;key&quot; /&gt;.Length  &#xA;  &#xA; The above conditions do not cause an exception to be thrown if &lt;paramref name=&quot;len&quot; /&gt; =0.">0 &gt; <paramref name="start" />  
または 
 <paramref name="start" /> &gt;= <paramref name="key" />.Length 

または - 
<paramref name="len" /> &gt;= <paramref name="key" />.Length 
<paramref name="len" /> =0 の場合は、上記の条件によって例外がスローされることはありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;len&quot; /&gt; &amp;lt; 0.">
        <paramref name="len" /> &lt; 0.</exception>
    </member>
    <member name="M:System.Xml.NameTable.Add(System.String)">
      <summary vsli:raw="Atomizes the specified string and adds it to the &lt;see langword=&quot;NameTable&quot; /&gt;.">指定した文字列を最小単位に分割し、<see langword="NameTable" /> に追加します。</summary>
      <param name="key" vsli:raw="The string to add.">追加する文字列。</param>
      <returns vsli:raw="The atomized string or the existing string if it already exists in the &lt;see langword=&quot;NameTable&quot; /&gt;.">最小単位に分割された文字列。<see langword="NameTable" /> に既に存在している場合は既存の文字列。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xml.NameTable.Get(System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="Gets the atomized string containing the same characters as the specified range of characters in the given array.">指定した配列内の指定した範囲の文字と同じ文字を含む、最小単位に分割された文字列を取得します。</summary>
      <param name="key" vsli:raw="The character array containing the name to find.">検索対象の名前を格納している文字配列。</param>
      <param name="start" vsli:raw="The zero-based index into the array specifying the first character of the name.">名前の最初の文字を指定する配列の、0 から始まるインデックス番号。</param>
      <param name="len" vsli:raw="The number of characters in the name.">名前の文字数。</param>
      <returns vsli:raw="The atomized string or &lt;see langword=&quot;null&quot; /&gt; if the string has not already been atomized. If &lt;paramref name=&quot;len&quot; /&gt; is zero, String.Empty is returned.">最小単位に分割された文字列。文字列がまだ最小単位に分割されていない場合は <see langword="null" />。 <paramref name="len" /> が 0 の場合は、String.Empty が返されます。</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="0 &amp;gt; &lt;paramref name=&quot;start&quot; /&gt;  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;start&quot; /&gt; &amp;gt;= &lt;paramref name=&quot;key&quot; /&gt;.Length  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;len&quot; /&gt; &amp;gt;= &lt;paramref name=&quot;key&quot; /&gt;.Length  &#xA;  &#xA; The above conditions do not cause an exception to be thrown if &lt;paramref name=&quot;len&quot; /&gt; =0.">0 &gt; <paramref name="start" />  
または 
 <paramref name="start" /> &gt;= <paramref name="key" />.Length 

または - 
<paramref name="len" /> &gt;= <paramref name="key" />.Length 
<paramref name="len" /> =0 の場合は、上記の条件によって例外がスローされることはありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;len&quot; /&gt; &amp;lt; 0.">
        <paramref name="len" /> &lt; 0.</exception>
    </member>
    <member name="M:System.Xml.NameTable.Get(System.String)">
      <summary vsli:raw="Gets the atomized string with the specified value.">指定した値を持つ最小単位に分割された文字列を取得します。</summary>
      <param name="value" vsli:raw="The name to find.">検索対象の名前。</param>
      <returns vsli:raw="The atomized string object or &lt;see langword=&quot;null&quot; /&gt; if the string has not already been atomized.">最小単位に分割された文字列オブジェクト。または文字列がまだ最小単位に分割されていない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="T:System.Xml.NewLineHandling">
      <summary vsli:raw="Specifies how to handle line breaks.">改行の処理方法を指定します。</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.Entitize">
      <summary vsli:raw="New line characters are entitized. This setting preserves all characters when the output is read by a normalizing &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">改行文字をエンティティ化します。 この設定では、正規化 <see cref="T:System.Xml.XmlReader" /> で出力を読み取るときにすべての文字が保持されます。</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.None">
      <summary vsli:raw="The new line characters are unchanged. The output is the same as the input.">改行文字を変更しません。 出力は入力と同じになります。</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.Replace">
      <summary vsli:raw="New line characters are replaced to match the character specified in the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.NewLineChars&quot; /&gt; property.">
        <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> プロパティに指定されている文字と一致するように、改行文字を置き換えます。</summary>
    </member>
    <member name="T:System.Xml.ReadState">
      <summary vsli:raw="Specifies the state of the reader.">リーダーの状態を指定します。</summary>
    </member>
    <member name="F:System.Xml.ReadState.Closed">
      <summary vsli:raw="The &lt;see cref=&quot;M:System.Xml.XmlReader.Close&quot; /&gt; method has been called.">
        <see cref="M:System.Xml.XmlReader.Close" /> メソッドが呼び出されています。</summary>
    </member>
    <member name="F:System.Xml.ReadState.EndOfFile">
      <summary vsli:raw="The end of the file has been reached successfully.">ファイルの末尾に正常に到達しています。</summary>
    </member>
    <member name="F:System.Xml.ReadState.Error">
      <summary vsli:raw="An error occurred that prevents the read operation from continuing.">読み取り操作を継続できないようにするエラーが発生しました。</summary>
    </member>
    <member name="F:System.Xml.ReadState.Initial">
      <summary vsli:raw="The &lt;see langword=&quot;Read&quot; /&gt; method has not been called.">
        <see langword="Read" /> メソッドが呼び出されていません。</summary>
    </member>
    <member name="F:System.Xml.ReadState.Interactive">
      <summary vsli:raw="The &lt;see langword=&quot;Read&quot; /&gt; method has been called. Additional methods may be called on the reader.">
        <see langword="Read" /> メソッドが呼び出されています。 リーダーで追加のメソッドが呼び出される場合があります。</summary>
    </member>
    <member name="T:System.Xml.Resolvers.XmlKnownDtds">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Xml.Resolvers.XmlKnownDtds&quot; /&gt; enumeration is used by the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; and defines which well-known DTDs that the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; recognizes.">
        <see cref="T:System.Xml.Resolvers.XmlKnownDtds" /> 列挙型は、<see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> により使用され、<see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> が認識する既知の DTD を定義します。</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.All">
      <summary vsli:raw="Specifies that the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; will recognize all currently supported DTDs. This is the default behavior.">現在サポートされているすべての DTD を <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> が認識することを指定します。 これが既定の動作です。</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.None">
      <summary vsli:raw="Specifies that the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; will not recognize any of the predefined DTDs.">
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> が、定義済みの DTD を一切認識しないことを指定します。</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.Rss091">
      <summary vsli:raw="Specifies that the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; will recognize DTDs and entities that are defined in RSS 0.91.">RSS 0.91 で定義されている DTD およびエンティティを <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> が認識することを指定します。</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.Xhtml10">
      <summary vsli:raw="Specifies that the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; will recognize DTDs and entities that are defined in XHTML 1.0.">XHTML 1.0 で定義されている DTD およびエンティティを <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> が認識することを指定します。</summary>
    </member>
    <member name="T:System.Xml.Resolvers.XmlPreloadedResolver">
      <summary vsli:raw="Represents a class that is used to prepopulate the cache with DTDs or XML streams.">DTD ストリームまたは XML ストリームをキャッシュに事前に読み込むために使用されるクラスを表します。</summary>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; class.">
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.Resolvers.XmlKnownDtds)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; class with the specified preloaded well-known DTDs.">指定したプリロード済みの既知の DTD を使用して、<see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="preloadedDtds" vsli:raw="The well-known DTDs that should be prepopulated into the cache.">キャッシュに事前設定が必要な既知の DTD。</param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; class with the specified fallback resolver.">指定したフォールバック リゾルバーを使用して、<see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="fallbackResolver" vsli:raw="The &lt;see langword=&quot;XmlResolver&quot; /&gt;, &lt;see langword=&quot;XmlXapResolver&quot; /&gt;, or your own resolver.">
        <see langword="XmlResolver" />、<see langword="XmlXapResolver" />、または独自のリゾルバー。</param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver,System.Xml.Resolvers.XmlKnownDtds)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; class with the specified fallback resolver and preloaded well-known DTDs.">指定したフォールバック リゾルバーとプリロード済みの既知の DTD を使用して、<see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="fallbackResolver" vsli:raw="The &lt;see langword=&quot;XmlResolver&quot; /&gt;, &lt;see langword=&quot;XmlXapResolver&quot; /&gt;, or your own resolver.">
        <see langword="XmlResolver" />、<see langword="XmlXapResolver" />、または独自のリゾルバー。</param>
      <param name="preloadedDtds" vsli:raw="The well-known DTDs that should be prepopulated into the cache.">キャッシュに事前設定が必要な既知の DTD。</param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver,System.Xml.Resolvers.XmlKnownDtds,System.Collections.Generic.IEqualityComparer{System.Uri})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; class with the specified fallback resolver, preloaded well-known DTDs, and URI equality comparer.">指定したフォールバック リゾルバー、プリロード済みの既知の DTD、および URI の等値比較子を使用して、<see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="fallbackResolver" vsli:raw="The &lt;see langword=&quot;XmlResolver&quot; /&gt;, &lt;see langword=&quot;XmlXapResolver&quot; /&gt;, or your own resolver.">
        <see langword="XmlResolver" />、<see langword="XmlXapResolver" />、または独自のリゾルバー。</param>
      <param name="preloadedDtds" vsli:raw="The well-known DTDs that should be prepopulated into cache.">キャッシュに事前設定が必要な既知の DTD。</param>
      <param name="uriComparer" vsli:raw="The implementation of the &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; generic interface to use when you compare URIs.">URI の比較に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> ジェネリック インターフェイスの実装。</param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.Byte[])">
      <summary vsli:raw="Adds a byte array to the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; store and maps it to a URI. If the store already contains a mapping for the same URI, the existing mapping is overridden.">
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> ストアにバイト配列を追加して URI にマップします。 同じ URI のマッピングがストアに既に格納されている場合、その既存のマッピングはオーバーライドされます。</summary>
      <param name="uri" vsli:raw="The URI of the data that is being added to the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; store.">
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> ストアに追加するデータの URI。</param>
      <param name="value" vsli:raw="A byte array with the data that corresponds to the provided URI.">指定した URI に対応するデータを持つバイト配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;uri&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="uri" /> または <paramref name="value" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Adds a byte array to the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; store and maps it to a URI. If the store already contains a mapping for the same URI, the existing mapping is overridden.">
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> ストアにバイト配列を追加して URI にマップします。 同じ URI のマッピングがストアに既に格納されている場合、その既存のマッピングはオーバーライドされます。</summary>
      <param name="uri" vsli:raw="The URI of the data that is being added to the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; store.">
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> ストアに追加するデータの URI。</param>
      <param name="value" vsli:raw="A byte array with the data that corresponds to the provided URI.">指定した URI に対応するデータを持つバイト配列。</param>
      <param name="offset" vsli:raw="The offset in the provided byte array where the data starts.">指定したバイト配列内の、データの開始地点を表すオフセット。</param>
      <param name="count" vsli:raw="The number of bytes to read from the byte array, starting at the provided offset.">指定したオフセットを開始地点として、バイト配列から読み込むバイト数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;uri&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="uri" /> または <paramref name="value" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of the &lt;paramref name=&quot;value&quot; /&gt; minus &lt;paramref name=&quot;offset&quot; /&gt; is less than &lt;paramref name=&quot;count&quot; /&gt;.">
        <paramref name="offset" /> または <paramref name="count" /> が 0 未満です。  

または - 
<paramref name="value" /> から <paramref name="offset" /> を引いた長さが、<paramref name="count." /> 未満です。</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.IO.Stream)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; to the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; store and maps it to a URI. If the store already contains a mapping for the same URI, the existing mapping is overridden.">
        <see cref="T:System.IO.Stream" /> ストアに <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> を追加して URI にマップします。 同じ URI のマッピングがストアに既に格納されている場合、その既存のマッピングはオーバーライドされます。</summary>
      <param name="uri" vsli:raw="The URI of the data that is being added to the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; store.">
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> ストアに追加するデータの URI。</param>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; with the data that corresponds to the provided URI.">指定した URI に対応するデータを持つ <see cref="T:System.IO.Stream" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;uri&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="uri" /> または <paramref name="value" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.String)">
      <summary vsli:raw="Adds a string with preloaded data to the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; store and maps it to a URI. If the store already contains a mapping for the same URI, the existing mapping is overridden.">プリロード済みのデータを持つ文字列を <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> ストアに追加し、それを URI にマップします。 同じ URI のマッピングがストアに既に格納されている場合、その既存のマッピングはオーバーライドされます。</summary>
      <param name="uri" vsli:raw="The URI of the data that is being added to the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; store.">
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> ストアに追加するデータの URI。</param>
      <param name="value" vsli:raw="A &lt;see langword=&quot;String&quot; /&gt; with the data that corresponds to the provided URI.">指定した URI に対応するデータを持つ <see langword="String" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;uri&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="uri" /> または <paramref name="value" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Xml.Resolvers.XmlPreloadedResolver.Credentials">
      <summary vsli:raw="Sets the credentials that are used to authenticate the underlying &lt;see cref=&quot;T:System.Net.WebRequest&quot; /&gt;.">基になる <see cref="T:System.Net.WebRequest" /> の認証に使用する資格情報を設定します。</summary>
      <returns vsli:raw="The credentials that are used to authenticate the underlying web request.">基になる Web 要求を認証するために使用する資格情報。</returns>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary vsli:raw="Maps a URI to an object that contains the actual resource.">URI を実際のリソースを格納しているオブジェクトにマップします。</summary>
      <param name="absoluteUri" vsli:raw="The URI returned from &lt;see cref=&quot;M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)&quot; /&gt;.">
        <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> から返された URI。</param>
      <param name="role" vsli:raw="The current version of the .NET Framework for Silverlight does not use this parameter when resolving URIs. This parameter is provided for future extensibility purposes. For example, this parameter can be mapped to the xlink:role and used as an implementation-specific argument in other scenarios.">.NET Framework for Silverlight の現在のバージョンでは、URI を解決するときにこのパラメーターは使用しません。 このパラメーターは、将来の拡張のために提供されています。 たとえば、このパラメーターを xlink:role に割り当て、別の場合に実装固有の引数として使用できます。</param>
      <param name="ofObjectToReturn" vsli:raw="The type of object to return. The &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; supports &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; objects and &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; objects for URIs that were added as &lt;see langword=&quot;String&quot; /&gt;. If the requested type is not supported by the resolver, an exception will be thrown. Use the &lt;see cref=&quot;M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)&quot; /&gt; method to determine whether a certain &lt;see langword=&quot;Type&quot; /&gt; is supported by this resolver.">返すオブジェクトの型。 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> は、<see langword="String" /> として追加された URI に対し <see cref="T:System.IO.Stream" /> オブジェクトと <see cref="T:System.IO.TextReader" /> オブジェクトをサポートしています。 要求した型をリゾルバーがサポートしていない場合、例外がスローされます。 リゾルバーが特定の <see langword="Type" /> をサポートしているかどうかを確認するには、<see cref="M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)" /> メソッドを使用します。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; or &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; object that corresponds to the actual source.">
        <see cref="T:System.IO.Stream" /> または実際のソースに対応する <see cref="T:System.IO.TextReader" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;absoluteUri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="absoluteUri" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="Cannot resolve URI passed in &lt;paramref name=&quot;absoluteUri&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;ofObjectToReturn&quot; /&gt; is not of a supported type.">
        <paramref name="absoluteUri" /> に渡された URI を解決できません。  

または - 
<paramref name="ofObjectToReturn" /> は、サポートされた型ではありません。</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.GetEntityAsync(System.Uri,System.String,System.Type)">
      <summary vsli:raw="Asynchronously maps a URI to an object that contains the actual resource.">URI を実際のリソースを格納しているオブジェクトに非同期にマップします。</summary>
      <param name="absoluteUri" vsli:raw="The URI returned from &lt;see cref=&quot;M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)&quot; /&gt;.">
        <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> から返された URI。</param>
      <param name="role" vsli:raw="The current version of the .NET Framework for Silverlight does not use this parameter when resolving URIs. This parameter is provided for future extensibility purposes. For example, this parameter can be mapped to the xlink:role and used as an implementation-specific argument in other scenarios.">.NET Framework for Silverlight の現在のバージョンでは、URI を解決するときにこのパラメーターは使用しません。 このパラメーターは、将来の拡張のために提供されています。 たとえば、このパラメーターを xlink:role に割り当て、別の場合に実装固有の引数として使用できます。</param>
      <param name="ofObjectToReturn" vsli:raw="The type of object to return. The &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; supports &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; objects and &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; objects for URIs that were added as &lt;see langword=&quot;String&quot; /&gt;. If the requested type is not supported by the resolver, an exception will be thrown. Use the &lt;see cref=&quot;M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)&quot; /&gt; method to determine whether a certain &lt;see langword=&quot;Type&quot; /&gt; is supported by this resolver.">返すオブジェクトの型。 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> は、<see langword="String" /> として追加された URI に対し <see cref="T:System.IO.Stream" /> オブジェクトと <see cref="T:System.IO.TextReader" /> オブジェクトをサポートしています。 要求した型をリゾルバーがサポートしていない場合、例外がスローされます。 リゾルバーが特定の <see langword="Type" /> をサポートしているかどうかを確認するには、<see cref="M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)" /> メソッドを使用します。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; or &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; object that corresponds to the actual source.">
        <see cref="T:System.IO.Stream" /> または実際のソースに対応する <see cref="T:System.IO.TextReader" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Resolvers.XmlPreloadedResolver.PreloadedUris">
      <summary vsli:raw="Gets a collection of preloaded URIs.">プリロード済みの URI のコレクションを取得します。</summary>
      <returns vsli:raw="The collection of preloaded URIs.">プリロード済みの URI のコレクション。</returns>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Remove(System.Uri)">
      <summary vsli:raw="Removes the data that corresponds to the URI from the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt;.">URI に対応するデータを <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> から削除します。</summary>
      <param name="uri" vsli:raw="The URI of the data that should be removed from the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; store.">
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> ストアから削除する必要のあるデータの URI。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;uri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="uri" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.ResolveUri(System.Uri,System.String)">
      <summary vsli:raw="Resolves the absolute URI from the base and relative URIs.">ベース URI および 相対 URI を解決して絶対 URI を返します。</summary>
      <param name="baseUri" vsli:raw="The base URI used to resolve the relative URI.">相対 URI の解決に使用するベース URI。</param>
      <param name="relativeUri" vsli:raw="The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the &lt;paramref name=&quot;baseUri&quot; /&gt; value. If relative, it combines with the &lt;paramref name=&quot;baseUri&quot; /&gt; to make an absolute URI.">解決対象の URI。 URI は絶対 URI でも相対 URI でもかまいません。 絶対 URI の場合は、この値が <paramref name="baseUri" /> 値を効率的に置き換えます。 相対 URI の場合、この値は <paramref name="baseUri" /> と結合して絶対 URI を作成します。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Uri&quot; /&gt; representing the absolute URI or &lt;see langword=&quot;null&quot; /&gt; if the relative URI cannot be resolved.">絶対 URI を表す <see cref="T:System.Uri" />。相対 URI を解決できない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;uri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="uri" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)">
      <summary vsli:raw="Determines whether the resolver supports other &lt;see cref=&quot;T:System.Type&quot; /&gt;s than just &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt;.">リゾルバーが <see cref="T:System.Type" /> 以外の <see cref="T:System.IO.Stream" /> をサポートするかどうかを判断します。</summary>
      <param name="absoluteUri" vsli:raw="The absolute URI to check.">チェックする絶対 URI。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to return.">返される <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Type&quot; /&gt; is supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Type" /> がサポートされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;uri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="uri" /> は <see langword="null" />です。</exception>
    </member>
    <member name="T:System.Xml.Schema.IXmlSchemaInfo">
      <summary vsli:raw="Defines the post-schema-validation infoset of a validated XML node.">検証済み XML ノードのスキーマ検証後の infoset を定義します。</summary>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.IsDefault">
      <summary vsli:raw="Gets a value indicating if this validated XML node was set as the result of a default being applied during XML Schema Definition Language (XSD) schema validation.">この検証済みの XML ノードが、XML スキーマ定義言語 (XSD: XML Schema Definition Language) スキーマの検証を実行中に既定値を適用して設定されたかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this validated XML node was set as the result of a default being applied during schema validation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">この検証済みの XML ノードが、スキーマの検証中に既定値を適用することによって設定された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.IsNil">
      <summary vsli:raw="Gets a value indicating if the value for this validated XML node is nil.">この検証済み XML ノードの値が nil かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value for this validated XML node is nil; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">この検証済みの XML ノードの値が nil の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.MemberType">
      <summary vsli:raw="Gets the dynamic schema type for this validated XML node.">この検証済み XML ノードの動的なスキーマ型を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt; object that represents the dynamic schema type for this validated XML node.">この検証済み XML ノードの動的スキーマ型を表す <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute">
      <summary vsli:raw="Gets the compiled &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt; that corresponds to this validated XML node.">この検証済み XML ノードに対応するコンパイルされた <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt; that corresponds to this validated XML node.">この検証済み XML ノードに対応する <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaElement">
      <summary vsli:raw="Gets the compiled &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaElement&quot; /&gt; that corresponds to this validated XML node.">この検証済み XML ノードに対応するコンパイルされた <see cref="T:System.Xml.Schema.XmlSchemaElement" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaElement&quot; /&gt; that corresponds to this validated XML node.">この検証済み XML ノードに対応する <see cref="T:System.Xml.Schema.XmlSchemaElement" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaType">
      <summary vsli:raw="Gets the static XML Schema Definition Language (XSD) schema type of this validated XML node.">この検証済み XML ノードの静的な XML スキーマ定義言語 (XSD) スキーマ型を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; of this validated XML node.">この検証済み XML ノードの <see cref="T:System.Xml.Schema.XmlSchemaType" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.Validity">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidity&quot; /&gt; value of this validated XML node.">この検証済み XML ノードの <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> 値を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidity&quot; /&gt; value of this validated XML node.">この検証済み XML ノードの <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> 値。</returns>
    </member>
    <member name="T:System.Xml.Schema.ValidationEventArgs">
      <summary vsli:raw="Returns detailed information related to the &lt;see langword=&quot;ValidationEventHandler&quot; /&gt;.">
        <see langword="ValidationEventHandler" /> に関する詳細情報を返します。</summary>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Exception">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaException&quot; /&gt; associated with the validation event.">検証イベントに関連付けられている <see cref="T:System.Xml.Schema.XmlSchemaException" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlSchemaException&quot; /&gt; associated with the validation event.">検証イベントに関連付けられている <see langword="XmlSchemaException" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Message">
      <summary vsli:raw="Gets the text description corresponding to the validation event.">検証イベントに対応している説明テキストを取得します。</summary>
      <returns vsli:raw="The text description.">説明テキスト。</returns>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Severity">
      <summary vsli:raw="Gets the severity of the validation event.">検証イベントの重大度レベルを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSeverityType&quot; /&gt; value representing the severity of the validation event.">検証イベントの重大度レベルを表す <see cref="T:System.Xml.Schema.XmlSeverityType" /> 値。</returns>
    </member>
    <member name="T:System.Xml.Schema.ValidationEventHandler">
      <summary vsli:raw="Represents the callback method that will handle XML schema validation events and the &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventArgs&quot; /&gt;.">XML スキーマ検証イベントおよび <see cref="T:System.Xml.Schema.ValidationEventArgs" /> を処理するコールバック メソッドを表します。</summary>
      <param name="sender" vsli:raw="The source of the event.  &#xA;  &#xA; Note Determine the type of a sender before using it in your code. You cannot assume that the sender is an instance of a particular type. The sender is also not guaranteed to not  be null. Always surround your casts with failure handling logic.">イベントのソース。  
 メモ 送信元をコードで使用する前に、送信元の型を確認してください。 送信元が特定の型のインスタンスになるとは限りません。 また、送信元が null でないという保証もありません。 キャスト コマンドは、必ずエラー処理ロジックで囲むようにしてください。</param>
      <param name="e" vsli:raw="The event data.">イベントのデータ。</param>
    </member>
    <member name="T:System.Xml.Schema.XmlAtomicValue">
      <summary vsli:raw="Represents the typed value of a validated XML element or attribute. The &lt;see cref=&quot;T:System.Xml.Schema.XmlAtomicValue&quot; /&gt; class cannot be inherited.">検証済みの XML 要素または XML 属性の型指定された値を表します。 <see cref="T:System.Xml.Schema.XmlAtomicValue" /> クラスは継承できません。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.Clone">
      <summary vsli:raw="Returns a copy of this &lt;see cref=&quot;T:System.Xml.Schema.XmlAtomicValue&quot; /&gt; object.">この <see cref="T:System.Xml.Schema.XmlAtomicValue" /> オブジェクトのコピーを返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlAtomicValue&quot; /&gt; object copy of this &lt;see cref=&quot;T:System.Xml.Schema.XmlAtomicValue&quot; /&gt; object.">この <see cref="T:System.Xml.Schema.XmlAtomicValue" /> オブジェクトのコピーである <see cref="T:System.Xml.Schema.XmlAtomicValue" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.IsNode">
      <summary vsli:raw="Gets a value indicating whether the validated XML element or attribute is an XPath node or an atomic value.">検証済みの XML 要素または XML 属性が、XPath ノードと原子値のどちらであるかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the validated XML element or attribute is an XPath node; &lt;see langword=&quot;false&quot; /&gt; if the validated XML element or attribute is an atomic value.">検証済みの XML 要素または XML 属性が XPath ノードの場合は <see langword="true" />。検証済みの XML 要素または XML 属性が原子値の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.System#ICloneable#Clone">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.Schema.XmlAtomicValue.Clone&quot; /&gt;.">このメンバーの詳細については、「<see cref="M:System.Xml.Schema.XmlAtomicValue.Clone" />」をご覧ください。</summary>
      <returns vsli:raw="A copy of this &lt;see cref=&quot;T:System.Xml.Schema.XmlAtomicValue&quot; /&gt; object.">この <see cref="T:System.Xml.Schema.XmlAtomicValue" /> オブジェクトのコピー。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.ToString">
      <summary vsli:raw="Gets the &lt;see langword=&quot;string&quot; /&gt; value of the validated XML element or attribute.">検証済みの XML 要素または XML 属性の <see langword="string" /> 値を取得します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;string&quot; /&gt; value of the validated XML element or attribute.">検証済みの XML 要素または XML 属性の <see langword="string" /> 値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.TypedValue">
      <summary vsli:raw="Gets the current validated XML element or attribute as a boxed object of the most appropriate .NET type according to its schema type.">現在の検証済みの XML 要素または XML 属性を、スキーマ型に従って最も適切な Microsoft .NET Framework 型にボックス化変換されたオブジェクトとして取得します。</summary>
      <returns vsli:raw="The current validated XML element or attribute as a boxed object of the most appropriate .NET type.">最も適切な .NET Framework 型にボックス化変換されたオブジェクトとしての、現在の検証済み XML 要素または XML 属性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.Value">
      <summary vsli:raw="Gets the &lt;see langword=&quot;string&quot; /&gt; value of the validated XML element or attribute.">検証済みの XML 要素または XML 属性の <see langword="string" /> 値を取得します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;string&quot; /&gt; value of the validated XML element or attribute.">検証済みの XML 要素または XML 属性の <see langword="string" /> 値。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary vsli:raw="Returns the validated XML element or attribute's value as the type specified using the &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object specified to resolve namespace prefixes.">名前空間プレフィックスの解決用に指定された <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクトを使用して、検証済みの XML 要素または XML 属性の値を指定された型として返します。</summary>
      <param name="type" vsli:raw="The type to return the validated XML element or attribute's value as.">検証済みの XML 要素または XML 属性の値を返すときの型。</param>
      <param name="nsResolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object used to resolve namespace prefixes.">名前空間プレフィックスの解決に使用する <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
      <returns vsli:raw="The value of the validated XML element or attribute as the type requested.">検証済みの XML 要素または XML 属性の、要求された型としての値。</returns>
      <exception cref="T:System.FormatException" vsli:raw="The validated XML element or attribute's value is not in the correct format for the target type.">検証済みの XML 要素または XML 属性の値が、目的の型の正しい形式になっていません。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast is not valid.">試行されたキャストが無効です。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The attempted cast resulted in an overflow.">試行されたキャストで、オーバーフローが発生しました。</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsBoolean">
      <summary vsli:raw="Gets the validated XML element or attribute's value as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">検証済みの XML 要素または XML 属性の値を <see cref="T:System.Boolean" /> として取得します。</summary>
      <returns vsli:raw="The validated XML element or attribute's value as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">検証済みの XML 要素または XML 属性の <see cref="T:System.Boolean" /> としての値。</returns>
      <exception cref="T:System.FormatException" vsli:raw="The validated XML element or attribute's value is not in the correct format for the &lt;see cref=&quot;T:System.Boolean&quot; /&gt; type.">検証済みの XML 要素または XML 属性の値が、<see cref="T:System.Boolean" /> 型の正しい形式になっていません。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.Boolean&quot; /&gt; is not valid.">試行された <see cref="T:System.Boolean" /> へのキャストは無効です。</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsDateTime">
      <summary vsli:raw="Gets the validated XML element or attribute's value as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">検証済みの XML 要素または XML 属性の値を <see cref="T:System.DateTime" /> として取得します。</summary>
      <returns vsli:raw="The validated XML element or attribute's value as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">検証済みの XML 要素または XML 属性の <see cref="T:System.DateTime" /> としての値。</returns>
      <exception cref="T:System.FormatException" vsli:raw="The validated XML element or attribute's value is not in the correct format for the &lt;see cref=&quot;T:System.DateTime&quot; /&gt; type.">検証済みの XML 要素または XML 属性の値が、<see cref="T:System.DateTime" /> 型の正しい形式になっていません。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.DateTime&quot; /&gt; is not valid.">試行された <see cref="T:System.DateTime" /> へのキャストは無効です。</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsDouble">
      <summary vsli:raw="Gets the validated XML element or attribute's value as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">検証済みの XML 要素または XML 属性の値を <see cref="T:System.Double" /> として取得します。</summary>
      <returns vsli:raw="The validated XML element or attribute's value as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">検証済みの XML 要素または XML 属性の <see cref="T:System.Double" /> としての値。</returns>
      <exception cref="T:System.FormatException" vsli:raw="The validated XML element or attribute's value is not in the correct format for the &lt;see cref=&quot;T:System.Double&quot; /&gt; type.">検証済みの XML 要素または XML 属性の値が、<see cref="T:System.Double" /> 型の正しい形式になっていません。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.Double&quot; /&gt; is not valid.">試行された <see cref="T:System.Double" /> へのキャストは無効です。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The attempted cast resulted in an overflow.">試行されたキャストで、オーバーフローが発生しました。</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsInt">
      <summary vsli:raw="Gets the validated XML element or attribute's value as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">検証済みの XML 要素または XML 属性の値を <see cref="T:System.Int32" /> として取得します。</summary>
      <returns vsli:raw="The validated XML element or attribute's value as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">検証済みの XML 要素または XML 属性の <see cref="T:System.Int32" /> としての値。</returns>
      <exception cref="T:System.FormatException" vsli:raw="The validated XML element or attribute's value is not in the correct format for the &lt;see cref=&quot;T:System.Int32&quot; /&gt; type.">検証済みの XML 要素または XML 属性の値が、<see cref="T:System.Int32" /> 型の正しい形式になっていません。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.Int32&quot; /&gt; is not valid.">試行された <see cref="T:System.Int32" /> へのキャストは無効です。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The attempted cast resulted in an overflow.">試行されたキャストで、オーバーフローが発生しました。</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsLong">
      <summary vsli:raw="Gets the validated XML element or attribute's value as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">検証済みの XML 要素または XML 属性の値を <see cref="T:System.Int64" /> として取得します。</summary>
      <returns vsli:raw="The validated XML element or attribute's value as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">検証済みの XML 要素または XML 属性の <see cref="T:System.Int64" /> としての値。</returns>
      <exception cref="T:System.FormatException" vsli:raw="The validated XML element or attribute's value is not in the correct format for the &lt;see cref=&quot;T:System.Int64&quot; /&gt; type.">検証済みの XML 要素または XML 属性の値が、<see cref="T:System.Int64" /> 型の正しい形式になっていません。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.Int64&quot; /&gt; is not valid.">試行された <see cref="T:System.Int64" /> へのキャストは無効です。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The attempted cast resulted in an overflow.">試行されたキャストで、オーバーフローが発生しました。</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueType">
      <summary vsli:raw="Gets the .NET type of the validated XML element or attribute.">検証済みの XML 要素または XML 属性の Microsoft .NET Framework 型を取得します。</summary>
      <returns vsli:raw="The .NET type of the validated XML element or attribute. The default value is &lt;see cref=&quot;T:System.String&quot; /&gt;.">検証済みの XML 要素または XML 属性の .NET Framework 型。 既定値は <see cref="T:System.String" /> です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.XmlType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; for the validated XML element or attribute.">検証済みの XML 要素または XML 属性の <see cref="T:System.Xml.Schema.XmlSchemaType" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; for the validated XML element or attribute.">検証済みの XML 要素または XML 属性の <see cref="T:System.Xml.Schema.XmlSchemaType" />。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchema">
      <summary vsli:raw="An in-memory representation of an XML Schema, as specified in the World Wide Web Consortium (W3C) XML Schema Part 1: Structures and XML Schema Part 2: Datatypes].">World Wide Web コンソーシアム (W3C) の「XML Schema Part 1: Structures」 (XML スキーマ パート 1: 構造体) および「XML Schema Part 2: Datatypes」 (XML スキーマ パート 2: データ型) で指定されている XML スキーマのメモリ内表現です。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchema" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.AttributeFormDefault">
      <summary vsli:raw="Gets or sets the form for attributes declared in the target namespace of the schema.">スキーマのターゲット名前空間で宣言された属性の形式を取得または設定します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaForm&quot; /&gt; value that indicates if attributes from the target namespace are required to be qualified with the namespace prefix. The default is &lt;see cref=&quot;F:System.Xml.Schema.XmlSchemaForm.None&quot; /&gt;.">ターゲット名前空間の属性を名前空間プリフィックスで修飾する必要があるかどうかを示す <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 値。 既定値は、<see cref="F:System.Xml.Schema.XmlSchemaForm.None" /> です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.AttributeGroups">
      <summary vsli:raw="Gets the post-schema-compilation value of all the global attribute groups in the schema.">スキーマ内のすべてのグローバル属性グループについて、スキーマ コンパイル後の値を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt; collection of all the global attribute groups in the schema.">スキーマ内のすべてのグローバル属性グループの <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> コレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Attributes">
      <summary vsli:raw="Gets the post-schema-compilation value for all the attributes in the schema.">スキーマ内のすべての属性について、スキーマ コンパイル後の値を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt; collection of all the attributes in the schema.">スキーマ内のすべての属性の <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> コレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.BlockDefault">
      <summary vsli:raw="Gets or sets the &lt;see langword=&quot;blockDefault&quot; /&gt; attribute which sets the default value of the &lt;see langword=&quot;block&quot; /&gt; attribute on element and complex types in the &lt;see langword=&quot;targetNamespace&quot; /&gt; of the schema.">スキーマの <see langword="blockDefault" /> の要素および複合型に対し、<see langword="block" /> 属性の既定値を設定する <see langword="targetNamespace" /> 属性を取得または設定します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDerivationMethod&quot; /&gt; value representing the different methods for preventing derivation. The default value is &lt;see langword=&quot;XmlSchemaDerivationMethod.None&quot; /&gt;.">派生を禁止する各種メソッドを表す <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 値。 既定値は <see langword="XmlSchemaDerivationMethod.None" /> です。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Compile(System.Xml.Schema.ValidationEventHandler)">
      <summary vsli:raw="Compiles the XML Schema Object Model (SOM) into schema information for validation. Used to check the syntactic and semantic structure of the programmatically built SOM. Semantic validation checking is performed during compilation.">XML SOM (Schema Object Model) を検証用のスキーマ情報にコンパイルします。 プログラムによって構築された SOM の構文および意味構造をチェックするために使用します。 意味検証チェックは、コンパイル時に実行されます。</summary>
      <param name="validationEventHandler" vsli:raw="The validation event handler that receives information about XML Schema validation errors.">XML スキーマ検証エラーに関する情報を受け取る検証イベント ハンドラー。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Compile(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlResolver)">
      <summary vsli:raw="Compiles the XML Schema Object Model (SOM) into schema information for validation. Used to check the syntactic and semantic structure of the programmatically built SOM. Semantic validation checking is performed during compilation.">XML SOM (Schema Object Model) を検証用のスキーマ情報にコンパイルします。 プログラムによって構築された SOM の構文および意味構造をチェックするために使用します。 意味検証チェックは、コンパイル時に実行されます。</summary>
      <param name="validationEventHandler" vsli:raw="The validation event handler that receives information about the XML Schema validation errors.">XML スキーマ検証エラーに関する情報を受け取る検証イベント ハンドラー。</param>
      <param name="resolver" vsli:raw="The &lt;see langword=&quot;XmlResolver&quot; /&gt; used to resolve namespaces referenced in &lt;see langword=&quot;include&quot; /&gt; and &lt;see langword=&quot;import&quot; /&gt; elements.">
        <see langword="include" /> 要素および <see langword="import" /> 要素で参照される名前空間を解決するために使用される <see langword="XmlResolver" />。</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.ElementFormDefault">
      <summary vsli:raw="Gets or sets the form for elements declared in the target namespace of the schema.">スキーマのターゲット名前空間で宣言された要素の形式を取得または設定します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaForm&quot; /&gt; value that indicates if elements from the target namespace are required to be qualified with the namespace prefix. The default is &lt;see cref=&quot;F:System.Xml.Schema.XmlSchemaForm.None&quot; /&gt;.">ターゲット名前空間からの要素を、名前空間プリフィックスで修飾する必要があるかどうかを示す <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 値。 既定値は、<see cref="F:System.Xml.Schema.XmlSchemaForm.None" /> です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Elements">
      <summary vsli:raw="Gets the post-schema-compilation value for all the elements in the schema.">スキーマ内のすべての要素について、スキーマ コンパイル後の値を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt; collection of all the elements in the schema.">スキーマ内のすべての要素の <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> コレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.FinalDefault">
      <summary vsli:raw="Gets or sets the &lt;see langword=&quot;finalDefault&quot; /&gt; attribute which sets the default value of the &lt;see langword=&quot;final&quot; /&gt; attribute on elements and complex types in the target namespace of the schema.">スキーマのターゲット名前空間の要素および複合型に対し、<see langword="finalDefault" /> 属性の既定値を設定する <see langword="final" /> 属性を取得または設定します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDerivationMethod&quot; /&gt; value representing the different methods for preventing derivation. The default value is &lt;see langword=&quot;XmlSchemaDerivationMethod.None&quot; /&gt;.">派生を禁止する各種メソッドを表す <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 値。 既定値は <see langword="XmlSchemaDerivationMethod.None" /> です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Groups">
      <summary vsli:raw="Gets the post-schema-compilation value of all the groups in the schema.">スキーマ内のすべてのグループについて、スキーマ コンパイル後の値を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt; collection of all the groups in the schema.">スキーマ内のすべてのグループの <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> コレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Id">
      <summary vsli:raw="Gets or sets the string ID.">文字列 ID を取得または設定します。</summary>
      <returns vsli:raw="The ID of the string. The default value is &lt;see langword=&quot;String.Empty&quot; /&gt;.">文字列の ID。 既定値は <see langword="String.Empty" /> です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Includes">
      <summary vsli:raw="Gets the collection of included and imported schemas.">インクルードされたスキーマとインポートされたスキーマのコレクションを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectCollection&quot; /&gt; of the included and imported schemas.">インクルードされたスキーマとインポートされたスキーマの <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />。</returns>
    </member>
    <member name="F:System.Xml.Schema.XmlSchema.InstanceNamespace">
      <summary vsli:raw="The XML schema instance namespace. This field is constant.">XML スキーマ インスタンスの名前空間。 このフィールドは定数です。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.IsCompiled">
      <summary vsli:raw="Indicates if the schema has been compiled.">スキーマがコンパイル済みかどうかを示します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if schema has been compiled, otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value is &lt;see langword=&quot;false&quot; /&gt;.">スキーマがコンパイル済みである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Items">
      <summary vsli:raw="Gets the collection of schema elements in the schema and is used to add new element types at the &lt;see langword=&quot;schema&quot; /&gt; element level.">スキーマに含まれるスキーマ要素コレクションを取得します。新しい要素型を <see langword="schema" /> 要素レベルで追加する場合に使用します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectCollection&quot; /&gt; of schema elements in the schema.">スキーマに含まれるスキーマ要素の <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />。</returns>
    </member>
    <member name="F:System.Xml.Schema.XmlSchema.Namespace">
      <summary vsli:raw="The XML schema namespace. This field is constant.">XML スキーマの名前空間。 このフィールドは定数です。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Notations">
      <summary vsli:raw="Gets the post-schema-compilation value for all notations in the schema.">スキーマ内のすべての注釈について、スキーマ コンパイル後の値を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt; collection of all notations in the schema.">スキーマ内のすべての注釈の <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> コレクション。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.IO.Stream,System.Xml.Schema.ValidationEventHandler)">
      <summary vsli:raw="Reads an XML Schema from the supplied stream.">提供されたストリームから XML スキーマを読み込みます。</summary>
      <param name="stream" vsli:raw="The supplied data stream.">提供されたデータ ストリーム。</param>
      <param name="validationEventHandler" vsli:raw="The validation event handler that receives information about XML Schema syntax errors.">XML スキーマ構文エラーに関する情報を受け取る検証イベント ハンドラー。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object representing the XML Schema.">XML スキーマを表す <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクト。</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaException&quot; /&gt; is raised if no &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventHandler&quot; /&gt; is specified.">
        <see cref="T:System.Xml.Schema.XmlSchemaException" /> は、<see cref="T:System.Xml.Schema.ValidationEventHandler" /> が指定されていない場合に発生します。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.IO.TextReader,System.Xml.Schema.ValidationEventHandler)">
      <summary vsli:raw="Reads an XML Schema from the supplied &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt;.">提供された <see cref="T:System.IO.TextReader" /> から XML スキーマを読み込みます。</summary>
      <param name="reader" vsli:raw="The &lt;see langword=&quot;TextReader&quot; /&gt; containing the XML Schema to read.">読み取る XML スキーマを格納している <see langword="TextReader" />。</param>
      <param name="validationEventHandler" vsli:raw="The validation event handler that receives information about the XML Schema syntax errors.">XML スキーマ構文エラーに関する情報を受け取る検証イベント ハンドラー。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object representing the XML Schema.">XML スキーマを表す <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクト。</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaException&quot; /&gt; is raised if no &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventHandler&quot; /&gt; is specified.">
        <see cref="T:System.Xml.Schema.XmlSchemaException" /> は、<see cref="T:System.Xml.Schema.ValidationEventHandler" /> が指定されていない場合に発生します。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.Xml.XmlReader,System.Xml.Schema.ValidationEventHandler)">
      <summary vsli:raw="Reads an XML Schema from the supplied &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">提供された <see cref="T:System.Xml.XmlReader" /> から XML スキーマを読み込みます。</summary>
      <param name="reader" vsli:raw="The &lt;see langword=&quot;XmlReader&quot; /&gt; containing the XML Schema to read.">読み取る XML スキーマを格納している <see langword="XmlReader" />。</param>
      <param name="validationEventHandler" vsli:raw="The validation event handler that receives information about the XML Schema syntax errors.">XML スキーマ構文エラーに関する情報を受け取る検証イベント ハンドラー。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object representing the XML Schema.">XML スキーマを表す <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクト。</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaException&quot; /&gt; is raised if no &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventHandler&quot; /&gt; is specified.">
        <see cref="T:System.Xml.Schema.XmlSchemaException" /> は、<see cref="T:System.Xml.Schema.ValidationEventHandler" /> が指定されていない場合に発生します。</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.SchemaTypes">
      <summary vsli:raw="Gets the post-schema-compilation value of all schema types in the schema.">スキーマ内のすべてのスキーマ型について、スキーマ コンパイル後の値を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectCollection&quot; /&gt; of all schema types in the schema.">スキーマ内のすべてのスキーマ型の <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.TargetNamespace">
      <summary vsli:raw="Gets or sets the Uniform Resource Identifier (URI) of the schema target namespace.">スキーマのターゲット名前空間の URI (Uniform Resource Identifier) を取得または設定します。</summary>
      <returns vsli:raw="The schema target namespace.">スキーマのターゲット名前空間。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.UnhandledAttributes">
      <summary vsli:raw="Gets or sets the qualified attributes which do not belong to the schema target namespace.">スキーマのターゲット名前空間に属さない、修飾された属性を取得または設定します。</summary>
      <returns vsli:raw="An array of qualified &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt; objects that do not belong to the schema target namespace.">スキーマのターゲット名前空間に属さない、修飾された <see cref="T:System.Xml.XmlAttribute" /> オブジェクトの配列。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Version">
      <summary vsli:raw="Gets or sets the version of the schema.">スキーマのバージョンを取得または設定します。</summary>
      <returns vsli:raw="The version of the schema. The default value is &lt;see langword=&quot;String.Empty&quot; /&gt;.">スキーマのバージョン。 既定値は <see langword="String.Empty" /> です。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.Stream)">
      <summary vsli:raw="Writes the XML Schema to the supplied data stream.">提供されたデータ ストリームに XML スキーマを書き込みます。</summary>
      <param name="stream" vsli:raw="The supplied data stream.">提供されたデータ ストリーム。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.Stream,System.Xml.XmlNamespaceManager)">
      <summary vsli:raw="Writes the XML Schema to the supplied &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; using the &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; specified.">指定された <see cref="T:System.IO.Stream" /> を使用し、指定された <see cref="T:System.Xml.XmlNamespaceManager" /> に XML スキーマを書き込みます。</summary>
      <param name="stream" vsli:raw="The supplied data stream.">提供されたデータ ストリーム。</param>
      <param name="namespaceManager" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;.">
        <see cref="T:System.Xml.XmlNamespaceManager" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.TextWriter)">
      <summary vsli:raw="Writes the XML Schema to the supplied &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;.">提供された <see cref="T:System.IO.TextWriter" /> に XML スキーマを書き込みます。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to write to.">書き込み先の <see cref="T:System.IO.TextWriter" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.TextWriter,System.Xml.XmlNamespaceManager)">
      <summary vsli:raw="Writes the XML Schema to the supplied &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;.">提供された <see cref="T:System.IO.TextWriter" /> に XML スキーマを書き込みます。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to write to.">書き込み先の <see cref="T:System.IO.TextWriter" />。</param>
      <param name="namespaceManager" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;.">
        <see cref="T:System.Xml.XmlNamespaceManager" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.Xml.XmlWriter)">
      <summary vsli:raw="Writes the XML Schema to the supplied &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">提供された <see cref="T:System.Xml.XmlWriter" /> に XML スキーマを書き込みます。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to write to.">書き込み先の <see cref="T:System.Xml.XmlWriter" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;writer&quot; /&gt; parameter is null.">
        <paramref name="writer" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.Xml.XmlWriter,System.Xml.XmlNamespaceManager)">
      <summary vsli:raw="Writes the XML Schema to the supplied &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">提供された <see cref="T:System.Xml.XmlWriter" /> に XML スキーマを書き込みます。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to write to.">書き込み先の <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="namespaceManager" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;.">
        <see cref="T:System.Xml.XmlNamespaceManager" />。</param>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAll">
      <summary vsli:raw="Represents the World Wide Web Consortium (W3C) &lt;see langword=&quot;all&quot; /&gt; element (compositor).">W3C (World Wide Web Consortium) <see langword="all" /> 要素 (コンポジター) を表します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAll.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAll&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaAll" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAll.Items">
      <summary vsli:raw="Gets the collection of &lt;see langword=&quot;XmlSchemaElement&quot; /&gt; elements contained within the &lt;see langword=&quot;all&quot; /&gt; compositor.">
        <see langword="XmlSchemaElement" /> コンポジター内に格納されている <see langword="all" /> 要素のコレクションを取得します。</summary>
      <returns vsli:raw="The collection of elements contained in &lt;see langword=&quot;XmlSchemaAll&quot; /&gt;.">
        <see langword="XmlSchemaAll" /> に格納されている要素のコレクション。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnnotated">
      <summary vsli:raw="The base class for any element that can contain annotation elements.">注釈要素を格納できる任意の要素の基本クラス。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAnnotated.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAnnotated&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaAnnotated" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.Annotation">
      <summary vsli:raw="Gets or sets the &lt;see langword=&quot;annotation&quot; /&gt; property.">
        <see langword="annotation" /> プロパティを取得または設定します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAnnotation&quot; /&gt; representing the &lt;see langword=&quot;annotation&quot; /&gt; property.">
        <see langword="annotation" /> プロパティを表す <see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.Id">
      <summary vsli:raw="Gets or sets the string id.">文字列 ID を取得または設定します。</summary>
      <returns vsli:raw="The string id. The default is &lt;see langword=&quot;String.Empty&quot; /&gt;. Optional.">文字列 id。既定値は <see langword="String.Empty" /> です。 任意。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.UnhandledAttributes">
      <summary vsli:raw="Gets or sets the qualified attributes that do not belong to the current schema's target namespace.">現在のスキーマのターゲット名前空間に属さない、修飾された属性を取得または設定します。</summary>
      <returns vsli:raw="An array of qualified &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt; objects that do not belong to the schema's target namespace.">スキーマのターゲット名前空間に属さない、修飾された <see cref="T:System.Xml.XmlAttribute" /> オブジェクトの配列。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnnotation">
      <summary vsli:raw="Represents the World Wide Web Consortium (W3C) &lt;see langword=&quot;annotation&quot; /&gt; element.">W3C (World Wide Web Consortium) <see langword="annotation" /> 要素を表します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAnnotation.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAnnotation&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaAnnotation" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.Id">
      <summary vsli:raw="Gets or sets the string id.">文字列 ID を取得または設定します。</summary>
      <returns vsli:raw="The string id. The default is &lt;see langword=&quot;String.Empty&quot; /&gt;. Optional.">文字列 id。既定値は <see langword="String.Empty" /> です。 任意。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.Items">
      <summary vsli:raw="Gets the &lt;see langword=&quot;Items&quot; /&gt; collection that is used to store the &lt;see langword=&quot;appinfo&quot; /&gt; and &lt;see langword=&quot;documentation&quot; /&gt; child elements.">
        <see langword="Items" /> 子要素および <see langword="appinfo" /> 子要素を格納するために使用される <see langword="documentation" /> コレクションを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectCollection&quot; /&gt; of &lt;see langword=&quot;appinfo&quot; /&gt; and &lt;see langword=&quot;documentation&quot; /&gt; child elements.">
        <see langword="appinfo" /> 子要素および<see langword="documentation" /> 子要素の <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.UnhandledAttributes">
      <summary vsli:raw="Gets or sets the qualified attributes that do not belong to the schema's target namespace.">スキーマのターゲット名前空間に属さない、修飾された属性を取得または設定します。</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt; objects that do not belong to the schema's target namespace.">スキーマのターゲット名前空間に属さない <see cref="T:System.Xml.XmlAttribute" /> オブジェクトの配列。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAny">
      <summary vsli:raw="Represents the World Wide Web Consortium (W3C) &lt;see langword=&quot;any&quot; /&gt; element.">W3C (World Wide Web Consortium) <see langword="any" /> 要素を表します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAny.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAny&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaAny" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAny.Namespace">
      <summary vsli:raw="Gets or sets the namespaces containing the elements that can be used.">使用できる要素を格納している名前空間を取得または設定します。</summary>
      <returns vsli:raw="Namespaces for elements that are available for use. The default is &lt;see langword=&quot;##any&quot; /&gt;. Optional.">使用できる要素の名前空間。 既定値は、<see langword="##any" /> です。 任意。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAny.ProcessContents">
      <summary vsli:raw="Gets or sets information about how an application or XML processor should handle the validation of XML documents for the elements specified by the &lt;see langword=&quot;any&quot; /&gt; element.">
        <see langword="any" /> 要素によって指定された要素の XML ドキュメントの検証が、アプリケーションつまり XML プロセッサによってどのように処理されるかについての情報を、取得または設定します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaContentProcessing&quot; /&gt; values. If no &lt;see langword=&quot;processContents&quot; /&gt; attribute is specified, the default is &lt;see langword=&quot;Strict&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaContentProcessing" /> 値のいずれか 1 つ。 <see langword="processContents" /> 属性が指定されていない場合、既定値は <see langword="Strict" /> です。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnyAttribute">
      <summary vsli:raw="Represents the World Wide Web Consortium (W3C) &lt;see langword=&quot;anyAttribute&quot; /&gt; element.">W3C (World Wide Web Consortium) <see langword="anyAttribute" /> 要素を表します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAnyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAnyAttribute&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnyAttribute.Namespace">
      <summary vsli:raw="Gets or sets the namespaces containing the attributes that can be used.">使用できる属性を格納している名前空間を取得または設定します。</summary>
      <returns vsli:raw="Namespaces for attributes that are available for use. The default is &lt;see langword=&quot;##any&quot; /&gt;. Optional.">使用できる属性の名前空間。 既定値は、<see langword="##any" /> です。 任意。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnyAttribute.ProcessContents">
      <summary vsli:raw="Gets or sets information about how an application or XML processor should handle the validation of XML documents for the attributes specified by the &lt;see langword=&quot;anyAttribute&quot; /&gt; element.">XML ドキュメントの、<see langword="anyAttribute" /> 要素によって指定された属性の検証をアプリケーションつまり XML プロセッサがどのように処理するかについての情報を取得または設定します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaContentProcessing&quot; /&gt; values. If no &lt;see langword=&quot;processContents&quot; /&gt; attribute is specified, the default is &lt;see langword=&quot;Strict&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaContentProcessing" /> 値のいずれか 1 つ。 <see langword="processContents" /> 属性が指定されていない場合、既定値は <see langword="Strict" /> です。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAppInfo">
      <summary vsli:raw="Represents the World Wide Web Consortium (W3C) &lt;see langword=&quot;appinfo&quot; /&gt; element.">W3C (World Wide Web Consortium) <see langword="appinfo" /> 要素を表します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAppInfo.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAppInfo&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaAppInfo" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAppInfo.Markup">
      <summary vsli:raw="Gets or sets an array of &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; objects that represents the &lt;see langword=&quot;appinfo&quot; /&gt; child nodes.">
        <see langword="appinfo" /> の子ノードを表す <see cref="T:System.Xml.XmlNode" /> オブジェクトの配列を取得または設定します。</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; objects that represents the &lt;see langword=&quot;appinfo&quot; /&gt; child nodes.">
        <see langword="appinfo" /> の子ノードを表す <see cref="T:System.Xml.XmlNode" /> オブジェクトの配列。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAppInfo.Source">
      <summary vsli:raw="Gets or sets the source of the application information.">アプリケーション情報のソースを取得または設定します。</summary>
      <returns vsli:raw="A Uniform Resource Identifier (URI) reference. The default is &lt;see langword=&quot;String.Empty&quot; /&gt;. Optional.">URI (Uniform Resource Identifier) 参照。 既定値は、<see langword="String.Empty" /> です。 任意。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttribute">
      <summary vsli:raw="Represents the &lt;see langword=&quot;attribute&quot; /&gt; element from the XML Schema as specified by the World Wide Web Consortium (W3C). Attributes provide additional information for other document elements. The attribute tag is nested between the tags of a document's element for the schema. The XML document displays attributes as named items in the opening tag of an element.">W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="attribute" /> 要素を表します。 属性とは、他のドキュメント要素の追加情報を提供するものです。 属性タグは、スキーマのドキュメント要素のタグ間に入れ子にして指定します。 XML ドキュメントでは、要素の開始タグの名前付き項目として属性が表示されます。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.AttributeSchemaType">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt; object representing the type of the attribute based on the &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaAttribute.SchemaType&quot; /&gt; or &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName&quot; /&gt; of the attribute.">属性の <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> または <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType" /> に基づいて、属性の型を表す <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName" /> オブジェクトを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt; object.">
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.AttributeType">
      <summary vsli:raw="Gets the common language runtime (CLR) object based on the &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaAttribute.SchemaType&quot; /&gt; or &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName&quot; /&gt; of the attribute that holds the post-compilation value of the &lt;see langword=&quot;AttributeType&quot; /&gt; property.">
        <see langword="AttributeType" /> プロパティのコンパイル後の値を保持する属性の <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType" /> または <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName" /> を基に、共通言語ランタイム (CRL: Common Language Runtime) オブジェクトを取得します。</summary>
      <returns vsli:raw="The common runtime library (CLR) object that holds the post-compilation value of the &lt;see langword=&quot;AttributeType&quot; /&gt; property.">
        <see langword="AttributeType" /> プロパティのコンパイル後の値を保持する共通言語ランタイム (CLR) オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.DefaultValue">
      <summary vsli:raw="Gets or sets the default value for the attribute.">属性の既定値を取得または設定します。</summary>
      <returns vsli:raw="The default value for the attribute. The default is a null reference. Optional.">この属性の既定値。 既定値は null 参照です。 任意。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.FixedValue">
      <summary vsli:raw="Gets or sets the fixed value for the attribute.">属性の固定値を取得または設定します。</summary>
      <returns vsli:raw="The fixed value for the attribute. The default is null. Optional.">属性の固定値。 既定値は null です。 任意。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Form">
      <summary vsli:raw="Gets or sets the form for the attribute.">属性の形式を取得または設定します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaForm&quot; /&gt; values. The default is the value of the &lt;see cref=&quot;P:System.Xml.Schema.XmlSchema.AttributeFormDefault&quot; /&gt; of the schema element containing the attribute. Optional.">
        <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 値のいずれか 1 つ。 既定値は、この属性を格納しているスキーマ要素の <see cref="P:System.Xml.Schema.XmlSchema.AttributeFormDefault" /> の値です。 任意。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Name">
      <summary vsli:raw="Gets or sets the name of the attribute.">属性の名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the attribute.">属性の名前。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.QualifiedName">
      <summary vsli:raw="Gets the qualified name for the attribute.">属性の修飾名を取得します。</summary>
      <returns vsli:raw="The post-compilation value of the &lt;see langword=&quot;QualifiedName&quot; /&gt; property.">
        <see langword="QualifiedName" /> プロパティのコンパイル後の値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.RefName">
      <summary vsli:raw="Gets or sets the name of an attribute declared in this schema (or another schema indicated by the specified namespace).">このスキーマまたは指定した名前空間で示された別のスキーマで宣言された属性の名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the attribute declared.">宣言された属性の名前。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType">
      <summary vsli:raw="Gets or sets the attribute type to a simple type.">属性型を取得、または単純型に設定します。</summary>
      <returns vsli:raw="The simple type defined in this schema.">このスキーマで定義された単純型。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName">
      <summary vsli:raw="Gets or sets the name of the simple type defined in this schema (or another schema indicated by the specified namespace).">このスキーマまたは指定した名前空間で示された別のスキーマで定義された単純型の名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the simple type.">単純型の名前。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Use">
      <summary vsli:raw="Gets or sets information about how the attribute is used.">属性がどのように使用されたかに関する情報を取得または設定します。</summary>
      <returns vsli:raw="One of the following values: None, Prohibited, Optional, or Required. The default is Optional. Optional.">None、Prohibited、Optional、または Required の値の 1 つ。 既定値は Optional です。 任意。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttributeGroup">
      <summary vsli:raw="Represents the &lt;see langword=&quot;attributeGroup&quot; /&gt; element from the XML Schema as specified by the World Wide Web Consortium (W3C). AttributesGroups provides a mechanism to group a set of attribute declarations so that they can be incorporated as a group into complex type definitions.">W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="attributeGroup" /> 要素を表します。 AttributesGroups は、属性宣言のセットをグループ化し、グループとして複合型定義に組み込むことができるようにします。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAttributeGroup.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttributeGroup&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroup" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.AnyAttribute">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAnyAttribute&quot; /&gt; component of the attribute group.">属性グループの <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> コンポーネントを取得または設定します。</summary>
      <returns vsli:raw="The World Wide Web Consortium (W3C) &lt;see langword=&quot;anyAttribute&quot; /&gt; element.">W3C (World Wide Web Consortium) <see langword="anyAttribute" /> 要素。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.Attributes">
      <summary vsli:raw="Gets the collection of attributes for the attribute group. Contains &lt;see langword=&quot;XmlSchemaAttribute&quot; /&gt; and &lt;see langword=&quot;XmlSchemaAttributeGroupRef&quot; /&gt; elements.">属性グループの属性のコレクションを取得します。 <see langword="XmlSchemaAttribute" /> 要素と <see langword="XmlSchemaAttributeGroupRef" /> 要素を格納します。</summary>
      <returns vsli:raw="The collection of attributes for the attribute group.">属性グループの属性のコレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.Name">
      <summary vsli:raw="Gets or sets the name of the attribute group.">属性グループの名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the attribute group.">属性グループの名前。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.QualifiedName">
      <summary vsli:raw="Gets the qualified name of the attribute group.">属性グループの修飾名を取得します。</summary>
      <returns vsli:raw="The qualified name of the attribute group.">属性グループの修飾名。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.RedefinedAttributeGroup">
      <summary vsli:raw="Gets the redefined attribute group property from the XML Schema.">再定義された属性グループのプロパティを XML スキーマから取得します。</summary>
      <returns vsli:raw="The redefined attribute group property.">再定義された属性グループのプロパティ。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttributeGroupRef">
      <summary vsli:raw="Represents the &lt;see langword=&quot;attributeGroup&quot; /&gt; element with the &lt;see langword=&quot;ref&quot; /&gt; attribute from the XML Schema as specified by the World Wide Web Consortium (W3C). AttributesGroupRef is the reference for an attributeGroup, name property contains the attribute group being referenced.">W3C (World Wide Web Consortium) で指定された XML スキーマの <see langword="ref" /> 属性を持つ <see langword="attributeGroup" /> 要素を表します。 AttributesGroupRef は attributeGroup の参照であり、参照される属性グループは name プロパティに格納されます。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAttributeGroupRef.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttributeGroupRef&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroupRef.RefName">
      <summary vsli:raw="Gets or sets the name of the referenced &lt;see langword=&quot;attributeGroup&quot; /&gt; element.">参照される <see langword="attributeGroup" /> 要素の名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the referenced attribute group. The value must be a QName.">参照される属性グループの名前。 値は QName である必要があります。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaChoice">
      <summary vsli:raw="Represents the &lt;see langword=&quot;choice&quot; /&gt; element (compositor) from the XML Schema as specified by the World Wide Web Consortium (W3C). The &lt;see langword=&quot;choice&quot; /&gt; allows only one of its children to appear in an instance.">W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="choice" /> 要素 (コンポジター) を表します。 <see langword="choice" /> では、子要素のうち、いずれか 1 つだけが出現できることを意味します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaChoice.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaChoice&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaChoice" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaChoice.Items">
      <summary vsli:raw="Gets the collection of the elements contained with the compositor (&lt;see langword=&quot;choice&quot; /&gt;): &lt;see langword=&quot;XmlSchemaElement&quot; /&gt;, &lt;see langword=&quot;XmlSchemaGroupRef&quot; /&gt;, &lt;see langword=&quot;XmlSchemaChoice&quot; /&gt;, &lt;see langword=&quot;XmlSchemaSequence&quot; /&gt;, or &lt;see langword=&quot;XmlSchemaAny&quot; /&gt;.">コンポジター (<see langword="choice" />) を使用して、格納されている要素のコレクションである <see langword="XmlSchemaElement" />、<see langword="XmlSchemaGroupRef" />、<see langword="XmlSchemaChoice" />、<see langword="XmlSchemaSequence" />、または <see langword="XmlSchemaAny" /> を取得します。</summary>
      <returns vsli:raw="The collection of elements contained within &lt;see langword=&quot;XmlSchemaChoice&quot; /&gt;.">
        <see langword="XmlSchemaChoice" /> 内に格納されている要素のコレクション。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCollection">
      <summary vsli:raw="Contains a cache of XML Schema definition language (XSD) and XML-Data Reduced (XDR) schemas. The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaCollection&quot; /&gt; class is obsolete. Use &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; instead.">XML スキーマ定義言語 (XSD: XML Schema Definition Language) スキーマおよび XDR (XML-Data Reduced) スキーマのキャッシュを格納します。 <see cref="T:System.Xml.Schema.XmlSchemaCollection" /> クラスは廃止されています。 代わりに、<see cref="T:System.Xml.Schema.XmlSchemaSet" /> を使用してください。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlSchemaCollection&quot; /&gt; class.">
        <see langword="XmlSchemaCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.#ctor(System.Xml.XmlNameTable)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlSchemaCollection&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;. The &lt;see langword=&quot;XmlNameTable&quot; /&gt; is used when loading schemas.">
        <see langword="XmlSchemaCollection" /> を指定して、<see cref="T:System.Xml.XmlNameTable" /> クラスの新しいインスタンスを初期化します。 スキーマを読み込むときに、<see langword="XmlNameTable" /> が使用されます。</summary>
      <param name="nametable" vsli:raw="The &lt;see langword=&quot;XmlNameTable&quot; /&gt; to use.">使用する <see langword="XmlNameTable" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.String)">
      <summary vsli:raw="Adds the schema located by the given URL into the schema collection.">指定した URL で配置されたスキーマをスキーマ コレクションに追加します。</summary>
      <param name="ns" vsli:raw="The namespace URI associated with the schema. For XML Schemas, this will typically be the &lt;see langword=&quot;targetNamespace&quot; /&gt;.">スキーマに関連付けられた名前空間 URI。 XML スキーマの場合、通常これは <see langword="targetNamespace" /> です。</param>
      <param name="uri" vsli:raw="The URL that specifies the schema to load.">読み込むスキーマを指定する URL。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; added to the schema collection; &lt;see langword=&quot;null&quot; /&gt; if the schema being added is an XDR schema or if there are compilation errors in the schema.">スキーマ コレクションに追加される <see cref="T:System.Xml.Schema.XmlSchema" />。追加されるスキーマが XDR スキーマであるか、またはスキーマにコンパイル エラーがある場合は <see langword="null" />。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The schema is not a valid schema.">スキーマが、有効なスキーマではありません。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.Xml.XmlReader)">
      <summary vsli:raw="Adds the schema contained in the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to the schema collection.">
        <see cref="T:System.Xml.XmlReader" /> に格納されているスキーマをスキーマ コレクションに追加します。</summary>
      <param name="ns" vsli:raw="The namespace URI associated with the schema. For XML Schemas, this will typically be the &lt;see langword=&quot;targetNamespace&quot; /&gt;.">スキーマに関連付けられた名前空間 URI。 XML スキーマの場合、通常これは <see langword="targetNamespace" /> です。</param>
      <param name="reader" vsli:raw="&lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; containing the schema to add.">追加するスキーマを格納する <see cref="T:System.Xml.XmlReader" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; added to the schema collection; &lt;see langword=&quot;null&quot; /&gt; if the schema being added is an XDR schema or if there are compilation errors in the schema.">スキーマ コレクションに追加される <see cref="T:System.Xml.Schema.XmlSchema" />。追加されるスキーマが XDR スキーマであるか、またはスキーマにコンパイル エラーがある場合は <see langword="null" />。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The schema is not a valid schema.">スキーマが、有効なスキーマではありません。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.Xml.XmlReader,System.Xml.XmlResolver)">
      <summary vsli:raw="Adds the schema contained in the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to the schema collection. The specified &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is used to resolve any external resources.">
        <see cref="T:System.Xml.XmlReader" /> に格納されているスキーマをスキーマ コレクションに追加します。 指定した <see cref="T:System.Xml.XmlResolver" /> は、外部リソースを解決するために使用します。</summary>
      <param name="ns" vsli:raw="The namespace URI associated with the schema. For XML Schemas, this will typically be the &lt;see langword=&quot;targetNamespace&quot; /&gt;.">スキーマに関連付けられた名前空間 URI。 XML スキーマの場合、通常これは <see langword="targetNamespace" /> です。</param>
      <param name="reader" vsli:raw="&lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; containing the schema to add.">追加するスキーマを格納する <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve namespaces referenced in &lt;see langword=&quot;include&quot; /&gt; and &lt;see langword=&quot;import&quot; /&gt; elements or &lt;see langword=&quot;x-schema&quot; /&gt; attribute (XDR schemas). If this is &lt;see langword=&quot;null&quot; /&gt;, external references are not resolved.">
        <see langword="include" /> 要素、<see langword="import" /> 要素、または <see langword="x-schema" /> 属性 (XDR スキーマ) で参照される名前空間を解決するために使用される <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合は、外部参照が解決されません。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; added to the schema collection; &lt;see langword=&quot;null&quot; /&gt; if the schema being added is an XDR schema or if there are compilation errors in the schema.">スキーマ コレクションに追加される <see cref="T:System.Xml.Schema.XmlSchema" />。追加されるスキーマが XDR スキーマであるか、またはスキーマにコンパイル エラーがある場合は <see langword="null" />。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The schema is not a valid schema.">スキーマが、有効なスキーマではありません。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchema)">
      <summary vsli:raw="Adds the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; to the collection.">
        <see cref="T:System.Xml.Schema.XmlSchema" /> をコレクションに追加します。</summary>
      <param name="schema" vsli:raw="The &lt;see langword=&quot;XmlSchema&quot; /&gt; to add to the collection.">コレクションに追加する <see langword="XmlSchema" />。</param>
      <returns vsli:raw="The &lt;see langword=&quot;XmlSchema&quot; /&gt; object.">
        <see langword="XmlSchema" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchema,System.Xml.XmlResolver)">
      <summary vsli:raw="Adds the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; to the collection. The specified &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is used to resolve any external references.">
        <see cref="T:System.Xml.Schema.XmlSchema" /> をコレクションに追加します。 指定した <see cref="T:System.Xml.XmlResolver" /> は、外部参照を解決するために使用します。</summary>
      <param name="schema" vsli:raw="The &lt;see langword=&quot;XmlSchema&quot; /&gt; to add to the collection.">コレクションに追加する <see langword="XmlSchema" />。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve namespaces referenced in &lt;see langword=&quot;include&quot; /&gt; and &lt;see langword=&quot;import&quot; /&gt; elements. If this is &lt;see langword=&quot;null&quot; /&gt;, external references are not resolved.">
        <see langword="include" /> 要素および <see langword="import" /> 要素で参照される名前空間を解決するために使用される <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合は、外部参照が解決されません。</param>
      <returns vsli:raw="The &lt;see langword=&quot;XmlSchema&quot; /&gt; added to the schema collection.">スキーマ コレクションに追加する <see langword="XmlSchema" />。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The schema is not a valid schema.">スキーマが、有効なスキーマではありません。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchemaCollection)">
      <summary vsli:raw="Adds all the namespaces defined in the given collection (including their associated schemas) to this collection.">指定したコレクションで定義されたすべての名前空間 (関連付けられたスキーマを含む) をこのコレクションに追加します。</summary>
      <param name="schema" vsli:raw="The &lt;see langword=&quot;XmlSchemaCollection&quot; /&gt; you want to add to this collection.">このコレクションに追加する <see langword="XmlSchemaCollection" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Contains(System.String)">
      <summary vsli:raw="Gets a value indicating whether a schema with the specified namespace is in the collection.">指定した名前空間を持つスキーマがコレクション内に存在するかどうかを示す値を取得します。</summary>
      <param name="ns" vsli:raw="The namespace URI associated with the schema. For XML Schemas, this will typically be the target namespace.">スキーマに関連付けられた名前空間 URI。 XML スキーマの場合、通常これはターゲット名前空間です。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a schema with the specified namespace is in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した名前空間を持つスキーマがコレクション内に存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Contains(System.Xml.Schema.XmlSchema)">
      <summary vsli:raw="Gets a value indicating whether the &lt;see langword=&quot;targetNamespace&quot; /&gt; of the specified &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; is in the collection.">指定した <see cref="T:System.Xml.Schema.XmlSchema" /> の <see langword="targetNamespace" /> がコレクション内に存在するかどうかを示す値を取得します。</summary>
      <param name="schema" vsli:raw="The &lt;see langword=&quot;XmlSchema&quot; /&gt; object.">
        <see langword="XmlSchema" /> オブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is a schema in the collection with the same &lt;see langword=&quot;targetNamespace&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">同じ <see langword="true" /> を持つスキーマがコレクション内に存在する場合は <see langword="targetNamespace" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)">
      <summary vsli:raw="Copies all the &lt;see langword=&quot;XmlSchema&quot; /&gt; objects from this collection into the given array starting at the given index.">このコレクション内のすべての <see langword="XmlSchema" /> オブジェクトを、指定したインデックスから始まる指定した配列にコピーします。</summary>
      <param name="array" vsli:raw="The array to copy the objects to.">オブジェクトのコピー先の配列。</param>
      <param name="index" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; where copying will begin.">
        <paramref name="array" /> 内のコピー開始位置を示すインデックス。</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.Count">
      <summary vsli:raw="Gets the number of namespaces defined in this collection.">このコレクションで定義されている名前空間の数を取得します。</summary>
      <returns vsli:raw="The number of namespaces defined in this collection.">このコレクションで定義されている名前空間の数。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.GetEnumerator">
      <summary vsli:raw="Provides support for the &quot;for each&quot; style iteration over the collection of schemas.">スキーマのコレクションに対する "for each" スタイルの反復をサポートします。</summary>
      <returns vsli:raw="An enumerator for iterating over all schemas in the current collection.">現在のコレクションのすべてのスキーマを反復する列挙子。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.Item(System.String)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; associated with the given namespace URI.">指定した名前空間 URI に関連付けられている <see cref="T:System.Xml.Schema.XmlSchema" /> を取得します。</summary>
      <param name="ns" vsli:raw="The namespace URI associated with the schema you want to return. This will typically be the &lt;see langword=&quot;targetNamespace&quot; /&gt; of the schema.">返すスキーマに関連付けられている名前空間 URI。 通常、これはそのスキーマの <see langword="targetNamespace" /> です。</param>
      <returns vsli:raw="The &lt;see langword=&quot;XmlSchema&quot; /&gt; associated with the namespace URI; &lt;see langword=&quot;null&quot; /&gt; if there is no loaded schema associated with the given namespace or if the namespace is associated with an XDR schema.">名前空間 URI に関連付けられている <see langword="XmlSchema" />。指定した名前空間に関連付けられているスキーマが読み込まれていないか、名前空間が XDR スキーマに関連付けられている場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.NameTable">
      <summary vsli:raw="Gets the default &lt;see langword=&quot;XmlNameTable&quot; /&gt; used by the &lt;see langword=&quot;XmlSchemaCollection&quot; /&gt; when loading new schemas.">新しいスキーマを読み込むときに、<see langword="XmlNameTable" /> で使用される既定の <see langword="XmlSchemaCollection" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see langword=&quot;XmlNameTable&quot; /&gt;.">
        <see langword="XmlNameTable" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaCollection.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)&quot; /&gt;.">このメンバーの詳細については、「<see cref="M:System.Xml.Schema.XmlSchemaCollection.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)" />」をご覧ください。</summary>
      <param name="array" vsli:raw="The array to copy the objects to.">オブジェクトのコピー先の配列。</param>
      <param name="index" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; where copying will begin.">
        <paramref name="array" /> 内のコピー開始位置を示すインデックス。</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaCollection.Count&quot; /&gt;.">このメンバーの詳細については、「<see cref="P:System.Xml.Schema.XmlSchemaCollection.Count" />」をご覧ください。</summary>
      <returns vsli:raw="The count of the items in the collection.">コレクション内の項目の数。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#IsSynchronized&quot; /&gt;.">このメンバーの説明については、<see cref="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#IsSynchronized" /> のトピックを参照してください。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is synchronized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクションが同期をとられている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#SyncRoot&quot; /&gt;.">このメンバーの説明については、<see cref="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#SyncRoot" /> のトピックを参照してください。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;P:System.Collections.ICollection.SyncRoot&quot; /&gt; object that can be used to synchronize access to the collection.">コレクションへのアクセスを同期するために使用できるオブジェクト。<see cref="P:System.Collections.ICollection.SyncRoot" /></returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaCollection.GetEnumerator&quot; /&gt;.">このメンバーの詳細については、「<see cref="M:System.Xml.Schema.XmlSchemaCollection.GetEnumerator" />」をご覧ください。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the collection.">コレクションの <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaCollection.ValidationEventHandler">
      <summary vsli:raw="Sets an event handler for receiving information about the XDR and XML schema validation errors.">XDR および XML スキーマ検証エラーに関する情報を受信するためのイベント ハンドラーを設定します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCollectionEnumerator">
      <summary vsli:raw="Supports a simple iteration over a collection. This class cannot be inherited.">コレクションに対する単純な反復処理をサポートします。 このクラスは継承できません。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.Current">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; in the collection.">コレクション内の現在の <see cref="T:System.Xml.Schema.XmlSchema" /> を取得します。</summary>
      <returns vsli:raw="The current &lt;see langword=&quot;XmlSchema&quot; /&gt; in the collection.">コレクション内の現在の <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next schema in the collection.">列挙子をコレクション内の次のスキーマに進めます。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the move was successful; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">正常に移動した場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaCollectionEnumerator.Current&quot; /&gt;.">このメンバーの詳細については、「<see cref="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.Current" />」をご覧ください。</summary>
      <returns vsli:raw="The current node.">現在のノード。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#MoveNext">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaCollectionEnumerator.MoveNext&quot; /&gt;.">このメンバーの詳細については、「<see cref="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.MoveNext" />」をご覧ください。</summary>
      <returns vsli:raw="The next node.">次のノード。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#Reset&quot; /&gt;.">このメンバーの詳細については、「<see cref="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#Reset" />」をご覧ください。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCompilationSettings">
      <summary vsli:raw="Provides schema compilation options for the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; class This class cannot be inherited.">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> クラスのスキーマ コンパイル オプションを提供します。このクラスは、継承できません。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCompilationSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaCompilationSettings&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck">
      <summary vsli:raw="Gets or sets a value indicating whether the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; should check for Unique Particle Attribution (UPA) violations.">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> で UPA 違反をチェックする必要があるかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; should check for Unique Particle Attribution (UPA) violations; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> で UPA 違反をチェックする必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContent">
      <summary vsli:raw="Represents the &lt;see langword=&quot;complexContent&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class represents the complex content model for complex types. It contains extensions or restrictions on a complex type that has either only elements or mixed content.">W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="complexContent" /> 要素を表します。 このクラスは、複合型の複合コンテンツ モデルを表します。 要素のみ、または混合コンテンツを含む複合型に対しての拡張または制限を格納します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexContent.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaComplexContent&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaComplexContent" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContent.Content">
      <summary vsli:raw="Gets or sets the content.">コンテンツを取得または設定します。</summary>
      <returns vsli:raw="One of either the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaComplexContentRestriction&quot; /&gt; or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaComplexContentExtension&quot; /&gt; classes.">
        <see cref="T:System.Xml.Schema.XmlSchemaComplexContentRestriction" /> クラスまたは <see cref="T:System.Xml.Schema.XmlSchemaComplexContentExtension" /> クラスのいずれか 1 つ。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContent.IsMixed">
      <summary vsli:raw="Gets or sets information that determines if the type has a mixed content model.">型が混合コンテンツ モデルを持つかどうかを判断する情報を取得または設定します。</summary>
      <returns vsli:raw="If this property is &lt;see langword=&quot;true&quot; /&gt;, character data is allowed to appear between the child elements of the complex type (mixed content model). The default is &lt;see langword=&quot;false&quot; /&gt;. Optional.">このプロパティが <see langword="true" /> の場合は、文字データを複合型 (混合コンテンツ モデル) の子要素間に表示できます。 既定値は、<see langword="false" /> です。 任意。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContentExtension">
      <summary vsli:raw="Represents the &lt;see langword=&quot;extension&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is for complex types with complex content model derived by extension. It extends the complex type by adding attributes or elements.">W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="extension" /> 要素を表します。 このクラスは、拡張によって派生した複合コンテンツ モデルを持つ複合型に使用されます。 属性または要素を追加して、複合型を拡張します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexContentExtension.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaComplexContentExtension&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaComplexContentExtension" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.AnyAttribute">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAnyAttribute&quot; /&gt; component of the complex content model.">複合コンテンツ モデルの <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> コンポーネントを取得または設定します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAnyAttribute&quot; /&gt; component of the complex content model.">複合コンテンツ モデルの <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> コンポーネント。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.Attributes">
      <summary vsli:raw="Gets the collection of attributes for the complex content. Contains &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt; and &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttributeGroupRef&quot; /&gt; elements.">複合コンテンツの属性のコレクションを取得します。 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 要素と <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 要素を格納します。</summary>
      <returns vsli:raw="The collection of attributes for the complex content.">複合コンテンツの属性のコレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.BaseTypeName">
      <summary vsli:raw="Gets or sets the name of the complex type from which this type is derived by extension.">拡張によるこの型の派生元の複合型の名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the complex type from which this type is derived by extension.">拡張によるこの型の派生元の複合型の名前。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.Particle">
      <summary vsli:raw="Gets or sets one of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaGroupRef&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaChoice&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAll&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSequence&quot; /&gt; classes.">
        <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" />、または <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> の各クラスのいずれか 1 つを取得または設定します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaGroupRef&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaChoice&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAll&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSequence&quot; /&gt; classes.">
        <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" />、または <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> の各クラスのいずれか 1 つ。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContentRestriction">
      <summary vsli:raw="Represents the &lt;see langword=&quot;restriction&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is for complex types with a complex content model derived by restriction. It restricts the contents of the complex type to a subset of the inherited complex type.">W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="restriction" /> 要素を表します。 このクラスは、制限によって派生した複合コンテンツ モデルを持つ複合型に使用されます。 複合型のコンテンツを、継承される複合型のサブセットに制限します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexContentRestriction.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaComplexContentRestriction&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaComplexContentRestriction" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.AnyAttribute">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAnyAttribute&quot; /&gt; component of the complex content model.">複合コンテンツ モデルの <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> コンポーネントを取得または設定します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAnyAttribute&quot; /&gt; component of the complex content model.">複合コンテンツ モデルの <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> コンポーネント。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.Attributes">
      <summary vsli:raw="Gets the collection of attributes for the complex type. Contains the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt; and &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttributeGroupRef&quot; /&gt; elements.">複合型の属性のコレクションを取得します。 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 要素と <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 要素を格納します。</summary>
      <returns vsli:raw="The collection of attributes for the complex type.">複合型の属性のコレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.BaseTypeName">
      <summary vsli:raw="Gets or sets the name of a complex type from which this type is derived by restriction.">制限によるこの型の派生元の複合型の名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the complex type from which this type is derived by restriction.">制限によるこの型の派生元の複合型の名前。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.Particle">
      <summary vsli:raw="Gets or sets one of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaGroupRef&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaChoice&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAll&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSequence&quot; /&gt; classes.">
        <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" />、または <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> の各クラスのいずれか 1 つを取得または設定します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaGroupRef&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaChoice&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAll&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSequence&quot; /&gt; classes.">
        <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" />、または <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> の各クラスのいずれか 1 つ。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexType">
      <summary vsli:raw="Represents the &lt;see langword=&quot;complexType&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class defines a complex type that determines the set of attributes and content of an element.">W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="complexType" /> 要素を表します。 このクラスは、要素の属性およびコンテンツのセットを決定する複合型を定義します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexType.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaComplexType&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AnyAttribute">
      <summary vsli:raw="Gets or sets the value for the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAnyAttribute&quot; /&gt; component of the complex type.">複合型の <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> コンポーネントの値を取得または設定します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAnyAttribute&quot; /&gt; component of the complex type.">複合型の <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> コンポーネント。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Attributes">
      <summary vsli:raw="Gets the collection of attributes for the complex type.">複合型の属性のコレクションを取得します。</summary>
      <returns vsli:raw="Contains &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt; and &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttributeGroupRef&quot; /&gt; classes.">
        <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> クラスおよび <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> クラスを格納します。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AttributeUses">
      <summary vsli:raw="Gets the collection of all the complied attributes of this complex type and its base types.">この複合型およびその基本型について、コンパイル済みのすべての属性のコレクションを取得します。</summary>
      <returns vsli:raw="The collection of all the attributes from this complex type and its base types. The post-compilation value of the &lt;see langword=&quot;AttributeUses&quot; /&gt; property.">この複合型およびその基本型のすべての属性のコレクション。 <see langword="AttributeUses" /> プロパティのコンパイル後の値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AttributeWildcard">
      <summary vsli:raw="Gets the post-compilation value for &lt;see langword=&quot;anyAttribute&quot; /&gt; for this complex type and its base type(s).">この複合型およびその基本型について、<see langword="anyAttribute" /> のコンパイル後の値を取得します。</summary>
      <returns vsli:raw="The post-compilation value of the &lt;see langword=&quot;anyAttribute&quot; /&gt; element.">
        <see langword="anyAttribute" /> 要素のコンパイル後の値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Block">
      <summary vsli:raw="Gets or sets the &lt;see langword=&quot;block&quot; /&gt; attribute.">
        <see langword="block" /> 属性を取得または設定します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;block&quot; /&gt; attribute prevents a complex type from being used in the specified type of derivation. The default is &lt;see langword=&quot;XmlSchemaDerivationMethod.None&quot; /&gt;. Optional.">
        <see langword="block" /> 属性は、複合型が、指定した派生型で使用されないようにします。 既定値は、<see langword="XmlSchemaDerivationMethod.None" /> です。 任意。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.BlockResolved">
      <summary vsli:raw="Gets the value after the type has been compiled to the post-schema-validation information set (infoset). This value indicates how the type is enforced when &lt;see langword=&quot;xsi:type&quot; /&gt; is used in the instance document.">型がスキーマ検証後の情報セット (infoset) にコンパイルされた後の値を取得します。 この値は、インスタンス ドキュメントで <see langword="xsi:type" /> が使用される場合に、型がどのように適用されるかを示します。</summary>
      <returns vsli:raw="The post-schema-validated infoset value. The default is &lt;see langword=&quot;BlockDefault&quot; /&gt; value on the &lt;see langword=&quot;schema&quot; /&gt; element.">スキーマ検証後の infoset 値。 既定値は <see langword="BlockDefault" /> 要素の <see langword="schema" /> 値です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentModel">
      <summary vsli:raw="Gets or sets the post-compilation &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaContentModel&quot; /&gt; of this complex type.">この複合型について、コンパイル後の <see cref="T:System.Xml.Schema.XmlSchemaContentModel" /> を取得または設定します。</summary>
      <returns vsli:raw="The content model type that is one of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleContent&quot; /&gt; or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaComplexContent&quot; /&gt; classes.">
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleContent" /> クラスまたは <see cref="T:System.Xml.Schema.XmlSchemaComplexContent" /> クラスであるコンテンツ モデル型。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentType">
      <summary vsli:raw="Gets the content model of the complex type which holds the post-compilation value.">コンパイル後の値を保持する複合型のコンテンツ モデルを取得します。</summary>
      <returns vsli:raw="The post-compilation value of the content model for the complex type.">複合型のコンテンツ モデルのコンパイル後の値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentTypeParticle">
      <summary vsli:raw="Gets the particle that holds the post-compilation value of the &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaComplexType.ContentType&quot; /&gt; particle.">
        <see cref="P:System.Xml.Schema.XmlSchemaComplexType.ContentType" /> パーティクルのコンパイル後の値を保持するパーティクルを取得します。</summary>
      <returns vsli:raw="The particle for the content type. The post-compilation value of the &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaComplexType.ContentType&quot; /&gt; particle.">コンテンツ型のパーティクル。 <see cref="P:System.Xml.Schema.XmlSchemaComplexType.ContentType" /> パーティクルのコンパイル後の値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.IsAbstract">
      <summary vsli:raw="Gets or sets the information that determines if the &lt;see langword=&quot;complexType&quot; /&gt; element can be used in the instance document.">
        <see langword="complexType" /> 要素をインスタンス ドキュメントで使用できるかどうかを決定する情報を取得または設定します。</summary>
      <returns vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, an element cannot use this &lt;see langword=&quot;complexType&quot; /&gt; element directly and must use a complex type that is derived from this &lt;see langword=&quot;complexType&quot; /&gt; element. The default is &lt;see langword=&quot;false&quot; /&gt;. Optional.">
        <see langword="true" /> の場合、要素は、この <see langword="complexType" /> 要素を直接使用できず、この <see langword="complexType" /> 要素から派生する複合型を使用する必要があります。 既定値は、<see langword="false" /> です。 任意。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.IsMixed">
      <summary vsli:raw="Gets or sets information that determines if the complex type has a mixed content model (markup within the content).">複合型が混合コンテンツ モデル (コンテンツ内のマークアップ) を持つかどうかを決定する情報を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt;, if character data can appear between child elements of this complex type; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;. Optional.">この複合型の子要素間に文字データを表示できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。 任意。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Particle">
      <summary vsli:raw="Gets or sets the compositor type as one of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaGroupRef&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaChoice&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAll&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSequence&quot; /&gt; classes.">
        <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" />、または <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> の各クラスの 1 つとして、コンポジター型を取得または設定します。</summary>
      <returns vsli:raw="The compositor type.">コンポジター型。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContent">
      <summary vsli:raw="An abstract class for schema content.">スキーマ コンテンツの抽象クラス。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaContent.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaContent&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaContent" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentModel">
      <summary vsli:raw="Specifies the order and structure of the child elements of a type.">型の子要素の順序と構造を指定します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaContentModel.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaContentModel&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaContentModel" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaContentModel.Content">
      <summary vsli:raw="Gets or sets the content of the type.">型のコンテンツを取得または設定します。</summary>
      <returns vsli:raw="Provides the content of the type.">型のコンテンツを提供します。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentProcessing">
      <summary vsli:raw="Provides information about the validation mode of &lt;see langword=&quot;any&quot; /&gt; and &lt;see langword=&quot;anyAttribute&quot; /&gt; element replacements.">
        <see langword="any" /> 要素および <see langword="anyAttribute" /> 要素の置換の検証モードに関する情報を提供します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Lax">
      <summary vsli:raw="If the associated schema is found, the document items will be validated. No errors will be thrown otherwise.&#xA;        &#xA;If the item is not validated, the XML processor attempts to notify the client through a validation event handler with &lt;see cref=&quot;P:System.Xml.Schema.ValidationEventArgs.Severity&quot; /&gt; = &lt;see langword=&quot;XmlSeverityType.Warning&quot; /&gt;. If a validation event handler has not been set up, no information is returned when the warning is produced.">関連付けられたスキーマが見つかった場合、ドキュメントの項目が検証されます。 それ以外の場合、エラーはスローされません。
項目が検証されていない場合、XML プロセッサは、<see cref="P:System.Xml.Schema.ValidationEventArgs.Severity" /> = <see langword="XmlSeverityType.Warning" /> が設定された検証イベント ハンドラーを介してクライアントへの通知を試みます。 検証イベント ハンドラーが設定されていない場合、警告が生成されても情報は返されません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.None">
      <summary vsli:raw="Document items are not validated.">ドキュメントの項目は検証されません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Skip">
      <summary vsli:raw="Document items must consist of well-formed XML and are not validated by the schema.&#xA;        &#xA;The XML processor attempts to notify the client through a validation event handler with &lt;see cref=&quot;P:System.Xml.Schema.ValidationEventArgs.Severity&quot; /&gt; = &lt;see langword=&quot;XmlSeverityType.Warning&quot; /&gt; that no validation took place for the given item. If a validation event handler has not been set up, no information is returned when the warning is produced.">ドキュメントの項目は、整形式の XML で構成される必要があり、スキーマで検証されません。
XML プロセッサは、<see cref="P:System.Xml.Schema.ValidationEventArgs.Severity" /> = <see langword="XmlSeverityType.Warning" /> が設定された検証イベント ハンドラーを介して、指定の項目の検証が行われなかったことをクライアントに通知するよう試みます。 検証イベント ハンドラーが設定されていない場合、警告が生成されても情報は返されません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Strict">
      <summary vsli:raw="The schema processor must find a schema associated with the indicated namespace to validate the document items.&#xA;        &#xA;If the processor cannot find a schema or if the items are not valid, the XML processor attempts to notify the client through a validation event handler with &lt;see cref=&quot;P:System.Xml.Schema.ValidationEventArgs.Severity&quot; /&gt; = &lt;see langword=&quot;XmlSeverityType.Warning&quot; /&gt;. If a validation error occurs and a validation event handler is not provided, an exception is thrown.">スキーマ プロセッサは、ドキュメントの項目を検証するために、指定された名前空間に関連付けられたスキーマを検索する必要があります。
プロセッサがスキーマを見つけることができない場合や項目が無効の場合、XML プロセッサは、<see cref="P:System.Xml.Schema.ValidationEventArgs.Severity" /> = <see langword="XmlSeverityType.Warning" /> が設定された検証イベント ハンドラーを介してクライアントへの通知を試みます。 検証エラーが発生し、検証イベント ハンドラーが提供されていない場合は、例外がスローされます。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentType">
      <summary vsli:raw="Enumerations for the content model of the complex type. This represents the content in the post-schema-validation information set (infoset).">複合型のコンテンツ モデルの列挙体。 これは、スキーマ検証後の情報セット (infoset) のコンテンツを表します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.ElementOnly">
      <summary vsli:raw="Element-only content.">要素だけのコンテンツ。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.Empty">
      <summary vsli:raw="Empty content.">空のコンテンツ。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.Mixed">
      <summary vsli:raw="Mixed content.">混合コンテンツ。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.TextOnly">
      <summary vsli:raw="Text-only content.">テキストだけのコンテンツ。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDatatype">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDatatype&quot; /&gt; class is an abstract class for mapping XML Schema definition language (XSD) types to Common Language Runtime (CLR) types.">
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> クラスは、XML スキーマ定義言語 (XSD: XML Schema Definition Language) 型を共通言語ランタイム (CLR: Common Language Runtime) 型に割り当てるための抽象クラスです。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ChangeType(System.Object,System.Type)">
      <summary vsli:raw="Converts the value specified, whose type is one of the valid Common Language Runtime (CLR) representations of the XML schema type represented by the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDatatype&quot; /&gt;, to the CLR type specified.">型が <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> で表された XML スキーマ型の有効な共通言語ランタイム (CLR) 表現の 1 つである指定された値を、指定された CLR 型に変換します。</summary>
      <param name="value" vsli:raw="The input value to convert to the specified type.">指定された型に変換する入力値。</param>
      <param name="targetType" vsli:raw="The target type to convert the input value to.">入力値変換後の型。</param>
      <returns vsli:raw="The converted input value.">変換された入力値。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Object" /> パラメーターまたは <see cref="T:System.Type" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The type represented by the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDatatype&quot; /&gt; does not support a conversion from type of the value specified to the type specified.">
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> で表された型では、指定された値の型から指定された型への変換がサポートされません。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ChangeType(System.Object,System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary vsli:raw="Converts the value specified, whose type is one of the valid Common Language Runtime (CLR) representations of the XML schema type represented by the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDatatype&quot; /&gt;, to the CLR type specified using the &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDatatype&quot; /&gt; represents the xs:QName type or a type derived from it.">
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> が xs:QName 型を表すか、またはそれから派生した型を表す場合に、型が <see cref="T:System.Xml.IXmlNamespaceResolver" /> で表された XML スキーマ型の有効な共通言語ランタイム (CLR) 表現の 1 つである指定された値を、<see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> を使用して指定された CLR 型に変換します。</summary>
      <param name="value" vsli:raw="The input value to convert to the specified type.">指定された型に変換する入力値。</param>
      <param name="targetType" vsli:raw="The target type to convert the input value to.">入力値変換後の型。</param>
      <param name="namespaceResolver" vsli:raw="An &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; used for resolving namespace prefixes. This is only of use if the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDatatype&quot; /&gt; represents the xs:QName type or a type derived from it.">名前空間プレフィックスの解決に使用する <see cref="T:System.Xml.IXmlNamespaceResolver" />。 これは、<see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> が xs:QName 型またはそれから派生した型を表す場合にのみ使用します。</param>
      <returns vsli:raw="The converted input value.">変換された入力値。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Object" /> パラメーターまたは <see cref="T:System.Type" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The type represented by the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDatatype&quot; /&gt; does not support a conversion from type of the value specified to the type specified.">
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> で表された型では、指定された値の型から指定された型への変換がサポートされません。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.IsDerivedFrom(System.Xml.Schema.XmlSchemaDatatype)">
      <summary vsli:raw="The &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaDatatype.IsDerivedFrom(System.Xml.Schema.XmlSchemaDatatype)&quot; /&gt; method always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="M:System.Xml.Schema.XmlSchemaDatatype.IsDerivedFrom(System.Xml.Schema.XmlSchemaDatatype)" /> メソッドは常に <see langword="false" /> を返します。</summary>
      <param name="datatype" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDatatype&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />。</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;false&quot; /&gt;.">常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ParseValue(System.String,System.Xml.XmlNameTable,System.Xml.IXmlNamespaceResolver)">
      <summary vsli:raw="When overridden in a derived class, validates the &lt;see langword=&quot;string&quot; /&gt; specified against a built-in or user-defined simple type.">派生クラスでオーバーライドされると、組み込みの単純型またはユーザー定義の単純型に対して指定された <see langword="string" /> を検証します。</summary>
      <param name="s" vsli:raw="The &lt;see langword=&quot;string&quot; /&gt; to validate against the simple type.">単純型に対して検証する <see langword="string" />。</param>
      <param name="nameTable" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; to use for atomization while parsing the &lt;see langword=&quot;string&quot; /&gt; if this &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDatatype&quot; /&gt; object represents the xs:NCName type.">この <see cref="T:System.Xml.XmlNameTable" /> オブジェクトが xs:NCName 型を表す場合に、<see langword="string" /> の解析時に最小単位に分割するために使用する <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />。</param>
      <param name="nsmgr" vsli:raw="The &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object to use while parsing the &lt;see langword=&quot;string&quot; /&gt; if this &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDatatype&quot; /&gt; object represents the xs:QName type.">この <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクトが xs:QName 型を表す場合に、<see langword="string" /> の解析時に使用する <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> オブジェクト。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that can be cast safely to the type returned by the &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaDatatype.ValueType&quot; /&gt; property.">
        <see cref="T:System.Object" /> プロパティで返される型に安全にキャストできる <see cref="P:System.Xml.Schema.XmlSchemaDatatype.ValueType" />。</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="The input value is not a valid instance of this W3C XML Schema type.">入力値は、この W3C XML スキーマ型の有効なインスタンスではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The value to parse cannot be &lt;see langword=&quot;null&quot; /&gt;.">解析する値を <see langword="null" /> にすることはできません。</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.TokenizedType">
      <summary vsli:raw="When overridden in a derived class, gets the type for the &lt;see langword=&quot;string&quot; /&gt; as specified in the World Wide Web Consortium (W3C) XML 1.0 specification.">派生クラスでオーバーライドされると、W3C (World Wide Web Consortium) XML 1.0 仕様で指定された <see langword="string" /> の型を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlTokenizedType&quot; /&gt; value for the &lt;see langword=&quot;string&quot; /&gt;.">
        <see langword="string" /> の <see cref="T:System.Xml.XmlTokenizedType" /> 値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.TypeCode">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.Schema.XmlTypeCode&quot; /&gt; value for the simple type.">単純型の <see cref="T:System.Xml.Schema.XmlTypeCode" /> 値を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlTypeCode&quot; /&gt; value for the simple type.">単純型の <see cref="T:System.Xml.Schema.XmlTypeCode" /> 値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.ValueType">
      <summary vsli:raw="When overridden in a derived class, gets the Common Language Runtime (CLR) type of the item.">派生クラスでオーバーライドされた場合、項目の共通言語ランタイム (CLR) 型を取得します。</summary>
      <returns vsli:raw="The Common Language Runtime (CLR) type of the item.">項目の共通言語ランタイム (CLR) 型。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.Variety">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDatatypeVariety&quot; /&gt; value for the simple type.">単純型の <see cref="T:System.Xml.Schema.XmlSchemaDatatypeVariety" /> 値を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDatatypeVariety&quot; /&gt; value for the simple type.">単純型の <see cref="T:System.Xml.Schema.XmlSchemaDatatypeVariety" /> 値。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDatatypeVariety">
      <summary vsli:raw="Specifies the W3C XML schema data type variety of the type.">W3C XML スキーマ データ型の種類の型を指定します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.Atomic">
      <summary vsli:raw="A W3C XML schema atomic type.">W3C XML スキーマの原子型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.List">
      <summary vsli:raw="A W3C XML schema list type.">W3C XML スキーマのリスト型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.Union">
      <summary vsli:raw="A W3C XML schema union type.">W3C XML スキーマの共用体型。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDerivationMethod">
      <summary vsli:raw="Provides different methods for preventing derivation.">派生しないようにする別のメソッドを提供します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.All">
      <summary vsli:raw="&lt;see langword=&quot;#all&quot; /&gt;. Refers to all derivation methods.">
        <see langword="#all" />。 すべての派生メソッドを参照します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Empty">
      <summary vsli:raw="Override default derivation method to allow any derivation.">任意の派生を許可するには、既定の派生メソッドをオーバーライドします。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Extension">
      <summary vsli:raw="Refers to derivations by &lt;see langword=&quot;Extension&quot; /&gt;.">
        <see langword="Extension" /> で派生を参照します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.List">
      <summary vsli:raw="Refers to derivations by &lt;see langword=&quot;List&quot; /&gt;.">
        <see langword="List" /> で派生を参照します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.None">
      <summary vsli:raw="Accepts the default derivation method.">既定の派生メソッドを承認します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Restriction">
      <summary vsli:raw="Refers to derivations by &lt;see langword=&quot;Restriction&quot; /&gt;.">
        <see langword="Restriction" /> で派生を参照します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Substitution">
      <summary vsli:raw="Refers to derivations by &lt;see langword=&quot;Substitution&quot; /&gt;.">
        <see langword="Substitution" /> で派生を参照します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Union">
      <summary vsli:raw="Refers to derivations by &lt;see langword=&quot;Union&quot; /&gt;.">
        <see langword="Union" /> で派生を参照します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDocumentation">
      <summary vsli:raw="Represents the &lt;see langword=&quot;documentation&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class specifies information to be read or used by humans within an &lt;see langword=&quot;annotation&quot; /&gt;.">W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="documentation" /> 要素を表します。 このクラスは、<see langword="annotation" /> 内でユーザーが読み取る情報またはユーザーが使用する情報を指定します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDocumentation.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDocumentation&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaDocumentation" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Language">
      <summary vsli:raw="Gets or sets the &lt;see langword=&quot;xml:lang&quot; /&gt; attribute. This serves as an indicator of the language used in the contents.">
        <see langword="xml:lang" /> 属性を取得または設定します。 この属性は、コンテンツで使用される言語のインジケーターとして機能します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;xml:lang&quot; /&gt; attribute. Optional.">
        <see langword="xml:lang" /> 属性 任意。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Markup">
      <summary vsli:raw="Gets or sets an array of &lt;see langword=&quot;XmlNodes&quot; /&gt; that represents the documentation child nodes.">ドキュメントの子ノードを表す <see langword="XmlNodes" /> の配列を取得または設定します。</summary>
      <returns vsli:raw="The array that represents the documentation child nodes.">ドキュメントの子ノードを表す配列。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Source">
      <summary vsli:raw="Gets or sets the Uniform Resource Identifier (URI) source of the information.">情報の URI (Uniform Resource Identifier) ソースを取得または設定します。</summary>
      <returns vsli:raw="A URI reference. The default is &lt;see langword=&quot;String.Empty&quot; /&gt;. Optional.">URI 参照。 既定値は、<see langword="String.Empty" /> です。 任意。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaElement">
      <summary vsli:raw="Represents the &lt;see langword=&quot;element&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is the base class for all particle types and is used to describe an element in an XML document.">W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="element" /> 要素を表します。 このクラスはすべてのパーティクル型の基本クラスで、XML ドキュメント内の要素を表すために使用されます。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaElement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaElement&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaElement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Block">
      <summary vsli:raw="Gets or sets a &lt;see langword=&quot;Block&quot; /&gt; derivation.">
        <see langword="Block" /> 派生を取得または設定します。</summary>
      <returns vsli:raw="The attribute used to block a type derivation. Default value is &lt;see langword=&quot;XmlSchemaDerivationMethod.None&quot; /&gt;. Optional.">型派生をブロックするために使用される属性。 既定値は <see langword="XmlSchemaDerivationMethod.None" />にする必要があります。 任意。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.BlockResolved">
      <summary vsli:raw="Gets the post-compilation value of the &lt;see langword=&quot;Block&quot; /&gt; property.">
        <see langword="Block" /> プロパティのコンパイル後の値を取得します。</summary>
      <returns vsli:raw="The post-compilation value of the &lt;see langword=&quot;Block&quot; /&gt; property. The default is the &lt;see langword=&quot;BlockDefault&quot; /&gt; value on the &lt;see langword=&quot;schema&quot; /&gt; element.">
        <see langword="Block" /> プロパティのコンパイル後の値。 既定値は <see langword="BlockDefault" /> 要素の <see langword="schema" /> 値です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Constraints">
      <summary vsli:raw="Gets the collection of constraints on the element.">要素に関する制約のコレクションを取得します。</summary>
      <returns vsli:raw="The collection of constraints.">制約のコレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.DefaultValue">
      <summary vsli:raw="Gets or sets the default value of the element if its content is a simple type or content of the element is &lt;see langword=&quot;textOnly&quot; /&gt;.">要素の内容が単純型または <see langword="textOnly" /> である場合は、その要素の既定値を取得または設定します。</summary>
      <returns vsli:raw="The default value for the element. The default is a null reference. Optional.">この要素の既定値。 既定値は null 参照です。 任意。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.ElementSchemaType">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; object representing the type of the element based on the &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaElement.SchemaType&quot; /&gt; or &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaElement.SchemaTypeName&quot; /&gt; values of the element.">要素の <see cref="T:System.Xml.Schema.XmlSchemaType" /> または <see cref="P:System.Xml.Schema.XmlSchemaElement.SchemaType" /> の値に基づいて、要素の型を表す <see cref="P:System.Xml.Schema.XmlSchemaElement.SchemaTypeName" /> オブジェクトを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; object.">
        <see cref="T:System.Xml.Schema.XmlSchemaType" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.ElementType">
      <summary vsli:raw="Gets a common language runtime (CLR) object based on the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaElement&quot; /&gt; or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaElement&quot; /&gt; of the element, which holds the post-compilation value of the &lt;see langword=&quot;ElementType&quot; /&gt; property.">
        <see langword="ElementType" /> プロパティのコンパイル後の値を保持する要素の <see cref="T:System.Xml.Schema.XmlSchemaElement" /> または <see cref="T:System.Xml.Schema.XmlSchemaElement" /> に基づいた共通言語ランタイム (CLR: Common Language Runtime) オブジェクトを取得します。</summary>
      <returns vsli:raw="The common language runtime object. The post-compilation value of the &lt;see langword=&quot;ElementType&quot; /&gt; property.">共通言語ランタイム オブジェクト。 <see langword="ElementType" /> プロパティのコンパイル後の値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Final">
      <summary vsli:raw="Gets or sets the &lt;see langword=&quot;Final&quot; /&gt; property to indicate that no further derivations are allowed.">これ以上派生が許可されないことを示す <see langword="Final" /> プロパティを取得または設定します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;Final&quot; /&gt; property. The default is &lt;see langword=&quot;XmlSchemaDerivationMethod.None&quot; /&gt;. Optional.">
        <see langword="Final" /> プロパティ。 既定値は、<see langword="XmlSchemaDerivationMethod.None" /> です。 任意。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.FinalResolved">
      <summary vsli:raw="Gets the post-compilation value of the &lt;see langword=&quot;Final&quot; /&gt; property.">
        <see langword="Final" /> プロパティのコンパイル後の値を取得します。</summary>
      <returns vsli:raw="The post-compilation value of the &lt;see langword=&quot;Final&quot; /&gt; property. Default value is the &lt;see langword=&quot;FinalDefault&quot; /&gt; value on the &lt;see langword=&quot;schema&quot; /&gt; element.">
        <see langword="Final" /> プロパティのコンパイル後の値。 既定値は <see langword="FinalDefault" /> 要素の <see langword="schema" /> 値です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.FixedValue">
      <summary vsli:raw="Gets or sets the fixed value.">固定値を取得または設定します。</summary>
      <returns vsli:raw="The fixed value that is predetermined and unchangeable. The default is a null reference. Optional.">事前に決定されており、変更できない固定値。 既定値は null 参照です。 任意。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Form">
      <summary vsli:raw="Gets or sets the form for the element.">要素の形式を取得または設定します。</summary>
      <returns vsli:raw="The form for the element. The default is the &lt;see cref=&quot;P:System.Xml.Schema.XmlSchema.ElementFormDefault&quot; /&gt; value. Optional.">この要素の形式。 既定値は、<see cref="P:System.Xml.Schema.XmlSchema.ElementFormDefault" /> です。 任意。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.IsAbstract">
      <summary vsli:raw="Gets or sets information to indicate if the element can be used in an instance document.">要素をインスタンス ドキュメントで使用できるかどうかを示す情報を取得または設定します。</summary>
      <returns vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the element cannot appear in the instance document. The default is &lt;see langword=&quot;false&quot; /&gt;. Optional.">
        <see langword="true" /> の場合は、要素をインスタンス ドキュメントに表示できません。 既定値は、<see langword="false" /> です。 任意。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.IsNillable">
      <summary vsli:raw="Gets or sets information that indicates if &lt;see langword=&quot;xsi:nil&quot; /&gt; can occur in the instance data. Indicates if an explicit nil value can be assigned to the element.">
        <see langword="xsi:nil" /> がインスタンス データに発生するかどうかを示す情報を取得または設定します。 明示的な nil 値を要素に割り当てることができるかどうかを示します。</summary>
      <returns vsli:raw="If nillable is &lt;see langword=&quot;true&quot; /&gt;, this enables an instance of the element to have the &lt;see langword=&quot;nil&quot; /&gt; attribute set to &lt;see langword=&quot;true&quot; /&gt;. The &lt;see langword=&quot;nil&quot; /&gt; attribute is defined as part of the XML Schema namespace for instances. The default is &lt;see langword=&quot;false&quot; /&gt;. Optional.">nillable が <see langword="true" /> の場合、これを使用すると、要素のインスタンスは <see langword="nil" /> 属性を <see langword="true" /> に設定できます。 <see langword="nil" /> 属性は、インスタンスの XML スキーマ名前空間の一部として定義されます。 既定値は、<see langword="false" /> です。 任意。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Name">
      <summary vsli:raw="Gets or sets the name of the element.">要素の名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the element. The default is &lt;see langword=&quot;String.Empty&quot; /&gt;.">要素の名前。 既定値は、<see langword="String.Empty" /> です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.QualifiedName">
      <summary vsli:raw="Gets the actual qualified name for the given element.">指定した要素の実際の限定名を取得します。</summary>
      <returns vsli:raw="The qualified name of the element. The post-compilation value of the &lt;see langword=&quot;QualifiedName&quot; /&gt; property.">要素の限定名。 <see langword="QualifiedName" /> プロパティのコンパイル後の値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.RefName">
      <summary vsli:raw="Gets or sets the reference name of an element declared in this schema (or another schema indicated by the specified namespace).">このスキーマ (または指定した名前空間によって示された別のスキーマ) で宣言された要素の参照名を取得または設定します。</summary>
      <returns vsli:raw="The reference name of the element.">要素の参照名。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SchemaType">
      <summary vsli:raw="Gets or sets the type of the element. This can either be a complex type or a simple type.">要素の型を取得または設定します。 これは、複合型または単純型に設定できます。</summary>
      <returns vsli:raw="The type of the element.">要素の型。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SchemaTypeName">
      <summary vsli:raw="Gets or sets the name of a built-in data type defined in this schema or another schema indicated by the specified namespace.">このスキーマまたは指定した名前空間で示された別のスキーマで定義された組み込みデータ型の名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the built-in data type.">組み込みデータ型の名前。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SubstitutionGroup">
      <summary vsli:raw="Gets or sets the name of an element that is being substituted by this element.">この要素に置き換えられる要素の名前を取得または設定します。</summary>
      <returns vsli:raw="The qualified name of an element that is being substituted by this element. Optional.">この要素に置き換えられる要素の限定名。 任意。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaEnumerationFacet">
      <summary vsli:raw="Represents the &lt;see langword=&quot;enumeration&quot; /&gt; facet from XML Schema as specified by the World Wide Web Consortium (W3C). This class specifies a list of valid values for a simpleType element. Declaration is contained within a &lt;see langword=&quot;restriction&quot; /&gt; declaration.">W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="enumeration" /> ファセットを表します。 このクラスは、simpleType 要素の有効な値のリストを指定します。 宣言は、<see langword="restriction" /> 宣言の中に含まれます。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaEnumerationFacet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaEnumerationFacet&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaException">
      <summary vsli:raw="Returns detailed information about the schema exception.">スキーマ例外に関する詳細情報を返します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaException&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Constructs a new &lt;see langword=&quot;XmlSchemaException&quot; /&gt; object with the given &lt;see langword=&quot;SerializationInfo&quot; /&gt; and &lt;see langword=&quot;StreamingContext&quot; /&gt; information that contains all the properties of the &lt;see langword=&quot;XmlSchemaException&quot; /&gt;.">
        <see langword="XmlSchemaException" /> のすべてのプロパティを含む指定した <see langword="SerializationInfo" /> 情報および <see langword="StreamingContext" /> 情報を使用して、新しい <see langword="XmlSchemaException" /> オブジェクトを構築します。</summary>
      <param name="info" vsli:raw="SerializationInfo.">SerializationInfo。</param>
      <param name="context" vsli:raw="StreamingContext.">StreamingContext。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaException&quot; /&gt; class with the exception message specified.">
        <see cref="T:System.Xml.Schema.XmlSchemaException" /> クラスの新しいインスタンスを、指定された例外メッセージを使用して初期化します。</summary>
      <param name="message" vsli:raw="A &lt;see langword=&quot;string&quot; /&gt; description of the error condition.">エラー状態の <see langword="string" /> の説明。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaException&quot; /&gt; class with the exception message and original &lt;see cref=&quot;T:System.Exception&quot; /&gt; object that caused this exception specified.">
        <see cref="T:System.Xml.Schema.XmlSchemaException" /> クラスの新しいインスタンスを、例外メッセージおよびこの例外が発生する原因になった元の <see cref="T:System.Exception" /> オブジェクトを指定して初期化します。</summary>
      <param name="message" vsli:raw="A &lt;see langword=&quot;string&quot; /&gt; description of the error condition.">エラー状態の <see langword="string" /> の説明。</param>
      <param name="innerException" vsli:raw="The original &lt;see cref=&quot;T:System.Exception&quot; /&gt; object that caused this exception.">この例外が発生する原因になった T:System.Exception オブジェクト。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaException&quot; /&gt; class with the exception message specified, and the original &lt;see cref=&quot;T:System.Exception&quot; /&gt; object, line number, and line position of the XML that cause this exception specified.">
        <see cref="T:System.Xml.Schema.XmlSchemaException" /> クラスの新しいインスタンスを、例外メッセージ、この例外が発生する原因になった <see cref="T:System.Exception" /> オブジェクト、XML の行番号、および XML の行位置を指定して初期化します。</summary>
      <param name="message" vsli:raw="A &lt;see langword=&quot;string&quot; /&gt; description of the error condition.">エラー状態の <see langword="string" /> の説明。</param>
      <param name="innerException" vsli:raw="The original &lt;see cref=&quot;T:System.Exception&quot; /&gt; object that caused this exception.">この例外が発生する原因になった T:System.Exception オブジェクト。</param>
      <param name="lineNumber" vsli:raw="The line number of the XML that caused this exception.">この例外が発生する原因になった XML の行番号。</param>
      <param name="linePosition" vsli:raw="The line position of the XML that caused this exception.">この例外が発生する原因になった XML の行位置。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Streams all the &lt;see langword=&quot;XmlSchemaException&quot; /&gt; properties into the &lt;see langword=&quot;SerializationInfo&quot; /&gt; class for the given &lt;see langword=&quot;StreamingContext&quot; /&gt;.">すべての <see langword="XmlSchemaException" /> プロパティを、指定した <see langword="SerializationInfo" /> の <see langword="StreamingContext" /> クラスにストリーム転送します。</summary>
      <param name="info" vsli:raw="The &lt;see langword=&quot;SerializationInfo&quot; /&gt;.">
        <see langword="SerializationInfo" />。</param>
      <param name="context" vsli:raw="The &lt;see langword=&quot;StreamingContext&quot; /&gt; information.">
        <see langword="StreamingContext" /> 情報。</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.LineNumber">
      <summary vsli:raw="Gets the line number indicating where the error occurred.">エラーの発生場所を示す行番号を取得します。</summary>
      <returns vsli:raw="The line number indicating where the error occurred.">エラーの発生場所を示す行番号。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.LinePosition">
      <summary vsli:raw="Gets the line position indicating where the error occurred.">エラーの発生場所を示す行の位置を取得します。</summary>
      <returns vsli:raw="The line position indicating where the error occurred.">エラーの発生場所を示す行の位置。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.Message">
      <summary vsli:raw="Gets the description of the error condition of this exception.">この例外のエラー状態の説明を取得します。</summary>
      <returns vsli:raw="The description of the error condition of this exception.">この例外のエラー状態についての説明。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.SourceSchemaObject">
      <summary vsli:raw="The &lt;see langword=&quot;XmlSchemaObject&quot; /&gt; that produced the &lt;see langword=&quot;XmlSchemaException&quot; /&gt;.">
        <see langword="XmlSchemaObject" /> を生成した <see langword="XmlSchemaException" />。</summary>
      <returns vsli:raw="A valid object instance represents a structural validation error in the XML Schema Object Model (SOM).">XML SOM (Schema Object Model) の構造的な検証エラーを表す有効なオブジェクト インスタンス。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.SourceUri">
      <summary vsli:raw="Gets the Uniform Resource Identifier (URI) location of the schema that caused the exception.">例外の発生原因となったスキーマの URI (Uniform Resource Identifier) 位置を取得します。</summary>
      <returns vsli:raw="The URI location of the schema that caused the exception.">例外の発生原因となったスキーマの URI 位置。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaExternal">
      <summary vsli:raw="An abstract class. Provides information about the included schema.">抽象クラス。 インクルードされるスキーマに関する情報を提供します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaExternal.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaExternal&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaExternal" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.Id">
      <summary vsli:raw="Gets or sets the string id.">文字列 ID を取得または設定します。</summary>
      <returns vsli:raw="The string id. The default is &lt;see langword=&quot;String.Empty&quot; /&gt;. Optional.">文字列 id。既定値は <see langword="String.Empty" /> です。 任意。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.Schema">
      <summary vsli:raw="Gets or sets the &lt;see langword=&quot;XmlSchema&quot; /&gt; for the referenced schema.">参照されるスキーマの <see langword="XmlSchema" /> を取得または設定します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlSchema&quot; /&gt; for the referenced schema.">参照されるスキーマの <see langword="XmlSchema" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.SchemaLocation">
      <summary vsli:raw="Gets or sets the Uniform Resource Identifier (URI) location for the schema, which tells the schema processor where the schema physically resides.">スキーマの URI (Uniform Resource Identifier) 位置を取得または設定します。これにより、スキーマが物理的に存在する場所がスキーマ プロセッサに通知されます。</summary>
      <returns vsli:raw="The URI location for the schema. Optional for imported schemas.">スキーマの URI 位置。 インポートされるスキーマに対しては、省略できます。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.UnhandledAttributes">
      <summary vsli:raw="Gets or sets the qualified attributes, which do not belong to the schema target namespace.">スキーマのターゲット名前空間に属さない、修飾された属性を取得または設定します。</summary>
      <returns vsli:raw="Qualified attributes that belong to another target namespace.">別のターゲット名前空間に属している限定された属性。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaFacet">
      <summary vsli:raw="Abstract class for all facets that are used when simple types are derived by restriction.">制限により単純型が派生するときに使用されるすべてのファセットの抽象クラス。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaFacet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaFacet&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaFacet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaFacet.IsFixed">
      <summary vsli:raw="Gets or sets information that indicates that this facet is fixed.">ファセットが固定されていることを示す情報を取得または設定します。</summary>
      <returns vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, value is fixed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;. Optional.">値が固定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。 任意。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaFacet.Value">
      <summary vsli:raw="Gets or sets the &lt;see langword=&quot;value&quot; /&gt; attribute of the facet.">ファセットの <see langword="value" /> 属性を取得または設定します。</summary>
      <returns vsli:raw="The value attribute.">属性値。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaForm">
      <summary vsli:raw="Indicates if attributes or elements need to be qualified with a namespace prefix.">属性または要素を、名前空間プレフィックスで修飾する必要があるかどうかを示します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.None">
      <summary vsli:raw="Element and attribute form is not specified in the schema.">スキーマには、要素および属性の形式が指定されません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.Qualified">
      <summary vsli:raw="Elements and attributes must be qualified with a namespace prefix.">要素および属性は、名前空間プレフィックスで修飾する必要があります。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.Unqualified">
      <summary vsli:raw="Elements and attributes are not required to be qualified with a namespace prefix.">要素および属性は、名前空間プレフィックスで修飾する必要はありません。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet">
      <summary vsli:raw="Specifies a restriction on the number of digits that can be entered for the fraction value of a simpleType element. The value of fractionDigits must be a positive integer. Represents the World Wide Web Consortium (W3C) &lt;see langword=&quot;fractionDigits&quot; /&gt; facet.">simpleType 要素の端数値として入力できる桁数の制限を指定します。 fractionDigits の値は正の整数である必要があります。 W3C (World Wide Web Consortium) <see langword="fractionDigits" /> ファセットを表します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaFractionDigitsFacet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaFractionDigitsFacet&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroup">
      <summary vsli:raw="Represents the &lt;see langword=&quot;group&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class defines groups at the &lt;see langword=&quot;schema&quot; /&gt; level that are referenced from the complex types. It groups a set of element declarations so that they can be incorporated as a group into complex type definitions.">W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="group" /> 要素を表します。 このクラスは、複合型から参照される <see langword="schema" /> レベルのグループを定義します。 要素宣言セットをグループ化し、グループとして複合型定義に組み込むことができるようにします。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaGroup.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaGroup&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaGroup" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.Name">
      <summary vsli:raw="Gets or sets the name of the schema group.">スキーマ グループの名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the schema group.">スキーマ グループの名前。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.Particle">
      <summary vsli:raw="Gets or sets one of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaChoice&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAll&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSequence&quot; /&gt; classes.">
        <see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" />、または <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> の各クラスのいずれか 1 つを取得または設定します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaChoice&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAll&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSequence&quot; /&gt; classes.">
        <see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" />、または <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> の各クラスのいずれか 1 つ。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.QualifiedName">
      <summary vsli:raw="Gets the qualified name of the schema group.">スキーマ グループの修飾名を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; object representing the qualified name of the schema group.">スキーマ グループの修飾名を表す <see cref="T:System.Xml.XmlQualifiedName" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroupBase">
      <summary vsli:raw="An abstract class for &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAll&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaChoice&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSequence&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaAll" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、または <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> の抽象クラス。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupBase.Items">
      <summary vsli:raw="This collection is used to add new elements to the compositor.">このコレクションは、コンポジターに新しい要素を追加するために使用されます。</summary>
      <returns vsli:raw="An &lt;see langword=&quot;XmlSchemaObjectCollection&quot; /&gt;.">
        <see langword="XmlSchemaObjectCollection" />。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroupRef">
      <summary vsli:raw="Represents the &lt;see langword=&quot;group&quot; /&gt; element with &lt;see langword=&quot;ref&quot; /&gt; attribute from the XML Schema as specified by the World Wide Web Consortium (W3C). This class is used within complex types that reference a &lt;see langword=&quot;group&quot; /&gt; defined at the &lt;see langword=&quot;schema&quot; /&gt; level.">W3C (World Wide Web Consortium) で指定された XML スキーマの、<see langword="ref" /> 属性を持つ <see langword="group" /> 要素を表します。 このクラスは、<see langword="group" /> レベルで定義された <see langword="schema" /> を参照する複合型で使用されます。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaGroupRef.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaGroupRef&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupRef.Particle">
      <summary vsli:raw="Gets one of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaChoice&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAll&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSequence&quot; /&gt; classes, which holds the post-compilation value of the &lt;see langword=&quot;Particle&quot; /&gt; property.">
        <see cref="T:System.Xml.Schema.XmlSchemaChoice" /> クラス、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> クラス、または <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> クラスのうち、<see langword="Particle" /> プロパティのコンパイル後の値を保持するクラスを 1 つ取得します。</summary>
      <returns vsli:raw="The post-compilation value of the &lt;see langword=&quot;Particle&quot; /&gt; property, which is one of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaChoice&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAll&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSequence&quot; /&gt; classes.">
        <see langword="Particle" /> プロパティのコンパイル後の値。<see cref="T:System.Xml.Schema.XmlSchemaChoice" /> クラス、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> クラス、<see cref="T:System.Xml.Schema.XmlSchemaSequence" /> クラスのいずれかのクラスになります。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupRef.RefName">
      <summary vsli:raw="Gets or sets the name of a group defined in this schema (or another schema indicated by the specified namespace).">このスキーマ (または指定した名前空間で示された別のスキーマ) で定義されたグループの名前を取得または設定します。</summary>
      <returns vsli:raw="The name of a group defined in this schema.">このスキーマで定義されたグループの名前。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaIdentityConstraint">
      <summary vsli:raw="Class for the identity constraints: &lt;see langword=&quot;key&quot; /&gt;, &lt;see langword=&quot;keyref&quot; /&gt;, and &lt;see langword=&quot;unique&quot; /&gt; elements.">ID 制約である <see langword="key" />、<see langword="keyref" />、<see langword="unique" /> の各要素のクラス。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaIdentityConstraint.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaIdentityConstraint&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaIdentityConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Fields">
      <summary vsli:raw="Gets the collection of fields that apply as children for the XML Path Language (XPath) expression selector.">XML Path Language (XPath) 式セレクターの子として適用されるフィールドのコレクションを取得します。</summary>
      <returns vsli:raw="The collection of fields.">フィールドのコレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Name">
      <summary vsli:raw="Gets or sets the name of the identity constraint.">ID 制約の名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the identity constraint.">ID 制約の名前。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.QualifiedName">
      <summary vsli:raw="Gets the qualified name of the identity constraint, which holds the post-compilation value of the &lt;see langword=&quot;QualifiedName&quot; /&gt; property.">
        <see langword="QualifiedName" /> プロパティのコンパイル後の値を保持する ID 制約の限定名を取得します。</summary>
      <returns vsli:raw="The post-compilation value of the &lt;see langword=&quot;QualifiedName&quot; /&gt; property.">
        <see langword="QualifiedName" /> プロパティのコンパイル後の値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Selector">
      <summary vsli:raw="Gets or sets the XPath expression &lt;see langword=&quot;selector&quot; /&gt; element.">XPath 式 <see langword="selector" /> 要素を取得または設定します。</summary>
      <returns vsli:raw="The XPath expression &lt;see langword=&quot;selector&quot; /&gt; element.">XPath 式 <see langword="selector" /> 要素。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaImport">
      <summary vsli:raw="Represents the &lt;see langword=&quot;import&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is used to import schema components from other schemas.">W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="import" /> 要素を表します。 このクラスは、スキーマ コンポーネントを他のスキーマからインポートする場合に使用します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaImport.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaImport&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaImport" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaImport.Annotation">
      <summary vsli:raw="Gets or sets the &lt;see langword=&quot;annotation&quot; /&gt; property.">
        <see langword="annotation" /> プロパティを取得または設定します。</summary>
      <returns vsli:raw="The annotation.">注釈。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaImport.Namespace">
      <summary vsli:raw="Gets or sets the target namespace for the imported schema as a Uniform Resource Identifier (URI) reference.">インポートされたスキーマのターゲット名前空間を URI (Uniform Resource Identifier) 参照として取得または設定します。</summary>
      <returns vsli:raw="The target namespace for the imported schema as a URI reference. Optional.">インポートされたスキーマの URI 参照のターゲット名前空間。 任意。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInclude">
      <summary vsli:raw="Represents the &lt;see langword=&quot;include&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is used to include declarations and definitions from an external schema. The included declarations and definitions are then available for processing in the containing schema.">W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="include" /> 要素を表します。 このクラスは、外部スキーマから宣言や定義をインクルードする場合に使用します。 インクルードされる宣言および定義は、それを格納するスキーマで処理できるようになります。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInclude.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInclude&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaInclude" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInclude.Annotation">
      <summary vsli:raw="Gets or sets the &lt;see langword=&quot;annotation&quot; /&gt; property.">
        <see langword="annotation" /> プロパティを取得または設定します。</summary>
      <returns vsli:raw="The annotation.">注釈。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInference">
      <summary vsli:raw="Infers an XML Schema Definition Language (XSD) schema from an XML document. The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInference&quot; /&gt; class cannot be inherited.">XML ドキュメントから XML スキーマ定義言語 (XSD: XML Schema Definition Language) スキーマを推論します。 <see cref="T:System.Xml.Schema.XmlSchemaInference" /> クラスは継承できません。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInference.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInference&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaInference" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInference.InferenceOption">
      <summary vsli:raw="Affects occurrence and type information inferred by the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInference&quot; /&gt; class for elements and attributes in an XML document.">XML ドキュメントの要素と属性に対して <see cref="T:System.Xml.Schema.XmlSchemaInference" /> クラスで推論される出現情報と型情報に影響します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaInference.InferenceOption.Relaxed">
      <summary vsli:raw="Indicates that a less restrictive schema declaration should be inferred for a particular element or attribute.">特定の要素または属性に対して、より制限の少ないスキーマ宣言を推論する必要があることを示します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaInference.InferenceOption.Restricted">
      <summary vsli:raw="Indicates that a more restrictive schema declaration should be inferred for a particular element or attribute.">特定の要素または属性に対して、より制限の多いスキーマ宣言を推論する必要があることを示します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader)">
      <summary vsli:raw="Infers an XML Schema Definition Language (XSD) schema from the XML document contained in the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object specified.">指定された <see cref="T:System.Xml.XmlReader" /> オブジェクトに格納されている XML ドキュメントから XML スキーマ定義言語 (XSD) スキーマを推論します。</summary>
      <param name="instanceDocument" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object containing the XML document to infer a schema from.">スキーマの推論元となる XML ドキュメントが格納されている <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; object containing the inferred schemas.">推論されるスキーマが格納される <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクト。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML document is not well-formed.">XML ドキュメントは、整形式ではありません。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaInferenceException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object is not positioned on the root node or on an element. An error occurs during the schema inference process.">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトは、ルート ノードまたは要素に配置されていません。 スキーマ推論の処理中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader,System.Xml.Schema.XmlSchemaSet)">
      <summary vsli:raw="Infers an XML Schema Definition Language (XSD) schema from the XML document contained in the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object specified, and refines the inferred schema using an existing schema in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; object specified with the same target namespace.">指定された <see cref="T:System.Xml.XmlReader" /> オブジェクトに格納されている XML ドキュメントから XML スキーマ定義言語 (XSD) スキーマを推論し、同じターゲット名前空間で指定された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクト内の既存のスキーマを使用して、推論されたスキーマを詳細に指定します。</summary>
      <param name="instanceDocument" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object containing the XML document to infer a schema from.">スキーマの推論元となる XML ドキュメントが格納されている <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
      <param name="schemas" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; object containing an existing schema used to refine the inferred schema.">推論されたスキーマを詳細に指定するために使用する既存のスキーマが格納された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクト。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; object containing the inferred schemas.">推論されるスキーマが格納される <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクト。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML document is not well-formed.">XML ドキュメントは、整形式ではありません。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaInferenceException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object is not positioned on the root node or on an element. An error occurs during the schema inference process.">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトは、ルート ノードまたは要素に配置されていません。 スキーマ推論の処理中にエラーが発生しました。</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInference.Occurrence">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInference.InferenceOption&quot; /&gt; value that affects schema occurrence declarations inferred from the XML document.">XML ドキュメントから推論されるスキーマ出現宣言に影響する <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 値を取得または設定します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInference.InferenceOption&quot; /&gt; object.">
        <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInference.TypeInference">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInference.InferenceOption&quot; /&gt; value that affects types inferred from the XML document.">XML ドキュメントから推論される型に影響を与える <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 値を取得または設定します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInference.InferenceOption&quot; /&gt; object.">
        <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInferenceException">
      <summary vsli:raw="Returns information about errors encountered by the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInference&quot; /&gt; class while inferring a schema from an XML document.">XML ドキュメントからスキーマを推測しているときに、<see cref="T:System.Xml.Schema.XmlSchemaInference" /> クラスで検出されたエラーに関する情報を返します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInferenceException&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInferenceException&quot; /&gt; class with the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; and &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; objects specified that contain all the properties of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInferenceException&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> クラスの新しいインスタンスを、<see cref="T:System.Runtime.Serialization.SerializationInfo" /> のすべてのプロパティが格納されている、指定された <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクトと <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> オブジェクトを使用して初期化します。</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object.">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクト。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInferenceException&quot; /&gt; class with the error message specified.">
        <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> クラスの新しいインスタンスを、指定されたエラー メッセージを使用して初期化します。</summary>
      <param name="message" vsli:raw="A description of the error.">エラーの説明。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInferenceException&quot; /&gt; class with the error message specified and the original &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInferenceException&quot; /&gt; specified.">
        <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> クラスの新しいインスタンスを、指定されたエラー メッセージおよび指定された <see cref="T:System.Exception" /> が発生する原因になった <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> を使用して初期化します。</summary>
      <param name="message" vsli:raw="A description of the error.">エラーの説明。</param>
      <param name="innerException" vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; object containing the original exception that caused the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInferenceException&quot; /&gt;.">
        <see cref="T:System.Exception" /> が発生する原因になった例外が含まれている <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> オブジェクト。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInferenceException&quot; /&gt; class with the error message specified, the original &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInferenceException&quot; /&gt; specified, and the line number and line position of the error in the XML document specified.">
        <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> クラスの新しいインスタンスを、指定されたエラー メッセージ、指定された <see cref="T:System.Exception" /> が発生する原因になった元の <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />、および指定された XML ドキュメント内のエラーの行番号と行位置を使用して初期化します。</summary>
      <param name="message" vsli:raw="A description of the error.">エラーの説明。</param>
      <param name="innerException" vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; object containing the original exception that caused the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInferenceException&quot; /&gt;.">
        <see cref="T:System.Exception" /> が発生する原因になった例外が含まれている <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> オブジェクト。</param>
      <param name="lineNumber" vsli:raw="The line number in the XML document that caused the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInferenceException&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> が発生する原因になった XML ドキュメント内の行番号。</param>
      <param name="linePosition" vsli:raw="The line position in the XML document that caused the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInferenceException&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> が発生する原因になった XML ドキュメント内の行位置。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Streams all the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInferenceException&quot; /&gt; object properties into the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object specified for the &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object specified.">
        <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> オブジェクトのすべてのプロパティを、指定された <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトの指定された <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクトにストリーム転送します。</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object.">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクト。</param>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInfo">
      <summary vsli:raw="Represents the post-schema-validation infoset of a validated XML node.">検証済み XML ノードのスキーマ検証後の infoset を表します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInfo.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInfo&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.ContentType">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaContentType&quot; /&gt; object that corresponds to the content type of this validated XML node.">この検証済み XML ノードの内容の種類に対応する <see cref="T:System.Xml.Schema.XmlSchemaContentType" /> オブジェクトを取得または設定します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaContentType&quot; /&gt; object.">
        <see cref="T:System.Xml.Schema.XmlSchemaContentType" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.IsDefault">
      <summary vsli:raw="Gets or sets a value indicating if this validated XML node was set as the result of a default being applied during XML Schema Definition Language (XSD) schema validation.">この検証済みの XML ノードが、XML スキーマ定義言語 (XSD: XML Schema Definition Language) スキーマの検証の実行中に既定値を適用して設定されたかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see langword=&quot;bool&quot; /&gt; value.">
        <see langword="bool" /> 値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.IsNil">
      <summary vsli:raw="Gets or sets a value indicating if the value for this validated XML node is nil.">この検証済み XML ノードの値が nil かどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see langword=&quot;bool&quot; /&gt; value.">
        <see langword="bool" /> 値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.MemberType">
      <summary vsli:raw="Gets or sets the dynamic schema type for this validated XML node.">この検証済み XML ノードの動的なスキーマ型を取得または設定します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt; object.">
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute">
      <summary vsli:raw="Gets or sets the compiled &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt; object that corresponds to this validated XML node.">この検証済み XML ノードに対応するコンパイルされた <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> オブジェクトを取得または設定します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt; object.">
        <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaElement">
      <summary vsli:raw="Gets or sets the compiled &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaElement&quot; /&gt; object that corresponds to this validated XML node.">この検証済み XML ノードに対応するコンパイルされた <see cref="T:System.Xml.Schema.XmlSchemaElement" /> オブジェクトを取得または設定します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaElement&quot; /&gt; object.">
        <see cref="T:System.Xml.Schema.XmlSchemaElement" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaType">
      <summary vsli:raw="Gets or sets the static XML Schema Definition Language (XSD) schema type of this validated XML node.">この検証済み XML ノードの静的な XML スキーマ定義言語 (XSD) スキーマ型を取得または設定します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; object.">
        <see cref="T:System.Xml.Schema.XmlSchemaType" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.Validity">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidity&quot; /&gt; value of this validated XML node.">この検証済み XML ノードの <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> 値を取得または設定します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidity&quot; /&gt; value.">
        <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> 値。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaKey">
      <summary vsli:raw="This class represents the &lt;see langword=&quot;key&quot; /&gt; element from XMLSchema as specified by the World Wide Web Consortium (W3C).">このクラスは、W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="key" /> 要素を表します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaKey.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaKey&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaKey" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaKeyref">
      <summary vsli:raw="This class represents the &lt;see langword=&quot;keyref&quot; /&gt; element from XMLSchema as specified by the World Wide Web Consortium (W3C).">このクラスは、W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="keyref" /> 要素を表します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaKeyref.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaKeyref&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaKeyref" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaKeyref.Refer">
      <summary vsli:raw="Gets or sets the name of the key that this constraint refers to in another simple or complex type.">この制約が別の単純型または複合型で参照するキーの名前を取得または設定します。</summary>
      <returns vsli:raw="The QName of the key that this constraint refers to.">この制約が参照するキーの QName。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaLengthFacet">
      <summary vsli:raw="Represents the &lt;see langword=&quot;length&quot; /&gt; facet from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the length of a &lt;see langword=&quot;simpleType&quot; /&gt; element on the data type.">W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="length" /> ファセットを表します。 このクラスを使用すると、<see langword="simpleType" /> 要素のデータ型に対して、長さの制限を設定できます。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaLengthFacet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaLengthFacet&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet">
      <summary vsli:raw="Represents the &lt;see langword=&quot;maxExclusive&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the maximum value of a &lt;see langword=&quot;simpleType&quot; /&gt; element. The element value must be less than the value of the &lt;see langword=&quot;maxExclusive&quot; /&gt; element.">W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="maxExclusive" /> 要素を表します。 このクラスを使用すると、<see langword="simpleType" /> 要素の最大値に制限を設定できます。 要素の値は <see langword="maxExclusive" /> の値未満であることが必要です。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMaxExclusiveFacet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet">
      <summary vsli:raw="Represents the &lt;see langword=&quot;maxInclusive&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the maximum value of a &lt;see langword=&quot;simpleType&quot; /&gt; element. The element value must be less than or equal to the value of the &lt;see langword=&quot;maxInclusive&quot; /&gt; element.">W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="maxInclusive" /> 要素を表します。 このクラスを使用すると、<see langword="simpleType" /> 要素の最大値に制限を設定できます。 要素の値は <see langword="maxInclusive" /> 要素の値以下である必要があります。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMaxInclusiveFacet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxLengthFacet">
      <summary vsli:raw="Represents the &lt;see langword=&quot;maxLength&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the maximum length of the data value of a &lt;see langword=&quot;simpleType&quot; /&gt; element. The length must be less than the value of the &lt;see langword=&quot;maxLength&quot; /&gt; element.">W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="maxLength" /> 要素を表します。 このクラスを使用すると、<see langword="simpleType" /> 要素のデータ値の最大長に制限を設定できます。 データ値の長さは、<see langword="maxLength" /> 要素の値未満であることが必要です。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMaxLengthFacet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMaxLengthFacet&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet">
      <summary vsli:raw="Represents the &lt;see langword=&quot;minExclusive&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the minimum value of a &lt;see langword=&quot;simpleType&quot; /&gt; element. The element value must be greater than the value of the &lt;see langword=&quot;minExclusive&quot; /&gt; element.">W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="minExclusive" /> 要素を表します。 このクラスを使用すると、<see langword="simpleType" /> 要素の最小値に制限を設定できます。 要素の値は <see langword="minExclusive" /> 要素の値より大きくなければなりません。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMinExclusiveFacet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMinExclusiveFacet&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet">
      <summary vsli:raw="Represents the &lt;see langword=&quot;minInclusive&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the minimum value of a simpleType element. The element value must be greater than or equal to the value of the &lt;see langword=&quot;minInclusive&quot; /&gt; element.">W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="minInclusive" /> 要素を表します。 このクラスを使用すると、simpleType 要素の最小値に制限を設定できます。 要素の値は <see langword="minInclusive" /> 要素の値以上でなければなりません。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMinInclusiveFacet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMinInclusiveFacet&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinLengthFacet">
      <summary vsli:raw="Represents the &lt;see langword=&quot;minLength&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the minimum length of the data value of a &lt;see langword=&quot;simpleType&quot; /&gt; element. The length must be greater than the value of the &lt;see langword=&quot;minLength&quot; /&gt; element.">W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="minLength" /> 要素を表します。 このクラスを使用すると、<see langword="simpleType" /> 要素のデータ値の最小長に制限を設定できます。 データ値の長さの値は、<see langword="minLength" /> 要素の値より大きくなければなりません。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMinLengthFacet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMinLengthFacet&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaNotation">
      <summary vsli:raw="Represents the &lt;see langword=&quot;notation&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). An XML Schema &lt;see langword=&quot;notation&quot; /&gt; declaration is a reconstruction of &lt;see langword=&quot;XML 1.0 NOTATION&quot; /&gt; declarations. The purpose of notations is to describe the format of non-XML data within an XML document.">W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="notation" /> 要素を表します。 XML スキーマの <see langword="notation" /> 宣言は、<see langword="XML 1.0 NOTATION" /> 宣言を再構築したものです。 表記の目的は、XML ドキュメント内の XML 以外のデータの書式を記述することです。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaNotation.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaNotation&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaNotation" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.Name">
      <summary vsli:raw="Gets or sets the name of the notation.">表記の名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the notation.">表記の名前。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.Public">
      <summary vsli:raw="Gets or sets the &lt;see langword=&quot;public&quot; /&gt; identifier.">
        <see langword="public" /> 識別子を取得または設定します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;public&quot; /&gt; identifier. The value must be a valid Uniform Resource Identifier (URI).">
        <see langword="public" /> 識別子。 値は有効な URI (Uniform Resource Identifier) である必要があります。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.System">
      <summary vsli:raw="Gets or sets the &lt;see langword=&quot;system&quot; /&gt; identifier.">
        <see langword="system" /> 識別子を取得または設定します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;system&quot; /&gt; identifier. The value must be a valid URI.">
        <see langword="system" /> 識別子。 値は有効な URI である必要があります。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaNumericFacet">
      <summary vsli:raw="Abstract class for defining &lt;see langword=&quot;numeric&quot; /&gt; facets. This class is the base class for numeric facet classes such as &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMinLengthFacet&quot; /&gt;.">
        <see langword="numeric" /> ファセットを定義するための抽象クラス。 このクラスは、<see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" /> など、numeric ファセット クラスの基本クラスです。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaNumericFacet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaNumericFacet&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaNumericFacet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObject">
      <summary vsli:raw="Represents the root class for the Xml schema object model hierarchy and serves as a base class for classes such as the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; class.">Xml スキーマ オブジェクト モデルの階層構造におけるルート クラスを表し、<see cref="T:System.Xml.Schema.XmlSchema" /> などのクラスの基本クラスとして機能します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObject.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.LineNumber">
      <summary vsli:raw="Gets or sets the line number in the file to which the &lt;see langword=&quot;schema&quot; /&gt; element refers.">
        <see langword="schema" /> 要素が参照するファイルの行番号を取得または設定します。</summary>
      <returns vsli:raw="The line number.">行番号。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.LinePosition">
      <summary vsli:raw="Gets or sets the line position in the file to which the &lt;see langword=&quot;schema&quot; /&gt; element refers.">
        <see langword="schema" /> 要素が参照するファイルの行番号を取得または設定します。</summary>
      <returns vsli:raw="The line position.">行番号。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.Namespaces">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializerNamespaces&quot; /&gt; to use with this schema object.">このスキーマ オブジェクトと一緒に使用する <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> を取得または設定します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializerNamespaces&quot; /&gt; property for the schema object.">スキーマ オブジェクト用の <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> プロパティ。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.Parent">
      <summary vsli:raw="Gets or sets the parent of this &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">この <see cref="T:System.Xml.Schema.XmlSchemaObject" /> の親を取得または設定します。</summary>
      <returns vsli:raw="The parent &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; of this &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">この <see cref="T:System.Xml.Schema.XmlSchemaObject" /> の親 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.SourceUri">
      <summary vsli:raw="Gets or sets the source location for the file that loaded the schema.">スキーマを読み込んだファイルのソース位置を取得または設定します。</summary>
      <returns vsli:raw="The source location (URI) for the file.">ファイルのソース位置 (URI)。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectCollection">
      <summary vsli:raw="A collection of &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;s.">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> のコレクション。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlSchemaObjectCollection&quot; /&gt; class.">
        <see langword="XmlSchemaObjectCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.#ctor(System.Xml.Schema.XmlSchemaObject)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlSchemaObjectCollection&quot; /&gt; class that takes an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> を受け取る <see langword="XmlSchemaObjectCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="parent" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Add(System.Xml.Schema.XmlSchemaObject)">
      <summary vsli:raw="Adds an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; to the &lt;see langword=&quot;XmlSchemaObjectCollection&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> を <see langword="XmlSchemaObjectCollection" /> に追加します。</summary>
      <param name="item" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</param>
      <returns vsli:raw="The index at which the item has been added.">項目が追加された位置のインデックス。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see langword=&quot;Count&quot; /&gt;.">
        <paramref name="index" /> が 0 未満です。  
または 
 <paramref name="index" /> が <see langword="Count" /> より大きくなっています。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; parameter specified is not of type &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaExternal&quot; /&gt; or its derived types &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaImport&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInclude&quot; /&gt;, and &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaRedefine&quot; /&gt;.">指定された <see cref="T:System.Xml.Schema.XmlSchemaObject" /> パラメーターの型が <see cref="T:System.Xml.Schema.XmlSchemaExternal" />、またはその派生型 (<see cref="T:System.Xml.Schema.XmlSchemaImport" />、<see cref="T:System.Xml.Schema.XmlSchemaInclude" />、および <see cref="T:System.Xml.Schema.XmlSchemaRedefine" />) ではありません。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Contains(System.Xml.Schema.XmlSchemaObject)">
      <summary vsli:raw="Indicates if the specified &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; is in the &lt;see langword=&quot;XmlSchemaObjectCollection&quot; /&gt;.">指定した <see cref="T:System.Xml.Schema.XmlSchemaObject" /> が <see langword="XmlSchemaObjectCollection" /> に存在するかどうかを示します。</summary>
      <param name="item" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified qualified name is in the collection; otherwise, returns &lt;see langword=&quot;false&quot; /&gt;. If null is supplied, &lt;see langword=&quot;false&quot; /&gt; is returned because there is no qualified name with a null name.">指定した修飾名がコレクションにある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 null が提供されると、null 名を持つ限定名がないため、<see langword="false" /> が返されます。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.CopyTo(System.Xml.Schema.XmlSchemaObject[],System.Int32)">
      <summary vsli:raw="Copies all the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;s from the collection into the given array, starting at the given index.">コレクション内のすべての <see cref="T:System.Xml.Schema.XmlSchemaObject" /> を、指定したインデックスから始まる指定した配列にコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see langword=&quot;XmlSchemaObjectCollection&quot; /&gt;. The array must have zero-based indexing.">
        <see langword="XmlSchemaObjectCollection" /> から要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index" vsli:raw="The zero-based index in the array at which copying begins.">配列内のコピーを開始する位置を示す、0 から始まるインデックスです。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">
        <paramref name="array" /> が null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multi-dimensional.  &#xA;  &#xA;-or-&#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the length of &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA;-or-&#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; is greater than the available space from index to the end of the destination array.">
        <paramref name="array" /> が多次元です。  

または - 
<paramref name="index" /> が <paramref name="array" /> の長さ以上です。  

または 
コピー元の <see cref="T:System.Xml.Schema.XmlSchemaObject" /> の要素数が、インデックスからコピー先の配列の末尾までに格納できる数を超えています。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The type of the source &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; cannot be cast automatically to the type of the destination array.">コピー元の <see cref="T:System.Xml.Schema.XmlSchemaObject" /> の型が、コピー先の配列の型に自動的にキャストできません。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator for iterating through the &lt;see langword=&quot;XmlSchemaObjects&quot; /&gt; contained in the &lt;see langword=&quot;XmlSchemaObjectCollection&quot; /&gt;.">
        <see langword="XmlSchemaObjects" /> に格納されている <see langword="XmlSchemaObjectCollection" /> の反復処理する列挙子を返します。</summary>
      <returns vsli:raw="The iterator returns &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectEnumerator&quot; /&gt;.">この反復子は、<see cref="T:System.Xml.Schema.XmlSchemaObjectEnumerator" /> を返します。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.IndexOf(System.Xml.Schema.XmlSchemaObject)">
      <summary vsli:raw="Gets the collection index corresponding to the specified &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">指定した <see cref="T:System.Xml.Schema.XmlSchemaObject" /> に対応するコレクション インデックスを取得します。</summary>
      <param name="item" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; whose index you want to return.">返すインデックスの対象の <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</param>
      <returns vsli:raw="The index corresponding to the specified &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">指定した <see cref="T:System.Xml.Schema.XmlSchemaObject" /> に対応するインデックス。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Insert(System.Int32,System.Xml.Schema.XmlSchemaObject)">
      <summary vsli:raw="Inserts an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; to the &lt;see langword=&quot;XmlSchemaObjectCollection&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> を <see langword="XmlSchemaObjectCollection" /> に挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index at which an item should be inserted.">項目を挿入する位置の、0 から始まるインデックス番号。</param>
      <param name="item" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; to insert.">挿入する <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see langword=&quot;Count&quot; /&gt;.">
        <paramref name="index" /> が 0 未満です。  

または - 
<paramref name="index" /> が <see langword="Count" /> より大きくなっています。</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; at the specified index.">指定されたインデックス位置にある <see cref="T:System.Xml.Schema.XmlSchemaObject" /> を取得します。</summary>
      <param name="index" vsli:raw="The index of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> のインデックス。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; at the specified index.">指定されたインデックス位置にある <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnClear">
      <summary vsli:raw="&lt;see langword=&quot;OnClear&quot; /&gt; is invoked before the standard &lt;see langword=&quot;Clear&quot; /&gt; behavior. For more information, see OnClear method for &lt;see cref=&quot;T:System.Collections.CollectionBase&quot; /&gt;.">標準の <see langword="OnClear" /> 動作の前に、<see langword="Clear" /> が呼び出されます。 詳細については、<see cref="T:System.Collections.CollectionBase" /> の OnClear メソッドのトピックを参照してください。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnInsert(System.Int32,System.Object)">
      <summary vsli:raw="&lt;see langword=&quot;OnInsert&quot; /&gt; is invoked before the standard &lt;see langword=&quot;Insert&quot; /&gt; behavior. For more information, see &lt;see langword=&quot;OnInsert&quot; /&gt; method &lt;see cref=&quot;T:System.Collections.CollectionBase&quot; /&gt;.">標準の <see langword="OnInsert" /> 動作の前に、<see langword="Insert" /> が呼び出されます。 詳細については、<see cref="T:System.Collections.CollectionBase" /> の <see langword="OnInsert" /> メソッドのトピックを参照してください。</summary>
      <param name="index" vsli:raw="The index of &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> のインデックス。</param>
      <param name="item" vsli:raw="The item.">項目。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnRemove(System.Int32,System.Object)">
      <summary vsli:raw="&lt;see langword=&quot;OnRemove&quot; /&gt; is invoked before the standard &lt;see langword=&quot;Remove&quot; /&gt; behavior. For more information, see the &lt;see langword=&quot;OnRemove&quot; /&gt; method for &lt;see cref=&quot;T:System.Collections.CollectionBase&quot; /&gt;.">標準の <see langword="OnRemove" /> 動作の前に、<see langword="Remove" /> が呼び出されます。 詳細については、<see cref="T:System.Collections.CollectionBase" /> の <see langword="OnRemove" /> メソッドのトピックを参照してください。</summary>
      <param name="index" vsli:raw="The index of &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> のインデックス。</param>
      <param name="item" vsli:raw="The item.">項目。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary vsli:raw="&lt;see langword=&quot;OnSet&quot; /&gt; is invoked before the standard &lt;see langword=&quot;Set&quot; /&gt; behavior. For more information, see the OnSet method for &lt;see cref=&quot;T:System.Collections.CollectionBase&quot; /&gt;.">標準の <see langword="OnSet" /> 動作の前に、<see langword="Set" /> が呼び出されます。 詳細については、<see cref="T:System.Collections.CollectionBase" /> の OnSet メソッドのトピックを参照してください。</summary>
      <param name="index" vsli:raw="The index of &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> のインデックス。</param>
      <param name="oldValue" vsli:raw="The old value.">古い値。</param>
      <param name="newValue" vsli:raw="The new value.">新しい値。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Remove(System.Xml.Schema.XmlSchemaObject)">
      <summary vsli:raw="Removes an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; from the &lt;see langword=&quot;XmlSchemaObjectCollection&quot; /&gt;.">
        <see langword="XmlSchemaObjectCollection" /> から <see cref="T:System.Xml.Schema.XmlSchemaObject" /> を削除します。</summary>
      <param name="item" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; to remove.">削除する <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</param>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectEnumerator">
      <summary vsli:raw="Represents the enumerator for the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectCollection&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" /> の列挙子を表します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectEnumerator.Current">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; in the collection.">コレクション内の現在の <see cref="T:System.Xml.Schema.XmlSchemaObject" /> を取得します。</summary>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">現在の <see cref="T:System.Xml.Schema.XmlSchemaObject" /> です。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.MoveNext">
      <summary vsli:raw="Moves to the next item in the collection.">コレクションの次の項目に移動します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; at the end of the collection.">コレクションの末尾の <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.Reset">
      <summary vsli:raw="Resets the enumerator to the start of the collection.">列挙子をコレクションの先頭にリセットします。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectEnumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaObjectEnumerator.Current&quot; /&gt;.">このメンバーの詳細については、「<see cref="P:System.Xml.Schema.XmlSchemaObjectEnumerator.Current" />」をご覧ください。</summary>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">現在の <see cref="T:System.Xml.Schema.XmlSchemaObject" /> です。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.System#Collections#IEnumerator#MoveNext">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaObjectEnumerator.MoveNext&quot; /&gt;.">このメンバーの説明については、<see cref="M:System.Xml.Schema.XmlSchemaObjectEnumerator.MoveNext" /> のトピックを参照してください。</summary>
      <returns vsli:raw="The next &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">次の <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaObjectEnumerator.Reset&quot; /&gt;.">このメンバーの説明については、<see cref="M:System.Xml.Schema.XmlSchemaObjectEnumerator.Reset" /> のトピックを参照してください。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectTable">
      <summary vsli:raw="Provides the collections for contained elements in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; class (for example, Attributes, AttributeGroups, Elements, and so on).">
        <see cref="T:System.Xml.Schema.XmlSchema" /> クラスに格納される要素のコレクションを提供します (Attributes、AttributeGroups、Elements など)。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectTable.Contains(System.Xml.XmlQualifiedName)">
      <summary vsli:raw="Determines if the qualified name specified exists in the collection.">指定した修飾名がコレクション内にあるかどうかを調べます。</summary>
      <param name="name" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt;.">
        <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the qualified name specified exists in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した修飾名がコレクションに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Count">
      <summary vsli:raw="Gets the number of items contained in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> に格納されている項目の数を取得します。</summary>
      <returns vsli:raw="The number of items contained in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> に格納されている項目の数。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectTable.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that can iterate through the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> を反復処理できる列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; that can iterate through &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionaryEnumerator" /> を反復処理できる <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Item(System.Xml.XmlQualifiedName)">
      <summary vsli:raw="Returns the element in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt; specified by qualified name.">修飾名で指定した <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 内の要素を返します。</summary>
      <param name="name" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; of the element to return.">返される要素の <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; of the element in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt; specified by qualified name.">修飾名で指定した <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 内の要素の <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Names">
      <summary vsli:raw="Returns a collection of all the named elements in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 内のすべての名前付き要素のコレクションを返します。</summary>
      <returns vsli:raw="A collection of all the named elements in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 内のすべての名前付き要素のコレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Values">
      <summary vsli:raw="Returns a collection of all the values for all the elements in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 内のすべての要素値のコレクションを返します。</summary>
      <returns vsli:raw="A collection of all the values for all the elements in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 内のすべての要素値のコレクション。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaParticle">
      <summary vsli:raw="Abstract class for that is the base class for all particle types (e.g. &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAny&quot; /&gt;).">すべてのパーティクル型 (<see cref="T:System.Xml.Schema.XmlSchemaAny" /> など) の基底クラスとなる抽象クラスです。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaParticle.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaParticle&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaParticle" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MaxOccurs">
      <summary vsli:raw="Gets or sets the maximum number of times the particle can occur.">パーティクルが発生する最大回数を取得または設定します。</summary>
      <returns vsli:raw="The maximum number of times the particle can occur. The default is 1.">パーティクルが発生する最大回数。 既定値は 1 です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MaxOccursString">
      <summary vsli:raw="Gets or sets the number as a string value. Maximum number of times the particle can occur.">数字を文字列値として取得または設定します。 パーティクルが発生する最大回数。</summary>
      <returns vsli:raw="The number as a string value. &lt;see langword=&quot;String.Empty&quot; /&gt; indicates that &lt;see langword=&quot;MaxOccurs&quot; /&gt; is equal to the default value. The default is a null reference.">文字列値としての数値。 <see langword="String.Empty" /> は <see langword="MaxOccurs" /> が既定値に等しいことを示します。 既定値は null 参照です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MinOccurs">
      <summary vsli:raw="Gets or sets the minimum number of times the particle can occur.">パーティクルが発生する最小回数を取得または設定します。</summary>
      <returns vsli:raw="The minimum number of times the particle can occur. The default is 1.">パーティクルが発生する最小回数。 既定値は 1 です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MinOccursString">
      <summary vsli:raw="Gets or sets the number as a string value. The minimum number of times the particle can occur.">数字を文字列値として取得または設定します。 パーティクルが発生する最小回数。</summary>
      <returns vsli:raw="The number as a string value. &lt;see langword=&quot;String.Empty&quot; /&gt; indicates that &lt;see langword=&quot;MinOccurs&quot; /&gt; is equal to the default value. The default is a null reference.">文字列値としての数値。 <see langword="String.Empty" /> は <see langword="MinOccurs" /> が既定値に等しいことを示します。 既定値は null 参照です。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaPatternFacet">
      <summary vsli:raw="Represents the &lt;see langword=&quot;pattern&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the value entered for a &lt;see langword=&quot;simpleType&quot; /&gt; element.">W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="pattern" /> 要素を表します。 このクラスを使用すると、<see langword="simpleType" /> 要素に対して入力できる値に制限を設定できます。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaPatternFacet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaPatternFacet&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaRedefine">
      <summary vsli:raw="Represents the &lt;see langword=&quot;redefine&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to allow simple and complex types, groups and attribute groups from external schema files to be redefined in the current schema. This class can also be used to provide versioning for the schema elements.">W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="redefine" /> 要素を表します。 このクラスは、外部スキーマ ファイルの単純型と複合型、グループ、および属性グループを現在のスキーマで再定義できるようにする場合に使用します。 また、このクラスを使用して、スキーマ要素のバージョン管理を行うことができます。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaRedefine.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaRedefine&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaRedefine" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.AttributeGroups">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt; , for all attributes in the schema, which holds the post-compilation value of the &lt;see langword=&quot;AttributeGroups&quot; /&gt; property.">
        <see langword="AttributeGroups" /> プロパティのコンパイル後の値を保持する、スキーマのすべての属性の <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt; for all attributes in the schema. The post-compilation value of the &lt;see langword=&quot;AttributeGroups&quot; /&gt; property.">スキーマ内のすべての属性の <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。 <see langword="AttributeGroups" /> プロパティのコンパイル後の値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.Groups">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt;, for all groups in the schema, which holds the post-compilation value of the &lt;see langword=&quot;Groups&quot; /&gt; property.">
        <see langword="Groups" /> プロパティのコンパイル後の値を保持するスキーマのすべてのグループの <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt; for all groups in the schema. The post-compilation value of the &lt;see langword=&quot;Groups&quot; /&gt; property.">スキーマ内のすべてのグループの <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。 <see langword="Groups" /> プロパティのコンパイル後の値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.Items">
      <summary vsli:raw="Gets the collection of the following classes: &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAnnotation&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttributeGroup&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaComplexType&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt;, and &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaGroup&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />、<see cref="T:System.Xml.Schema.XmlSchemaAttributeGroup" />、<see cref="T:System.Xml.Schema.XmlSchemaComplexType" />、<see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />、<see cref="T:System.Xml.Schema.XmlSchemaGroup" /> の各クラスのコレクションを取得します。</summary>
      <returns vsli:raw="The elements contained within the redefine element.">再定義要素内に格納される要素。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.SchemaTypes">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt;, for all simple and complex types in the schema, which holds the post-compilation value of the &lt;see langword=&quot;SchemaTypes&quot; /&gt; property.">
        <see langword="SchemaTypes" /> プロパティのコンパイル後の値を保持する、スキーマのすべての単純型および複合型の <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt; for all schema types in the schema. The post-compilation value of the &lt;see langword=&quot;SchemaTypes&quot; /&gt; property.">スキーマ内のすべてのスキーマ型の <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。 <see langword="SchemaTypes" /> プロパティのコンパイル後の値。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSequence">
      <summary vsli:raw="Represents the &lt;see langword=&quot;sequence&quot; /&gt; element (compositor) from the XML Schema as specified by the World Wide Web Consortium (W3C). The &lt;see langword=&quot;sequence&quot; /&gt; requires the elements in the group to appear in the specified sequence within the containing element.">W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="sequence" /> 要素 (コンポジター) を表します。 <see langword="sequence" /> では、グループ内の要素が、指定した順番で出現する必要があります。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSequence.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSequence&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSequence.Items">
      <summary vsli:raw="The elements contained within the compositor. Collection of &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaElement&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaGroupRef&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaChoice&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSequence&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAny&quot; /&gt;.">コンポジター内に格納される要素。 <see cref="T:System.Xml.Schema.XmlSchemaElement" />、<see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaSequence" />、または <see cref="T:System.Xml.Schema.XmlSchemaAny" /> のコレクション。</summary>
      <returns vsli:raw="The elements contained within the compositor.">コンポジター内に格納される要素。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSet">
      <summary vsli:raw="Contains a cache of XML Schema definition language (XSD) schemas.">XML スキーマ定義言語 (XSD: XML Schema Definition Language) スキーマのキャッシュを格納します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> を指定して、<see cref="T:System.Xml.XmlNameTable" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="nameTable" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; object to use.">使用する <see cref="T:System.Xml.XmlNameTable" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; object passed as a parameter is &lt;see langword=&quot;null&quot; /&gt;.">パラメーターとして渡される <see cref="T:System.Xml.XmlNameTable" /> オブジェクトは <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)">
      <summary vsli:raw="Adds the XML Schema definition language (XSD) schema at the URL specified to the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">指定された URL の XML スキーマ定義言語 (XSD) スキーマを <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に追加します。</summary>
      <param name="targetNamespace" vsli:raw="The schema &lt;paramref name=&quot;targetNamespace&quot; /&gt; property, or &lt;see langword=&quot;null&quot; /&gt; to use the &lt;paramref name=&quot;targetNamespace&quot; /&gt; specified in the schema.">スキーマの <paramref name="targetNamespace" /> プロパティ。またはスキーマの指定された <paramref name="targetNamespace" /> を使用する場合は <see langword="null" />。</param>
      <param name="schemaUri" vsli:raw="The URL that specifies the schema to load.">読み込むスキーマを指定する URL。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object if the schema is valid. If the schema is not valid and a &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventHandler&quot; /&gt; is specified, then &lt;see langword=&quot;null&quot; /&gt; is returned and the appropriate validation event is raised. Otherwise, an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaException&quot; /&gt; is thrown.">スキーマが有効な場合は <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクト。 スキーマが無効で <see cref="T:System.Xml.Schema.ValidationEventHandler" /> が指定されている場合は、<see langword="null" /> が返され、該当する検証イベントが発生します。 それ以外の場合は、<see cref="T:System.Xml.Schema.XmlSchemaException" /> がスローされます。</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException" vsli:raw="The schema is not valid.">スキーマが有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The URL passed as a parameter is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt;.">パラメーターとして渡された URL が <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)">
      <summary vsli:raw="Adds the XML Schema definition language (XSD) schema contained in the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">
        <see cref="T:System.Xml.XmlReader" /> に格納されている XML スキーマ定義言語 (XSD) スキーマを <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に追加します。</summary>
      <param name="targetNamespace" vsli:raw="The schema &lt;paramref name=&quot;targetNamespace&quot; /&gt; property, or &lt;see langword=&quot;null&quot; /&gt; to use the &lt;paramref name=&quot;targetNamespace&quot; /&gt; specified in the schema.">スキーマの <paramref name="targetNamespace" /> プロパティ。またはスキーマの指定された <paramref name="targetNamespace" /> を使用する場合は <see langword="null" />。</param>
      <param name="schemaDocument" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object if the schema is valid. If the schema is not valid and a &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventHandler&quot; /&gt; is specified, then &lt;see langword=&quot;null&quot; /&gt; is returned and the appropriate validation event is raised. Otherwise, an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaException&quot; /&gt; is thrown.">スキーマが有効な場合は <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクト。 スキーマが無効で <see cref="T:System.Xml.Schema.ValidationEventHandler" /> が指定されている場合は、<see langword="null" /> が返され、該当する検証イベントが発生します。 それ以外の場合は、<see cref="T:System.Xml.Schema.XmlSchemaException" /> がスローされます。</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException" vsli:raw="The schema is not valid.">スキーマが有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object passed as a parameter is &lt;see langword=&quot;null&quot; /&gt;.">パラメーターとして渡される <see cref="T:System.Xml.XmlReader" /> オブジェクトは <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)">
      <summary vsli:raw="Adds the given &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; to the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">指定された <see cref="T:System.Xml.Schema.XmlSchema" /> を <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に追加します。</summary>
      <param name="schema" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object to add to the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に追加する <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクト。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object if the schema is valid. If the schema is not valid and a &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventHandler&quot; /&gt; is specified, then &lt;see langword=&quot;null&quot; /&gt; is returned and the appropriate validation event is raised. Otherwise, an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaException&quot; /&gt; is thrown.">スキーマが有効な場合は <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクト。 スキーマが無効で <see cref="T:System.Xml.Schema.ValidationEventHandler" /> が指定されている場合は、<see langword="null" /> が返され、該当する検証イベントが発生します。 それ以外の場合は、<see cref="T:System.Xml.Schema.XmlSchemaException" /> がスローされます。</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException" vsli:raw="The schema is not valid.">スキーマが有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object passed as a parameter is &lt;see langword=&quot;null&quot; /&gt;.">パラメーターとして渡される <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクトは <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)">
      <summary vsli:raw="Adds all the XML Schema definition language (XSD) schemas in the given &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; to the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">指定された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内のすべての XML スキーマ定義言語 (XSD) スキーマを <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に追加します。</summary>
      <param name="schemas" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; object.">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクト。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException" vsli:raw="A schema in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; is not valid.">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> のスキーマが有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; object passed as a parameter is &lt;see langword=&quot;null&quot; /&gt;.">パラメーターとして渡される <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクトは <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.CompilationSettings">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaCompilationSettings&quot; /&gt; for the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> の <see cref="T:System.Xml.Schema.XmlSchemaSet" /> を取得または設定します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaCompilationSettings&quot; /&gt; for the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;. The default is an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaCompilationSettings&quot; /&gt; instance with the &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck&quot; /&gt; property set to &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> の <see cref="T:System.Xml.Schema.XmlSchemaSet" />。 既定では、<see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> プロパティが <see langword="true" /> に設定された <see cref="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck" /> のインスタンス。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Compile">
      <summary vsli:raw="Compiles the XML Schema definition language (XSD) schemas added to the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; into one logical schema.">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に追加された XML スキーマ定義言語 (XSD) スキーマを 1 つの論理スキーマにコンパイルします。</summary>
      <exception cref="T:System.Xml.Schema.XmlSchemaException" vsli:raw="An error occurred when validating and compiling the schemas in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内のスキーマを検証およびコンパイルしているときにエラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Contains(System.String)">
      <summary vsli:raw="Indicates whether an XML Schema definition language (XSD) schema with the specified target namespace URI is in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">指定されたターゲット名前空間 URI を持つ XML スキーマ定義言語 (XSD) スキーマが <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内に存在するかどうかを示します。</summary>
      <param name="targetNamespace" vsli:raw="The schema &lt;paramref name=&quot;targetNamespace&quot; /&gt; property.">スキーマの <paramref name="targetNamespace" /> プロパティ。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a schema with the specified target namespace URI is in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定されたターゲット名前空間 URI を持つスキーマが <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内に存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)">
      <summary vsli:raw="Indicates whether the specified XML Schema definition language (XSD) &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object is in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">指定された XML スキーマ定義言語 (XSD) <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクトが <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内に存在するかどうかを示します。</summary>
      <param name="schema" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object.">
        <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object is in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクトが <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; passed as a parameter is &lt;see langword=&quot;null&quot; /&gt;.">パラメーターとして渡された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクトが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)">
      <summary vsli:raw="Copies all the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; objects from the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; to the given array, starting at the given index.">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 内のすべての <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクトを、指定したインデックスから始まる指定した配列にコピーします。</summary>
      <param name="schemas" vsli:raw="The array to copy the objects to.">オブジェクトのコピー先の配列。</param>
      <param name="index" vsli:raw="The index in the array where copying will begin.">配列内のコピー開始位置を示すインデックス。</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.Count">
      <summary vsli:raw="Gets the number of logical XML Schema definition language (XSD) schemas in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内の論理的な XML スキーマ定義言語 (XSD) スキーマの数を取得します。</summary>
      <returns vsli:raw="The number of logical schemas in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内の論理スキーマの数。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes">
      <summary vsli:raw="Gets all the global attributes in all the XML Schema definition language (XSD) schemas in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内のすべての XML スキーマ定義言語 (XSD) スキーマ内にあるすべてのグローバル属性を取得します。</summary>
      <returns vsli:raw="The collection of global attributes.">グローバル属性のコレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.GlobalElements">
      <summary vsli:raw="Gets all the global elements in all the XML Schema definition language (XSD) schemas in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内のすべての XML スキーマ定義言語 (XSD) スキーマ内にあるすべてのグローバル要素を取得します。</summary>
      <returns vsli:raw="The collection of global elements.">グローバル要素のコレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes">
      <summary vsli:raw="Gets all of the global simple and complex types in all the XML Schema definition language (XSD) schemas in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内のすべての XML スキーマ定義言語 (XSD) スキーマ内にあるすべてのグローバル単純型とグローバル複合型を取得します。</summary>
      <returns vsli:raw="The collection of global simple and complex types.">グローバル単純型とグローバル複合型のコレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.IsCompiled">
      <summary vsli:raw="Gets a value that indicates whether the XML Schema definition language (XSD) schemas in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; have been compiled.">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内の XML スキーマ定義言語 (XSD) スキーマがコンパイル済みかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the schemas in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; have been compiled since the last time a schema was added or removed from the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">前回 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に対してスキーマの追加または削除を行った後で、<see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内のスキーマをコンパイルしたことがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.NameTable">
      <summary vsli:raw="Gets the default &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; used by the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; when loading new XML Schema definition language (XSD) schemas.">新しい XML スキーマ定義言語 (XSD) スキーマを読み込むときに <see cref="T:System.Xml.XmlNameTable" /> で使用する既定の <see cref="T:System.Xml.Schema.XmlSchemaSet" /> を取得します。</summary>
      <returns vsli:raw="A table of atomized string objects.">最小単位に分割された文字列オブジェクトのテーブル。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)">
      <summary vsli:raw="Removes the specified XML Schema definition language (XSD) schema from the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">指定された XML スキーマ定義言語 (XSD) スキーマを <see cref="T:System.Xml.Schema.XmlSchemaSet" /> から削除します。</summary>
      <param name="schema" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object to remove from the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchema" /> から削除する <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクト。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object removed from the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; if the schema was not found in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchema" /> から削除された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクト。または、<see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内にスキーマが見つからなかった場合は <see langword="null" />。</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException" vsli:raw="The schema is not a valid schema.">スキーマが、有効なスキーマではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; passed as a parameter is &lt;see langword=&quot;null&quot; /&gt;.">パラメーターとして渡された <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクトが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)">
      <summary vsli:raw="Removes the specified XML Schema definition language (XSD) schema and all the schemas it imports from the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">指定された XML スキーマ定義言語 (XSD) スキーマとそれがインポートしたすべてのスキーマを <see cref="T:System.Xml.Schema.XmlSchemaSet" /> から削除します。</summary>
      <param name="schemaToRemove" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object to remove from the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchema" /> から削除する <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object and all its imports were successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクトとそれがインポートしたすべてのスキーマが正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; passed as a parameter is &lt;see langword=&quot;null&quot; /&gt;.">パラメーターとして渡された <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクトが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)">
      <summary vsli:raw="Reprocesses an XML Schema definition language (XSD) schema that already exists in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内に既に存在している XML スキーマ定義言語 (XSD) スキーマを再処理します。</summary>
      <param name="schema" vsli:raw="The schema to reprocess.">再処理するスキーマ。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object if the schema is a valid schema. If the schema is not valid and a &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventHandler&quot; /&gt; is specified, &lt;see langword=&quot;null&quot; /&gt; is returned and the appropriate validation event is raised. Otherwise, an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaException&quot; /&gt; is thrown.">スキーマが有効なスキーマの場合は <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクト。 スキーマが無効で <see cref="T:System.Xml.Schema.ValidationEventHandler" /> が指定されている場合は、<see langword="null" /> が返され、該当する検証イベントが発生します。 それ以外の場合は、<see cref="T:System.Xml.Schema.XmlSchemaException" /> がスローされます。</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException" vsli:raw="The schema is not valid.">スキーマが有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object passed as a parameter is &lt;see langword=&quot;null&quot; /&gt;.">パラメーターとして渡される <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクトは <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object passed as a parameter does not already exist in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">パラメーターとして渡された <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクトは、<see cref="T:System.Xml.Schema.XmlSchemaSet" /> に存在していません。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Schemas">
      <summary vsli:raw="Returns a collection of all the XML Schema definition language (XSD) schemas in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内のすべての XML スキーマ定義言語 (XSD) スキーマのコレクションを返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; object containing all the schemas that have been added to the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;. If no schemas have been added to the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;, an empty &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; object is returned.">
        <see cref="T:System.Collections.ICollection" /> に追加されたすべてのスキーマが格納された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクト。 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> にスキーマが追加されていない場合は、空の <see cref="T:System.Collections.ICollection" /> オブジェクトが返されます。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Schemas(System.String)">
      <summary vsli:raw="Returns a collection of all the XML Schema definition language (XSD) schemas in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; that belong to the given namespace.">指定された名前空間に属している <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内のすべての XML スキーマ定義言語 (XSD) スキーマのコレクションを返します。</summary>
      <param name="targetNamespace" vsli:raw="The schema &lt;paramref name=&quot;targetNamespace&quot; /&gt; property.">スキーマの <paramref name="targetNamespace" /> プロパティ。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; object containing all the schemas that have been added to the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; that belong to the given namespace. If no schemas have been added to the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;, an empty &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; object is returned.">指定された名前空間に属する <see cref="T:System.Collections.ICollection" /> に追加されたすべてのスキーマが格納された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクト。 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> にスキーマが追加されていない場合は、空の <see cref="T:System.Collections.ICollection" /> オブジェクトが返されます。</returns>
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler">
      <summary vsli:raw="Specifies an event handler for receiving information about XML Schema definition language (XSD) schema validation errors.">XML スキーマ定義言語 (XSD) スキーマ検証エラーに関する情報を受信するためのイベント ハンドラーを指定します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.XmlResolver">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve namespaces or locations referenced in include and import elements of a schema.">スキーマのインクルード要素およびインポート要素で参照される名前空間または場所を解決するために使用する <see cref="T:System.Xml.XmlResolver" /> を設定します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve namespaces or locations referenced in include and import elements of a schema.">スキーマのインクルード要素およびインポート要素で参照される名前空間または場所を解決するために使用する <see cref="T:System.Xml.XmlResolver" />。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContent">
      <summary vsli:raw="Represents the &lt;see langword=&quot;simpleContent&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is for simple and complex types with simple content model.">W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="simpleContent" /> 要素を表します。 このクラスは、単純なコンテンツ モデルを持つ単純型および複合型に使用します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleContent.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleContent&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleContent" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContent.Content">
      <summary vsli:raw="Gets one of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleContentRestriction&quot; /&gt; or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleContentExtension&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction" /> または <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentExtension" /> の 1 つを取得します。</summary>
      <returns vsli:raw="The content contained within the &lt;see langword=&quot;XmlSchemaSimpleContentRestriction&quot; /&gt; or &lt;see langword=&quot;XmlSchemaSimpleContentExtension&quot; /&gt; class.">
        <see langword="XmlSchemaSimpleContentRestriction" /> クラスまたは <see langword="XmlSchemaSimpleContentExtension" /> クラスに格納される内容。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContentExtension">
      <summary vsli:raw="Represents the &lt;see langword=&quot;extension&quot; /&gt; element for simple content from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to derive simple types by extension. Such derivations are used to extend the simple type content of the element by adding attributes.">W3C (World Wide Web Consortium) によって指定された XML スキーマの単純コンテンツに対する <see langword="extension" /> 要素を表します。 このクラスを使用すると、拡張することによって単純型を派生できます。 この派生方法は、属性を追加することによって単純型の要素の内容を拡張する場合に使用します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleContentExtension.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleContentExtension&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentExtension" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.AnyAttribute">
      <summary vsli:raw="Gets or sets the &lt;see langword=&quot;XmlSchemaAnyAttribute&quot; /&gt; to be used for the attribute value.">属性値で使用する <see langword="XmlSchemaAnyAttribute" /> を取得または設定します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlSchemaAnyAttribute&quot; /&gt;. Optional.">
        <see langword="XmlSchemaAnyAttribute" />。 任意。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.Attributes">
      <summary vsli:raw="Gets the collection of &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt; and &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttributeGroupRef&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> および <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> のコレクションを取得します。</summary>
      <returns vsli:raw="The collection of attributes for the &lt;see langword=&quot;simpleType&quot; /&gt; element.">
        <see langword="simpleType" /> 要素の属性のコレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.BaseTypeName">
      <summary vsli:raw="Gets or sets the name of a built-in data type or simple type from which this type is extended.">この型の拡張元の組み込みデータ型または単純型の名前を取得または設定します。</summary>
      <returns vsli:raw="The base type name.">基本型名。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction">
      <summary vsli:raw="Represents the &lt;see langword=&quot;restriction&quot; /&gt; element for simple content from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to derive simple types by restriction. Such derivations can be used to restrict the range of values for the element to a subset of the values specified in the inherited simple type.">W3C (World Wide Web Consortium) によって指定された XML スキーマの単純コンテンツに対する <see langword="restriction" /> 要素を表します。 このクラスを使用すると、制限を指定した単純型を派生できます。 この方法で単純型を派生させることにより、要素に対する値の範囲を、継承元の単純型で指定されている値のサブセットに制限できます。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleContentRestriction.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleContentRestriction&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.AnyAttribute">
      <summary vsli:raw="Gets or sets an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAnyAttribute&quot; /&gt; to be used for the attribute value.">属性値で使用する <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> を取得または設定します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAnyAttribute&quot; /&gt; for the attribute value. Optional.">属性値の <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" />。 任意。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.Attributes">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt; and &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttributeGroupRef&quot; /&gt; collection of attributes for the simple type.">単純型の属性の <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> および <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> コレクションを取得します。</summary>
      <returns vsli:raw="The collection of attributes for a simple type.">単純型の属性のコレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.BaseType">
      <summary vsli:raw="Gets or sets the simple type base value.">単純型の基本値を取得または設定します。</summary>
      <returns vsli:raw="The simple type base value.">単純型の基本値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.BaseTypeName">
      <summary vsli:raw="Gets or sets the name of the built-in data type or simple type from which this type is derived.">この型の派生元の組み込みデータ型または単純型の名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the base type.">基本型の名前。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.Facets">
      <summary vsli:raw="Gets or sets an Xml Schema facet.">XML スキーマのファセットを取得または設定します。</summary>
      <returns vsli:raw="One of the following facet classes:  &#xA;  &#xA; &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaLengthFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMinLengthFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMaxLengthFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaPatternFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaEnumerationFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMinInclusiveFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMinExclusiveFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaFractionDigitsFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaTotalDigitsFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet&quot; /&gt;.">次のファセット クラスの 1 つ。 
 <see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" />.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleType">
      <summary vsli:raw="Represents the &lt;see langword=&quot;simpleType&quot; /&gt; element for simple content from XML Schema as specified by the World Wide Web Consortium (W3C). This class defines a simple type. Simple types can specify information and constraints for the value of attributes or elements with text-only content.">W3C (World Wide Web Consortium) によって指定された XML スキーマの単純コンテンツに対する <see langword="simpleType" /> 要素を表します。 このクラスは単純型を定義します。 単純型では、テキストだけの内容を持つ属性または要素の値に関する情報や制約を指定できます。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleType.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleType.Content">
      <summary vsli:raw="Gets or sets one of &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleTypeUnion&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleTypeList&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion" />、<see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeList" />、または <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction" /> のいずれか 1 つを取得または設定します。</summary>
      <returns vsli:raw="One of &lt;see langword=&quot;XmlSchemaSimpleTypeUnion&quot; /&gt;, &lt;see langword=&quot;XmlSchemaSimpleTypeList&quot; /&gt;, or &lt;see langword=&quot;XmlSchemaSimpleTypeRestriction&quot; /&gt;.">
        <see langword="XmlSchemaSimpleTypeUnion" />、<see langword="XmlSchemaSimpleTypeList" />、または <see langword="XmlSchemaSimpleTypeRestriction" /> のいずれか 1 つ。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeContent">
      <summary vsli:raw="Abstract class for simple type content classes.">単純型のコンテンツ クラスの抽象クラス。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeContent.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleTypeContent&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeContent" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeList">
      <summary vsli:raw="Represents the &lt;see langword=&quot;list&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to define a &lt;see langword=&quot;simpleType&quot; /&gt; element as a list of values of a specified data type.">W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="list" /> 要素を表します。 このクラスを使用すると、<see langword="simpleType" /> 要素を、指定したデータ型の値のリストとして定義できます。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeList.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleTypeList&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeList" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.BaseItemType">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt; representing the type of the &lt;see langword=&quot;simpleType&quot; /&gt; element based on the &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemType&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemTypeName&quot; /&gt; values of the simple type.">
        <see langword="simpleType" /> 要素の型を表す <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> を、単純型の <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemType" /> 値および <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemTypeName" /> 値に基づいて取得または設定します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt; representing the type of the &lt;see langword=&quot;simpleType&quot; /&gt; element.">
        <see langword="simpleType" /> 要素の型を表す <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemType">
      <summary vsli:raw="Gets or sets the &lt;see langword=&quot;simpleType&quot; /&gt; element that is derived from the type specified by the base value.">基本値で指定した型から派生する <see langword="simpleType" /> 要素を取得または設定します。</summary>
      <returns vsli:raw="The item type for the simple type element.">単純型要素の項目の型。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemTypeName">
      <summary vsli:raw="Gets or sets the name of a built-in data type or &lt;see langword=&quot;simpleType&quot; /&gt; element defined in this schema (or another schema indicated by the specified namespace).">このスキーマまたは指定した名前空間で示された別のスキーマで定義された組み込みデータ型または <see langword="simpleType" /> 要素の名前を取得または設定します。</summary>
      <returns vsli:raw="The type name of the simple type list.">単純型リストの型名。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction">
      <summary vsli:raw="Represents the &lt;see langword=&quot;restriction&quot; /&gt; element for simple types from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used restricting &lt;see langword=&quot;simpleType&quot; /&gt; element.">W3C (World Wide Web Consortium) によって指定された XML スキーマの単純型に対する <see langword="restriction" /> 要素を表します。 このクラスを使用して、<see langword="simpleType" /> 要素を制限できます。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.BaseType">
      <summary vsli:raw="Gets or sets information on the base type.">基本型に関する情報を取得または設定します。</summary>
      <returns vsli:raw="The base type for the &lt;see langword=&quot;simpleType&quot; /&gt; element.">
        <see langword="simpleType" /> 要素の基本型。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.BaseTypeName">
      <summary vsli:raw="Gets or sets the name of the qualified base type.">限定基本型の名前を取得または設定します。</summary>
      <returns vsli:raw="The qualified name of the simple type restriction base type.">単純型の制限基本型の限定名。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.Facets">
      <summary vsli:raw="Gets or sets an Xml Schema facet.">XML スキーマのファセットを取得または設定します。</summary>
      <returns vsli:raw="One of the following facet classes:  &#xA;  &#xA; &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaLengthFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMinLengthFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMaxLengthFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaPatternFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaEnumerationFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMinInclusiveFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMinExclusiveFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaFractionDigitsFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaTotalDigitsFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet&quot; /&gt;.">次のファセット クラスの 1 つ。 
 <see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" />.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion">
      <summary vsli:raw="Represents the &lt;see langword=&quot;union&quot; /&gt; element for simple types from XML Schema as specified by the World Wide Web Consortium (W3C). A &lt;see langword=&quot;union&quot; /&gt; datatype can be used to specify the content of a &lt;see langword=&quot;simpleType&quot; /&gt;. The value of the &lt;see langword=&quot;simpleType&quot; /&gt; element must be any one of a set of alternative datatypes specified in the union. Union types are always derived types and must comprise at least two alternative datatypes.">W3C (World Wide Web Consortium) によって指定された XML スキーマの単純型に対する <see langword="union" /> 要素を表します。 <see langword="union" /> データ型を使用すると、<see langword="simpleType" /> の内容を設定できます。 <see langword="simpleType" /> 要素の値は、この共用体で指定されている複数のデータ型のうちの、いずれか 1 つであることが必要です。 共用体型は常に派生型であり、許容するデータ型が複数指定されている必要があります。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeUnion.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleTypeUnion&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseMemberTypes">
      <summary vsli:raw="Gets an array of &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt; objects representing the type of the &lt;see langword=&quot;simpleType&quot; /&gt; element based on the &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseTypes&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.MemberTypes&quot; /&gt; values of the simple type.">
        <see langword="simpleType" /> 要素の型を表す <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> オブジェクトの配列を、単純型の <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseTypes" /> 値および <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.MemberTypes" /> 値に基づいて取得します。</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt; objects representing the type of the &lt;see langword=&quot;simpleType&quot; /&gt; element.">
        <see langword="simpleType" /> 要素の型を表す <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> オブジェクトの配列。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseTypes">
      <summary vsli:raw="Gets the collection of base types.">基本型のコレクションを取得します。</summary>
      <returns vsli:raw="The collection of simple type base values.">単純型の基本値のコレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.MemberTypes">
      <summary vsli:raw="Gets or sets the array of qualified member names of built-in data types or &lt;see langword=&quot;simpleType&quot; /&gt; elements defined in this schema (or another schema indicated by the specified namespace).">このスキーマまたは指定した名前空間で示された別のスキーマで定義された組み込みデータ型または <see langword="simpleType" /> 要素の限定メンバー名の配列を取得または設定します。</summary>
      <returns vsli:raw="An array that consists of a list of members of built-in data types or simple types.">組み込みデータ型または単純型のメンバーのリストで構成される配列。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet">
      <summary vsli:raw="Represents the &lt;see langword=&quot;totalDigits&quot; /&gt; facet from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the number of digits that can be entered for the value of a &lt;see langword=&quot;simpleType&quot; /&gt; element. That value of &lt;see langword=&quot;totalDigits&quot; /&gt; must be a positive integer.">W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="totalDigits" /> ファセットを表します。 このクラスを使用すると、<see langword="simpleType" /> 要素の値として入力できる桁数を制限できます。 <see langword="totalDigits" /> の値は正の整数である必要があります。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaTotalDigitsFacet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaTotalDigitsFacet&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaType">
      <summary vsli:raw="The base class for all simple types and complex types.">すべての単純型と複合型の基本クラス。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaType" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.BaseSchemaType">
      <summary vsli:raw="Gets the post-compilation object type or the built-in XML Schema Definition Language (XSD) data type, simpleType element, or complexType element. This is a post-schema-compilation infoset property.">組み込み XML スキーマ定義言語 (XSD: XML Schema Definition Language) データ型、simpleType 要素、または complexType 要素のコンパイル後のオブジェクト型を取得します。 これは、スキーマ コンパイル後の infoset プロパティです。</summary>
      <returns vsli:raw="The built-in XSD data type, simpleType element, or complexType element.">組み込み XSD データ型、simpleType 要素、または complexType 要素。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType">
      <summary vsli:raw="Gets the post-compilation value for the base type of this schema type.">このスキーマ型の基本型に対応するコンパイル後の値を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; object representing the base type of this schema type.">このスキーマ型の基本型を表す <see cref="T:System.Xml.Schema.XmlSchemaType" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Datatype">
      <summary vsli:raw="Gets the post-compilation value for the data type of the complex type.">複合型のデータ型に対応するコンパイル後の値を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDatatype&quot; /&gt; post-schema-compilation value.">スキーマ コンパイル後の値の <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.DerivedBy">
      <summary vsli:raw="Gets the post-compilation information on how this element was derived from its base type.">この要素が基本型から派生された方法に関するコンパイル後の情報を取得します。</summary>
      <returns vsli:raw="One of the valid &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDerivationMethod&quot; /&gt; values.">有効な <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 値の 1 つ。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Final">
      <summary vsli:raw="Gets or sets the final attribute of the type derivation that indicates if further derivations are allowed.">さらに派生が可能かどうかを示す、型派生の final 属性を取得または設定します。</summary>
      <returns vsli:raw="One of the valid &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDerivationMethod&quot; /&gt; values. The default is &lt;see cref=&quot;F:System.Xml.Schema.XmlSchemaDerivationMethod.None&quot; /&gt;.">有効な <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 値の 1 つ。 既定値は、<see cref="F:System.Xml.Schema.XmlSchemaDerivationMethod.None" /> です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.FinalResolved">
      <summary vsli:raw="Gets the post-compilation value of the &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaType.Final&quot; /&gt; property.">
        <see cref="P:System.Xml.Schema.XmlSchemaType.Final" /> プロパティのコンパイル後の値を取得します。</summary>
      <returns vsli:raw="The post-compilation value of the &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaType.Final&quot; /&gt; property. The default is the &lt;see langword=&quot;finalDefault&quot; /&gt; attribute value of the &lt;see langword=&quot;schema&quot; /&gt; element.">
        <see cref="P:System.Xml.Schema.XmlSchemaType.Final" /> プロパティのコンパイル後の値。 既定値は <see langword="finalDefault" /> 要素の <see langword="schema" /> 属性値です。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.Schema.XmlTypeCode)">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaComplexType&quot; /&gt; that represents the built-in complex type of the complex type specified.">指定された複合型の組み込み複合型を表す <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> を返します。</summary>
      <param name="typeCode" vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.Schema.XmlTypeCode&quot; /&gt; values representing the complex type.">複合型を表す <see cref="T:System.Xml.Schema.XmlTypeCode" /> 値の 1 つ。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaComplexType&quot; /&gt; that represents the built-in complex type.">組み込み複合型を表す <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.XmlQualifiedName)">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaComplexType&quot; /&gt; that represents the built-in complex type of the complex type specified by qualified name.">修飾名で指定された複合型の組み込み複合型を表す <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> を返します。</summary>
      <param name="qualifiedName" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; of the complex type.">複合型の <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaComplexType&quot; /&gt; that represents the built-in complex type.">組み込み複合型を表す <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.XmlQualifiedName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.Schema.XmlTypeCode)">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt; that represents the built-in simple type of the specified simple type.">指定された単純型の組み込み単純型を表す <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> を返します。</summary>
      <param name="typeCode" vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.Schema.XmlTypeCode&quot; /&gt; values representing the simple type.">単純型を表す <see cref="T:System.Xml.Schema.XmlTypeCode" /> 値の 1 つ。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt; that represents the built-in simple type.">組み込み単純型を表す <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.XmlQualifiedName)">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt; that represents the built-in simple type of the simple type that is specified by the qualified name.">修飾名で指定された単純型の組み込み単純型を表す <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> を返します。</summary>
      <param name="qualifiedName" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; of the simple type.">単純型の <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt; that represents the built-in simple type.">組み込み単純型を表す <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.XmlQualifiedName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.IsDerivedFrom(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaDerivationMethod)">
      <summary vsli:raw="Returns a value indicating if the derived schema type specified is derived from the base schema type specified.">指定された派生スキーマ型が、指定された基本スキーマ型から派生したかどうかを示す値を返します。</summary>
      <param name="derivedType" vsli:raw="The derived &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; to test.">テスト対象の派生 <see cref="T:System.Xml.Schema.XmlSchemaType" />。</param>
      <param name="baseType" vsli:raw="The base &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; to test the derived &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; against.">テスト対象の派生 <see cref="T:System.Xml.Schema.XmlSchemaType" /> の基本 <see cref="T:System.Xml.Schema.XmlSchemaType" />。</param>
      <param name="except" vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDerivationMethod&quot; /&gt; values representing a type derivation method to exclude from testing.">テストから除外する型派生メソッドを表す <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 値の 1 つ。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the derived type is derived from the base type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">派生型が基本型から派生した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.IsMixed">
      <summary vsli:raw="Gets or sets a value indicating if this type has a mixed content model. This property is only valid in a complex type.">この型が混合コンテンツ モデルを持つかどうかを示す値を取得または設定します。 このプロパティは、複合型でだけ有効です。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type has a mixed content model; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">型が混合コンテンツ モデルを持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Name">
      <summary vsli:raw="Gets or sets the name of the type.">型の名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the type.">型の名前。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.QualifiedName">
      <summary vsli:raw="Gets the qualified name for the type built from the &lt;see langword=&quot;Name&quot; /&gt; attribute of this type. This is a post-schema-compilation property.">この型の <see langword="Name" /> 属性から構築された型の限定名を取得します。 これは、スキーマ コンパイル後のプロパティです。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; for the type built from the &lt;see langword=&quot;Name&quot; /&gt; attribute of this type.">この型の <see langword="Name" /> 属性から構築された型の <see cref="T:System.Xml.XmlQualifiedName" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.TypeCode">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.Schema.XmlTypeCode&quot; /&gt; of the type.">型の <see cref="T:System.Xml.Schema.XmlTypeCode" /> を取得します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.Schema.XmlTypeCode&quot; /&gt; values.">
        <see cref="T:System.Xml.Schema.XmlTypeCode" /> 値のいずれか。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaUnique">
      <summary vsli:raw="Represents the &lt;see langword=&quot;unique&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to identify a unique constraint among a set of elements.">W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="unique" /> 要素を表します。 このクラスを使用すると、一連の要素に対して一意性を持つという制約を指定できます。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaUnique.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaUnique&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaUnique" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaUse">
      <summary vsli:raw="Indicator of how the attribute is used.">属性の使用方法を示すインジケーター。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.None">
      <summary vsli:raw="Attribute use not specified.">属性の使用が指定されていません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Optional">
      <summary vsli:raw="Attribute is optional.">属性は省略可能です。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Prohibited">
      <summary vsli:raw="Attribute cannot be used.">属性を使用できません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Required">
      <summary vsli:raw="Attribute must appear once.">属性は一度使用する必要があります。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidationException">
      <summary vsli:raw="Represents the exception thrown when XML Schema Definition Language (XSD) schema validation errors and warnings are encountered in an XML document being validated.">XML ドキュメントを検証しているときに XML スキーマ定義言語 (XSD: XML Schema Definition Language) スキーマの検証エラーおよび検証警告を検出するとスローされる例外を表します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidationException&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidationException&quot; /&gt; class with the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; and &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; objects specified.">
        <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> クラスの新しいインスタンスを、指定された <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトと <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクトを使用して初期化します。</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object.">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクト。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidationException&quot; /&gt; class with the exception message specified.">
        <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> クラスの新しいインスタンスを、指定された例外メッセージを使用して初期化します。</summary>
      <param name="message" vsli:raw="A &lt;see langword=&quot;string&quot; /&gt; description of the error condition.">エラー状態の <see langword="string" /> の説明。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidationException&quot; /&gt; class with the exception message and original &lt;see cref=&quot;T:System.Exception&quot; /&gt; object that caused this exception specified.">
        <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> クラスの新しいインスタンスを、例外メッセージおよびこの例外が発生する原因になった元の <see cref="T:System.Exception" /> オブジェクトを指定して初期化します。</summary>
      <param name="message" vsli:raw="A &lt;see langword=&quot;string&quot; /&gt; description of the error condition.">エラー状態の <see langword="string" /> の説明。</param>
      <param name="innerException" vsli:raw="The original &lt;see cref=&quot;T:System.Exception&quot; /&gt; object that caused this exception.">この例外が発生する原因になった <see cref="T:System.Exception" /> オブジェクト。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidationException&quot; /&gt; class with the exception message specified, and the original &lt;see cref=&quot;T:System.Exception&quot; /&gt; object, line number, and line position of the XML that cause this exception specified.">
        <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> クラスの新しいインスタンスを、例外メッセージ、この例外が発生する原因になった <see cref="T:System.Exception" /> オブジェクト、XML の行番号、および XML の行位置を指定して初期化します。</summary>
      <param name="message" vsli:raw="A &lt;see langword=&quot;string&quot; /&gt; description of the error condition.">エラー状態の <see langword="string" /> の説明。</param>
      <param name="innerException" vsli:raw="The original &lt;see cref=&quot;T:System.Exception&quot; /&gt; object that caused this exception.">この例外が発生する原因になった <see cref="T:System.Exception" /> オブジェクト。</param>
      <param name="lineNumber" vsli:raw="The line number of the XML that caused this exception.">この例外が発生する原因になった XML の行番号。</param>
      <param name="linePosition" vsli:raw="The line position of the XML that caused this exception.">この例外が発生する原因になった XML の行位置。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Constructs a new &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidationException&quot; /&gt; object with the given &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; and &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; information that contains all the properties of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidationException&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> のすべてのプロパティを含む指定した <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 情報および <see cref="T:System.Runtime.Serialization.StreamingContext" /> 情報を使用して、新しい <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> オブジェクトを構築します。</summary>
      <param name="info" vsli:raw="&lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt;">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />
      </param>
      <param name="context" vsli:raw="&lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt;">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />
      </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.SetSourceObject(System.Object)">
      <summary vsli:raw="Sets the XML node that causes the error.">エラーの原因となった XML ノードを設定します。</summary>
      <param name="sourceObject" vsli:raw="The source object.">ソース オブジェクト。</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidationException.SourceObject">
      <summary vsli:raw="Gets the XML node that caused this &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidationException&quot; /&gt;.">この <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> が発生する原因になった XML ノードを取得します。</summary>
      <returns vsli:raw="The XML node that caused this &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidationException&quot; /&gt;.">この <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> が発生する原因になった XML ノード。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidationFlags">
      <summary vsli:raw="Specifies schema validation options used by the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidator&quot; /&gt; and &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; classes.">
        <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> クラスおよび <see cref="T:System.Xml.XmlReader" /> クラスで使用するスキーマ検証のオプションを指定します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes">
      <summary vsli:raw="Allow xml:* attributes even if they are not defined in the schema. The attributes will be validated based on their data type.">スキーマで定義されていない場合でも、xml:* 属性を許可します。 属性は対応するデータ型に基づいて検証されます。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.None">
      <summary vsli:raw="Do not process identity constraints, inline schemas, schema location hints, or report schema validation warnings.">ID 制約、インライン スキーマ、スキーマ位置ヒントを処理せず、スキーマ検証警告を報告しません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints">
      <summary vsli:raw="Process identity constraints (&lt;c&gt;xs:ID&lt;/c&gt;, &lt;c&gt;xs:IDREF&lt;/c&gt;, &lt;c&gt;xs:key&lt;/c&gt;, &lt;c&gt;xs:keyref&lt;/c&gt;, &lt;c&gt;xs:unique&lt;/c&gt;) encountered during validation.">検証を実行しているときに検出された ID 制約 (<c>xs:ID</c>、<c>xs:IDREF</c>、<c>xs:key</c>、<c>xs:keyref</c>、<c>xs:unique</c>) を処理します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema">
      <summary vsli:raw="Process inline schemas encountered during validation.">検証を実行しているときに検出されたインライン スキーマを処理します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation">
      <summary vsli:raw="Process schema location hints (&lt;c&gt;xsi:schemaLocation&lt;/c&gt;, &lt;c&gt;xsi:noNamespaceSchemaLocation&lt;/c&gt;) encountered during validation.">検証を実行しているときに検出されたスキーマ位置ヒント (<c>xsi:schemaLocation</c>、<c>xsi:noNamespaceSchemaLocation</c>) を処理します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings">
      <summary vsli:raw="Report schema validation warnings encountered during validation.">検証を実行しているときに検出されたスキーマ検証警告を報告します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidator">
      <summary vsli:raw="Represents an XML Schema Definition Language (XSD) Schema validation engine. The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidator&quot; /&gt; class cannot be inherited.">XML スキーマ定義言語 (XSD: XML Schema Definition Language) スキーマ検証エンジンを表します。 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> クラスは継承できません。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidator&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="nameTable" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; object containing element and attribute names as atomized strings.">要素名と属性名の最小単位に分割された文字列が格納された <see cref="T:System.Xml.XmlNameTable" /> オブジェクト。</param>
      <param name="schemas" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; object containing the XML Schema Definition Language (XSD) schemas used for validation.">検証に使用する XML スキーマ定義言語 (XSD) スキーマが格納された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクト。</param>
      <param name="namespaceResolver" vsli:raw="An &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object used for resolving namespaces encountered during validation.">検証中に検出される名前空間を解決するために使用する <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
      <param name="validationFlags" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidationFlags&quot; /&gt; value specifying schema validation options.">スキーマ検証オプションを指定する <see cref="T:System.Xml.Schema.XmlSchemaValidationFlags" /> 値。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more of the parameters specified are &lt;see langword=&quot;null&quot; /&gt;.">指定されたパラメーターの 1 つ以上が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaException" vsli:raw="An error occurred while compiling schemas in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; parameter.">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> パラメーター内のスキーマをコンパイルしているときにエラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.AddSchema(System.Xml.Schema.XmlSchema)">
      <summary vsli:raw="Adds an XML Schema Definition Language (XSD) schema to the set of schemas used for validation.">検証に使用するスキーマのセットに XML スキーマ定義言語 (XSD) スキーマを追加します。</summary>
      <param name="schema" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object to add to the set of schemas used for validation.">検証に使用するスキーマのセットに追加する <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; parameter specified is &lt;see langword=&quot;null&quot; /&gt;.">指定された <see cref="T:System.Xml.Schema.XmlSchema" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="The target namespace of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; parameter matches that of any element or attribute already encountered by the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidator&quot; /&gt; object.">
        <see cref="T:System.Xml.Schema.XmlSchema" /> パラメーターの対象名前空間が、既に <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> オブジェクトで検出されているいずれかの要素または属性の名前空間に一致します。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; parameter is invalid.">
        <see cref="T:System.Xml.Schema.XmlSchema" /> パラメーターが正しくありません。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.EndValidation">
      <summary vsli:raw="Ends validation and checks identity constraints for the entire XML document.">検証を終了し、XML ドキュメント全体に対して ID 制約をチェックします。</summary>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="An identity constraint error was found in the XML document.">XML ドキュメント内で ID 制約エラーが見つかりました。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes">
      <summary vsli:raw="Returns the expected attributes for the current element context.">現在の要素コンテキストに対して予期される属性を返します。</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt; objects or an empty array if there are no expected attributes.">
        <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> オブジェクトの配列。または、予期される属性がない場合は空の配列。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles">
      <summary vsli:raw="Returns the expected particles in the current element context.">現在の要素コンテキストで予期されるパーティクルを返します。</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaParticle&quot; /&gt; objects or an empty array if there are no expected particles.">
        <see cref="T:System.Xml.Schema.XmlSchemaParticle" /> オブジェクトの配列。または、予期されるパーティクルがない場合は空の配列。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes(System.Collections.ArrayList)">
      <summary vsli:raw="Validates identity constraints on the default attributes and populates the &lt;see cref=&quot;T:System.Collections.ArrayList&quot; /&gt; specified with &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt; objects for any attributes with default values that have not been previously validated using the &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute&quot; /&gt; method in the element context.">既定の属性に対する ID 制約を検証します。さらに、これまで要素コンテキストで <see cref="T:System.Collections.ArrayList" /> メソッドを使用して検証されたことのない、既定値を持つ任意の属性について、<see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> オブジェクトで指定された <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> を設定します。</summary>
      <param name="defaultAttributes" vsli:raw="An &lt;see cref=&quot;T:System.Collections.ArrayList&quot; /&gt; to populate with &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt; objects for any attributes not yet encountered during validation in the element context.">要素コンテキストで検証を実行しているときにまだ検出されたことのない属性について、<see cref="T:System.Collections.ArrayList" /> オブジェクトを使用して設定する <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.Initialize">
      <summary vsli:raw="Initializes the state of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidator&quot; /&gt; object.">
        <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> オブジェクトの状態を初期化します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Calling the &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.Initialize&quot; /&gt; method is valid immediately after the construction of an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidator&quot; /&gt; object or after a call to &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaValidator.EndValidation&quot; /&gt; only.">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /> メソッドの呼び出しは、<see cref="T:System.Xml.Schema.XmlSchemaValidator" /> オブジェクトを構築した直後または <see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /> を呼び出した後にだけ有効です。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.Initialize(System.Xml.Schema.XmlSchemaObject)">
      <summary vsli:raw="Initializes the state of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidator&quot; /&gt; object using the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; specified for partial validation.">部分検証用として指定された <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> を使用して、<see cref="T:System.Xml.Schema.XmlSchemaObject" /> オブジェクトの状態を初期化します。</summary>
      <param name="partialValidationType" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaElement&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; object used to initialize the validation context of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidator&quot; /&gt; object for partial validation.">
        <see cref="T:System.Xml.Schema.XmlSchemaElement" /> オブジェクトの検証コンテキストを部分検証用に初期化するために使用する、<see cref="T:System.Xml.Schema.XmlSchemaAttribute" />、<see cref="T:System.Xml.Schema.XmlSchemaType" />、または <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> オブジェクト。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Calling the &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.Initialize&quot; /&gt; method is valid immediately after the construction of an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidator&quot; /&gt; object or after a call to &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaValidator.EndValidation&quot; /&gt; only.">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /> メソッドの呼び出しは、<see cref="T:System.Xml.Schema.XmlSchemaValidator" /> オブジェクトを構築した直後または <see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /> を呼び出した後にだけ有効です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; parameter is not an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaElement&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; object.">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> パラメーターが、<see cref="T:System.Xml.Schema.XmlSchemaElement" />、<see cref="T:System.Xml.Schema.XmlSchemaAttribute" />、または <see cref="T:System.Xml.Schema.XmlSchemaType" /> オブジェクトのいずれでもありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; parameter cannot be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> パラメーターとして <see langword="null" /> を使用することはできません。</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.LineInfoProvider">
      <summary vsli:raw="Gets or sets the line number information for the XML node being validated.">検証する XML ノードの行番号の情報を取得または設定します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.IXmlLineInfo&quot; /&gt; object.">
        <see cref="T:System.Xml.IXmlLineInfo" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)">
      <summary vsli:raw="Skips validation of the current element content and prepares the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidator&quot; /&gt; object to validate content in the parent element's context.">現在の要素コンテンツの検証をスキップし、親要素のコンテキストでコンテンツの検証するために <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> オブジェクトを準備します。</summary>
      <param name="schemaInfo" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInfo&quot; /&gt; object whose properties are set if the current element content is successfully skipped. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">現在の要素の内容が正常にスキップされた場合にプロパティが設定される <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> オブジェクト。 このパラメーターは、<see langword="null" /> に設定できます。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)&quot; /&gt; method was not called in the correct sequence. For example, calling &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)&quot; /&gt; after calling &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)&quot; /&gt;.">
        <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> メソッドは、正しいシーケンスで呼び出されませんでした。 たとえば、<see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> を呼び出した後で <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> を呼び出した場合が該当します。</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.SourceUri">
      <summary vsli:raw="Gets or sets the source URI for the XML node being validated.">検証する XML ノードのソース URI を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Uri&quot; /&gt; object representing the source URI for the XML node being validated; the default is &lt;see langword=&quot;null&quot; /&gt;.">検証する XML ノードのソース URI を表す <see cref="T:System.Uri" /> オブジェクト。既定値は <see langword="null" /> です。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
      <summary vsli:raw="Validates the attribute name, namespace URI, and value in the current element context.">現在の要素コンテキストで属性の名前、名前空間 URI、および値を検証します。</summary>
      <param name="localName" vsli:raw="The local name of the attribute to validate.">検証する属性のローカル名。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the attribute to validate.">検証する属性の名前空間 URI。</param>
      <param name="attributeValue" vsli:raw="The value of the attribute to validate.">検証する属性の値。</param>
      <param name="schemaInfo" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInfo&quot; /&gt; object whose properties are set on successful validation of the attribute. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">属性が正常に検証された場合にプロパティが設定される <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> オブジェクト。 このパラメーターは、<see langword="null" /> に設定できます。</param>
      <returns vsli:raw="The validated attribute's value.">検証された属性の値。</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="The attribute is not valid in the current element context.">現在の要素コンテキストではこの属性は有効ではありません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute&quot; /&gt; method was not called in the correct sequence. For example, calling &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute&quot; /&gt; after calling &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)&quot; /&gt;.">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> メソッドは、正しいシーケンスで呼び出されませんでした。 たとえば、<see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> を呼び出した後で <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> を呼び出した場合が該当します。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more of the parameters specified are &lt;see langword=&quot;null&quot; /&gt;.">指定されたパラメーターの 1 つ以上が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)">
      <summary vsli:raw="Validates the attribute name, namespace URI, and value in the current element context.">現在の要素コンテキストで属性の名前、名前空間 URI、および値を検証します。</summary>
      <param name="localName" vsli:raw="The local name of the attribute to validate.">検証する属性のローカル名。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the attribute to validate.">検証する属性の名前空間 URI。</param>
      <param name="attributeValue" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlValueGetter&quot; /&gt;&lt;see langword=&quot;delegate&quot; /&gt; used to pass the attribute's value as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute.">属性の値を、属性の XML スキーマ定義言語 (XSD) 型と互換性のある共通言語ランタイム (CLR: Common Language Runtime) 型にして渡すために使用する <see cref="T:System.Xml.Schema.XmlValueGetter" /><see langword="delegate" />。</param>
      <param name="schemaInfo" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInfo&quot; /&gt; object whose properties are set on successful validation of the attribute. This parameter and can be &lt;see langword=&quot;null&quot; /&gt;.">属性が正常に検証された場合にプロパティが設定される <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> オブジェクト。 このパラメーターは、<see langword="null" /> の場合もあります。</param>
      <returns vsli:raw="The validated attribute's value.">検証された属性の値。</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="The attribute is not valid in the current element context.">現在の要素コンテキストではこの属性は有効ではありません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute&quot; /&gt; method was not called in the correct sequence. For example, calling &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute&quot; /&gt; after calling &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)&quot; /&gt;.">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> メソッドは、正しいシーケンスで呼び出されませんでした。 たとえば、<see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> を呼び出した後で <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> を呼び出した場合が該当します。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more of the parameters specified are &lt;see langword=&quot;null&quot; /&gt;.">指定されたパラメーターの 1 つ以上が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
      <summary vsli:raw="Validates the element in the current context.">現在のコンテキストで要素を検証します。</summary>
      <param name="localName" vsli:raw="The local name of the element to validate.">検証する要素のローカル名。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element to validate.">検証する要素の名前空間 URI。</param>
      <param name="schemaInfo" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInfo&quot; /&gt; object whose properties are set on successful validation of the element's name. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">要素の名前が正常に検証された場合にプロパティが設定される <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> オブジェクト。 このパラメーターは、<see langword="null" /> に設定できます。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="The element's name is not valid in the current context.">現在のコンテキストではこの要素の名前は有効ではありません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement&quot; /&gt; method was not called in the correct sequence. For example, the &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement&quot; /&gt; method is called after calling &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute&quot; /&gt;.">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> メソッドは、正しいシーケンスで呼び出されませんでした。 たとえば、<see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> メソッドを呼び出した後で <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> メソッドを呼び出した場合が該当します。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Validates the element in the current context with the &lt;c&gt;xsi:Type&lt;/c&gt;, &lt;c&gt;xsi:Nil&lt;/c&gt;, &lt;c&gt;xsi:SchemaLocation&lt;/c&gt;, and &lt;c&gt;xsi:NoNamespaceSchemaLocation&lt;/c&gt; attribute values specified.">指定された <c>xsi:Type</c>、<c>xsi:Nil</c>、<c>xsi:SchemaLocation</c>、および <c>xsi:NoNamespaceSchemaLocation</c> の各属性値を使用して、現在のコンテキストで要素を検証します。</summary>
      <param name="localName" vsli:raw="The local name of the element to validate.">検証する要素のローカル名。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element to validate.">検証する要素の名前空間 URI。</param>
      <param name="schemaInfo" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInfo&quot; /&gt; object whose properties are set on successful validation of the element's name. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">要素の名前が正常に検証された場合にプロパティが設定される <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> オブジェクト。 このパラメーターは、<see langword="null" /> に設定できます。</param>
      <param name="xsiType" vsli:raw="The &lt;c&gt;xsi:Type&lt;/c&gt; attribute value of the element. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">要素の <c>xsi:Type</c> 属性値。 このパラメーターは、<see langword="null" /> に設定できます。</param>
      <param name="xsiNil" vsli:raw="The &lt;c&gt;xsi:Nil&lt;/c&gt; attribute value of the element. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">要素の <c>xsi:Nil</c> 属性値。 このパラメーターは、<see langword="null" /> に設定できます。</param>
      <param name="xsiSchemaLocation" vsli:raw="The &lt;c&gt;xsi:SchemaLocation&lt;/c&gt; attribute value of the element. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">要素の <c>xsi:SchemaLocation</c> 属性値。 このパラメーターは、<see langword="null" /> に設定できます。</param>
      <param name="xsiNoNamespaceSchemaLocation" vsli:raw="The &lt;c&gt;xsi:NoNamespaceSchemaLocation&lt;/c&gt; attribute value of the element. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">要素の <c>xsi:NoNamespaceSchemaLocation</c> 属性値。 このパラメーターは、<see langword="null" /> に設定できます。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="The element's name is not valid in the current context.">現在のコンテキストではこの要素の名前は有効ではありません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement&quot; /&gt; method was not called in the correct sequence. For example, the &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement&quot; /&gt; method is called after calling &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute&quot; /&gt;.">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> メソッドは、正しいシーケンスで呼び出されませんでした。 たとえば、<see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> メソッドを呼び出した後で <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> メソッドを呼び出した場合が該当します。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)">
      <summary vsli:raw="Verifies if the text content of the element is valid according to its data type for elements with simple content, and verifies if the content of the current element is complete for elements with complex content.">単純な内容の要素に対しては、要素のテキストがそのデータ型に従った有効な内容かどうかについて検証し、複雑な内容の要素に対しては、現在の要素の内容が完全かどうかを検証します。</summary>
      <param name="schemaInfo" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInfo&quot; /&gt; object whose properties are set on successful validation of the element. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">要素が正常に検証された場合にプロパティが設定される <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> オブジェクト。 このパラメーターは、<see langword="null" /> に設定できます。</param>
      <returns vsli:raw="The parsed, typed text value of the element if the element has simple content.">要素が単純な内容の場合、要素の解析および型指定されたテキスト値。</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="The element's content is not valid.">要素の内容が有効ではありません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement&quot; /&gt; method was not called in the correct sequence. For example, if the &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement&quot; /&gt; method is called after calling &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)&quot; /&gt;.">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> メソッドは、正しいシーケンスで呼び出されませんでした。 たとえば、<see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> メソッドを呼び出した後で <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> メソッドを呼び出した場合が該当します。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
      <summary vsli:raw="Verifies if the text content of the element specified is valid according to its data type.">指定された要素のテキストが、そのデータ型に従った有効な内容であるかどうかを検証します。</summary>
      <param name="schemaInfo" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInfo&quot; /&gt; object whose properties are set on successful validation of the text content of the element. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">要素のテキストの内容が正常に検証された場合にプロパティが設定される <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> オブジェクト。 このパラメーターは、<see langword="null" /> に設定できます。</param>
      <param name="typedValue" vsli:raw="The typed text content of the element.">要素の型指定されたテキストの内容。</param>
      <returns vsli:raw="The parsed, typed simple content of the element.">要素の解析および型指定された単純な内容。</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="The element's text content is not valid.">要素のテキストの内容が有効ではありません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement&quot; /&gt; method was not called in the correct sequence (for example, if the &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement&quot; /&gt; method is called after calling &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)&quot; /&gt;), calls to the &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText&quot; /&gt; method have been previously made, or the element has complex content.">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> メソッドが正しいシーケンスで呼び出されなかった (たとえば、<see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> が呼び出された後で <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> メソッドが呼び出された) か、以前に <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> メソッドの呼び出しが行われているか、または要素が複雑な内容です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The typed text content parameter cannot be &lt;see langword=&quot;null&quot; /&gt;.">型指定されたテキストの内容のパラメーターは <see langword="null" /> にできません。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)">
      <summary vsli:raw="Verifies whether all the required attributes in the element context are present and prepares the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidator&quot; /&gt; object to validate the child content of the element.">要素コンテキスト中の必須属性がすべて揃っていることを検証し、要素の子コンテンツを検証するために <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> オブジェクトを準備します。</summary>
      <param name="schemaInfo" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInfo&quot; /&gt; object whose properties are set on successful verification that all the required attributes in the element context are present. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">必要なすべての属性が要素コンテキストに存在することが正常に検証された場合にプロパティが設定される <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> オブジェクト。 このパラメーターは、<see langword="null" /> に設定できます。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="One or more of the required attributes in the current element context were not found.">1 つ以上の必要な属性が、現在の要素コンテキストで見つかりませんでした。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)&quot; /&gt; method was not called in the correct sequence. For example, calling &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)&quot; /&gt; after calling &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)&quot; /&gt;.">
        <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> メソッドは、正しいシーケンスで呼び出されませんでした。 たとえば、<see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> を呼び出した後で <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> を呼び出した場合が該当します。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more of the parameters specified are &lt;see langword=&quot;null&quot; /&gt;.">指定されたパラメーターの 1 つ以上が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.String)">
      <summary vsli:raw="Validates whether the text &lt;see langword=&quot;string&quot; /&gt; specified is allowed in the current element context, and accumulates the text for validation if the current element has simple content.">現在の要素コンテキストで、指定されたテキスト <see langword="string" /> が許可されているかどうかを検証し、現在の要素が単純な内容の場合は検証用のテキストを累積します。</summary>
      <param name="elementValue" vsli:raw="A text &lt;see langword=&quot;string&quot; /&gt; to validate in the current element context.">現在の要素コンテキストで検証するテキスト <see langword="string" />。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="The text &lt;see langword=&quot;string&quot; /&gt; specified is not allowed in the current element context.">指定されたテキスト <see langword="string" /> は、現在の要素コンテキストでは許可されていません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText&quot; /&gt; method was not called in the correct sequence. For example, the &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText&quot; /&gt; method is called after calling &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute&quot; /&gt;.">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> メソッドは、正しいシーケンスで呼び出されませんでした。 たとえば、<see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> メソッドを呼び出した後で <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> メソッドを呼び出した場合が該当します。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The text &lt;see langword=&quot;string&quot; /&gt; parameter cannot be &lt;see langword=&quot;null&quot; /&gt;.">テキスト <see langword="string" /> パラメーターを <see langword="null" /> にすることはできません。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.Xml.Schema.XmlValueGetter)">
      <summary vsli:raw="Validates whether the text returned by the &lt;see cref=&quot;T:System.Xml.Schema.XmlValueGetter&quot; /&gt; object specified is allowed in the current element context, and accumulates the text for validation if the current element has simple content.">現在の要素コンテキストで、指定された <see cref="T:System.Xml.Schema.XmlValueGetter" /> オブジェクトで返されるテキストが許可されているかどうかを検証し、現在の要素が単純な内容の場合は検証用のテキストを累積します。</summary>
      <param name="elementValue" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlValueGetter&quot; /&gt;&lt;see langword=&quot;delegate&quot; /&gt; used to pass the text value as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute.">テキスト値を属性の XML スキーマ定義言語 (XSD) 型と互換性のある共通言語ランタイム (CLR) 型にして渡すために使用する、<see cref="T:System.Xml.Schema.XmlValueGetter" /><see langword="delegate" />。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="The text &lt;see langword=&quot;string&quot; /&gt; specified is not allowed in the current element context.">指定されたテキスト <see langword="string" /> は、現在の要素コンテキストでは許可されていません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText&quot; /&gt; method was not called in the correct sequence. For example, the &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText&quot; /&gt; method is called after calling &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute&quot; /&gt;.">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> メソッドは、正しいシーケンスで呼び出されませんでした。 たとえば、<see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> メソッドを呼び出した後で <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> メソッドを呼び出した場合が該当します。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The text &lt;see langword=&quot;string&quot; /&gt; parameter cannot be &lt;see langword=&quot;null&quot; /&gt;.">テキスト <see langword="string" /> パラメーターを <see langword="null" /> にすることはできません。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.String)">
      <summary vsli:raw="Validates whether the white space in the &lt;see langword=&quot;string&quot; /&gt; specified is allowed in the current element context, and accumulates the white space for validation if the current element has simple content.">現在の要素コンテキストで、指定された <see langword="string" /> 内に空白が許可されているかどうかを検証し、現在の要素が単純な内容の場合は検証用の空白を累積します。</summary>
      <param name="elementValue" vsli:raw="A white space &lt;see langword=&quot;string&quot; /&gt; to validate in the current element context.">現在の要素コンテキストで検証する空白 <see langword="string" />。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="White space is not allowed in the current element context.">現在の要素コンテキストでは空白は許可されていません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace&quot; /&gt; method was not called in the correct sequence. For example, if the &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace&quot; /&gt; method is called after calling &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute&quot; /&gt;.">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> メソッドは、正しいシーケンスで呼び出されませんでした。 たとえば、<see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> メソッドを呼び出した後で <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> メソッドを呼び出した場合が該当します。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.Xml.Schema.XmlValueGetter)">
      <summary vsli:raw="Validates whether the white space returned by the &lt;see cref=&quot;T:System.Xml.Schema.XmlValueGetter&quot; /&gt; object specified is allowed in the current element context, and accumulates the white space for validation if the current element has simple content.">現在の要素コンテキストで、指定された <see cref="T:System.Xml.Schema.XmlValueGetter" /> オブジェクトで返される空白が許可されているかどうかを検証し、現在の要素が単純な内容の場合は検証用の空白を累積します。</summary>
      <param name="elementValue" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlValueGetter&quot; /&gt;&lt;see langword=&quot;delegate&quot; /&gt; used to pass the white space value as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute.">空白値を属性の XML スキーマ定義言語 (XSD) 型と互換性のある共通言語ランタイム (CLR) 型にして渡すために使用する、<see cref="T:System.Xml.Schema.XmlValueGetter" /><see langword="delegate" />。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="White space is not allowed in the current element context.">現在の要素コンテキストでは空白は許可されていません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace&quot; /&gt; method was not called in the correct sequence. For example, if the &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace&quot; /&gt; method is called after calling &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute&quot; /&gt;.">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> メソッドは、正しいシーケンスで呼び出されませんでした。 たとえば、<see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> メソッドを呼び出した後で <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> メソッドを呼び出した場合が該当します。</exception>
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventHandler&quot; /&gt; that receives schema validation warnings and errors encountered during schema validation.">スキーマを検証しているときに検出されるスキーマの検証警告と検証エラーを受信する <see cref="T:System.Xml.Schema.ValidationEventHandler" />。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.ValidationEventSender">
      <summary vsli:raw="Gets or sets the object sent as the sender object of a validation event.">検証イベントの送信元オブジェクトとして送信されるオブジェクトを取得または設定します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt;; the default is this &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidator&quot; /&gt; object.">
        <see cref="T:System.Object" />。既定値はこの <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> オブジェクトです。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.XmlResolver">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; object used to resolve &lt;c&gt;xs:import&lt;/c&gt; and &lt;c&gt;xs:include&lt;/c&gt; elements as well as &lt;c&gt;xsi:schemaLocation&lt;/c&gt; and &lt;c&gt;xsi:noNamespaceSchemaLocation&lt;/c&gt; attributes.">
        <c>xs:import</c> 要素と <c>xs:include</c> 要素および <c>xsi:schemaLocation</c> 属性と <c>xsi:noNamespaceSchemaLocation</c> 属性の解決に使用する <see cref="T:System.Xml.XmlResolver" /> オブジェクトを設定します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; object; the default is an &lt;see cref=&quot;T:System.Xml.XmlUrlResolver&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlResolver" /> オブジェクト。既定値は <see cref="T:System.Xml.XmlUrlResolver" /> オブジェクトです。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidity">
      <summary vsli:raw="Represents the validity of an XML item validated by the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidator&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> クラスによって検証された XML 項目の有効性を表します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidity.Invalid">
      <summary vsli:raw="The XML item is invalid.">XML 項目が無効です。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidity.NotKnown">
      <summary vsli:raw="The validity of the XML item is not known.">XML 項目の有効性が不明です。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidity.Valid">
      <summary vsli:raw="The XML item is valid.">XML 項目が有効です。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet">
      <summary vsli:raw="Represents the World Wide Web Consortium (W3C) &lt;see langword=&quot;whiteSpace&quot; /&gt; facet.">W3C (World Wide Web Consortium) <see langword="whiteSpace" /> ファセットを表します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaWhiteSpaceFacet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaXPath">
      <summary vsli:raw="Represents the World Wide Web Consortium (W3C) &lt;see langword=&quot;selector&quot; /&gt; element.">W3C (World Wide Web Consortium) <see langword="selector" /> 要素を表します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaXPath.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaXPath&quot; /&gt; class.">
        <see cref="T:System.Xml.Schema.XmlSchemaXPath" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaXPath.XPath">
      <summary vsli:raw="Gets or sets the attribute for the XPath expression.">XPath 式の属性を取得または設定します。</summary>
      <returns vsli:raw="The string attribute value for the XPath expression.">XPath 式の文字列の属性値。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSeverityType">
      <summary vsli:raw="Represents the severity of the validation event.">検証イベントの重大度レベルを表します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSeverityType.Error">
      <summary vsli:raw="Indicates a validation error occurred when validating the instance document. This applies to document type definitions (DTDs) and XML Schema definition language (XSD) schemas. The World Wide Web Consortium (W3C) validity constraints are considered errors. If no validation event handler has been created, errors throw an exception.">インスタンス ドキュメントの検証時に発生した検証エラーを示します。 これは、文書型定義 (DTD: Document Type Definition) スキーマおよび XML スキーマ定義言語 (XSD: XML Schema Definition Language) スキーマに適用されます。 W3C (World Wide Web Consortium) 検証制約は、エラーと見なされます。 検証イベント ハンドラーが作成されていない場合、エラーは例外をスローします。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSeverityType.Warning">
      <summary vsli:raw="Indicates that a validation event occurred that is not an error. A warning is typically issued when there is no DTD, or XML Schema to validate a particular element or attribute against. Unlike errors, warnings do not throw an exception if there is no validation event handler.">エラー以外の検証イベントが発生したことを示します。 通常、警告は、特定の要素または属性を検証する DTD、または XML スキーマがないときに発行されます。 エラーとは異なり、検証イベント ハンドラーがない場合、警告は例外をスローしません。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlTypeCode">
      <summary vsli:raw="Represents the W3C XML Schema Definition Language (XSD) schema types.">W3C XML スキーマ定義言語 (XSD: XML Schema Definition Language) スキーマ型を表します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.AnyAtomicType">
      <summary vsli:raw="Any atomic value of a union.">共用体を構成する任意の原子値です。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.AnyUri">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:anyURI&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:anyURI" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Attribute">
      <summary vsli:raw="This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.">この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Base64Binary">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:base64Binary&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:base64Binary" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Boolean">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:boolean&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:boolean" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Byte">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:byte&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:byte" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Comment">
      <summary vsli:raw="This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.">この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Date">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:date&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:date" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.DateTime">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:dateTime&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:dateTime" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.DayTimeDuration">
      <summary vsli:raw="This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.">この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Decimal">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:decimal&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:decimal" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Document">
      <summary vsli:raw="This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.">この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Double">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:double&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:double" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Duration">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:Duration&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:Duration" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Element">
      <summary vsli:raw="This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.">この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Entity">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:ENTITY&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:ENTITY" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Float">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:float&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:float" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GDay">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:gDay&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:gDay" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GMonth">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:gMonth&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:gMonth" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GMonthDay">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:gMonthDay&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:gMonthDay" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GYear">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:gYear&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:gYear" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GYearMonth">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:gYearMonth&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:gYearMonth" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.HexBinary">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:hexBinary&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:hexBinary" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Id">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:ID&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:ID" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Idref">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:IDREF&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:IDREF" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Int">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:int&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:int" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Integer">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:integer&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:integer" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Item">
      <summary vsli:raw="An item such as a node or atomic value.">ノードや原子値などの項目。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Language">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:language&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:language" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Long">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:long&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:long" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Name">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:Name&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:Name" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Namespace">
      <summary vsli:raw="This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.">この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NCName">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:NCName&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:NCName" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NegativeInteger">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:negativeInteger&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:negativeInteger" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NmToken">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:NMTOKEN&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:NMTOKEN" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Node">
      <summary vsli:raw="This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.">この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.None">
      <summary vsli:raw="No type information.">型情報なし。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NonNegativeInteger">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:nonNegativeInteger&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:nonNegativeInteger" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NonPositiveInteger">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:nonPositiveInteger&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:nonPositiveInteger" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NormalizedString">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:normalizedString&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:normalizedString" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Notation">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:NOTATION&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:NOTATION" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.PositiveInteger">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:positiveInteger&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:positiveInteger" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.ProcessingInstruction">
      <summary vsli:raw="This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.">この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.QName">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:QName&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:QName" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Short">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:short&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:short" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.String">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:string&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:string" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Text">
      <summary vsli:raw="This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.">この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Time">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:time&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:time" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Token">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:token&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:token" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedByte">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:unsignedByte&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:unsignedByte" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedInt">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:unsignedInt&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:unsignedInt" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedLong">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:unsignedLong&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:unsignedLong" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedShort">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:unsignedShort&quot; /&gt; type.">W3C XML スキーマの <see langword="xs:unsignedShort" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UntypedAtomic">
      <summary vsli:raw="An untyped atomic value.">型指定されていない原子値。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.YearMonthDuration">
      <summary vsli:raw="This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.">この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlValueGetter">
      <summary vsli:raw="A &lt;see langword=&quot;delegate&quot; /&gt; used by the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidator&quot; /&gt; class to pass attribute, text, and white space values as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute, text, or white space.">属性、テキスト、および空白の各値を、属性、テキスト、または空白の XML スキーマ定義言語 (XSD: XML Schema Definition Language) 型と互換性のある共通言語ランタイム (CLR: Common Language Runtime) 型にして渡すために、<see cref="T:System.Xml.Schema.XmlSchemaValidator" /> クラスで使用する <see langword="delegate" />。</summary>
      <returns vsli:raw="An object containing the attribute, text, or white space value. The object is a CLR type that corresponds to the XSD type of the attribute, text, or white space value.">属性、テキスト、または空白の各値を保持するオブジェクト。 このオブジェクトは、属性、テキスト、空白の各値の XSD 型に対応する CLR 型になります。</returns>
    </member>
    <member name="T:System.Xml.Serialization.IXmlSerializable">
      <summary vsli:raw="Provides custom formatting for XML serialization and deserialization.">XML シリアル化および逆シリアル化のカスタム書式を提供します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
      <summary vsli:raw="This method is reserved and should not be used. When implementing the &lt;see langword=&quot;IXmlSerializable&quot; /&gt; interface, you should return &lt;see langword=&quot;null&quot; /&gt; (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSchemaProviderAttribute&quot; /&gt; to the class.">このメソッドは予約されているため、使用できません。 <see langword="IXmlSerializable" /> インターフェイスを実装する場合、このメソッドから <see langword="null" /> (Visual Basic では <see langword="Nothing" />) を返す必要があります。また、カスタム スキーマの指定が要求されている場合は、このクラスに <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> を適用します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; that describes the XML representation of the object that is produced by the &lt;see cref=&quot;M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)&quot; /&gt; method and consumed by the &lt;see cref=&quot;M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)&quot; /&gt; method.">
        <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> メソッドによって生成され <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> メソッドによって処理されるオブジェクトの XML 表現を記述する <see cref="T:System.Xml.Schema.XmlSchema" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
      <summary vsli:raw="Generates an object from its XML representation.">オブジェクトの XML 表現からオブジェクトを生成します。</summary>
      <param name="reader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; stream from which the object is deserialized.">オブジェクトの逆シリアル化元である <see cref="T:System.Xml.XmlReader" /> ストリーム。</param>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
      <summary vsli:raw="Converts an object into its XML representation.">オブジェクトを XML 表現に変換します。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; stream to which the object is serialized.">オブジェクトのシリアル化先の <see cref="T:System.Xml.XmlWriter" /> ストリーム。</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyAttributeAttribute">
      <summary vsli:raw="Specifies that the member (a field that returns an array of &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt; objects) can contain any XML attributes.">メンバー (<see cref="T:System.Xml.XmlAttribute" /> オブジェクトの配列を返すフィールド) に任意の XML 属性を含めることができるように指定します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyAttributeAttribute.#ctor">
      <summary vsli:raw="Constructs a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlAnyAttributeAttribute&quot; /&gt; class.">
        <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" /> クラスの新しいインスタンスを生成します。</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyElementAttribute">
      <summary vsli:raw="Specifies that the member (a field that returns an array of &lt;see cref=&quot;T:System.Xml.XmlElement&quot; /&gt; or &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; objects) contains objects that represent any XML element that has no corresponding member in the object being serialized or deserialized.">メンバー (<see cref="T:System.Xml.XmlElement" /> オブジェクトまたは <see cref="T:System.Xml.XmlNode" /> オブジェクトの配列を返すフィールド) に、シリアル化または逆シリアル化対象のオブジェクト内に対応するメンバーがない任意の XML 要素を表すオブジェクトを含めるように指定します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlAnyElementAttribute&quot; /&gt; class.">
        <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlAnyElementAttribute&quot; /&gt; class and specifies the XML element name generated in the XML document.">
        <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> クラスの新しいインスタンスを初期化し、XML ドキュメントに生成される XML 要素名を指定します。</summary>
      <param name="name" vsli:raw="The name of the XML element that the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; generates.">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が生成する XML 要素の名前。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlAnyElementAttribute&quot; /&gt; class and specifies the XML element name generated in the XML document and its XML namespace.">
        <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> クラスの新しいインスタンスを初期化し、XML ドキュメントに生成される XML 要素名とその XML 名前空間を指定します。</summary>
      <param name="name" vsli:raw="The name of the XML element that the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; generates.">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が生成する XML 要素の名前。</param>
      <param name="ns" vsli:raw="The XML namespace of the XML element.">XML 要素の XML 名前空間。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Name">
      <summary vsli:raw="Gets or sets the XML element name.">XML 要素名を取得または設定します。</summary>
      <returns vsli:raw="The name of the XML element.">XML 要素の名前。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The element name of an array member does not match the element name specified by the &lt;see cref=&quot;P:System.Xml.Serialization.XmlAnyElementAttribute.Name&quot; /&gt; property.">配列メンバーの要素名が、<see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> プロパティに指定されている要素名と一致しません。</exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace">
      <summary vsli:raw="Gets or sets the XML namespace generated in the XML document.">XML ドキュメントに生成される XML 名前空間を取得または設定します。</summary>
      <returns vsli:raw="An XML namespace.">XML 名前空間。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Order">
      <summary vsli:raw="Gets or sets the explicit order in which the elements are serialized or deserialized.">要素のシリアル化または逆シリアル化を行う明示的な順序を取得または設定します。</summary>
      <returns vsli:raw="The order of the code generation.">コード生成の順序。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeAttribute">
      <summary vsli:raw="Specifies that the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; must serialize the class member as an XML attribute.">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> がクラス メンバーを XML 属性としてシリアル化する必要があることを指定します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlAttributeAttribute&quot; /&gt; class.">
        <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlAttributeAttribute&quot; /&gt; class and specifies the name of the generated XML attribute.">
        <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> クラスの新しいインスタンスを初期化し、生成される XML 属性の名前を指定します。</summary>
      <param name="attributeName" vsli:raw="The name of the XML attribute that the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; generates.">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が生成する XML 属性の名前。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlAttributeAttribute&quot; /&gt; class.">
        <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="attributeName" vsli:raw="The name of the XML attribute that is generated.">生成される XML 属性の名前。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; used to store the attribute.">属性を取得するために使用する <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlAttributeAttribute&quot; /&gt; class.">
        <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; used to store the attribute.">属性を取得するために使用する <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.AttributeName">
      <summary vsli:raw="Gets or sets the name of the XML attribute.">XML 属性の名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the XML attribute. The default is the member name.">XML 属性の名前。 既定値はメンバー名です。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.DataType">
      <summary vsli:raw="Gets or sets the XSD data type of the XML attribute generated by the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt;.">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> によって生成された XML 属性の XSD データ型を取得または設定します。</summary>
      <returns vsli:raw="An XSD (XML Schema Document) data type.">XSD (XML スキーマドキュメント) データ型。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Form">
      <summary vsli:raw="Gets or sets a value that indicates whether the XML attribute name generated by the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; is qualified.">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> によって生成された XML 属性名が修飾されているかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaForm&quot; /&gt; values. The default is &lt;see langword=&quot;XmlForm.None&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 値のいずれか 1 つ。 既定値は、<see langword="XmlForm.None" /> です。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Namespace">
      <summary vsli:raw="Gets or sets the XML namespace of the XML attribute.">XML 属性の XML 名前空間を取得または設定します。</summary>
      <returns vsli:raw="The XML namespace of the XML attribute.">XML 属性の XML 名前空間。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Type">
      <summary vsli:raw="Gets or sets the complex type of the XML attribute.">XML 属性の複合型を取得または設定します。</summary>
      <returns vsli:raw="The type of the XML attribute.">XML 属性の型。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementAttribute">
      <summary vsli:raw="Indicates that a public field or property represents an XML element when the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; serializes or deserializes the object that contains it.">パブリック フィールドまたはパブリック プロパティを持つオブジェクトを <see cref="T:System.Xml.Serialization.XmlSerializer" /> がシリアル化または逆シリアル化するときに、それらのフィールドまたはプロパティが XML 要素を表すかどうかを示します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlElementAttribute&quot; /&gt; class.">
        <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlElementAttribute&quot; /&gt; class and specifies the name of the XML element.">XML 要素の名前を指定して、<see cref="T:System.Xml.Serialization.XmlElementAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="elementName" vsli:raw="The XML element name of the serialized member.">シリアル化されたメンバーの XML 要素名。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlElementAttribute&quot; /&gt; and specifies the name of the XML element and a derived type for the member to which the &lt;see cref=&quot;T:System.Xml.Serialization.XmlElementAttribute&quot; /&gt; is applied. This member type is used when the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; serializes the object that contains it.">
        <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> の新しいインスタンスを初期化し、<see cref="T:System.Xml.Serialization.XmlElementAttribute" /> の適用先であるメンバーの XML 要素の名前と派生型を指定します。 このメンバー型が使用されるのは、その型を含むオブジェクトを <see cref="T:System.Xml.Serialization.XmlSerializer" /> がシリアル化する場合です。</summary>
      <param name="elementName" vsli:raw="The XML element name of the serialized member.">シリアル化されたメンバーの XML 要素名。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of an object derived from the member's type.">メンバーの型から派生したオブジェクトの <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlElementAttribute&quot; /&gt; class and specifies a type for the member to which the &lt;see cref=&quot;T:System.Xml.Serialization.XmlElementAttribute&quot; /&gt; is applied. This type is used by the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; when serializing or deserializing object that contains it.">
        <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> クラスの新しいインスタンスを初期化し、<see cref="T:System.Xml.Serialization.XmlElementAttribute" /> の適用先のメンバーの型を指定します。 この型が使用されるのは、その型を含むオブジェクトを <see cref="T:System.Xml.Serialization.XmlSerializer" /> がシリアル化または逆シリアル化する場合です。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of an object derived from the member's type.">メンバーの型から派生したオブジェクトの <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.DataType">
      <summary vsli:raw="Gets or sets the XML Schema definition (XSD) data type of the XML element generated by the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt;.">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> によって生成された XML 要素の XML スキーマ定義 (XSD: XML Schema Definition) データ型を取得または設定します。</summary>
      <returns vsli:raw="An XML Schema data type.">XML スキーマデータ型。</returns>
      <exception cref="T:System.Exception" vsli:raw="The XML Schema data type you have specified cannot be mapped to the.NET data type.">指定した XML スキーマ データ型を .NET データ型に割り当てることはできません。</exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.ElementName">
      <summary vsli:raw="Gets or sets the name of the generated XML element.">生成された XML 要素の名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the generated XML element. The default is the member identifier.">生成された XML 要素の名前。 既定値はメンバー識別子です。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Form">
      <summary vsli:raw="Gets or sets a value that indicates whether the element is qualified.">要素が修飾されているかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaForm&quot; /&gt; values. The default is &lt;see cref=&quot;F:System.Xml.Schema.XmlSchemaForm.None&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 値のいずれか 1 つ。 既定値は、<see cref="F:System.Xml.Schema.XmlSchemaForm.None" /> です。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.IsNullable">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; must serialize a member that is set to &lt;see langword=&quot;null&quot; /&gt; as an empty tag with the &lt;see langword=&quot;xsi:nil&quot; /&gt; attribute set to &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が、<see langword="null" /> に設定されているメンバーを、<see langword="xsi:nil" /> 属性が <see langword="true" /> に設定されている空タグとしてシリアル化する必要があるかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; generates the &lt;see langword=&quot;xsi:nil&quot; /&gt; attribute; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が <see langword="true" /> 属性を生成する場合は <see langword="xsi:nil" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Namespace">
      <summary vsli:raw="Gets or sets the namespace assigned to the XML element that results when the class is serialized.">クラスがシリアル化されたときに、結果として XML 要素に割り当てられた名前空間を取得または設定します。</summary>
      <returns vsli:raw="The namespace of the XML element.">XML 要素の名前空間。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Order">
      <summary vsli:raw="Gets or sets the explicit order in which the elements are serialized or deserialized.">要素のシリアル化または逆シリアル化を行う明示的な順序を取得または設定します。</summary>
      <returns vsli:raw="The order of the code generation.">コード生成の順序。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Type">
      <summary vsli:raw="Gets or sets the object type used to represent the XML element.">XML 要素を表すために使用されるオブジェクト型を取得または設定します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the member.">メンバーの <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlEnumAttribute">
      <summary vsli:raw="Controls how the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; serializes an enumeration member.">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が列挙体メンバーをシリアル化する方法を制御します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlEnumAttribute&quot; /&gt; class.">
        <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlEnumAttribute&quot; /&gt; class, and specifies the XML value that the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; generates or recognizes (when it serializes or deserializes the enumeration, respectively).">
        <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> クラスの新しいインスタンスを初期化し、<see cref="T:System.Xml.Serialization.XmlSerializer" /> が生成する (列挙体をシリアル化する場合) または認識する (列挙体を逆シリアル化する場合) XML 値を指定します。</summary>
      <param name="name" vsli:raw="The overriding name of the enumeration member.">オーバーライドする側の列挙体メンバーの名前。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlEnumAttribute.Name">
      <summary vsli:raw="Gets or sets the value generated in an XML-document instance when the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; serializes an enumeration, or the value recognized when it deserializes the enumeration member.">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が列挙体をシリアル化する場合は XML ドキュメント インスタンスに生成された値を、列挙体メンバーを逆シリアル化する場合は認識した値を、取得または設定します。</summary>
      <returns vsli:raw="The value generated in an XML-document instance when the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; serializes the enumeration, or the value recognized when it is deserializes the enumeration member.">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が列挙体をシリアル化する場合は XML ドキュメント インスタンスに生成された値、列挙体メンバーを逆シリアル化する場合は認識した値。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlIgnoreAttribute">
      <summary vsli:raw="Instructs the &lt;see cref=&quot;M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)&quot; /&gt; method of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; not to serialize the public field or public read/write property value.">
        <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" /> の <see cref="T:System.Xml.Serialization.XmlSerializer" /> メソッドに対して、パブリック フィールドまたはパブリックな読み書き可能プロパティの値をシリアル化しないように指示します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlIgnoreAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlIgnoreAttribute&quot; /&gt; class.">
        <see cref="T:System.Xml.Serialization.XmlIgnoreAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute">
      <summary vsli:raw="Specifies that the target property, parameter, return value, or class member contains prefixes associated with namespaces that are used within an XML document.">対象となるプロパティ、パラメーター、戻り値、またはクラス メンバーに、XML ドキュメント内で使用する、名前空間に関連付けられたプレフィックスを含めることを指定します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute&quot; /&gt; class.">
        <see cref="T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlRootAttribute">
      <summary vsli:raw="Controls XML serialization of the attribute target as an XML root element.">属性ターゲットを XML ルート要素として XML シリアル化する方法を制御します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlRootAttribute&quot; /&gt; class.">
        <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlRootAttribute&quot; /&gt; class and specifies the name of the XML root element.">
        <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> クラスの新しいインスタンスを初期化し、XML ルート要素の名前を指定します。</summary>
      <param name="elementName" vsli:raw="The name of the XML root element.">XML ルート要素の名前。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.DataType">
      <summary vsli:raw="Gets or sets the XSD data type of the XML root element.">XML ルート要素の XSD データ型を取得または設定します。</summary>
      <returns vsli:raw="An XSD (XML Schema Document) data type.">XSD (XML スキーマドキュメント) データ型。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.ElementName">
      <summary vsli:raw="Gets or sets the name of the XML element that is generated and recognized by the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; class's &lt;see cref=&quot;M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)&quot; /&gt; and &lt;see cref=&quot;M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)&quot; /&gt; methods, respectively.">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> クラスの <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" /> メソッドおよび <see cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" /> メソッドによって生成および認識される XML 要素名を取得または設定します。</summary>
      <returns vsli:raw="The name of the XML root element that is generated and recognized in an XML-document instance. The default is the name of the serialized class.">XML ドキュメント インスタンスで生成および認識された XML ルート要素名。 既定値は、シリアル化されたクラスの名前です。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.IsNullable">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; must serialize a member that is set to &lt;see langword=&quot;null&quot; /&gt; into the &lt;see langword=&quot;xsi:nil&quot; /&gt; attribute set to &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> で、<see langword="null" /> に設定されているメンバーを、<see langword="xsi:nil" /> に設定されている <see langword="true" /> 属性にシリアル化するかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; generates the &lt;see langword=&quot;xsi:nil&quot; /&gt; attribute; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が <see langword="true" /> 属性を生成する場合は <see langword="xsi:nil" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.Namespace">
      <summary vsli:raw="Gets or sets the namespace for the XML root element.">XML ルート要素の名前空間を取得または設定します。</summary>
      <returns vsli:raw="The namespace for the XML element.">XML 要素の名前空間。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSchemaProviderAttribute">
      <summary vsli:raw="When applied to a type, stores the name of a static method of the type that returns an XML schema and a &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; (or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; for anonymous types) that controls the serialization of the type.">型に適用された場合、XML スキーマを返す型の静的メソッドの名前と、型のシリアル化を制御する <see cref="T:System.Xml.XmlQualifiedName" /> (または匿名型の <see cref="T:System.Xml.Schema.XmlSchemaType" />) を格納します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSchemaProviderAttribute&quot; /&gt; class, taking the name of the static method that supplies the type's XML schema.">型の XML スキーマを提供する静的メソッドの名前を受け取って、<see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="methodName" vsli:raw="The name of the static method that must be implemented.">実装する必要がある静的メソッドの名前。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaProviderAttribute.IsAny">
      <summary vsli:raw="Gets or sets a value that determines whether the target class is a wildcard, or that the schema for the class has contains only an &lt;see langword=&quot;xs:any&quot; /&gt; element.">ターゲット クラスがワイルドカードかどうか、またはクラスのスキーマに <see langword="xs:any" /> 要素のみが含まれているかどうかを判断する値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt;, if the class is a wildcard, or if the schema contains only the &lt;see langword=&quot;xs:any&quot; /&gt; element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">クラスがワイルドカードの場合、またはスキーマに <see langword="true" /> 要素のみが含まれている場合は <see langword="xs:any" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaProviderAttribute.MethodName">
      <summary vsli:raw="Gets the name of the static method that supplies the type's XML schema and the name of its XML Schema data type.">型の XML スキーマおよびその XML スキーマ データ型の名前を提供する静的メソッドの名前を取得します。</summary>
      <returns vsli:raw="The name of the method that is invoked by the XML infrastructure to return an XML schema.">XML スキーマを返すために XML インフラストラクチャによって呼び出されるメソッドの名前。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializerNamespaces">
      <summary vsli:raw="Contains the XML namespaces and prefixes that the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; uses to generate qualified names in an XML-document instance.">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が XML ドキュメント インスタンスで修飾名を生成するために使用する XML 名前空間とプレフィックスが格納されています。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializerNamespaces&quot; /&gt; class.">
        <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor(System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializerNamespaces&quot; /&gt; class, using the specified instance of &lt;see langword=&quot;XmlSerializerNamespaces&quot; /&gt; containing the collection of prefix and namespace pairs.">プレフィックスと名前空間のペアのコレクションを保持する <see langword="XmlSerializerNamespaces" /> のインスタンスを指定して、<see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="namespaces" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializerNamespaces&quot; /&gt; containing the namespace and prefix pairs.">名前空間とプレフィックスのペアを保持する <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> のインスタンス。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor(System.Xml.XmlQualifiedName[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializerNamespaces&quot; /&gt; class.">
        <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="namespaces" vsli:raw="An array of &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; objects.">
        <see cref="T:System.Xml.XmlQualifiedName" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.Add(System.String,System.String)">
      <summary vsli:raw="Adds a prefix and namespace pair to an &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializerNamespaces&quot; /&gt; object.">
        <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> オブジェクトにプレフィックスと名前空間のペアを追加します。</summary>
      <param name="prefix" vsli:raw="The prefix associated with an XML namespace.">XML 名前空間に関連付けられているプリフィックス。</param>
      <param name="ns" vsli:raw="An XML namespace.">XML 名前空間。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerNamespaces.Count">
      <summary vsli:raw="Gets the number of prefix and namespace pairs in the collection.">コレクション内のプレフィックスと名前空間のペアの数を取得します。</summary>
      <returns vsli:raw="The number of prefix and namespace pairs in the collection.">コレクション内のプレフィックスと名前空間のペアの数。</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.ToArray">
      <summary vsli:raw="Gets the array of prefix and namespace pairs in an &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializerNamespaces&quot; /&gt; object.">
        <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> オブジェクト内のプレフィックスと名前空間のペアの配列を取得します。</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; objects that are used as qualified names in an XML document.">XML ドキュメントで修飾名として使用される <see cref="T:System.Xml.XmlQualifiedName" /> オブジェクトの配列。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlTextAttribute">
      <summary vsli:raw="Indicates to the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; that the member must be treated as XML text when the class that contains it is serialized or deserialized.">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が、クラスをシリアル化または逆シリアル化するときに、そのクラスに含まれる特定のメンバーを XML テキストとして処理する必要があることを指定します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlTextAttribute&quot; /&gt; class.">
        <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlTextAttribute&quot; /&gt; class.">
        <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the member to be serialized.">シリアル化するメンバーの <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlTextAttribute.DataType">
      <summary vsli:raw="Gets or sets the XML Schema definition language (XSD) data type of the text generated by the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt;.">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> によって生成されたテキストの XML スキーマ定義言語 (XSD: XML Schema Definition Language) データ型を取得または設定します。</summary>
      <returns vsli:raw="An XML Schema (XSD) data type.">XML スキーマ (XSD) データ型。</returns>
      <exception cref="T:System.Exception" vsli:raw="The XML Schema data type you have specified cannot be mapped to the .NET data type.">指定した XML スキーマ データ型を .NET データ型に割り当てることはできません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The XML Schema data type you have specified is invalid for the property and cannot be converted to the member type.">指定した XML スキーマ データ型はプロパティとしては無効なので、そのメンバー型に変換できません。</exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlTextAttribute.Type">
      <summary vsli:raw="Gets or sets the type of the member.">メンバーの型を取得または設定します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the member.">メンバーの <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Xml.ValidationType">
      <summary vsli:raw="Specifies the type of validation to perform.">実行する検証のタイプを指定します。</summary>
    </member>
    <member name="F:System.Xml.ValidationType.Auto">
      <summary vsli:raw="Validates if DTD or schema information is found. &#xA;&#xA;Starting with .NET Framework 2.0, this field is obsolete. It applies only to the obsolete &lt;see cref=&quot;T:System.Xml.XmlValidatingReader&quot; /&gt; class.">DTD 情報またはスキーマ情報が検索されたかどうかを検証します。 
.NET Framework 2.0 以降、このフィールドは廃止されました。 これは古い <see cref="T:System.Xml.XmlValidatingReader" /> クラスにのみ適用されます。</summary>
    </member>
    <member name="F:System.Xml.ValidationType.DTD">
      <summary vsli:raw="Validates according to the DTD.">DTD に従って検証します。</summary>
    </member>
    <member name="F:System.Xml.ValidationType.None">
      <summary vsli:raw="No validation is performed, and no validation errors are thrown. This setting creates an XML 1.0 compliant non-validating parser.&#xA;        &#xA;Calls to &lt;see cref=&quot;M:System.Xml.XmlReader.ResolveEntity&quot; /&gt; report default attributes and resolve general entities. The DOCTYPE is not used for validation purposes.">検証が実行されていないので、検証エラーはスローされません。 この設定では、XML 1.0 準拠の非検証パーサーが作成されます。
<see cref="M:System.Xml.XmlReader.ResolveEntity" /> の呼び出しにより、既定の属性が報告され、一般エンティティが解決されます。 DOCTYPE は検証目的には使用されません。</summary>
    </member>
    <member name="F:System.Xml.ValidationType.Schema">
      <summary vsli:raw="Validate according to XML Schema definition language (XSD) schemas, including inline XML Schemas. XML Schemas are associated with namespace URIs either by using the &lt;see langword=&quot;schemaLocation&quot; /&gt; attribute or the provided &lt;see langword=&quot;Schemas&quot; /&gt; property.">インライン XML スキーマを含む XML スキーマ定義言語 (XSD) スキーマに従って検証します。 XML スキーマは、<see langword="schemaLocation" /> 属性または提供された <see langword="Schemas" /> プロパティを使用して、名前空間 URI に関連付けられます。</summary>
    </member>
    <member name="F:System.Xml.ValidationType.XDR">
      <summary vsli:raw="Validate according to XML-Data Reduced (XDR) schemas, including inline XDR schemas. XDR schemas are recognized using the &lt;see langword=&quot;x-schema&quot; /&gt; namespace prefix or the &lt;see cref=&quot;P:System.Xml.XmlValidatingReader.Schemas&quot; /&gt; property.&#xA;        &#xA;Starting with .NET Framework 2.0, this field is obsolete. It applies only to the obsolete &lt;see cref=&quot;T:System.Xml.XmlValidatingReader&quot; /&gt; class.">インライン XDR (XML-Data Reduced) スキーマを含む XDR スキーマに従って検証します。 XDR スキーマは、<see langword="x-schema" /> 名前空間プリフィックスまたは <see cref="P:System.Xml.XmlValidatingReader.Schemas" /> プロパティを使用して認識されます。
.NET Framework 2.0 以降、このフィールドは廃止されました。 これは古い <see cref="T:System.Xml.XmlValidatingReader" /> クラスにのみ適用されます。</summary>
    </member>
    <member name="T:System.Xml.WhitespaceHandling">
      <summary vsli:raw="Specifies how white space is handled.">空白の処理方法を指定します。</summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.All">
      <summary vsli:raw="Return &lt;see langword=&quot;Whitespace&quot; /&gt; and &lt;see langword=&quot;SignificantWhitespace&quot; /&gt; nodes. This is the default.">
        <see langword="Whitespace" /> ノードおよび <see langword="SignificantWhitespace" /> ノードを返します。 既定値です。</summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.None">
      <summary vsli:raw="Return no &lt;see langword=&quot;Whitespace&quot; /&gt; and no &lt;see langword=&quot;SignificantWhitespace&quot; /&gt; nodes.">
        <see langword="Whitespace" /> ノードおよび <see langword="SignificantWhitespace" /> ノードを返しません。</summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.Significant">
      <summary vsli:raw="Return &lt;see langword=&quot;SignificantWhitespace&quot; /&gt; nodes only.">
        <see langword="SignificantWhitespace" /> ノードだけを返します。</summary>
    </member>
    <member name="T:System.Xml.WriteState">
      <summary vsli:raw="Specifies the state of the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">
        <see cref="T:System.Xml.XmlWriter" /> の状態を指定します。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Attribute">
      <summary vsli:raw="Indicates that an attribute value is being written.">属性値が書き込まれていることを示します。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Closed">
      <summary vsli:raw="Indicates that the &lt;see cref=&quot;M:System.Xml.XmlWriter.Close&quot; /&gt; method has been called.">
        <see cref="M:System.Xml.XmlWriter.Close" /> メソッドが呼び出されていることを示します。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Content">
      <summary vsli:raw="Indicates that element content is being written.">要素の内容が書き込まれていることを示します。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Element">
      <summary vsli:raw="Indicates that an element start tag is being written.">要素開始タグが書き込まれていることを示します。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Error">
      <summary vsli:raw="An exception has been thrown, which has left the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; in an invalid state. You can call the &lt;see cref=&quot;M:System.Xml.XmlWriter.Close&quot; /&gt; method to put the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; in the &lt;see cref=&quot;F:System.Xml.WriteState.Closed&quot; /&gt; state. Any other &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method calls results in an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt;.&#xA;&#xA;This field was added in .NET Framework 2.0.">例外がスローされ、<see cref="T:System.Xml.XmlWriter" /> が無効な状態になっています。 <see cref="M:System.Xml.XmlWriter.Close" /> メソッドを呼び出すと、<see cref="T:System.Xml.XmlWriter" /> を <see cref="F:System.Xml.WriteState.Closed" /> 状態にできます。 それ以外の <see cref="T:System.Xml.XmlWriter" /> メソッドを呼び出した場合、<see cref="T:System.InvalidOperationException" /> が発生します。
このフィールドは、.NET Framework 2.0 で追加されました。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Prolog">
      <summary vsli:raw="Indicates that the prolog is being written.">プロローグが書き込まれていることを示します。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Start">
      <summary vsli:raw="Indicates that a Write method has not yet been called.">Write メソッドがまだ呼び出されていないことを示します。</summary>
    </member>
    <member name="T:System.Xml.XmlAttribute">
      <summary vsli:raw="Represents an attribute. Valid and default values for the attribute are defined in a document type definition (DTD) or schema.">属性を表します。 属性に対する有効値および既定値は、文書型定義 (DTD : Document Type Definition) またはスキーマで定義されます。</summary>
    </member>
    <member name="M:System.Xml.XmlAttribute.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="prefix" vsli:raw="The namespace prefix.">名前空間プレフィックス。</param>
      <param name="localName" vsli:raw="The local name of the attribute.">属性のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace uniform resource identifier (URI).">名前空間 URI (Uniform Resource Identifier)。</param>
      <param name="doc" vsli:raw="The parent XML document.">親 XML ドキュメント。</param>
    </member>
    <member name="M:System.Xml.XmlAttribute.AppendChild(System.Xml.XmlNode)">
      <summary vsli:raw="Adds the specified node to the end of the list of child nodes, of this node.">このノードの子ノードのリストの末尾に、指定したノードを追加します。</summary>
      <param name="newChild" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; to add.">追加する <see cref="T:System.Xml.XmlNode" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; added.">追加された <see cref="T:System.Xml.XmlNode" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This node is of a type that does not allow child nodes of the type of the &lt;paramref name=&quot;newChild&quot; /&gt; node.  &#xA;  &#xA; The &lt;paramref name=&quot;newChild&quot; /&gt; is an ancestor of this node.">このノードは、<paramref name="newChild" /> ノードの型の子ノードが許可されない型です。  
<paramref name="newChild" /> がこのノードの先祖です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;newChild&quot; /&gt; was created from a different document than the one that created this node.  &#xA;  &#xA; This node is read-only.">
        <paramref name="newChild" /> は、このノードを作成したドキュメントとは異なるドキュメントから作成されました。  
このノードは読み取り専用です。</exception>
    </member>
    <member name="P:System.Xml.XmlAttribute.BaseURI">
      <summary vsli:raw="Gets the base Uniform Resource Identifier (URI) of the node.">ノードのベース URI (Uniform Resource Identifier) を取得します。</summary>
      <returns vsli:raw="The location from which the node was loaded or String.Empty if the node has no base URI. Attribute nodes have the same base URI as their owner element. If an attribute node does not have an owner element, &lt;see langword=&quot;BaseURI&quot; /&gt; returns String.Empty.">ノードの読み込み元の場所。ノードにベース URI がない場合は String.Empty。 属性ノードのベース URI は、その所有者要素と同じです。 属性ノードに所有者要素がない場合、<see langword="BaseURI" /> は String.Empty を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlAttribute.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node.">このノードの複製を作成します。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself.">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。</param>
      <returns vsli:raw="The duplicate node.">複製されたノード。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.InnerText">
      <summary vsli:raw="Sets the concatenated values of the node and all its children.">ノードとすべての子の連結された値を設定します。</summary>
      <returns vsli:raw="The concatenated values of the node and all its children. For attribute nodes, this property has the same functionality as the &lt;see cref=&quot;P:System.Xml.XmlAttribute.Value&quot; /&gt; property.">ノードとすべての子の連結された値。 属性ノードの場合、このプロパティは <see cref="P:System.Xml.XmlAttribute.Value" /> プロパティと同じ機能を持ちます。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.InnerXml">
      <summary vsli:raw="Sets the value of the attribute.">属性の値を設定します。</summary>
      <returns vsli:raw="The attribute value.">属性値。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML specified when setting this property is not well-formed.">このプロパティの設定時に指定される XML は、整形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary vsli:raw="Inserts the specified node immediately after the specified reference node.">指定したノードを指定した参照ノードの直後に挿入します。</summary>
      <param name="newChild" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; to insert.">挿入する <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="refChild" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; that is the reference node. The &lt;paramref name=&quot;newChild&quot; /&gt; is placed after the &lt;paramref name=&quot;refChild&quot; /&gt;.">参照ノードである <see cref="T:System.Xml.XmlNode" />。 <paramref name="newChild" /> は、<paramref name="refChild" /> の後に配置されます。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; inserted.">挿入された <see cref="T:System.Xml.XmlNode" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This node is of a type that does not allow child nodes of the type of the &lt;paramref name=&quot;newChild&quot; /&gt; node.  &#xA;  &#xA; The &lt;paramref name=&quot;newChild&quot; /&gt; is an ancestor of this node.">このノードは、<paramref name="newChild" /> ノードの型の子ノードが許可されない型です。  
<paramref name="newChild" /> がこのノードの先祖です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;newChild&quot; /&gt; was created from a different document than the one that created this node.  &#xA;  &#xA; The &lt;paramref name=&quot;refChild&quot; /&gt; is not a child of this node.  &#xA;  &#xA; This node is read-only.">
        <paramref name="newChild" /> は、このノードを作成したドキュメントとは異なるドキュメントから作成されました。  
<paramref name="refChild" /> がこのノードの子ではありません。  
このノードは読み取り専用です。</exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary vsli:raw="Inserts the specified node immediately before the specified reference node.">指定したノードを指定した参照ノードの直前に挿入します。</summary>
      <param name="newChild" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; to insert.">挿入する <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="refChild" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; that is the reference node. The &lt;paramref name=&quot;newChild&quot; /&gt; is placed before this node.">参照ノードである <see cref="T:System.Xml.XmlNode" />。 <paramref name="newChild" /> は、このノードの前に配置されます。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; inserted.">挿入された <see cref="T:System.Xml.XmlNode" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node is of a type that does not allow child nodes of the type of the &lt;paramref name=&quot;newChild&quot; /&gt; node.  &#xA;  &#xA; The &lt;paramref name=&quot;newChild&quot; /&gt; is an ancestor of this node.">現在のノードは、<paramref name="newChild" /> ノードの型の子ノードが許可されない型です。  
<paramref name="newChild" /> がこのノードの先祖です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;newChild&quot; /&gt; was created from a different document than the one that created this node.  &#xA;  &#xA; The &lt;paramref name=&quot;refChild&quot; /&gt; is not a child of this node.  &#xA;  &#xA; This node is read-only.">
        <paramref name="newChild" /> は、このノードを作成したドキュメントとは異なるドキュメントから作成されました。  
<paramref name="refChild" /> がこのノードの子ではありません。  
このノードは読み取り専用です。</exception>
    </member>
    <member name="P:System.Xml.XmlAttribute.LocalName">
      <summary vsli:raw="Gets the local name of the node.">ノードのローカル名を取得します。</summary>
      <returns vsli:raw="The name of the attribute node with the prefix removed. In the following example &amp;lt;book bk:genre= 'novel'&amp;gt;, the &lt;see langword=&quot;LocalName&quot; /&gt; of the attribute is &lt;see langword=&quot;genre&quot; /&gt;.">プリフィックスを削除した属性ノードの名前。 次の例の&lt;book の例では<see langword="genre" />、ジャンル =&gt;' 斬新<see langword="LocalName" /> ',、属性のはです。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Name">
      <summary vsli:raw="Gets the qualified name of the node.">ノードの限定名を取得します。</summary>
      <returns vsli:raw="The qualified name of the attribute node.">属性ノードの限定名。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.NamespaceURI">
      <summary vsli:raw="Gets the namespace URI of this node.">このノードの名前空間 URI を取得します。</summary>
      <returns vsli:raw="The namespace URI of this node. If the attribute is not explicitly given a namespace, this property returns String.Empty.">このノードの名前空間 URI。 属性に明示的に名前空間が指定されていない場合、このプロパティは String.Empty を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.NodeType">
      <summary vsli:raw="Gets the type of the current node.">現在のノードの種類を取得します。</summary>
      <returns vsli:raw="The node type for &lt;see langword=&quot;XmlAttribute&quot; /&gt; nodes is XmlNodeType.Attribute.">
        <see langword="XmlAttribute" /> ノードのノード型は XmlNodeType.Attribute です。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.OwnerDocument">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; to which this node belongs.">このノードが属する <see cref="T:System.Xml.XmlDocument" /> を取得します。</summary>
      <returns vsli:raw="An XML document to which this node belongs.">このノードが所属する XML ドキュメント。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.OwnerElement">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlElement&quot; /&gt; to which the attribute belongs.">属性が属する <see cref="T:System.Xml.XmlElement" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlElement&quot; /&gt; that the attribute belongs to or &lt;see langword=&quot;null&quot; /&gt; if this attribute is not part of an &lt;see langword=&quot;XmlElement&quot; /&gt;.">属性が属している <see langword="XmlElement" />。この属性が <see langword="null" /> の一部でない場合は <see langword="XmlElement" />。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.ParentNode">
      <summary vsli:raw="Gets the parent of this node. For &lt;see langword=&quot;XmlAttribute&quot; /&gt; nodes, this property always returns &lt;see langword=&quot;null&quot; /&gt;.">このノードの親を取得します。 <see langword="XmlAttribute" /> ノードの場合、このプロパティは常に <see langword="null" /> を返します。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlAttribute&quot; /&gt; nodes, this property always returns &lt;see langword=&quot;null&quot; /&gt;.">
        <see langword="XmlAttribute" /> ノードの場合、このプロパティは常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Prefix">
      <summary vsli:raw="Gets or sets the namespace prefix of this node.">このノードの名前空間プリフィックスを取得または設定します。</summary>
      <returns vsli:raw="The namespace prefix of this node. If there is no prefix, this property returns String.Empty.">このノードの名前空間プリフィックス。 プリフィックスがない場合、このプロパティは String.Empty を返します。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="This node is read-only.">このノードは読み取り専用です。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The specified prefix contains an invalid character.  &#xA;  &#xA; The specified prefix is malformed.  &#xA;  &#xA; The namespaceURI of this node is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; The specified prefix is &quot;xml&quot;, and the namespaceURI of this node is different from &quot;http://www.w3.org/XML/1998/namespace&quot;.  &#xA;  &#xA; This node is an attribute, the specified prefix is &quot;xmlns&quot;, and the namespaceURI of this node is different from &quot;http://www.w3.org/2000/xmlns/&quot;.  &#xA;  &#xA; This node is an attribute, and the qualifiedName of this node is &quot;xmlns&quot; [Namespaces].">指定したプレフィックスに無効な文字が含まれています。  
指定されたプリフィックスの書式が正しくありません。  
このノードの namespaceURI が <see langword="null" /> です。  
指定したプリフィックスが "xml" であり、このノードの namespaceURI が "http://www.w3.org/XML/1998/namespace" と異なっています。  
このノードが属性で、指定したプリフィックスが "xmlns" であり、このノードの namespaceURI が "http://www.w3.org/2000/xmlns/" と異なっています。  
このノードが属性で、このノードの qualifiedName が "xmlns" [Namespaces] です。</exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.PrependChild(System.Xml.XmlNode)">
      <summary vsli:raw="Adds the specified node to the beginning of the list of child nodes for this node.">このノードの子ノードのリストの先頭に、指定したノードを追加します。</summary>
      <param name="newChild" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; to add. If it is an &lt;see cref=&quot;T:System.Xml.XmlDocumentFragment&quot; /&gt;, the entire contents of the document fragment are moved into the child list of this node.">追加する <see cref="T:System.Xml.XmlNode" />。 そのノードが <see cref="T:System.Xml.XmlDocumentFragment" /> の場合は、ドキュメント フラグメントの内容全体がこのノードの子リストに移動されます。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; added.">追加された <see cref="T:System.Xml.XmlNode" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This node is of a type that does not allow child nodes of the type of the &lt;paramref name=&quot;newChild&quot; /&gt; node.  &#xA;  &#xA; The &lt;paramref name=&quot;newChild&quot; /&gt; is an ancestor of this node.">このノードは、<paramref name="newChild" /> ノードの型の子ノードが許可されない型です。  
<paramref name="newChild" /> がこのノードの先祖です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;newChild&quot; /&gt; was created from a different document than the one that created this node.  &#xA;  &#xA; This node is read-only.">
        <paramref name="newChild" /> は、このノードを作成したドキュメントとは異なるドキュメントから作成されました。  
このノードは読み取り専用です。</exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.RemoveChild(System.Xml.XmlNode)">
      <summary vsli:raw="Removes the specified child node.">指定した子ノードを削除します。</summary>
      <param name="oldChild" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; to remove.">削除する <see cref="T:System.Xml.XmlNode" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; removed.">削除された <see cref="T:System.Xml.XmlNode" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;oldChild&quot; /&gt; is not a child of this node. Or this node is read-only.">
        <paramref name="oldChild" /> がこのノードの子ではありません。 または、このノードが読み取り専用です。</exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary vsli:raw="Replaces the child node specified with the new child node specified.">指定した子ノードを、新たに指定された子ノードで置き換えます。</summary>
      <param name="newChild" vsli:raw="The new child &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt;.">新しい子 <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="oldChild" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; to replace.">置き換える <see cref="T:System.Xml.XmlNode" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; replaced.">置き換えられた <see cref="T:System.Xml.XmlNode" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This node is of a type that does not allow child nodes of the type of the &lt;paramref name=&quot;newChild&quot; /&gt; node.  &#xA;  &#xA; The &lt;paramref name=&quot;newChild&quot; /&gt; is an ancestor of this node.">このノードは、<paramref name="newChild" /> ノードの型の子ノードが許可されない型です。  
<paramref name="newChild" /> がこのノードの先祖です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;newChild&quot; /&gt; was created from a different document than the one that created this node.  &#xA;  &#xA; This node is read-only.  &#xA;  &#xA; The &lt;paramref name=&quot;oldChild&quot; /&gt; is not a child of this node.">
        <paramref name="newChild" /> は、このノードを作成したドキュメントとは異なるドキュメントから作成されました。  
このノードは読み取り専用です。  
<paramref name="oldChild" /> がこのノードの子ではありません。</exception>
    </member>
    <member name="P:System.Xml.XmlAttribute.SchemaInfo">
      <summary vsli:raw="Gets the post-schema-validation-infoset that has been assigned to this node as a result of schema validation.">スキーマ検証の結果、このノードに割り当てられているスキーマ検証後の infoset を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.IXmlSchemaInfo&quot; /&gt; containing the post-schema-validation-infoset of this node.">このノードのスキーマ検証後の infoset が格納された <see cref="T:System.Xml.Schema.IXmlSchemaInfo" />。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Specified">
      <summary vsli:raw="Gets a value indicating whether the attribute value was explicitly set.">属性値が明示的に設定されたかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this attribute was explicitly given a value in the original instance document; otherwise, &lt;see langword=&quot;false&quot; /&gt;. A value of &lt;see langword=&quot;false&quot; /&gt; indicates that the value of the attribute came from the DTD.">元のインスタンス ドキュメントでこの属性に明示的に値が指定された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の値は、属性の値が DTD に由来していることを示します。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Value">
      <summary vsli:raw="Gets or sets the value of the node.">ノードの値を取得または設定します。</summary>
      <returns vsli:raw="The value returned depends on the &lt;see cref=&quot;P:System.Xml.XmlNode.NodeType&quot; /&gt; of the node. For &lt;see langword=&quot;XmlAttribute&quot; /&gt; nodes, this property is the value of attribute.">返される値は、ノードの <see cref="P:System.Xml.XmlNode.NodeType" /> によって異なります。 <see langword="XmlAttribute" /> ノードの場合、このプロパティは属性の値です。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The node is read-only and a set operation is called.">ノードが読み取り専用であり、set 操作が呼び出されます。</exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves all the children of the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">指定した <see cref="T:System.Xml.XmlWriter" /> にノードのすべての子を保存します。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlAttribute.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">指定した <see cref="T:System.Xml.XmlWriter" /> にノードを保存します。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlAttributeCollection">
      <summary vsli:raw="Represents a collection of attributes that can be accessed by name or index.">名前またはインデックスによってアクセスできる属性のコレクションを表します。</summary>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Append(System.Xml.XmlAttribute)">
      <summary vsli:raw="Inserts the specified attribute as the last node in the collection.">指定した属性をコレクション内の最後のノードとして挿入します。</summary>
      <param name="node" vsli:raw="The attribute to insert.">挿入する属性。</param>
      <returns vsli:raw="The &lt;see langword=&quot;XmlAttribute&quot; /&gt; to append to the collection.">コレクションの末尾に追加する <see langword="XmlAttribute" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; was created from a document different from the one that created this collection.">このコレクションを作成したドキュメントと異なるドキュメントから <paramref name="node" /> が作成されました。</exception>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[],System.Int32)">
      <summary vsli:raw="Copies all the &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt; objects from this collection into the given array.">このコレクション内のすべての <see cref="T:System.Xml.XmlAttribute" /> オブジェクトを、指定した配列にコピーします。</summary>
      <param name="array" vsli:raw="The array that is the destination of the objects copied from this collection.">このコレクションからコピーされたオブジェクトのコピー先の配列。</param>
      <param name="index" vsli:raw="The index in the array where copying begins.">配列内のコピー開始位置を示すインデックス。</param>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.InsertAfter(System.Xml.XmlAttribute,System.Xml.XmlAttribute)">
      <summary vsli:raw="Inserts the specified attribute immediately after the specified reference attribute.">指定した属性を、指定した参照属性の直後に挿入します。</summary>
      <param name="newNode" vsli:raw="The attribute to insert.">挿入する属性。</param>
      <param name="refNode" vsli:raw="The reference attribute. &lt;paramref name=&quot;newNode&quot; /&gt; is placed after the &lt;paramref name=&quot;refNode&quot; /&gt;.">参照属性。 <paramref name="newNode" /> は、<paramref name="refNode" /> の後に配置されます。</param>
      <returns vsli:raw="The &lt;see langword=&quot;XmlAttribute&quot; /&gt; to insert into the collection.">コレクションに挿入する <see langword="XmlAttribute" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;newNode&quot; /&gt; was created from a document different from the one that created this collection. Or the &lt;paramref name=&quot;refNode&quot; /&gt; is not a member of this collection.">このコレクションを作成したドキュメントと異なるドキュメントから <paramref name="newNode" /> が作成されました。 または、<paramref name="refNode" /> がこのコレクションのメンバーではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.InsertBefore(System.Xml.XmlAttribute,System.Xml.XmlAttribute)">
      <summary vsli:raw="Inserts the specified attribute immediately before the specified reference attribute.">指定した属性を、指定した参照属性の直前に挿入します。</summary>
      <param name="newNode" vsli:raw="The attribute to insert.">挿入する属性。</param>
      <param name="refNode" vsli:raw="The reference attribute. &lt;paramref name=&quot;newNode&quot; /&gt; is placed before the &lt;paramref name=&quot;refNode&quot; /&gt;.">参照属性。 <paramref name="newNode" /> は <paramref name="refNode" /> の前に配置されます。</param>
      <returns vsli:raw="The &lt;see langword=&quot;XmlAttribute&quot; /&gt; to insert into the collection.">コレクションに挿入する <see langword="XmlAttribute" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;newNode&quot; /&gt; was created from a document different from the one that created this collection. Or the &lt;paramref name=&quot;refNode&quot; /&gt; is not a member of this collection.">このコレクションを作成したドキュメントと異なるドキュメントから <paramref name="newNode" /> が作成されました。 または、<paramref name="refNode" /> がこのコレクションのメンバーではありません。</exception>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.Int32)">
      <summary vsli:raw="Gets the attribute with the specified index.">指定したインデックスの属性を取得します。</summary>
      <param name="i" vsli:raw="The index of the attribute.">属性のインデックス。</param>
      <returns vsli:raw="The attribute at the specified index.">指定したインデックス位置にある属性。</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="The index being passed in is out of range.">範囲外に渡されるインデックス。</exception>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.String)">
      <summary vsli:raw="Gets the attribute with the specified name.">指定した名前の属性を取得します。</summary>
      <param name="name" vsli:raw="The qualified name of the attribute.">属性の限定名。</param>
      <returns vsli:raw="The attribute with the specified name. If the attribute does not exist, this property returns &lt;see langword=&quot;null&quot; /&gt;.">指定した名前の属性。 属性の名前が存在しない場合、このプロパティは <see langword="null" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.String,System.String)">
      <summary vsli:raw="Gets the attribute with the specified local name and namespace Uniform Resource Identifier (URI).">指定したローカル名および名前空間 URI (Uniform Resource Identifier) の属性を取得します。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">属性のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute.">属性の名前空間 URI。</param>
      <returns vsli:raw="The attribute with the specified local name and namespace URI. If the attribute does not exist, this property returns &lt;see langword=&quot;null&quot; /&gt;.">指定されたローカル名と名前空間 URI を持つ属性。 属性の名前が存在しない場合、このプロパティは <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Prepend(System.Xml.XmlAttribute)">
      <summary vsli:raw="Inserts the specified attribute as the first node in the collection.">指定した属性をコレクション内の最初のノードとして挿入します。</summary>
      <param name="node" vsli:raw="The attribute to insert.">挿入する属性。</param>
      <returns vsli:raw="The &lt;see langword=&quot;XmlAttribute&quot; /&gt; added to the collection.">コレクションに追加する <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Remove(System.Xml.XmlAttribute)">
      <summary vsli:raw="Removes the specified attribute from the collection.">指定した属性をコレクションから削除します。</summary>
      <param name="node" vsli:raw="The attribute to remove.">削除する属性。</param>
      <returns vsli:raw="The node removed or &lt;see langword=&quot;null&quot; /&gt; if it is not found in the collection.">削除されたノード。ノードがコレクション内で見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.RemoveAll">
      <summary vsli:raw="Removes all attributes from the collection.">コレクションからすべての属性を削除します。</summary>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the attribute corresponding to the specified index from the collection.">コレクション内の指定したインデックスに対応する属性を削除します。</summary>
      <param name="i" vsli:raw="The index of the node to remove. The first node has index 0.">削除するノードのインデックス。 最初のノードのインデックスは 0 です。</param>
      <returns vsli:raw="Returns &lt;see langword=&quot;null&quot; /&gt; if there is no attribute at the specified index.">指定したインデックスに属性がない場合、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.SetNamedItem(System.Xml.XmlNode)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; using its &lt;see cref=&quot;P:System.Xml.XmlNode.Name&quot; /&gt; property.">
        <see cref="T:System.Xml.XmlNode" /> プロパティを使用して <see cref="P:System.Xml.XmlNode.Name" /> を追加します。</summary>
      <param name="node" vsli:raw="An attribute node to store in this collection. The node will later be accessible using the name of the node. If a node with that name is already present in the collection, it is replaced by the new one; otherwise, the node is appended to the end of the collection.">このコレクションに格納する属性ノード。 このノードは、ノードの名前を使用すると後からアクセスできます。 その名前のノードが既にコレクションに存在している場合は、新しいノードと置き換えられます。それ以外の場合は、ノードがコレクションの末尾に追加されます。</param>
      <returns vsli:raw="If the &lt;paramref name=&quot;node&quot; /&gt; replaces an existing node with the same name, the old node is returned; otherwise, the added node is returned.">
        <paramref name="node" /> によって同じ名前の既存のノードが置換される場合は、古いノードが返されます。それ以外の場合は、追加されたノードが返されます。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; was created from a different &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; than the one that created this collection.  &#xA;  &#xA; This &lt;see langword=&quot;XmlAttributeCollection&quot; /&gt; is read-only.">このコレクションを作成した XML ドキュメントと異なる <see cref="T:System.Xml.XmlDocument" /> から <paramref name="node" /> が作成されました。  
この <see langword="XmlAttributeCollection" /> は読み取り専用です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is an &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt; that is already an attribute of another &lt;see cref=&quot;T:System.Xml.XmlElement&quot; /&gt; object. To re-use attributes in other elements, you must clone the &lt;see langword=&quot;XmlAttribute&quot; /&gt; objects you want to re-use.">
        <paramref name="node" /> は、既に別の <see cref="T:System.Xml.XmlAttribute" /> オブジェクトの属性である <see cref="T:System.Xml.XmlElement" /> です。 その他の要素の属性を再利用するには、再利用する <see langword="XmlAttribute" /> オブジェクトのクローンを作成する必要があります。</exception>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[],System.Int32)&quot; /&gt;.">このメンバーの説明については、<see cref="M:System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[],System.Int32)" /> のトピックを参照してください。</summary>
      <param name="array" vsli:raw="The array that is the destination of the objects copied from this collection.">このコレクションからコピーされたオブジェクトのコピー先の配列。</param>
      <param name="index" vsli:raw="The index in the array where copying begins.">配列内のコピー開始位置を示すインデックス。</param>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#Count&quot; /&gt;.">このメンバーの詳細については、「<see cref="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#Count" />」をご覧ください。</summary>
      <returns vsli:raw="An &lt;see langword=&quot;int&quot; /&gt; that contains the count of the attributes.">属性の数を格納している。<see langword="int" /></returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#IsSynchronized&quot; /&gt;.">このメンバーの説明については、<see cref="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#IsSynchronized" /> のトピックを参照してください。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is synchronized.">
        <see langword="true" />コレクションが同期されている場合はです。</returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#SyncRoot&quot; /&gt;.">このメンバーの説明については、<see cref="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#SyncRoot" /> のトピックを参照してください。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; that is the root of the collection.">コレクションのルートである。<see cref="T:System.Object" /></returns>
    </member>
    <member name="T:System.Xml.XmlCDataSection">
      <summary vsli:raw="Represents a CDATA section.">CDATA セクションを表します。</summary>
    </member>
    <member name="M:System.Xml.XmlCDataSection.#ctor(System.String,System.Xml.XmlDocument)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlCDataSection&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlCDataSection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="data" vsli:raw="&lt;see cref=&quot;T:System.String&quot; /&gt; that contains character data.">文字データを格納している <see cref="T:System.String" />。</param>
      <param name="doc" vsli:raw="&lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlDocument" /> オブジェクト。</param>
    </member>
    <member name="M:System.Xml.XmlCDataSection.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node.">このノードの複製を作成します。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself. Because CDATA nodes do not have children, regardless of the parameter setting, the cloned node will always include the data content.">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。 CDATA ノードには子がないため、パラメーターの設定に関係なく、クローンとして作成されたノードには常にデータ コンテンツが含まれます。</param>
      <returns vsli:raw="The cloned node.">クローンとして作成されたノード。</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.LocalName">
      <summary vsli:raw="Gets the local name of the node.">ノードのローカル名を取得します。</summary>
      <returns vsli:raw="For CDATA nodes, the local name is &lt;see langword=&quot;#cdata-section&quot; /&gt;.">CDATA ノードの場合、ローカル名は <see langword="#cdata-section" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.Name">
      <summary vsli:raw="Gets the qualified name of the node.">ノードの限定名を取得します。</summary>
      <returns vsli:raw="For CDATA nodes, the name is &lt;see langword=&quot;#cdata-section&quot; /&gt;.">CDATA ノードの場合、名前は <see langword="#cdata-section" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.NodeType">
      <summary vsli:raw="Gets the type of the current node.">現在のノードの種類を取得します。</summary>
      <returns vsli:raw="The node type. For CDATA nodes, the value is XmlNodeType.CDATA.">ノード型。 CDATA ノードの場合、値は XmlNodeType.CDATA です。</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.ParentNode">
      <summary vsli:raw="Gets the parent of this node (for nodes that can have parents).">このノードの親 (親を持つノードの場合) を取得します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlNode&quot; /&gt; that is the parent of the current node. If a node has just been created and not yet added to the tree, or if it has been removed from the tree, the parent is &lt;see langword=&quot;null&quot; /&gt;. For all other nodes, the value returned depends on the &lt;see cref=&quot;P:System.Xml.XmlNode.NodeType&quot; /&gt; of the node. The following table describes the possible return values for the &lt;see langword=&quot;ParentNode&quot; /&gt; property.">現在のノードの親である <see langword="XmlNode" />。 ノードが作成された直後でまだツリーに追加されていない場合や、ノードがツリーから削除された場合、親は <see langword="null" /> です。 他のすべてのノードについては、返される値はノードの <see cref="P:System.Xml.XmlNode.NodeType" /> によって異なります。 <see langword="ParentNode" /> プロパティの使用可能な戻り値を次の表に示します。</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.PreviousText">
      <summary vsli:raw="Gets the text node that immediately precedes this node.">このノードの直前にあるテキスト ノードを取得します。</summary>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt;.">
        <see cref="T:System.Xml.XmlNode" /> を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlCDataSection.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the children of the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">ノードの子を、指定した <see cref="T:System.Xml.XmlWriter" /> に保存します。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlCDataSection.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">指定した <see cref="T:System.Xml.XmlWriter" /> にノードを保存します。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlCharacterData">
      <summary vsli:raw="Provides text manipulation methods that are used by several classes.">複数のクラスで使用する、テキスト操作メソッドを提供します。</summary>
    </member>
    <member name="M:System.Xml.XmlCharacterData.#ctor(System.String,System.Xml.XmlDocument)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlCharacterData&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlCharacterData" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="data" vsli:raw="String that contains character data to be added to document.">ドキュメントに追加される文字データが格納されている文字列。</param>
      <param name="doc" vsli:raw="&lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; to contain character data.">文字データを格納する <see cref="T:System.Xml.XmlDocument" />。</param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.AppendData(System.String)">
      <summary vsli:raw="Appends the specified string to the end of the character data of the node.">指定した文字列をノードの文字データの末尾に追加します。</summary>
      <param name="strData" vsli:raw="The string to insert into the existing string.">既存の文字列に挿入する文字列。</param>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Data">
      <summary vsli:raw="Contains the data of the node.">ノードのデータを格納します。</summary>
      <returns vsli:raw="The data of the node.">ノードのデータ。</returns>
    </member>
    <member name="M:System.Xml.XmlCharacterData.DeleteData(System.Int32,System.Int32)">
      <summary vsli:raw="Removes a range of characters from the node.">ノードから文字の範囲を削除します。</summary>
      <param name="offset" vsli:raw="The position within the string to start deleting.">削除を開始する、文字列内の位置。</param>
      <param name="count" vsli:raw="The number of characters to delete.">削除する文字数。</param>
    </member>
    <member name="P:System.Xml.XmlCharacterData.InnerText">
      <summary vsli:raw="Gets or sets the concatenated values of the node and all the children of the node.">ノードとノードのすべての子の連結された値を取得または設定します。</summary>
      <returns vsli:raw="The concatenated values of the node and all the children of the node.">ノードとノードのすべての子の連結された値。</returns>
    </member>
    <member name="M:System.Xml.XmlCharacterData.InsertData(System.Int32,System.String)">
      <summary vsli:raw="Inserts the specified string at the specified character offset.">指定した文字オフセット位置に指定した文字列を挿入します。</summary>
      <param name="offset" vsli:raw="The position within the string to insert the supplied string data.">指定した文字列データを挿入する、文字列内の位置。</param>
      <param name="strData" vsli:raw="The string data that is to be inserted into the existing string.">既存の文字列に挿入される文字列データ。</param>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Length">
      <summary vsli:raw="Gets the length of the data, in characters.">文字単位でデータの長さを取得します。</summary>
      <returns vsli:raw="The length, in characters, of the string in the &lt;see cref=&quot;P:System.Xml.XmlCharacterData.Data&quot; /&gt; property. The length may be zero; that is, CharacterData nodes can be empty.">
        <see cref="P:System.Xml.XmlCharacterData.Data" /> プロパティに格納されている文字列の長さ (文字単位)。 長さは 0、つまり CharacterData ノードが空の場合があります。</returns>
    </member>
    <member name="M:System.Xml.XmlCharacterData.ReplaceData(System.Int32,System.Int32,System.String)">
      <summary vsli:raw="Replaces the specified number of characters starting at the specified offset with the specified string.">指定したオフセットを開始位置として、指定した数の文字を指定した文字列に置き換えます。</summary>
      <param name="offset" vsli:raw="The position within the string to start replacing.">置換を開始する、文字列内の位置。</param>
      <param name="count" vsli:raw="The number of characters to replace.">置換する文字数。</param>
      <param name="strData" vsli:raw="The new data that replaces the old string data.">古い文字列データを置換する新しいデータ。</param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.Substring(System.Int32,System.Int32)">
      <summary vsli:raw="Retrieves a substring of the full string from the specified range.">指定した範囲から、完全な文字列の部分文字列を取得します。</summary>
      <param name="offset" vsli:raw="The position within the string to start retrieving. An offset of zero indicates the starting point is at the start of the data.">取得を開始する、文字列内の位置。 オフセットが 0 の場合は、データの先頭が開始点になることを示します。</param>
      <param name="count" vsli:raw="The number of characters to retrieve.">取得する文字数。</param>
      <returns vsli:raw="The substring corresponding to the specified range.">指定した範囲に対応している部分文字列。</returns>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Value">
      <summary vsli:raw="Gets or sets the value of the node.">ノードの値を取得または設定します。</summary>
      <returns vsli:raw="The value of the node.">ノードの値。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Node is read-only.">ノードが読み取り専用です。</exception>
    </member>
    <member name="T:System.Xml.XmlComment">
      <summary vsli:raw="Represents the content of an XML comment.">XML コメントの内容を表します。</summary>
    </member>
    <member name="M:System.Xml.XmlComment.#ctor(System.String,System.Xml.XmlDocument)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlComment&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlComment" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="comment" vsli:raw="The content of the comment element.">コメント要素の内容。</param>
      <param name="doc" vsli:raw="The parent XML document.">親 XML ドキュメント。</param>
    </member>
    <member name="M:System.Xml.XmlComment.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node.">このノードの複製を作成します。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself. Because comment nodes do not have children, the cloned node always includes the text content, regardless of the parameter setting.">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。 コメント ノードには子がないため、パラメーターの設定に関係なく、クローンとして作成されたノードには、常にテキスト コンテンツが含まれます。</param>
      <returns vsli:raw="The cloned node.">クローンとして作成されたノード。</returns>
    </member>
    <member name="P:System.Xml.XmlComment.LocalName">
      <summary vsli:raw="Gets the local name of the node.">ノードのローカル名を取得します。</summary>
      <returns vsli:raw="For comment nodes, the value is &lt;see langword=&quot;#comment&quot; /&gt;.">コメント ノードの場合、この値は <see langword="#comment" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlComment.Name">
      <summary vsli:raw="Gets the qualified name of the node.">ノードの限定名を取得します。</summary>
      <returns vsli:raw="For comment nodes, the value is &lt;see langword=&quot;#comment&quot; /&gt;.">コメント ノードの場合、この値は <see langword="#comment" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlComment.NodeType">
      <summary vsli:raw="Gets the type of the current node.">現在のノードの種類を取得します。</summary>
      <returns vsli:raw="For comment nodes, the value is XmlNodeType.Comment.">コメント ノードの場合、この値は XmlNodeType.Comment です。</returns>
    </member>
    <member name="M:System.Xml.XmlComment.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves all the children of the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;. Because comment nodes do not have children, this method has no effect.">指定した <see cref="T:System.Xml.XmlWriter" /> にノードのすべての子を保存します。 コメント ノードには子がないため、このメソッドによる影響はありません。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlComment.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">指定した <see cref="T:System.Xml.XmlWriter" /> にノードを保存します。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlConvert">
      <summary vsli:raw="Encodes and decodes XML names, and provides methods for converting between common language runtime types and XML Schema definition language (XSD) types. When converting data types, the values returned are locale-independent.">XML 名をエンコードおよびデコードし、共通言語ランタイム型と XML スキーマ定義言語 (XSD) 型との間で変換を実行するメソッドを提供します。 データ型を変換する場合、返される値はロケールには依存しません。</summary>
    </member>
    <member name="M:System.Xml.XmlConvert.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlConvert&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlConvert" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlConvert.DecodeName(System.String)">
      <summary vsli:raw="Decodes a name. This method does the reverse of the &lt;see cref=&quot;M:System.Xml.XmlConvert.EncodeName(System.String)&quot; /&gt; and &lt;see cref=&quot;M:System.Xml.XmlConvert.EncodeLocalName(System.String)&quot; /&gt; methods.">名前をデコードします。 このメソッドは、<see cref="M:System.Xml.XmlConvert.EncodeName(System.String)" /> メソッドおよび <see cref="M:System.Xml.XmlConvert.EncodeLocalName(System.String)" /> メソッドの変換を元に戻します。</summary>
      <param name="name" vsli:raw="The name to be transformed.">変換対象の名前。</param>
      <returns vsli:raw="The decoded name.">デコードされた名前。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeLocalName(System.String)">
      <summary vsli:raw="Converts the name to a valid XML local name.">名前を有効な XML ローカル名に変換します。</summary>
      <param name="name" vsli:raw="The name to be encoded.">エンコードする名前。</param>
      <returns vsli:raw="The encoded name.">エンコードされた名前。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeName(System.String)">
      <summary vsli:raw="Converts the name to a valid XML name.">名前を有効な XML 名に変換します。</summary>
      <param name="name" vsli:raw="A name to be translated.">変換する対象の名前。</param>
      <returns vsli:raw="The name with any invalid characters replaced by an escape string.">無効な文字をエスケープ文字列で置換した名前。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeNmToken(System.String)">
      <summary vsli:raw="Verifies the name is valid according to the XML specification.">XML 仕様に従って有効な名前であることを検証します。</summary>
      <param name="name" vsli:raw="The name to be encoded.">エンコードする名前。</param>
      <returns vsli:raw="The encoded name.">エンコードされた名前。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsNCNameChar(System.Char)">
      <summary vsli:raw="Checks whether the passed-in character is a valid non-colon character type.">渡された文字が有効なコロン以外の文字型かどうかを確認します。</summary>
      <param name="ch" vsli:raw="The character to verify as a non-colon character.">検証対象の文字 (コロン以外の文字)。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character is a valid non-colon character type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">文字が有効なコロン以外の文字型の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsPublicIdChar(System.Char)">
      <summary vsli:raw="Returns the passed-in character instance if the character in the argument is a valid public id character, otherwise &lt;see langword=&quot;null&quot; /&gt;.">引数の文字が有効な公開識別子の文字の場合は渡された文字インスタンスを返し、それ以外の場合は <see langword="null" /> を返します。</summary>
      <param name="ch" vsli:raw="&lt;see cref=&quot;T:System.Char&quot; /&gt; object to validate.">検証対象の <see cref="T:System.Char" /> オブジェクト。</param>
      <returns vsli:raw="The passed-in character if the character is a valid public id character, otherwise &lt;see langword=&quot;null&quot; /&gt;.">文字が有効な公開識別子の文字の場合は渡された文字。それ以外の場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsStartNCNameChar(System.Char)">
      <summary vsli:raw="Checks if the passed-in character is a valid Start Name Character type.">渡された文字が有効な Start Name Character 型かどうかをチェックします。</summary>
      <param name="ch" vsli:raw="The character to validate.">検証対象の文字。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character is a valid Start Name Character type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">文字が有効な Start Name Character 型の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsWhitespaceChar(System.Char)">
      <summary vsli:raw="Checks if the passed-in character is a valid XML whitespace character.">渡された文字が有効な XML 空白文字かどうかを確認します。</summary>
      <param name="ch" vsli:raw="The character to validate.">検証対象の文字。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the passed in character is a valid XML whitespace character; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">渡された文字が有効な XML 空白文字である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsXmlChar(System.Char)">
      <summary vsli:raw="Checks if the passed-in character is a valid XML character.">渡された文字が有効な XML 文字かどうかを確認します。</summary>
      <param name="ch" vsli:raw="The character to validate.">検証対象の文字。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the passed in character is a valid XML character; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">渡された文字が有効な XML 文字である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsXmlSurrogatePair(System.Char,System.Char)">
      <summary vsli:raw="Checks if the passed-in surrogate pair of characters is a valid XML character.">渡された文字のサロゲート ペアが有効な XML 文字かどうかを確認します。</summary>
      <param name="lowChar" vsli:raw="The surrogate character to validate.">検証対象のサロゲート文字。</param>
      <param name="highChar" vsli:raw="The surrogate character to validate.">検証対象のサロゲート文字。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the passed in surrogate pair of characters is a valid XML character; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">渡された文字のサロゲート ペアが有効な XML 文字である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToBoolean(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; equivalent.">
        <see cref="T:System.String" /> を等価の <see cref="T:System.Boolean" /> に変換します。</summary>
      <param name="s" vsli:raw="The string to convert.">変換する文字列。</param>
      <returns vsli:raw="A &lt;see langword=&quot;Boolean&quot; /&gt; value, that is, &lt;see langword=&quot;true&quot; /&gt; or &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="Boolean" /> 値。つまり <see langword="true" /> または <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; does not represent a &lt;see langword=&quot;Boolean&quot; /&gt; value.">
        <paramref name="s" /> が <see langword="Boolean" /> 値を表していません。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToByte(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.Byte&quot; /&gt; equivalent.">
        <see cref="T:System.String" /> を等価の <see cref="T:System.Byte" /> に変換します。</summary>
      <param name="s" vsli:raw="The string to convert.">変換する文字列。</param>
      <returns vsli:raw="A &lt;see langword=&quot;Byte&quot; /&gt; equivalent of the string.">文字列と等価の <see langword="Byte" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is not in the correct format.">
        <paramref name="s" /> が正しい形式ではありません。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; represents a number less than &lt;see cref=&quot;F:System.Byte.MinValue&quot;&gt;Byte.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Byte.MaxValue&quot;&gt;Byte.MaxValue&lt;/see&gt;.">
        <paramref name="s" /> は、<see cref="F:System.Byte.MinValue" /> 未満の数値か、<see cref="F:System.Byte.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToChar(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.Char&quot; /&gt; equivalent.">
        <see cref="T:System.String" /> を等価の <see cref="T:System.Char" /> に変換します。</summary>
      <param name="s" vsli:raw="The string containing a single character to convert.">変換する単一の文字を含んでいる文字列。</param>
      <returns vsli:raw="A &lt;see langword=&quot;Char&quot; /&gt; representing the single character.">単一の文字を表す <see langword="Char" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The value of the &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> パラメーターの値が <see langword="null" /> です。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter contains more than one character.">
        <paramref name="s" /> パラメーターに複数の文字が含まれています。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; equivalent.">
        <see cref="T:System.String" /> を等価の <see cref="T:System.DateTime" /> に変換します。</summary>
      <param name="s" vsli:raw="The string to convert.">変換する文字列。</param>
      <returns vsli:raw="A &lt;see langword=&quot;DateTime&quot; /&gt; equivalent of the string.">文字列と等価の <see langword="DateTime" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is an empty string or is not in the correct format.">
        <paramref name="s" /> が空の文字列です。または正しい形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; equivalent.">
        <see cref="T:System.String" /> を等価の <see cref="T:System.DateTime" /> に変換します。</summary>
      <param name="s" vsli:raw="The string to convert.">変換する文字列。</param>
      <param name="format" vsli:raw="The format structure to apply to the converted &lt;see langword=&quot;DateTime&quot; /&gt;. Valid formats include &quot;yyyy-MM-ddTHH:mm:sszzzzzz&quot; and its subsets. The string is validated against this format.">変換後の <see langword="DateTime" /> に適用する形式構造。 有効な形式には、"yyyy-MM-ddTHH:mm:sszzzzzz" およびそのサブセットが含まれます。 文字列はこの形式に対して妥当性が検査されます。</param>
      <returns vsli:raw="A &lt;see langword=&quot;DateTime&quot; /&gt; equivalent of the string.">文字列と等価の <see langword="DateTime" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; or &lt;paramref name=&quot;format&quot; /&gt; is String.Empty  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;s&quot; /&gt; does not contain a date and time that corresponds to &lt;paramref name=&quot;format&quot; /&gt;.">
        <paramref name="s" /> または <paramref name="format" /> が String.Empty です。 
または 
 <paramref name="s" /> に、<paramref name="format" /> に対応する日付と時刻が格納されていません。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String[])">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; equivalent.">
        <see cref="T:System.String" /> を等価の <see cref="T:System.DateTime" /> に変換します。</summary>
      <param name="s" vsli:raw="The string to convert.">変換する文字列。</param>
      <param name="formats" vsli:raw="An array containing the format structures to apply to the converted &lt;see langword=&quot;DateTime&quot; /&gt;. Valid formats include &quot;yyyy-MM-ddTHH:mm:sszzzzzz&quot; and its subsets.">変換後の <see langword="DateTime" /> に適用する形式構造を格納している配列。 有効な形式には、"yyyy-MM-ddTHH:mm:sszzzzzz" およびそのサブセットが含まれます。</param>
      <returns vsli:raw="A &lt;see langword=&quot;DateTime&quot; /&gt; equivalent of the string.">文字列と等価の <see langword="DateTime" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; or an element of &lt;paramref name=&quot;formats&quot; /&gt; is String.Empty  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;s&quot; /&gt; does not contain a date and time that corresponds to any of the elements of &lt;paramref name=&quot;formats&quot; /&gt;.">
        <paramref name="s" />、または <paramref name="formats" /> の要素が String.Empty です。 
または 
 <paramref name="s" /> に、<paramref name="formats" /> のいずれかの要素に対応する日付と時刻が格納されていません。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.Xml.XmlDateTimeSerializationMode)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; using the &lt;see cref=&quot;T:System.Xml.XmlDateTimeSerializationMode&quot; /&gt; specified.">指定された <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> を使用して、<see cref="T:System.String" /> を <see cref="T:System.DateTime" /> に変換します</summary>
      <param name="s" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value to convert.">変換する <see cref="T:System.String" /> 値。</param>
      <param name="dateTimeOption" vsli:raw="One of the enumeration values that specify whether the date should be converted to local time or preserved as Coordinated Universal Time (UTC), if it is a UTC date.">世界協定時刻 (UTC) 日付を使用している場合に、日付を現地時間に変換するか、または UTC のままにするかを指定する列挙値の 1 つ。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.DateTime&quot; /&gt; equivalent of the &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.String" /> と等価の <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.NullReferenceException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dateTimeOption&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dateTimeOption" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is an empty string or is not in a valid format.">
        <paramref name="s" /> が空の文字列です。または有効な形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String)">
      <summary vsli:raw="Converts the supplied &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; equivalent.">指定した <see cref="T:System.String" /> を等価の <see cref="T:System.DateTimeOffset" /> に変換します。</summary>
      <param name="s" vsli:raw="The string to convert. The string must conform to a subset of the W3C Recommendation for the XML dateTime type. For more information, see the dateTime section of the XML Schema specification.">変換する文字列。  
 注 文字列は、W3C 勧告の XML dateTime 型のサブセットに準拠している必要があります。 詳細については、XML スキーマ仕様の dateTime セクションを参照してください。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; equivalent of the supplied string.">指定した文字列と等価の <see cref="T:System.DateTimeOffset" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The argument passed to this method is outside the range of allowable values. For information about allowable values, see &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">このメソッドに渡した引数が、許容値の範囲外にあります。 許容値については、<see cref="T:System.DateTimeOffset" /> を参照してください。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The argument passed to this method does not conform to a subset of the W3C Recommendations for the XML dateTime type. For more information, see the dateTime section of the XML Schema specification.">このメソッドに渡した引数が、W3C 勧告の XML dateTime 型のサブセットに準拠していません。 詳細については、XML スキーマ仕様の dateTime セクションを参照してください。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String)">
      <summary vsli:raw="Converts the supplied &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; equivalent.">指定した <see cref="T:System.String" /> を等価の <see cref="T:System.DateTimeOffset" /> に変換します。</summary>
      <param name="s" vsli:raw="The string to convert.">変換する文字列。</param>
      <param name="format" vsli:raw="The format from which &lt;paramref name=&quot;s&quot; /&gt; is converted. The format parameter can be any subset of the W3C Recommendation for the XML dateTime type. (For more information, see the dateTime section of the XML Schema specification..) The string &lt;paramref name=&quot;s&quot; /&gt; is validated against this format.">変換前の <paramref name="s" /> の形式。 フォーマット パラメーターには、W3C 勧告の XML dateTime 型の任意のサブセットを指定できます。 (詳細については、XML スキーマ仕様の dateTime セクションを参照してください。)文字列 <paramref name="s" /> はこの形式に対して妥当性が検査されます。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; equivalent of the supplied string.">指定した文字列と等価の <see cref="T:System.DateTimeOffset" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; or &lt;paramref name=&quot;format&quot; /&gt; is an empty string or is not in the specified format.">
        <paramref name="s" /> または <paramref name="format" /> が空の文字列です。または指定された形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String[])">
      <summary vsli:raw="Converts the supplied &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; equivalent.">指定した <see cref="T:System.String" /> を等価の <see cref="T:System.DateTimeOffset" /> に変換します。</summary>
      <param name="s" vsli:raw="The string to convert.">変換する文字列。</param>
      <param name="formats" vsli:raw="An array of formats from which &lt;paramref name=&quot;s&quot; /&gt; can be converted. Each format in &lt;paramref name=&quot;formats&quot; /&gt; can be any subset of the W3C Recommendation for the XML dateTime type. (For more information, see the dateTime section of the XML Schema specification..) The string &lt;paramref name=&quot;s&quot; /&gt; is validated against one of these formats.">
        <paramref name="s" /> に変換可能な形式の配列。 <paramref name="formats" /> の各形式には、W3C 勧告の XML dateTime 型の任意のサブセットを指定できます。 (詳細については、XML スキーマ仕様の dateTime セクションを参照してください。)文字列 <paramref name="s" /> は、これらの形式のいずれかに対して妥当性が検査されます。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; equivalent of the supplied string.">指定した文字列と等価の <see cref="T:System.DateTimeOffset" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDecimal(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; equivalent.">
        <see cref="T:System.String" /> を等価の <see cref="T:System.Decimal" /> に変換します。</summary>
      <param name="s" vsli:raw="The string to convert.">変換する文字列。</param>
      <returns vsli:raw="A &lt;see langword=&quot;Decimal&quot; /&gt; equivalent of the string.">文字列と等価の <see langword="Decimal" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is not in the correct format.">
        <paramref name="s" /> が正しい形式ではありません。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; represents a number less than &lt;see cref=&quot;F:System.Decimal.MinValue&quot;&gt;Decimal.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">
        <paramref name="s" /> は、<see cref="F:System.Decimal.MinValue" /> 未満の数値か、<see cref="F:System.Decimal.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDouble(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.Double&quot; /&gt; equivalent.">
        <see cref="T:System.String" /> を等価の <see cref="T:System.Double" /> に変換します。</summary>
      <param name="s" vsli:raw="The string to convert.">変換する文字列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Double&quot; /&gt; equivalent of the string.">文字列と等価の <see langword="Double" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is not in the correct format.">
        <paramref name="s" /> が正しい形式ではありません。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; represents a number less than &lt;see cref=&quot;F:System.Double.MinValue&quot;&gt;Double.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Double.MaxValue&quot;&gt;Double.MaxValue&lt;/see&gt;.">
        <paramref name="s" /> は、<see cref="F:System.Double.MinValue" /> 未満の数値か、<see cref="F:System.Double.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToGuid(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.Guid&quot; /&gt; equivalent.">
        <see cref="T:System.String" /> を等価の <see cref="T:System.Guid" /> に変換します。</summary>
      <param name="s" vsli:raw="The string to convert.">変換する文字列。</param>
      <returns vsli:raw="A &lt;see langword=&quot;Guid&quot; /&gt; equivalent of the string.">文字列と等価の <see langword="Guid" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt16(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.Int16&quot; /&gt; equivalent.">
        <see cref="T:System.String" /> を等価の <see cref="T:System.Int16" /> に変換します。</summary>
      <param name="s" vsli:raw="The string to convert.">変換する文字列。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int16&quot; /&gt; equivalent of the string.">文字列と等価の <see langword="Int16" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is not in the correct format.">
        <paramref name="s" /> が正しい形式ではありません。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; represents a number less than &lt;see cref=&quot;F:System.Int16.MinValue&quot;&gt;Int16.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int16.MaxValue&quot;&gt;Int16.MaxValue&lt;/see&gt;.">
        <paramref name="s" /> は、<see cref="F:System.Int16.MinValue" /> 未満の数値か、<see cref="F:System.Int16.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt32(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.Int32&quot; /&gt; equivalent.">
        <see cref="T:System.String" /> を等価の <see cref="T:System.Int32" /> に変換します。</summary>
      <param name="s" vsli:raw="The string to convert.">変換する文字列。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; equivalent of the string.">文字列と等価の <see langword="Int32" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is not in the correct format.">
        <paramref name="s" /> が正しい形式ではありません。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; represents a number less than &lt;see cref=&quot;F:System.Int32.MinValue&quot;&gt;Int32.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="s" /> は、<see cref="F:System.Int32.MinValue" /> 未満の数値か、<see cref="F:System.Int32.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt64(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.Int64&quot; /&gt; equivalent.">
        <see cref="T:System.String" /> を等価の <see cref="T:System.Int64" /> に変換します。</summary>
      <param name="s" vsli:raw="The string to convert.">変換する文字列。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int64&quot; /&gt; equivalent of the string.">文字列と等価の <see langword="Int64" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is not in the correct format.">
        <paramref name="s" /> が正しい形式ではありません。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; represents a number less than &lt;see cref=&quot;F:System.Int64.MinValue&quot;&gt;Int64.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">
        <paramref name="s" /> は、<see cref="F:System.Int64.MinValue" /> 未満の数値か、<see cref="F:System.Int64.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToSByte(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.SByte&quot; /&gt; equivalent.">
        <see cref="T:System.String" /> を等価の <see cref="T:System.SByte" /> に変換します。</summary>
      <param name="s" vsli:raw="The string to convert.">変換する文字列。</param>
      <returns vsli:raw="An &lt;see langword=&quot;SByte&quot; /&gt; equivalent of the string.">文字列と等価の <see langword="SByte" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is not in the correct format.">
        <paramref name="s" /> が正しい形式ではありません。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; represents a number less than &lt;see cref=&quot;F:System.SByte.MinValue&quot;&gt;SByte.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.SByte.MaxValue&quot;&gt;SByte.MaxValue&lt;/see&gt;.">
        <paramref name="s" /> は、<see cref="F:System.SByte.MinValue" /> 未満の数値か、<see cref="F:System.SByte.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToSingle(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.Single&quot; /&gt; equivalent.">
        <see cref="T:System.String" /> を等価の <see cref="T:System.Single" /> に変換します。</summary>
      <param name="s" vsli:raw="The string to convert.">変換する文字列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Single&quot; /&gt; equivalent of the string.">文字列と等価の <see langword="Single" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is not in the correct format.">
        <paramref name="s" /> が正しい形式ではありません。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; represents a number less than &lt;see cref=&quot;F:System.Single.MinValue&quot;&gt;Single.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Single.MaxValue&quot;&gt;Single.MaxValue&lt;/see&gt;.">
        <paramref name="s" /> は、<see cref="F:System.Single.MinValue" /> 未満の数値か、<see cref="F:System.Single.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Boolean)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.Boolean&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.Boolean" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="The value to convert.">変換する値。</param>
      <returns vsli:raw="A string representation of the &lt;see langword=&quot;Boolean&quot; /&gt;, that is, &quot;true&quot; or &quot;false&quot;.">
        <see langword="Boolean" /> の文字列形式。つまり "true" または "false"。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Byte)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.Byte&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.Byte" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="The value to convert.">変換する値。</param>
      <returns vsli:raw="A string representation of the &lt;see langword=&quot;Byte&quot; /&gt;.">
        <see langword="Byte" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Char)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.Char&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.Char" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="The value to convert.">変換する値。</param>
      <returns vsli:raw="A string representation of the &lt;see langword=&quot;Char&quot; /&gt;.">
        <see langword="Char" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.DateTime&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.DateTime" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="The value to convert.">変換する値。</param>
      <returns vsli:raw="A string representation of the &lt;see langword=&quot;DateTime&quot; /&gt; in the format yyyy-MM-ddTHH:mm:ss where 'T' is a constant literal.">yyyy-MM-ddTHH:mm:ss の形式での <see langword="DateTime" /> の文字列形式。'T' は定数リテラル。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime,System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.DateTime&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.DateTime" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="The value to convert.">変換する値。</param>
      <param name="format" vsli:raw="The format structure that defines how to display the converted string. Valid formats include &quot;yyyy-MM-ddTHH:mm:sszzzzzz&quot; and its subsets.">変換後の文字列の表示方法を定義する形式構造。 有効な形式には、"yyyy-MM-ddTHH:mm:sszzzzzz" およびそのサブセットが含まれます。</param>
      <returns vsli:raw="A string representation of the &lt;see langword=&quot;DateTime&quot; /&gt; in the specified format.">指定した形式での <see langword="DateTime" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime,System.Xml.XmlDateTimeSerializationMode)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.DateTime&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt; using the &lt;see cref=&quot;T:System.Xml.XmlDateTimeSerializationMode&quot; /&gt; specified.">指定された <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> を使用して、<see cref="T:System.DateTime" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value to convert.">変換する <see cref="T:System.DateTime" /> 値。</param>
      <param name="dateTimeOption" vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.XmlDateTimeSerializationMode&quot; /&gt; values that specify how to treat the &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value.">
        <see cref="T:System.DateTime" /> 値を処理する方法を指定する <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> 値の 1 つ。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; equivalent of the &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">
        <see cref="T:System.DateTime" /> と等価の <see cref="T:System.String" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;dateTimeOption&quot; /&gt; value is not valid.">
        <paramref name="dateTimeOption" /> 値が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;value&quot; /&gt; or &lt;paramref name=&quot;dateTimeOption&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> または <paramref name="dateTimeOption" /> の値が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTimeOffset)">
      <summary vsli:raw="Converts the supplied &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">指定した <see cref="T:System.DateTimeOffset" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; to be converted.">変換される <see cref="T:System.DateTimeOffset" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; representation of the supplied &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">指定した <see cref="T:System.DateTimeOffset" /> の <see cref="T:System.String" /> 表現。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTimeOffset,System.String)">
      <summary vsli:raw="Converts the supplied &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt; in the specified format.">指定した <see cref="T:System.DateTimeOffset" /> を指定した形式の <see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; to be converted.">変換される <see cref="T:System.DateTimeOffset" />。</param>
      <param name="format" vsli:raw="The format to which &lt;paramref name=&quot;s&quot; /&gt; is converted. The format parameter can be any subset of the W3C Recommendation for the XML dateTime type. (For more information, see the dateTime section of the XML Schema specification..)">変換後の <paramref name="s" /> の形式。 フォーマット パラメーターには、W3C 勧告の XML dateTime 型の任意のサブセットを指定できます。 (詳細については、XML スキーマ仕様の dateTime セクションを参照してください。)</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; representation in the specified format of the supplied &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">指定した <see cref="T:System.DateTimeOffset" /> の指定した形式での <see cref="T:System.String" /> 表現。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Decimal)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.Decimal&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.Decimal" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="The value to convert.">変換する値。</param>
      <returns vsli:raw="A string representation of the &lt;see langword=&quot;Decimal&quot; /&gt;.">
        <see langword="Decimal" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Double)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.Double&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.Double" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="The value to convert.">変換する値。</param>
      <returns vsli:raw="A string representation of the &lt;see cref=&quot;T:System.Double&quot; /&gt;.">
        <see langword="Double" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Guid)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.Guid&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.Guid" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="The value to convert.">変換する値。</param>
      <returns vsli:raw="A string representation of the &lt;see langword=&quot;Guid&quot; /&gt;.">
        <see langword="Guid" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int16)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.Int16&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.Int16" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="The value to convert.">変換する値。</param>
      <returns vsli:raw="A string representation of the &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">
        <see langword="Int16" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int32)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.Int32&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.Int32" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="The value to convert.">変換する値。</param>
      <returns vsli:raw="A string representation of the &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <see langword="Int32" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int64)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.Int64&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.Int64" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="The value to convert.">変換する値。</param>
      <returns vsli:raw="A string representation of the &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">
        <see langword="Int64" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.SByte)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.SByte&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.SByte" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="The value to convert.">変換する値。</param>
      <returns vsli:raw="A string representation of the &lt;see langword=&quot;SByte&quot; /&gt;.">
        <see langword="SByte" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Single)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.Single&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.Single" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="The value to convert.">変換する値。</param>
      <returns vsli:raw="A string representation of the &lt;see cref=&quot;T:System.Single&quot; /&gt;.">
        <see langword="Single" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.TimeSpan)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.TimeSpan" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="The value to convert.">変換する値。</param>
      <returns vsli:raw="A string representation of the &lt;see langword=&quot;TimeSpan&quot; /&gt;.">
        <see langword="TimeSpan" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt16)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.UInt16&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.UInt16" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="The value to convert.">変換する値。</param>
      <returns vsli:raw="A string representation of the &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">
        <see langword="UInt16" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt32)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.UInt32&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.UInt32" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="The value to convert.">変換する値。</param>
      <returns vsli:raw="A string representation of the &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">
        <see langword="UInt32" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt64)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.UInt64&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.UInt64" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="The value to convert.">変換する値。</param>
      <returns vsli:raw="A string representation of the &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">
        <see langword="UInt64" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToTimeSpan(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; equivalent.">
        <see cref="T:System.String" /> を等価の <see cref="T:System.TimeSpan" /> に変換します。</summary>
      <param name="s" vsli:raw="The string to convert. The string format must conform to the W3C XML Schema Part 2: Datatypes recommendation for duration.">変換する文字列。 文字列の形式は、W3C『XML Schema Part 2: Datatypes』の期間に関する勧告に準拠している必要があります。</param>
      <returns vsli:raw="A &lt;see langword=&quot;TimeSpan&quot; /&gt; equivalent of the string.">文字列と等価の <see langword="TimeSpan" />。</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is not in correct format to represent a &lt;see langword=&quot;TimeSpan&quot; /&gt; value.">
        <paramref name="s" /> が <see langword="TimeSpan" /> 値を表す正しい形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt16(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; equivalent.">
        <see cref="T:System.String" /> を等価の <see cref="T:System.UInt16" /> に変換します。</summary>
      <param name="s" vsli:raw="The string to convert.">変換する文字列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.UInt16&quot; /&gt; equivalent of the string.">文字列と等価の <see langword="UInt16" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is not in the correct format.">
        <paramref name="s" /> が正しい形式ではありません。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; represents a number less than &lt;see cref=&quot;F:System.UInt16.MinValue&quot;&gt;UInt16.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt16.MaxValue&quot;&gt;UInt16.MaxValue&lt;/see&gt;.">
        <paramref name="s" /> は、<see cref="F:System.UInt16.MinValue" /> 未満の数値か、<see cref="F:System.UInt16.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt32(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; equivalent.">
        <see cref="T:System.String" /> を等価の <see cref="T:System.UInt32" /> に変換します。</summary>
      <param name="s" vsli:raw="The string to convert.">変換する文字列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.UInt32&quot; /&gt; equivalent of the string.">文字列と等価の <see langword="UInt32" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is not in the correct format.">
        <paramref name="s" /> が正しい形式ではありません。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; represents a number less than &lt;see cref=&quot;F:System.UInt32.MinValue&quot;&gt;UInt32.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt32.MaxValue&quot;&gt;UInt32.MaxValue&lt;/see&gt;.">
        <paramref name="s" /> は、<see cref="F:System.UInt32.MinValue" /> 未満の数値か、<see cref="F:System.UInt32.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt64(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; equivalent.">
        <see cref="T:System.String" /> を等価の <see cref="T:System.UInt64" /> に変換します。</summary>
      <param name="s" vsli:raw="The string to convert.">変換する文字列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.UInt64&quot; /&gt; equivalent of the string.">文字列と等価の <see langword="UInt64" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is not in the correct format.">
        <paramref name="s" /> が正しい形式ではありません。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; represents a number less than &lt;see cref=&quot;F:System.UInt64.MinValue&quot;&gt;UInt64.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt64.MaxValue&quot;&gt;UInt64.MaxValue&lt;/see&gt;.">
        <paramref name="s" /> は、<see cref="F:System.UInt64.MinValue" /> 未満の数値か、<see cref="F:System.UInt64.MaxValue" /> より大きい数値を表します。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyName(System.String)">
      <summary vsli:raw="Verifies that the name is a valid name according to the W3C Extended Markup Language recommendation.">W3C 勧告『Extended Markup Language』に照らし合わせて、名前が有効な名前であることを検証します。</summary>
      <param name="name" vsli:raw="The name to verify.">検証対象となる名前。</param>
      <returns vsli:raw="The name, if it is a valid XML name.">有効な XML 名の場合は、その名前。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not a valid XML name.">
        <paramref name="name" /> が有効な XML 名ではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or String.Empty.">
        <paramref name="name" /> が <see langword="null" /> または String.Empty です。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyNCName(System.String)">
      <summary vsli:raw="Verifies that the name is a valid &lt;see langword=&quot;NCName&quot; /&gt; according to the W3C Extended Markup Language recommendation. An &lt;see langword=&quot;NCName&quot; /&gt; is a name that cannot contain a colon.">W3C 勧告『Extended Markup Language』に照らし合わせて、名前が有効な <see langword="NCName" /> であることを検証します。 <see langword="NCName" /> は、コロンを入れることができない名前です。</summary>
      <param name="name" vsli:raw="The name to verify.">検証対象となる名前。</param>
      <returns vsli:raw="The name, if it is a valid NCName.">有効な NCName の場合は、その名前。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt;.">
        <paramref name="name" /> は、<see langword="null" /> または <c>String.Empty</c> です。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not a valid non-colon name.">
        <paramref name="name" /> はコロンが含まれていない有効な名前ではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyNMTOKEN(System.String)">
      <summary vsli:raw="Verifies that the string is a valid NMTOKEN according to the W3C XML Schema Part2: Datatypes recommendation.">W3C 勧告『XML Schema Part 2: Datatypes』に照らし合わせて、文字列が有効な NMTOKEN であることを検証します。</summary>
      <param name="name" vsli:raw="The string you wish to verify.">検証する文字列。</param>
      <returns vsli:raw="The name token, if it is a valid NMTOKEN.">有効な NMTOKEN の場合は、名前トークン。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The string is not a valid name token.">文字列が、有効な名前トークンではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyPublicId(System.String)">
      <summary vsli:raw="Returns the passed in string instance if all the characters in the string argument are valid public id characters.">文字列引数のすべての文字が有効な公開識別子の文字の場合、渡された文字列インスタンスを返します。</summary>
      <param name="publicId" vsli:raw="&lt;see cref=&quot;T:System.String&quot; /&gt; that contains the id to validate.">検証対象の識別子が格納されている <see cref="T:System.String" />。</param>
      <returns vsli:raw="The passed-in string if all the characters in the argument are valid public id characters.">引数のすべての文字が有効な公開識別子の文字の場合の、渡された文字列。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyTOKEN(System.String)">
      <summary vsli:raw="Verifies that the string is a valid token according to the W3C XML Schema Part2: Datatypes recommendation.">W3C 勧告『XML Schema Part 2: Datatypes』に照らし合わせて、文字列が有効なトークンであることを検証します。</summary>
      <param name="token" vsli:raw="The string value you wish to verify.">検証する文字列値。</param>
      <returns vsli:raw="The token, if it is a valid token.">有効なトークンの場合は、トークン。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The string value is not a valid token.">文字列値が、有効なトークンではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyWhitespace(System.String)">
      <summary vsli:raw="Returns the passed-in string instance if all the characters in the string argument are valid whitespace characters.">文字列引数のすべての文字が有効な空白文字の場合、渡された文字列インスタンスを返します。</summary>
      <param name="content" vsli:raw="&lt;see cref=&quot;T:System.String&quot; /&gt; to verify.">検証する <see cref="T:System.String" />。</param>
      <returns vsli:raw="The passed-in string instance if all the characters in the string argument are valid whitespace characters, otherwise &lt;see langword=&quot;null&quot; /&gt;.">文字列引数のすべての文字が有効な空白文字の場合は渡された文字列インスタンス。それ以外の場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyXmlChars(System.String)">
      <summary vsli:raw="Returns the passed-in string if all the characters and surrogate pair characters in the string argument are valid XML characters, otherwise an &lt;see langword=&quot;XmlException&quot; /&gt; is thrown with information on the first invalid character encountered.">文字列引数の中にあるすべての文字とサロゲート ペア文字が有効な XML 文字である場合は、渡された文字列が返されます。それ以外の場合は、見つかった最初の無効な文字に関する情報を含む <see langword="XmlException" /> がスローされます。</summary>
      <param name="content" vsli:raw="&lt;see cref=&quot;T:System.String&quot; /&gt; that contains characters to verify.">検証対象の文字が格納されている <see cref="T:System.String" />。</param>
      <returns vsli:raw="The passed-in string if all the characters and surrogate-pair characters in the string argument are valid XML characters, otherwise an &lt;see langword=&quot;XmlException&quot; /&gt; is thrown with information on the first invalid character encountered.">文字列引数の中にあるすべての文字とサロゲート ペア文字が有効な XML 文字である場合は渡された文字列。それ以外の場合は、見つかった最初の無効な文字に関する情報を含む <see langword="XmlException" /> がスローされます。</returns>
    </member>
    <member name="T:System.Xml.XmlDateTimeSerializationMode">
      <summary vsli:raw="Specifies how to treat the time value when converting between string and &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">文字列と <see cref="T:System.DateTime" /> の間で変換を行うときに、時刻の値をどのように処理するかを指定します。</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Local">
      <summary vsli:raw="Treat as local time. If the &lt;see cref=&quot;T:System.DateTime&quot; /&gt; object represents a Coordinated Universal Time (UTC), it is converted to the local time.">現地時刻として処理します。 <see cref="T:System.DateTime" /> オブジェクトが世界協定時刻 (UTC: Coordinated Universal Time) を表す場合、これを現地時刻に変換します。</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.RoundtripKind">
      <summary vsli:raw="Time zone information should be preserved when converting.">変換を行うときに、タイム ゾーン情報が保持されます。</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Unspecified">
      <summary vsli:raw="Treat as a local time if a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; is being converted to a string. If a string is being converted to &lt;see cref=&quot;T:System.DateTime&quot; /&gt;, convert to a local time if a time zone is specified.">
        <see cref="T:System.DateTime" /> を文字列に変換する場合は、現地時刻として処理します。 文字列を <see cref="T:System.DateTime" /> に変換する場合、タイム ゾーンが指定されていれば現地時刻に変換します。</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Utc">
      <summary vsli:raw="Treat as a UTC. If the &lt;see cref=&quot;T:System.DateTime&quot; /&gt; object represents a local time, it is converted to a UTC.">UTC として処理します。 <see cref="T:System.DateTime" /> オブジェクトが現地時刻を表す場合は、UTC に変換します。</summary>
    </member>
    <member name="T:System.Xml.XmlDeclaration">
      <summary vsli:raw="Represents the XML declaration node &amp;lt;?xml version='1.0'...?&amp;gt;.">XML 宣言ノード &lt;?xml version='1.0'...?&gt; を表します。</summary>
    </member>
    <member name="M:System.Xml.XmlDeclaration.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlDeclaration&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlDeclaration" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="version" vsli:raw="The XML version; see the &lt;see cref=&quot;P:System.Xml.XmlDeclaration.Version&quot; /&gt; property.">XML バージョン。<see cref="P:System.Xml.XmlDeclaration.Version" /> プロパティのトピックを参照してください。</param>
      <param name="encoding" vsli:raw="The encoding scheme; see the &lt;see cref=&quot;P:System.Xml.XmlDeclaration.Encoding&quot; /&gt; property.">エンコーディング スキーム。<see cref="P:System.Xml.XmlDeclaration.Encoding" /> プロパティのトピックを参照してください。</param>
      <param name="standalone" vsli:raw="Indicates whether the XML document depends on an external DTD; see the &lt;see cref=&quot;P:System.Xml.XmlDeclaration.Standalone&quot; /&gt; property.">XML ドキュメントが外部 DTD に依存するかどうかを示します。<see cref="P:System.Xml.XmlDeclaration.Standalone" /> プロパティのトピックを参照してください。</param>
      <param name="doc" vsli:raw="The parent XML document.">親 XML ドキュメント。</param>
    </member>
    <member name="M:System.Xml.XmlDeclaration.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node.">このノードの複製を作成します。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself. Because &lt;see langword=&quot;XmlDeclaration&quot; /&gt; nodes do not have children, the cloned node always includes the data value, regardless of the parameter setting.">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。 <see langword="XmlDeclaration" /> ノードには子がないため、パラメーターの設定に関係なく、クローンとして作成されたノードには、常にデータ値が含まれます。</param>
      <returns vsli:raw="The cloned node.">クローンとして作成されたノード。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Encoding">
      <summary vsli:raw="Gets or sets the encoding level of the XML document.">XML ドキュメントのエンコーディング レベルを取得または設定します。</summary>
      <returns vsli:raw="The valid character encoding name. The most commonly supported character encoding names for XML are the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Category&lt;/term&gt;&lt;description&gt; Encoding Names&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Unicode&lt;/term&gt;&lt;description&gt; UTF-8, UTF-16&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; ISO 10646&lt;/term&gt;&lt;description&gt; ISO-10646-UCS-2, ISO-10646-UCS-4&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; ISO 8859&lt;/term&gt;&lt;description&gt; ISO-8859-n (where &quot;n&quot; is a digit from 1 to 9)&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; JIS X-0208-1997&lt;/term&gt;&lt;description&gt; ISO-2022-JP, Shift_JIS, EUC-JP&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;  &#xA;&#xA; This value is optional. If a value is not set, this property returns String.Empty.  &#xA;  &#xA; If an encoding attribute is not included, UTF-8 encoding is assumed when the document is written or saved out.">有効な文字エンコーディング名。 通常サポートされている XML の文字エンコーディング名を次に示します。  
  カテゴリ  

  エンコーディング名  

  Unicode  

  UTF-8、UTF-16  

  ISO 10646  

  ISO-10646-UCS-2、ISO-10646-UCS-4  

  ISO 8859  

  ISO-8859-n ("n" は 1 から 9 までの数字)  

  JIS X-0208-1997  

  ISO-2022-JP、Shift_JIS、EUC-JP  

   

 この値はオプションです。 値が設定されていない場合は、このプロパティが String.Empty を返します。  
エンコーディング属性が含まれていない場合は、ドキュメントが書き込まれたり保存されるときに、UTF-8 エンコーディングであると見なされます。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.InnerText">
      <summary vsli:raw="Gets or sets the concatenated values of the &lt;see langword=&quot;XmlDeclaration&quot; /&gt;.">
        <see langword="XmlDeclaration" /> の連結している値を取得または設定します。</summary>
      <returns vsli:raw="The concatenated values of the &lt;see langword=&quot;XmlDeclaration&quot; /&gt; (that is, everything between &lt;c&gt;&amp;lt;?xml&lt;/c&gt; and &lt;c&gt;?&amp;gt;&lt;/c&gt;).">連結された値、 <see langword="XmlDeclaration" /> (つまり、間のすべて<c>&lt;でしょうか xml</c>と<c>でしょうか。&gt; 。</c>).</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.LocalName">
      <summary vsli:raw="Gets the local name of the node.">ノードのローカル名を取得します。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlDeclaration&quot; /&gt; nodes, the local name is &lt;see langword=&quot;xml&quot; /&gt;.">
        <see langword="XmlDeclaration" /> ノードの場合、ローカル名は <see langword="xml" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Name">
      <summary vsli:raw="Gets the qualified name of the node.">ノードの限定名を取得します。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlDeclaration&quot; /&gt; nodes, the name is &lt;see langword=&quot;xml&quot; /&gt;.">
        <see langword="XmlDeclaration" /> ノードの場合、名前は <see langword="xml" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.NodeType">
      <summary vsli:raw="Gets the type of the current node.">現在のノードの種類を取得します。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlDeclaration&quot; /&gt; nodes, this value is XmlNodeType.XmlDeclaration.">
        <see langword="XmlDeclaration" /> ノードの場合、この値は XmlNodeType.XmlDeclaration です。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Standalone">
      <summary vsli:raw="Gets or sets the value of the standalone attribute.">スタンドアロン属性の値を取得または設定します。</summary>
      <returns vsli:raw="Valid values are &lt;see langword=&quot;yes&quot; /&gt; if all entity declarations required by the XML document are contained within the document or &lt;see langword=&quot;no&quot; /&gt; if an external document type definition (DTD) is required. If a standalone attribute is not present in the XML declaration, this property returns String.Empty.">XML ドキュメントで必要なすべてのエンティティ宣言がドキュメント内に格納されている場合、有効値は <see langword="yes" /> です。外部の文書型宣言 (DTD : Document Type Definition) が必要な場合は <see langword="no" /> です。 XML 宣言内にスタンドアロン属性が存在しない場合、このプロパティは String.Empty を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Value">
      <summary vsli:raw="Gets or sets the value of the &lt;see langword=&quot;XmlDeclaration&quot; /&gt;.">
        <see langword="XmlDeclaration" /> の値を取得または設定します。</summary>
      <returns vsli:raw="The contents of the &lt;see langword=&quot;XmlDeclaration&quot; /&gt; (that is, everything between &lt;c&gt;&amp;lt;?xml&lt;/c&gt; and &lt;c&gt;?&amp;gt;&lt;/c&gt;).">内容、 <see langword="XmlDeclaration" /> (つまり、間のすべて<c>&lt;でしょうか xml</c>と<c>でしょうか。&gt; 。</c>).</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Version">
      <summary vsli:raw="Gets the XML version of the document.">ドキュメントの XML バージョンを取得します。</summary>
      <returns vsli:raw="The value is always &lt;see langword=&quot;1.0&quot; /&gt;.">値は常に <see langword="1.0" /> です。</returns>
    </member>
    <member name="M:System.Xml.XmlDeclaration.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the children of the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;. Because &lt;see langword=&quot;XmlDeclaration&quot; /&gt; nodes do not have children, this method has no effect.">ノードの子を、指定した <see cref="T:System.Xml.XmlWriter" /> に保存します。 <see langword="XmlDeclaration" /> ノードには子がないため、このメソッドによる影響はありません。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlDeclaration.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">指定した <see cref="T:System.Xml.XmlWriter" /> にノードを保存します。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlDocument">
      <summary vsli:raw="Represents an XML document. You can use this class to load, validate, edit, add, and position XML in a document.">XML ドキュメントを表します。 このクラスを使用すると、XML のドキュメントへの読み込み、検証、編集、追加、および配置が可能です。</summary>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlDocument" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlDocument&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Xml.XmlImplementation&quot; /&gt;.">
        <see langword="XmlDocument" /> を指定して、<see cref="T:System.Xml.XmlImplementation" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="imp" vsli:raw="The &lt;see langword=&quot;XmlImplementation&quot; /&gt; to use.">使用する <see langword="XmlImplementation" />。</param>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlDocument&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">
        <see langword="XmlDocument" /> を指定して、<see cref="T:System.Xml.XmlNameTable" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="nt" vsli:raw="The &lt;see langword=&quot;XmlNameTable&quot; /&gt; to use.">使用する <see langword="XmlNameTable" />。</param>
    </member>
    <member name="P:System.Xml.XmlDocument.BaseURI">
      <summary vsli:raw="Gets the base URI of the current node.">現在のノードのベース URI を取得します。</summary>
      <returns vsli:raw="The location from which the node was loaded.">読み込まれたノードの読み込み元の場所。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node.">このノードの複製を作成します。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself.">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。</param>
      <returns vsli:raw="The cloned &lt;see langword=&quot;XmlDocument&quot; /&gt; node.">クローンとして作成された <see langword="XmlDocument" /> ノード。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt; with the specified &lt;see cref=&quot;P:System.Xml.XmlDocument.Name&quot; /&gt;.">指定した <see cref="P:System.Xml.XmlDocument.Name" /> を使用して <see cref="T:System.Xml.XmlAttribute" /> を作成します。</summary>
      <param name="name" vsli:raw="The qualified name of the attribute. If the name contains a colon, the &lt;see cref=&quot;P:System.Xml.XmlNode.Prefix&quot; /&gt; property reflects the part of the name preceding the first colon and the &lt;see cref=&quot;P:System.Xml.XmlDocument.LocalName&quot; /&gt; property reflects the part of the name following the first colon. The &lt;see cref=&quot;P:System.Xml.XmlNode.NamespaceURI&quot; /&gt; remains empty unless the prefix is a recognized built-in prefix such as xmlns. In this case &lt;see langword=&quot;NamespaceURI&quot; /&gt; has a value of &lt;c&gt;http://www.w3.org/2000/xmlns/&lt;/c&gt;.">属性の限定名。 名前にコロンが含まれている場合は、名前のうち最初のコロンの前にある部分が <see cref="P:System.Xml.XmlNode.Prefix" /> プロパティに反映され、最初のコロンの後ろの部分が <see cref="P:System.Xml.XmlDocument.LocalName" /> プロパティに反映されます。 プリフィックスが xmlns などの認識された組み込みプリフィックスでない限り、<see cref="P:System.Xml.XmlNode.NamespaceURI" /> は空のままです。 この場合、<see langword="NamespaceURI" /> の値は <c></c> です。</param>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlAttribute&quot; /&gt;.">新しい <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt; with the specified qualified name and &lt;see cref=&quot;P:System.Xml.XmlNode.NamespaceURI&quot; /&gt;.">指定した限定名と <see cref="P:System.Xml.XmlNode.NamespaceURI" /> を使用して <see cref="T:System.Xml.XmlAttribute" /> を作成します。</summary>
      <param name="qualifiedName" vsli:raw="The qualified name of the attribute. If the name contains a colon then the &lt;see cref=&quot;P:System.Xml.XmlNode.Prefix&quot; /&gt; property will reflect the part of the name preceding the colon and the &lt;see cref=&quot;P:System.Xml.XmlDocument.LocalName&quot; /&gt; property will reflect the part of the name after the colon.">属性の限定名。 名前にコロンが含まれている場合は、名前のうちコロンの前にある部分が <see cref="P:System.Xml.XmlNode.Prefix" /> プロパティに反映され、コロンの後ろの部分が <see cref="P:System.Xml.XmlDocument.LocalName" /> プロパティに反映されます。</param>
      <param name="namespaceURI" vsli:raw="The namespaceURI of the attribute. If the qualified name includes a prefix of xmlns, then this parameter must be &lt;c&gt;http://www.w3.org/2000/xmlns/&lt;/c&gt;.">属性の namespaceURI。 限定名に xmlns というプレフィックスが含まれている場合、このパラメーターは <c></c> である必要があります。</param>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlAttribute&quot; /&gt;.">新しい <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt; with the specified &lt;see cref=&quot;P:System.Xml.XmlNode.Prefix&quot; /&gt;, &lt;see cref=&quot;P:System.Xml.XmlDocument.LocalName&quot; /&gt;, and &lt;see cref=&quot;P:System.Xml.XmlNode.NamespaceURI&quot; /&gt;.">指定した <see cref="P:System.Xml.XmlNode.Prefix" />、<see cref="P:System.Xml.XmlDocument.LocalName" />、および <see cref="P:System.Xml.XmlNode.NamespaceURI" /> を使用して、<see cref="T:System.Xml.XmlAttribute" /> を作成します。</summary>
      <param name="prefix" vsli:raw="The prefix of the attribute (if any). String.Empty and &lt;see langword=&quot;null&quot; /&gt; are equivalent.">属性のプリフィックス (存在する場合)。 String.Empty と <see langword="null" /> は等価です。</param>
      <param name="localName" vsli:raw="The local name of the attribute.">属性のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute (if any). String.Empty and &lt;see langword=&quot;null&quot; /&gt; are equivalent. If &lt;paramref name=&quot;prefix&quot; /&gt; is xmlns, then this parameter must be &lt;c&gt;http://www.w3.org/2000/xmlns/&lt;/c&gt;; otherwise an exception is thrown.">属性の名前空間 URI (存在する場合)。 String.Empty と <see langword="null" /> は等価です。 <paramref name="prefix" /> が xmlns の場合、このパラメーターは <c></c> である必要があります。そうでない場合は、例外がスローされます。</param>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlAttribute&quot; /&gt;.">新しい <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateCDataSection(System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlCDataSection&quot; /&gt; containing the specified data.">指定されたデータを格納している <see cref="T:System.Xml.XmlCDataSection" /> を作成します。</summary>
      <param name="data" vsli:raw="The content of the new &lt;see langword=&quot;XmlCDataSection&quot; /&gt;.">新しい <see langword="XmlCDataSection" /> の内容。</param>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlCDataSection&quot; /&gt;.">新しい <see langword="XmlCDataSection" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateComment(System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlComment&quot; /&gt; containing the specified data.">指定されたデータを格納している <see cref="T:System.Xml.XmlComment" /> を作成します。</summary>
      <param name="data" vsli:raw="The content of the new &lt;see langword=&quot;XmlComment&quot; /&gt;.">新しい <see langword="XmlComment" /> の内容。</param>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlComment&quot; /&gt;.">新しい <see langword="XmlComment" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)">
      <summary vsli:raw="Creates a default attribute with the specified prefix, local name and namespace URI.">指定したプリフィックス、ローカル名、および名前空間 URI の既定の属性を作成します。</summary>
      <param name="prefix" vsli:raw="The prefix of the attribute (if any).">属性のプリフィックス (存在する場合)。</param>
      <param name="localName" vsli:raw="The local name of the attribute.">属性のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute (if any).">属性の名前空間 URI (存在する場合)。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt;.">新しい <see cref="T:System.Xml.XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDocumentFragment">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlDocumentFragment&quot; /&gt;.">
        <see cref="T:System.Xml.XmlDocumentFragment" /> を作成します。</summary>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlDocumentFragment&quot; /&gt;.">新しい <see langword="XmlDocumentFragment" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Returns a new &lt;see cref=&quot;T:System.Xml.XmlDocumentType&quot; /&gt; object.">新しい <see cref="T:System.Xml.XmlDocumentType" /> オブジェクトを返します。</summary>
      <param name="name" vsli:raw="Name of the document type.">ドキュメントの種類の名前。</param>
      <param name="publicId" vsli:raw="The public identifier of the document type or &lt;see langword=&quot;null&quot; /&gt;. You can specify a public URI and also a system identifier to identify the location of the external DTD subset.">ドキュメントの種類のパブリック ID または <see langword="null" />。 パブリック URI およびシステム ID を指定して、外部 DTD サブセットの場所を特定できます。</param>
      <param name="systemId" vsli:raw="The system identifier of the document type or &lt;see langword=&quot;null&quot; /&gt;. Specifies the URL of the file location for the external DTD subset.">ドキュメントの種類のシステム ID または <see langword="null" />。 外部 DTD サブセットのファイル位置の URL を指定します。</param>
      <param name="internalSubset" vsli:raw="The DTD internal subset of the document type or &lt;see langword=&quot;null&quot; /&gt;.">ドキュメントの種類の DTD 内部サブセットまたは <see langword="null" />。</param>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlDocumentType&quot; /&gt;.">新しい <see langword="XmlDocumentType" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String)">
      <summary vsli:raw="Creates an element with the specified name.">指定した名前を使用して要素を作成します。</summary>
      <param name="name" vsli:raw="The qualified name of the element. If the name contains a colon then the &lt;see cref=&quot;P:System.Xml.XmlNode.Prefix&quot; /&gt; property reflects the part of the name preceding the colon and the &lt;see cref=&quot;P:System.Xml.XmlDocument.LocalName&quot; /&gt; property reflects the part of the name after the colon. The qualified name cannot include a prefix of 'xmlns'.">要素の限定名。 名前にコロンが含まれている場合は、名前のうちコロンの前にある部分が <see cref="P:System.Xml.XmlNode.Prefix" /> プロパティに反映され、コロンの後ろの部分が <see cref="P:System.Xml.XmlDocument.LocalName" /> プロパティに反映されます。 限定名に 'xmlns' というプリフィックスを含めることはできません。</param>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlElement&quot; /&gt;.">新しい <see langword="XmlElement" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String,System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlElement&quot; /&gt; with the qualified name and &lt;see cref=&quot;P:System.Xml.XmlNode.NamespaceURI&quot; /&gt;.">限定名と <see cref="P:System.Xml.XmlNode.NamespaceURI" /> を使用して <see cref="T:System.Xml.XmlElement" /> を作成します。</summary>
      <param name="qualifiedName" vsli:raw="The qualified name of the element. If the name contains a colon then the &lt;see cref=&quot;P:System.Xml.XmlNode.Prefix&quot; /&gt; property will reflect the part of the name preceding the colon and the &lt;see cref=&quot;P:System.Xml.XmlDocument.LocalName&quot; /&gt; property will reflect the part of the name after the colon. The qualified name cannot include a prefix of 'xmlns'.">要素の限定名。 名前にコロンが含まれている場合は、名前のうちコロンの前にある部分が <see cref="P:System.Xml.XmlNode.Prefix" /> プロパティに反映され、コロンの後ろの部分が <see cref="P:System.Xml.XmlDocument.LocalName" /> プロパティに反映されます。 限定名に 'xmlns' というプリフィックスを含めることはできません。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element.">要素の名前空間 URI。</param>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlElement&quot; /&gt;.">新しい <see langword="XmlElement" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)">
      <summary vsli:raw="Creates an element with the specified &lt;see cref=&quot;P:System.Xml.XmlNode.Prefix&quot; /&gt;, &lt;see cref=&quot;P:System.Xml.XmlDocument.LocalName&quot; /&gt;, and &lt;see cref=&quot;P:System.Xml.XmlNode.NamespaceURI&quot; /&gt;.">指定した <see cref="P:System.Xml.XmlNode.Prefix" />、<see cref="P:System.Xml.XmlDocument.LocalName" />、および <see cref="P:System.Xml.XmlNode.NamespaceURI" /> を使用して、要素を作成します。</summary>
      <param name="prefix" vsli:raw="The prefix of the new element (if any). String.Empty and &lt;see langword=&quot;null&quot; /&gt; are equivalent.">新しい要素のプリフィックス (存在する場合)。 String.Empty と <see langword="null" /> は等価です。</param>
      <param name="localName" vsli:raw="The local name of the new element.">新しい要素のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the new element (if any). String.Empty and &lt;see langword=&quot;null&quot; /&gt; are equivalent.">新しい要素の名前空間 URI (存在する場合)。 String.Empty と <see langword="null" /> は等価です。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Xml.XmlElement&quot; /&gt;.">新しい <see cref="T:System.Xml.XmlElement" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateEntityReference(System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlEntityReference&quot; /&gt; with the specified name.">指定した名前を使用して、<see cref="T:System.Xml.XmlEntityReference" /> を作成します。</summary>
      <param name="name" vsli:raw="The name of the entity reference.">エンティティ参照の名前。</param>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlEntityReference&quot; /&gt;.">新しい <see langword="XmlEntityReference" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The name is invalid (for example, names starting with'#' are invalid.)">名前が正しくありません (たとえば、# で始まる名前は使用できません)</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNavigator">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object for navigating this document.">このドキュメント内を移動するための、新しい <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトを作成します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNavigator(System.Xml.XmlNode)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object for navigating this document positioned on the &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; specified.">指定した <see cref="T:System.Xml.XmlNode" /> に配置されているこのドキュメント内を移動するための <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトを作成します。</summary>
      <param name="node" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; you want the navigator initially positioned on.">ナビゲーターを最初に配置する <see cref="T:System.Xml.XmlNode" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; with the specified node type, &lt;see cref=&quot;P:System.Xml.XmlDocument.Name&quot; /&gt;, and &lt;see cref=&quot;P:System.Xml.XmlNode.NamespaceURI&quot; /&gt;.">指定したノード型、<see cref="P:System.Xml.XmlDocument.Name" />、および <see cref="P:System.Xml.XmlNode.NamespaceURI" /> を使用して、<see cref="T:System.Xml.XmlNode" /> を作成します。</summary>
      <param name="nodeTypeString" vsli:raw="String version of the &lt;see cref=&quot;T:System.Xml.XmlNodeType&quot; /&gt; of the new node. This parameter must be one of the values listed in the table below.">新しいノードの <see cref="T:System.Xml.XmlNodeType" /> の文字列バージョン。 このパラメーターは、次の表に示す一覧の値のいずれかである必要があります。</param>
      <param name="name" vsli:raw="The qualified name of the new node. If the name contains a colon, it is parsed into &lt;see cref=&quot;P:System.Xml.XmlNode.Prefix&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlDocument.LocalName&quot; /&gt; components.">新しいノードの修飾名。 名前にコロンが含まれている場合は、解析結果は <see cref="P:System.Xml.XmlNode.Prefix" /> コンポーネントと <see cref="P:System.Xml.XmlDocument.LocalName" /> コンポーネントになります。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the new node.">新しいノードの名前空間 URI。</param>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlNode&quot; /&gt;.">新しい <see langword="XmlNode" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The name was not provided and the &lt;see langword=&quot;XmlNodeType&quot; /&gt; requires a name; or &lt;paramref name=&quot;nodeTypeString&quot; /&gt; is not one of the strings listed below.">名前が指定されていませんが、<see langword="XmlNodeType" /> には名前が必要です。または <paramref name="nodeTypeString" /> が以下に示す文字列のいずれでもありません。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; with the specified &lt;see cref=&quot;T:System.Xml.XmlNodeType&quot; /&gt;, &lt;see cref=&quot;P:System.Xml.XmlDocument.Name&quot; /&gt;, and &lt;see cref=&quot;P:System.Xml.XmlNode.NamespaceURI&quot; /&gt;.">指定した <see cref="T:System.Xml.XmlNodeType" />、<see cref="P:System.Xml.XmlDocument.Name" />、および <see cref="P:System.Xml.XmlNode.NamespaceURI" /> を使用して、<see cref="T:System.Xml.XmlNode" /> を作成します。</summary>
      <param name="type" vsli:raw="The &lt;see langword=&quot;XmlNodeType&quot; /&gt; of the new node.">新しいノードの <see langword="XmlNodeType" />。</param>
      <param name="name" vsli:raw="The qualified name of the new node. If the name contains a colon then it is parsed into &lt;see cref=&quot;P:System.Xml.XmlNode.Prefix&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlDocument.LocalName&quot; /&gt; components.">新しいノードの修飾名。 名前にコロンが含まれている場合は、解析結果は <see cref="P:System.Xml.XmlNode.Prefix" /> コンポーネントと <see cref="P:System.Xml.XmlDocument.LocalName" /> コンポーネントになります。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the new node.">新しいノードの名前空間 URI。</param>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlNode&quot; /&gt;.">新しい <see langword="XmlNode" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The name was not provided and the &lt;see langword=&quot;XmlNodeType&quot; /&gt; requires a name.">名前が指定されませんでした。<see langword="XmlNodeType" /> には名前が必要です。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; with the specified &lt;see cref=&quot;T:System.Xml.XmlNodeType&quot; /&gt;, &lt;see cref=&quot;P:System.Xml.XmlNode.Prefix&quot; /&gt;, &lt;see cref=&quot;P:System.Xml.XmlDocument.Name&quot; /&gt;, and &lt;see cref=&quot;P:System.Xml.XmlNode.NamespaceURI&quot; /&gt;.">指定した <see cref="T:System.Xml.XmlNodeType" />、<see cref="P:System.Xml.XmlNode.Prefix" />、<see cref="P:System.Xml.XmlDocument.Name" />、および <see cref="P:System.Xml.XmlNode.NamespaceURI" /> を使用して、<see cref="T:System.Xml.XmlNode" /> を作成します。</summary>
      <param name="type" vsli:raw="The &lt;see langword=&quot;XmlNodeType&quot; /&gt; of the new node.">新しいノードの <see langword="XmlNodeType" />。</param>
      <param name="prefix" vsli:raw="The prefix of the new node.">新しいノードのプリフィックス。</param>
      <param name="name" vsli:raw="The local name of the new node.">新しいノードのローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the new node.">新しいノードの名前空間 URI。</param>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlNode&quot; /&gt;.">新しい <see langword="XmlNode" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The name was not provided and the &lt;see langword=&quot;XmlNodeType&quot; /&gt; requires a name.">名前が指定されませんでした。<see langword="XmlNodeType" /> には名前が必要です。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlProcessingInstruction&quot; /&gt; with the specified name and data.">指定した名前とデータを使用して <see cref="T:System.Xml.XmlProcessingInstruction" /> を作成します。</summary>
      <param name="target" vsli:raw="The name of the processing instruction.">処理命令の名前。</param>
      <param name="data" vsli:raw="The data for the processing instruction.">処理命令のデータ。</param>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlProcessingInstruction&quot; /&gt;.">新しい <see langword="XmlProcessingInstruction" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlSignificantWhitespace&quot; /&gt; node.">
        <see cref="T:System.Xml.XmlSignificantWhitespace" /> ノードを作成します。</summary>
      <param name="text" vsli:raw="The string must contain only the following characters &amp;amp;#20; &amp;amp;#10; &amp;amp;#13; and &amp;amp;#9;.">文字列には、&amp;#20;、&amp;#10;、&amp;#13;、&amp;#9; の文字だけを含める必要があります。</param>
      <returns vsli:raw="A new &lt;see langword=&quot;XmlSignificantWhitespace&quot; /&gt; node.">新しい <see langword="XmlSignificantWhitespace" /> ノード。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateTextNode(System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlText&quot; /&gt; with the specified text.">指定したテキストを使用して、<see cref="T:System.Xml.XmlText" /> を作成します。</summary>
      <param name="text" vsli:raw="The text for the Text node.">Text ノードのテキスト。</param>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlText&quot; /&gt; node.">新しい <see langword="XmlText" /> ノード。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateWhitespace(System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlWhitespace&quot; /&gt; node.">
        <see cref="T:System.Xml.XmlWhitespace" /> ノードを作成します。</summary>
      <param name="text" vsli:raw="The string must contain only the following characters &amp;amp;#20; &amp;amp;#10; &amp;amp;#13; and &amp;amp;#9;.">文字列には、&amp;#20;、&amp;#10;、&amp;#13;、&amp;#9; の文字だけを含める必要があります。</param>
      <returns vsli:raw="A new &lt;see langword=&quot;XmlWhitespace&quot; /&gt; node.">新しい <see langword="XmlWhitespace" /> ノード。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlDeclaration&quot; /&gt; node with the specified values.">指定した値を使用して、<see cref="T:System.Xml.XmlDeclaration" /> ノードを作成します。</summary>
      <param name="version" vsli:raw="The version must be &quot;1.0&quot;.">バージョンは "1.0" にする必要があります。</param>
      <param name="encoding" vsli:raw="The value of the encoding attribute. This is the encoding that is used when you save the &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; to a file or a stream; therefore, it must be set to a string supported by the &lt;see cref=&quot;T:System.Text.Encoding&quot; /&gt; class, otherwise &lt;see cref=&quot;M:System.Xml.XmlDocument.Save(System.String)&quot; /&gt; fails. If this is &lt;see langword=&quot;null&quot; /&gt; or String.Empty, the &lt;see langword=&quot;Save&quot; /&gt; method does not write an encoding attribute on the XML declaration and therefore the default encoding, UTF-8, is used.  &#xA;  &#xA; Note: If the &lt;see langword=&quot;XmlDocument&quot; /&gt; is saved to either a &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; or an &lt;see cref=&quot;T:System.Xml.XmlTextWriter&quot; /&gt;, this encoding value is discarded. Instead, the encoding of the &lt;see langword=&quot;TextWriter&quot; /&gt; or the &lt;see langword=&quot;XmlTextWriter&quot; /&gt; is used. This ensures that the XML written out can be read back using the correct encoding.">エンコーディング属性の値。 これは、<see cref="T:System.Xml.XmlDocument" /> をファイルまたはストリームに保存するときに使用するエンコーディングです。したがって、<see cref="T:System.Text.Encoding" /> クラスでサポートされる文字列に設定する必要があります。それ以外の場合、<see cref="M:System.Xml.XmlDocument.Save(System.String)" /> は失敗します。 この値が <see langword="null" /> または String.Empty の場合は、<see langword="Save" /> メソッドが XML 宣言にエンコーディング属性を書き込まないため、既定のエンコーディング UTF-8 が使用されます。  
メモ:<see langword="XmlDocument" /> が <see cref="T:System.IO.TextWriter" /> または <see cref="T:System.Xml.XmlTextWriter" /> に保存されると、このエンコード値は破棄されます。 代わりに、<see langword="TextWriter" /> または <see langword="XmlTextWriter" /> のエンコーディングが使用されます。 これにより、正しいエンコーディングを使用して、書き込まれた XML を読み戻すことができます。</param>
      <param name="standalone" vsli:raw="The value must be either &quot;yes&quot; or &quot;no&quot;. If this is &lt;see langword=&quot;null&quot; /&gt; or String.Empty, the &lt;see langword=&quot;Save&quot; /&gt; method does not write a standalone attribute on the XML declaration.">この値は、"yes" または "no" のいずれかにする必要があります。 この値が <see langword="null" /> または String.Empty の場合、<see langword="Save" /> メソッドは XML 宣言にスタンドアロン属性を書き込みません。</param>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlDeclaration&quot; /&gt; node.">新しい <see langword="XmlDeclaration" /> ノード。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The values of &lt;paramref name=&quot;version&quot; /&gt; or &lt;paramref name=&quot;standalone&quot; /&gt; are something other than the ones specified above.">
        <paramref name="version" /> または <paramref name="standalone" /> の値は上記で指定したものとは別のものです。</exception>
    </member>
    <member name="P:System.Xml.XmlDocument.DocumentElement">
      <summary vsli:raw="Gets the root &lt;see cref=&quot;T:System.Xml.XmlElement&quot; /&gt; for the document.">ドキュメントのルート <see cref="T:System.Xml.XmlElement" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlElement&quot; /&gt; that represents the root of the XML document tree. If no root exists, &lt;see langword=&quot;null&quot; /&gt; is returned.">XML ドキュメント ツリーのルートを表す <see langword="XmlElement" />。 ルートが存在しない場合は、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.DocumentType">
      <summary vsli:raw="Gets the node containing the DOCTYPE declaration.">DOCTYPE 宣言を格納しているノードを取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; containing the DocumentType (DOCTYPE declaration).">DocumentType (DOCTYPE 宣言) を格納している <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementById(System.String)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlElement&quot; /&gt; with the specified ID.">指定した ID の <see cref="T:System.Xml.XmlElement" /> を取得します。</summary>
      <param name="elementId" vsli:raw="The attribute ID to match.">一致する属性 ID。</param>
      <returns vsli:raw="The &lt;see langword=&quot;XmlElement&quot; /&gt; with the matching ID or &lt;see langword=&quot;null&quot; /&gt; if no matching element is found.">一致する ID の <see langword="XmlElement" />。一致する要素が見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementsByTagName(System.String)">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Xml.XmlNodeList&quot; /&gt; containing a list of all descendant elements that match the specified &lt;see cref=&quot;P:System.Xml.XmlDocument.Name&quot; /&gt;.">指定した <see cref="P:System.Xml.XmlDocument.Name" /> に一致するすべての子孫の要素のリストを格納している <see cref="T:System.Xml.XmlNodeList" /> を返します。</summary>
      <param name="name" vsli:raw="The qualified name to match. It is matched against the &lt;see langword=&quot;Name&quot; /&gt; property of the matching node. The special value &quot;*&quot; matches all tags.">一致する限定名。 一致するノードの <see langword="Name" /> プロパティに一致します。 特殊値の "*" は、すべてのタグに一致します。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNodeList&quot; /&gt; containing a list of all matching nodes. If no nodes match &lt;paramref name=&quot;name&quot; /&gt;, the returned collection will be empty.">一致しているすべてのノードのリストを格納している <see cref="T:System.Xml.XmlNodeList" />。 <paramref name="name" /> と一致するノードがない場合、返されるコレクションは空になります。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Xml.XmlNodeList&quot; /&gt; containing a list of all descendant elements that match the specified &lt;see cref=&quot;P:System.Xml.XmlDocument.LocalName&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlNode.NamespaceURI&quot; /&gt;.">指定した <see cref="P:System.Xml.XmlDocument.LocalName" /> および <see cref="P:System.Xml.XmlNode.NamespaceURI" /> に一致するすべての子孫の要素のリストを格納している <see cref="T:System.Xml.XmlNodeList" /> を返します。</summary>
      <param name="localName" vsli:raw="The LocalName to match. The special value &quot;*&quot; matches all tags.">一致する LocalName。 特殊値の "*" は、すべてのタグに一致します。</param>
      <param name="namespaceURI" vsli:raw="NamespaceURI to match.">一致する NamespaceURI。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNodeList&quot; /&gt; containing a list of all matching nodes. If no nodes match the specified &lt;paramref name=&quot;localName&quot; /&gt; and &lt;paramref name=&quot;namespaceURI&quot; /&gt;, the returned collection will be empty.">一致しているすべてのノードのリストを格納している <see cref="T:System.Xml.XmlNodeList" />。 指定した <paramref name="localName" /> および <paramref name="namespaceURI" /> と一致するノードがない場合、返されるコレクションは空になります。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.Implementation">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlImplementation&quot; /&gt; object for the current document.">現在のドキュメントの <see cref="T:System.Xml.XmlImplementation" /> オブジェクトを取得します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlImplementation&quot; /&gt; object for the current document.">現在のドキュメントの <see langword="XmlImplementation" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)">
      <summary vsli:raw="Imports a node from another document to the current document.">別のドキュメントから現在のドキュメントにノードをインポートします。</summary>
      <param name="node" vsli:raw="The node being imported.">インポートしているノード。</param>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to perform a deep clone; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">詳細クローンを実行する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns vsli:raw="The imported &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt;.">インポートされた <see cref="T:System.Xml.XmlNode" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Calling this method on a node type which cannot be imported.">インポートできないノード型でこのメソッドを呼び出しています。</exception>
    </member>
    <member name="P:System.Xml.XmlDocument.InnerText">
      <summary vsli:raw="Throws an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; in all cases.">常に <see cref="T:System.InvalidOperationException" /> をスローします。</summary>
      <returns vsli:raw="The values of the node and all its child nodes.">ノードとそのすべての子ノードの値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="P:System.Xml.XmlDocument.InnerXml">
      <summary vsli:raw="Gets or sets the markup representing the children of the current node.">現在のノードの子を表すマークアップを取得または設定します。</summary>
      <returns vsli:raw="The markup of the children of the current node.">現在のノードの子のマークアップ。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML specified when setting this property is not well-formed.">このプロパティの設定時に指定される XML は、整形式ではありません。</exception>
    </member>
    <member name="P:System.Xml.XmlDocument.IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the current node is read-only.">現在のノードが読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node is read-only; otherwise &lt;see langword=&quot;false&quot; /&gt;. &lt;see langword=&quot;XmlDocument&quot; /&gt; nodes always return &lt;see langword=&quot;false&quot; /&gt;.">現在のノードが読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="XmlDocument" /> ノードは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.IO.Stream)">
      <summary vsli:raw="Loads the XML document from the specified stream.">指定したストリームから XML ドキュメントを読み込みます。</summary>
      <param name="inStream" vsli:raw="The stream containing the XML document to load.">読み込む XML ドキュメントが含まれているストリーム。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="There is a load or parse error in the XML. In this case, a &lt;see cref=&quot;T:System.IO.FileNotFoundException&quot; /&gt; is raised.">XML で読み込みまたは解析のエラーが発生しました。 ここでは <see cref="T:System.IO.FileNotFoundException" /> が発生しました。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.IO.TextReader)">
      <summary vsli:raw="Loads the XML document from the specified &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt;.">指定した <see cref="T:System.IO.TextReader" /> から XML ドキュメントを読み込みます。</summary>
      <param name="txtReader" vsli:raw="The &lt;see langword=&quot;TextReader&quot; /&gt; used to feed the XML data into the document.">XML データをドキュメントに送るために使用する <see langword="TextReader" />。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="There is a load or parse error in the XML. In this case, the document remains empty.">XML で読み込みまたは解析のエラーが発生しました。 この場合は、ドキュメントは空のままです。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.String)">
      <summary vsli:raw="Loads the XML document from the specified URL.">指定した URL から XML ドキュメントを読み込みます。</summary>
      <param name="filename" vsli:raw="URL for the file containing the XML document to load. The URL can be either a local file or an HTTP URL (a Web address).">読み込む XML ドキュメントを格納しているファイルの URL。 URL には、ローカル ファイルまたは HTTP の URL (Web アドレス) を指定できます。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="There is a load or parse error in the XML. In this case, a &lt;see cref=&quot;T:System.IO.FileNotFoundException&quot; /&gt; is raised.">XML で読み込みまたは解析のエラーが発生しました。 ここでは <see cref="T:System.IO.FileNotFoundException" /> が発生しました。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;filename&quot; /&gt; is a zero-length string, contains only white space, or contains one or more invalid characters as defined by &lt;see cref=&quot;F:System.IO.Path.InvalidPathChars&quot; /&gt;.">
        <paramref name="filename" /> は長さ 0 の文字列か、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" />で定義される 1 つ以上の正しくない文字を含んでいます。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;filename&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="filename" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.IO.PathTooLongException" vsli:raw="The specified path, file name, or both exceed the system-defined maximum length.">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException" vsli:raw="The specified path is invalid (for example, it is on an unmapped drive).">指定されたパスが正しくありません (たとえば、マップされていないドライブにあるなど)。</exception>
      <exception cref="T:System.IO.IOException" vsli:raw="An I/O error occurred while opening the file.">ファイルを開くときに、I/O エラーが発生しました。</exception>
      <exception cref="T:System.UnauthorizedAccessException" vsli:raw="&lt;paramref name=&quot;filename&quot; /&gt; specified a file that is read-only.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation is not supported on the current platform.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;filename&quot; /&gt; specified a directory.  &#xA;  &#xA; -or-  &#xA;  &#xA; The caller does not have the required permission.">
        <paramref name="filename" /> が読み取り専用のファイルを指定しました。  
または 
この操作は、現在のプラットフォームではサポートされていません。  
または 
 <paramref name="filename" /> がディレクトリを指定しました。  

または - 
呼び出し元に、必要なアクセス許可がありません。</exception>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The file specified in &lt;paramref name=&quot;filename&quot; /&gt; was not found.">
        <paramref name="filename" /> で指定されたファイルが見つかりませんでした。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;filename&quot; /&gt; is in an invalid format.">
        <paramref name="filename" /> の形式が正しくありません。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.Xml.XmlReader)">
      <summary vsli:raw="Loads the XML document from the specified &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">指定した <see cref="T:System.Xml.XmlReader" /> から XML ドキュメントを読み込みます。</summary>
      <param name="reader" vsli:raw="The &lt;see langword=&quot;XmlReader&quot; /&gt; used to feed the XML data into the document.">XML データをドキュメントに送るために使用する <see langword="XmlReader" />。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="There is a load or parse error in the XML. In this case, the document remains empty.">XML で読み込みまたは解析のエラーが発生しました。 この場合は、ドキュメントは空のままです。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.LoadXml(System.String)">
      <summary vsli:raw="Loads the XML document from the specified string.">指定した文字列から XML ドキュメントを読み込みます。</summary>
      <param name="xml" vsli:raw="String containing the XML document to load.">読み込む XML ドキュメントを格納している文字列。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="There is a load or parse error in the XML. In this case, the document remains empty.">XML で読み込みまたは解析のエラーが発生しました。 この場合は、ドキュメントは空のままです。</exception>
    </member>
    <member name="P:System.Xml.XmlDocument.LocalName">
      <summary vsli:raw="Gets the local name of the node.">ノードのローカル名を取得します。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlDocument&quot; /&gt; nodes, the local name is #document.">
        <see langword="XmlDocument" /> ノードの場合、ローカル名は #document です。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.Name">
      <summary vsli:raw="Gets the qualified name of the node.">ノードの限定名を取得します。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlDocument&quot; /&gt; nodes, the name is #document.">
        <see langword="XmlDocument" /> ノードの場合、名前は #document です。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.NameTable">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; associated with this implementation.">この実装に関連付けられている <see cref="T:System.Xml.XmlNameTable" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see langword=&quot;XmlNameTable&quot; /&gt; enabling you to get the atomized version of a string within the document.">ドキュメント内の最小単位に分割された文字列を取得できる <see langword="XmlNameTable" />。</returns>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeChanged">
      <summary vsli:raw="Occurs when the &lt;see cref=&quot;P:System.Xml.XmlNode.Value&quot; /&gt; of a node belonging to this document has been changed.">このドキュメントに属するノードの <see cref="P:System.Xml.XmlNode.Value" /> が変更されると発生します。</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeChanging">
      <summary vsli:raw="Occurs when the &lt;see cref=&quot;P:System.Xml.XmlNode.Value&quot; /&gt; of a node belonging to this document is about to be changed.">このドキュメントに属するノードの <see cref="P:System.Xml.XmlNode.Value" /> が変更される直前に発生します。</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeInserted">
      <summary vsli:raw="Occurs when a node belonging to this document has been inserted into another node.">このドキュメントに属するノードが別のノードに挿入されると発生します。</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeInserting">
      <summary vsli:raw="Occurs when a node belonging to this document is about to be inserted into another node.">このドキュメントに属するノードが別のノードに挿入される直前に発生します。</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeRemoved">
      <summary vsli:raw="Occurs when a node belonging to this document has been removed from its parent.">このドキュメントに属するノードが親から削除されると発生します。</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeRemoving">
      <summary vsli:raw="Occurs when a node belonging to this document is about to be removed from the document.">このドキュメントに属するノードがドキュメントから削除される直前に発生します。</summary>
    </member>
    <member name="P:System.Xml.XmlDocument.NodeType">
      <summary vsli:raw="Gets the type of the current node.">現在のノードの種類を取得します。</summary>
      <returns vsli:raw="The node type. For &lt;see langword=&quot;XmlDocument&quot; /&gt; nodes, this value is XmlNodeType.Document.">ノード型。 <see langword="XmlDocument" /> ノードの場合、この値は XmlNodeType.Document です。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.OwnerDocument">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; to which the current node belongs.">現在のノードが属する <see cref="T:System.Xml.XmlDocument" /> を取得します。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlDocument&quot; /&gt; nodes (&lt;see cref=&quot;P:System.Xml.XmlDocument.NodeType&quot; /&gt; equals XmlNodeType.Document), this property always returns &lt;see langword=&quot;null&quot; /&gt;.">
        <see langword="XmlDocument" /> ノード (<see cref="P:System.Xml.XmlDocument.NodeType" /> が XmlNodeType.Document に等しい) の場合、このプロパティは常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.ParentNode">
      <summary vsli:raw="Gets the parent node of this node (for nodes that can have parents).">このノードの親ノード (親を持つノードの場合) を取得します。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;null&quot; /&gt;.">常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.PreserveWhitespace">
      <summary vsli:raw="Gets or sets a value indicating whether to preserve white space in element content.">要素のコンテンツにある空白を保存するかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to preserve white space; otherwise &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">空白である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; object based on the information in the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;. The reader must be positioned on a node or attribute.">
        <see cref="T:System.Xml.XmlReader" /> 内の情報に基づいて、<see cref="T:System.Xml.XmlNode" /> オブジェクトを作成します。 リーダーは、ノードまたは属性に配置されている必要があります。</summary>
      <param name="reader" vsli:raw="The XML source.">XML ソース。</param>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlNode&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; if no more nodes exist.">新しい <see langword="XmlNode" />。ノードがそれ以上存在しない場合は <see langword="null" />。</returns>
      <exception cref="T:System.NullReferenceException" vsli:raw="The reader is positioned on a node type that does not translate to a valid DOM node (for example, EndElement or EndEntity).">リーダーが、EndElement や EndEntity など、正しい DOM ノードに変換されないノード型に配置されています。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.IO.Stream)">
      <summary vsli:raw="Saves the XML document to the specified stream.">指定したストリームに XML ドキュメントを保存します。</summary>
      <param name="outStream" vsli:raw="The stream to which you want to save.">保存先のストリーム。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations).">操作によって、適切な形式の XML ドキュメントが生成されません (たとえば、ドキュメントの要素がない、XML 宣言が重複している、など)。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.IO.TextWriter)">
      <summary vsli:raw="Saves the XML document to the specified &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;.">指定した <see cref="T:System.IO.TextWriter" /> に XML ドキュメントを保存します。</summary>
      <param name="writer" vsli:raw="The &lt;see langword=&quot;TextWriter&quot; /&gt; to which you want to save.">保存先の <see langword="TextWriter" />。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations).">操作によって、適切な形式の XML ドキュメントが生成されません (たとえば、ドキュメントの要素がない、XML 宣言が重複している、など)。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.String)">
      <summary vsli:raw="Saves the XML document to the specified file. If the specified file exists, this method overwrites it.">指定したファイルに XML ドキュメントを保存します。 指定したファイルが存在する場合は、このメソッドはそれを上書きします。</summary>
      <param name="filename" vsli:raw="The location of the file where you want to save the document.">ドキュメントを保存するファイルの位置。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations).">操作によって、適切な形式の XML ドキュメントが生成されません (たとえば、ドキュメントの要素がない、XML 宣言が重複している、など)。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the XML document to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">指定した <see cref="T:System.Xml.XmlWriter" /> に XML ドキュメントを保存します。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations).">操作によって、適切な形式の XML ドキュメントが生成されません (たとえば、ドキュメントの要素がない、XML 宣言が重複している、など)。</exception>
    </member>
    <member name="P:System.Xml.XmlDocument.SchemaInfo">
      <summary vsli:raw="Returns the Post-Schema-Validation-Infoset (PSVI) of the node.">ノードの PSVI (Post-Schema-Validation-Infoset) を返します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.IXmlSchemaInfo&quot; /&gt; object representing the PSVI of the node.">ノードの PSVI を表す <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.Schemas">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; object associated with this &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;.">この <see cref="T:System.Xml.XmlDocument" /> に関連付けられている <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクトを取得または設定します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; object containing the XML Schema Definition Language (XSD) schemas associated with this &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;; otherwise, an empty &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; object.">この <see cref="T:System.Xml.XmlDocument" /> に関連付けられた、XML スキーマ定義言語 (XSD) のスキーマが格納されている <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクト。それ以外の場合は空の <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)">
      <summary vsli:raw="Validates the &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; against the XML Schema Definition Language (XSD) schemas contained in the &lt;see cref=&quot;P:System.Xml.XmlDocument.Schemas&quot; /&gt; property.">
        <see cref="T:System.Xml.XmlDocument" /> プロパティに格納されている XML スキーマ定義言語 (XSD) スキーマと照合して <see cref="P:System.Xml.XmlDocument.Schemas" /> を検証します。</summary>
      <param name="validationEventHandler" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventHandler&quot; /&gt; object that receives information about schema validation warnings and errors.">スキーマ検証の警告とエラーに関する情報を受け取る <see cref="T:System.Xml.Schema.ValidationEventHandler" /> オブジェクト。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="A schema validation event occurred and no &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventHandler&quot; /&gt; object was specified.">スキーマ検証イベントが発生しましたが、<see cref="T:System.Xml.Schema.ValidationEventHandler" /> オブジェクトが指定されていませんでした。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)">
      <summary vsli:raw="Validates the &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; object specified against the XML Schema Definition Language (XSD) schemas in the &lt;see cref=&quot;P:System.Xml.XmlDocument.Schemas&quot; /&gt; property.">
        <see cref="P:System.Xml.XmlDocument.Schemas" /> プロパティの XML スキーマ定義言語 (XSD) スキーマと照合し、指定された <see cref="T:System.Xml.XmlNode" /> オブジェクトを検証します。</summary>
      <param name="validationEventHandler" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventHandler&quot; /&gt; object that receives information about schema validation warnings and errors.">スキーマ検証の警告とエラーに関する情報を受け取る <see cref="T:System.Xml.Schema.ValidationEventHandler" /> オブジェクト。</param>
      <param name="nodeToValidate" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; object created from an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; to validate.">
        <see cref="T:System.Xml.XmlDocument" /> から作成された、検証対象の <see cref="T:System.Xml.XmlNode" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; object parameter was not created from an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;.">
        <see cref="T:System.Xml.XmlNode" /> オブジェクト パラメーターが <see cref="T:System.Xml.XmlDocument" /> から作成されていません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; object parameter is not an element, attribute, document fragment, or the root node.">
        <see cref="T:System.Xml.XmlNode" /> オブジェクト パラメーターが要素、属性、ドキュメント フラグメント、ルート ノードのいずれでもありません。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="A schema validation event occurred and no &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventHandler&quot; /&gt; object was specified.">スキーマ検証イベントが発生しましたが、<see cref="T:System.Xml.Schema.ValidationEventHandler" /> オブジェクトが指定されていませんでした。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves all the children of the &lt;see langword=&quot;XmlDocument&quot; /&gt; node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">指定した <see cref="T:System.Xml.XmlWriter" /> に <see langword="XmlDocument" /> ノードのすべての子を保存します。</summary>
      <param name="xw" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the &lt;see langword=&quot;XmlDocument&quot; /&gt; node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">指定した <see cref="T:System.Xml.XmlWriter" /> に <see langword="XmlDocument" /> ノードを保存します。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlDocument.XmlResolver">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; to use for resolving external resources.">外部リソースを解決するために使用する <see cref="T:System.Xml.XmlResolver" /> を設定します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlResolver&quot; /&gt; to use.  &#xA;  &#xA; In version 1.1 of the.NET Framework, the caller must be fully trusted in order to specify an &lt;see langword=&quot;XmlResolver&quot; /&gt;.">使用する <see langword="XmlResolver" />。  
.NET Framework Version 1.1 の場合、完全に信頼されている呼び出し元だけが <see langword="XmlResolver" /> を指定できます。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="This property is set to &lt;see langword=&quot;null&quot; /&gt; and an external DTD or entity is encountered.">このプロパティは <see langword="null" /> に設定され、外部 DTD または外部エンティティが検出されました。</exception>
    </member>
    <member name="T:System.Xml.XmlDocumentFragment">
      <summary vsli:raw="Represents a lightweight object that is useful for tree insert operations.">ツリー挿入操作に使用できる、簡易オブジェクトを表します。</summary>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.#ctor(System.Xml.XmlDocument)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlDocumentFragment&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlDocumentFragment" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="ownerDocument" vsli:raw="The XML document that is the source of the fragment.">フラグメントのソースである XML ドキュメント。</param>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node.">このノードの複製を作成します。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself.">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。</param>
      <returns vsli:raw="The cloned node.">クローンとして作成されたノード。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.InnerXml">
      <summary vsli:raw="Gets or sets the markup representing the children of this node.">このノードの子を表すマークアップを取得または設定します。</summary>
      <returns vsli:raw="The markup of the children of this node.">このノードの子のマークアップ。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML specified when setting this property is not well-formed.">このプロパティの設定時に指定される XML は、整形式ではありません。</exception>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.LocalName">
      <summary vsli:raw="Gets the local name of the node.">ノードのローカル名を取得します。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlDocumentFragment&quot; /&gt; nodes, the local name is &lt;see langword=&quot;#document-fragment&quot; /&gt;.">
        <see langword="XmlDocumentFragment" /> ノードの場合、ローカル名は <see langword="#document-fragment" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.Name">
      <summary vsli:raw="Gets the qualified name of the node.">ノードの限定名を取得します。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlDocumentFragment&quot; /&gt;, the name is &lt;see langword=&quot;#document-fragment&quot; /&gt;.">
        <see langword="XmlDocumentFragment" /> の場合、名前は <see langword="#document-fragment" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.NodeType">
      <summary vsli:raw="Gets the type of the current node.">現在のノードの種類を取得します。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlDocumentFragment&quot; /&gt; nodes, this value is XmlNodeType.DocumentFragment.">
        <see langword="XmlDocumentFragment" /> ノードの場合、この値は XmlNodeType.DocumentFragment です。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.OwnerDocument">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; to which this node belongs.">このノードが属する <see cref="T:System.Xml.XmlDocument" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlDocument&quot; /&gt; to which this node belongs.">このノードが属する <see langword="XmlDocument" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.ParentNode">
      <summary vsli:raw="Gets the parent of this node (for nodes that can have parents).">このノードの親 (親を持つノードの場合) を取得します。</summary>
      <returns vsli:raw="The parent of this node.  &#xA;  &#xA; For &lt;see langword=&quot;XmlDocumentFragment&quot; /&gt; nodes, this property is always &lt;see langword=&quot;null&quot; /&gt;.">このノードの親。  
<see langword="XmlDocumentFragment" /> ノードの場合、このプロパティは常に <see langword="null" /> です。</returns>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves all the children of the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">指定した <see cref="T:System.Xml.XmlWriter" /> にノードのすべての子を保存します。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">指定した <see cref="T:System.Xml.XmlWriter" /> にノードを保存します。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlDocumentType">
      <summary vsli:raw="Represents the document type declaration.">ドキュメント型宣言を表します。</summary>
    </member>
    <member name="M:System.Xml.XmlDocumentType.#ctor(System.String,System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlDocumentType&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlDocumentType" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="The qualified name; see the &lt;see cref=&quot;P:System.Xml.XmlDocumentType.Name&quot; /&gt; property.">修飾名。<see cref="P:System.Xml.XmlDocumentType.Name" /> プロパティを参照してください。</param>
      <param name="publicId" vsli:raw="The public identifier; see the &lt;see cref=&quot;P:System.Xml.XmlDocumentType.PublicId&quot; /&gt; property.">公開識別子。<see cref="P:System.Xml.XmlDocumentType.PublicId" /> プロパティを参照してください。</param>
      <param name="systemId" vsli:raw="The system identifier; see the &lt;see cref=&quot;P:System.Xml.XmlDocumentType.SystemId&quot; /&gt; property.">システム識別子。<see cref="P:System.Xml.XmlDocumentType.SystemId" /> プロパティを参照してください。</param>
      <param name="internalSubset" vsli:raw="The DTD internal subset; see the &lt;see cref=&quot;P:System.Xml.XmlDocumentType.InternalSubset&quot; /&gt; property.">DTD 内部サブセット。<see cref="P:System.Xml.XmlDocumentType.InternalSubset" /> プロパティを参照してください。</param>
      <param name="doc" vsli:raw="The parent document.">親ドキュメント。</param>
    </member>
    <member name="M:System.Xml.XmlDocumentType.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node.">このノードの複製を作成します。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself. For document type nodes, the cloned node always includes the subtree, regardless of the parameter setting.">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。 ドキュメント型ノードの場合、パラメーターの設定に関係なく、クローンとして作成されたノードには常にサブツリーが含まれます。</param>
      <returns vsli:raw="The cloned node.">クローンとして作成されたノード。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Entities">
      <summary vsli:raw="Gets the collection of &lt;see cref=&quot;T:System.Xml.XmlEntity&quot; /&gt; nodes declared in the document type declaration.">ドキュメント型宣言で宣言された <see cref="T:System.Xml.XmlEntity" /> ノードのコレクションを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNamedNodeMap&quot; /&gt; containing the &lt;see langword=&quot;XmlEntity&quot; /&gt; nodes. The returned &lt;see langword=&quot;XmlNamedNodeMap&quot; /&gt; is read-only.">
        <see langword="XmlEntity" /> ノードを格納している <see cref="T:System.Xml.XmlNamedNodeMap" />。 返された <see langword="XmlNamedNodeMap" /> は読み取り専用です。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.InternalSubset">
      <summary vsli:raw="Gets the value of the document type definition (DTD) internal subset on the DOCTYPE declaration.">DOCTYPE 宣言の文書型定義 (DTD : Document Type Definition) 内部サブセットの値を取得します。</summary>
      <returns vsli:raw="The DTD internal subset on the DOCTYPE. If there is no DTD internal subset, String.Empty is returned.">DOCTYPE の DTD 内部サブセット。 DTD 内部サブセットがない場合は、String.Empty が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the node is read-only.">ノードが読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  &#xA;  &#xA; Because DocumentType nodes are read-only, this property always returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />ノードが読み取り専用の場合は。それ以外<see langword="false" />の場合は。  
DocumentType ノードは読み取り専用であるため、このプロパティは常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.LocalName">
      <summary vsli:raw="Gets the local name of the node.">ノードのローカル名を取得します。</summary>
      <returns vsli:raw="For DocumentType nodes, this property returns the name of the document type.">DocumentType ノードの場合、このプロパティはドキュメント型の名前を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Name">
      <summary vsli:raw="Gets the qualified name of the node.">ノードの限定名を取得します。</summary>
      <returns vsli:raw="For DocumentType nodes, this property returns the name of the document type.">DocumentType ノードの場合、このプロパティはドキュメント型の名前を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.NodeType">
      <summary vsli:raw="Gets the type of the current node.">現在のノードの種類を取得します。</summary>
      <returns vsli:raw="For DocumentType nodes, this value is XmlNodeType.DocumentType.">DocumentType ノードの場合、この値は XmlNodeType.DocumentType です。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Notations">
      <summary vsli:raw="Gets the collection of &lt;see cref=&quot;T:System.Xml.XmlNotation&quot; /&gt; nodes present in the document type declaration.">ドキュメント型宣言に存在する <see cref="T:System.Xml.XmlNotation" /> ノードのコレクションを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNamedNodeMap&quot; /&gt; containing the &lt;see langword=&quot;XmlNotation&quot; /&gt; nodes. The returned &lt;see langword=&quot;XmlNamedNodeMap&quot; /&gt; is read-only.">
        <see langword="XmlNotation" /> ノードを格納している <see cref="T:System.Xml.XmlNamedNodeMap" />。 返された <see langword="XmlNamedNodeMap" /> は読み取り専用です。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.PublicId">
      <summary vsli:raw="Gets the value of the public identifier on the DOCTYPE declaration.">DOCTYPE 宣言のパブリック ID の値を取得します。</summary>
      <returns vsli:raw="The public identifier on the DOCTYPE. If there is no public identifier, &lt;see langword=&quot;null&quot; /&gt; is returned.">DOCTYPE のパブリック ID。 パブリック ID がない場合は、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.SystemId">
      <summary vsli:raw="Gets the value of the system identifier on the DOCTYPE declaration.">DOCTYPE 宣言のシステム ID の値を取得します。</summary>
      <returns vsli:raw="The system identifier on the DOCTYPE. If there is no system identifier, &lt;see langword=&quot;null&quot; /&gt; is returned.">DOCTYPE のシステム ID。 システム ID がない場合は、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="M:System.Xml.XmlDocumentType.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves all the children of the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;. For &lt;see langword=&quot;XmlDocumentType&quot; /&gt; nodes, this method has no effect.">指定した <see cref="T:System.Xml.XmlWriter" /> にノードのすべての子を保存します。 <see langword="XmlDocumentType" /> ノードの場合、このメソッドは無効です。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlDocumentType.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">指定した <see cref="T:System.Xml.XmlWriter" /> にノードを保存します。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlElement">
      <summary vsli:raw="Represents an element.">要素を表します。</summary>
    </member>
    <member name="M:System.Xml.XmlElement.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlElement&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlElement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="prefix" vsli:raw="The namespace prefix; see the &lt;see cref=&quot;P:System.Xml.XmlElement.Prefix&quot; /&gt; property.">名前空間プリフィックス。<see cref="P:System.Xml.XmlElement.Prefix" /> プロパティのトピックを参照してください。</param>
      <param name="localName" vsli:raw="The local name; see the &lt;see cref=&quot;P:System.Xml.XmlElement.LocalName&quot; /&gt; property.">ローカル名。<see cref="P:System.Xml.XmlElement.LocalName" /> プロパティのトピックを参照してください。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI; see the &lt;see cref=&quot;P:System.Xml.XmlElement.NamespaceURI&quot; /&gt; property.">名前空間 URI。<see cref="P:System.Xml.XmlElement.NamespaceURI" /> プロパティのトピックを参照してください。</param>
      <param name="doc" vsli:raw="The parent XML document.">親 XML ドキュメント。</param>
    </member>
    <member name="P:System.Xml.XmlElement.Attributes">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Xml.XmlAttributeCollection&quot; /&gt; containing the list of attributes for this node.">このノードの属性の一覧を格納している <see cref="T:System.Xml.XmlAttributeCollection" /> を取得します。</summary>
      <returns vsli:raw="&lt;see cref=&quot;T:System.Xml.XmlAttributeCollection&quot; /&gt; containing the list of attributes for this node.">このノードの属性の一覧を格納している <see cref="T:System.Xml.XmlAttributeCollection" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node.">このノードの複製を作成します。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself (and its attributes if the node is an &lt;see langword=&quot;XmlElement&quot; /&gt;).">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノード (ノードが <see langword="XmlElement" /> の場合はその属性も含む) だけのクローンを作成する場合は <see langword="false" />。</param>
      <returns vsli:raw="The cloned node.">クローンとして作成されたノード。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttribute(System.String)">
      <summary vsli:raw="Returns the value for the attribute with the specified name.">指定した名前の属性の値を返します。</summary>
      <param name="name" vsli:raw="The name of the attribute to retrieve. This is a qualified name. It is matched against the &lt;see langword=&quot;Name&quot; /&gt; property of the matching node.">取得する属性の名前。 これは限定名です。 一致するノードの <see langword="Name" /> プロパティに一致します。</param>
      <returns vsli:raw="The value of the specified attribute. An empty string is returned if a matching attribute is not found or if the attribute does not have a specified or default value.">指定した属性の値。 一致する属性が見つからない場合、属性に指定した値または既定値がない場合は、空の文字列を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttribute(System.String,System.String)">
      <summary vsli:raw="Returns the value for the attribute with the specified local name and namespace URI.">指定したローカル名および名前空間 URI の属性の値を返します。</summary>
      <param name="localName" vsli:raw="The local name of the attribute to retrieve.">取得する属性のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute to retrieve.">取得する属性の名前空間 URI。</param>
      <returns vsli:raw="The value of the specified attribute. An empty string is returned if a matching attribute is not found or if the attribute does not have a specified or default value.">指定した属性の値。 一致する属性が見つからない場合、属性に指定した値または既定値がない場合は、空の文字列を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttributeNode(System.String)">
      <summary vsli:raw="Returns the &lt;see langword=&quot;XmlAttribute&quot; /&gt; with the specified name.">指定した名前の <see langword="XmlAttribute" /> を返します。</summary>
      <param name="name" vsli:raw="The name of the attribute to retrieve. This is a qualified name. It is matched against the &lt;see langword=&quot;Name&quot; /&gt; property of the matching node.">取得する属性の名前。 これは限定名です。 一致するノードの <see langword="Name" /> プロパティに一致します。</param>
      <returns vsli:raw="The specified &lt;see langword=&quot;XmlAttribute&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; if a matching attribute was not found.">指定した <see langword="XmlAttribute" />。一致する属性が見つからなかった場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttributeNode(System.String,System.String)">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt; with the specified local name and namespace URI.">指定したローカル名および名前空間 URI の <see cref="T:System.Xml.XmlAttribute" /> を返します。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">属性のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute.">属性の名前空間 URI。</param>
      <returns vsli:raw="The specified &lt;see langword=&quot;XmlAttribute&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; if a matching attribute was not found.">指定した <see langword="XmlAttribute" />。一致する属性が見つからなかった場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetElementsByTagName(System.String)">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Xml.XmlNodeList&quot; /&gt; containing a list of all descendant elements that match the specified &lt;see cref=&quot;P:System.Xml.XmlElement.Name&quot; /&gt;.">指定した <see cref="P:System.Xml.XmlElement.Name" /> に一致するすべての子孫の要素のリストを格納している <see cref="T:System.Xml.XmlNodeList" /> を返します。</summary>
      <param name="name" vsli:raw="The name tag to match. This is a qualified name. It is matched against the &lt;see langword=&quot;Name&quot; /&gt; property of the matching node. The asterisk (*) is a special value that matches all tags.">一致する名前タグ。 これは限定名です。 一致するノードの <see langword="Name" /> プロパティに一致します。 アスタリスク (*) は、すべてのタグに一致する特殊値です。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNodeList&quot; /&gt; containing a list of all matching nodes. The list is empty if there are no matching nodes.">一致しているすべてのノードのリストを格納している <see cref="T:System.Xml.XmlNodeList" />。 一致するノードが存在しない場合は、リストは空になります。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetElementsByTagName(System.String,System.String)">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Xml.XmlNodeList&quot; /&gt; containing a list of all descendant elements that match the specified &lt;see cref=&quot;P:System.Xml.XmlElement.LocalName&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlElement.NamespaceURI&quot; /&gt;.">指定した <see cref="P:System.Xml.XmlElement.LocalName" /> および <see cref="P:System.Xml.XmlElement.NamespaceURI" /> に一致するすべての子孫の要素のリストを格納している <see cref="T:System.Xml.XmlNodeList" /> を返します。</summary>
      <param name="localName" vsli:raw="The local name to match. The asterisk (*) is a special value that matches all tags.">一致するローカル名。 アスタリスク (*) は、すべてのタグに一致する特殊値です。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI to match.">一致する名前空間 URI。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNodeList&quot; /&gt; containing a list of all matching nodes. The list is empty if there are no matching nodes.">一致しているすべてのノードのリストを格納している <see cref="T:System.Xml.XmlNodeList" />。 一致するノードが存在しない場合は、リストは空になります。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.HasAttribute(System.String)">
      <summary vsli:raw="Determines whether the current node has an attribute with the specified name.">現在のノードに指定した名前の属性があるかどうかを確認します。</summary>
      <param name="name" vsli:raw="The name of the attribute to find. This is a qualified name. It is matched against the &lt;see langword=&quot;Name&quot; /&gt; property of the matching node.">検索する属性の名前。 これは限定名です。 一致するノードの <see langword="Name" /> プロパティに一致します。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node has the specified attribute; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のノードに指定した属性がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.HasAttribute(System.String,System.String)">
      <summary vsli:raw="Determines whether the current node has an attribute with the specified local name and namespace URI.">指定したローカル名および名前空間 URI の属性が現在のノードにあるかどうかを確認します。</summary>
      <param name="localName" vsli:raw="The local name of the attribute to find.">検索する属性のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute to find.">検索する属性の名前空間 URI。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node has the specified attribute; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のノードに指定した属性がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.HasAttributes">
      <summary vsli:raw="Gets a &lt;see langword=&quot;boolean&quot; /&gt; value indicating whether the current node has any attributes.">現在のノードが属性を持っているかどうかを示す <see langword="boolean" /> 値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node has attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のノードが属性を持っている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.InnerText">
      <summary vsli:raw="Gets or sets the concatenated values of the node and all its children.">ノードとそのすべての子の連結している値を取得または設定します。</summary>
      <returns vsli:raw="The concatenated values of the node and all its children.">ノードとすべての子の連結された値。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.InnerXml">
      <summary vsli:raw="Gets or sets the markup representing just the children of this node.">このノードの子だけを表すマークアップを取得または設定します。</summary>
      <returns vsli:raw="The markup of the children of this node.">このノードの子のマークアップ。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML specified when setting this property is not well-formed.">このプロパティの設定時に指定される XML は、整形式ではありません。</exception>
    </member>
    <member name="P:System.Xml.XmlElement.IsEmpty">
      <summary vsli:raw="Gets or sets the tag format of the element.">要素のタグ形式を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is to be serialized in the short tag format &quot;&amp;lt;item/&amp;gt;&quot;; &lt;see langword=&quot;false&quot; /&gt; for the long format &quot;&amp;lt;item&amp;gt;&amp;lt;/item&amp;gt;&quot;.  &#xA;  &#xA; When setting this property, if set to &lt;see langword=&quot;true&quot; /&gt;, the children of the element are removed and the element is serialized in the short tag format. If set to &lt;see langword=&quot;false&quot; /&gt;, the value of the property is changed (regardless of whether or not the element has content); if the element is empty, it is serialized in the long format.  &#xA;  &#xA; This property is a Microsoft extension to the Document Object Model (DOM).">
        <see langword="true" />要素を短いタグ形式でシリアル化する場合は。 "&lt;item/&gt;";&lt;&gt;長い形式の "item&lt;/item&gt;"。 <see langword="false" />  
このプロパティを設定する場合、<see langword="true" /> に設定すると、要素の子が削除され、要素は短いタグ形式でシリアル化されます。 <see langword="false" /> に設定した場合は、要素に内容があるかどうかにかかわらず、プロパティの値は変更されます。要素が空の場合は、長い形式でシリアル化されます。  
このプロパティは、ドキュメント オブジェクト モデル (DOM) の Microsoft 拡張機能です。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.LocalName">
      <summary vsli:raw="Gets the local name of the current node.">現在のノードのローカル名を取得します。</summary>
      <returns vsli:raw="The name of the current node with the prefix removed. For example, &lt;see langword=&quot;LocalName&quot; /&gt; is book for the element &amp;lt;bk:book&amp;gt;.">プリフィックスを削除した現在のノードの名前。 たとえば、 <see langword="LocalName" />は要素&lt;bk: book&gt;の book です。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.Name">
      <summary vsli:raw="Gets the qualified name of the node.">ノードの限定名を取得します。</summary>
      <returns vsli:raw="The qualified name of the node. For &lt;see langword=&quot;XmlElement&quot; /&gt; nodes, this is the tag name of the element.">ノードの限定名。 <see langword="XmlElement" /> ノードの場合、これは要素のタグ名です。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.NamespaceURI">
      <summary vsli:raw="Gets the namespace URI of this node.">このノードの名前空間 URI を取得します。</summary>
      <returns vsli:raw="The namespace URI of this node. If there is no namespace URI, this property returns String.Empty.">このノードの名前空間 URI。 名前空間 URI がない場合、このプロパティは String.Empty を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.NextSibling">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; immediately following this element.">この要素の直後の <see cref="T:System.Xml.XmlNode" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlNode&quot; /&gt; immediately following this element.">この要素の直後の <see langword="XmlNode" />。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.NodeType">
      <summary vsli:raw="Gets the type of the current node.">現在のノードの種類を取得します。</summary>
      <returns vsli:raw="The node type. For &lt;see langword=&quot;XmlElement&quot; /&gt; nodes, this value is XmlNodeType.Element.">ノード型。 <see langword="XmlElement" /> ノードの場合、この値は XmlNodeType.Element です。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.OwnerDocument">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; to which this node belongs.">このノードが属する <see cref="T:System.Xml.XmlDocument" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlDocument&quot; /&gt; to which this element belongs.">この要素が属する <see langword="XmlDocument" />。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.ParentNode">
      <summary vsli:raw="Gets the parent of this node (for nodes that can have parents).">このノードの親 (親を持つノードの場合) を取得します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlNode&quot; /&gt; that is the parent of the current node. If a node has just been created and not yet added to the tree, or if it has been removed from the tree, the parent is &lt;see langword=&quot;null&quot; /&gt;. For all other nodes, the value returned depends on the &lt;see cref=&quot;P:System.Xml.XmlNode.NodeType&quot; /&gt; of the node. The following table describes the possible return values for the &lt;see langword=&quot;ParentNode&quot; /&gt; property.">現在のノードの親である <see langword="XmlNode" />。 ノードが作成された直後でまだツリーに追加されていない場合や、ノードがツリーから削除された場合、親は <see langword="null" /> です。 他のすべてのノードについては、返される値はノードの <see cref="P:System.Xml.XmlNode.NodeType" /> によって異なります。 <see langword="ParentNode" /> プロパティの有効な戻り値を次の表に示します。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.Prefix">
      <summary vsli:raw="Gets or sets the namespace prefix of this node.">このノードの名前空間プリフィックスを取得または設定します。</summary>
      <returns vsli:raw="The namespace prefix of this node. If there is no prefix, this property returns String.Empty.">このノードの名前空間プリフィックス。 プリフィックスがない場合、このプロパティは String.Empty を返します。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="This node is read-only.">このノードは読み取り専用です。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The specified prefix contains an invalid character.  &#xA;  &#xA; The specified prefix is malformed.  &#xA;  &#xA; The namespaceURI of this node is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; The specified prefix is &quot;xml&quot; and the namespaceURI of this node is different from http://www.w3.org/XML/1998/namespace.">指定したプレフィックスに無効な文字が含まれています。  
指定されたプリフィックスの書式が正しくありません。  
このノードの namespaceURI が <see langword="null" /> です。  
指定したプレフィックスは "xml" で、このノードの namespaceURI が http://www.w3.org/XML/1998/namespace と異なります。</exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAll">
      <summary vsli:raw="Removes all specified attributes and children of the current node. Default attributes are not removed.">現在のノードのすべての指定した属性および子を削除します。 既定の属性は削除されません。</summary>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAllAttributes">
      <summary vsli:raw="Removes all specified attributes from the element. Default attributes are not removed.">要素からすべての指定した属性を削除します。 既定の属性は削除されません。</summary>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttribute(System.String)">
      <summary vsli:raw="Removes an attribute by name.">名前によって属性を削除します。</summary>
      <param name="name" vsli:raw="The name of the attribute to remove. This is a qualified name. It is matched against the &lt;see langword=&quot;Name&quot; /&gt; property of the matching node.">削除する属性の名前。これは限定名です。 一致するノードの <see langword="Name" /> プロパティに一致します。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The node is read-only.">ノードは読み取り専用です。</exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttribute(System.String,System.String)">
      <summary vsli:raw="Removes an attribute with the specified local name and namespace URI. (If the removed attribute has a default value, it is immediately replaced).">指定したローカル名および名前空間 URI の属性を削除します。 削除された属性に既定値がある場合は、すぐに置き換えられます。</summary>
      <param name="localName" vsli:raw="The local name of the attribute to remove.">削除する属性のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute to remove.">削除する属性の名前空間 URI。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The node is read-only.">ノードは読み取り専用です。</exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeAt(System.Int32)">
      <summary vsli:raw="Removes the attribute node with the specified index from the element. (If the removed attribute has a default value, it is immediately replaced).">指定したインデックスの属性ノードを要素から削除します。 削除された属性に既定値がある場合は、すぐに置き換えられます。</summary>
      <param name="i" vsli:raw="The index of the node to remove. The first node has index 0.">削除するノードのインデックス。 最初のノードのインデックスは 0 です。</param>
      <returns vsli:raw="The attribute node removed or &lt;see langword=&quot;null&quot; /&gt; if there is no node at the given index.">削除された属性ノード。指定したインデックス位置にノードがない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeNode(System.String,System.String)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt; specified by the local name and namespace URI. (If the removed attribute has a default value, it is immediately replaced).">ローカル名および名前空間 URI で指定された <see cref="T:System.Xml.XmlAttribute" /> を削除します。 削除された属性に既定値がある場合は、すぐに置き換えられます。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">属性のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute.">属性の名前空間 URI。</param>
      <returns vsli:raw="The removed &lt;see langword=&quot;XmlAttribute&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; if the &lt;see langword=&quot;XmlElement&quot; /&gt; does not have a matching attribute node.">削除された <see langword="XmlAttribute" />。<see langword="null" /> に一致する属性ノードがない場合は <see langword="XmlElement" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="This node is read-only.">このノードは読み取り専用です。</exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeNode(System.Xml.XmlAttribute)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt;.">指定した <see cref="T:System.Xml.XmlAttribute" /> を削除します。</summary>
      <param name="oldAttr" vsli:raw="The &lt;see langword=&quot;XmlAttribute&quot; /&gt; node to remove. If the removed attribute has a default value, it is immediately replaced.">削除する <see langword="XmlAttribute" /> ノード。 削除された属性に既定値がある場合は、すぐに置き換えられます。</param>
      <returns vsli:raw="The removed &lt;see langword=&quot;XmlAttribute&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; if &lt;paramref name=&quot;oldAttr&quot; /&gt; is not an attribute node of the &lt;see langword=&quot;XmlElement&quot; /&gt;.">削除された <see langword="XmlAttribute" />。<paramref name="oldAttr" /> が <see langword="null" /> の属性ノードでない場合は <see langword="XmlElement" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="This node is read-only.">このノードは読み取り専用です。</exception>
    </member>
    <member name="P:System.Xml.XmlElement.SchemaInfo">
      <summary vsli:raw="Gets the post schema validation infoset that has been assigned to this node as a result of schema validation.">スキーマ検証の結果、このノードに割り当てられているスキーマ検証後の infoset を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.IXmlSchemaInfo&quot; /&gt; object containing the post schema validation infoset of this node.">このノードのスキーマ検証後の infoset が格納された <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttribute(System.String,System.String)">
      <summary vsli:raw="Sets the value of the attribute with the specified name.">指定した名前の属性の値を設定します。</summary>
      <param name="name" vsli:raw="The name of the attribute to create or alter. This is a qualified name. If the name contains a colon it is parsed into prefix and local name components.">作成または変更する属性の名前。 これは限定名です。 名前にコロンが含まれている場合、その名前はプリフィックスとローカル名コンポーネントに解析されます。</param>
      <param name="value" vsli:raw="The value to set for the attribute.">属性に設定する値。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The specified name contains an invalid character.">指定した名前に無効な文字が含まれています。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The node is read-only.">ノードは読み取り専用です。</exception>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttribute(System.String,System.String,System.String)">
      <summary vsli:raw="Sets the value of the attribute with the specified local name and namespace URI.">指定したローカル名および名前空間 URI の属性の値を設定します。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">属性のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute.">属性の名前空間 URI。</param>
      <param name="value" vsli:raw="The value to set for the attribute.">属性に設定する値。</param>
      <returns vsli:raw="The attribute value.">属性値。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttributeNode(System.String,System.String)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt;.">指定した <see cref="T:System.Xml.XmlAttribute" /> を追加します。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">属性のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute.">属性の名前空間 URI。</param>
      <returns vsli:raw="The &lt;see langword=&quot;XmlAttribute&quot; /&gt; to add.">追加する <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt;.">指定した <see cref="T:System.Xml.XmlAttribute" /> を追加します。</summary>
      <param name="newAttr" vsli:raw="The &lt;see langword=&quot;XmlAttribute&quot; /&gt; node to add to the attribute collection for this element.">この要素の属性コレクションに追加する <see langword="XmlAttribute" /> ノード。</param>
      <returns vsli:raw="If the attribute replaces an existing attribute with the same name, the old &lt;see langword=&quot;XmlAttribute&quot; /&gt; is returned; otherwise, &lt;see langword=&quot;null&quot; /&gt; is returned.">属性によって同じ名前の既存の属性が置換される場合は、古い <see langword="XmlAttribute" /> が返されます。それ以外の場合は、<see langword="null" /> が返されます。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;newAttr&quot; /&gt; was created from a different document than the one that created this node. Or this node is read-only.">
        <paramref name="newAttr" /> は、このノードを作成したドキュメントとは異なるドキュメントから作成されました。 または、このノードが読み取り専用です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;newAttr&quot; /&gt; is already an attribute of another &lt;see langword=&quot;XmlElement&quot; /&gt; object. You must explicitly clone &lt;see langword=&quot;XmlAttribute&quot; /&gt; nodes to re-use them in other &lt;see langword=&quot;XmlElement&quot; /&gt; objects.">
        <paramref name="newAttr" /> は、既に別の <see langword="XmlElement" /> オブジェクトの属性になっています。 <see langword="XmlAttribute" /> ノードのクローンを明示的に作成し、それらのクローンを他の <see langword="XmlElement" /> オブジェクトで再利用する必要があります。</exception>
    </member>
    <member name="M:System.Xml.XmlElement.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves all the children of the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">指定した <see cref="T:System.Xml.XmlWriter" /> にノードのすべての子を保存します。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the current node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">指定した <see cref="T:System.Xml.XmlWriter" /> に現在のノードを保存します。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlEntity">
      <summary vsli:raw="Represents an entity declaration, such as &amp;lt;!ENTITY... &amp;gt;.">エンティティの宣言を表します (&lt;!ENTITY... &gt; など)。</summary>
    </member>
    <member name="P:System.Xml.XmlEntity.BaseURI">
      <summary vsli:raw="Gets the base Uniform Resource Identifier (URI) of the current node.">現在のノードのベース URI (Uniform Resource Identifier) を取得します。</summary>
      <returns vsli:raw="The location from which the node was loaded.">読み込まれたノードの読み込み元の場所。</returns>
    </member>
    <member name="M:System.Xml.XmlEntity.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node. Entity nodes cannot be cloned. Calling this method on an &lt;see cref=&quot;T:System.Xml.XmlEntity&quot; /&gt; object throws an exception.">このノードの複製を作成します。 エンティティ ノードのクローンは作成できません。 <see cref="T:System.Xml.XmlEntity" /> オブジェクトでこのメソッドを呼び出すと、例外がスローされます。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself.">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。</param>
      <returns vsli:raw="A copy of the &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; from which the method is called.">メソッドの呼び出し元の <see cref="T:System.Xml.XmlNode" /> のコピー。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Entity nodes cannot be cloned. Calling this method on an &lt;see cref=&quot;T:System.Xml.XmlEntity&quot; /&gt; object throws an exception.">エンティティ ノードのクローンは作成できません。 <see cref="T:System.Xml.XmlEntity" /> オブジェクトでこのメソッドを呼び出すと、例外がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlEntity.InnerText">
      <summary vsli:raw="Gets the concatenated values of the entity node and all its children.">エンティティ ノードとそのすべての子の連結された値を取得します。</summary>
      <returns vsli:raw="The concatenated values of the node and all its children.">ノードとすべての子の連結された値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Attempting to set the property.">プロパティを設定しようとしています。</exception>
    </member>
    <member name="P:System.Xml.XmlEntity.InnerXml">
      <summary vsli:raw="Gets the markup representing the children of this node.">このノードの子を表すマークアップを取得します。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlEntity&quot; /&gt; nodes, String.Empty is returned.">
        <see langword="XmlEntity" /> ノードの場合は、String.Empty が返されます。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Attempting to set the property.">プロパティを設定しようとしています。</exception>
    </member>
    <member name="P:System.Xml.XmlEntity.IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the node is read-only.">ノードが読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  &#xA;  &#xA; Because &lt;see langword=&quot;XmlEntity&quot; /&gt; nodes are read-only, this property always returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />ノードが読み取り専用の場合は。それ以外<see langword="false" />の場合は。  
<see langword="XmlEntity" /> ノードは読み取り専用であるため、このプロパティは常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.LocalName">
      <summary vsli:raw="Gets the name of the node without the namespace prefix.">ノードの名前を名前空間プリフィックスを付けずに取得します。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlEntity&quot; /&gt; nodes, this property returns the name of the entity.">
        <see langword="XmlEntity" /> ノードの場合、このプロパティはエンティティの名前を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.Name">
      <summary vsli:raw="Gets the name of the node.">ノードの名前を取得します。</summary>
      <returns vsli:raw="The name of the entity.">エンティティの名前。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.NodeType">
      <summary vsli:raw="Gets the type of the node.">ノードの種類を取得します。</summary>
      <returns vsli:raw="The node type. For &lt;see langword=&quot;XmlEntity&quot; /&gt; nodes, the value is XmlNodeType.Entity.">ノード型。 <see langword="XmlEntity" /> ノードの場合、値は XmlNodeType.Entity です。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.NotationName">
      <summary vsli:raw="Gets the name of the optional NDATA attribute on the entity declaration.">エンティティ宣言のオプションの NDATA 属性の名前を取得します。</summary>
      <returns vsli:raw="The name of the NDATA attribute. If there is no NDATA, &lt;see langword=&quot;null&quot; /&gt; is returned.">NDATA 属性の名前。 NDATA がない場合は、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.OuterXml">
      <summary vsli:raw="Gets the markup representing this node and all its children.">このノードとそのすべての子を表すマークアップを取得します。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlEntity&quot; /&gt; nodes, String.Empty is returned.">
        <see langword="XmlEntity" /> ノードの場合は、String.Empty が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.PublicId">
      <summary vsli:raw="Gets the value of the public identifier on the entity declaration.">エンティティ宣言のパブリック ID の値を取得します。</summary>
      <returns vsli:raw="The public identifier on the entity. If there is no public identifier, &lt;see langword=&quot;null&quot; /&gt; is returned.">エンティティのパブリック ID。 パブリック ID がない場合は、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.SystemId">
      <summary vsli:raw="Gets the value of the system identifier on the entity declaration.">エンティティ宣言のシステム ID の値を取得します。</summary>
      <returns vsli:raw="The system identifier on the entity. If there is no system identifier, &lt;see langword=&quot;null&quot; /&gt; is returned.">エンティティのシステム ID。 システム ID がない場合は、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="M:System.Xml.XmlEntity.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves all the children of the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;. For &lt;see langword=&quot;XmlEntity&quot; /&gt; nodes, this method has no effect.">指定した <see cref="T:System.Xml.XmlWriter" /> にノードのすべての子を保存します。 <see langword="XmlEntity" /> ノードの場合、このメソッドは無効です。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlEntity.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;. For &lt;see langword=&quot;XmlEntity&quot; /&gt; nodes, this method has no effect.">指定した <see cref="T:System.Xml.XmlWriter" /> にノードを保存します。 <see langword="XmlEntity" /> ノードの場合、このメソッドは無効です。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlEntityReference">
      <summary vsli:raw="Represents an entity reference node.">エンティティ参照ノードを表します。</summary>
    </member>
    <member name="M:System.Xml.XmlEntityReference.#ctor(System.String,System.Xml.XmlDocument)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlEntityReference&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlEntityReference" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="The name of the entity reference; see the &lt;see cref=&quot;P:System.Xml.XmlEntityReference.Name&quot; /&gt; property.">エンティティ参照の名前。<see cref="P:System.Xml.XmlEntityReference.Name" /> プロパティに関するトピックを参照してください。</param>
      <param name="doc" vsli:raw="The parent XML document.">親 XML ドキュメント。</param>
    </member>
    <member name="P:System.Xml.XmlEntityReference.BaseURI">
      <summary vsli:raw="Gets the base Uniform Resource Identifier (URI) of the current node.">現在のノードのベース URI (Uniform Resource Identifier) を取得します。</summary>
      <returns vsli:raw="The location from which the node was loaded.">読み込まれたノードの読み込み元の場所。</returns>
    </member>
    <member name="M:System.Xml.XmlEntityReference.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node.">このノードの複製を作成します。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself. For &lt;see langword=&quot;XmlEntityReference&quot; /&gt; nodes, this method always returns an entity reference node with no children. The replacement text is set when the node is inserted into a parent.">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。 <see langword="XmlEntityReference" /> ノードの場合、このメソッドは常に子を持たないエンティティ参照を返します。 置換テキストは、ノードが親に挿入されると設定されます。</param>
      <returns vsli:raw="The cloned node.">クローンとして作成されたノード。</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the node is read-only.">ノードが読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node is read-only; otherwise &lt;see langword=&quot;false&quot; /&gt;.  &#xA;  &#xA; Because &lt;see langword=&quot;XmlEntityReference&quot; /&gt; nodes are read-only, this property always returns &lt;see langword=&quot;true&quot; /&gt;.">ノードが読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  
<see langword="XmlEntityReference" /> ノードは読み取り専用であるため、このプロパティは常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.LocalName">
      <summary vsli:raw="Gets the local name of the node.">ノードのローカル名を取得します。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlEntityReference&quot; /&gt; nodes, this property returns the name of the entity referenced.">
        <see langword="XmlEntityReference" /> ノードの場合、このプロパティは参照されたエンティティの名前を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.Name">
      <summary vsli:raw="Gets the name of the node.">ノードの名前を取得します。</summary>
      <returns vsli:raw="The name of the entity referenced.">参照されたエンティティの名前。</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.NodeType">
      <summary vsli:raw="Gets the type of the node.">ノードの種類を取得します。</summary>
      <returns vsli:raw="The node type. For &lt;see langword=&quot;XmlEntityReference&quot; /&gt; nodes, the value is XmlNodeType.EntityReference.">ノード型。 <see langword="XmlEntityReference" /> ノードの場合、値は XmlNodeType.EntityReference です。</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.Value">
      <summary vsli:raw="Gets or sets the value of the node.">ノードの値を取得または設定します。</summary>
      <returns vsli:raw="The value of the node. For &lt;see langword=&quot;XmlEntityReference&quot; /&gt; nodes, this property returns &lt;see langword=&quot;null&quot; /&gt;.">ノードの値。 <see langword="XmlEntityReference" /> ノードの場合、このプロパティは <see langword="null" /> を返します。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Node is read-only.">ノードが読み取り専用です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Setting the property.">プロパティを設定しています。</exception>
    </member>
    <member name="M:System.Xml.XmlEntityReference.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves all the children of the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">指定した <see cref="T:System.Xml.XmlWriter" /> にノードのすべての子を保存します。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlEntityReference.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">指定した <see cref="T:System.Xml.XmlWriter" /> にノードを保存します。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlException">
      <summary vsli:raw="Returns detailed information about the last exception.">最後の例外に関する詳細情報を返します。</summary>
    </member>
    <member name="M:System.Xml.XmlException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlException&quot; /&gt; class.">
        <see langword="XmlException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlException&quot; /&gt; class using the information in the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; and &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; objects.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトおよび <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクトの情報を使用して、<see langword="XmlException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info" vsli:raw="The &lt;see langword=&quot;SerializationInfo&quot; /&gt; object containing all the properties of an &lt;see langword=&quot;XmlException&quot; /&gt;.">
        <see langword="SerializationInfo" /> のすべてのプロパティを格納している <see langword="XmlException" /> オブジェクト。</param>
      <param name="context" vsli:raw="The &lt;see langword=&quot;StreamingContext&quot; /&gt; object containing the context information.">コンテキスト情報を格納している <see langword="StreamingContext" /> オブジェクト。</param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlException&quot; /&gt; class with a specified error message.">指定したエラー メッセージを使用して、<see langword="XmlException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="The error description.">エラーの説明。</param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlException&quot; /&gt; class.">
        <see langword="XmlException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="The description of the error condition.">エラー状態の説明。</param>
      <param name="innerException" vsli:raw="The &lt;see cref=&quot;T:System.Exception&quot; /&gt; that threw the &lt;see langword=&quot;XmlException&quot; /&gt;, if any. This value can be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Exception" /> をスローした <see langword="XmlException" /> (存在する場合)。 この値は、<see langword="null" /> の場合もあります。</param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlException&quot; /&gt; class with the specified message, inner exception, line number, and line position.">指定したメッセージ、内部例外、行番号、行の位置を使用して、<see langword="XmlException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="The error description.">エラーの説明。</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception. This value can be &lt;see langword=&quot;null&quot; /&gt;.">現在の例外の原因となった例外。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="lineNumber" vsli:raw="The line number indicating where the error occurred.">エラーの発生場所を示す行番号。</param>
      <param name="linePosition" vsli:raw="The line position indicating where the error occurred.">エラーの発生場所を示す行の位置。</param>
    </member>
    <member name="M:System.Xml.XmlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Streams all the &lt;see langword=&quot;XmlException&quot; /&gt; properties into the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; class for the given &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt;.">すべての <see langword="XmlException" /> プロパティを、指定した <see cref="T:System.Runtime.Serialization.SerializationInfo" /> の <see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスにストリーム転送します。</summary>
      <param name="info" vsli:raw="The &lt;see langword=&quot;SerializationInfo&quot; /&gt; object.">
        <see langword="SerializationInfo" /> オブジェクト。</param>
      <param name="context" vsli:raw="The &lt;see langword=&quot;StreamingContext&quot; /&gt; object.">
        <see langword="StreamingContext" /> オブジェクト。</param>
    </member>
    <member name="P:System.Xml.XmlException.LineNumber">
      <summary vsli:raw="Gets the line number indicating where the error occurred. Line numbers start at 1.">エラーの発生場所を示す行番号を取得します。</summary>
      <returns vsli:raw="The line number indicating where the error occurred.">エラーの発生場所を示す行番号。</returns>
    </member>
    <member name="P:System.Xml.XmlException.LinePosition">
      <summary vsli:raw="Gets the line position indicating where the error occurred. Line position starts at 1.">エラーの発生場所を示す行の位置を取得します。</summary>
      <returns vsli:raw="The line position indicating where the error occurred.">エラーの発生場所を示す行の位置。</returns>
    </member>
    <member name="P:System.Xml.XmlException.Message">
      <summary vsli:raw="Gets a message describing the current exception.">現在の例外を説明するメッセージを取得します。</summary>
      <returns vsli:raw="The error message that explains the reason for the exception.">例外の原因を説明するエラー メッセージ。</returns>
    </member>
    <member name="P:System.Xml.XmlException.SourceUri">
      <summary vsli:raw="Gets the location of the XML file.">XML ファイルの場所を取得します。</summary>
      <returns vsli:raw="The source URI for the XML data. If there is no source URI, this property returns &lt;see langword=&quot;null&quot; /&gt;.">XML データのソース URI。 ソース URI がない場合、このプロパティは <see langword="null" /> を返します。</returns>
    </member>
    <member name="T:System.Xml.XmlImplementation">
      <summary vsli:raw="Defines the context for a set of &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; objects.">
        <see cref="T:System.Xml.XmlDocument" /> オブジェクトのセットのコンテキストを定義します。</summary>
    </member>
    <member name="M:System.Xml.XmlImplementation.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlImplementation&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlImplementation" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlImplementation.#ctor(System.Xml.XmlNameTable)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlImplementation&quot; /&gt; class with the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; specified.">
        <see cref="T:System.Xml.XmlImplementation" /> を指定して、<see cref="T:System.Xml.XmlNameTable" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="nt" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlNameTable" /> オブジェクト。</param>
    </member>
    <member name="M:System.Xml.XmlImplementation.CreateDocument">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;.">新しい <see cref="T:System.Xml.XmlDocument" /> を作成します。</summary>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlDocument&quot; /&gt; object.">新しい <see langword="XmlDocument" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlImplementation.HasFeature(System.String,System.String)">
      <summary vsli:raw="Tests if the Document Object Model (DOM) implementation implements a specific feature.">DOM (Document Object Model) 実装が特定の機能を実装するかどうかをテストします。</summary>
      <param name="strFeature" vsli:raw="The package name of the feature to test. This name is not case-sensitive.">テスト対象の機能のパッケージ名。 この名前は大文字と小文字を区別しません。</param>
      <param name="strVersion" vsli:raw="This is the version number of the package name to test. If the version is not specified (&lt;see langword=&quot;null&quot; /&gt;), supporting any version of the feature causes the method to return &lt;see langword=&quot;true&quot; /&gt;.">これは、テストする対象のパッケージ名のバージョン番号です。 バージョンを指定しない場合 (<see langword="null" />)、機能のいずれかのバージョンがサポートされていれば、このメソッドは <see langword="true" /> を返します。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the feature is implemented in the specified version; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  &#xA;  &#xA; The following table shows the combinations that cause &lt;see langword=&quot;HasFeature&quot; /&gt; to return &lt;see langword=&quot;true&quot; /&gt;.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; strFeature&lt;/term&gt;&lt;description&gt; strVersion&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; XML&lt;/term&gt;&lt;description&gt; 1.0&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; XML&lt;/term&gt;&lt;description&gt; 2.0&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">指定したバージョンでその機能が実装される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  
<see langword="HasFeature" /> が <see langword="true" /> を返す組み合わせを次の表に示します。  
  strFeature 
  strVersion 
  XML 
  1 
  XML 
  2.0</returns>
    </member>
    <member name="T:System.Xml.XmlLinkedNode">
      <summary vsli:raw="Gets the node immediately preceding or following this node.">このノードの直前または直後のノードを取得します。</summary>
    </member>
    <member name="P:System.Xml.XmlLinkedNode.NextSibling">
      <summary vsli:raw="Gets the node immediately following this node.">このノードの直後のノードを取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; immediately following this node or &lt;see langword=&quot;null&quot; /&gt; if one does not exist.">このノードの直後の <see cref="T:System.Xml.XmlNode" />。直後のノードが存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlLinkedNode.PreviousSibling">
      <summary vsli:raw="Gets the node immediately preceding this node.">このノードの直前のノードを取得します。</summary>
      <returns vsli:raw="The preceding &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; if one does not exist.">直前の <see cref="T:System.Xml.XmlNode" />。直前のノードが存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.XmlNamedNodeMap">
      <summary vsli:raw="Represents a collection of nodes that can be accessed by name or index.">名前またはインデックスによってアクセスできるノードのコレクションを表します。</summary>
    </member>
    <member name="P:System.Xml.XmlNamedNodeMap.Count">
      <summary vsli:raw="Gets the number of nodes in the &lt;see langword=&quot;XmlNamedNodeMap&quot; /&gt;.">
        <see langword="XmlNamedNodeMap" /> 内のノードの数を取得します。</summary>
      <returns vsli:raw="The number of nodes.">ノードの数。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetEnumerator">
      <summary vsli:raw="Provides support for the &quot;foreach&quot; style iteration over the collection of nodes in the &lt;see langword=&quot;XmlNamedNodeMap&quot; /&gt;.">
        <see langword="XmlNamedNodeMap" /> 内のノードのコレクションに対する "foreach" スタイルの反復をサポートします。</summary>
      <returns vsli:raw="An enumerator object.">列挙子オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String)">
      <summary vsli:raw="Retrieves an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; specified by name.">名前で指定した <see cref="T:System.Xml.XmlNode" /> を取得します。</summary>
      <param name="name" vsli:raw="The qualified name of the node to retrieve. It is matched against the &lt;see cref=&quot;P:System.Xml.XmlNode.Name&quot; /&gt; property of the matching node.">取得するノードの限定名。 一致するノードの <see cref="P:System.Xml.XmlNode.Name" /> プロパティに一致します。</param>
      <returns vsli:raw="An &lt;see langword=&quot;XmlNode&quot; /&gt; with the specified name or &lt;see langword=&quot;null&quot; /&gt; if a matching node is not found.">指定した名前の <see langword="XmlNode" />。一致するノードが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String,System.String)">
      <summary vsli:raw="Retrieves a node with the matching &lt;see cref=&quot;P:System.Xml.XmlNode.LocalName&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlNode.NamespaceURI&quot; /&gt;.">一致する <see cref="P:System.Xml.XmlNode.LocalName" /> および <see cref="P:System.Xml.XmlNode.NamespaceURI" /> を持つノードを取得します。</summary>
      <param name="localName" vsli:raw="The local name of the node to retrieve.">取得するノードのローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace Uniform Resource Identifier (URI) of the node to retrieve.">取得するノードの名前空間 URI (Uniform Resource Identifier)。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; with the matching local name and namespace URI or &lt;see langword=&quot;null&quot; /&gt; if a matching node was not found.">一致するローカル名および名前空間 URI を持つ <see cref="T:System.Xml.XmlNode" />。一致するノードが見つからなかった場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.Item(System.Int32)">
      <summary vsli:raw="Retrieves the node at the specified index in the &lt;see langword=&quot;XmlNamedNodeMap&quot; /&gt;.">
        <see langword="XmlNamedNodeMap" /> 内の指定したインデックス位置にあるノードを取得します。</summary>
      <param name="index" vsli:raw="The index position of the node to retrieve from the &lt;see langword=&quot;XmlNamedNodeMap&quot; /&gt;. The index is zero-based; therefore, the index of the first node is 0 and the index of the last node is &lt;see cref=&quot;P:System.Xml.XmlNamedNodeMap.Count&quot; /&gt; -1.">
        <see langword="XmlNamedNodeMap" /> から取得するノードのインデックス位置。 インデックスは 0 から始まるため、最初のノードのインデックスは 0 で、最後のノードのインデックスは <see cref="P:System.Xml.XmlNamedNodeMap.Count" /> -1 になります。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; at the specified index. If &lt;paramref name=&quot;index&quot; /&gt; is less than 0 or greater than or equal to the &lt;see cref=&quot;P:System.Xml.XmlNamedNodeMap.Count&quot; /&gt; property, &lt;see langword=&quot;null&quot; /&gt; is returned.">指定されたインデックス位置にある <see cref="T:System.Xml.XmlNode" />。 <paramref name="index" /> が 0 未満か、<see cref="P:System.Xml.XmlNamedNodeMap.Count" /> プロパティ以上の場合は、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String)">
      <summary vsli:raw="Removes the node from the &lt;see langword=&quot;XmlNamedNodeMap&quot; /&gt;.">ノードを <see langword="XmlNamedNodeMap" /> から削除します。</summary>
      <param name="name" vsli:raw="The qualified name of the node to remove. The name is matched against the &lt;see cref=&quot;P:System.Xml.XmlNode.Name&quot; /&gt; property of the matching node.">削除するノードの限定名。 名前は、一致するノードの <see cref="P:System.Xml.XmlNode.Name" /> プロパティに一致します。</param>
      <returns vsli:raw="The &lt;see langword=&quot;XmlNode&quot; /&gt; removed from this &lt;see langword=&quot;XmlNamedNodeMap&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; if a matching node was not found.">この <see langword="XmlNode" /> から削除した <see langword="XmlNamedNodeMap" />。一致するノードが見つからなかった場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String,System.String)">
      <summary vsli:raw="Removes a node with the matching &lt;see cref=&quot;P:System.Xml.XmlNode.LocalName&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlNode.NamespaceURI&quot; /&gt;.">一致する <see cref="P:System.Xml.XmlNode.LocalName" /> および <see cref="P:System.Xml.XmlNode.NamespaceURI" /> を持つノードを削除します。</summary>
      <param name="localName" vsli:raw="The local name of the node to remove.">削除するノードのローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the node to remove.">削除するノードの名前空間 URI。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; removed or &lt;see langword=&quot;null&quot; /&gt; if a matching node was not found.">削除した <see cref="T:System.Xml.XmlNode" />。一致するノードが見つからなかった場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.SetNamedItem(System.Xml.XmlNode)">
      <summary vsli:raw="Adds an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; using its &lt;see cref=&quot;P:System.Xml.XmlNode.Name&quot; /&gt; property.">
        <see cref="T:System.Xml.XmlNode" /> をその <see cref="P:System.Xml.XmlNode.Name" /> プロパティを使用して追加します。</summary>
      <param name="node" vsli:raw="An &lt;see langword=&quot;XmlNode&quot; /&gt; to store in the &lt;see langword=&quot;XmlNamedNodeMap&quot; /&gt;. If a node with that name is already present in the map, it is replaced by the new one.">
        <see langword="XmlNode" /> に格納する <see langword="XmlNamedNodeMap" />。 その名前のノードが既にマップに存在している場合は、新しいノードに置き換えられます。</param>
      <returns vsli:raw="If the &lt;paramref name=&quot;node&quot; /&gt; replaces an existing node with the same name, the old node is returned; otherwise, &lt;see langword=&quot;null&quot; /&gt; is returned.">
        <paramref name="node" /> によって同じ名前の既存のノードが置換される場合、古いノードが返されます。それ以外の場合は <see langword="null" /> が返されます。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;node&quot; /&gt; was created from a different &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; than the one that created the &lt;see langword=&quot;XmlNamedNodeMap&quot; /&gt;; or the &lt;see langword=&quot;XmlNamedNodeMap&quot; /&gt; is read-only.">
        <see langword="XmlNamedNodeMap" /> を作成したものとは異なる <see cref="T:System.Xml.XmlDocument" /> から <paramref name="node" /> が作成されました。または、<see langword="XmlNamedNodeMap" /> が読み取り専用です。</exception>
    </member>
    <member name="T:System.Xml.XmlNamespaceManager">
      <summary vsli:raw="Resolves, adds, and removes namespaces to a collection and provides scope management for these namespaces.">名前空間を解決し、コレクションに追加および削除して、これらの名前空間に対するスコープ管理を提供します。</summary>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.#ctor(System.Xml.XmlNameTable)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">
        <see cref="T:System.Xml.XmlNamespaceManager" /> を指定して、<see cref="T:System.Xml.XmlNameTable" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="nameTable" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; to use.">使用する <see cref="T:System.Xml.XmlNameTable" />。</param>
      <exception cref="T:System.NullReferenceException" vsli:raw="&lt;see langword=&quot;null&quot; /&gt; is passed to the constructor.">
        <see langword="null" /> がコンストラクターに渡されます。</exception>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)">
      <summary vsli:raw="Adds the given namespace to the collection.">指定した名前空間をコレクションに追加します。</summary>
      <param name="prefix" vsli:raw="The prefix to associate with the namespace being added. Use String.Empty to add a default namespace.  &#xA;  &#xA; Note If the &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; will be used for resolving namespaces in an XML Path Language (XPath) expression, a prefix must be specified. If an XPath expression does not include a prefix, it is assumed that the namespace Uniform Resource Identifier (URI) is the empty namespace. For more information about XPath expressions and the &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;, refer to the &lt;see cref=&quot;M:System.Xml.XmlNode.SelectNodes(System.String)&quot; /&gt; and &lt;see cref=&quot;M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)&quot; /&gt; methods.">追加する名前空間に関連付けるプリフィックス。 String.Empty を使用して、既定の名前空間を追加します。  
 注 XML Path Language (XPath) 式の名前空間の解決に <see cref="T:System.Xml.XmlNamespaceManager" /> を使用する場合は、プレフィックスを指定する必要があります。 XPath 式にプレフィックスが含まれていない場合、名前空間 URI (Uniform Resource Identifier) は、空の名前空間であると見なされます。 XPath 式および <see cref="T:System.Xml.XmlNamespaceManager" /> の詳細については、<see cref="M:System.Xml.XmlNode.SelectNodes(System.String)" /> メソッドおよび <see cref="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)" /> メソッドの説明を参照してください。</param>
      <param name="uri" vsli:raw="The namespace to add.">追加する名前空間。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The value for &lt;paramref name=&quot;prefix&quot; /&gt; is &quot;xml&quot; or &quot;xmlns&quot;.">
        <paramref name="prefix" /> の値が "xml" または "xmlns" です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The value for &lt;paramref name=&quot;prefix&quot; /&gt; or &lt;paramref name=&quot;uri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="prefix" /> または <paramref name="uri" /> の値が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Xml.XmlNamespaceManager.DefaultNamespace">
      <summary vsli:raw="Gets the namespace URI for the default namespace.">既定の名前空間の名前空間 URI を取得します。</summary>
      <returns vsli:raw="The namespace URI for the default namespace, or an empty string if there is no default namespace.">既定の名前空間の名前空間 URI。既定の名前空間がない場合は空の文字列。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.GetEnumerator">
      <summary vsli:raw="Returns an enumerator to use to iterate through the namespaces in the &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;.">
        <see cref="T:System.Xml.XmlNamespaceManager" /> 内の名前空間を反復処理するために使用する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; containing the prefixes stored by the &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> によって格納されているプレフィックスを含む <see cref="T:System.Xml.XmlNamespaceManager" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary vsli:raw="Gets a collection of namespace names keyed by prefix which can be used to enumerate the namespaces currently in scope.">現在スコープ内にある名前空間を列挙するために使用できる、プレフィックスをキーとした、名前空間の名前のコレクションを取得します。</summary>
      <param name="scope" vsli:raw="An enumeration value that specifies the type of namespace nodes to return.">返される名前空間ノードの種類を指定する列挙値。</param>
      <returns vsli:raw="A collection of namespace and prefix pairs currently in scope.">現在スコープ内にある名前空間とプレフィックスのペアのコレクション。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.HasNamespace(System.String)">
      <summary vsli:raw="Gets a value indicating whether the supplied prefix has a namespace defined for the current pushed scope.">提供されたプリフィックスに現在のプッシュされたスコープに対して定義された名前空間があるかどうかを示す値を取得します。</summary>
      <param name="prefix" vsli:raw="The prefix of the namespace you want to find.">検索する対象の名前空間のプリフィックス。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is a namespace defined; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">定義された名前空間がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupNamespace(System.String)">
      <summary vsli:raw="Gets the namespace URI for the specified prefix.">指定したプリフィックスの名前空間 URI を取得します。</summary>
      <param name="prefix" vsli:raw="The prefix whose namespace URI you want to resolve. To match the default namespace, pass String.Empty.">解決する対象となる名前空間 URI のプレフィックス。 既定の名前空間に一致するようにするには、String.Empty を渡します。</param>
      <returns vsli:raw="The namespace URI for &lt;paramref name=&quot;prefix&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; if there is no mapped namespace. The returned string is atomized.  &#xA;  &#xA; For more information on atomized strings, see the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; class.">マップされた名前空間がない場合は <paramref name="prefix" /> または <see langword="null" /> の名前空間 URI。 返される文字列は最小単位に分割されます。  
最小単位に分割された文字列の詳細については、<see cref="T:System.Xml.XmlNameTable" /> クラスを参照してください。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupPrefix(System.String)">
      <summary vsli:raw="Finds the prefix declared for the given namespace URI.">指定した名前空間 URI に対して宣言されたプリフィックスを検索します。</summary>
      <param name="uri" vsli:raw="The namespace to resolve for the prefix.">プリフィックスに対して解決する名前空間。</param>
      <returns vsli:raw="The matching prefix. If there is no mapped prefix, the method returns String.Empty. If a null value is supplied, then &lt;see langword=&quot;null&quot; /&gt; is returned.">一致するプリフィックス。 割り当てられたプリフィックスがない場合、メソッドは String.Empty を返します。 null 値を指定した場合、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlNamespaceManager.NameTable">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; associated with this object.">このオブジェクトに関連付けられている <see cref="T:System.Xml.XmlNameTable" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; used by this object.">このオブジェクトが使用する <see cref="T:System.Xml.XmlNameTable" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.PopScope">
      <summary vsli:raw="Pops a namespace scope off the stack.">名前空間スコープをスタックからポップします。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there are namespace scopes left on the stack; &lt;see langword=&quot;false&quot; /&gt; if there are no more namespaces to pop.">スタックに名前空間スコープが残されている場合は <see langword="true" />。ポップする名前空間がそれ以上ない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.PushScope">
      <summary vsli:raw="Pushes a namespace scope onto the stack.">名前空間スコープをスタックにプッシュします。</summary>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)">
      <summary vsli:raw="Removes the given namespace for the given prefix.">指定したプリフィックスの指定した名前空間を削除します。</summary>
      <param name="prefix" vsli:raw="The prefix for the namespace.">名前空間のプリフィックス。</param>
      <param name="uri" vsli:raw="The namespace to remove for the given prefix. The namespace removed is from the current namespace scope. Namespaces outside the current scope are ignored.">指定したプリフィックスに対して削除する名前空間。 削除された名前空間は、現在の名前空間スコープに由来しています。 現在のスコープ外の名前空間は無視されます。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The value of &lt;paramref name=&quot;prefix&quot; /&gt; or &lt;paramref name=&quot;uri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="prefix" /> または <paramref name="uri" /> の値が <see langword="null" /> です。</exception>
    </member>
    <member name="T:System.Xml.XmlNamespaceScope">
      <summary vsli:raw="Defines the namespace scope.">名前空間スコープを定義します。</summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.All">
      <summary vsli:raw="All namespaces defined in the scope of the current node. This includes the xmlns:xml namespace which is always declared implicitly. The order of the namespaces returned is not defined.">現在のノードのスコープに定義されているすべての名前空間。 この名前空間には、常に暗黙的に宣言される xmlns:xml 名前空間が含まれます。 返される名前空間の順序は定義されません。</summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.ExcludeXml">
      <summary vsli:raw="All namespaces defined in the scope of the current node, excluding the xmlns:xml namespace, which is always declared implicitly. The order of the namespaces returned is not defined.">常に暗黙的に宣言される xmlns:xml 名前空間を除く、現在のノードのスコープに定義されているすべての名前空間。 返される名前空間の順序は定義されません。</summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.Local">
      <summary vsli:raw="All namespaces that are defined locally at the current node.">現在のノードでローカルに定義されているすべての名前空間。</summary>
    </member>
    <member name="T:System.Xml.XmlNameTable">
      <summary vsli:raw="Table of atomized string objects.">最小単位に分割された文字列オブジェクトのテーブル。</summary>
    </member>
    <member name="M:System.Xml.XmlNameTable.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlNameTable" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="When overridden in a derived class, atomizes the specified string and adds it to the &lt;see langword=&quot;XmlNameTable&quot; /&gt;.">派生クラスでオーバーライドされると、指定した文字列を最小単位に分割し、<see langword="XmlNameTable" /> に追加します。</summary>
      <param name="array" vsli:raw="The character array containing the name to add.">追加する名前を格納している文字配列。</param>
      <param name="offset" vsli:raw="Zero-based index into the array specifying the first character of the name.">名前の最初の文字を指定する配列の、0 から始まるインデックス番号。</param>
      <param name="length" vsli:raw="The number of characters in the name.">名前の文字数。</param>
      <returns vsli:raw="The new atomized string or the existing one if it already exists. If length is zero, String.Empty is returned.">新しく最小単位に分割された文字列。既に存在している場合は既存の文字列。 長さが 0 の場合は、String.Empty が返されます。</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="0 &amp;gt; &lt;paramref name=&quot;offset&quot; /&gt;  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;offset&quot; /&gt; &amp;gt;= &lt;paramref name=&quot;array&quot; /&gt;.Length  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;length&quot; /&gt; &amp;gt; &lt;paramref name=&quot;array&quot; /&gt;.Length  &#xA;  &#xA; The above conditions do not cause an exception to be thrown if &lt;paramref name=&quot;length&quot; /&gt; =0.">0 &gt; <paramref name="offset" />  

または - 
<paramref name="offset" /> &gt;= <paramref name="array" />.Length 
または - 
<paramref name="length" /> &gt; <paramref name="array" />.Length 
<paramref name="length" /> =0 の場合は、上記の条件によって例外がスローされることはありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;length&quot; /&gt; &amp;lt; 0.">
        <paramref name="length" /> &lt; 0.</exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Add(System.String)">
      <summary vsli:raw="When overridden in a derived class, atomizes the specified string and adds it to the &lt;see langword=&quot;XmlNameTable&quot; /&gt;.">派生クラスでオーバーライドされると、指定した文字列を最小単位に分割し、<see langword="XmlNameTable" /> に追加します。</summary>
      <param name="array" vsli:raw="The name to add.">追加する名前。</param>
      <returns vsli:raw="The new atomized string or the existing one if it already exists.">新しく最小単位に分割された文字列。既に存在している場合は既存の文字列。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="When overridden in a derived class, gets the atomized string containing the same characters as the specified range of characters in the given array.">派生クラスでオーバーライドされると、指定した配列内の指定した範囲の文字と同じ文字を含む、最小単位に分割された文字列を取得します。</summary>
      <param name="array" vsli:raw="The character array containing the name to look up.">検索対象の名前を格納している文字配列。</param>
      <param name="offset" vsli:raw="The zero-based index into the array specifying the first character of the name.">名前の最初の文字を指定する配列の、0 から始まるインデックス番号。</param>
      <param name="length" vsli:raw="The number of characters in the name.">名前の文字数。</param>
      <returns vsli:raw="The atomized string or &lt;see langword=&quot;null&quot; /&gt; if the string has not already been atomized. If &lt;paramref name=&quot;length&quot; /&gt; is zero, String.Empty is returned.">最小単位に分割された文字列。文字列がまだ最小単位に分割されていない場合は <see langword="null" />。 <paramref name="length" /> が 0 の場合は、String.Empty が返されます。</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="0 &amp;gt; &lt;paramref name=&quot;offset&quot; /&gt;  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;offset&quot; /&gt; &amp;gt;= &lt;paramref name=&quot;array&quot; /&gt;.Length  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;length&quot; /&gt; &amp;gt; &lt;paramref name=&quot;array&quot; /&gt;.Length  &#xA;  &#xA; The above conditions do not cause an exception to be thrown if &lt;paramref name=&quot;length&quot; /&gt; =0.">0 &gt; <paramref name="offset" />  
または 
 <paramref name="offset" /> &gt;= <paramref name="array" />.Length 

または - 
<paramref name="length" /> &gt; <paramref name="array" />.Length 
<paramref name="length" /> =0 の場合は、上記の条件によって例外がスローされることはありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;length&quot; /&gt; &amp;lt; 0.">
        <paramref name="length" /> &lt; 0.</exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Get(System.String)">
      <summary vsli:raw="When overridden in a derived class, gets the atomized string containing the same value as the specified string.">派生クラスでオーバーライドされると、指定した文字列と同じ値を含む最小単位に分割された文字列を取得します。</summary>
      <param name="array" vsli:raw="The name to look up.">検索する名前。</param>
      <returns vsli:raw="The atomized string or &lt;see langword=&quot;null&quot; /&gt; if the string has not already been atomized.">最小単位に分割された文字列。文字列がまだ最小単位に分割されていない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="T:System.Xml.XmlNode">
      <summary vsli:raw="Represents a single node in the XML document.">XML ドキュメント内の単一のノードを表します。</summary>
    </member>
    <member name="M:System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)">
      <summary vsli:raw="Adds the specified node to the end of the list of child nodes, of this node.">このノードの子ノードのリストの末尾に、指定したノードを追加します。</summary>
      <param name="newChild" vsli:raw="The node to add. All the contents of the node to be added are moved into the specified location.">追加するノード。 追加するノードのすべての内容が、指定した場所に移動します。</param>
      <returns vsli:raw="The node added.">追加されたノード。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This node is of a type that does not allow child nodes of the type of the &lt;paramref name=&quot;newChild&quot; /&gt; node.  &#xA;  &#xA; The &lt;paramref name=&quot;newChild&quot; /&gt; is an ancestor of this node.">このノードは、<paramref name="newChild" /> ノードの型の子ノードが許可されない型です。  
<paramref name="newChild" /> がこのノードの先祖です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;newChild&quot; /&gt; was created from a different document than the one that created this node.  &#xA;  &#xA; This node is read-only.">
        <paramref name="newChild" /> は、このノードを作成したドキュメントとは異なるドキュメントから作成されました。  
このノードは読み取り専用です。</exception>
    </member>
    <member name="P:System.Xml.XmlNode.Attributes">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Xml.XmlAttributeCollection&quot; /&gt; containing the attributes of this node.">このノードの属性を格納している <see cref="T:System.Xml.XmlAttributeCollection" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see langword=&quot;XmlAttributeCollection&quot; /&gt; containing the attributes of the node.  &#xA;  &#xA; If the node is of type XmlNodeType.Element, the attributes of the node are returned. Otherwise, this property returns &lt;see langword=&quot;null&quot; /&gt;.">ノードの属性を格納している <see langword="XmlAttributeCollection" />。  
XmlNodeType.Element 型のノードの場合は、ノードの属性が返されます。 それ以外の場合は、<see langword="null" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.BaseURI">
      <summary vsli:raw="Gets the base URI of the current node.">現在のノードのベース URI を取得します。</summary>
      <returns vsli:raw="The location from which the node was loaded or String.Empty if the node has no base URI.">ノードの読み込み元の場所。ノードにベース URI がない場合は String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.ChildNodes">
      <summary vsli:raw="Gets all the child nodes of the node.">ノードのすべての子ノードを取得します。</summary>
      <returns vsli:raw="An object that contains all the child nodes of the node.  &#xA;  &#xA; If there are no child nodes, this property returns an empty &lt;see cref=&quot;T:System.Xml.XmlNodeList&quot; /&gt;.">ノードのすべての子ノードを格納しているオブジェクト。  
子ノードがない場合、このプロパティは空の <see cref="T:System.Xml.XmlNodeList" /> を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.Clone">
      <summary vsli:raw="Creates a duplicate of this node.">このノードの複製を作成します。</summary>
      <returns vsli:raw="The cloned node.">クローンとして作成されたノード。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of the node, when overridden in a derived class.">派生クラスでオーバーライドされた場合は、ノードの複製を作成します。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself.">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。</param>
      <returns vsli:raw="The cloned node.">クローンとして作成されたノード。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Calling this method on a node type that cannot be cloned.">クローンを作成できないノード型でこのメソッドを呼び出しています。</exception>
    </member>
    <member name="M:System.Xml.XmlNode.CreateNavigator">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; for navigating this object.">このオブジェクト内を移動するための <see cref="T:System.Xml.XPath.XPathNavigator" /> を作成します。</summary>
      <returns vsli:raw="An &lt;see langword=&quot;XPathNavigator&quot; /&gt; object used to navigate the node. The &lt;see langword=&quot;XPathNavigator&quot; /&gt; is positioned on the node from which the method was called. It is not positioned on the root of the document.">ノードに移動するために使用される <see langword="XPathNavigator" /> オブジェクト。 <see langword="XPathNavigator" /> は、メソッドの呼び出し元のノードに配置されます。 ドキュメントのルートには配置されません。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.FirstChild">
      <summary vsli:raw="Gets the first child of the node.">ノードの最初の子を取得します。</summary>
      <returns vsli:raw="The first child of the node. If there is no such node, &lt;see langword=&quot;null&quot; /&gt; is returned.">ノードの最初の子。 そのようなノードがない場合は、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.GetEnumerator">
      <summary vsli:raw="Gets an enumerator that iterates through the child nodes in the current node.">現在のノード内の子ノードを反復処理する列挙子を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object that can be used to iterate through the child nodes in the current node.">現在のノードの子ノードを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)">
      <summary vsli:raw="Looks up the closest xmlns declaration for the given prefix that is in scope for the current node and returns the namespace URI in the declaration.">現在のノードのスコープ内にある指定したプレフィックスに対する最も近い xmlns 宣言を検索し、宣言内の名前空間 URI を返します。</summary>
      <param name="prefix" vsli:raw="The prefix whose namespace URI you want to find.">検索対象の名前空間 URI を持つプレフィックス。</param>
      <returns vsli:raw="The namespace URI of the specified prefix.">指定したプリフィックスの名前空間 URI。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.GetPrefixOfNamespace(System.String)">
      <summary vsli:raw="Looks up the closest xmlns declaration for the given namespace URI that is in scope for the current node and returns the prefix defined in that declaration.">現在のノードのスコープ内にある指定した名前空間 URI に対する最も近い xmlns 宣言を検索し、宣言で定義されているプレフィックスを返します。</summary>
      <param name="namespaceURI" vsli:raw="The namespace URI whose prefix you want to find.">検索対象のプリフィックスを持つ名前空間 URI。</param>
      <returns vsli:raw="The prefix for the specified namespace URI.">指定した名前空間 URI のプリフィックス。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.HasChildNodes">
      <summary vsli:raw="Gets a value indicating whether this node has any child nodes.">このノードに子ノードがあるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node has child nodes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">ノードが子ノードを持っている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.InnerText">
      <summary vsli:raw="Gets or sets the concatenated values of the node and all its child nodes.">ノードとそのすべての子の連結された値を取得または設定します。</summary>
      <returns vsli:raw="The concatenated values of the node and all its child nodes.">ノードとそのすべての子の連結された値。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.InnerXml">
      <summary vsli:raw="Gets or sets the markup representing only the child nodes of this node.">このノードの子ノードだけを表すマークアップを取得または設定します。</summary>
      <returns vsli:raw="The markup of the child nodes of this node, not including default attributes.">このノードの子ノードのマークアップ。  
 <see langword="InnerXml" /> は既定の属性を返しません。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Setting this property on a node that cannot have child nodes.">子ノードを持つことができないノードでこのプロパティを設定します。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML specified when setting this property is not well-formed.">このプロパティの設定時に指定される XML は、整形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary vsli:raw="Inserts the specified node immediately after the specified reference node.">指定したノードを指定した参照ノードの直後に挿入します。</summary>
      <param name="newChild" vsli:raw="The node to insert.">挿入するノードです。</param>
      <param name="refChild" vsli:raw="The reference node. &lt;paramref name=&quot;newChild&quot; /&gt; is placed after &lt;paramref name=&quot;refChild&quot; /&gt;.">参照ノードです。 <paramref name="newChild" /> は、<paramref name="refChild" /> の後に配置されます。</param>
      <returns vsli:raw="The node being inserted.">挿入されるノード。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This node is of a type that does not allow child nodes of the type of the &lt;paramref name=&quot;newChild&quot; /&gt; node.  &#xA;  &#xA; The &lt;paramref name=&quot;newChild&quot; /&gt; is an ancestor of this node.">このノードは、<paramref name="newChild" /> ノードの型の子ノードが許可されない型です。  
<paramref name="newChild" /> がこのノードの先祖です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;newChild&quot; /&gt; was created from a different document than the one that created this node.  &#xA;  &#xA; The &lt;paramref name=&quot;refChild&quot; /&gt; is not a child of this node.  &#xA;  &#xA; This node is read-only.">
        <paramref name="newChild" /> は、このノードを作成したドキュメントとは異なるドキュメントから作成されました。  
<paramref name="refChild" /> がこのノードの子ではありません。  
このノードは読み取り専用です。</exception>
    </member>
    <member name="M:System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary vsli:raw="Inserts the specified node immediately before the specified reference node.">指定したノードを指定した参照ノードの直前に挿入します。</summary>
      <param name="newChild" vsli:raw="The node to insert.">挿入するノードです。</param>
      <param name="refChild" vsli:raw="The reference node. &lt;paramref name=&quot;newChild&quot; /&gt; is placed before this node.">参照ノードです。 <paramref name="newChild" /> は、このノードの前に配置されます。</param>
      <returns vsli:raw="The node being inserted.">挿入されるノード。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node is of a type that does not allow child nodes of the type of the &lt;paramref name=&quot;newChild&quot; /&gt; node.  &#xA;  &#xA; The &lt;paramref name=&quot;newChild&quot; /&gt; is an ancestor of this node.">現在のノードは、<paramref name="newChild" /> ノードの型の子ノードが許可されない型です。  
<paramref name="newChild" /> がこのノードの先祖です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;newChild&quot; /&gt; was created from a different document than the one that created this node.  &#xA;  &#xA; The &lt;paramref name=&quot;refChild&quot; /&gt; is not a child of this node.  &#xA;  &#xA; This node is read-only.">
        <paramref name="newChild" /> は、このノードを作成したドキュメントとは異なるドキュメントから作成されました。  
<paramref name="refChild" /> がこのノードの子ではありません。  
このノードは読み取り専用です。</exception>
    </member>
    <member name="P:System.Xml.XmlNode.IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the node is read-only.">ノードが読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />ノードが読み取り専用の場合は。それ以外<see langword="false" />の場合は。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.Item(System.String)">
      <summary vsli:raw="Gets the first child element with the specified &lt;see cref=&quot;P:System.Xml.XmlNode.Name&quot; /&gt;.">指定した <see cref="P:System.Xml.XmlNode.Name" /> の最初の子要素を取得します。</summary>
      <param name="name" vsli:raw="The qualified name of the element to retrieve.">取得する要素の限定名。</param>
      <returns vsli:raw="The first &lt;see cref=&quot;T:System.Xml.XmlElement&quot; /&gt; that matches the specified name. It returns a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) if there is no match.">指定した名前と一致する最初の <see cref="T:System.Xml.XmlElement" />。 一致するものがない場合は、null 参照 (Visual Basic の場合は <see langword="Nothing" />) が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.Item(System.String,System.String)">
      <summary vsli:raw="Gets the first child element with the specified &lt;see cref=&quot;P:System.Xml.XmlNode.LocalName&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlNode.NamespaceURI&quot; /&gt;.">指定した <see cref="P:System.Xml.XmlNode.LocalName" /> および <see cref="P:System.Xml.XmlNode.NamespaceURI" /> の最初の子要素を取得します。</summary>
      <param name="localname" vsli:raw="The local name of the element.">要素のローカル名。</param>
      <param name="ns" vsli:raw="The namespace URI of the element.">要素の名前空間 URI。</param>
      <returns vsli:raw="The first &lt;see cref=&quot;T:System.Xml.XmlElement&quot; /&gt; with the matching &lt;paramref name=&quot;localname&quot; /&gt; and &lt;paramref name=&quot;ns&quot; /&gt;. It returns a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) if there is no match.">
        <paramref name="localname" /> および <paramref name="ns" /> が一致する最初の <see cref="T:System.Xml.XmlElement" />。 . 一致するものがない場合は、null 参照 (Visual Basic の場合は <see langword="Nothing" />) が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.LastChild">
      <summary vsli:raw="Gets the last child of the node.">ノードの最後の子を取得します。</summary>
      <returns vsli:raw="The last child of the node. If there is no such node, &lt;see langword=&quot;null&quot; /&gt; is returned.">ノードの最後の子。 そのようなノードがない場合は、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.LocalName">
      <summary vsli:raw="Gets the local name of the node, when overridden in a derived class.">派生クラスでオーバーライドされた場合は、ノードのローカル名を取得します。</summary>
      <returns vsli:raw="The name of the node with the prefix removed. For example, &lt;see langword=&quot;LocalName&quot; /&gt; is book for the element &amp;lt;bk:book&amp;gt;.  &#xA;  &#xA; The name returned is dependent on the &lt;see cref=&quot;P:System.Xml.XmlNode.NodeType&quot; /&gt; of the node:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Type&lt;/term&gt;&lt;description&gt; Name&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Attribute&lt;/term&gt;&lt;description&gt; The local name of the attribute.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; CDATA&lt;/term&gt;&lt;description&gt; #cdata-section&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Comment&lt;/term&gt;&lt;description&gt; #comment&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Document&lt;/term&gt;&lt;description&gt; #document&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DocumentFragment&lt;/term&gt;&lt;description&gt; #document-fragment&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DocumentType&lt;/term&gt;&lt;description&gt; The document type name.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Element&lt;/term&gt;&lt;description&gt; The local name of the element.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Entity&lt;/term&gt;&lt;description&gt; The name of the entity.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; EntityReference&lt;/term&gt;&lt;description&gt; The name of the entity referenced.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Notation&lt;/term&gt;&lt;description&gt; The notation name.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; ProcessingInstruction&lt;/term&gt;&lt;description&gt; The target of the processing instruction.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Text&lt;/term&gt;&lt;description&gt; #text&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Whitespace&lt;/term&gt;&lt;description&gt; #whitespace&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; SignificantWhitespace&lt;/term&gt;&lt;description&gt; #significant-whitespace&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; XmlDeclaration&lt;/term&gt;&lt;description&gt; #xml-declaration&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">プリフィックスが削除されたノードの名前。 たとえば、 <see langword="LocalName" />は要素&lt;bk: book&gt;の book です。  
返される名前は、ノードの <see cref="P:System.Xml.XmlNode.NodeType" /> によって異なります。 
  型 
  name 
  属性 
  属性のローカル名。  
  CDATA 
  #cdata-section 
  コメント 
  #comment 
  ドキュメント 
  #document 
  DocumentFragment 
  #document-fragment 
  DocumentType 
  ドキュメントの種類の名前。  
  要素 
  要素のローカル名。  
  エンティティ 
  エンティティの名前。  
  EntityReference 
  参照されたエンティティの名前。  
  Notation 
  表記名。  
  ProcessingInstruction 
  処理命令の対象。  
  テキスト 
  #text 
  Whitespace 
  #whitespace 
  SignificantWhitespace 
  #significant-whitespace 
  XmlDeclaration 
  #xml-declaration</returns>
    </member>
    <member name="P:System.Xml.XmlNode.Name">
      <summary vsli:raw="Gets the qualified name of the node, when overridden in a derived class.">派生クラスでオーバーライドされた場合は、ノードの修飾名を取得します。</summary>
      <returns vsli:raw="The qualified name of the node. The name returned is dependent on the &lt;see cref=&quot;P:System.Xml.XmlNode.NodeType&quot; /&gt; of the node:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Type&lt;/term&gt;&lt;description&gt; Name&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Attribute&lt;/term&gt;&lt;description&gt; The qualified name of the attribute.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; CDATA&lt;/term&gt;&lt;description&gt; #cdata-section&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Comment&lt;/term&gt;&lt;description&gt; #comment&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Document&lt;/term&gt;&lt;description&gt; #document&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DocumentFragment&lt;/term&gt;&lt;description&gt; #document-fragment&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DocumentType&lt;/term&gt;&lt;description&gt; The document type name.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Element&lt;/term&gt;&lt;description&gt; The qualified name of the element.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Entity&lt;/term&gt;&lt;description&gt; The name of the entity.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; EntityReference&lt;/term&gt;&lt;description&gt; The name of the entity referenced.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Notation&lt;/term&gt;&lt;description&gt; The notation name.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; ProcessingInstruction&lt;/term&gt;&lt;description&gt; The target of the processing instruction.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Text&lt;/term&gt;&lt;description&gt; #text&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Whitespace&lt;/term&gt;&lt;description&gt; #whitespace&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; SignificantWhitespace&lt;/term&gt;&lt;description&gt; #significant-whitespace&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; XmlDeclaration&lt;/term&gt;&lt;description&gt; #xml-declaration&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">ノードの限定名。 返される名前は、ノードの <see cref="P:System.Xml.XmlNode.NodeType" /> によって異なります。 
  型 
  name 
  属性 
  属性の限定名。  
  CDATA 
  #cdata-section 
  コメント 
  #comment 
  ドキュメント 
  #document 
  DocumentFragment 
  #document-fragment 
  DocumentType 
  ドキュメントの種類の名前。  
  要素 
  要素の限定名。  
  エンティティ 
  エンティティの名前。  
  EntityReference 
  参照されたエンティティの名前。  
  Notation 
  表記名。  
  ProcessingInstruction 
  処理命令の対象。  
  テキスト 
  #text 
  Whitespace 
  #whitespace 
  SignificantWhitespace 
  #significant-whitespace 
  XmlDeclaration 
  #xml-declaration</returns>
    </member>
    <member name="P:System.Xml.XmlNode.NamespaceURI">
      <summary vsli:raw="Gets the namespace URI of this node.">このノードの名前空間 URI を取得します。</summary>
      <returns vsli:raw="The namespace URI of this node. If there is no namespace URI, this property returns String.Empty.">このノードの名前空間 URI。 名前空間 URI がない場合、このプロパティは String.Empty を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.NextSibling">
      <summary vsli:raw="Gets the node immediately following this node.">このノードの直後のノードを取得します。</summary>
      <returns vsli:raw="The next &lt;see langword=&quot;XmlNode&quot; /&gt;. If there is no next node, &lt;see langword=&quot;null&quot; /&gt; is returned.">次の <see langword="XmlNode" />。 次のノードがない場合は、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.NodeType">
      <summary vsli:raw="Gets the type of the current node, when overridden in a derived class.">派生クラスでオーバーライドされている場合は、現在のノードの型を取得します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.XmlNodeType&quot; /&gt; values.">
        <see cref="T:System.Xml.XmlNodeType" /> 値のいずれか 1 つ。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.Normalize">
      <summary vsli:raw="Puts all XmlText nodes in the full depth of the sub-tree underneath this XmlNode into a &quot;normal&quot; form where only markup (that is, tags, comments, processing instructions, CDATA sections, and entity references) separates XmlText nodes, that is, there are no adjacent XmlText nodes.">この XmlNode の一番下のサブツリーまで含め、すべての XmlText ノードをマークアップ (タグ、コメント、処理命令、CDATA セクション、およびエンティティ参照) だけが XmlText ノードを区分する "通常の" 書式にします。したがって、隣接する XmlText ノードはありません。</summary>
    </member>
    <member name="P:System.Xml.XmlNode.OuterXml">
      <summary vsli:raw="Gets the markup containing this node and all its child nodes.">このノードとそのすべての子ノードを格納しているマークアップを取得します。</summary>
      <returns vsli:raw="The markup containing this node and all its child nodes, not including default attributes.">このノードとそのすべての子ノードを格納しているマークアップ。  
 <see langword="OuterXml" /> は既定の属性を返しません。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.OwnerDocument">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; to which this node belongs.">このノードが属する <see cref="T:System.Xml.XmlDocument" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; to which this node belongs.  &#xA;  &#xA; If the node is an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; (NodeType equals XmlNodeType.Document), this property returns &lt;see langword=&quot;null&quot; /&gt;.">このノードが属する <see cref="T:System.Xml.XmlDocument" />。  
ノードが <see cref="T:System.Xml.XmlDocument" /> (NodeType が XmlNodeType.Document と等しい) の場合、このプロパティは <see langword="null" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.ParentNode">
      <summary vsli:raw="Gets the parent of this node (for nodes that can have parents).">このノードの親 (親を持つノードの場合) を取得します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlNode&quot; /&gt; that is the parent of the current node. If a node has just been created and not yet added to the tree, or if it has been removed from the tree, the parent is &lt;see langword=&quot;null&quot; /&gt;. For all other nodes, the value returned depends on the &lt;see cref=&quot;P:System.Xml.XmlNode.NodeType&quot; /&gt; of the node. The following table describes the possible return values for the &lt;see langword=&quot;ParentNode&quot; /&gt; property.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; NodeType&lt;/term&gt;&lt;description&gt; Return Value of ParentNode&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Attribute, Document, DocumentFragment, Entity, Notation&lt;/term&gt;&lt;description&gt; Returns &lt;see langword=&quot;null&quot; /&gt;; these nodes do not have parents.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; CDATA&lt;/term&gt;&lt;description&gt; Returns the element or entity reference containing the CDATA section.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Comment&lt;/term&gt;&lt;description&gt; Returns the element, entity reference, document type, or document containing the comment.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DocumentType&lt;/term&gt;&lt;description&gt; Returns the document node.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Element&lt;/term&gt;&lt;description&gt; Returns the parent node of the element. If the element is the root node in the tree, the parent is the document node.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; EntityReference&lt;/term&gt;&lt;description&gt; Returns the element, attribute, or entity reference containing the entity reference.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; ProcessingInstruction&lt;/term&gt;&lt;description&gt; Returns the document, element, document type, or entity reference containing the processing instruction.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Text&lt;/term&gt;&lt;description&gt; Returns the parent element, attribute, or entity reference containing the text node.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">現在のノードの親である <see langword="XmlNode" />。 ノードが作成された直後でまだツリーに追加されていない場合や、ノードがツリーから削除された場合、親は <see langword="null" /> です。 他のすべてのノードについては、返される値はノードの <see cref="P:System.Xml.XmlNode.NodeType" /> によって異なります。 <see langword="ParentNode" /> プロパティの使用可能な戻り値を次の表に示します。  
  ノード型 
  ParentNode の戻り値。 
  Attribute、Document、DocumentFragment、Entity、Notation 
  <see langword="null" /> を返します。これらのノードには親がありません。  

  CDATA 
  CDATA セクションを含む要素またはエンティティ参照を返します。  

  コメント 
  コメントを含む要素、エンティティ参照、ドキュメントの種類、またはドキュメントを返します。  

  DocumentType 
  ドキュメント ノードを返します。  

  要素 
  要素の親ノードを返します。 要素がツリーにおいてルート ノードである場合、親はドキュメント ノードです。  

  EntityReference 
  エンティティ参照を含む要素、属性、またはエンティティ参照を返します。  

  ProcessingInstruction 
  処理命令を含むドキュメント、要素、ドキュメントの種類、またはエンティティ参照を返します。  

  テキスト 
  テキスト ノードを含む親要素、属性、またはエンティティ参照を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.Prefix">
      <summary vsli:raw="Gets or sets the namespace prefix of this node.">このノードの名前空間プリフィックスを取得または設定します。</summary>
      <returns vsli:raw="The namespace prefix of this node. For example, &lt;see langword=&quot;Prefix&quot; /&gt; is bk for the element &amp;lt;bk:book&amp;gt;. If there is no prefix, this property returns String.Empty.">このノードの名前空間プリフィックス。 たとえば、 <see langword="Prefix" />は要素&lt;bk: book&gt;の bk です。 プリフィックスがない場合、このプロパティは String.Empty を返します。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="This node is read-only.">このノードは読み取り専用です。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The specified prefix contains an invalid character.  &#xA;  &#xA; The specified prefix is malformed.  &#xA;  &#xA; The specified prefix is &quot;xml&quot; and the namespaceURI of this node is different from &quot;http://www.w3.org/XML/1998/namespace&quot;.  &#xA;  &#xA; This node is an attribute and the specified prefix is &quot;xmlns&quot; and the namespaceURI of this node is different from &quot;http://www.w3.org/2000/xmlns/ &quot;.  &#xA;  &#xA; This node is an attribute and the qualifiedName of this node is &quot;xmlns&quot;.">指定したプレフィックスに無効な文字が含まれています。  
 指定されたプリフィックスの書式が正しくありません。  
 指定したプレフィックスが "xml" であり、このノードの namespaceURI が "http://www.w3.org/XML/1998/namespace" と異なっています。  
 このノードが属性で、指定したプレフィックスが "xmlns" で、このノードの namespaceURI が "http://www.w3.org/2000/xmlns/" と異なります。  
 このノードが属性で、このノードの qualifiedName が "xmlns" です。</exception>
    </member>
    <member name="M:System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)">
      <summary vsli:raw="Adds the specified node to the beginning of the list of child nodes for this node.">このノードの子ノードのリストの先頭に、指定したノードを追加します。</summary>
      <param name="newChild" vsli:raw="The node to add. All the contents of the node to be added are moved into the specified location.">追加するノード。 追加するノードのすべての内容が、指定した場所に移動します。</param>
      <returns vsli:raw="The node added.">追加されたノード。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This node is of a type that does not allow child nodes of the type of the &lt;paramref name=&quot;newChild&quot; /&gt; node.  &#xA;  &#xA; The &lt;paramref name=&quot;newChild&quot; /&gt; is an ancestor of this node.">このノードは、<paramref name="newChild" /> ノードの型の子ノードが許可されない型です。  
<paramref name="newChild" /> がこのノードの先祖です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;newChild&quot; /&gt; was created from a different document than the one that created this node.  &#xA;  &#xA; This node is read-only.">
        <paramref name="newChild" /> は、このノードを作成したドキュメントとは異なるドキュメントから作成されました。  
このノードは読み取り専用です。</exception>
    </member>
    <member name="P:System.Xml.XmlNode.PreviousSibling">
      <summary vsli:raw="Gets the node immediately preceding this node.">このノードの直前のノードを取得します。</summary>
      <returns vsli:raw="The preceding &lt;see langword=&quot;XmlNode&quot; /&gt;. If there is no preceding node, &lt;see langword=&quot;null&quot; /&gt; is returned.">直前の <see langword="XmlNode" />。 直前のノードがない場合は、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.PreviousText">
      <summary vsli:raw="Gets the text node that immediately precedes this node.">このノードの直前にあるテキスト ノードを取得します。</summary>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt;.">
        <see cref="T:System.Xml.XmlNode" /> を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.RemoveAll">
      <summary vsli:raw="Removes all the child nodes and/or attributes of the current node.">現在のノードのすべての子ノードと属性の両方、またはそのいずれかを削除します。</summary>
    </member>
    <member name="M:System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)">
      <summary vsli:raw="Removes specified child node.">指定した子ノードを削除します。</summary>
      <param name="oldChild" vsli:raw="The node being removed.">削除されるノード。</param>
      <returns vsli:raw="The node removed.">削除されたノード。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;oldChild&quot; /&gt; is not a child of this node. Or this node is read-only.">
        <paramref name="oldChild" /> がこのノードの子ではありません。 または、このノードが読み取り専用です。</exception>
    </member>
    <member name="M:System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary vsli:raw="Replaces the child node &lt;paramref name=&quot;oldChild&quot; /&gt; with &lt;paramref name=&quot;newChild&quot; /&gt; node.">子ノード <paramref name="oldChild" /> を <paramref name="newChild" /> ノードに置き換えます。</summary>
      <param name="newChild" vsli:raw="The new node to put in the child list.">子リストに入れる新しいノード。</param>
      <param name="oldChild" vsli:raw="The node being replaced in the list.">リスト内の置換されるノード。</param>
      <returns vsli:raw="The node replaced.">置き換えられたノード。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This node is of a type that does not allow child nodes of the type of the &lt;paramref name=&quot;newChild&quot; /&gt; node.  &#xA;  &#xA; The &lt;paramref name=&quot;newChild&quot; /&gt; is an ancestor of this node.">このノードは、<paramref name="newChild" /> ノードの型の子ノードが許可されない型です。  
<paramref name="newChild" /> がこのノードの先祖です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;newChild&quot; /&gt; was created from a different document than the one that created this node.  &#xA;  &#xA; This node is read-only.  &#xA;  &#xA; The &lt;paramref name=&quot;oldChild&quot; /&gt; is not a child of this node.">
        <paramref name="newChild" /> は、このノードを作成したドキュメントとは異なるドキュメントから作成されました。  
このノードは読み取り専用です。  
<paramref name="oldChild" /> がこのノードの子ではありません。</exception>
    </member>
    <member name="P:System.Xml.XmlNode.SchemaInfo">
      <summary vsli:raw="Gets the post schema validation infoset that has been assigned to this node as a result of schema validation.">スキーマ検証の結果、このノードに割り当てられているスキーマ検証後の infoset を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.IXmlSchemaInfo&quot; /&gt; object containing the post schema validation infoset of this node.">このノードのスキーマ検証後の infoset が格納された <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.SelectNodes(System.String)">
      <summary vsli:raw="Selects a list of nodes matching the XPath expression.">XPath 式と一致するノードのリストを選択します。</summary>
      <param name="xpath" vsli:raw="The XPath expression.">XPath 式。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNodeList&quot; /&gt; containing a collection of nodes matching the XPath query.">XPath クエリと一致するノードのコレクションを格納している <see cref="T:System.Xml.XmlNodeList" />。</returns>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression contains a prefix. See XPath Examples.">XPath 式にプリフィックスが含まれています。 「XPath の例」をご覧ください。</exception>
    </member>
    <member name="M:System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)">
      <summary vsli:raw="Selects a list of nodes matching the XPath expression. Any prefixes found in the XPath expression are resolved using the supplied &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;.">XPath 式と一致するノードのリストを選択します。 XPath 式で見つかったプリフィックスは、指定した <see cref="T:System.Xml.XmlNamespaceManager" /> を使用して解決されます。</summary>
      <param name="xpath" vsli:raw="The XPath expression. See XPath Examples.">XPath 式。 「XPath の例」をご覧ください。</param>
      <param name="nsmgr" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; to use for resolving namespaces for prefixes in the XPath expression.">XPath 式のプリフィックスの名前空間を解決するために使用する <see cref="T:System.Xml.XmlNamespaceManager" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNodeList&quot; /&gt; containing a collection of nodes matching the XPath query.">XPath クエリと一致するノードのコレクションを格納している <see cref="T:System.Xml.XmlNodeList" />。</returns>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression contains a prefix which is not defined in the &lt;see langword=&quot;XmlNamespaceManager&quot; /&gt;.">XPath 式に、<see langword="XmlNamespaceManager" /> で定義されていないプリフィックスが含まれています。</exception>
    </member>
    <member name="M:System.Xml.XmlNode.SelectSingleNode(System.String)">
      <summary vsli:raw="Selects the first &lt;see langword=&quot;XmlNode&quot; /&gt; that matches the XPath expression.">XPath 式と一致する最初の <see langword="XmlNode" /> を選択します。</summary>
      <param name="xpath" vsli:raw="The XPath expression. See XPath Examples.">XPath 式。 「XPath の例」をご覧ください。</param>
      <returns vsli:raw="The first &lt;see langword=&quot;XmlNode&quot; /&gt; that matches the XPath query or &lt;see langword=&quot;null&quot; /&gt; if no matching node is found.">XPath クエリと一致する最初の <see langword="XmlNode" />。一致するノードが見つからない場合は <see langword="null" />。</returns>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression contains a prefix.">XPath 式にプリフィックスが含まれています。</exception>
    </member>
    <member name="M:System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)">
      <summary vsli:raw="Selects the first &lt;see langword=&quot;XmlNode&quot; /&gt; that matches the XPath expression. Any prefixes found in the XPath expression are resolved using the supplied &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;.">XPath 式と一致する最初の <see langword="XmlNode" /> を選択します。 XPath 式で見つかったプリフィックスは、指定した <see cref="T:System.Xml.XmlNamespaceManager" /> を使用して解決されます。</summary>
      <param name="xpath" vsli:raw="The XPath expression. See XPath Examples.">XPath 式。 「XPath の例」をご覧ください。</param>
      <param name="nsmgr" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; to use for resolving namespaces for prefixes in the XPath expression.">XPath 式のプリフィックスの名前空間を解決するために使用する <see cref="T:System.Xml.XmlNamespaceManager" />。</param>
      <returns vsli:raw="The first &lt;see langword=&quot;XmlNode&quot; /&gt; that matches the XPath query or &lt;see langword=&quot;null&quot; /&gt; if no matching node is found.">XPath クエリと一致する最初の <see langword="XmlNode" />。一致するノードが見つからない場合は <see langword="null" />。</returns>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression contains a prefix which is not defined in the &lt;see langword=&quot;XmlNamespaceManager&quot; /&gt;.">XPath 式に、<see langword="XmlNamespaceManager" /> で定義されていないプリフィックスが含まれています。</exception>
    </member>
    <member name="M:System.Xml.XmlNode.Supports(System.String,System.String)">
      <summary vsli:raw="Tests if the DOM implementation implements a specific feature.">DOM 実装が特定の機能を実装するかどうかをテストします。</summary>
      <param name="feature" vsli:raw="The package name of the feature to test. This name is not case-sensitive.">テスト対象の機能のパッケージ名。 この名前は大文字と小文字を区別しません。</param>
      <param name="version" vsli:raw="The version number of the package name to test. If the version is not specified (null), supporting any version of the feature causes the method to return true.">テストする対象のパッケージ名のバージョン番号。 バージョンを指定しない場合、つまりバージョンが null の場合は、いずれかのバージョンの機能がサポートされていれば、メソッドは true を返します。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the feature is implemented in the specified version; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The following table describes the combinations that return &lt;see langword=&quot;true&quot; /&gt;.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Feature&lt;/term&gt;&lt;description&gt; Version&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; XML&lt;/term&gt;&lt;description&gt; 1.0&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; XML&lt;/term&gt;&lt;description&gt; 2.0&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">指定したバージョンでその機能が実装される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="true" /> を返す組み合わせを次の表に示します。  
  機能 
  Version 
  XML 
  1 
  XML 
  2.0</returns>
    </member>
    <member name="M:System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.XmlNode.GetEnumerator&quot; /&gt;.">このメンバーの詳細については、「<see cref="M:System.Xml.XmlNode.GetEnumerator" />」をご覧ください。</summary>
      <returns vsli:raw="An enumerator for the collection.">コレクションの列挙子。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.System#ICloneable#Clone">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.XmlNode.Clone&quot; /&gt;.">このメンバーの詳細については、「<see cref="M:System.Xml.XmlNode.Clone" />」をご覧ください。</summary>
      <returns vsli:raw="A copy of the node from which it is called.">ノードの呼び出し元ノードのコピー。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.Value">
      <summary vsli:raw="Gets or sets the value of the node.">ノードの値を取得または設定します。</summary>
      <returns vsli:raw="The value returned depends on the &lt;see cref=&quot;P:System.Xml.XmlNode.NodeType&quot; /&gt; of the node:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Type&lt;/term&gt;&lt;description&gt; Value&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Attribute&lt;/term&gt;&lt;description&gt; The value of the attribute.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; CDATASection&lt;/term&gt;&lt;description&gt; The content of the CDATA Section.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Comment&lt;/term&gt;&lt;description&gt; The content of the comment.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Document&lt;/term&gt;&lt;description&gt;&lt;see langword=&quot;null&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DocumentFragment&lt;/term&gt;&lt;description&gt;&lt;see langword=&quot;null&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DocumentType&lt;/term&gt;&lt;description&gt;&lt;see langword=&quot;null&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Element&lt;/term&gt;&lt;description&gt;&lt;see langword=&quot;null&quot; /&gt;. You can use the &lt;see cref=&quot;P:System.Xml.XmlElement.InnerText&quot; /&gt; or &lt;see cref=&quot;P:System.Xml.XmlElement.InnerXml&quot; /&gt; properties to access the value of the element node.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Entity&lt;/term&gt;&lt;description&gt;&lt;see langword=&quot;null&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; EntityReference&lt;/term&gt;&lt;description&gt;&lt;see langword=&quot;null&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Notation&lt;/term&gt;&lt;description&gt;&lt;see langword=&quot;null&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; ProcessingInstruction&lt;/term&gt;&lt;description&gt; The entire content excluding the target.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Text&lt;/term&gt;&lt;description&gt; The content of the text node.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; SignificantWhitespace&lt;/term&gt;&lt;description&gt; The white space characters. White space can consist of one or more space characters, carriage returns, line feeds, or tabs.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Whitespace&lt;/term&gt;&lt;description&gt; The white space characters. White space can consist of one or more space characters, carriage returns, line feeds, or tabs.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; XmlDeclaration&lt;/term&gt;&lt;description&gt; The content of the declaration (that is, everything between &amp;lt;?xml and ?&amp;gt;).&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">返される値は、ノードの <see cref="P:System.Xml.XmlNode.NodeType" /> によって異なります。 
  型 
  [値] 
  属性 
  属性の値。  
  CDATASection 
  CDATA セクションの内容。  
  コメント 
  コメントの内容。  
  ドキュメント 
 <see langword="null" />。  
  DocumentFragment 
 <see langword="null" />。  
  DocumentType 
 <see langword="null" />。  
  要素 
 <see langword="null" />。 <see cref="P:System.Xml.XmlElement.InnerText" /> プロパティまたは <see cref="P:System.Xml.XmlElement.InnerXml" /> プロパティを使用すると、要素ノードの値にアクセスできます。  
  エンティティ 
 <see langword="null" />。  
  EntityReference 
 <see langword="null" />。  
  Notation 
 <see langword="null" />。  
  ProcessingInstruction 
  ターゲットを含まない全体の内容。  
  テキスト 
  テキスト ノードの内容。  
  SignificantWhitespace 
  空白文字。 空白は、1 つ以上の空白文字、キャリッジ リターン、ライン フィード、またはタブによって構成できます。  
  Whitespace 
  空白文字。 空白は、1 つ以上の空白文字、キャリッジ リターン、ライン フィード、またはタブによって構成できます。  
  XmlDeclaration 
  宣言の内容 (? xml と? &lt;&gt;の間のすべての要素)。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Setting the value of a node that is read-only.">読み取り専用のノードの値を設定します。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Setting the value of a node that is not supposed to have a value (for example, an Element node).">値がないと想定されているノード (Element ノードなど) の値を設定します。</exception>
    </member>
    <member name="M:System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves all the child nodes of the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;, when overridden in a derived class.">派生クラスでオーバーライドされた場合は、指定した <see cref="T:System.Xml.XmlWriter" /> にノードのすべての子ノードを保存します。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the current node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;, when overridden in a derived class.">派生クラスでオーバーライドされた場合は、指定した <see cref="T:System.Xml.XmlWriter" /> に現在のノードを保存します。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlNodeChangedAction">
      <summary vsli:raw="Specifies the type of node change.">ノード変更の型を指定します。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Change">
      <summary vsli:raw="A node value is being changed.">ノード値が変更されています。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Insert">
      <summary vsli:raw="A node is being inserted in the tree.">ノードがツリーに挿入されています。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Remove">
      <summary vsli:raw="A node is being removed from the tree.">ノードがツリーから削除されています。</summary>
    </member>
    <member name="T:System.Xml.XmlNodeChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeChanged&quot; /&gt;, &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeChanging&quot; /&gt;, &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeInserted&quot; /&gt;, &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeInserting&quot; /&gt;, &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeRemoved&quot; /&gt; and &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeRemoving&quot; /&gt; events.">
        <see cref="E:System.Xml.XmlDocument.NodeChanged" />、<see cref="E:System.Xml.XmlDocument.NodeChanging" />、<see cref="E:System.Xml.XmlDocument.NodeInserted" />、<see cref="E:System.Xml.XmlDocument.NodeInserting" />、<see cref="E:System.Xml.XmlDocument.NodeRemoved" />、<see cref="E:System.Xml.XmlDocument.NodeRemoving" /> の各イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeChangedEventArgs.#ctor(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode,System.String,System.String,System.Xml.XmlNodeChangedAction)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlNodeChangedEventArgs&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlNodeChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="node" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; that generated the event.">イベントの生成元の <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="oldParent" vsli:raw="The old parent &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; of the &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; that generated the event.">イベントを生成した <see cref="T:System.Xml.XmlNode" /> の以前の親 <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="newParent" vsli:raw="The new parent &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; of the &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; that generated the event.">イベントを生成した <see cref="T:System.Xml.XmlNode" /> の新しい親 <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="oldValue" vsli:raw="The old value of the &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; that generated the event.">イベントを生成した <see cref="T:System.Xml.XmlNode" /> の以前の値。</param>
      <param name="newValue" vsli:raw="The new value of the &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; that generated the event.">イベントを生成した <see cref="T:System.Xml.XmlNode" /> の新しい値。</param>
      <param name="action" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNodeChangedAction&quot; /&gt;.">
        <see cref="T:System.Xml.XmlNodeChangedAction" />。</param>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.Action">
      <summary vsli:raw="Gets a value indicating what type of node change event is occurring.">発生しているノード変更イベントの型を示す値を取得します。</summary>
      <returns vsli:raw="One of the enumeration values that describes the node change event. The &lt;see langword=&quot;Action&quot; /&gt; value does not differentiate between when the event occurred (before or after). You can create separate event handlers to handle both instances.">ノード変更イベントを説明する列挙値の1つ。 <see langword="Action" /> 値は、イベントがいつ発生したか、つまり発生前であるか発生後であるかを区別しません。 イベント ハンドラーを個別に作成して、両方のインスタンスを処理できます。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.NewParent">
      <summary vsli:raw="Gets the value of the &lt;see cref=&quot;P:System.Xml.XmlNode.ParentNode&quot; /&gt; after the operation completes.">操作を完了した後の <see cref="P:System.Xml.XmlNode.ParentNode" /> の値を取得します。</summary>
      <returns vsli:raw="The value of the &lt;see langword=&quot;ParentNode&quot; /&gt; after the operation completes. This property returns &lt;see langword=&quot;null&quot; /&gt; if the node is being removed. For attribute nodes, this property returns the &lt;see cref=&quot;P:System.Xml.XmlAttribute.OwnerElement&quot; /&gt;.">操作を完了した後の <see langword="ParentNode" /> の値。 ノードが削除されている場合、このプロパティは <see langword="null" /> を返します。  
   
 属性ノードの場合、このプロパティは <see cref="P:System.Xml.XmlAttribute.OwnerElement" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.NewValue">
      <summary vsli:raw="Gets the new value of the node.">ノードの新しい値を取得します。</summary>
      <returns vsli:raw="The new value of the node. This property returns &lt;see langword=&quot;null&quot; /&gt; if the node is neither an attribute nor a text node, or if the node is being removed.  &#xA;  &#xA; If called in a &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeChanging&quot; /&gt; event, &lt;see langword=&quot;NewValue&quot; /&gt; returns the value of the node if the change is successful. If called in a &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeChanged&quot; /&gt; event, &lt;see langword=&quot;NewValue&quot; /&gt; returns the current value of the node.">ノードの新しい値。 ノードが属性ノードでもテキスト ノードでもない場合、またはノードが削除されている場合、このプロパティは <see langword="null" /> を返します。  
<see cref="E:System.Xml.XmlDocument.NodeChanging" /> イベントで呼び出された場合、<see langword="NewValue" /> は変更が成功したときにノードの値を返します。 <see cref="E:System.Xml.XmlDocument.NodeChanged" /> イベントで呼び出された場合、<see langword="NewValue" /> はノードの現在の値を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.Node">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; that is being added, removed or changed.">追加、削除、または変更されている <see cref="T:System.Xml.XmlNode" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlNode&quot; /&gt; that is being added, removed or changed; this property never returns &lt;see langword=&quot;null&quot; /&gt;.">追加、削除、または変更されている <see langword="XmlNode" />。このプロパティは <see langword="null" /> を返しません。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.OldParent">
      <summary vsli:raw="Gets the value of the &lt;see cref=&quot;P:System.Xml.XmlNode.ParentNode&quot; /&gt; before the operation began.">操作を開始する前の <see cref="P:System.Xml.XmlNode.ParentNode" /> の値を取得します。</summary>
      <returns vsli:raw="The value of the &lt;see langword=&quot;ParentNode&quot; /&gt; before the operation began. This property returns &lt;see langword=&quot;null&quot; /&gt; if the node did not have a parent. For attribute nodes, this property returns the &lt;see cref=&quot;P:System.Xml.XmlAttribute.OwnerElement&quot; /&gt;.">操作を開始する前の <see langword="ParentNode" /> の値。 ノードに親がなかった場合、このプロパティは <see langword="null" /> を返します。  
   
 属性ノードの場合、このプロパティは <see cref="P:System.Xml.XmlAttribute.OwnerElement" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.OldValue">
      <summary vsli:raw="Gets the original value of the node.">ノードの元の値を取得します。</summary>
      <returns vsli:raw="The original value of the node. This property returns &lt;see langword=&quot;null&quot; /&gt; if the node is neither an attribute nor a text node, or if the node is being inserted.  &#xA;  &#xA; If called in a &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeChanging&quot; /&gt; event, &lt;see langword=&quot;OldValue&quot; /&gt; returns the current value of the node that will be replaced if the change is successful. If called in a &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeChanged&quot; /&gt; event, &lt;see langword=&quot;OldValue&quot; /&gt; returns the value of node prior to the change.">ノードの元の値。 ノードが属性ノードでもテキスト ノードでもない場合、またはノードが挿入されている場合、このプロパティは <see langword="null" /> を返します。  
<see cref="E:System.Xml.XmlDocument.NodeChanging" /> イベントで呼び出された場合、<see langword="OldValue" /> は変更が成功したときに置き換えられるノードの現在の値を返します。 <see cref="E:System.Xml.XmlDocument.NodeChanged" /> イベントで呼び出された場合、<see langword="OldValue" /> は変更前のノードの値を返します。</returns>
    </member>
    <member name="T:System.Xml.XmlNodeChangedEventHandler">
      <summary vsli:raw="Represents the method that handles &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeChanged&quot; /&gt;, &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeChanging&quot; /&gt;, &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeInserted&quot; /&gt;, &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeInserting&quot; /&gt;, &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeRemoved&quot; /&gt; and &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeRemoving&quot; /&gt; events.">
        <see cref="E:System.Xml.XmlDocument.NodeChanged" />、<see cref="E:System.Xml.XmlDocument.NodeChanging" />、<see cref="E:System.Xml.XmlDocument.NodeInserted" />、<see cref="E:System.Xml.XmlDocument.NodeInserting" />、<see cref="E:System.Xml.XmlDocument.NodeRemoved" />、<see cref="E:System.Xml.XmlDocument.NodeRemoving" /> の各イベントを処理するメソッドを表します。</summary>
      <param name="sender" vsli:raw="The source of the event.">イベントのソース。</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNodeChangedEventArgs&quot; /&gt; containing the event data.">イベント データを格納している <see cref="T:System.Xml.XmlNodeChangedEventArgs" />。</param>
    </member>
    <member name="T:System.Xml.XmlNodeList">
      <summary vsli:raw="Represents an ordered collection of nodes.">順序の付いたノードのコレクションを表します。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeList.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlNodeList&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlNodeList" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.XmlNodeList.Count">
      <summary vsli:raw="Gets the number of nodes in the &lt;see langword=&quot;XmlNodeList&quot; /&gt;.">
        <see langword="XmlNodeList" /> 内のノードの数を取得します。</summary>
      <returns vsli:raw="The number of nodes in the &lt;see langword=&quot;XmlNodeList&quot; /&gt;.">
        <see langword="XmlNodeList" /> に含まれるノードの数。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeList.GetEnumerator">
      <summary vsli:raw="Gets an enumerator that iterates through the collection of nodes.">ノードを反復処理する列挙子を取得します。</summary>
      <returns vsli:raw="An enumerator used to iterate through the collection of nodes.">ノードのコレクションを反復処理するために使用される列挙子。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeList.Item(System.Int32)">
      <summary vsli:raw="Retrieves a node at the given index.">指定したインデックス位置にあるノードを取得します。</summary>
      <param name="index" vsli:raw="The zero-based index into the list of nodes.">ノードのリストの 0 から始まるインデックス番号。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; with the specified index in the collection. If &lt;paramref name=&quot;index&quot; /&gt; is greater than or equal to the number of nodes in the list, this returns &lt;see langword=&quot;null&quot; /&gt;.">コレクション内の指定したインデックスに関連付けられている <see cref="T:System.Xml.XmlNode" />。 <paramref name="index" /> がリスト内のノード数以上の場合は、<see langword="null" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeList.ItemOf(System.Int32)">
      <summary vsli:raw="Gets a node at the given index.">指定したインデックス位置にあるノードを取得します。</summary>
      <param name="i" vsli:raw="The zero-based index into the list of nodes.">ノードのリストの 0 から始まるインデックス番号。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; with the specified index in the collection. If index is greater than or equal to the number of nodes in the list, this returns &lt;see langword=&quot;null&quot; /&gt;.">コレクション内の指定したインデックスに関連付けられている <see cref="T:System.Xml.XmlNode" />。 インデックスがリスト内のノード数以上の場合は、<see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeList.PrivateDisposeNodeList">
      <summary vsli:raw="Disposes resources in the node list privately.">ノード リスト内のリソースをプライベートに破棄します。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeList.System#IDisposable#Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Xml.XmlNodeList&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlNodeList" /> クラスによって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="T:System.Xml.XmlNodeOrder">
      <summary vsli:raw="Describes the document order of a node compared to a second node.">ノードのドキュメント順を 2 番目のノードと比較して記述します。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.After">
      <summary vsli:raw="The current node of this navigator is after the current node of the supplied navigator.">このナビゲーターの現在のノードが、提供されたナビゲーターの現在のノードの後にあります。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Before">
      <summary vsli:raw="The current node of this navigator is before the current node of the supplied navigator.">このナビゲーターの現在のノードが、提供されたナビゲーターの現在のノードの前にあります。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Same">
      <summary vsli:raw="The two navigators are positioned on the same node.">2 つのナビゲーターが同じノードに配置されています。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Unknown">
      <summary vsli:raw="The node positions cannot be determined in document order, relative to each other. This could occur if the two nodes reside in different trees.">ノードの位置は、互いを基準にしてドキュメント順に比較できません。 2 つのノードが別のツリーにある場合は比較できます。</summary>
    </member>
    <member name="T:System.Xml.XmlNodeReader">
      <summary vsli:raw="Represents a reader that provides fast, non-cached forward only access to XML data in an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt;.">
        <see cref="T:System.Xml.XmlNode" /> 内の XML データに対する、高速で非キャッシュの前方向アクセスを提供するリーダーを表します。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeReader.#ctor(System.Xml.XmlNode)">
      <summary vsli:raw="Creates an instance of the &lt;see langword=&quot;XmlNodeReader&quot; /&gt; class using the specified &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt;.">指定した <see cref="T:System.Xml.XmlNode" /> を使用して <see langword="XmlNodeReader" /> クラスのインスタンスを作成します。</summary>
      <param name="node" vsli:raw="The &lt;see langword=&quot;XmlNode&quot; /&gt; you want to read.">読み取る対象の <see langword="XmlNode" />。</param>
    </member>
    <member name="P:System.Xml.XmlNodeReader.AttributeCount">
      <summary vsli:raw="Gets the number of attributes on the current node.">現在のノードにある属性の数を取得します。</summary>
      <returns vsli:raw="The number of attributes on the current node. This number includes default attributes.">現在のノードにある属性の数。 この属性数には、既定の属性も含まれます。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.BaseURI">
      <summary vsli:raw="Gets the base URI of the current node.">現在のノードのベース URI を取得します。</summary>
      <returns vsli:raw="The base URI of the current node.">現在のノードのベース URI。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.CanReadBinaryContent">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Xml.XmlNodeReader&quot; /&gt; implements the binary content read methods.">
        <see cref="T:System.Xml.XmlNodeReader" /> がバイナリ コンテンツ用の読み取りメソッドを実装するかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the binary content read methods are implemented; otherwise &lt;see langword=&quot;false&quot; /&gt;. The &lt;see cref=&quot;T:System.Xml.XmlNodeReader&quot; /&gt; class always returns &lt;see langword=&quot;true&quot; /&gt;.">バイナリ コンテンツ用の読み取りメソッドを実装する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see cref="T:System.Xml.XmlNodeReader" /> クラスは、常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.CanResolveEntity">
      <summary vsli:raw="Gets a value indicating whether this reader can parse and resolve entities.">このリーダーがエンティティを解析および解決できるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader can parse and resolve entities; otherwise, &lt;see langword=&quot;false&quot; /&gt;. &lt;see langword=&quot;XmlNodeReader&quot; /&gt; always returns &lt;see langword=&quot;true&quot; /&gt;.">リーダーがエンティティを解析および解決できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="XmlNodeReader" /> は常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Close">
      <summary vsli:raw="Changes the &lt;see cref=&quot;P:System.Xml.XmlNodeReader.ReadState&quot; /&gt; to &lt;see langword=&quot;Closed&quot; /&gt;.">
        <see cref="P:System.Xml.XmlNodeReader.ReadState" /> を <see langword="Closed" /> に変更します。</summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Depth">
      <summary vsli:raw="Gets the depth of the current node in the XML document.">XML ドキュメント内の現在のノードの深さを取得します。</summary>
      <returns vsli:raw="The depth of the current node in the XML document.">XML ドキュメント内の現在のノードの深さ。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.EOF">
      <summary vsli:raw="Gets a value indicating whether the reader is positioned at the end of the stream.">リーダーがストリームの末尾に配置されているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is positioned at the end of the stream; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">ストリームの末尾にリーダーが配置されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.Int32)">
      <summary vsli:raw="Gets the value of the attribute with the specified index.">指定したインデックスの属性の値を取得します。</summary>
      <param name="attributeIndex" vsli:raw="The index of the attribute. The index is zero-based. (The first attribute has index 0.)">属性のインデックス。 インデックスの値は、0 から始まります。 最初の属性のインデックスは 0 です。</param>
      <returns vsli:raw="The value of the specified attribute.">指定した属性の値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;i&quot; /&gt; parameter is less than 0 or greater than or equal to &lt;see cref=&quot;P:System.Xml.XmlNodeReader.AttributeCount&quot; /&gt;.">
        <paramref name="i" /> パラメーターが 0 未満か、<see cref="P:System.Xml.XmlNodeReader.AttributeCount" /> 以上です。</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.String)">
      <summary vsli:raw="Gets the value of the attribute with the specified name.">指定した名前の属性の値を取得します。</summary>
      <param name="name" vsli:raw="The qualified name of the attribute.">属性の限定名。</param>
      <returns vsli:raw="The value of the specified attribute. If the attribute is not found, &lt;see langword=&quot;null&quot; /&gt; is returned.">指定した属性の値。 指定した属性が見つからない場合は <see langword="null" /> が返されます。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.String,System.String)">
      <summary vsli:raw="Gets the value of the attribute with the specified local name and namespace URI.">指定したローカル名および名前空間 URI に関連付けられた属性の値を取得します。</summary>
      <param name="name" vsli:raw="The local name of the attribute.">属性のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute.">属性の名前空間 URI。</param>
      <returns vsli:raw="The value of the specified attribute. If the attribute is not found, &lt;see langword=&quot;null&quot; /&gt; is returned.">指定した属性の値。 指定した属性が見つからない場合は <see langword="null" /> が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.HasAttributes">
      <summary vsli:raw="Gets a value indicating whether the current node has any attributes.">現在のノードに属性があるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node has attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のノードが属性を持っている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.HasValue">
      <summary vsli:raw="Gets a value indicating whether the current node can have a &lt;see cref=&quot;P:System.Xml.XmlNodeReader.Value&quot; /&gt;.">現在のノードが <see cref="P:System.Xml.XmlNodeReader.Value" /> を持つことができるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node on which the reader is currently positioned can have a &lt;see langword=&quot;Value&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">リーダーが現在配置されているノードが <see langword="Value" /> を持つことができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.IsDefault">
      <summary vsli:raw="Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the document type definition (DTD) or schema.">現在のノードがドキュメント型定義 (DTD) またはスキーマで定義された既定値から生成された属性かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node is an attribute whose value was generated from the default value defined in the DTD or schema; &lt;see langword=&quot;false&quot; /&gt; if the attribute value was explicitly set.">現在のノードが、DTD またはスキーマで定義された既定値から生成された値を持つ属性である場合は <see langword="true" />。属性値が明示的に設定された場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.IsEmptyElement">
      <summary vsli:raw="Gets a value indicating whether the current node is an empty element (for example, &lt;c&gt;&amp;lt;MyElement/&amp;gt;&lt;/c&gt;).">現在のノードが空の要素 (<c>&lt;MyElement/&gt;</c> など) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node is an element (&lt;see cref=&quot;P:System.Xml.XmlNodeReader.NodeType&quot; /&gt; equals &lt;see langword=&quot;XmlNodeType.Element&quot; /&gt;) and it ends with &lt;c&gt;/&amp;gt;&lt;/c&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />現在<see cref="P:System.Xml.XmlNodeReader.NodeType" />のノードが要素<see langword="XmlNodeType.Element" />であり、がで<c>/ &gt;</c>終わる場合は。それ以外の<see langword="false" />場合は。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.LocalName">
      <summary vsli:raw="Gets the local name of the current node.">現在のノードのローカル名を取得します。</summary>
      <returns vsli:raw="The name of the current node with the prefix removed. For example, &lt;see langword=&quot;LocalName&quot; /&gt; is &lt;see langword=&quot;book&quot; /&gt; for the element &lt;c&gt;&amp;lt;bk:book&amp;gt;&lt;/c&gt;.  &#xA;  &#xA; For node types that do not have a name (like &lt;see langword=&quot;Text&quot; /&gt;, &lt;see langword=&quot;Comment&quot; /&gt;, and so on), this property returns String.Empty.">プリフィックスを削除した現在のノードの名前。 たとえば、 <see langword="LocalName" />は<see langword="book" />要素<c>&gt;bk: book 用です。 &lt;</c>  
名前を持たないノード型 (<see langword="Text" />、<see langword="Comment" />、など) の場合は、このプロパティは String.Empty を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.LookupNamespace(System.String)">
      <summary vsli:raw="Resolves a namespace prefix in the current element's scope.">現在の要素のスコープ内の名前空間プリフィックスを解決します。</summary>
      <param name="prefix" vsli:raw="The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. This string does not have to be atomized.">解決する対象となる名前空間 URI のプレフィックス。 既定の名前空間と一致させるには、空の文字列を渡します。 この文字列は、最小単位に分割する必要はありません。</param>
      <returns vsli:raw="The namespace URI to which the prefix maps or &lt;see langword=&quot;null&quot; /&gt; if no matching prefix is found.">プレフィックスの割り当て先の名前空間 URI。条件に合うプレフィックスが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.Int32)">
      <summary vsli:raw="Moves to the attribute with the specified index.">指定したインデックスを持つ属性に移動します。</summary>
      <param name="attributeIndex" vsli:raw="The index of the attribute.">属性のインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;i&quot; /&gt; parameter is less than 0 or greater than or equal to &lt;see cref=&quot;P:System.Xml.XmlReader.AttributeCount&quot; /&gt;.">
        <paramref name="i" /> パラメーターが 0 未満か、<see cref="P:System.Xml.XmlReader.AttributeCount" /> 以上です。</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.String)">
      <summary vsli:raw="Moves to the attribute with the specified name.">指定した名前を持つ属性へ移動します。</summary>
      <param name="name" vsli:raw="The qualified name of the attribute.">属性の限定名。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the reader's position does not change.">属性が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、リーダーの位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.String,System.String)">
      <summary vsli:raw="Moves to the attribute with the specified local name and namespace URI.">指定したローカル名および名前空間 URI の属性に移動します。</summary>
      <param name="name" vsli:raw="The local name of the attribute.">属性のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute.">属性の名前空間 URI。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the reader's position does not change.">属性が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、リーダーの位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToElement">
      <summary vsli:raw="Moves to the element that contains the current attribute node.">現在の属性ノードを含む要素に移動します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); &lt;see langword=&quot;false&quot; /&gt; if the reader is not positioned on an attribute (the position of the reader does not change).">リーダーが属性の位置に配置されている場合は <see langword="true" /> で、属性を所有している要素の位置にリーダーが移動します。リーダーが属性の位置に配置されていない場合は <see langword="false" /> で、リーダーの位置が変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToFirstAttribute">
      <summary vsli:raw="Moves to the first attribute.">最初の属性に移動します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an attribute exists (the reader moves to the first attribute); otherwise, &lt;see langword=&quot;false&quot; /&gt; (the position of the reader does not change).">属性が存在する場合は <see langword="true" /> で、リーダーが最初の属性へ移動します。それ以外の場合は <see langword="false" /> で、リーダーの位置が変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToNextAttribute">
      <summary vsli:raw="Moves to the next attribute.">次の属性に移動します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is a next attribute; &lt;see langword=&quot;false&quot; /&gt; if there are no more attributes.">次の属性が存在する場合は <see langword="true" />。それ以上、属性が存在しない場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Name">
      <summary vsli:raw="Gets the qualified name of the current node.">現在のノードの限定名を取得します。</summary>
      <returns vsli:raw="The qualified name of the current node. For example, &lt;see langword=&quot;Name&quot; /&gt; is &lt;see langword=&quot;bk:book&quot; /&gt; for the element &lt;c&gt;&amp;lt;bk:book&amp;gt;&lt;/c&gt;.  &#xA;  &#xA; The name returned is dependent on the &lt;see cref=&quot;P:System.Xml.XmlNodeReader.NodeType&quot; /&gt; of the node. The following node types return the listed values. All other node types return an empty string.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Node Type&lt;/term&gt;&lt;description&gt; Name&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Attribute&quot; /&gt;&lt;/term&gt;&lt;description&gt; The name of the attribute.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;DocumentType&quot; /&gt;&lt;/term&gt;&lt;description&gt; The document type name.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Element&quot; /&gt;&lt;/term&gt;&lt;description&gt; The tag name.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;EntityReference&quot; /&gt;&lt;/term&gt;&lt;description&gt; The name of the entity referenced.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;ProcessingInstruction&quot; /&gt;&lt;/term&gt;&lt;description&gt; The target of the processing instruction.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;XmlDeclaration&quot; /&gt;&lt;/term&gt;&lt;description&gt; The literal string &lt;see langword=&quot;xml&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">現在のノードの限定名。 たとえば、 <see langword="Name" />は<see langword="bk:book" />要素<c>&gt;bk: book 用です。 &lt;</c>  
返される名前は、ノードの <see cref="P:System.Xml.XmlNodeReader.NodeType" /> によって異なります。 リストされた値を返すノード型を次に示します。 その他のすべてのノード型は、空の文字列を返します。  
  ノード型 
  name 
 <see langword="Attribute" /> 属性の名前。  

 <see langword="DocumentType" /> ドキュメントの種類の名前。  

 <see langword="Element" /> タグ名。  

 <see langword="EntityReference" /> 参照されたエンティティの名前。  

 <see langword="ProcessingInstruction" /> 処理命令の対象。  

 <see langword="XmlDeclaration" /> リテラル文字列 <see langword="xml" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NamespaceURI">
      <summary vsli:raw="Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.">リーダーが配置されているノードの名前空間 URI (W3C の名前空間の仕様における定義に準拠) を取得します。</summary>
      <returns vsli:raw="The namespace URI of the current node; otherwise an empty string.">現在のノードの名前空間 URI。それ以外の場合は空の文字列。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NameTable">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; associated with this implementation.">この実装に関連付けられている <see cref="T:System.Xml.XmlNameTable" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlNameTable&quot; /&gt; enabling you to get the atomized version of a string within the node.">ノード内の最小単位に分割された文字列を取得できる <see langword="XmlNameTable" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NodeType">
      <summary vsli:raw="Gets the type of the current node.">現在のノードの種類を取得します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.XmlNodeType&quot; /&gt; values representing the type of the current node.">現在のノードの型を表す <see cref="T:System.Xml.XmlNodeType" /> 値の 1 つ。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Prefix">
      <summary vsli:raw="Gets the namespace prefix associated with the current node.">現在のノードに関連付けられた名前空間プリフィックスを取得します。</summary>
      <returns vsli:raw="The namespace prefix associated with the current node.">現在のノードに関連付けられた名前空間プリフィックス。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Read">
      <summary vsli:raw="Reads the next node from the stream.">ストリームから次のノードを読み取ります。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the next node was read successfully; &lt;see langword=&quot;false&quot; /&gt; if there are no more nodes to read.">次のノードが正常に読み取られた場合は <see langword="true" />。それ以上読み取る対象となるノードが存在しない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadAttributeValue">
      <summary vsli:raw="Parses the attribute value into one or more &lt;see langword=&quot;Text&quot; /&gt;, &lt;see langword=&quot;EntityReference&quot; /&gt;, or &lt;see langword=&quot;EndEntity&quot; /&gt; nodes.">属性値を解析して、1 つ以上の <see langword="Text" />、<see langword="EntityReference" />、<see langword="EndEntity" /> の各ノードに格納します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there are nodes to return.  &#xA;  &#xA; &lt;see langword=&quot;false&quot; /&gt; if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.  &#xA;  &#xA; An empty attribute, such as, &lt;c&gt;misc=&quot;&quot;&lt;/c&gt;, returns &lt;see langword=&quot;true&quot; /&gt; with a single node with a value of String.Empty.">返すノードがある場合は <see langword="true" />。  
 初めて呼び出すときにリーダーの位置が属性ノード上にない場合、またはすべての属性値が読み込まれている場合は <see langword="false" />。  
<c>misc=""</c> などの空の属性は、値 String.Empty を持つ単一のノードと一緒に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the content and returns the Base64 decoded binary bytes.">コンテンツを読み取り、Base64 でデコードされたバイナリ バイトを返します。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <returns vsli:raw="The number of bytes written to the buffer.">バッファーに書き込まれたバイト数。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Xml.XmlNodeReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)&quot; /&gt; is not supported on the current node.">
        <see cref="M:System.Xml.XmlNodeReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> は、現在のノードではサポートされていません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the content and returns the BinHex decoded binary bytes.">コンテンツを読み取り、BinHex でデコードされたバイナリ バイトを返します。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <returns vsli:raw="The number of bytes written to the buffer.">バッファーに書き込まれたバイト数。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Xml.XmlNodeReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)&quot; /&gt; is not supported on the current node.">
        <see cref="M:System.Xml.XmlNodeReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> は、現在のノードではサポートされていません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the element and decodes the Base64 content.">要素を読み取り、Base64 のコンテンツをデコードします。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <returns vsli:raw="The number of bytes written to the buffer.">バッファーに書き込まれたバイト数。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node is not an element node.">現在のノードは要素ノードではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The element contains mixed content.">要素には混合コンテンツが含まれます。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The content cannot be converted to the requested type.">コンテンツを要求された型に変換できません。</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the element and decodes the BinHex content.">要素を読み取り、BinHex のコンテンツをデコードします。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <returns vsli:raw="The number of bytes written to the buffer.">バッファーに書き込まれたバイト数。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node is not an element node.">現在のノードは要素ノードではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The element contains mixed content.">要素には混合コンテンツが含まれます。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The content cannot be converted to the requested type.">コンテンツを要求された型に変換できません。</exception>
    </member>
    <member name="P:System.Xml.XmlNodeReader.ReadState">
      <summary vsli:raw="Gets the state of the reader.">リーダーの状態を取得します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.ReadState&quot; /&gt; values.">
        <see cref="T:System.Xml.ReadState" /> 値のいずれか 1 つ。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadString">
      <summary vsli:raw="Reads the contents of an element or text node as a string.">要素ノードまたはテキスト ノードの内容を文字列として読み取ります。</summary>
      <returns vsli:raw="The contents of the element or text-like node (This can include CDATA, Text nodes, and so on). This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.  &#xA;  &#xA; &lt;see langword=&quot;Note:&quot; /&gt; The text node can be either an element or an attribute text node.">要素ノードまたはテキストのようなノード (CDATA、Text ノード、など) の内容。 要素ノードまたはテキスト ノード以外にリーダーが配置されている場合、または返す対象となるテキスト コンテンツが現在のコンテキスト内にこれ以上ない場合は、これが空の文字列になる場合があります。  
 <see langword="Note:" /> テキスト ノードは、要素テキスト ノードまたは属性テキスト ノードのいずれかが可能です。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ResolveEntity">
      <summary vsli:raw="Resolves the entity reference for &lt;see langword=&quot;EntityReference&quot; /&gt; nodes.">
        <see langword="EntityReference" /> ノードのエンティティ参照を解決します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The reader is not positioned on an &lt;see langword=&quot;EntityReference&quot; /&gt; node.">リーダーが <see langword="EntityReference" /> ノードに配置されていません。</exception>
    </member>
    <member name="P:System.Xml.XmlNodeReader.SchemaInfo">
      <summary vsli:raw="Gets the schema information that has been assigned to the current node.">現在のノードに割り当てられているスキーマ情報を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.IXmlSchemaInfo&quot; /&gt; object containing the schema information for the current node.">現在のノードのスキーマ情報を含む <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Skip">
      <summary vsli:raw="Skips the children of the current node.">現在のノードの子をスキップします。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)&quot; /&gt;.">このメンバーの詳細については、「<see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />」をご覧ください。</summary>
      <param name="scope" vsli:raw="&lt;see cref=&quot;T:System.Xml.XmlNamespaceScope&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlNamespaceScope" /> オブジェクト。</param>
      <returns vsli:raw="&lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object that contains the namespaces that are in scope.">スコープ内の名前空間が格納されている <see cref="T:System.Collections.IDictionary" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)&quot; /&gt;.">このメンバーの説明については、<see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" /> のトピックを参照してください。</summary>
      <param name="prefix" vsli:raw="&lt;see cref=&quot;T:System.String&quot; /&gt; that contains the namespace prefix.">名前空間プレフィックスが格納されている <see cref="T:System.String" />。</param>
      <returns vsli:raw="&lt;see cref=&quot;T:System.String&quot; /&gt; that contains the namespace name.">名前空間の名前が格納されている <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)&quot; /&gt;.">このメンバーの詳細については、「<see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />」をご覧ください。</summary>
      <param name="namespaceName" vsli:raw="&lt;see cref=&quot;T:System.String&quot; /&gt; object that identifies the namespace.">名前空間を識別する <see cref="T:System.String" /> オブジェクト。</param>
      <returns vsli:raw="&lt;see cref=&quot;T:System.String&quot; /&gt; object that contains the namespace prefix.">名前空間プレフィックスが格納されている <see cref="T:System.String" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Value">
      <summary vsli:raw="Gets the text value of the current node.">現在のノードのテキスト値を取得します。</summary>
      <returns vsli:raw="The value returned depends on the &lt;see cref=&quot;P:System.Xml.XmlNodeReader.NodeType&quot; /&gt; of the node. The following table lists node types that have a value to return. All other node types return String.Empty.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Node Type&lt;/term&gt;&lt;description&gt; Value&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Attribute&quot; /&gt;&lt;/term&gt;&lt;description&gt; The value of the attribute.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;CDATA&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the CDATA section.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Comment&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the comment.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;DocumentType&quot; /&gt;&lt;/term&gt;&lt;description&gt; The internal subset.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;ProcessingInstruction&quot; /&gt;&lt;/term&gt;&lt;description&gt; The entire content, excluding the target.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;SignificantWhitespace&quot; /&gt;&lt;/term&gt;&lt;description&gt; The white space between markup in a mixed content model.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Text&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the text node.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Whitespace&quot; /&gt;&lt;/term&gt;&lt;description&gt; The white space between markup.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;XmlDeclaration&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the declaration.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">返される値は、ノードの <see cref="P:System.Xml.XmlNodeReader.NodeType" /> によって異なります。 返す値を持つノード型の一覧を次の表に示します。 その他のすべてのノード型は、String.Empty を返します。  
  ノード型 
  [値] 
 <see langword="Attribute" /> 属性の値。  

 <see langword="CDATA" /> CDATA セクションの内容。  

 <see langword="Comment" /> コメントの内容。  

 <see langword="DocumentType" /> 内部サブセット。  

 <see langword="ProcessingInstruction" /> ターゲットを除く全内容。  

 <see langword="SignificantWhitespace" /> 混合コンテンツ モデル内のマークアップ間の空白。  

 <see langword="Text" /> テキスト ノードの内容。  

 <see langword="Whitespace" /> マークアップ間の空白。  

 <see langword="XmlDeclaration" /> 宣言の内容。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.XmlLang">
      <summary vsli:raw="Gets the current &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">現在の <see langword="xml:lang" /> スコープを取得します。</summary>
      <returns vsli:raw="The current &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">現在の <see langword="xml:lang" /> スコープ。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.XmlSpace">
      <summary vsli:raw="Gets the current &lt;see langword=&quot;xml:space&quot; /&gt; scope.">現在の <see langword="xml:space" /> スコープを取得します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.XmlSpace&quot; /&gt; values. If no &lt;see langword=&quot;xml:space&quot; /&gt; scope exists, this property defaults to &lt;see langword=&quot;XmlSpace.None&quot; /&gt;.">
        <see cref="T:System.Xml.XmlSpace" /> 値のいずれか 1 つ。 <see langword="xml:space" /> スコープが存在しない場合、このプロパティは既定の <see langword="XmlSpace.None" /> に設定されます。</returns>
    </member>
    <member name="T:System.Xml.XmlNodeType">
      <summary vsli:raw="Specifies the type of node.">ノードの型を指定します。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Attribute">
      <summary vsli:raw="An attribute (for example, &lt;c&gt;id='123'&lt;/c&gt; ).">属性 (例: <c>id='123'</c>)。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.CDATA">
      <summary vsli:raw="A CDATA section (for example, &lt;c&gt;&amp;lt;![CDATA[my escaped text]]&amp;gt;&lt;/c&gt; ).">CDATA セクション (例: <c>&lt;![CDATA[my escaped text]]&gt;</c>)。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Comment">
      <summary vsli:raw="A comment (for example, &lt;c&gt;&amp;lt;!-- my comment --&amp;gt;&lt;/c&gt; ).">コメント (例: <c>&lt;!-- my comment --&gt;</c>)。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Document">
      <summary vsli:raw="A document object that, as the root of the document tree, provides access to the entire XML document.">ドキュメント ツリーのルートして、XML ドキュメント全体へのアクセスを実現するドキュメント オブジェクト。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.DocumentFragment">
      <summary vsli:raw="A document fragment.">ドキュメント フラグメント。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.DocumentType">
      <summary vsli:raw="The document type declaration, indicated by the following tag (for example, &lt;c&gt;&amp;lt;!DOCTYPE...&amp;gt;&lt;/c&gt; ).">次のようなタグで示されるドキュメント型宣言 (例: <c>&lt;!DOCTYPE...&gt;</c>)。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Element">
      <summary vsli:raw="An element (for example, &lt;c&gt;&amp;lt;item&amp;gt;&lt;/c&gt; ).">要素 (例: <c>&lt;item&gt;</c>)。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EndElement">
      <summary vsli:raw="An end element tag (for example, &lt;c&gt;&amp;lt;/item&amp;gt;&lt;/c&gt; ).">終了要素タグ (例: <c>&lt;/item&gt;</c>)。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EndEntity">
      <summary vsli:raw="Returned when &lt;see langword=&quot;XmlReader&quot; /&gt; gets to the end of the entity replacement as a result of a call to &lt;see cref=&quot;M:System.Xml.XmlReader.ResolveEntity&quot; /&gt;.">
        <see cref="M:System.Xml.XmlReader.ResolveEntity" /> を呼び出した結果、<see langword="XmlReader" /> がエンティティ置換の末尾に到達したときに返されます。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Entity">
      <summary vsli:raw="An entity declaration (for example, &lt;c&gt;&amp;lt;!ENTITY...&amp;gt;&lt;/c&gt; ).">エンティティ宣言 (例: <c>&lt;!ENTITY...&gt;</c>)。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EntityReference">
      <summary vsli:raw="A reference to an entity (for example, &lt;c&gt;&amp;amp;num;&lt;/c&gt; ).">エンティティへの参照 (例: <c>&amp;num;</c>)。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.None">
      <summary vsli:raw="This is returned by the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; if a &lt;see langword=&quot;Read&quot; /&gt; method has not been called.">
        <see langword="Read" /> メソッドが呼び出されなかった場合に、<see cref="T:System.Xml.XmlReader" /> によって返されます。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Notation">
      <summary vsli:raw="A notation in the document type declaration (for example, &lt;c&gt;&amp;lt;!NOTATION...&amp;gt;&lt;/c&gt; ).">ドキュメント型宣言内の表記 (例: <c>&lt;!NOTATION...&gt;</c>)。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.ProcessingInstruction">
      <summary vsli:raw="A processing instruction (for example, &lt;c&gt;&amp;lt;?pi test?&amp;gt;&lt;/c&gt; ).">処理命令 (例: <c>&lt;?pi test?&gt;</c>)。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.SignificantWhitespace">
      <summary vsli:raw="White space between markup in a mixed content model or white space within the &lt;c&gt;xml:space=&quot;preserve&quot;&lt;/c&gt; scope.">混合コンテンツ モデル内のマークアップ間にある空白、または <c>xml:space="preserve"</c> スコープ内の空白。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Text">
      <summary vsli:raw="&lt;para&gt;The text content of a node.&lt;/para&gt;&lt;para&gt;A &lt;see cref=&quot;F:System.Xml.XmlNodeType.Text&quot; /&gt; node cannot have any child nodes. It can appear as the child node of the &lt;see cref=&quot;F:System.Xml.XmlNodeType.Attribute&quot; /&gt;, &lt;see cref=&quot;F:System.Xml.XmlNodeType.DocumentFragment&quot; /&gt;, &lt;see cref=&quot;F:System.Xml.XmlNodeType.Element&quot; /&gt;, and &lt;see cref=&quot;F:System.Xml.XmlNodeType.EntityReference&quot; /&gt; nodes.&lt;/para&gt;">ノードのテキストの内容。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Whitespace">
      <summary vsli:raw="White space between markup.">マークアップ間の空白。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.XmlDeclaration">
      <summary vsli:raw="&lt;para&gt;The XML declaration (for example, &lt;c&gt;&amp;lt;?xml version='1.0'?&amp;gt;&lt;/c&gt; ).&lt;/para&gt;&lt;para&gt;The &lt;see cref=&quot;F:System.Xml.XmlNodeType.XmlDeclaration&quot; /&gt; node must be the first node in the document. It cannot have children. It is a child of the &lt;see cref=&quot;F:System.Xml.XmlNodeType.Document&quot; /&gt; node. It can have attributes that provide version and encoding information.&lt;/para&gt;">XML 宣言 (例: <c>&lt;?xml version='1.0'?&gt;</c>)。</summary>
    </member>
    <member name="T:System.Xml.XmlNotation">
      <summary vsli:raw="Represents a notation declaration, such as &amp;lt;!NOTATION... &amp;gt;.">表記宣言を表します (&lt;!NOTATION... &gt; など)。</summary>
    </member>
    <member name="M:System.Xml.XmlNotation.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node. Notation nodes cannot be cloned. Calling this method on an &lt;see cref=&quot;T:System.Xml.XmlNotation&quot; /&gt; object throws an exception.">このノードの複製を作成します。 表記ノードのクローンは作成できません。 <see cref="T:System.Xml.XmlNotation" /> オブジェクトでこのメソッドを呼び出すと、例外がスローされます。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself.">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; copy of the node from which the method is called.">メソッドの呼び出し元ノードの <see cref="T:System.Xml.XmlNode" /> のコピーです。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Notation nodes cannot be cloned. Calling this method on an &lt;see cref=&quot;T:System.Xml.XmlNotation&quot; /&gt; object throws an exception.">表記ノードのクローンは作成できません。 <see cref="T:System.Xml.XmlNotation" /> オブジェクトでこのメソッドを呼び出すと、例外がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlNotation.InnerXml">
      <summary vsli:raw="Gets the markup representing the children of this node.">このノードの子を表すマークアップを取得します。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlNotation&quot; /&gt; nodes, String.Empty is returned.">
        <see langword="XmlNotation" /> ノードの場合は、String.Empty が返されます。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Attempting to set the property.">プロパティを設定しようとしています。</exception>
    </member>
    <member name="P:System.Xml.XmlNotation.IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the node is read-only.">ノードが読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  &#xA;  &#xA; Because &lt;see langword=&quot;XmlNotation&quot; /&gt; nodes are read-only, this property always returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />ノードが読み取り専用の場合は。それ以外<see langword="false" />の場合は。  
<see langword="XmlNotation" /> ノードは読み取り専用であるため、このプロパティは常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.LocalName">
      <summary vsli:raw="Gets the name of the current node without the namespace prefix.">現在のノードの名前を名前空間プリフィックスを付けずに取得します。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlNotation&quot; /&gt; nodes, this property returns the name of the notation.">
        <see langword="XmlNotation" /> ノードの場合、このプロパティは表記の名前を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.Name">
      <summary vsli:raw="Gets the name of the current node.">現在のノードの名前を取得します。</summary>
      <returns vsli:raw="The name of the notation.">表記の名前。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.NodeType">
      <summary vsli:raw="Gets the type of the current node.">現在のノードの種類を取得します。</summary>
      <returns vsli:raw="The node type. For &lt;see langword=&quot;XmlNotation&quot; /&gt; nodes, the value is XmlNodeType.Notation.">ノード型。 <see langword="XmlNotation" /> ノードの場合、値は XmlNodeType.Notation です。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.OuterXml">
      <summary vsli:raw="Gets the markup representing this node and all its children.">このノードとそのすべての子を表すマークアップを取得します。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlNotation&quot; /&gt; nodes, String.Empty is returned.">
        <see langword="XmlNotation" /> ノードの場合は、String.Empty が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.PublicId">
      <summary vsli:raw="Gets the value of the public identifier on the notation declaration.">表記宣言のパブリック ID の値を取得します。</summary>
      <returns vsli:raw="The public identifier on the notation. If there is no public identifier, &lt;see langword=&quot;null&quot; /&gt; is returned.">表記のパブリック ID。 パブリック ID がない場合は、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.SystemId">
      <summary vsli:raw="Gets the value of the system identifier on the notation declaration.">表記宣言のシステム ID を取得します。</summary>
      <returns vsli:raw="The system identifier on the notation. If there is no system identifier, &lt;see langword=&quot;null&quot; /&gt; is returned.">表記のシステム ID。 システム ID がない場合は、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="M:System.Xml.XmlNotation.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the children of the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;. This method has no effect on &lt;see langword=&quot;XmlNotation&quot; /&gt; nodes.">ノードの子を、指定した <see cref="T:System.Xml.XmlWriter" /> に保存します。 このメソッドは、<see langword="XmlNotation" /> ノードに対しては適用されません。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlNotation.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;. This method has no effect on &lt;see langword=&quot;XmlNotation&quot; /&gt; nodes.">指定した <see cref="T:System.Xml.XmlWriter" /> にノードを保存します。 このメソッドは、<see langword="XmlNotation" /> ノードに対しては適用されません。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlOutputMethod">
      <summary vsli:raw="Specifies the method used to serialize the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; output.">
        <see cref="T:System.Xml.XmlWriter" /> 出力をシリアル化するために使用するメソッドを指定します。</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.AutoDetect">
      <summary vsli:raw="Use the XSLT rules to choose between the &lt;see cref=&quot;F:System.Xml.XmlOutputMethod.Xml&quot; /&gt; and &lt;see cref=&quot;F:System.Xml.XmlOutputMethod.Html&quot; /&gt; output methods at runtime.">XSLT の規則を使用して、実行時に <see cref="F:System.Xml.XmlOutputMethod.Xml" /> 出力メソッドと <see cref="F:System.Xml.XmlOutputMethod.Html" /> 出力メソッドのいずれかを選択します。</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.Html">
      <summary vsli:raw="Serialize according to the HTML rules specified by XSLT.">XSLT で指定された HTML の規則に従ってシリアル化します。</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.Text">
      <summary vsli:raw="Serialize text blocks only.">テキスト ブロックだけをシリアル化します。</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.Xml">
      <summary vsli:raw="Serialize according to the XML 1.0 rules.">XML 1.0 の規則に従ってシリアル化します。</summary>
    </member>
    <member name="T:System.Xml.XmlParserContext">
      <summary vsli:raw="Provides all the context information required by the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to parse an XML fragment.">XML フラグメントを解析するために <see cref="T:System.Xml.XmlReader" /> が必要とするコンテキスト情報をすべて提供します。</summary>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlParserContext&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;, base URI, &lt;see langword=&quot;xml:lang&quot; /&gt;, &lt;see langword=&quot;xml:space&quot; /&gt;, and document type values.">
        <see cref="T:System.Xml.XmlNameTable" />、<see cref="T:System.Xml.XmlNamespaceManager" />、ベース URI、<see langword="XmlParserContext" />、<see langword="xml:lang" />、ドキュメント型のそれぞれの値を指定して、<see langword="xml:space" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="nt" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; to use to atomize strings. If this is &lt;see langword=&quot;null&quot; /&gt;, the name table used to construct the &lt;paramref name=&quot;nsMgr&quot; /&gt; is used instead. For more information about atomized strings, see &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">文字列を最小単位に分割するために使用する <see cref="T:System.Xml.XmlNameTable" />。 このパラメーターが <see langword="null" /> の場合は、<paramref name="nsMgr" /> を構築するために使用される名前テーブルが代わりに使用されます。 最小単位に分割された文字列の詳細については、<see cref="T:System.Xml.XmlNameTable" /> のトピックを参照してください。</param>
      <param name="nsMgr" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; to use for looking up namespace information, or &lt;see langword=&quot;null&quot; /&gt;.">名前空間情報を検索するために使用する <see cref="T:System.Xml.XmlNamespaceManager" />。または <see langword="null" />。</param>
      <param name="docTypeName" vsli:raw="The name of the document type declaration.">ドキュメント型宣言の名前。</param>
      <param name="pubId" vsli:raw="The public identifier.">パブリック識別子。</param>
      <param name="sysId" vsli:raw="The system identifier.">システム識別子。</param>
      <param name="internalSubset" vsli:raw="The internal DTD subset. The DTD subset is used for entity resolution, not for document validation.">内部 DTD サブセット。 DTD サブセットはエンティティ解決に使用され、ドキュメント検証には使用されません。</param>
      <param name="baseURI" vsli:raw="The base URI for the XML fragment (the location from which the fragment was loaded).">XML フラグメントのベース URI (フラグメントの読み込み元の場所)。</param>
      <param name="xmlLang" vsli:raw="The &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">
        <see langword="xml:lang" /> スコープ。</param>
      <param name="xmlSpace" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlSpace&quot; /&gt; value indicating the &lt;see langword=&quot;xml:space&quot; /&gt; scope.">
        <see langword="xml:space" /> スコープを示す <see cref="T:System.Xml.XmlSpace" /> 値。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;paramref name=&quot;nt&quot; /&gt; is not the same &lt;see langword=&quot;XmlNameTable&quot; /&gt; used to construct &lt;paramref name=&quot;nsMgr&quot; /&gt;.">
        <paramref name="nt" /> が、<paramref name="nsMgr" /> を構築するために使用される <see langword="XmlNameTable" /> と異なります。</exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlParserContext&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;, base URI, &lt;see langword=&quot;xml:lang&quot; /&gt;, &lt;see langword=&quot;xml:space&quot; /&gt;, encoding, and document type values.">
        <see cref="T:System.Xml.XmlNameTable" />、<see cref="T:System.Xml.XmlNamespaceManager" />、ベース URI、<see langword="XmlParserContext" />、<see langword="xml:lang" />、エンコーディング、およびドキュメント型のそれぞれの値を指定して、<see langword="xml:space" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="nt" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; to use to atomize strings. If this is &lt;see langword=&quot;null&quot; /&gt;, the name table used to construct the &lt;paramref name=&quot;nsMgr&quot; /&gt; is used instead. For more information about atomized strings, see &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">文字列を最小単位に分割するために使用する <see cref="T:System.Xml.XmlNameTable" />。 このパラメーターが <see langword="null" /> の場合は、<paramref name="nsMgr" /> を構築するために使用される名前テーブルが代わりに使用されます。 最小単位に分割された文字列の詳細については、<see cref="T:System.Xml.XmlNameTable" /> のトピックを参照してください。</param>
      <param name="nsMgr" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; to use for looking up namespace information, or &lt;see langword=&quot;null&quot; /&gt;.">名前空間情報を検索するために使用する <see cref="T:System.Xml.XmlNamespaceManager" />。または <see langword="null" />。</param>
      <param name="docTypeName" vsli:raw="The name of the document type declaration.">ドキュメント型宣言の名前。</param>
      <param name="pubId" vsli:raw="The public identifier.">パブリック識別子。</param>
      <param name="sysId" vsli:raw="The system identifier.">システム識別子。</param>
      <param name="internalSubset" vsli:raw="The internal DTD subset. The DTD is used for entity resolution, not for document validation.">内部 DTD サブセット。 DTD はエンティティ解決に使用され、ドキュメント検証には使用されません。</param>
      <param name="baseURI" vsli:raw="The base URI for the XML fragment (the location from which the fragment was loaded).">XML フラグメントのベース URI (フラグメントの読み込み元の場所)。</param>
      <param name="xmlLang" vsli:raw="The &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">
        <see langword="xml:lang" /> スコープ。</param>
      <param name="xmlSpace" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlSpace&quot; /&gt; value indicating the &lt;see langword=&quot;xml:space&quot; /&gt; scope.">
        <see langword="xml:space" /> スコープを示す <see cref="T:System.Xml.XmlSpace" /> 値。</param>
      <param name="enc" vsli:raw="An &lt;see cref=&quot;T:System.Text.Encoding&quot; /&gt; object indicating the encoding setting.">エンコーディングの設定を示す <see cref="T:System.Text.Encoding" /> オブジェクト。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;paramref name=&quot;nt&quot; /&gt; is not the same &lt;see langword=&quot;XmlNameTable&quot; /&gt; used to construct &lt;paramref name=&quot;nsMgr&quot; /&gt;.">
        <paramref name="nt" /> が、<paramref name="nsMgr" /> を構築するために使用される <see langword="XmlNameTable" /> と異なります。</exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlParserContext&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;, &lt;see langword=&quot;xml:lang&quot; /&gt;, and &lt;see langword=&quot;xml:space&quot; /&gt; values.">
        <see langword="XmlParserContext" />、<see cref="T:System.Xml.XmlNameTable" />、<see cref="T:System.Xml.XmlNamespaceManager" />、および <see langword="xml:lang" /> のそれぞれの値を指定して、<see langword="xml:space" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="nt" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; to use to atomize strings. If this is &lt;see langword=&quot;null&quot; /&gt;, the name table used to construct the &lt;paramref name=&quot;nsMgr&quot; /&gt; is used instead. For more information about atomized strings, see &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">文字列を最小単位に分割するために使用する <see cref="T:System.Xml.XmlNameTable" />。 このパラメーターが <see langword="null" /> の場合は、<paramref name="nsMgr" /> を構築するために使用される名前テーブルが代わりに使用されます。 最小単位に分割された文字列の詳細については、<see cref="T:System.Xml.XmlNameTable" /> のトピックを参照してください。</param>
      <param name="nsMgr" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; to use for looking up namespace information, or &lt;see langword=&quot;null&quot; /&gt;.">名前空間情報を検索するために使用する <see cref="T:System.Xml.XmlNamespaceManager" />。または <see langword="null" />。</param>
      <param name="xmlLang" vsli:raw="The &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">
        <see langword="xml:lang" /> スコープ。</param>
      <param name="xmlSpace" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlSpace&quot; /&gt; value indicating the &lt;see langword=&quot;xml:space&quot; /&gt; scope.">
        <see langword="xml:space" /> スコープを示す <see cref="T:System.Xml.XmlSpace" /> 値。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;paramref name=&quot;nt&quot; /&gt; is not the same &lt;see langword=&quot;XmlNameTable&quot; /&gt; used to construct &lt;paramref name=&quot;nsMgr&quot; /&gt;.">
        <paramref name="nt" /> が、<paramref name="nsMgr" /> を構築するために使用される <see langword="XmlNameTable" /> と異なります。</exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlParserContext&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;, &lt;see langword=&quot;xml:lang&quot; /&gt;, &lt;see langword=&quot;xml:space&quot; /&gt;, and encoding.">
        <see cref="T:System.Xml.XmlNameTable" />、<see cref="T:System.Xml.XmlNamespaceManager" />、<see langword="XmlParserContext" />、<see langword="xml:lang" />、およびエンコーディングを指定して、<see langword="xml:space" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="nt" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; to use to atomize strings. If this is &lt;see langword=&quot;null&quot; /&gt;, the name table used to construct the &lt;paramref name=&quot;nsMgr&quot; /&gt; is used instead. For more information on atomized strings, see &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">文字列を最小単位に分割するために使用する <see cref="T:System.Xml.XmlNameTable" />。 このパラメーターが <see langword="null" /> の場合は、<paramref name="nsMgr" /> を構築するために使用される名前テーブルが代わりに使用されます。 最小単位に分割された文字列の詳細については、<see cref="T:System.Xml.XmlNameTable" /> のトピックを参照してください。</param>
      <param name="nsMgr" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; to use for looking up namespace information, or &lt;see langword=&quot;null&quot; /&gt;.">名前空間情報を検索するために使用する <see cref="T:System.Xml.XmlNamespaceManager" />。または <see langword="null" />。</param>
      <param name="xmlLang" vsli:raw="The &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">
        <see langword="xml:lang" /> スコープ。</param>
      <param name="xmlSpace" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlSpace&quot; /&gt; value indicating the &lt;see langword=&quot;xml:space&quot; /&gt; scope.">
        <see langword="xml:space" /> スコープを示す <see cref="T:System.Xml.XmlSpace" /> 値。</param>
      <param name="enc" vsli:raw="An &lt;see cref=&quot;T:System.Text.Encoding&quot; /&gt; object indicating the encoding setting.">エンコーディングの設定を示す <see cref="T:System.Text.Encoding" /> オブジェクト。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;paramref name=&quot;nt&quot; /&gt; is not the same &lt;see langword=&quot;XmlNameTable&quot; /&gt; used to construct &lt;paramref name=&quot;nsMgr&quot; /&gt;.">
        <paramref name="nt" /> が、<paramref name="nsMgr" /> を構築するために使用される <see langword="XmlNameTable" /> と異なります。</exception>
    </member>
    <member name="P:System.Xml.XmlParserContext.BaseURI">
      <summary vsli:raw="Gets or sets the base URI.">ベース URI を取得または設定します。</summary>
      <returns vsli:raw="The base URI to use to resolve the DTD file.">DTD ファイルを解決するために使用するベース URI。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.DocTypeName">
      <summary vsli:raw="Gets or sets the name of the document type declaration.">ドキュメント型宣言の名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the document type declaration.">ドキュメント型宣言の名前。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.Encoding">
      <summary vsli:raw="Gets or sets the encoding type.">エンコーディングの種類を取得または設定します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Text.Encoding&quot; /&gt; object indicating the encoding type.">エンコーディングの種類を示す <see cref="T:System.Text.Encoding" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.InternalSubset">
      <summary vsli:raw="Gets or sets the internal DTD subset.">内部 DTD サブセットを取得または設定します。</summary>
      <returns vsli:raw="The internal DTD subset. For example, this property returns everything between the square brackets &lt;c&gt;&amp;lt;!DOCTYPE doc [...]&amp;gt;&lt;/c&gt;.">内部 DTD サブセット。 たとえば、このプロパティは、角かっこ<c>&lt;で囲まれたすべての要素を返します。DOCTYPE ドキュメント [...]&gt;</c>.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.NamespaceManager">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;.">
        <see cref="T:System.Xml.XmlNamespaceManager" /> を取得または設定します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlNamespaceManager&quot; /&gt;.">
        <see langword="XmlNamespaceManager" />。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.NameTable">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; used to atomize strings. For more information on atomized strings, see &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">文字列を最小単位に分割するために使用される <see cref="T:System.Xml.XmlNameTable" /> を取得します。 最小単位に分割された文字列の詳細については、<see cref="T:System.Xml.XmlNameTable" /> のトピックを参照してください。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlNameTable&quot; /&gt;.">
        <see langword="XmlNameTable" />。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.PublicId">
      <summary vsli:raw="Gets or sets the public identifier.">パブリック識別子を取得または設定します。</summary>
      <returns vsli:raw="The public identifier.">パブリック識別子。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.SystemId">
      <summary vsli:raw="Gets or sets the system identifier.">システム識別子を取得または設定します。</summary>
      <returns vsli:raw="The system identifier.">システム識別子。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.XmlLang">
      <summary vsli:raw="Gets or sets the current &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">現在の <see langword="xml:lang" /> スコープを取得または設定します。</summary>
      <returns vsli:raw="The current &lt;see langword=&quot;xml:lang&quot; /&gt; scope. If there is no &lt;see langword=&quot;xml:lang&quot; /&gt; in scope, &lt;see langword=&quot;String.Empty&quot; /&gt; is returned.">現在の <see langword="xml:lang" /> スコープ。 スコープ内に <see langword="xml:lang" /> がない場合は、<see langword="String.Empty" /> が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.XmlSpace">
      <summary vsli:raw="Gets or sets the current &lt;see langword=&quot;xml:space&quot; /&gt; scope.">現在の <see langword="xml:space" /> スコープを取得または設定します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlSpace&quot; /&gt; value indicating the &lt;see langword=&quot;xml:space&quot; /&gt; scope.">
        <see langword="xml:space" /> スコープを示す <see cref="T:System.Xml.XmlSpace" /> 値。</returns>
    </member>
    <member name="T:System.Xml.XmlProcessingInstruction">
      <summary vsli:raw="Represents a processing instruction, which XML defines to keep processor-specific information in the text of the document.">XML がプロセッサ固有の情報をドキュメントのテキストに保持するために定義する処理命令を表します。</summary>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.#ctor(System.String,System.String,System.Xml.XmlDocument)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlProcessingInstruction&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlProcessingInstruction" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="target" vsli:raw="The target of the processing instruction; see the &lt;see cref=&quot;P:System.Xml.XmlProcessingInstruction.Target&quot; /&gt; property.">処理命令の対象。<see cref="P:System.Xml.XmlProcessingInstruction.Target" /> プロパティに関するトピックを参照してください。</param>
      <param name="data" vsli:raw="The content of the instruction; see the &lt;see cref=&quot;P:System.Xml.XmlProcessingInstruction.Data&quot; /&gt; property.">命令の内容。<see cref="P:System.Xml.XmlProcessingInstruction.Data" /> プロパティに関するトピックを参照してください。</param>
      <param name="doc" vsli:raw="The parent XML document.">親 XML ドキュメント。</param>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node.">このノードの複製を作成します。</summary>
      <param name="deep" vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; to recursively clone the subtree under the specified node; &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt; to clone only the node itself.">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。</param>
      <returns vsli:raw="The duplicate node.">複製されたノード。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Data">
      <summary vsli:raw="Gets or sets the content of the processing instruction, excluding the target.">対象を含まない、処理命令の内容を取得または設定します。</summary>
      <returns vsli:raw="The content of the processing instruction, excluding the target.">対象を含まない、処理命令の内容。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.InnerText">
      <summary vsli:raw="Gets or sets the concatenated values of the node and all its children.">ノードとそのすべての子の連結している値を取得または設定します。</summary>
      <returns vsli:raw="The concatenated values of the node and all its children.">ノードとすべての子の連結された値。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.LocalName">
      <summary vsli:raw="Gets the local name of the node.">ノードのローカル名を取得します。</summary>
      <returns vsli:raw="For processing instruction nodes, this property returns the target of the processing instruction.">処理命令ノードの場合、このプロパティは処理命令の対象を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Name">
      <summary vsli:raw="Gets the qualified name of the node.">ノードの限定名を取得します。</summary>
      <returns vsli:raw="For processing instruction nodes, this property returns the target of the processing instruction.">処理命令ノードの場合、このプロパティは処理命令の対象を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.NodeType">
      <summary vsli:raw="Gets the type of the current node.">現在のノードの種類を取得します。</summary>
      <returns vsli:raw="For &lt;code data-dev-comment-type=&quot;langword&quot;&gt;XmlProcessingInstruction&lt;/code&gt; nodes, this value is XmlNodeType.ProcessingInstruction.">
        <see langword="XmlProcessingInstruction" /> ノードの場合、この値は XmlNodeType.ProcessingInstruction です。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Target">
      <summary vsli:raw="Gets the target of the processing instruction.">処理命令の対象を取得します。</summary>
      <returns vsli:raw="The target of the processing instruction.">処理命令の対象。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Value">
      <summary vsli:raw="Gets or sets the value of the node.">ノードの値を取得または設定します。</summary>
      <returns vsli:raw="The entire content of the processing instruction, excluding the target.">対象を含まない処理命令の全内容。</returns>
      <exception cref="T:System.ArgumentException">ノードが読み取り専用です。</exception>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves all the children of the node to the specified &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Xml.XmlWriter&quot;&gt;&lt;/xref&gt;. Because ProcessingInstruction nodes do not have children, this method has no effect.">指定した <see cref="T:System.Xml.XmlWriter" /> にノードのすべての子を保存します。 ProcessingInstruction ノードには子がないため、このメソッドによる影響はありません。</summary>
      <param name="w" vsli:raw="The &lt;code data-dev-comment-type=&quot;langword&quot;&gt;XmlWriter&lt;/code&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the node to the specified &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Xml.XmlWriter&quot;&gt;&lt;/xref&gt;.">指定した <see cref="T:System.Xml.XmlWriter" /> にノードを保存します。</summary>
      <param name="w" vsli:raw="The &lt;code data-dev-comment-type=&quot;langword&quot;&gt;XmlWriter&lt;/code&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlQualifiedName">
      <summary vsli:raw="Represents an XML qualified name.">XML 限定名を表します。</summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlQualifiedName" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; class with the specified name.">指定した名前を使用して、<see cref="T:System.Xml.XmlQualifiedName" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="The local name to use as the name of the &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlQualifiedName" /> オブジェクトの名前として使用するローカル名。</param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; class with the specified name and namespace.">指定した名前と名前空間を使用して、<see cref="T:System.Xml.XmlQualifiedName" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="The local name to use as the name of the &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlQualifiedName" /> オブジェクトの名前として使用するローカル名。</param>
      <param name="ns" vsli:raw="The namespace for the &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlQualifiedName" /> オブジェクトの名前空間。</param>
    </member>
    <member name="F:System.Xml.XmlQualifiedName.Empty">
      <summary vsli:raw="Provides an empty &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt;.">空の <see cref="T:System.Xml.XmlQualifiedName" /> を提供します。</summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; object is equal to the current &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; object.">指定した <see cref="T:System.Xml.XmlQualifiedName" /> オブジェクトが、現在の <see cref="T:System.Xml.XmlQualifiedName" /> オブジェクトと等しいかどうかを判断します。</summary>
      <param name="other" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; to compare.">比較対象の <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two are the same instance object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">2 つのオブジェクトが同じインスタンス オブジェクトである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.GetHashCode">
      <summary vsli:raw="Returns the hash code for the &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt;.">
        <see cref="T:System.Xml.XmlQualifiedName" /> のハッシュ コードを返します。</summary>
      <returns vsli:raw="A hash code for this object.">このオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.IsEmpty">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; is empty.">
        <see cref="T:System.Xml.XmlQualifiedName" /> が空かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if name and namespace are empty strings; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">名前と名前空間が空の文字列である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.Name">
      <summary vsli:raw="Gets a string representation of the qualified name of the &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt;.">
        <see cref="T:System.Xml.XmlQualifiedName" /> の限定名の文字列形式を取得します。</summary>
      <returns vsli:raw="A string representation of the qualified name or String.Empty if a name is not defined for the object.">限定名の文字列形式。オブジェクトに対して名前が定義されていない場合は String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.Namespace">
      <summary vsli:raw="Gets a string representation of the namespace of the &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt;.">
        <see cref="T:System.Xml.XmlQualifiedName" /> の名前空間の文字列形式を取得します。</summary>
      <returns vsli:raw="A string representation of the namespace or String.Empty if a namespace is not defined for the object.">名前空間の文字列形式。オブジェクトに対して名前空間が定義されていない場合は String.Empty。</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.op_Equality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary vsli:raw="Compares two &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; objects.">2 つの <see cref="T:System.Xml.XmlQualifiedName" /> オブジェクトを比較します。</summary>
      <param name="a" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; to compare.">比較対象の <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <param name="b" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; to compare.">比較対象の <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two objects have the same name and namespace values; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">2 つのオブジェクトの名前の値および名前空間の値が同じである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.op_Inequality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary vsli:raw="Compares two &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; objects.">2 つの <see cref="T:System.Xml.XmlQualifiedName" /> オブジェクトを比較します。</summary>
      <param name="a" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; to compare.">比較対象の <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <param name="b" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; to compare.">比較対象の <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name and namespace values for the two objects differ; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">2 つのオブジェクトの名前の値および名前空間の値が異なっている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.ToString">
      <summary vsli:raw="Returns the string value of the &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt;.">
        <see cref="T:System.Xml.XmlQualifiedName" /> の文字列値を返します。</summary>
      <returns vsli:raw="The string value of the &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; in the format of &lt;see langword=&quot;namespace:localname&quot; /&gt;. If the object does not have a namespace defined, this method returns just the local name.">
        <see langword="namespace:localname" /> の形式の <see cref="T:System.Xml.XmlQualifiedName" /> の文字列値。 オブジェクトに名前空間が定義されていない場合、このメソッドはローカル名だけを返します。</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.ToString(System.String,System.String)">
      <summary vsli:raw="Returns the string value of the &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt;.">
        <see cref="T:System.Xml.XmlQualifiedName" /> の文字列値を返します。</summary>
      <param name="name" vsli:raw="The name of the object.">オブジェクトの名前。</param>
      <param name="ns" vsli:raw="The namespace of the object.">オブジェクトの名前空間。</param>
      <returns vsli:raw="The string value of the &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; in the format of &lt;see langword=&quot;namespace:localname&quot; /&gt;. If the object does not have a namespace defined, this method returns just the local name.">
        <see langword="namespace:localname" /> の形式の <see cref="T:System.Xml.XmlQualifiedName" /> の文字列値。 オブジェクトに名前空間が定義されていない場合、このメソッドはローカル名だけを返します。</returns>
    </member>
    <member name="T:System.Xml.XmlReader">
      <summary vsli:raw="Represents a reader that provides fast, noncached, forward-only access to XML data.">XML データへの高速で非キャッシュの前方向アクセスを提供するリーダーを表します。</summary>
    </member>
    <member name="M:System.Xml.XmlReader.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlReader&quot; /&gt; class.">
        <see langword="XmlReader" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.XmlReader.AttributeCount">
      <summary vsli:raw="When overridden in a derived class, gets the number of attributes on the current node.">派生クラスでオーバーライドされると、現在のノードの属性数を取得します。</summary>
      <returns vsli:raw="The number of attributes on the current node.">現在のノードにある属性の数。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.BaseURI">
      <summary vsli:raw="When overridden in a derived class, gets the base URI of the current node.">派生クラスでオーバーライドされると、現在のノードのベース URI を取得します。</summary>
      <returns vsli:raw="The base URI of the current node.">現在のノードのベース URI。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.CanReadBinaryContent">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; implements the binary content read methods.">
        <see cref="T:System.Xml.XmlReader" /> がバイナリ コンテンツ用の読み取りメソッドを実装するかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the binary content read methods are implemented; otherwise &lt;see langword=&quot;false&quot; /&gt;.">バイナリ コンテンツ用の読み取りメソッドを実装する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.CanReadValueChunk">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; implements the &lt;see cref=&quot;M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)&quot; /&gt; method.">
        <see cref="T:System.Xml.XmlReader" /> が <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> メソッドを実装しているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; implements the &lt;see cref=&quot;M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)&quot; /&gt; method; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Xml.XmlReader" /> が <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> メソッドを実装している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.CanResolveEntity">
      <summary vsli:raw="Gets a value indicating whether this reader can parse and resolve entities.">このリーダーがエンティティを解析および解決できるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader can parse and resolve entities; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">リーダーがエンティティを解析および解決できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Close">
      <summary vsli:raw="When overridden in a derived class, changes the &lt;see cref=&quot;P:System.Xml.XmlReader.ReadState&quot; /&gt; to &lt;see cref=&quot;F:System.Xml.ReadState.Closed&quot; /&gt;.">派生クラスでオーバーライドされると、<see cref="P:System.Xml.XmlReader.ReadState" /> を <see cref="F:System.Xml.ReadState.Closed" /> に変更します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance using the specified stream with default settings.">既定の設定で指定されたストリームを使用して新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <param name="input" vsli:raw="The stream that contains the XML data.&#xA;&#xA; The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.">XML データを格納しているストリーム。  
<see cref="T:System.Xml.XmlReader" /> は、バイト オーダー マークや、エンコードに関するその他の記号を探すため、ストリームの先頭バイトをスキャンします。 エンコーディングが確認された場合、そのエンコーディングを使用してストリームの読み込みを続行し、入力を (Unicode) 文字のストリームとして解析する処理を継続します。</param>
      <returns vsli:raw="An object that is used to read the XML data in the stream.">ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; does not have sufficient permissions to access the location of the XML data.">
        <see cref="T:System.Xml.XmlReader" /> には、XML データの場所にアクセスするための十分なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance with the specified stream and settings.">指定されたストリームと設定で、新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <param name="input" vsli:raw="The stream that contains the XML data.&#xA;&#xA; The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.">XML データを格納しているストリーム。  
<see cref="T:System.Xml.XmlReader" /> は、バイト オーダー マークや、エンコードに関するその他の記号を探すため、ストリームの先頭バイトをスキャンします。 エンコーディングが確認された場合、そのエンコーディングを使用してストリームの読み込みを続行し、入力を (Unicode) 文字のストリームとして解析する処理を継続します。</param>
      <param name="settings" vsli:raw="The settings for the new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance. This value can be &lt;see langword=&quot;null&quot; /&gt;.">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスの設定。 この値は、<see langword="null" /> の場合もあります。</param>
      <returns vsli:raw="An object that is used to read the XML data in the stream.">ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 値は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.String)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance using the specified stream, base URI, and settings.">指定されたストリーム、ベース URI、設定を使用して、新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <param name="input" vsli:raw="The stream that contains the XML data.&#xA;&#xA; The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.">XML データを格納しているストリーム。  
<see cref="T:System.Xml.XmlReader" /> は、バイト オーダー マークや、エンコードに関するその他の記号を探すため、ストリームの先頭バイトをスキャンします。 エンコーディングが確認された場合、そのエンコーディングを使用してストリームの読み込みを続行し、入力を (Unicode) 文字のストリームとして解析する処理を継続します。</param>
      <param name="settings" vsli:raw="The settings for the new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance. This value can be &lt;see langword=&quot;null&quot; /&gt;.">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスの設定。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="baseUri" vsli:raw="The base URI for the entity or document being read. This value can be &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; Security Note The base URI is used to resolve the relative URI of the XML document. Do not use a base URI from an untrusted source.">読み取るエンティティまたはドキュメントのベース URI。 この値は、<see langword="null" /> の場合もあります。  
 セキュリティに関するメモ ベース URI は、XML ドキュメントの相対 URI を解決するために使用されます。 信頼関係のないソースからベース URI を使用することは避けてください。</param>
      <returns vsli:raw="An object that is used to read the XML data in the stream.">ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 値は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance using the specified stream, settings, and context information for parsing.">解析のために指定されたストリーム、設定、およびコンテキスト情報を使用して、新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <param name="input" vsli:raw="The stream that contains the XML data.&#xA;&#xA; The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.">XML データを格納しているストリーム。  
<see cref="T:System.Xml.XmlReader" /> は、バイト オーダー マークや、エンコードに関するその他の記号を探すため、ストリームの先頭バイトをスキャンします。 エンコーディングが確認された場合、そのエンコーディングを使用してストリームの読み込みを続行し、入力を (Unicode) 文字のストリームとして解析する処理を継続します。</param>
      <param name="settings" vsli:raw="The settings for the new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance. This value can be &lt;see langword=&quot;null&quot; /&gt;.">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスの設定。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="inputContext" vsli:raw="The context information required to parse the XML fragment. The context information can include the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; to use, encoding, namespace scope, the current &lt;c&gt;xml:lang&lt;/c&gt; and &lt;c&gt;xml:space&lt;/c&gt; scope, base URI, and document type definition.&#xA;&#xA; This value can be &lt;see langword=&quot;null&quot; /&gt;.">XML フラグメントの解析に必要なコンテキスト情報。 コンテキスト情報には、使用する <see cref="T:System.Xml.XmlNameTable" />、エンコーディング、名前空間スコープ、現在の <c>xml:lang</c> と <c>xml:space</c> のスコープ、ベース URI、およびドキュメント型定義を格納できます。  
この値は、<see langword="null" /> の場合もあります。</param>
      <returns vsli:raw="An object that is used to read the XML data in the stream.">ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 値は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance by using the specified text reader.">指定されたテキスト リーダーを使用して新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <param name="input" vsli:raw="The text reader from which to read the XML data. A text reader returns a stream of Unicode characters, so the encoding specified in the XML declaration is not used by the XML reader to decode the data stream.">XML データの読み出し元のテキスト リーダー。 テキスト リーダーは Unicode 文字のストリームを返すため、XML リーダーはデータ ストリームのデコードに XML 宣言に指定されたエンコーディングを使用しません。</param>
      <returns vsli:raw="An object that is used to read the XML data in the stream.">ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 値は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance by using the specified text reader and settings.">指定されたテキスト リーダーと設定を使用して新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <param name="input" vsli:raw="The text reader from which to read the XML data. A text reader returns a stream of Unicode characters, so the encoding specified in the XML declaration isn't used by the XML reader to decode the data stream.">XML データの読み出し元のテキスト リーダー。 テキスト リーダーは Unicode 文字のストリームを返すため、XML リーダーはデータ ストリームのデコードに XML 宣言に指定されたエンコーディングを使用しません。</param>
      <param name="settings" vsli:raw="The settings for the new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;. This value can be &lt;see langword=&quot;null&quot; /&gt;.">新しい <see cref="T:System.Xml.XmlReader" /> の設定。 この値は、<see langword="null" /> の場合もあります。</param>
      <returns vsli:raw="An object that is used to read the XML data in the stream.">ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 値は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.String)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance by using the specified text reader, settings, and base URI.">指定されたテキスト リーダー、設定、およびベース URI を使用して、新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <param name="input" vsli:raw="The text reader from which to read the XML data. A text reader returns a stream of Unicode characters, so the encoding specified in the XML declaration isn't used by the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to decode the data stream.">XML データの読み出し元のテキスト リーダー。 テキスト リーダーは Unicode 文字のストリームを返すため、<see cref="T:System.Xml.XmlReader" /> は XML 宣言に指定されたエンコーディングをデータ ストリームのデコードに使用しません。</param>
      <param name="settings" vsli:raw="The settings for the new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance. This value can be &lt;see langword=&quot;null&quot; /&gt;.">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスの設定。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="baseUri" vsli:raw="The base URI for the entity or document being read. This value can be &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; Security Note The base URI is used to resolve the relative URI of the XML document. Do not use a base URI from an untrusted source.">読み取るエンティティまたはドキュメントのベース URI。 この値は、<see langword="null" /> の場合もあります。  
 セキュリティに関するメモ ベース URI は、XML ドキュメントの相対 URI を解決するために使用されます。 信頼関係のないソースからベース URI を使用することは避けてください。</param>
      <returns vsli:raw="An object that is used to read the XML data in the stream.">ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 値は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance by using the specified text reader, settings, and context information for parsing.">指定したテキスト リーダー、設定、および解析するためのコンテキスト情報を使用して、新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <param name="input" vsli:raw="The text reader from which to read the XML data. A text reader returns a stream of Unicode characters, so the encoding specified in the XML declaration isn't used by the XML reader to decode the data stream.">XML データの読み出し元のテキスト リーダー。 テキスト リーダーは Unicode 文字のストリームを返すため、XML リーダーはデータ ストリームのデコードに XML 宣言に指定されたエンコーディングを使用しません。</param>
      <param name="settings" vsli:raw="The settings for the new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance. This value can be &lt;see langword=&quot;null&quot; /&gt;.">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスの設定。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="inputContext" vsli:raw="The context information required to parse the XML fragment. The context information can include the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; to use, encoding, namespace scope, the current &lt;c&gt;xml:lang&lt;/c&gt; and &lt;c&gt;xml:space&lt;/c&gt; scope, base URI, and document type definition.&#xA;&#xA; This value can be &lt;see langword=&quot;null&quot; /&gt;.">XML フラグメントの解析に必要なコンテキスト情報。 コンテキスト情報には、使用する <see cref="T:System.Xml.XmlNameTable" />、エンコーディング、名前空間スコープ、現在の <c>xml:lang</c> と <c>xml:space</c> のスコープ、ベース URI、およびドキュメント型定義を格納できます。  
この値は、<see langword="null" /> の場合もあります。</param>
      <returns vsli:raw="An object that is used to read the XML data in the stream.">ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.NameTable&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlParserContext.NameTable&quot; /&gt; properties both contain values. (Only one of these &lt;see langword=&quot;NameTable&quot; /&gt; properties can be set and used.)">
        <see cref="P:System.Xml.XmlReaderSettings.NameTable" /> プロパティと <see cref="P:System.Xml.XmlParserContext.NameTable" /> プロパティの両方に値が含まれています。 (これらの <see langword="NameTable" /> プロパティの 1 つのみを設定して使用できます。)</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance with specified URI.">指定された URI で新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <param name="inputUri" vsli:raw="The URI for the file that contains the XML data. The &lt;see cref=&quot;T:System.Xml.XmlUrlResolver&quot; /&gt; class is used to convert the path to a canonical data representation.">XML データを格納しているファイルの URI。 <see cref="T:System.Xml.XmlUrlResolver" /> クラスは、パスを正規データ形式に変換するときに使用されます。</param>
      <returns vsli:raw="An object that is used to read the XML data in the stream.">ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="inputUri" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; does not have sufficient permissions to access the location of the XML data.">
        <see cref="T:System.Xml.XmlReader" /> には、XML データの場所にアクセスするための十分なアクセス許可がありません。</exception>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The file identified by the URI does not exist.">URI によって識別されるファイルが存在しません。</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="The URI format is not correct.&#xA;&#xA;Note: In .NET for Windows Store apps or the Portable Class Library, catch the base class exception, &lt;see cref=&quot;T:System.FormatException&quot; /&gt;, instead.">Windows ストア アプリ用 .NET またはポータブル クラス ライブラリでは、基本クラスの例外である <see cref="T:System.FormatException" /> を代わりにキャッチします。  


            

 URI の形式が正しくありません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance by using the specified URI and settings.">指定された URI と設定を使用して新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <param name="inputUri" vsli:raw="The URI for the file containing the XML data. The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; object on the &lt;see cref=&quot;T:System.Xml.XmlReaderSettings&quot; /&gt; object is used to convert the path to a canonical data representation. If &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.XmlResolver&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, a new &lt;see cref=&quot;T:System.Xml.XmlUrlResolver&quot; /&gt; object is used.">XML データを格納しているファイルの URI。 <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクト上の <see cref="T:System.Xml.XmlResolver" /> オブジェクトは、パスを正規データ形式に変換するときに使用されます。 <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> が <see langword="null" /> の場合は、新しい <see cref="T:System.Xml.XmlUrlResolver" /> オブジェクトが使用されます。</param>
      <param name="settings" vsli:raw="The settings for the new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance. This value can be &lt;see langword=&quot;null&quot; /&gt;.">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスの設定。 この値は、<see langword="null" /> の場合もあります。</param>
      <returns vsli:raw="An object that is used to read the XML data in the stream.">ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="inputUri" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The file specified by the URI cannot be found.">URI で指定したファイルが見つかりません。</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="The URI format is not correct.&#xA;&#xA;Note: In .NET for Windows Store apps or the Portable Class Library, catch the base class exception, &lt;see cref=&quot;T:System.FormatException&quot; /&gt;, instead.">Windows ストア アプリ用 .NET またはポータブル クラス ライブラリでは、基本クラスの例外である <see cref="T:System.FormatException" /> を代わりにキャッチします。  


            

 URI の形式が正しくありません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance by using the specified URI, settings, and context information for parsing.">指定された URI、設定、解析するためのコンテキスト情報を使用して、新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <param name="inputUri" vsli:raw="The URI for the file containing the XML data. The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; object on the &lt;see cref=&quot;T:System.Xml.XmlReaderSettings&quot; /&gt; object is used to convert the path to a canonical data representation. If &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.XmlResolver&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, a new &lt;see cref=&quot;T:System.Xml.XmlUrlResolver&quot; /&gt; object is used.">XML データを格納しているファイルの URI。 <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクト上の <see cref="T:System.Xml.XmlResolver" /> オブジェクトは、パスを正規データ形式に変換するときに使用されます。 <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> が <see langword="null" /> の場合は、新しい <see cref="T:System.Xml.XmlUrlResolver" /> オブジェクトが使用されます。</param>
      <param name="settings" vsli:raw="The settings for the new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance. This value can be &lt;see langword=&quot;null&quot; /&gt;.">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスの設定。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="inputContext" vsli:raw="The context information required to parse the XML fragment. The context information can include the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; to use, encoding, namespace scope, the current &lt;c&gt;xml:lang&lt;/c&gt; and &lt;c&gt;xml:space&lt;/c&gt; scope, base URI, and document type definition.&#xA;&#xA; This value can be &lt;see langword=&quot;null&quot; /&gt;.">XML フラグメントの解析に必要なコンテキスト情報。 コンテキスト情報には、使用する <see cref="T:System.Xml.XmlNameTable" />、エンコーディング、名前空間スコープ、現在の <c>xml:lang</c> と <c>xml:space</c> のスコープ、ベース URI、およびドキュメント型定義を格納できます。  
この値は、<see langword="null" /> の場合もあります。</param>
      <returns vsli:raw="An object that is used to read the XML data in the stream.">ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see langword=&quot;inputUri&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <see langword="inputUri" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; does not have sufficient permissions to access the location of the XML data.">
        <see cref="T:System.Xml.XmlReader" /> には、XML データの場所にアクセスするための十分なアクセス許可がありません。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.NameTable&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlParserContext.NameTable&quot; /&gt; properties both contain values. (Only one of these &lt;see langword=&quot;NameTable&quot; /&gt; properties can be set and used).">
        <see cref="P:System.Xml.XmlReaderSettings.NameTable" /> プロパティと <see cref="P:System.Xml.XmlParserContext.NameTable" /> プロパティの両方に値が含まれています。 (これらの <see langword="NameTable" /> プロパティの 1 つのみを設定して使用できます。)</exception>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The file specified by the URI cannot be found.">URI で指定したファイルが見つかりません。</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="The URI format is not correct.">URI の形式が正しくありません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.Xml.XmlReader,System.Xml.XmlReaderSettings)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance by using the specified XML reader and settings.">指定された XML リーダーと設定を使用して新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <param name="reader" vsli:raw="The object that you want to use as the underlying XML reader.">基になる XML リーダーとして使用するオブジェクト。</param>
      <param name="settings" vsli:raw="The settings for the new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance.&#xA;&#xA; The conformance level of the &lt;see cref=&quot;T:System.Xml.XmlReaderSettings&quot; /&gt; object must either match the conformance level of the underlying reader, or it must be set to &lt;see cref=&quot;F:System.Xml.ConformanceLevel.Auto&quot; /&gt;.">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスの設定。  
<see cref="T:System.Xml.XmlReaderSettings" /> オブジェクトの準拠レベルは、基になるリーダーの準拠レベルと一致するか、<see cref="F:System.Xml.ConformanceLevel.Auto" /> に設定する必要があります。</param>
      <returns vsli:raw="An object that is wrapped around the specified &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object.">指定された <see cref="T:System.Xml.XmlReader" /> オブジェクトをラップするオブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;reader&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="reader" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the &lt;see cref=&quot;T:System.Xml.XmlReaderSettings&quot; /&gt; object specifies a conformance level that is not consistent with conformance level of the underlying reader.&#xA;&#xA; -or-&#xA;&#xA; The underlying &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is in an &lt;see cref=&quot;F:System.Xml.ReadState.Error&quot; /&gt; or &lt;see cref=&quot;F:System.Xml.ReadState.Closed&quot; /&gt; state.">
        <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクトが、基になるリーダーの準拠レベルと一致しない準拠レベルを指定した場合。  
または 
基になる <see cref="T:System.Xml.XmlReader" /> が <see cref="F:System.Xml.ReadState.Error" /> 状態か <see cref="F:System.Xml.ReadState.Closed" /> 状態。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Depth">
      <summary vsli:raw="When overridden in a derived class, gets the depth of the current node in the XML document.">派生クラスでオーバーライドされると、XML ドキュメント内の現在のノードの深さを取得します。</summary>
      <returns vsli:raw="The depth of the current node in the XML document.">XML ドキュメント内の現在のノードの深さ。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Dispose">
      <summary vsli:raw="Releases all resources used by the current instance of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlReader" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; and optionally releases the managed resources.">
        <see cref="T:System.Xml.XmlReader" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.EOF">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether the reader is positioned at the end of the stream.">派生クラスでオーバーライドされると、リーダーがストリームの末尾に配置されているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is positioned at the end of the stream; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">ストリームの末尾にリーダーが配置されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.Int32)">
      <summary vsli:raw="When overridden in a derived class, gets the value of the attribute with the specified index.">派生クラスでオーバーライドされると、指定したインデックスの属性の値を取得します。</summary>
      <param name="i" vsli:raw="The index of the attribute. The index is zero-based. (The first attribute has index 0.)">属性のインデックス。 インデックスの値は、0 から始まります。 最初の属性のインデックスは 0 です。</param>
      <returns vsli:raw="The value of the specified attribute. This method does not move the reader.">指定した属性の値。 このメソッドは、リーダーを移動しません。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;i&quot; /&gt; is out of range. It must be non-negative and less than the size of the attribute collection.">該当する <paramref name="i" /> がありません。 負の値以外で、属性コレクションのサイズよりも小さくなければなりません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.String)">
      <summary vsli:raw="When overridden in a derived class, gets the value of the attribute with the specified &lt;see cref=&quot;P:System.Xml.XmlReader.Name&quot; /&gt;.">派生クラスでオーバーライドされると、指定した <see cref="P:System.Xml.XmlReader.Name" /> の属性の値を取得します。</summary>
      <param name="name" vsli:raw="The qualified name of the attribute.">属性の限定名。</param>
      <returns vsli:raw="The value of the specified attribute. If the attribute is not found or the value is &lt;see langword=&quot;String.Empty&quot; /&gt;, &lt;see langword=&quot;null&quot; /&gt; is returned.">指定した属性の値。 属性が見つからないか、値が <see langword="String.Empty" /> の場合、<see langword="null" /> が返されます。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.String,System.String)">
      <summary vsli:raw="When overridden in a derived class, gets the value of the attribute with the specified &lt;see cref=&quot;P:System.Xml.XmlReader.LocalName&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlReader.NamespaceURI&quot; /&gt;.">派生クラスでオーバーライドされると、指定した <see cref="P:System.Xml.XmlReader.LocalName" /> および <see cref="P:System.Xml.XmlReader.NamespaceURI" /> の属性の値を取得します。</summary>
      <param name="name" vsli:raw="The local name of the attribute.">属性のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute.">属性の名前空間 URI。</param>
      <returns vsli:raw="The value of the specified attribute. If the attribute is not found or the value is &lt;see langword=&quot;String.Empty&quot; /&gt;, &lt;see langword=&quot;null&quot; /&gt; is returned. This method does not move the reader.">指定した属性の値。 属性が見つからないか、値が <see langword="String.Empty" /> の場合、<see langword="null" /> が返されます。 このメソッドは、リーダーを移動しません。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetValueAsync">
      <summary vsli:raw="Asynchronously gets the value of the current node.">現在のノードのテキスト値を非同期に取得します。</summary>
      <returns vsli:raw="The value of the current node.">現在のノードの値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress&quot;.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、"非同期操作は既に実行されています" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。
または
<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.HasAttributes">
      <summary vsli:raw="Gets a value indicating whether the current node has any attributes.">現在のノードに属性があるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node has attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のノードが属性を持っている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.HasValue">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether the current node can have a &lt;see cref=&quot;P:System.Xml.XmlReader.Value&quot; /&gt;.">派生クラスでオーバーライドされると、現在のノードが <see cref="P:System.Xml.XmlReader.Value" /> を持つことができるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node on which the reader is currently positioned can have a &lt;see langword=&quot;Value&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the node has a value of &lt;see langword=&quot;String.Empty&quot; /&gt;.">リーダーが現在配置されているノードが <see langword="Value" /> を持つことができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、ノードは <see langword="String.Empty" /> の値を持ちます。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.IsDefault">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.">派生クラスでオーバーライドされると、現在のノードが DTD またはスキーマで定義された既定値から生成された属性かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node is an attribute whose value was generated from the default value defined in the DTD or schema; &lt;see langword=&quot;false&quot; /&gt; if the attribute value was explicitly set.">現在のノードが、DTD またはスキーマで定義された既定値から生成された値を持つ属性である場合は <see langword="true" />。属性値が明示的に設定された場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.IsEmptyElement">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether the current node is an empty element (for example, &lt;c&gt;&amp;lt;MyElement/&amp;gt;&lt;/c&gt;).">派生クラスでオーバーライドされると、現在のノードが空の要素 (<c>&lt;MyElement/&gt;</c> など) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node is an element (&lt;see cref=&quot;P:System.Xml.XmlReader.NodeType&quot; /&gt; equals &lt;see langword=&quot;XmlNodeType.Element&quot; /&gt;) that ends with &lt;c&gt;/&amp;gt;&lt;/c&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 現在のノードが要素 (<see cref="P:System.Xml.XmlReader.NodeType" /> equals <see langword="XmlNodeType.Element" />) で終了する<c>/ &gt;</c>、それ以外の<see langword="false" />します。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsName(System.String)">
      <summary vsli:raw="Returns a value indicating whether the string argument is a valid XML name.">文字列引数が有効な XML 名かどうかを示す値を返します。</summary>
      <param name="str" vsli:raw="The name to validate.">検証対象の名前。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name is valid; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">名前が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;str&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="str" /> 値は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsNameToken(System.String)">
      <summary vsli:raw="Returns a value indicating whether or not the string argument is a valid XML name token.">文字列引数が有効な XML 名トークンかどうかを示す値を返します。</summary>
      <param name="str" vsli:raw="The name token to validate.">検証対象の名前トークン。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if it is a valid name token; otherwise &lt;see langword=&quot;false&quot; /&gt;.">有効な名前トークンの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;str&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="str" /> 値は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement">
      <summary vsli:raw="Calls &lt;see cref=&quot;M:System.Xml.XmlReader.MoveToContent&quot; /&gt; and tests if the current content node is a start tag or empty element tag.">
        <see cref="M:System.Xml.XmlReader.MoveToContent" /> を呼び出し、現在のコンテンツ ノードが開始タグまたは空の要素タグかどうかをテストします。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Xml.XmlReader.MoveToContent&quot; /&gt; finds a start tag or empty element tag; &lt;see langword=&quot;false&quot; /&gt; if a node type other than &lt;see langword=&quot;XmlNodeType.Element&quot; /&gt; was found.">
        <see cref="M:System.Xml.XmlReader.MoveToContent" /> が開始タグまたは空の要素タグを見つけた場合は <see langword="true" />。<see langword="XmlNodeType.Element" /> 以外のノード型が見つかった場合は <see langword="false" />。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="Incorrect XML is encountered in the input stream.">入力ストリームで、正しくない XML が検出されました。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement(System.String)">
      <summary vsli:raw="Calls &lt;see cref=&quot;M:System.Xml.XmlReader.MoveToContent&quot; /&gt; and tests if the current content node is a start tag or empty element tag and if the &lt;see cref=&quot;P:System.Xml.XmlReader.Name&quot; /&gt; property of the element found matches the given argument.">
        <see cref="M:System.Xml.XmlReader.MoveToContent" /> を呼び出し、現在のコンテンツ ノードが開始タグまたは空の要素タグかどうか、また、見つかった要素の <see cref="P:System.Xml.XmlReader.Name" /> プロパティが、指定した引数と一致するかどうかをテストします。</summary>
      <param name="name" vsli:raw="The string matched against the &lt;see langword=&quot;Name&quot; /&gt; property of the element found.">見つかった要素の <see langword="Name" /> プロパティと一致する文字列。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the resulting node is an element and the &lt;see langword=&quot;Name&quot; /&gt; property matches the specified string. &lt;see langword=&quot;false&quot; /&gt; if a node type other than &lt;see langword=&quot;XmlNodeType.Element&quot; /&gt; was found or if the element &lt;see langword=&quot;Name&quot; /&gt; property does not match the specified string.">見つかったノードが要素であり、<see langword="Name" /> プロパティが指定した文字列と一致する場合は <see langword="true" />。 <see langword="XmlNodeType.Element" /> 以外のノード型が見つかった場合、または要素の <see langword="Name" /> プロパティが指定した文字列と一致しない場合は <see langword="false" />。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="Incorrect XML is encountered in the input stream.">入力ストリームで、正しくない XML が検出されました。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement(System.String,System.String)">
      <summary vsli:raw="Calls &lt;see cref=&quot;M:System.Xml.XmlReader.MoveToContent&quot; /&gt; and tests if the current content node is a start tag or empty element tag and if the &lt;see cref=&quot;P:System.Xml.XmlReader.LocalName&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlReader.NamespaceURI&quot; /&gt; properties of the element found match the given strings.">
        <see cref="M:System.Xml.XmlReader.MoveToContent" /> を呼び出し、現在のコンテンツ ノードが開始タグまたは空の要素タグかどうか、また、見つかった要素の <see cref="P:System.Xml.XmlReader.LocalName" /> プロパティと <see cref="P:System.Xml.XmlReader.NamespaceURI" /> プロパティが、指定した文字列と一致するかどうかをテストします。</summary>
      <param name="localname" vsli:raw="The string to match against the &lt;see langword=&quot;LocalName&quot; /&gt; property of the element found.">見つかった要素の <see langword="LocalName" /> プロパティと一致する文字列。</param>
      <param name="ns" vsli:raw="The string to match against the &lt;see langword=&quot;NamespaceURI&quot; /&gt; property of the element found.">見つかった要素の <see langword="NamespaceURI" /> プロパティと一致する文字列。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the resulting node is an element. &lt;see langword=&quot;false&quot; /&gt; if a node type other than &lt;see langword=&quot;XmlNodeType.Element&quot; /&gt; was found or if the &lt;see langword=&quot;LocalName&quot; /&gt; and &lt;see langword=&quot;NamespaceURI&quot; /&gt; properties of the element do not match the specified strings.">見つかったノードが要素の場合は <see langword="true" />。 <see langword="XmlNodeType.Element" /> 以外のノード型が見つかった場合、または要素の <see langword="LocalName" /> および <see langword="NamespaceURI" /> プロパティが指定した文字列と一致しない場合は <see langword="false" />。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="Incorrect XML is encountered in the input stream.">入力ストリームで、正しくない XML が検出されました。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.Int32)">
      <summary vsli:raw="When overridden in a derived class, gets the value of the attribute with the specified index.">派生クラスでオーバーライドされると、指定したインデックスの属性の値を取得します。</summary>
      <param name="i" vsli:raw="The index of the attribute.">属性のインデックス。</param>
      <returns vsli:raw="The value of the specified attribute.">指定した属性の値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.String)">
      <summary vsli:raw="When overridden in a derived class, gets the value of the attribute with the specified &lt;see cref=&quot;P:System.Xml.XmlReader.Name&quot; /&gt;.">派生クラスでオーバーライドされると、指定した <see cref="P:System.Xml.XmlReader.Name" /> の属性の値を取得します。</summary>
      <param name="name" vsli:raw="The qualified name of the attribute.">属性の限定名。</param>
      <returns vsli:raw="The value of the specified attribute. If the attribute is not found, &lt;see langword=&quot;null&quot; /&gt; is returned.">指定した属性の値。 指定した属性が見つからない場合は <see langword="null" /> が返されます。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.String,System.String)">
      <summary vsli:raw="When overridden in a derived class, gets the value of the attribute with the specified &lt;see cref=&quot;P:System.Xml.XmlReader.LocalName&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlReader.NamespaceURI&quot; /&gt;.">派生クラスでオーバーライドされると、指定した <see cref="P:System.Xml.XmlReader.LocalName" /> および <see cref="P:System.Xml.XmlReader.NamespaceURI" /> の属性の値を取得します。</summary>
      <param name="name" vsli:raw="The local name of the attribute.">属性のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute.">属性の名前空間 URI。</param>
      <returns vsli:raw="The value of the specified attribute. If the attribute is not found, &lt;see langword=&quot;null&quot; /&gt; is returned.">指定した属性の値。 指定した属性が見つからない場合は <see langword="null" /> が返されます。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.LocalName">
      <summary vsli:raw="When overridden in a derived class, gets the local name of the current node.">派生クラスでオーバーライドされると、現在のノードのローカル名を取得します。</summary>
      <returns vsli:raw="The name of the current node with the prefix removed. For example, &lt;see langword=&quot;LocalName&quot; /&gt; is &lt;see langword=&quot;book&quot; /&gt; for the element &lt;c&gt;&amp;lt;bk:book&amp;gt;&lt;/c&gt;.&#xA;&#xA; For node types that do not have a name (like &lt;see langword=&quot;Text&quot; /&gt;, &lt;see langword=&quot;Comment&quot; /&gt;, and so on), this property returns &lt;see langword=&quot;String.Empty&quot; /&gt;.">プリフィックスを削除した現在のノードの名前。 たとえば、<see langword="LocalName" />は<see langword="book" />要素の<c>&lt;bk:book&gt;</c>します。  
名前を持たないノード型 (<see langword="Text" />、<see langword="Comment" /> など) の場合、このプロパティは <see langword="String.Empty" /> を返します。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.LookupNamespace(System.String)">
      <summary vsli:raw="When overridden in a derived class, resolves a namespace prefix in the current element's scope.">派生クラスでオーバーライドされると、現在の要素のスコープの名前空間プリフィックスを解決します。</summary>
      <param name="prefix" vsli:raw="The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string.">解決する対象となる名前空間 URI のプレフィックス。 既定の名前空間と一致させるには、空の文字列を渡します。</param>
      <returns vsli:raw="The namespace URI to which the prefix maps or &lt;see langword=&quot;null&quot; /&gt; if no matching prefix is found.">プレフィックスの割り当て先の名前空間 URI。条件に合うプレフィックスが見つからない場合は <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.Int32)">
      <summary vsli:raw="When overridden in a derived class, moves to the attribute with the specified index.">派生クラスでオーバーライドされると、指定したインデックスの属性に移動します。</summary>
      <param name="i" vsli:raw="The index of the attribute.">属性のインデックス。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The parameter has a negative value.">パラメーターの値が負数です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.String)">
      <summary vsli:raw="When overridden in a derived class, moves to the attribute with the specified &lt;see cref=&quot;P:System.Xml.XmlReader.Name&quot; /&gt;.">派生クラスでオーバーライドされると、指定した <see cref="P:System.Xml.XmlReader.Name" /> の属性に移動します。</summary>
      <param name="name" vsli:raw="The qualified name of the attribute.">属性の限定名。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the reader's position does not change.">属性が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、リーダーの位置は変更されません。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The parameter is an empty string.">パラメーターは空の文字列です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.String,System.String)">
      <summary vsli:raw="When overridden in a derived class, moves to the attribute with the specified &lt;see cref=&quot;P:System.Xml.XmlReader.LocalName&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlReader.NamespaceURI&quot; /&gt;.">派生クラスでオーバーライドされると、指定した <see cref="P:System.Xml.XmlReader.LocalName" /> および <see cref="P:System.Xml.XmlReader.NamespaceURI" /> の属性に移動します。</summary>
      <param name="name" vsli:raw="The local name of the attribute.">属性のローカル名。</param>
      <param name="ns" vsli:raw="The namespace URI of the attribute.">属性の名前空間 URI。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the reader's position does not change.">属性が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、リーダーの位置は変更されません。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Both parameter values are &lt;see langword=&quot;null&quot; /&gt;.">両方のパラメーター値が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToContent">
      <summary vsli:raw="Checks whether the current node is a content (non-white space text, &lt;see langword=&quot;CDATA&quot; /&gt;, &lt;see langword=&quot;Element&quot; /&gt;, &lt;see langword=&quot;EndElement&quot; /&gt;, &lt;see langword=&quot;EntityReference&quot; /&gt;, or &lt;see langword=&quot;EndEntity&quot; /&gt;) node. If the node is not a content node, the reader skips ahead to the next content node or end of file. It skips over nodes of the following type: &lt;see langword=&quot;ProcessingInstruction&quot; /&gt;, &lt;see langword=&quot;DocumentType&quot; /&gt;, &lt;see langword=&quot;Comment&quot; /&gt;, &lt;see langword=&quot;Whitespace&quot; /&gt;, or &lt;see langword=&quot;SignificantWhitespace&quot; /&gt;.">現在のノードがコンテンツ (空白でないテキスト、<see langword="CDATA" />、<see langword="Element" />、<see langword="EndElement" />、<see langword="EntityReference" />、または <see langword="EndEntity" />) ノードかどうかを確認します。 ノードがコンテンツ ノードでない場合、リーダーは、次のコンテンツ ノードまたはファイルの末尾までスキップします。 リーダーは、<see langword="ProcessingInstruction" />、<see langword="DocumentType" />、<see langword="Comment" />、<see langword="Whitespace" />、または <see langword="SignificantWhitespace" /> の型のノードをスキップします。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Xml.XmlReader.NodeType&quot; /&gt; of the current node found by the method or &lt;see langword=&quot;XmlNodeType.None&quot; /&gt; if the reader has reached the end of the input stream.">メソッドが見つけた現在のノードの <see cref="P:System.Xml.XmlReader.NodeType" />。リーダーが入力ストリームの末尾に到達した場合は <see langword="XmlNodeType.None" />。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="Incorrect XML encountered in the input stream.">入力ストリームで、正しくない XML が検出されました。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToContentAsync">
      <summary vsli:raw="Asynchronously checks whether the current node is a content node. If the node is not a content node, the reader skips ahead to the next content node or end of file.">現在のノードがコンテンツ ノードであるかどうかを非同期的に確認します。 ノードがコンテンツ ノードでない場合、リーダーは、次のコンテンツ ノードまたはファイルの末尾までスキップします。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Xml.XmlReader.NodeType&quot; /&gt; of the current node found by the method or &lt;see langword=&quot;XmlNodeType.None&quot; /&gt; if the reader has reached the end of the input stream.">メソッドが見つけた現在のノードの <see cref="P:System.Xml.XmlReader.NodeType" />。リーダーが入力ストリームの末尾に到達した場合は <see langword="XmlNodeType.None" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。
または
<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToElement">
      <summary vsli:raw="When overridden in a derived class, moves to the element that contains the current attribute node.">派生クラスでオーバーライドされると、現在の属性ノードを含む要素に移動します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); &lt;see langword=&quot;false&quot; /&gt; if the reader is not positioned on an attribute (the position of the reader does not change).">リーダーが属性の位置に配置されている場合は <see langword="true" /> で、属性を所有している要素の位置にリーダーが移動します。リーダーが属性の位置に配置されていない場合は <see langword="false" /> で、リーダーの位置が変更されません。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToFirstAttribute">
      <summary vsli:raw="When overridden in a derived class, moves to the first attribute.">派生クラスでオーバーライドされると、最初の属性に移動します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an attribute exists (the reader moves to the first attribute); otherwise, &lt;see langword=&quot;false&quot; /&gt; (the position of the reader does not change).">属性が存在する場合は <see langword="true" /> で、リーダーが最初の属性へ移動します。それ以外の場合は <see langword="false" /> で、リーダーの位置が変更されません。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToNextAttribute">
      <summary vsli:raw="When overridden in a derived class, moves to the next attribute.">派生クラスでオーバーライドされると、次の属性に移動します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is a next attribute; &lt;see langword=&quot;false&quot; /&gt; if there are no more attributes.">次の属性が存在する場合は <see langword="true" />。それ以上、属性が存在しない場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Name">
      <summary vsli:raw="When overridden in a derived class, gets the qualified name of the current node.">派生クラスでオーバーライドされると、現在のノードの限定名を取得します。</summary>
      <returns vsli:raw="The qualified name of the current node. For example, &lt;see langword=&quot;Name&quot; /&gt; is &lt;see langword=&quot;bk:book&quot; /&gt; for the element &lt;c&gt;&amp;lt;bk:book&amp;gt;&lt;/c&gt;.&#xA;&#xA; The name returned is dependent on the &lt;see cref=&quot;P:System.Xml.XmlReader.NodeType&quot; /&gt; of the node. The following node types return the listed values. All other node types return an empty string.&#xA;&#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Node type&lt;/term&gt;&lt;description&gt; Name&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Attribute&quot; /&gt;&lt;/term&gt;&lt;description&gt; The name of the attribute.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;DocumentType&quot; /&gt;&lt;/term&gt;&lt;description&gt; The document type name.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Element&quot; /&gt;&lt;/term&gt;&lt;description&gt; The tag name.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;EntityReference&quot; /&gt;&lt;/term&gt;&lt;description&gt; The name of the entity referenced.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;ProcessingInstruction&quot; /&gt;&lt;/term&gt;&lt;description&gt; The target of the processing instruction.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;XmlDeclaration&quot; /&gt;&lt;/term&gt;&lt;description&gt; The literal string &lt;see langword=&quot;xml&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">現在のノードの限定名。 たとえば、<see langword="Name" />は<see langword="bk:book" />要素の<c>&lt;bk:book&gt;</c>します。  
返される名前は、ノードの <see cref="P:System.Xml.XmlReader.NodeType" /> によって異なります。 リストされた値を返すノード型を次に示します。 その他のすべてのノード型は、空の文字列を返します。  
  ノード型 
  name 
 <see langword="Attribute" /> 属性の名前。  

 <see langword="DocumentType" /> ドキュメントの種類の名前。  

 <see langword="Element" /> タグ名。  

 <see langword="EntityReference" /> 参照されたエンティティの名前。  

 <see langword="ProcessingInstruction" /> 処理命令の対象。  

 <see langword="XmlDeclaration" /> リテラル文字列 <see langword="xml" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.NamespaceURI">
      <summary vsli:raw="When overridden in a derived class, gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.">派生クラスでオーバーライドされると、リーダーが配置されているノードの名前空間 URI (W3C の名前空間の仕様における定義に準拠) を取得します。</summary>
      <returns vsli:raw="The namespace URI of the current node; otherwise an empty string.">現在のノードの名前空間 URI。それ以外の場合は空の文字列。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.NameTable">
      <summary vsli:raw="When overridden in a derived class, gets the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; associated with this implementation.">派生クラスでオーバーライドされると、この実装に関連付けられている <see cref="T:System.Xml.XmlNameTable" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlNameTable&quot; /&gt; enabling you to get the atomized version of a string within the node.">ノード内の最小単位に分割された文字列を取得できる <see langword="XmlNameTable" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.NodeType">
      <summary vsli:raw="When overridden in a derived class, gets the type of the current node.">派生クラスでオーバーライドされると、現在のノードの型を取得します。</summary>
      <returns vsli:raw="One of the enumeration values that specify the type of the current node.">現在のノードの型を指定する列挙値の 1 つ。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Prefix">
      <summary vsli:raw="When overridden in a derived class, gets the namespace prefix associated with the current node.">派生クラスでオーバーライドされると、現在のノードに関連付けられている名前空間プリフィックスを取得します。</summary>
      <returns vsli:raw="The namespace prefix associated with the current node.">現在のノードに関連付けられた名前空間プリフィックス。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.QuoteChar">
      <summary vsli:raw="When overridden in a derived class, gets the quotation mark character used to enclose the value of an attribute node.">派生クラスでオーバーライドされると、属性ノードの値を囲むために使用する引用符文字を取得します。</summary>
      <returns vsli:raw="The quotation mark character (&quot; or ') used to enclose the value of an attribute node.">属性ノードの値を囲むために使用されている引用符 (" または ')。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Read">
      <summary vsli:raw="When overridden in a derived class, reads the next node from the stream.">派生クラスでオーバーライドされると、ストリームから次のノードを読み取ります。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the next node was read successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">次のノードが正常に読み取られた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="An error occurred while parsing the XML.">XML の解析中にエラーが発生しました。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadAsync">
      <summary vsli:raw="Asynchronously reads the next node from the stream.">ストリームから次のノードを非同期に読み取ります。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the next node was read successfully; &lt;see langword=&quot;false&quot; /&gt; if there are no more nodes to read.">次のノードが正常に読み取られた場合は <see langword="true" />。それ以上読み取る対象となるノードが存在しない場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。
または
<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadAttributeValue">
      <summary vsli:raw="When overridden in a derived class, parses the attribute value into one or more &lt;see langword=&quot;Text&quot; /&gt;, &lt;see langword=&quot;EntityReference&quot; /&gt;, or &lt;see langword=&quot;EndEntity&quot; /&gt; nodes.">派生クラスでオーバーライドされると、属性値を解析して、1 つ以上の <see langword="Text" />、<see langword="EntityReference" />、または <see langword="EndEntity" /> の各ノードに格納します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there are nodes to return.&#xA;&#xA; &lt;see langword=&quot;false&quot; /&gt; if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.&#xA;&#xA; An empty attribute, such as, &lt;c&gt;misc=&quot;&quot;&lt;/c&gt;, returns &lt;see langword=&quot;true&quot; /&gt; with a single node with a value of &lt;see langword=&quot;String.Empty&quot; /&gt;.">返すノードがある場合は <see langword="true" />。  
 初めて呼び出すときにリーダーの位置が属性ノード上にない場合、またはすべての属性値が読み込まれている場合は <see langword="false" />。  
<c>misc=""</c> などの空の属性は、値 <see langword="String.Empty" /> を持つ単一のノードと一緒に <see langword="true" /> を返します。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary vsli:raw="Reads the content as an object of the type specified.">指定された型のオブジェクトとして内容を読み取ります。</summary>
      <param name="returnType" vsli:raw="The type of the value to be returned.&#xA;&#xA; Note With the release of the .NET Framework 3.5, the value of the &lt;paramref name=&quot;returnType&quot; /&gt; parameter can now be the &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; type.">返される値の型。  
 注 .NET Framework 3.5 のリリースでは、<paramref name="returnType" /> パラメーターの値に <see cref="T:System.DateTimeOffset" /> 型を指定できるようになりました。</param>
      <param name="namespaceResolver" vsli:raw="An &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object that is used to resolve any namespace prefixes related to type conversion. For example, this can be used when converting an &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; object to an &lt;c&gt;xs:string&lt;/c&gt;.&#xA;&#xA; This value can be &lt;see langword=&quot;null&quot; /&gt;.">型変換に関連する名前空間プレフィックスの解決に使用される <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。 たとえば、<see cref="T:System.Xml.XmlQualifiedName" /> オブジェクトを <c>xs:string</c> に変換するときにこれを使用できます。  
この値は、<see langword="null" /> の場合もあります。</param>
      <returns vsli:raw="The concatenated text content or attribute value converted to the requested type.">要求された型に変換された、連結されたテキストの内容または属性値。</returns>
      <exception cref="T:System.FormatException" vsli:raw="The content is not in the correct format for the target type.">コンテンツが、指定した型の正しい形式になっていません。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast is not valid.">試行されたキャストが無効です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;returnType&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="returnType" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node is not a supported node type. See the table below for details.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">現在のノードは、サポートされているノード型ではありません。 詳細については、次の表を参照してください。
または
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="Read &lt;see langword=&quot;Decimal.MaxValue&quot; /&gt;.">
        <see langword="Decimal.MaxValue" /> を読み取りました。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary vsli:raw="Asynchronously reads the content as an object of the type specified.">指定された型のオブジェクトとして内容を非同期に読み取ります。</summary>
      <param name="returnType" vsli:raw="The type of the value to be returned.">返される値の型。</param>
      <param name="namespaceResolver" vsli:raw="An &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object that is used to resolve any namespace prefixes related to type conversion.">型変換に関連する名前空間プレフィックスの解決に使用される <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
      <returns vsli:raw="The concatenated text content or attribute value converted to the requested type.">要求された型に変換された、連結されたテキストの内容または属性値。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。
または
<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the content and returns the Base64 decoded binary bytes.">コンテンツを読み取り、Base64 でデコードされたバイナリ バイトを返します。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <returns vsli:raw="The number of bytes written to the buffer.">バッファーに書き込まれたバイト数。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)&quot; /&gt; is not supported on the current node.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> は、現在のノードではサポートされていません。
または
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; implementation does not support this method.">
        <see cref="T:System.Xml.XmlReader" /> 実装が、このメソッドをサポートしていません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBase64Async(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Asynchronously reads the content and returns the Base64 decoded binary bytes.">コンテンツを非同期に読み取り、Base64 でデコードされたバイナリ バイトを返します。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <returns vsli:raw="The number of bytes written to the buffer.">バッファーに書き込まれたバイト数。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。
または
<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the content and returns the &lt;see langword=&quot;BinHex&quot; /&gt; decoded binary bytes.">コンテンツを読み取り、<see langword="BinHex" /> でデコードされたバイナリ バイトを返します。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <returns vsli:raw="The number of bytes written to the buffer.">バッファーに書き込まれたバイト数。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)&quot; /&gt; is not supported on the current node.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> は、現在のノードではサポートされていません。
または
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; implementation does not support this method.">
        <see cref="T:System.Xml.XmlReader" /> 実装が、このメソッドをサポートしていません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Asynchronously reads the content and returns the &lt;see langword=&quot;BinHex&quot; /&gt; decoded binary bytes.">コンテンツを非同期に読み取り、<see langword="BinHex" /> でデコードされたバイナリ バイトを返します。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <returns vsli:raw="The number of bytes written to the buffer.">バッファーに書き込まれたバイト数。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。
または
<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBoolean">
      <summary vsli:raw="Reads the text content at the current position as a &lt;see langword=&quot;Boolean&quot; /&gt;.">現在の位置でテキスト コンテンツを <see langword="Boolean" /> として読み取ります。</summary>
      <returns vsli:raw="The text content as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; object.">
        <see cref="T:System.Boolean" /> オブジェクトとしてのテキスト コンテンツ。</returns>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast is not valid.">試行されたキャストが無効です。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The string format is not valid.">文字列書式が無効です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDateTime">
      <summary vsli:raw="Reads the text content at the current position as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; object.">現在の位置でテキスト コンテンツを <see cref="T:System.DateTime" /> オブジェクトとして読み取ります。</summary>
      <returns vsli:raw="The text content as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; object.">
        <see cref="T:System.DateTime" /> オブジェクトとしてのテキスト コンテンツ。</returns>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast is not valid.">試行されたキャストが無効です。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The string format is not valid.">文字列書式が無効です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDateTimeOffset">
      <summary vsli:raw="Reads the text content at the current position as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; object.">現在の位置でテキスト コンテンツを <see cref="T:System.DateTimeOffset" /> オブジェクトとして読み取ります。</summary>
      <returns vsli:raw="The text content as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; object.">
        <see cref="T:System.DateTimeOffset" /> オブジェクトとしてのテキスト コンテンツ。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDecimal">
      <summary vsli:raw="Reads the text content at the current position as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; object.">現在の位置でテキスト コンテンツを <see cref="T:System.Decimal" /> オブジェクトとして読み取ります。</summary>
      <returns vsli:raw="The text content at the current position as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; object.">現在の位置における <see cref="T:System.Decimal" /> オブジェクトとしてのテキスト コンテンツ。</returns>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast is not valid.">試行されたキャストが無効です。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The string format is not valid.">文字列書式が無効です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDouble">
      <summary vsli:raw="Reads the text content at the current position as a double-precision floating-point number.">現在の位置のテキストの内容を、倍精度浮動小数点数として読み取ります。</summary>
      <returns vsli:raw="The text content as a double-precision floating-point number.">倍精度浮動小数点数としてのテキストの内容。</returns>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast is not valid.">試行されたキャストが無効です。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The string format is not valid.">文字列書式が無効です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsFloat">
      <summary vsli:raw="Reads the text content at the current position as a single-precision floating point number.">現在の位置のテキストの内容を、単精度浮動小数点数として読み取ります。</summary>
      <returns vsli:raw="The text content at the current position as a single-precision floating point number.">現在の位置における単精度浮動小数点数としてのテキストの内容。</returns>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast is not valid.">試行されたキャストが無効です。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The string format is not valid.">文字列書式が無効です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsInt">
      <summary vsli:raw="Reads the text content at the current position as a 32-bit signed integer.">現在の位置でテキストの内容を 32 ビット符号付き整数として読み取ります。</summary>
      <returns vsli:raw="The text content as a 32-bit signed integer.">32 ビット符号付き整数としてのテキストの内容。</returns>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast is not valid.">試行されたキャストが無効です。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The string format is not valid.">文字列書式が無効です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsLong">
      <summary vsli:raw="Reads the text content at the current position as a 64-bit signed integer.">現在の位置でテキストの内容を 64 ビット符号付き整数として読み取ります。</summary>
      <returns vsli:raw="The text content as a 64-bit signed integer.">64 ビット符号付き整数としてのテキストの内容。</returns>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast is not valid.">試行されたキャストが無効です。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The string format is not valid.">文字列書式が無効です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsObject">
      <summary vsli:raw="Reads the text content at the current position as an &lt;see cref=&quot;T:System.Object&quot; /&gt;.">現在の位置でテキスト コンテンツを <see cref="T:System.Object" /> として読み取ります。</summary>
      <returns vsli:raw="The text content as the most appropriate common language runtime (CLR) object.">最も適切な共通言語ランタイム (CLR) オブジェクトとしてのテキストの内容。</returns>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast is not valid.">試行されたキャストが無効です。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The string format is not valid.">文字列書式が無効です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsObjectAsync">
      <summary vsli:raw="Asynchronously reads the text content at the current position as an &lt;see cref=&quot;T:System.Object&quot; /&gt;.">現在の位置でテキスト コンテンツを <see cref="T:System.Object" /> として非同期に読み取ります。</summary>
      <returns vsli:raw="The text content as the most appropriate common language runtime (CLR) object.">最も適切な共通言語ランタイム (CLR) オブジェクトとしてのテキストの内容。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。
または
<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsString">
      <summary vsli:raw="Reads the text content at the current position as a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">現在の位置でテキスト コンテンツを <see cref="T:System.String" /> オブジェクトとして読み取ります。</summary>
      <returns vsli:raw="The text content as a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">
        <see cref="T:System.String" /> オブジェクトとしてのテキスト コンテンツ。</returns>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast is not valid.">試行されたキャストが無効です。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The string format is not valid.">文字列書式が無効です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsStringAsync">
      <summary vsli:raw="Asynchronously reads the text content at the current position as a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">現在の位置でテキスト コンテンツを <see cref="T:System.String" /> オブジェクトとして非同期に読み取ります。</summary>
      <returns vsli:raw="The text content as a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">
        <see cref="T:System.String" /> オブジェクトとしてのテキスト コンテンツ。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。
または
<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary vsli:raw="Reads the element content as the requested type.">要素の内容を要求された型として返します。</summary>
      <param name="returnType" vsli:raw="The type of the value to be returned.&#xA;&#xA; Note With the release of the .NET Framework 3.5, the value of the &lt;paramref name=&quot;returnType&quot; /&gt; parameter can now be the &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; type.">返される値の型。  
 注 .NET Framework 3.5 のリリースでは、<paramref name="returnType" /> パラメーターの値に <see cref="T:System.DateTimeOffset" /> 型を指定できるようになりました。</param>
      <param name="namespaceResolver" vsli:raw="An &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object that is used to resolve any namespace prefixes related to type conversion.">型変換に関連する名前空間プレフィックスの解決に使用される <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
      <returns vsli:raw="The element content converted to the requested typed object.">要求された型のオブジェクトに変換された要素の内容。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。
または
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to the requested type.">現在の要素には、子要素が含まれています。  
 または  
 要素のコンテンツを要求された型に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="Read &lt;see langword=&quot;Decimal.MaxValue&quot; /&gt;.">
        <see langword="Decimal.MaxValue" /> を読み取りました。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver,System.String,System.String)">
      <summary vsli:raw="Checks that the specified local name and namespace URI matches that of the current element, then reads the element content as the requested type.">指定されたローカル名と名前空間 URI が現在の要素のものと一致することを確認し、要素の内容を要求された型として読み込みます。</summary>
      <param name="returnType" vsli:raw="The type of the value to be returned.&#xA;&#xA; Note With the release of the .NET Framework 3.5, the value of the &lt;paramref name=&quot;returnType&quot; /&gt; parameter can now be the &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; type.">返される値の型。  
 注 .NET Framework 3.5 のリリースでは、<paramref name="returnType" /> パラメーターの値に <see cref="T:System.DateTimeOffset" /> 型を指定できるようになりました。</param>
      <param name="namespaceResolver" vsli:raw="An &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object that is used to resolve any namespace prefixes related to type conversion.">型変換に関連する名前空間プレフィックスの解決に使用される <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
      <param name="localName" vsli:raw="The local name of the element.">要素のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element.">要素の名前空間 URI。</param>
      <returns vsli:raw="The element content converted to the requested typed object.">要求された型のオブジェクトに変換された要素の内容。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。
または
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to the requested type.">現在の要素には、子要素が含まれています。  
 または  
 要素のコンテンツを要求された型に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified local name and namespace URI do not match that of the current element being read.">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="Read &lt;see langword=&quot;Decimal.MaxValue&quot; /&gt;.">
        <see langword="Decimal.MaxValue" /> を読み取りました。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary vsli:raw="Asynchronously reads the element content as the requested type.">要素の内容を要求された型として非同期に読み取ります。</summary>
      <param name="returnType" vsli:raw="The type of the value to be returned.">返される値の型。</param>
      <param name="namespaceResolver" vsli:raw="An &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object that is used to resolve any namespace prefixes related to type conversion.">型変換に関連する名前空間プレフィックスの解決に使用される <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
      <returns vsli:raw="The element content converted to the requested typed object.">要求された型のオブジェクトに変換された要素の内容。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。
または
<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the element and decodes the &lt;see langword=&quot;Base64&quot; /&gt; content.">要素を読み取り、<see langword="Base64" /> の内容をデコードします。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <returns vsli:raw="The number of bytes written to the buffer.">バッファーに書き込まれたバイト数。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node is not an element node.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">現在のノードは要素ノードではありません。
または
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; implementation does not support this method.">
        <see cref="T:System.Xml.XmlReader" /> 実装が、このメソッドをサポートしていません。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The element contains mixed-content.">要素には混合コンテンツが含まれます。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The content cannot be converted to the requested type.">コンテンツを要求された型に変換できません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBase64Async(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Asynchronously reads the element and decodes the &lt;see langword=&quot;Base64&quot; /&gt; content.">要素を非同期に読み取り、<see langword="Base64" /> の内容をデコードします。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <returns vsli:raw="The number of bytes written to the buffer.">バッファーに書き込まれたバイト数。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。
または
<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the element and decodes the &lt;see langword=&quot;BinHex&quot; /&gt; content.">要素を読み取り、<see langword="BinHex" /> の内容をデコードします。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <returns vsli:raw="The number of bytes written to the buffer.">バッファーに書き込まれたバイト数。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node is not an element node.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">現在のノードは要素ノードではありません。
または
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; implementation does not support this method.">
        <see cref="T:System.Xml.XmlReader" /> 実装が、このメソッドをサポートしていません。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The element contains mixed-content.">要素には混合コンテンツが含まれます。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The content cannot be converted to the requested type.">コンテンツを要求された型に変換できません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Asynchronously reads the element and decodes the &lt;see langword=&quot;BinHex&quot; /&gt; content.">要素を非同期に読み取り、<see langword="BinHex" /> の内容をデコードします。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <returns vsli:raw="The number of bytes written to the buffer.">バッファーに書き込まれたバイト数。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。
または
<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBoolean">
      <summary vsli:raw="Reads the current element and returns the contents as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; object.">現在の要素を読み取り、そのコンテンツを <see cref="T:System.Boolean" /> オブジェクトとして返します。</summary>
      <returns vsli:raw="The element content as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; object.">コンテンツの要素、<see cref="T:System.Boolean" />オブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。
または
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; object.">現在の要素には、子要素が含まれています。  
または 
要素のコンテンツを <see cref="T:System.Boolean" /> オブジェクトに変換できません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBoolean(System.String,System.String)">
      <summary vsli:raw="Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; object.">指定されたローカル名と名前空間 URI が現在の要素のものと一致することを確認し、現在の要素を読み取って、コンテンツを <see cref="T:System.Boolean" /> オブジェクトとして返します。</summary>
      <param name="localName" vsli:raw="The local name of the element.">要素のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element.">要素の名前空間 URI。</param>
      <returns vsli:raw="The element content as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; object.">コンテンツの要素、<see cref="T:System.Boolean" />オブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。
または
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to the requested type.">現在の要素には、子要素が含まれています。  
 または  
 要素のコンテンツを要求された型に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified local name and namespace URI do not match that of the current element being read.">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDateTime">
      <summary vsli:raw="Reads the current element and returns the contents as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; object.">現在の要素を読み取り、そのコンテンツを <see cref="T:System.DateTime" /> オブジェクトとして返します。</summary>
      <returns vsli:raw="The element content as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; object.">コンテンツの要素、<see cref="T:System.DateTime" />オブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。
または
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; object.">現在の要素には、子要素が含まれています。  
または 
要素のコンテンツを <see cref="T:System.DateTime" /> オブジェクトに変換できません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDateTime(System.String,System.String)">
      <summary vsli:raw="Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; object.">指定されたローカル名と名前空間 URI が現在の要素のものと一致することを確認し、現在の要素を読み取って、コンテンツを <see cref="T:System.DateTime" /> オブジェクトとして返します。</summary>
      <param name="localName" vsli:raw="The local name of the element.">要素のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element.">要素の名前空間 URI。</param>
      <returns vsli:raw="The element contents as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; object.">
        <see cref="T:System.DateTime" /> オブジェクトとしての要素のコンテンツ。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。
または
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to the requested type.">現在の要素には、子要素が含まれています。  
 または  
 要素のコンテンツを要求された型に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified local name and namespace URI do not match that of the current element being read.">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDecimal">
      <summary vsli:raw="Reads the current element and returns the contents as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; object.">現在の要素を読み取り、そのコンテンツを <see cref="T:System.Decimal" /> オブジェクトとして返します。</summary>
      <returns vsli:raw="The element content as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; object.">コンテンツの要素、<see cref="T:System.Decimal" />オブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。
または
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">現在の要素には、子要素が含まれています。  
または 
要素のコンテンツを <see cref="T:System.Decimal" /> に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDecimal(System.String,System.String)">
      <summary vsli:raw="Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; object.">指定されたローカル名と名前空間 URI が現在の要素のものと一致することを確認し、現在の要素を読み取って、コンテンツを <see cref="T:System.Decimal" /> オブジェクトとして返します。</summary>
      <param name="localName" vsli:raw="The local name of the element.">要素のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element.">要素の名前空間 URI。</param>
      <returns vsli:raw="The element content as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; object.">コンテンツの要素、<see cref="T:System.Decimal" />オブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。
または
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">現在の要素には、子要素が含まれています。  
または 
要素のコンテンツを <see cref="T:System.Decimal" /> に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified local name and namespace URI do not match that of the current element being read.">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDouble">
      <summary vsli:raw="Reads the current element and returns the contents as a double-precision floating-point number.">現在の要素を読み込み、その内容を倍精度浮動小数点数として返します。</summary>
      <returns vsli:raw="The element content as a double-precision floating-point number.">倍精度浮動小数点数としての要素の内容。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。
または
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to a double-precision floating-point number.">現在の要素には、子要素が含まれています。  
 または  
 要素のコンテンツを倍精度浮動小数点数に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDouble(System.String,System.String)">
      <summary vsli:raw="Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a double-precision floating-point number.">指定されたローカル名と名前空間 URI が現在の要素のものと一致することを確認し、現在の要素を読み込んで内容を倍精度浮動小数点数として返します。</summary>
      <param name="localName" vsli:raw="The local name of the element.">要素のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element.">要素の名前空間 URI。</param>
      <returns vsli:raw="The element content as a double-precision floating-point number.">倍精度浮動小数点数としての要素の内容。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。
または
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to the requested type.">現在の要素には、子要素が含まれています。  
 または  
 要素のコンテンツを要求された型に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified local name and namespace URI do not match that of the current element being read.">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsFloat">
      <summary vsli:raw="Reads the current element and returns the contents as single-precision floating-point number.">現在の要素を読み込み、その内容を単精度浮動小数点数として返します。</summary>
      <returns vsli:raw="The element content as a single-precision floating point number.">単精度浮動小数点数としての要素の内容。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。
または
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to a single-precision floating-point number.">現在の要素には、子要素が含まれています。  
 または  
 要素のコンテンツを単精度浮動小数点数に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsFloat(System.String,System.String)">
      <summary vsli:raw="Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a single-precision floating-point number.">指定されたローカル名と名前空間 URI が現在の要素のものと一致することを確認し、現在の要素を読み込んで内容を単精度浮動小数点数として返します。</summary>
      <param name="localName" vsli:raw="The local name of the element.">要素のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element.">要素の名前空間 URI。</param>
      <returns vsli:raw="The element content as a single-precision floating point number.">単精度浮動小数点数としての要素の内容。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。
または 
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to a single-precision floating-point number.">現在の要素には、子要素が含まれています。  
 または  
 要素のコンテンツを単精度浮動小数点数に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified local name and namespace URI do not match that of the current element being read.">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsInt">
      <summary vsli:raw="Reads the current element and returns the contents as a 32-bit signed integer.">現在の要素を読み取り、その内容を 32 ビット符号付き整数として返します。</summary>
      <returns vsli:raw="The element content as a 32-bit signed integer.">32 ビット符号付き整数としての要素の内容。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。
または 
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to a 32-bit signed integer.">現在の要素には、子要素が含まれています。  
 または  
 要素のコンテンツを 32 ビット符号付き整数に変換できません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsInt(System.String,System.String)">
      <summary vsli:raw="Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 32-bit signed integer.">指定されたローカル名と名前空間 URI が現在の要素のものと一致することを確認し、現在の要素を読み込んで内容を 32 ビット符号付き整数として返します。</summary>
      <param name="localName" vsli:raw="The local name of the element.">要素のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element.">要素の名前空間 URI。</param>
      <returns vsli:raw="The element content as a 32-bit signed integer.">32 ビット符号付き整数としての要素の内容。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。
または 
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to a 32-bit signed integer.">現在の要素には、子要素が含まれています。  
 または  
 要素のコンテンツを 32 ビット符号付き整数に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified local name and namespace URI do not match that of the current element being read.">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsLong">
      <summary vsli:raw="Reads the current element and returns the contents as a 64-bit signed integer.">現在の要素を読み取り、その内容を 64 ビット符号付き整数として返します。</summary>
      <returns vsli:raw="The element content as a 64-bit signed integer.">64 ビット符号付き整数としての要素の内容。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。
または 
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to a 64-bit signed integer.">現在の要素には、子要素が含まれています。  
 または  
 要素の内容を 64 ビット符号付き整数に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsLong(System.String,System.String)">
      <summary vsli:raw="Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 64-bit signed integer.">指定されたローカル名と名前空間 URI が現在の要素のものと一致することを確認し、現在の要素を読み込んで内容を 64 ビット符号付き整数として返します。</summary>
      <param name="localName" vsli:raw="The local name of the element.">要素のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element.">要素の名前空間 URI。</param>
      <returns vsli:raw="The element content as a 64-bit signed integer.">64 ビット符号付き整数としての要素の内容。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。
または 
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to a 64-bit signed integer.">現在の要素には、子要素が含まれています。  
 または  
 要素の内容を 64 ビット符号付き整数に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified local name and namespace URI do not match that of the current element being read.">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObject">
      <summary vsli:raw="Reads the current element and returns the contents as an &lt;see cref=&quot;T:System.Object&quot; /&gt;.">現在の要素を読み取り、そのコンテンツを <see cref="T:System.Object" /> として返します。</summary>
      <returns vsli:raw="A boxed common language runtime (CLR) object of the most appropriate type. The &lt;see cref=&quot;P:System.Xml.XmlReader.ValueType&quot; /&gt; property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.">最も適切な型のボックス化された共通言語ランタイム (CLR) オブジェクト。 <see cref="P:System.Xml.XmlReader.ValueType" /> プロパティは、適切な CLR 型を判断します。 内容がリスト型として型指定されている場合、このメソッドは適切な型のボックス化されたオブジェクトの配列を返します。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。
または 
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to the requested type">現在の要素には、子要素が含まれています。  
 または  
 要素のコンテンツを要求された型に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObject(System.String,System.String)">
      <summary vsli:raw="Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as an &lt;see cref=&quot;T:System.Object&quot; /&gt;.">指定されたローカル名と名前空間 URI が現在の要素のものと一致することを確認し、現在の要素を読み取って、コンテンツを <see cref="T:System.Object" /> として返します。</summary>
      <param name="localName" vsli:raw="The local name of the element.">要素のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element.">要素の名前空間 URI。</param>
      <returns vsli:raw="A boxed common language runtime (CLR) object of the most appropriate type. The &lt;see cref=&quot;P:System.Xml.XmlReader.ValueType&quot; /&gt; property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.">最も適切な型のボックス化された共通言語ランタイム (CLR) オブジェクト。 <see cref="P:System.Xml.XmlReader.ValueType" /> プロパティは、適切な CLR 型を判断します。 内容がリスト型として型指定されている場合、このメソッドは適切な型のボックス化されたオブジェクトの配列を返します。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。
または 
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to the requested type.">現在の要素には、子要素が含まれています。  
 または  
 要素のコンテンツを要求された型に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified local name and namespace URI do not match that of the current element being read.">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObjectAsync">
      <summary vsli:raw="Asynchronously reads the current element and returns the contents as an &lt;see cref=&quot;T:System.Object&quot; /&gt;.">現在の要素を非同期に読み取り、そのコンテンツを <see cref="T:System.Object" /> として返します。</summary>
      <returns vsli:raw="A boxed common language runtime (CLR) object of the most appropriate type. The &lt;see cref=&quot;P:System.Xml.XmlReader.ValueType&quot; /&gt; property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.">最も適切な型のボックス化された共通言語ランタイム (CLR) オブジェクト。 <see cref="P:System.Xml.XmlReader.ValueType" /> プロパティは、適切な CLR 型を判断します。 内容がリスト型として型指定されている場合、このメソッドは適切な型のボックス化されたオブジェクトの配列を返します。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。
または
<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsString">
      <summary vsli:raw="Reads the current element and returns the contents as a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">現在の要素を読み取り、そのコンテンツを <see cref="T:System.String" /> オブジェクトとして返します。</summary>
      <returns vsli:raw="The element content as a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">コンテンツの要素、<see cref="T:System.String" />オブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。
または
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">現在の要素には、子要素が含まれています。  
または 
要素のコンテンツを <see cref="T:System.String" /> オブジェクトに変換できません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)">
      <summary vsli:raw="Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">指定されたローカル名と名前空間 URI が現在の要素のものと一致することを確認し、現在の要素を読み取って、コンテンツを <see cref="T:System.String" /> オブジェクトとして返します。</summary>
      <param name="localName" vsli:raw="The local name of the element.">要素のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element.">要素の名前空間 URI。</param>
      <returns vsli:raw="The element content as a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">コンテンツの要素、<see cref="T:System.String" />オブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。
または
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">現在の要素には、子要素が含まれています。  
または 
要素のコンテンツを <see cref="T:System.String" /> オブジェクトに変換できません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified local name and namespace URI do not match that of the current element being read.">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsStringAsync">
      <summary vsli:raw="Asynchronously reads the current element and returns the contents as a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">現在の要素を非同期に読み取り、そのコンテンツを <see cref="T:System.String" /> オブジェクトとして返します。</summary>
      <returns vsli:raw="The element content as a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">コンテンツの要素、<see cref="T:System.String" />オブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">
        <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString">
      <summary vsli:raw="Reads a text-only element. However, we recommend that you use the &lt;see cref=&quot;M:System.Xml.XmlReader.ReadElementContentAsString&quot; /&gt; method instead, because it provides a more straightforward way to handle this operation.">テキストだけの要素を読み取ります。 ただし、<see cref="M:System.Xml.XmlReader.ReadElementContentAsString" /> メソッドを代わりに使用するほうが、この操作を簡単に処理できるため、こちらの方法をお勧めします。</summary>
      <returns vsli:raw="The text contained in the element that was read. An empty string if the element is empty.">読み取られた要素内に格納されているテキスト。 要素が空の場合は、空の文字列。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The next content node is not a start tag; or the element found does not contain a simple text value.">次のコンテンツ ノードが開始タグでないか、見つかった要素に単純なテキスト値が格納されていません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString(System.String)">
      <summary vsli:raw="Checks that the &lt;see cref=&quot;P:System.Xml.XmlReader.Name&quot; /&gt; property of the element found matches the given string before reading a text-only element. However, we recommend that you use the &lt;see cref=&quot;M:System.Xml.XmlReader.ReadElementContentAsString&quot; /&gt; method instead, because it provides a more straightforward way to handle this operation.">テキストだけの要素を読み取る前に、見つかった要素の <see cref="P:System.Xml.XmlReader.Name" /> プロパティが、指定した文字列と一致することを確認します。 ただし、<see cref="M:System.Xml.XmlReader.ReadElementContentAsString" /> メソッドを代わりに使用するほうが、この操作を簡単に処理できるため、こちらの方法をお勧めします。</summary>
      <param name="name" vsli:raw="The name to check.">確認対象の名前。</param>
      <returns vsli:raw="The text contained in the element that was read. An empty string if the element is empty.">読み取られた要素内に格納されているテキスト。 要素が空の場合は、空の文字列。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="If the next content node is not a start tag; if the element &lt;see langword=&quot;Name&quot; /&gt; does not match the given argument; or if the element found does not contain a simple text value.">次のコンテンツ ノードが開始タグでない、要素 <see langword="Name" /> が指定した引数と一致しない、または見つかった要素に単純なテキスト値が含まれていない場合。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString(System.String,System.String)">
      <summary vsli:raw="Checks that the &lt;see cref=&quot;P:System.Xml.XmlReader.LocalName&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlReader.NamespaceURI&quot; /&gt; properties of the element found matches the given strings before reading a text-only element. However, we recommend that you use the &lt;see cref=&quot;M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)&quot; /&gt; method instead, because it provides a more straightforward way to handle this operation.">テキストだけの要素を読み取る前に、見つかった要素の <see cref="P:System.Xml.XmlReader.LocalName" /> プロパティと <see cref="P:System.Xml.XmlReader.NamespaceURI" /> プロパティが、指定した文字列と一致することを確認します。 ただし、<see cref="M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)" /> メソッドを代わりに使用するほうが、この操作を簡単に処理できるため、こちらの方法をお勧めします。</summary>
      <param name="localname" vsli:raw="The local name to check.">確認対象のローカル名。</param>
      <param name="ns" vsli:raw="The namespace URI to check.">確認対象の名前空間 URI。</param>
      <returns vsli:raw="The text contained in the element that was read. An empty string if the element is empty.">読み取られた要素内に格納されているテキスト。 要素が空の場合は、空の文字列。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="If the next content node is not a start tag; if the element &lt;see langword=&quot;LocalName&quot; /&gt; or &lt;see langword=&quot;NamespaceURI&quot; /&gt; do not match the given arguments; or if the element found does not contain a simple text value.">次のコンテンツ ノードが開始タグでない、要素 <see langword="LocalName" /> または <see langword="NamespaceURI" /> が指定した引数と一致しない、または見つかった要素に単純なテキスト値が含まれていない場合。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadEndElement">
      <summary vsli:raw="Checks that the current content node is an end tag and advances the reader to the next node.">現在のコンテンツ ノードが終了タグで、リーダーを次のノードに進めることを確認します。</summary>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current node is not an end tag or if incorrect XML is encountered in the input stream.">現在のノードが終了タグでないか、入力ストリームで正しくない XML が検出されました。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadInnerXml">
      <summary vsli:raw="When overridden in a derived class, reads all the content, including markup, as a string.">派生クラスでオーバーライドされると、マークアップを含むすべての内容を文字列として読み取ります。</summary>
      <returns vsli:raw="All the XML content, including markup, in the current node. If the current node has no children, an empty string is returned.&#xA;&#xA; If the current node is neither an element nor attribute, an empty string is returned.">現在のノード内の、マークアップを含むすべての XML の内容。 現在のノードが子を持っていない場合は、空の文字列が返されます。  
 現在のノードが要素でも属性でもない場合は、空の文字列が返されます。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML was not well-formed, or an error occurred while parsing the XML.">XML が整形式ではありませんでした。または、XML の解析中にエラーが発生しました。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadInnerXmlAsync">
      <summary vsli:raw="Asynchronously reads all the content, including markup, as a string.">マークアップを含むすべてのコンテンツを文字列として非同期に読み取ります。</summary>
      <returns vsli:raw="All the XML content, including markup, in the current node. If the current node has no children, an empty string is returned.">現在のノード内の、マークアップを含むすべての XML の内容。 現在のノードが子を持っていない場合は、空の文字列が返されます。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。
または
<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadOuterXml">
      <summary vsli:raw="When overridden in a derived class, reads the content, including markup, representing this node and all its children.">派生クラスでオーバーライドされると、このノードとそのすべての子を表す内容 (マークアップを含む) を読み取ります。</summary>
      <returns vsli:raw="If the reader is positioned on an element or an attribute node, this method returns all the XML content, including markup, of the current node and all its children; otherwise, it returns an empty string.">リーダーが要素ノードまたは属性ノードに配置されている場合、このメソッドは、現在のノードおよびそのすべての子の、マークアップを含む、XML の内容をすべて返します。それ以外の場合は、空の文字列を返します。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML was not well-formed, or an error occurred while parsing the XML.">XML が整形式ではありませんでした。または、XML の解析中にエラーが発生しました。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadOuterXmlAsync">
      <summary vsli:raw="Asynchronously reads the content, including markup, representing this node and all its children.">このノードとその子を表すコンテンツをマークアップを含めて非同期に読み取ります。</summary>
      <returns vsli:raw="If the reader is positioned on an element or an attribute node, this method returns all the XML content, including markup, of the current node and all its children; otherwise, it returns an empty string.">リーダーが要素ノードまたは属性ノードに配置されている場合、このメソッドは、現在のノードおよびそのすべての子の、マークアップを含む、XML の内容をすべて返します。それ以外の場合は、空の文字列を返します。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">
        <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement">
      <summary vsli:raw="Checks that the current node is an element and advances the reader to the next node.">現在のノードが要素で、リーダーを次のノードに進めるかどうかを確認します。</summary>
      <exception cref="T:System.Xml.XmlException" vsli:raw="Incorrect XML was encountered in the input stream.">入力ストリームで、正しくない XML が検出されました。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement(System.String)">
      <summary vsli:raw="Checks that the current content node is an element with the given &lt;see cref=&quot;P:System.Xml.XmlReader.Name&quot; /&gt; and advances the reader to the next node.">現在のコンテンツ ノードが、指定した <see cref="P:System.Xml.XmlReader.Name" /> を持つ要素で、リーダーを次のノードに進めることを確認します。</summary>
      <param name="name" vsli:raw="The qualified name of the element.">要素の限定名。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="Incorrect XML was encountered in the input stream.&#xA;&#xA; -or-&#xA;&#xA; The &lt;see cref=&quot;P:System.Xml.XmlReader.Name&quot; /&gt; of the element does not match the given &lt;paramref name=&quot;name&quot; /&gt;.">入力ストリームで、正しくない XML が検出されました。  
または 
要素の <see cref="P:System.Xml.XmlReader.Name" /> が指定した <paramref name="name" /> と一致しません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)">
      <summary vsli:raw="Checks that the current content node is an element with the given &lt;see cref=&quot;P:System.Xml.XmlReader.LocalName&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlReader.NamespaceURI&quot; /&gt; and advances the reader to the next node.">現在のコンテンツ ノードが、指定した <see cref="P:System.Xml.XmlReader.LocalName" /> と <see cref="P:System.Xml.XmlReader.NamespaceURI" /> を持つ要素で、リーダーを次のノードに進めることを確認します。</summary>
      <param name="localname" vsli:raw="The local name of the element.">要素のローカル名。</param>
      <param name="ns" vsli:raw="The namespace URI of the element.">要素の名前空間 URI。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="Incorrect XML was encountered in the input stream.&#xA;&#xA; -or-&#xA;&#xA; The &lt;see cref=&quot;P:System.Xml.XmlReader.LocalName&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlReader.NamespaceURI&quot; /&gt; properties of the element found do not match the given arguments.">入力ストリームで、正しくない XML が検出されました。  
または 
見つかった要素の <see cref="P:System.Xml.XmlReader.LocalName" /> プロパティと <see cref="P:System.Xml.XmlReader.NamespaceURI" /> プロパティが指定した引数と一致しません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.ReadState">
      <summary vsli:raw="When overridden in a derived class, gets the state of the reader.">派生クラスでオーバーライドされると、リーダーの状態を取得します。</summary>
      <returns vsli:raw="One of the enumeration values that specifies the state of the reader.">リーダーの状態を指定する列挙値の 1 つ。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadString">
      <summary vsli:raw="When overridden in a derived class, reads the contents of an element or text node as a string. However, we recommend that you use the &lt;see cref=&quot;Overload:System.Xml.XmlReader.ReadElementContentAsString&quot; /&gt; method instead, because it provides a more straightforward way to handle this operation.">派生クラスでオーバーライドされると、要素ノードまたはテキスト ノードの内容を文字列として読み取ります。 ただし、<see cref="Overload:System.Xml.XmlReader.ReadElementContentAsString" /> メソッドを代わりに使用するほうが、この操作を簡単に処理できるため、こちらの方法をお勧めします。</summary>
      <returns vsli:raw="The contents of the element or an empty string.">要素の内容または空の文字列。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="An error occurred while parsing the XML.">XML の解析中にエラーが発生しました。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadSubtree">
      <summary vsli:raw="Returns a new &lt;see langword=&quot;XmlReader&quot; /&gt; instance that can be used to read the current node, and all its descendants.">現在のノードおよびそのすべての子孫ノードを読み取るために使用できる、新しい <see langword="XmlReader" /> インスタンスを返します。</summary>
      <returns vsli:raw="A new XML reader instance set to &lt;see cref=&quot;F:System.Xml.ReadState.Initial&quot; /&gt;. Calling the &lt;see cref=&quot;M:System.Xml.XmlReader.Read&quot; /&gt; method positions the new reader on the node that was current before the call to the &lt;see cref=&quot;M:System.Xml.XmlReader.ReadSubtree&quot; /&gt; method.">
        <see cref="F:System.Xml.ReadState.Initial" /> に設定された新しい XML リーダーのインスタンス。 <see cref="M:System.Xml.XmlReader.Read" /> メソッドを呼び出すと、<see cref="M:System.Xml.XmlReader.ReadSubtree" /> メソッドを呼び出す前に処理対象だったノードに新しいリーダーが配置されます。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The XML reader isn't positioned on an element when this method is called.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">このメソッドを呼び出すときに XML リーダーが要素に配置されていません。
または
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToDescendant(System.String)">
      <summary vsli:raw="Advances the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to the next descendant element with the specified qualified name.">指定された修飾名を使用して <see cref="T:System.Xml.XmlReader" /> を次の子孫要素に進めます。</summary>
      <param name="name" vsli:raw="The qualified name of the element you wish to move to.">移動先となる要素の修飾名。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a matching descendant element is found; otherwise &lt;see langword=&quot;false&quot; /&gt;. If a matching descendant element is not found, the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is positioned on the end tag (&lt;see cref=&quot;P:System.Xml.XmlReader.NodeType&quot; /&gt; is &lt;see langword=&quot;XmlNodeType.EndElement&quot; /&gt;) of the element.&#xA;&#xA; If the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element when &lt;see cref=&quot;M:System.Xml.XmlReader.ReadToDescendant(System.String)&quot; /&gt; was called, this method returns &lt;see langword=&quot;false&quot; /&gt; and the position of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not changed.">一致する子孫要素が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 一致する子要素が見つからない場合、要素の終了タグ (<see cref="P:System.Xml.XmlReader.NodeType" /> が <see langword="XmlNodeType.EndElement" />) に <see cref="T:System.Xml.XmlReader" /> が配置されます。  
<see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String)" /> が呼び出されたときに <see cref="T:System.Xml.XmlReader" /> が要素に配置されていない場合、このメソッドは <see langword="false" /> を返し、<see cref="T:System.Xml.XmlReader" /> の位置を変更しません。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The parameter is an empty string.">パラメーターは空の文字列です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)">
      <summary vsli:raw="Advances the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to the next descendant element with the specified local name and namespace URI.">指定されたローカル名と名前空間 URI を使用して <see cref="T:System.Xml.XmlReader" /> を次の子孫要素に進めます。</summary>
      <param name="localName" vsli:raw="The local name of the element you wish to move to.">移動先となる要素のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element you wish to move to.">移動先となる要素の名前空間 URI。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a matching descendant element is found; otherwise &lt;see langword=&quot;false&quot; /&gt;. If a matching descendant element is not found, the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is positioned on the end tag (&lt;see cref=&quot;P:System.Xml.XmlReader.NodeType&quot; /&gt; is &lt;see langword=&quot;XmlNodeType.EndElement&quot; /&gt;) of the element.&#xA;&#xA; If the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element when &lt;see cref=&quot;M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)&quot; /&gt; was called, this method returns &lt;see langword=&quot;false&quot; /&gt; and the position of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not changed.">一致する子孫要素が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 一致する子要素が見つからない場合、要素の終了タグ (<see cref="P:System.Xml.XmlReader.NodeType" /> が <see langword="XmlNodeType.EndElement" />) に <see cref="T:System.Xml.XmlReader" /> が配置されます。  
<see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)" /> が呼び出されたときに <see cref="T:System.Xml.XmlReader" /> が要素に配置されていない場合、このメソッドは <see langword="false" /> を返し、<see cref="T:System.Xml.XmlReader" /> の位置を変更しません。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Both parameter values are &lt;see langword=&quot;null&quot; /&gt;.">両方のパラメーター値が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToFollowing(System.String)">
      <summary vsli:raw="Reads until an element with the specified qualified name is found.">指定された修飾名の要素が見つかるまで読み込みます。</summary>
      <param name="name" vsli:raw="The qualified name of the element.">要素の限定名。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a matching element is found; otherwise &lt;see langword=&quot;false&quot; /&gt; and the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is in an end of file state.">一致する要素が見つかる場合は <see langword="true" />。それ以外の場合は <see langword="false" /> になり、<see cref="T:System.Xml.XmlReader" /> がファイルの末尾に置かれます。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The parameter is an empty string.">パラメーターは空の文字列です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToFollowing(System.String,System.String)">
      <summary vsli:raw="Reads until an element with the specified local name and namespace URI is found.">指定されたローカル名と名前空間 URI が見つかるまで要素を読み込みます。</summary>
      <param name="localName" vsli:raw="The local name of the element.">要素のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element.">要素の名前空間 URI。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a matching element is found; otherwise &lt;see langword=&quot;false&quot; /&gt; and the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is in an end of file state.">一致する要素が見つかる場合は <see langword="true" />。それ以外の場合は <see langword="false" /> になり、<see cref="T:System.Xml.XmlReader" /> がファイルの末尾に置かれます。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Both parameter values are &lt;see langword=&quot;null&quot; /&gt;.">両方のパラメーター値が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToNextSibling(System.String)">
      <summary vsli:raw="Advances the &lt;see langword=&quot;XmlReader&quot; /&gt; to the next sibling element with the specified qualified name.">指定された修飾名を使用して <see langword="XmlReader" /> を次の兄弟要素に進めます。</summary>
      <param name="name" vsli:raw="The qualified name of the sibling element you wish to move to.">移動先となる兄弟要素の修飾名。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a matching sibling element is found; otherwise &lt;see langword=&quot;false&quot; /&gt;. If a matching sibling element is not found, the &lt;see langword=&quot;XmlReader&quot; /&gt; is positioned on the end tag (&lt;see cref=&quot;P:System.Xml.XmlReader.NodeType&quot; /&gt; is &lt;see langword=&quot;XmlNodeType.EndElement&quot; /&gt;) of the parent element.">一致する兄弟要素が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 一致する兄弟要素が見つからない場合、<see langword="XmlReader" /> が親要素の終了タグ (<see cref="P:System.Xml.XmlReader.NodeType" /> が <see langword="XmlNodeType.EndElement" />) に配置されます。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The parameter is an empty string.">パラメーターは空の文字列です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToNextSibling(System.String,System.String)">
      <summary vsli:raw="Advances the &lt;see langword=&quot;XmlReader&quot; /&gt; to the next sibling element with the specified local name and namespace URI.">指定されたローカル名と名前空間 URI を使用して、<see langword="XmlReader" /> を次の兄弟要素に進めます。</summary>
      <param name="localName" vsli:raw="The local name of the sibling element you wish to move to.">移動先となる兄弟要素のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the sibling element you wish to move to.">移動先となる兄弟要素の名前空間 URI。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a matching sibling element is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If a matching sibling element is not found, the &lt;see langword=&quot;XmlReader&quot; /&gt; is positioned on the end tag (&lt;see cref=&quot;P:System.Xml.XmlReader.NodeType&quot; /&gt; is &lt;see langword=&quot;XmlNodeType.EndElement&quot; /&gt;) of the parent element.">一致する兄弟要素が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 一致する兄弟要素が見つからない場合、<see langword="XmlReader" /> が親要素の終了タグ (<see cref="P:System.Xml.XmlReader.NodeType" /> が <see langword="XmlNodeType.EndElement" />) に配置されます。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Both parameter values are &lt;see langword=&quot;null&quot; /&gt;.">両方のパラメーター値が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads large streams of text embedded in an XML document.">XML ドキュメントに埋め込まれたテキストの大量のストリームを読み込みます。</summary>
      <param name="buffer" vsli:raw="The array of characters that serves as the buffer to which the text contents are written. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">テキストの内容が書き込まれるバッファーとして機能する文字の配列。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index" vsli:raw="The offset within the buffer where the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; can start to copy the results.">
        <see cref="T:System.Xml.XmlReader" /> が結果のコピーを開始できる、バッファー内のオフセット。</param>
      <param name="count" vsli:raw="The maximum number of characters to copy into the buffer. The actual number of characters copied is returned from this method.">バッファーにコピーする最大文字数。 コピーされた実際の文字数は、このメソッドから返されます。</param>
      <returns vsli:raw="The number of characters read into the buffer. The value zero is returned when there is no more text content.">バッファー内へ読み取られた文字数。 それ以上テキストの内容がない場合は、値として 0 が返されます。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node does not have a value (&lt;see cref=&quot;P:System.Xml.XmlReader.HasValue&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;).&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">現在のノードに値がありません (<see cref="P:System.Xml.XmlReader.HasValue" /> が <see langword="false" />)。
または 
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer, or index + count is larger than the allocated buffer size.">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; implementation does not support this method.">
        <see cref="T:System.Xml.XmlReader" /> 実装が、このメソッドをサポートしていません。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML data is not well-formed.">XML データは、整形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadValueChunkAsync(System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="Asynchronously reads large streams of text embedded in an XML document.">XML ドキュメントに埋め込まれたテキストの大量のストリームを非同期に読み取ります。</summary>
      <param name="buffer" vsli:raw="The array of characters that serves as the buffer to which the text contents are written. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">テキストの内容が書き込まれるバッファーとして機能する文字の配列。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index" vsli:raw="The offset within the buffer where the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; can start to copy the results.">
        <see cref="T:System.Xml.XmlReader" /> が結果のコピーを開始できる、バッファー内のオフセット。</param>
      <param name="count" vsli:raw="The maximum number of characters to copy into the buffer. The actual number of characters copied is returned from this method.">バッファーにコピーする最大文字数。 コピーされた実際の文字数は、このメソッドから返されます。</param>
      <returns vsli:raw="The number of characters read into the buffer. The value zero is returned when there is no more text content.">バッファー内へ読み取られた文字数。 それ以上テキストの内容がない場合は、値として 0 が返されます。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。
または
<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ResolveEntity">
      <summary vsli:raw="When overridden in a derived class, resolves the entity reference for &lt;see langword=&quot;EntityReference&quot; /&gt; nodes.">派生クラスでオーバーライドされると、<see langword="EntityReference" /> ノードのエンティティ参照を解決します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The reader is not positioned on an &lt;see langword=&quot;EntityReference&quot; /&gt; node; this implementation of the reader cannot resolve entities (&lt;see cref=&quot;P:System.Xml.XmlReader.CanResolveEntity&quot; /&gt; returns &lt;see langword=&quot;false&quot; /&gt;).&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">リーダーが <see langword="EntityReference" /> ノードに配置されていません。つまり、このリーダーの実装では、エンティティを解決できません。<see cref="P:System.Xml.XmlReader.CanResolveEntity" /> は <see langword="false" /> を返します。
または
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.SchemaInfo">
      <summary vsli:raw="Gets the schema information that has been assigned to the current node as a result of schema validation.">スキーマ検証の結果、現在のノードに割り当てられているスキーマ情報を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.IXmlSchemaInfo&quot; /&gt; object containing the schema information for the current node. Schema information can be set on elements, attributes, or on text nodes with a non-null &lt;see cref=&quot;P:System.Xml.XmlReader.ValueType&quot; /&gt; (typed values).&#xA;&#xA; If the current node is not one of the above node types, or if the &lt;see langword=&quot;XmlReader&quot; /&gt; instance does not report schema information, this property returns &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; If this property is called from an &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; or an &lt;see cref=&quot;T:System.Xml.XmlValidatingReader&quot; /&gt; object, this property always returns &lt;see langword=&quot;null&quot; /&gt;. These &lt;see langword=&quot;XmlReader&quot; /&gt; implementations do not expose schema information through the &lt;see langword=&quot;SchemaInfo&quot; /&gt; property.">現在のノードのスキーマ情報を含む <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> オブジェクト。 スキーマ情報は、非 null <see cref="P:System.Xml.XmlReader.ValueType" /> (型指定された値) で、要素、属性、またはテキスト ノードに設定できます。  
現在のノードがこれらのノード型以外の場合、または <see langword="XmlReader" /> インスタンスがスキーマ情報を報告しない場合、このプロパティは <see langword="null" /> を返します。  
このプロパティが <see cref="T:System.Xml.XmlTextReader" /> オブジェクトまたは <see cref="T:System.Xml.XmlValidatingReader" /> オブジェクトから呼び出された場合は、常に <see langword="null" /> を返します。 これらの <see langword="XmlReader" /> 実装は、<see langword="SchemaInfo" /> プロパティによるスキーマ情報の公開を行いません。  
   
 要素のスキーマ検証後の情報セット (PSVI) を取得する必要がある場合は要素の終了タグにリーダーを配置し、それ以外の場合は開始タグに配置します。 PSVI は、リーダーの <see langword="SchemaInfo" /> プロパティから取得します。 <see cref="Overload:System.Xml.XmlReader.Create" /> プロパティが <see cref="P:System.Xml.XmlReaderSettings.ValidationType" /> に設定された <see cref="F:System.Xml.ValidationType.Schema" /> で作成された検証リーダーが、要素の終了タグに配置されている場合にのみ、要素の完全な PSVI が存在します。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Settings">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlReaderSettings&quot; /&gt; object used to create this &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance.">この <see cref="T:System.Xml.XmlReader" /> インスタンスを作成するために使用された <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクトを取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReaderSettings&quot; /&gt; object used to create this reader instance. If this reader was not created using the &lt;see cref=&quot;Overload:System.Xml.XmlReader.Create&quot; /&gt; method, this property returns &lt;see langword=&quot;null&quot; /&gt;.">このリーダーのインスタンスを作成するために使用した <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクト。 <see cref="Overload:System.Xml.XmlReader.Create" /> メソッドを使用しないでこのリーダーを作成した場合、このプロパティは <see langword="null" /> を返します。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Skip">
      <summary vsli:raw="Skips the children of the current node.">現在のノードの子をスキップします。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.SkipAsync">
      <summary vsli:raw="Asynchronously skips the children of the current node.">現在のノードの子を非同期にスキップします。</summary>
      <returns vsli:raw="The current node.">現在のノード。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。
または
<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Value">
      <summary vsli:raw="When overridden in a derived class, gets the text value of the current node.">派生クラスでオーバーライドされると、現在のノードのテキスト値を取得します。</summary>
      <returns vsli:raw="The value returned depends on the &lt;see cref=&quot;P:System.Xml.XmlReader.NodeType&quot; /&gt; of the node. The following table lists node types that have a value to return. All other node types return &lt;see langword=&quot;String.Empty&quot; /&gt;.&#xA;&#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Node type&lt;/term&gt;&lt;description&gt; Value&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Attribute&quot; /&gt;&lt;/term&gt;&lt;description&gt; The value of the attribute.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;CDATA&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the CDATA section.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Comment&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the comment.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;DocumentType&quot; /&gt;&lt;/term&gt;&lt;description&gt; The internal subset.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;ProcessingInstruction&quot; /&gt;&lt;/term&gt;&lt;description&gt; The entire content, excluding the target.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;SignificantWhitespace&quot; /&gt;&lt;/term&gt;&lt;description&gt; The white space between markup in a mixed content model.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Text&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the text node.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Whitespace&quot; /&gt;&lt;/term&gt;&lt;description&gt; The white space between markup.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;XmlDeclaration&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the declaration.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">返される値は、ノードの <see cref="P:System.Xml.XmlReader.NodeType" /> によって異なります。 返す値を持つノード型の一覧を次の表に示します。 これ以外のノード型はすべて <see langword="String.Empty" /> を返します。  
  ノード型 
  [値] 
 <see langword="Attribute" /> 属性の値。  

 <see langword="CDATA" /> CDATA セクションの内容。  

 <see langword="Comment" /> コメントの内容。  

 <see langword="DocumentType" /> 内部サブセット。  

 <see langword="ProcessingInstruction" /> ターゲットを除く全内容。  

 <see langword="SignificantWhitespace" /> 混合コンテンツ モデル内のマークアップ間の空白。  

 <see langword="Text" /> テキスト ノードの内容。  

 <see langword="Whitespace" /> マークアップ間の空白。  

 <see langword="XmlDeclaration" /> 宣言の内容。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.ValueType">
      <summary vsli:raw="Gets The Common Language Runtime (CLR) type for the current node.">現在のノードの共通言語ランタイム (CLR) 型を取得します。</summary>
      <returns vsli:raw="The CLR type that corresponds to the typed value of the node. The default is &lt;see langword=&quot;System.String&quot; /&gt;.">ノードの型指定された値に対応する CLR 型。 既定値は、<see langword="System.String" /> です。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.XmlLang">
      <summary vsli:raw="When overridden in a derived class, gets the current &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">派生クラスでオーバーライドされると、現在の <see langword="xml:lang" /> スコープを取得します。</summary>
      <returns vsli:raw="The current &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">現在の <see langword="xml:lang" /> スコープ。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.XmlSpace">
      <summary vsli:raw="When overridden in a derived class, gets the current &lt;see langword=&quot;xml:space&quot; /&gt; scope.">派生クラスでオーバーライドされると、現在の <see langword="xml:space" /> スコープを取得します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.XmlSpace&quot; /&gt; values. If no &lt;see langword=&quot;xml:space&quot; /&gt; scope exists, this property defaults to &lt;see langword=&quot;XmlSpace.None&quot; /&gt;.">
        <see cref="T:System.Xml.XmlSpace" /> 値のいずれか。 <see langword="xml:space" /> スコープが存在しない場合、このプロパティは既定の <see langword="XmlSpace.None" /> に設定されます。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="T:System.Xml.XmlReaderSettings">
      <summary vsli:raw="Specifies a set of features to support on the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object created by the &lt;see cref=&quot;Overload:System.Xml.XmlReader.Create&quot; /&gt; method.">
        <see cref="T:System.Xml.XmlReader" /> メソッドで作成された <see cref="Overload:System.Xml.XmlReader.Create" /> オブジェクトでサポートする一連の機能を指定します。</summary>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlReaderSettings&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlReaderSettings" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.Async">
      <summary vsli:raw="Gets or sets whether asynchronous &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; methods can be used on a particular &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance.">非同期 <see cref="T:System.Xml.XmlReader" /> メソッドを <see cref="T:System.Xml.XmlReader" /> の特定のインスタンスで使用できるかどうかを取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if asynchronous methods can be used; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">非同期メソッドを使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.CheckCharacters">
      <summary vsli:raw="Gets or sets a value indicating whether to do character checking.">文字のチェックを行うかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to do character checking; otherwise &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">文字をチェックする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。  
   
 <see cref="T:System.Xml.XmlReader" /> がテキスト データの処理を行う場合は、プロパティの設定に関係なく、XML 名とテキストの内容が有効であることを常にチェックします。 <see cref="P:System.Xml.XmlReaderSettings.CheckCharacters" /> を <see langword="false" /> に設定すると、文字エンティティ参照に対する文字のチェック機能がオフになります。</returns>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.Clone">
      <summary vsli:raw="Creates a copy of the &lt;see cref=&quot;T:System.Xml.XmlReaderSettings&quot; /&gt; instance.">
        <see cref="T:System.Xml.XmlReaderSettings" /> インスタンスのコピーを作成します。</summary>
      <returns vsli:raw="The cloned &lt;see cref=&quot;T:System.Xml.XmlReaderSettings&quot; /&gt; object.">複製された <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.CloseInput">
      <summary vsli:raw="Gets or sets a value indicating whether the underlying stream or &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; should be closed when the reader is closed.">リーダーを閉じるときに基になるストリームまたは <see cref="T:System.IO.TextReader" /> を閉じる必要があるかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to close the underlying stream or &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; when the reader is closed; otherwise &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">リーダーを閉じるときに基になるストリームまたは <see cref="T:System.IO.TextReader" /> を閉じる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ConformanceLevel">
      <summary vsli:raw="Gets or sets the level of conformance which the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; will comply.">
        <see cref="T:System.Xml.XmlReader" /> が従う準拠のレベルを取得または設定します。</summary>
      <returns vsli:raw="One of the enumeration values that specifies the level of conformance that the XML reader will enforce. The default is &lt;see cref=&quot;F:System.Xml.ConformanceLevel.Document&quot; /&gt;.">XML リーダーが適用する準拠のレベルを指定する列挙値のいずれか。 既定値は、<see cref="F:System.Xml.ConformanceLevel.Document" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.DtdProcessing">
      <summary vsli:raw="Gets or sets a value that determines the processing of DTDs.">DTD の処理を決定する値を取得または設定します。</summary>
      <returns vsli:raw="One of the enumeration values that determines the processing of DTDs. The default is &lt;see cref=&quot;F:System.Xml.DtdProcessing.Prohibit&quot; /&gt;.">DTD の処理を決定する列挙値の 1 つ。 既定値は、<see cref="F:System.Xml.DtdProcessing.Prohibit" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreComments">
      <summary vsli:raw="Gets or sets a value indicating whether to ignore comments.">コメントを無視するかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to ignore comments; otherwise &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">コメントを無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions">
      <summary vsli:raw="Gets or sets a value indicating whether to ignore processing instructions.">処理命令を無視するかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to ignore processing instructions; otherwise &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">処理命令を無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreWhitespace">
      <summary vsli:raw="Gets or sets a value indicating whether to ignore insignificant white space.">意味のない空白を無視するかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to ignore white space; otherwise &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">空白を無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.LineNumberOffset">
      <summary vsli:raw="Gets or sets line number offset of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトの行番号オフセットを取得または設定します。</summary>
      <returns vsli:raw="The line number offset. The default is 0.">行番号オフセット。 既定値は 0 です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.LinePositionOffset">
      <summary vsli:raw="Gets or sets line position offset of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトの行番号オフセットを取得または設定します。</summary>
      <returns vsli:raw="The line position offset. The default is 0.">ラインの位置のオフセット。 既定値は 0 です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.MaxCharactersFromEntities">
      <summary vsli:raw="Gets or sets a value indicating the maximum allowable number of characters in a document that result from expanding entities.">エンティティの展開時に許容されるドキュメント内の最大文字数を示す値を取得または設定します。</summary>
      <returns vsli:raw="The maximum allowable number of characters from expanded entities. The default is 0.">エンティティの展開時に許容される最大文字数。 既定値は 0 です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.MaxCharactersInDocument">
      <summary vsli:raw="Gets or sets a value indicating the maximum allowable number of characters in an XML document. A zero (0) value means no limits on the size of the XML document. A non-zero value specifies the maximum size, in characters.">XML ドキュメントの最大文字数を示す値を取得または設定します。 ゼロ (0) の値は、XML ドキュメントのサイズに制限がないことを示します。 0 以外の値は、最大サイズを文字数で示します。</summary>
      <returns vsli:raw="The maximum allowable number of characters in an XML document. The default is 0.">XML ドキュメント内の最大文字数。 既定値は 0 です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.NameTable">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; used for atomized string comparisons.">最小単位に分割された文字列の比較に使用する <see cref="T:System.Xml.XmlNameTable" /> を取得または設定します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; that stores all the atomized strings used by all &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instances created using this &lt;see cref=&quot;T:System.Xml.XmlReaderSettings&quot; /&gt; object.  &#xA;  &#xA; The default is &lt;see langword=&quot;null&quot; /&gt;. The created &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance will use a new empty &lt;see cref=&quot;T:System.Xml.NameTable&quot; /&gt; if this value is &lt;see langword=&quot;null&quot; /&gt;.">この <see cref="T:System.Xml.XmlNameTable" /> オブジェクトを使用して作成されたすべての <see cref="T:System.Xml.XmlReader" /> インスタンスで使用する、最小単位に分割されたすべての文字列を格納する <see cref="T:System.Xml.XmlReaderSettings" />。  
既定値は、<see langword="null" /> です。 この値が <see langword="null" /> の場合、作成された <see cref="T:System.Xml.XmlReader" /> インスタンスは、新しい空の <see cref="T:System.Xml.NameTable" /> を使用します。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ProhibitDtd">
      <summary vsli:raw="Gets or sets a value indicating whether to prohibit document type definition (DTD) processing. This property is obsolete. Use &lt;see cref=&quot;P:System.Xml.XmlTextReader.DtdProcessing&quot; /&gt; instead.">文書型定義 (DTD) 処理を禁止するかどうかを示す値を取得または設定します。 このプロパティは今後使用しません。 代わりに、<see cref="P:System.Xml.XmlTextReader.DtdProcessing" /> を使用してください。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to prohibit DTD processing; otherwise &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">DTD 処理を禁止する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.Reset">
      <summary vsli:raw="Resets the members of the settings class to their default values.">設定クラスのメンバーを既定値にリセットします。</summary>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.Schemas">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; to use when performing schema validation.">スキーマの検証を行うときに使用する <see cref="T:System.Xml.Schema.XmlSchemaSet" /> を取得または設定します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; to use when performing schema validation. The default is an empty &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; object.">スキーマ検証を実行するときに使用する <see cref="T:System.Xml.Schema.XmlSchemaSet" />。 既定値は空の <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクトです。</returns>
    </member>
    <member name="E:System.Xml.XmlReaderSettings.ValidationEventHandler">
      <summary vsli:raw="Occurs when the reader encounters validation errors.">リーダーが検証エラーを検出すると発生します。</summary>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ValidationFlags">
      <summary vsli:raw="Gets or sets a value indicating the schema validation settings. This setting applies to &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; objects that validate schemas (&lt;see cref=&quot;P:System.Xml.XmlReaderSettings.ValidationType&quot; /&gt; property set to &lt;see langword=&quot;ValidationType.Schema&quot; /&gt;).">スキーマ検証の設定を示す値を取得または設定します。 この設定は、スキーマを検証する <see cref="T:System.Xml.XmlReader" /> オブジェクトに適用されます (<see langword="ValidationType.Schema" /> に設定されている <see cref="P:System.Xml.XmlReaderSettings.ValidationType" /> プロパティ)。</summary>
      <returns vsli:raw="A bitwise combination of enumeration values that specify validation options. &lt;see cref=&quot;F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints&quot; /&gt; and &lt;see cref=&quot;F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes&quot; /&gt; are enabled by default. &lt;see cref=&quot;F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema&quot; /&gt;, &lt;see cref=&quot;F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation&quot; /&gt;, and &lt;see cref=&quot;F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings&quot; /&gt; are disabled by default.">検証オプションを指定する列挙値のビットごとの組み合わせ。 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints" /> および <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes" /> は既定で有効になります。 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema" />、<see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation" />、および <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings" /> は既定で無効になります。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ValidationType">
      <summary vsli:raw="Gets or sets a value indicating whether the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; will perform validation or type assignment when reading.">
        <see cref="T:System.Xml.XmlReader" /> で読み込むときに検証または型の割り当てを実行するかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.ValidationType&quot; /&gt; values that indicates whether XmlReader will perform validation or type assignment when reading. The default is &lt;see langword=&quot;ValidationType.None&quot; /&gt;.">読み込むときに XmlReader で検証または型の割り当てを実行するかどうかを示す <see cref="T:System.Xml.ValidationType" /> 値の 1 つ。 既定値は、<see langword="ValidationType.None" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.XmlResolver">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to access external documents.">外部ドキュメントへのアクセスに使用する <see cref="T:System.Xml.XmlResolver" /> を設定します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to access external documents. If set to &lt;see langword=&quot;null&quot; /&gt;, an &lt;see cref=&quot;T:System.Xml.XmlException&quot; /&gt; is thrown when the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; tries to access an external resource. The default is a new &lt;see cref=&quot;T:System.Xml.XmlUrlResolver&quot; /&gt; with no credentials.  Starting with the .NET Framework 4.5.2, this setting has a default value of &lt;see langword=&quot;null&quot; /&gt;.">外部ドキュメントへのアクセスに使用する <see cref="T:System.Xml.XmlResolver" />。 <see langword="null" /> に設定されている場合、<see cref="T:System.Xml.XmlException" /> が外部リソースにアクセスしようとすると、<see cref="T:System.Xml.XmlReader" /> がスローされます。 既定値は、資格情報のない新しい <see cref="T:System.Xml.XmlUrlResolver" /> です。  .NET Framework 4.5.2 以降では、この設定の<see langword="null" />既定値はです。</returns>
    </member>
    <member name="T:System.Xml.XmlResolver">
      <summary vsli:raw="Resolves external XML resources named by a Uniform Resource Identifier (URI).">URI (Uniform Resource Identifier) で名前が指定された外部 XML リソースを解決します。</summary>
    </member>
    <member name="M:System.Xml.XmlResolver.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlResolver" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.XmlResolver.Credentials">
      <summary vsli:raw="When overridden in a derived class, sets the credentials used to authenticate web requests.">派生クラスでオーバーライドされると、Web 要求を認証するために使用する資格情報を設定します。</summary>
      <returns vsli:raw="The credentials to be used to authenticate web requests. If this property is not set, the value defaults to &lt;see langword=&quot;null&quot; /&gt;; that is, the &lt;see langword=&quot;XmlResolver&quot; /&gt; has no user credentials.">Web 要求を認証するために使用する資格情報。 このプロパティが設定されていない場合、既定値は <see langword="null" /> です。つまり、<see langword="XmlResolver" /> にはユーザーの資格情報がありません。</returns>
    </member>
    <member name="M:System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary vsli:raw="When overridden in a derived class, maps a URI to an object that contains the actual resource.">派生クラスでオーバーライドされると、URI を実際のリソースを格納しているオブジェクトに割り当てます。</summary>
      <param name="absoluteUri" vsli:raw="The URI returned from &lt;see cref=&quot;M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)&quot; /&gt;.">
        <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> から返された URI。</param>
      <param name="role" vsli:raw="Currently not used.">現在は使用されていません。</param>
      <param name="ofObjectToReturn" vsli:raw="The type of object to return. The current version only returns System.IO.Stream objects.">返すオブジェクトの型。 現在のバージョンでは、System.IO.Stream オブジェクトだけを返します。</param>
      <returns vsli:raw="A stream object or &lt;see langword=&quot;null&quot; /&gt; if a type other than stream is specified.">ストリーム オブジェクト。ストリーム以外の型が指定された場合は <see langword="null" />。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;paramref name=&quot;ofObjectToReturn&quot; /&gt; is not a &lt;see langword=&quot;Stream&quot; /&gt; type.">
        <paramref name="ofObjectToReturn" /> が <see langword="Stream" /> 型ではありません。</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="The specified URI is not an absolute URI.">指定した URI が絶対 URI ではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;absoluteUri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="absoluteUri" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.Exception" vsli:raw="There is a runtime error (for example, an interrupted server connection).">実行時エラー (サーバー接続の中断など) があります。</exception>
    </member>
    <member name="M:System.Xml.XmlResolver.GetEntityAsync(System.Uri,System.String,System.Type)">
      <summary vsli:raw="Asynchronously maps a URI to an object that contains the actual resource.">URI を実際のリソースを格納しているオブジェクトに非同期にマップします。</summary>
      <param name="absoluteUri" vsli:raw="The URI returned from &lt;see cref=&quot;M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)&quot; /&gt;.">
        <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> から返された URI。</param>
      <param name="role" vsli:raw="Currently not used.">現在は使用されていません。</param>
      <param name="ofObjectToReturn" vsli:raw="The type of object to return. The current version only returns &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; objects.">返すオブジェクトの型。 現在のバージョンだけが、<see cref="T:System.IO.Stream" /> オブジェクトを返します。</param>
      <returns vsli:raw="A stream object or &lt;see langword=&quot;null&quot; /&gt; if a type other than stream is specified.">ストリーム オブジェクト。ストリーム以外の型が指定された場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)">
      <summary vsli:raw="When overridden in a derived class, resolves the absolute URI from the base and relative URIs.">派生クラスでオーバーライドされると、ベース URI および相対 URI から絶対 URI を解決します。</summary>
      <param name="baseUri" vsli:raw="The base URI used to resolve the relative URI.">相対 URI の解決に使用するベース URI。</param>
      <param name="relativeUri" vsli:raw="The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the &lt;paramref name=&quot;baseUri&quot; /&gt; value. If relative, it combines with the &lt;paramref name=&quot;baseUri&quot; /&gt; to make an absolute URI.">解決対象の URI。 URI は絶対 URI でも相対 URI でもかまいません。 絶対 URI の場合は、この値が <paramref name="baseUri" /> 値を効率的に置き換えます。 相対 URI の場合、この値は <paramref name="baseUri" /> と結合して絶対 URI を作成します。</param>
      <returns vsli:raw="The absolute URI or &lt;see langword=&quot;null&quot; /&gt; if the relative URI cannot be resolved.">絶対 URI。相対 URI を解決できない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;relativeUri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="relativeUri" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xml.XmlResolver.SupportsType(System.Uri,System.Type)">
      <summary vsli:raw="Enables the resolver to return types other than &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt;.">リゾルバーが <see cref="T:System.IO.Stream" /> 以外の型を返せるようにします。</summary>
      <param name="absoluteUri" vsli:raw="The URI.">URI。</param>
      <param name="type" vsli:raw="The type to return.">返す型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;type&quot; /&gt; is supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="type" /> がサポートされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xml.XmlSecureResolver">
      <summary vsli:raw="Helps to secure another implementation of &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; by wrapping the &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; object and restricting the resources that the underlying &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; has access to.">
        <see cref="T:System.Xml.XmlResolver" /> オブジェクトをラップし、基になっている <see cref="T:System.Xml.XmlResolver" /> がアクセスできるリソースを制限することによって、<see cref="T:System.Xml.XmlResolver" /> の別の実装のセキュリティ保護を支援します。</summary>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlSecureResolver&quot; /&gt; class with the &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; and URL provided.">
        <see cref="T:System.Xml.XmlSecureResolver" /> と URL を指定して、<see cref="T:System.Xml.XmlResolver" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="resolver" vsli:raw="The XML resolver that is wrapped by the &lt;see cref=&quot;T:System.Xml.XmlSecureResolver&quot; /&gt;.">
        <see cref="T:System.Xml.XmlSecureResolver" /> によってラップされた XML リゾルバー。</param>
      <param name="securityUrl" vsli:raw="The URL used to create the &lt;see cref=&quot;T:System.Security.PermissionSet&quot; /&gt; that will be applied to the underlying &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt;. The &lt;see cref=&quot;T:System.Xml.XmlSecureResolver&quot; /&gt; calls &lt;see cref=&quot;M:System.Security.PermissionSet.PermitOnly&quot; /&gt; on the created &lt;see cref=&quot;T:System.Security.PermissionSet&quot; /&gt; before calling &lt;see cref=&quot;M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)&quot; /&gt; on the underlying &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt;.">基になる <see cref="T:System.Security.PermissionSet" /> に適用される <see cref="T:System.Xml.XmlResolver" /> の作成に使用される URL。 <see cref="T:System.Xml.XmlSecureResolver" /> は、基になる <see cref="M:System.Security.PermissionSet.PermitOnly" /> で <see cref="T:System.Security.PermissionSet" /> を呼び出す前に、作成済みの <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" /> で <see cref="T:System.Xml.XmlResolver" /> を呼び出します。</param>
    </member>
    <member name="P:System.Xml.XmlSecureResolver.Credentials">
      <summary vsli:raw="Sets credentials used to authenticate web requests.">Web 要求を認証するために使用する資格情報を設定します。</summary>
      <returns vsli:raw="The credentials to be used to authenticate web requests. The &lt;see cref=&quot;T:System.Xml.XmlSecureResolver&quot; /&gt; sets the given credentials on the underlying &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt;. If this property is not set, the value defaults to &lt;see langword=&quot;null&quot; /&gt;; that is, the &lt;see cref=&quot;T:System.Xml.XmlSecureResolver&quot; /&gt; has no user credentials.">Web 要求を認証するために使用する資格情報。 <see cref="T:System.Xml.XmlSecureResolver" /> は、基になる<see cref="T:System.Xml.XmlResolver" /> で、指定した資格情報を設定します。 このプロパティが設定されていない場合、既定値は <see langword="null" /> です。つまり、<see cref="T:System.Xml.XmlSecureResolver" /> にはユーザーの資格情報がありません。</returns>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary vsli:raw="Maps a URI to an object that contains the actual resource. This method temporarily sets the &lt;see cref=&quot;T:System.Security.PermissionSet&quot; /&gt; created in the constructor by calling &lt;see cref=&quot;M:System.Security.PermissionSet.PermitOnly&quot; /&gt; before calling &lt;see langword=&quot;GetEntity&quot; /&gt; on the underlying &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; to open the resource.">URI を実際のリソースを格納しているオブジェクトにマップします。 このメソッドは、基になる <see cref="T:System.Security.PermissionSet" /> で <see langword="GetEntity" /> を呼び出す前に <see cref="M:System.Security.PermissionSet.PermitOnly" /> を呼び出すことで、コンストラクターで作成された <see cref="T:System.Xml.XmlResolver" /> を一時的に設定してリソースを開きます。</summary>
      <param name="absoluteUri" vsli:raw="The URI that is returned from &lt;see cref=&quot;M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)&quot; /&gt;.">
        <see cref="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)" /> から返された URI。</param>
      <param name="role" vsli:raw="Currently not used.">現在は使用されていません。</param>
      <param name="ofObjectToReturn" vsli:raw="The type of object to return. The current version only returns &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; objects.">返すオブジェクトの型。 現在のバージョンだけが、<see cref="T:System.IO.Stream" /> オブジェクトを返します。</param>
      <returns vsli:raw="The stream returned by calling &lt;see langword=&quot;GetEntity&quot; /&gt; on the underlying &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt;. If a type other than &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; is specified, the method returns &lt;see langword=&quot;null&quot; /&gt;.">基になる <see cref="T:System.Xml.XmlResolver" /> で <see langword="GetEntity" /> を呼び出すことによって返されるストリーム。 <see cref="T:System.IO.Stream" /> 以外の型が指定された場合、このメソッドは <see langword="null" /> を返します。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;paramref name=&quot;ofObjectToReturn&quot; /&gt; is neither &lt;see langword=&quot;null&quot; /&gt; nor a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; type.&#xA;&#xA;-or-&#xA;&#xA;.NET 7 and later versions: In all cases.">
        <paramref name="ofObjectToReturn" /> が <see langword="null" /> でも <see cref="T:System.IO.Stream" /> 型でもありません。</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="The specified URI is not an absolute URI.">指定した URI が絶対 URI ではありません。</exception>
      <exception cref="T:System.NullReferenceException" vsli:raw="&lt;paramref name=&quot;absoluteUri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="absoluteUri" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.Exception" vsli:raw="There is a run-time error (for example, an interrupted server connection).">実行時エラー (サーバー接続の中断など) があります。</exception>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.GetEntityAsync(System.Uri,System.String,System.Type)">
      <summary vsli:raw="Asynchronously maps a URI to an object that contains the actual resource.">URI を実際のリソースを格納しているオブジェクトに非同期にマップします。</summary>
      <param name="absoluteUri" vsli:raw="The URI returned from &lt;see cref=&quot;M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)&quot; /&gt;.">
        <see cref="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)" /> から返された URI。</param>
      <param name="role" vsli:raw="Currently not used.">現在は使用されていません。</param>
      <param name="ofObjectToReturn" vsli:raw="The type of object to return. The current version only returns &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; objects.">返すオブジェクトの型。 現在のバージョンだけが、<see cref="T:System.IO.Stream" /> オブジェクトを返します。</param>
      <returns vsli:raw="The stream returned by calling &lt;see langword=&quot;GetEntity&quot; /&gt; on the underlying &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt;. If a type other than &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; is specified, the method returns &lt;see langword=&quot;null&quot; /&gt;.">基になる <see cref="T:System.Xml.XmlResolver" /> で <see langword="GetEntity" /> を呼び出すことによって返されるストリーム。 <see cref="T:System.IO.Stream" /> 以外の型が指定された場合、このメソッドは <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)">
      <summary vsli:raw="Resolves the absolute URI from the base and relative URIs by calling &lt;see langword=&quot;ResolveUri&quot; /&gt; on the underlying &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt;.">基になる <see cref="T:System.Xml.XmlResolver" /> で <see langword="ResolveUri" /> を呼び出して、ベース URI と相対 URI から絶対 URI を解決します。</summary>
      <param name="baseUri" vsli:raw="The base URI used to resolve the relative URI.">相対 URI の解決に使用するベース URI。</param>
      <param name="relativeUri" vsli:raw="The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the &lt;paramref name=&quot;baseUri&quot; /&gt; value. If relative, it combines with the &lt;paramref name=&quot;baseUri&quot; /&gt; to make an absolute URI.">解決対象の URI。 URI は絶対 URI でも相対 URI でもかまいません。 絶対 URI の場合は、この値が <paramref name="baseUri" /> 値を効率的に置き換えます。 相対 URI の場合、この値は <paramref name="baseUri" /> と結合して絶対 URI を作成します。</param>
      <returns vsli:raw="The absolute URI or &lt;see langword=&quot;null&quot; /&gt; if the relative URI cannot be resolved (returned by calling &lt;see langword=&quot;ResolveUri&quot; /&gt; on the underlying &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt;).">絶対 URI。相対 URI を解決できない場合は <see langword="null" /> (基になる <see cref="T:System.Xml.XmlResolver" /> で <see langword="ResolveUri" /> を呼び出すことによって返されます)。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;relativeUri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="relativeUri" /> は <see langword="null" />です。</exception>
    </member>
    <member name="T:System.Xml.XmlSignificantWhitespace">
      <summary vsli:raw="Represents white space between markup in a mixed content node or white space within an xml:space= 'preserve' scope. This is also referred to as significant white space.">混合コンテンツ ノードのマークアップ間にある空白、または xml:space= 'preserve' スコープ内の空白を表します。 これは有意の空白とも呼ばれます。</summary>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.#ctor(System.String,System.Xml.XmlDocument)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlSignificantWhitespace&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlSignificantWhitespace" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="strData" vsli:raw="The white space characters of the node.">ノードの空白文字。</param>
      <param name="doc" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlDocument" /> オブジェクト。</param>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node.">このノードの複製を作成します。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself. For significant white space nodes, the cloned node always includes the data value, regardless of the parameter setting.">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。 有意の空白ノードの場合、クローンとして作成されたノードには、パラメーターの設定に関係なく、常にデータ値が含まれます。</param>
      <returns vsli:raw="The cloned node.">クローンとして作成されたノード。</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.LocalName">
      <summary vsli:raw="Gets the local name of the node.">ノードのローカル名を取得します。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlSignificantWhitespace&quot; /&gt; nodes, this property returns &lt;see langword=&quot;#significant-whitespace&quot; /&gt;.">
        <see langword="XmlSignificantWhitespace" /> ノードの場合、このプロパティは <see langword="#significant-whitespace" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.Name">
      <summary vsli:raw="Gets the qualified name of the node.">ノードの限定名を取得します。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlSignificantWhitespace&quot; /&gt; nodes, this property returns &lt;see langword=&quot;#significant-whitespace&quot; /&gt;.">
        <see langword="XmlSignificantWhitespace" /> ノードの場合、このプロパティは <see langword="#significant-whitespace" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.NodeType">
      <summary vsli:raw="Gets the type of the current node.">現在のノードの種類を取得します。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlSignificantWhitespace&quot; /&gt; nodes, this value is XmlNodeType.SignificantWhitespace.">
        <see langword="XmlSignificantWhitespace" /> ノードの場合、この値は XmlNodeType.SignificantWhitespace です。</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.ParentNode">
      <summary vsli:raw="Gets the parent of the current node.">現在のノードの親を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; parent node of the current node.">現在のノードの <see cref="T:System.Xml.XmlNode" /> 親ノード。</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.PreviousText">
      <summary vsli:raw="Gets the text node that immediately precedes this node.">このノードの直前にあるテキスト ノードを取得します。</summary>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt;.">
        <see cref="T:System.Xml.XmlNode" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.Value">
      <summary vsli:raw="Gets or sets the value of the node.">ノードの値を取得または設定します。</summary>
      <returns vsli:raw="The white space characters found in the node.">ノードで検出された空白文字。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Setting &lt;see langword=&quot;Value&quot; /&gt; to invalid white space characters.">
        <see langword="Value" /> が無効な空白文字に設定されています。</exception>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves all the children of the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">指定した <see cref="T:System.Xml.XmlWriter" /> にノードのすべての子を保存します。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">指定した <see cref="T:System.Xml.XmlWriter" /> にノードを保存します。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlSpace">
      <summary vsli:raw="Specifies the current &lt;see langword=&quot;xml:space&quot; /&gt; scope.">現在の <see langword="xml:space" /> スコープを指定します。</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.Default">
      <summary vsli:raw="The &lt;see langword=&quot;xml:space&quot; /&gt; scope equals &lt;see langword=&quot;default&quot; /&gt;.">
        <see langword="xml:space" /> スコープと <see langword="default" /> は等価です。</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.None">
      <summary vsli:raw="No &lt;see langword=&quot;xml:space&quot; /&gt; scope.">
        <see langword="xml:space" /> スコープがありません。</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.Preserve">
      <summary vsli:raw="The &lt;see langword=&quot;xml:space&quot; /&gt; scope equals &lt;see langword=&quot;preserve&quot; /&gt;.">
        <see langword="xml:space" /> スコープと <see langword="preserve" /> は等価です。</summary>
    </member>
    <member name="T:System.Xml.XmlText">
      <summary vsli:raw="Represents the text content of an element or attribute.">要素または属性のテキストの内容を表します。</summary>
    </member>
    <member name="M:System.Xml.XmlText.#ctor(System.String,System.Xml.XmlDocument)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlText&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlText" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="strData" vsli:raw="The content of the node; see the &lt;see cref=&quot;P:System.Xml.XmlText.Value&quot; /&gt; property.">ノードの内容。<see cref="P:System.Xml.XmlText.Value" /> プロパティに関するトピックを参照してください。</param>
      <param name="doc" vsli:raw="The parent XML document.">親 XML ドキュメント。</param>
    </member>
    <member name="M:System.Xml.XmlText.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node.">このノードの複製を作成します。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself.">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。</param>
      <returns vsli:raw="The cloned node.">クローンとして作成されたノード。</returns>
    </member>
    <member name="P:System.Xml.XmlText.LocalName">
      <summary vsli:raw="Gets the local name of the node.">ノードのローカル名を取得します。</summary>
      <returns vsli:raw="For text nodes, this property returns &lt;see langword=&quot;#text&quot; /&gt;.">テキスト ノードの場合、このプロパティは <see langword="#text" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlText.Name">
      <summary vsli:raw="Gets the qualified name of the node.">ノードの限定名を取得します。</summary>
      <returns vsli:raw="For text nodes, this property returns &lt;see langword=&quot;#text&quot; /&gt;.">テキスト ノードの場合、このプロパティは <see langword="#text" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlText.NodeType">
      <summary vsli:raw="Gets the type of the current node.">現在のノードの種類を取得します。</summary>
      <returns vsli:raw="For text nodes, this value is XmlNodeType.Text.">テキスト ノードの場合、この値は XmlNodeType.Text です。</returns>
    </member>
    <member name="P:System.Xml.XmlText.ParentNode">
      <summary vsli:raw="Gets the parent of this node (for nodes that can have parents).">このノードの親 (親を持つノードの場合) を取得します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlNode&quot; /&gt; that is the parent of the current node. If a node has just been created and not yet added to the tree, or if it has been removed from the tree, the parent is &lt;see langword=&quot;null&quot; /&gt;. For all other nodes, the value returned depends on the &lt;see cref=&quot;P:System.Xml.XmlNode.NodeType&quot; /&gt; of the node. The following table describes the possible return values for the &lt;see langword=&quot;ParentNode&quot; /&gt; property.">現在のノードの親である <see langword="XmlNode" />。 ノードが作成された直後でまだツリーに追加されていない場合や、ノードがツリーから削除された場合、親は <see langword="null" /> です。 他のすべてのノードについては、返される値はノードの <see cref="P:System.Xml.XmlNode.NodeType" /> によって異なります。 <see langword="ParentNode" /> プロパティの使用可能な戻り値を次の表に示します。</returns>
    </member>
    <member name="P:System.Xml.XmlText.PreviousText">
      <summary vsli:raw="Gets the text node that immediately precedes this node.">このノードの直前にあるテキスト ノードを取得します。</summary>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt;.">
        <see cref="T:System.Xml.XmlNode" /> を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlText.SplitText(System.Int32)">
      <summary vsli:raw="Splits the node into two nodes at the specified offset, keeping both in the tree as siblings.">指定したオフセット位置でノードを 2 つのノードに分割し、両方とも兄弟としてツリーに保持します。</summary>
      <param name="offset" vsli:raw="The offset at which to split the node.">ノードを分割する位置のオフセット。</param>
      <returns vsli:raw="The new node.">新しいノード。</returns>
    </member>
    <member name="P:System.Xml.XmlText.Value">
      <summary vsli:raw="Gets or sets the value of the node.">ノードの値を取得または設定します。</summary>
      <returns vsli:raw="The content of the text node.">テキスト ノードの内容。</returns>
    </member>
    <member name="M:System.Xml.XmlText.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves all the children of the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;. &lt;see langword=&quot;XmlText&quot; /&gt; nodes do not have children, so this method has no effect.">指定した <see cref="T:System.Xml.XmlWriter" /> にノードのすべての子を保存します。 <see langword="XmlText" /> ノードには子がないため、このメソッドによる影響はありません。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlText.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">指定した <see cref="T:System.Xml.XmlWriter" /> にノードを保存します。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlTextReader">
      <summary vsli:raw="Represents a reader that provides fast, non-cached, forward-only access to XML data.  &#xA;  &#xA; Starting with the .NET Framework 2.0, we recommend that you use the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; class instead.">XML データへの高速で非キャッシュの前方向アクセスを提供するリーダーを表します。  
.NET Framework 2.0 以降では、代わりに <see cref="T:System.Xml.XmlReader" /> クラスを使用することをお勧めします。</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlTextReader&quot; /&gt;.">
        <see langword="XmlTextReader" />の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class with the specified stream.">指定したストリームで <see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="input" vsli:raw="The stream containing the XML data to read.">読み取る XML データを格納しているストリーム。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;input&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class with the specified stream and &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">指定したストリームと <see cref="T:System.Xml.XmlNameTable" /> で <see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="input" vsli:raw="The stream containing the XML data to read.">読み取る XML データを格納しているストリーム。</param>
      <param name="nt" vsli:raw="The &lt;see langword=&quot;XmlNameTable&quot; /&gt; to use.">使用する <see langword="XmlNameTable" />。</param>
      <exception cref="T:System.NullReferenceException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; or &lt;paramref name=&quot;nt&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> または <paramref name="nt" /> の値が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class with the specified stream, &lt;see cref=&quot;T:System.Xml.XmlNodeType&quot; /&gt;, and &lt;see cref=&quot;T:System.Xml.XmlParserContext&quot; /&gt;.">指定したストリーム、<see cref="T:System.Xml.XmlNodeType" /> および <see cref="T:System.Xml.XmlParserContext" /> で <see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="xmlFragment" vsli:raw="The stream containing the XML fragment to parse.">解析する XML フラグメントを含んでいるストリーム。</param>
      <param name="fragType" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNodeType&quot; /&gt; of the XML fragment. This also determines what the fragment can contain. (See table below.)">XML フラグメントの <see cref="T:System.Xml.XmlNodeType" />。 これもフラグメントに何を含めることができるかを判断します。 下の表を参照してください。</param>
      <param name="context" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlParserContext&quot; /&gt; in which the &lt;paramref name=&quot;xmlFragment&quot; /&gt; is to be parsed. This includes the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; to use, encoding, namespace scope, the current &lt;c&gt;xml:lang&lt;/c&gt;, and the &lt;c&gt;xml:space&lt;/c&gt; scope.">
        <paramref name="xmlFragment" /> の解析先の <see cref="T:System.Xml.XmlParserContext" />。 これには、使用する <see cref="T:System.Xml.XmlNameTable" />、エンコーディング、名前空間スコープ、現在の<c>xml:lang</c> と <c>xml:space</c> スコープが含まれます。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;paramref name=&quot;fragType&quot; /&gt; is not an Element, Attribute, or Document &lt;see langword=&quot;XmlNodeType&quot; /&gt;.">
        <paramref name="fragType" /> が Element、Attribute、または Document のいずれかの <see langword="XmlNodeType" /> ではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlFragment&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlFragment" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlTextReader" /> を指定して、<see cref="T:System.IO.TextReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="input" vsli:raw="The &lt;see langword=&quot;TextReader&quot; /&gt; containing the XML data to read.">読み取る XML データを格納している <see langword="TextReader" />。</param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; and &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">指定された <see cref="T:System.Xml.XmlTextReader" /> と <see cref="T:System.IO.TextReader" /> を使用して、<see cref="T:System.Xml.XmlNameTable" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="input" vsli:raw="The &lt;see langword=&quot;TextReader&quot; /&gt; containing the XML data to read.">読み取る XML データを格納している <see langword="TextReader" />。</param>
      <param name="nt" vsli:raw="The &lt;see langword=&quot;XmlNameTable&quot; /&gt; to use.">使用する <see langword="XmlNameTable" />。</param>
      <exception cref="T:System.NullReferenceException" vsli:raw="The &lt;paramref name=&quot;nt&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="nt" /> 値は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class with the specified file.">指定したファイルで、<see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="url" vsli:raw="The URL for the file containing the XML data. The &lt;see cref=&quot;P:System.Xml.XmlTextReader.BaseURI&quot; /&gt; is set to this value.">XML データを格納しているファイルの URL。 <see cref="P:System.Xml.XmlTextReader.BaseURI" /> は、この値に設定されます。</param>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The specified file cannot be found.">指定されたファイルが見つかりません。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException" vsli:raw="Part of the filename or directory cannot be found.">ファイル名またはディレクトリの一部が見つかりません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;url&quot; /&gt; is an empty string.">
        <paramref name="url" /> が空の文字列です。</exception>
      <exception cref="T:System.Net.WebException" vsli:raw="The remote filename cannot be resolved.  &#xA;  &#xA; -or-  &#xA;  &#xA; An error occurred while processing the request.">リモート ファイル名を解決できません。  
 または  
 この要求の処理中にエラーが発生しました。</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="&lt;paramref name=&quot;url&quot; /&gt; is not a valid URI.">
        <paramref name="url" /> は有効な URI ではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class with the specified URL and stream.">指定した URL とストリームで、<see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="url" vsli:raw="The URL to use for resolving external resources. The &lt;see cref=&quot;P:System.Xml.XmlTextReader.BaseURI&quot; /&gt; is set to this value.">外部リソースを解決するために使用する URL。 <see cref="P:System.Xml.XmlTextReader.BaseURI" /> は、この値に設定されます。</param>
      <param name="input" vsli:raw="The stream containing the XML data to read.">読み取る XML データを格納しているストリーム。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;input&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class with the specified URL, stream and &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">指定した URL、ストリーム、および <see cref="T:System.Xml.XmlNameTable" /> で、<see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="url" vsli:raw="The URL to use for resolving external resources. The &lt;see cref=&quot;P:System.Xml.XmlTextReader.BaseURI&quot; /&gt; is set to this value. If &lt;paramref name=&quot;url&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, &lt;see langword=&quot;BaseURI&quot; /&gt; is set to &lt;see langword=&quot;String.Empty&quot; /&gt;.">外部リソースを解決するために使用する URL。 <see cref="P:System.Xml.XmlTextReader.BaseURI" /> は、この値に設定されます。 <paramref name="url" /> が <see langword="null" /> の場合、<see langword="BaseURI" /> が <see langword="String.Empty" /> に設定されます。</param>
      <param name="input" vsli:raw="The stream containing the XML data to read.">読み取る XML データを格納しているストリーム。</param>
      <param name="nt" vsli:raw="The &lt;see langword=&quot;XmlNameTable&quot; /&gt; to use.">使用する <see langword="XmlNameTable" />。</param>
      <exception cref="T:System.NullReferenceException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; or &lt;paramref name=&quot;nt&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> または <paramref name="nt" /> の値が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class with the specified URL and &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt;.">指定した URL と <see cref="T:System.IO.TextReader" /> で、<see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="url" vsli:raw="The URL to use for resolving external resources. The &lt;see cref=&quot;P:System.Xml.XmlTextReader.BaseURI&quot; /&gt; is set to this value.">外部リソースを解決するために使用する URL。 <see cref="P:System.Xml.XmlTextReader.BaseURI" /> は、この値に設定されます。</param>
      <param name="input" vsli:raw="The &lt;see langword=&quot;TextReader&quot; /&gt; containing the XML data to read.">読み取る XML データを格納している <see langword="TextReader" />。</param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class with the specified URL, &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; and &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">指定した URL、<see cref="T:System.IO.TextReader" />、および <see cref="T:System.Xml.XmlNameTable" /> で、<see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="url" vsli:raw="The URL to use for resolving external resources. The &lt;see cref=&quot;P:System.Xml.XmlTextReader.BaseURI&quot; /&gt; is set to this value. If &lt;paramref name=&quot;url&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, &lt;see langword=&quot;BaseURI&quot; /&gt; is set to &lt;see langword=&quot;String.Empty&quot; /&gt;.">外部リソースを解決するために使用する URL。 <see cref="P:System.Xml.XmlTextReader.BaseURI" /> は、この値に設定されます。 <paramref name="url" /> が <see langword="null" /> の場合、<see langword="BaseURI" /> が <see langword="String.Empty" /> に設定されます。</param>
      <param name="input" vsli:raw="The &lt;see langword=&quot;TextReader&quot; /&gt; containing the XML data to read.">読み取る XML データを格納している <see langword="TextReader" />。</param>
      <param name="nt" vsli:raw="The &lt;see langword=&quot;XmlNameTable&quot; /&gt; to use.">使用する <see langword="XmlNameTable" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;nt&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="nt" /> 値は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class with the specified file and &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">指定したファイルと <see cref="T:System.Xml.XmlNameTable" /> で、<see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="url" vsli:raw="The URL for the file containing the XML data to read.">読み取る XML データを格納しているファイルの URL。</param>
      <param name="nt" vsli:raw="The &lt;see langword=&quot;XmlNameTable&quot; /&gt; to use.">使用する <see langword="XmlNameTable" />。</param>
      <exception cref="T:System.NullReferenceException" vsli:raw="The &lt;paramref name=&quot;nt&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="nt" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The specified file cannot be found.">指定されたファイルが見つかりません。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException" vsli:raw="Part of the filename or directory cannot be found.">ファイル名またはディレクトリの一部が見つかりません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;url&quot; /&gt; is an empty string.">
        <paramref name="url" /> が空の文字列です。</exception>
      <exception cref="T:System.Net.WebException" vsli:raw="The remote filename cannot be resolved.  &#xA;  &#xA; -or-  &#xA;  &#xA; An error occurred while processing the request.">リモート ファイル名を解決できません。  
 または  
 この要求の処理中にエラーが発生しました。</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="&lt;paramref name=&quot;url&quot; /&gt; is not a valid URI.">
        <paramref name="url" /> は有効な URI ではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class with the specified string, &lt;see cref=&quot;T:System.Xml.XmlNodeType&quot; /&gt;, and &lt;see cref=&quot;T:System.Xml.XmlParserContext&quot; /&gt;.">指定した文字列、<see cref="T:System.Xml.XmlNodeType" />、および <see cref="T:System.Xml.XmlParserContext" /> で、<see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="xmlFragment" vsli:raw="The string containing the XML fragment to parse.">解析する XML フラグメントを含んでいる文字列。</param>
      <param name="fragType" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNodeType&quot; /&gt; of the XML fragment. This also determines what the fragment string can contain. (See table below.)">XML フラグメントの <see cref="T:System.Xml.XmlNodeType" />。 これもフラグメント文字列に何を含めることができるかを判断します。 下の表を参照してください。</param>
      <param name="context" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlParserContext&quot; /&gt; in which the &lt;paramref name=&quot;xmlFragment&quot; /&gt; is to be parsed. This includes the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; to use, encoding, namespace scope, the current &lt;c&gt;xml:lang&lt;/c&gt;, and the &lt;c&gt;xml:space&lt;/c&gt; scope.">
        <paramref name="xmlFragment" /> の解析先の <see cref="T:System.Xml.XmlParserContext" />。 これには、使用する <see cref="T:System.Xml.XmlNameTable" />、エンコーディング、名前空間スコープ、現在の<c>xml:lang</c> と <c>xml:space</c> スコープが含まれます。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;paramref name=&quot;fragType&quot; /&gt; is not an &lt;see langword=&quot;Element&quot; /&gt;, &lt;see langword=&quot;Attribute&quot; /&gt;, or &lt;see langword=&quot;Document&quot; /&gt;&lt;see langword=&quot;XmlNodeType&quot; /&gt;.">
        <paramref name="fragType" /> が <see langword="Element" />、<see langword="Attribute" />、または <see langword="Document" /> のいずれかの <see langword="XmlNodeType" /> ではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlFragment&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlFragment" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.Xml.XmlNameTable)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">
        <see cref="T:System.Xml.XmlTextReader" /> を指定して、<see cref="T:System.Xml.XmlNameTable" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="nt" vsli:raw="The &lt;see langword=&quot;XmlNameTable&quot; /&gt; to use.">使用する <see langword="XmlNameTable" />。</param>
    </member>
    <member name="P:System.Xml.XmlTextReader.AttributeCount">
      <summary vsli:raw="Gets the number of attributes on the current node.">現在のノードにある属性の数を取得します。</summary>
      <returns vsli:raw="The number of attributes on the current node.">現在のノードにある属性の数。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.BaseURI">
      <summary vsli:raw="Gets the base URI of the current node.">現在のノードのベース URI を取得します。</summary>
      <returns vsli:raw="The base URI of the current node.">現在のノードのベース URI。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.CanReadBinaryContent">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; implements the binary content read methods.">
        <see cref="T:System.Xml.XmlTextReader" /> がバイナリ コンテンツ用の読み取りメソッドを実装するかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the binary content read methods are implemented; otherwise &lt;see langword=&quot;false&quot; /&gt;. The &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class always returns &lt;see langword=&quot;true&quot; /&gt;.">バイナリ コンテンツ用の読み取りメソッドを実装する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see cref="T:System.Xml.XmlTextReader" /> クラスは、常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.CanReadValueChunk">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; implements the &lt;see cref=&quot;M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)&quot; /&gt; method.">
        <see cref="T:System.Xml.XmlTextReader" /> が <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> メソッドを実装しているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; implements the &lt;see cref=&quot;M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)&quot; /&gt; method; otherwise &lt;see langword=&quot;false&quot; /&gt;. The &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Xml.XmlTextReader" /> が <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> メソッドを実装している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see cref="T:System.Xml.XmlTextReader" /> クラスは、常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.CanResolveEntity">
      <summary vsli:raw="Gets a value indicating whether this reader can parse and resolve entities.">このリーダーがエンティティを解析および解決できるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader can parse and resolve entities; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The &lt;see langword=&quot;XmlTextReader&quot; /&gt; class always returns &lt;see langword=&quot;true&quot; /&gt;.">リーダーがエンティティを解析および解決できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="XmlTextReader" /> クラスは、常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.Close">
      <summary vsli:raw="Changes the &lt;see cref=&quot;P:System.Xml.XmlReader.ReadState&quot; /&gt; to &lt;see langword=&quot;Closed&quot; /&gt;.">
        <see cref="P:System.Xml.XmlReader.ReadState" /> を <see langword="Closed" /> に変更します。</summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.Depth">
      <summary vsli:raw="Gets the depth of the current node in the XML document.">XML ドキュメント内の現在のノードの深さを取得します。</summary>
      <returns vsli:raw="The depth of the current node in the XML document.">XML ドキュメント内の現在のノードの深さ。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.DtdProcessing">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.DtdProcessing&quot; /&gt; enumeration.">
        <see cref="T:System.Xml.DtdProcessing" /> 列挙体を取得または設定します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.DtdProcessing&quot; /&gt; enumeration.">
        <see cref="T:System.Xml.DtdProcessing" /> 列挙体。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Encoding">
      <summary vsli:raw="Gets the encoding of the document.">ドキュメントのエンコーディングを取得します。</summary>
      <returns vsli:raw="The encoding value. If no encoding attribute exists, and there is no byte-order mark, this defaults to UTF-8.">エンコーディング値。 エンコーディング属性が存在せず、バイト順のマークもない場合は、既定として UTF-8 が使用されます。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.EntityHandling">
      <summary vsli:raw="Gets or sets a value that specifies how the reader handles entities.">リーダーによるエンティティの処理方法を指定する値を取得または設定します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.EntityHandling&quot; /&gt; values. If no &lt;see langword=&quot;EntityHandling&quot; /&gt; is specified, it defaults to &lt;see langword=&quot;EntityHandling.ExpandCharEntities&quot; /&gt;.">
        <see cref="T:System.Xml.EntityHandling" /> 値のいずれか 1 つ。 <see langword="EntityHandling" /> が指定されていない場合は、既定で <see langword="EntityHandling.ExpandCharEntities" /> に設定されます。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.EOF">
      <summary vsli:raw="Gets a value indicating whether the reader is positioned at the end of the stream.">リーダーがストリームの末尾に配置されているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is positioned at the end of the stream; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">ストリームの末尾にリーダーが配置されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)">
      <summary vsli:raw="Gets the value of the attribute with the specified index.">指定したインデックスの属性の値を取得します。</summary>
      <param name="i" vsli:raw="The index of the attribute. The index is zero-based. (The first attribute has index 0.)">属性のインデックス。 インデックスの値は、0 から始まります。 最初の属性のインデックスは 0 です。</param>
      <returns vsli:raw="The value of the specified attribute.">指定した属性の値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;i&quot; /&gt; parameter is less than 0 or greater than or equal to &lt;see cref=&quot;P:System.Xml.XmlTextReader.AttributeCount&quot; /&gt;.">
        <paramref name="i" /> パラメーターが 0 未満か、<see cref="P:System.Xml.XmlTextReader.AttributeCount" /> 以上です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.String)">
      <summary vsli:raw="Gets the value of the attribute with the specified name.">指定した名前の属性の値を取得します。</summary>
      <param name="name" vsli:raw="The qualified name of the attribute.">属性の限定名。</param>
      <returns vsli:raw="The value of the specified attribute. If the attribute is not found, &lt;see langword=&quot;null&quot; /&gt; is returned.">指定した属性の値。 指定した属性が見つからない場合は <see langword="null" /> が返されます。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)">
      <summary vsli:raw="Gets the value of the attribute with the specified local name and namespace URI.">指定したローカル名および名前空間 URI に関連付けられた属性の値を取得します。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">属性のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute.">属性の名前空間 URI。</param>
      <returns vsli:raw="The value of the specified attribute. If the attribute is not found, &lt;see langword=&quot;null&quot; /&gt; is returned. This method does not move the reader.">指定した属性の値。 指定した属性が見つからない場合は <see langword="null" /> が返されます。 このメソッドは、リーダーを移動しません。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary vsli:raw="Gets a collection that contains all namespaces currently in-scope.">現在スコープ内にあるすべての名前空間が含まれたコレクションを取得します。</summary>
      <param name="scope" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNamespaceScope&quot; /&gt; value that specifies the type of namespace nodes to return.">返される名前空間ノードの種類を指定する <see cref="T:System.Xml.XmlNamespaceScope" /> 値。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object that contains all the current in-scope namespaces. If the reader is not positioned on an element, an empty dictionary (no namespaces) is returned.">現在スコープ内にあるすべての名前空間が含まれた <see cref="T:System.Collections.IDictionary" /> オブジェクト。 要素にリーダーが配置されていない場合は、名前空間が含まれていない空のディクショナリが返されます。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetRemainder">
      <summary vsli:raw="Gets the remainder of the buffered XML.">バッファー内の XML の剰余を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; containing the remainder of the buffered XML.">バッファー内の XML の剰余を格納している <see cref="T:System.IO.TextReader" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.HasLineInfo">
      <summary vsli:raw="Gets a value indicating whether the class can return line information.">クラスが行情報を返すことができるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the class can return line information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">クラスが行情報を返せる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.HasValue">
      <summary vsli:raw="Gets a value indicating whether the current node can have a &lt;see cref=&quot;P:System.Xml.XmlTextReader.Value&quot; /&gt; other than &lt;see langword=&quot;String.Empty&quot; /&gt;.">現在のノードが <see langword="String.Empty" /> 以外の <see cref="P:System.Xml.XmlTextReader.Value" /> を保持できるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node on which the reader is currently positioned can have a &lt;see langword=&quot;Value&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">リーダーが現在配置されているノードが <see langword="Value" /> を持つことができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.IsDefault">
      <summary vsli:raw="Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.">現在のノードが、DTD またはスキーマで定義された既定値から生成された属性であるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="This property always returns &lt;see langword=&quot;false&quot; /&gt;. (&lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; does not expand default attributes.)">このプロパティは常に <see langword="false" /> を返します。 (<see cref="T:System.Xml.XmlTextReader" /> は既定の属性を展開しません。)</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.IsEmptyElement">
      <summary vsli:raw="Gets a value indicating whether the current node is an empty element (for example, &lt;c&gt;&amp;lt;MyElement/&amp;gt;&lt;/c&gt;).">現在のノードが空の要素 (<c>&lt;MyElement/&gt;</c> など) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node is an element (&lt;see cref=&quot;P:System.Xml.XmlTextReader.NodeType&quot; /&gt; equals &lt;see langword=&quot;XmlNodeType.Element&quot; /&gt;) that ends with &lt;c&gt;/&amp;gt;&lt;/c&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />現在<see cref="P:System.Xml.XmlTextReader.NodeType" />のノードがで<see langword="XmlNodeType.Element" /><c>/終わる要素(equals) である場合は。それ以外の場合は。 &gt;</c><see langword="false" /></returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.LineNumber">
      <summary vsli:raw="Gets the current line number.">現在の行番号を取得します。</summary>
      <returns vsli:raw="The current line number.">現在の行番号。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.LinePosition">
      <summary vsli:raw="Gets the current line position.">現在の行の位置を取得します。</summary>
      <returns vsli:raw="The current line position.">現在の行の位置。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.LocalName">
      <summary vsli:raw="Gets the local name of the current node.">現在のノードのローカル名を取得します。</summary>
      <returns vsli:raw="The name of the current node with the prefix removed. For example, &lt;see langword=&quot;LocalName&quot; /&gt; is &lt;see langword=&quot;book&quot; /&gt; for the element &lt;c&gt;&amp;lt;bk:book&amp;gt;&lt;/c&gt;.  &#xA;  &#xA; For node types that do not have a name (like &lt;see langword=&quot;Text&quot; /&gt;, &lt;see langword=&quot;Comment&quot; /&gt;, and so on), this property returns &lt;see langword=&quot;String.Empty&quot; /&gt;.">プリフィックスを削除した現在のノードの名前。 たとえば、 <see langword="LocalName" />は<see langword="book" />要素<c>&gt;bk: book 用です。 &lt;</c>  
名前を持たないノード型 (<see langword="Text" />、<see langword="Comment" /> など) の場合、このプロパティは <see langword="String.Empty" /> を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.LookupNamespace(System.String)">
      <summary vsli:raw="Resolves a namespace prefix in the current element's scope.">現在の要素のスコープ内の名前空間プリフィックスを解決します。</summary>
      <param name="prefix" vsli:raw="The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. This string does not have to be atomized.">解決する対象となる名前空間 URI のプレフィックス。 既定の名前空間と一致させるには、空の文字列を渡します。 この文字列は、最小単位に分割する必要はありません。</param>
      <returns vsli:raw="The namespace URI to which the prefix maps or &lt;see langword=&quot;null&quot; /&gt; if no matching prefix is found.">プレフィックスの割り当て先の名前空間 URI。条件に合うプレフィックスが見つからない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;P:System.Xml.XmlTextReader.Namespaces&quot; /&gt; property is set to &lt;see langword=&quot;true&quot; /&gt; and the &lt;paramref name=&quot;prefix&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="P:System.Xml.XmlTextReader.Namespaces" /> プロパティが <see langword="true" /> に設定され、<paramref name="prefix" /> 値が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.Int32)">
      <summary vsli:raw="Moves to the attribute with the specified index.">指定したインデックスを持つ属性に移動します。</summary>
      <param name="i" vsli:raw="The index of the attribute.">属性のインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;i&quot; /&gt; parameter is less than 0 or greater than or equal to &lt;see cref=&quot;P:System.Xml.XmlReader.AttributeCount&quot; /&gt;.">
        <paramref name="i" /> パラメーターが 0 未満か、<see cref="P:System.Xml.XmlReader.AttributeCount" /> 以上です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.String)">
      <summary vsli:raw="Moves to the attribute with the specified name.">指定した名前を持つ属性へ移動します。</summary>
      <param name="name" vsli:raw="The qualified name of the attribute.">属性の限定名。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the reader's position does not change.">属性が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、リーダーの位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.String,System.String)">
      <summary vsli:raw="Moves to the attribute with the specified local name and namespace URI.">指定したローカル名および名前空間 URI の属性に移動します。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">属性のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute.">属性の名前空間 URI。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the reader's position does not change.">属性が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、リーダーの位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToElement">
      <summary vsli:raw="Moves to the element that contains the current attribute node.">現在の属性ノードを含む要素に移動します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); &lt;see langword=&quot;false&quot; /&gt; if the reader is not positioned on an attribute (the position of the reader does not change).">リーダーが属性の位置に配置されている場合は <see langword="true" /> で、属性を所有している要素の位置にリーダーが移動します。リーダーが属性の位置に配置されていない場合は <see langword="false" /> で、リーダーの位置が変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToFirstAttribute">
      <summary vsli:raw="Moves to the first attribute.">最初の属性に移動します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an attribute exists (the reader moves to the first attribute); otherwise, &lt;see langword=&quot;false&quot; /&gt; (the position of the reader does not change).">属性が存在する場合は <see langword="true" /> で、リーダーが最初の属性へ移動します。それ以外の場合は <see langword="false" /> で、リーダーの位置が変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToNextAttribute">
      <summary vsli:raw="Moves to the next attribute.">次の属性に移動します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is a next attribute; &lt;see langword=&quot;false&quot; /&gt; if there are no more attributes.">次の属性が存在する場合は <see langword="true" />。それ以上、属性が存在しない場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Name">
      <summary vsli:raw="Gets the qualified name of the current node.">現在のノードの限定名を取得します。</summary>
      <returns vsli:raw="The qualified name of the current node. For example, &lt;see langword=&quot;Name&quot; /&gt; is &lt;see langword=&quot;bk:book&quot; /&gt; for the element &lt;c&gt;&amp;lt;bk:book&amp;gt;&lt;/c&gt;.  &#xA;  &#xA; The name returned is dependent on the &lt;see cref=&quot;P:System.Xml.XmlTextReader.NodeType&quot; /&gt; of the node. The following node types return the listed values. All other node types return an empty string.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Node Type&lt;/term&gt;&lt;description&gt; Name&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Attribute&quot; /&gt;&lt;/term&gt;&lt;description&gt; The name of the attribute.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;DocumentType&quot; /&gt;&lt;/term&gt;&lt;description&gt; The document type name.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Element&quot; /&gt;&lt;/term&gt;&lt;description&gt; The tag name.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;EntityReference&quot; /&gt;&lt;/term&gt;&lt;description&gt; The name of the entity referenced.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;ProcessingInstruction&quot; /&gt;&lt;/term&gt;&lt;description&gt; The target of the processing instruction.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;XmlDeclaration&quot; /&gt;&lt;/term&gt;&lt;description&gt; The literal string &lt;see langword=&quot;xml&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">現在のノードの限定名。 たとえば、 <see langword="Name" />は<see langword="bk:book" />要素<c>&gt;bk: book 用です。 &lt;</c>  
返される名前は、ノードの <see cref="P:System.Xml.XmlTextReader.NodeType" /> によって異なります。 リストされた値を返すノード型を次に示します。 その他のすべてのノード型は、空の文字列を返します。  
  ノード型 
  name 
 <see langword="Attribute" /> 属性の名前。  

 <see langword="DocumentType" /> ドキュメントの種類の名前。  

 <see langword="Element" /> タグ名。  

 <see langword="EntityReference" /> 参照されたエンティティの名前。  

 <see langword="ProcessingInstruction" /> 処理命令の対象。  

 <see langword="XmlDeclaration" /> リテラル文字列 <see langword="xml" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Namespaces">
      <summary vsli:raw="Gets or sets a value indicating whether to do namespace support.">名前空間をサポートするかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to do namespace support; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">名前空間をサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Setting this property after a read operation has occurred (&lt;see cref=&quot;P:System.Xml.XmlTextReader.ReadState&quot; /&gt; is not &lt;see langword=&quot;ReadState.Initial&quot; /&gt;).">読み取り操作が発生した後で (<see cref="P:System.Xml.XmlTextReader.ReadState" /> が <see langword="ReadState.Initial" /> でないとき)、このプロパティを設定します。</exception>
    </member>
    <member name="P:System.Xml.XmlTextReader.NamespaceURI">
      <summary vsli:raw="Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.">リーダーが配置されているノードの名前空間 URI (W3C の名前空間の仕様における定義に準拠) を取得します。</summary>
      <returns vsli:raw="The namespace URI of the current node; otherwise an empty string.">現在のノードの名前空間 URI。それ以外の場合は空の文字列。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.NameTable">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; associated with this implementation.">この実装に関連付けられている <see cref="T:System.Xml.XmlNameTable" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlNameTable&quot; /&gt; enabling you to get the atomized version of a string within the node.">ノード内の最小単位に分割された文字列を取得できる <see langword="XmlNameTable" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.NodeType">
      <summary vsli:raw="Gets the type of the current node.">現在のノードの種類を取得します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.XmlNodeType&quot; /&gt; values representing the type of the current node.">現在のノードの型を表す <see cref="T:System.Xml.XmlNodeType" /> 値の 1 つ。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Normalization">
      <summary vsli:raw="Gets or sets a value indicating whether to normalize white space and attribute values.">空白と属性値を正規化するかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to normalize; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">正規化する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Setting this property when the reader is closed (&lt;see cref=&quot;P:System.Xml.XmlTextReader.ReadState&quot; /&gt; is &lt;see langword=&quot;ReadState.Closed&quot; /&gt;).">リーダーが閉じているとき (<see cref="P:System.Xml.XmlTextReader.ReadState" /> が <see langword="ReadState.Closed" /> のとき) にこのプロパティを設定します。</exception>
    </member>
    <member name="P:System.Xml.XmlTextReader.Prefix">
      <summary vsli:raw="Gets the namespace prefix associated with the current node.">現在のノードに関連付けられた名前空間プリフィックスを取得します。</summary>
      <returns vsli:raw="The namespace prefix associated with the current node.">現在のノードに関連付けられた名前空間プリフィックス。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.ProhibitDtd">
      <summary vsli:raw="Gets or sets a value indicating whether to allow DTD processing. This property is obsolete. Use &lt;see cref=&quot;P:System.Xml.XmlTextReader.DtdProcessing&quot; /&gt; instead.">DTD 処理を許可するかどうかを示す値を取得または設定します。 このプロパティは今後使用しません。 代わりに、<see cref="P:System.Xml.XmlTextReader.DtdProcessing" /> を使用してください。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to disallow DTD processing; otherwise &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">DTD 処理を許可しない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.QuoteChar">
      <summary vsli:raw="Gets the quotation mark character used to enclose the value of an attribute node.">属性ノードの値を囲むために使用する引用符文字を取得します。</summary>
      <returns vsli:raw="The quotation mark character (&quot; or ') used to enclose the value of an attribute node.">属性ノードの値を囲むために使用されている引用符 (" または ')。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.Read">
      <summary vsli:raw="Reads the next node from the stream.">ストリームから次のノードを読み取ります。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the next node was read successfully; &lt;see langword=&quot;false&quot; /&gt; if there are no more nodes to read.">次のノードが正常に読み取られた場合は <see langword="true" />。それ以上読み取る対象となるノードが存在しない場合は <see langword="false" />。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="An error occurred while parsing the XML.">XML の解析中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadAttributeValue">
      <summary vsli:raw="Parses the attribute value into one or more &lt;see langword=&quot;Text&quot; /&gt;, &lt;see langword=&quot;EntityReference&quot; /&gt;, or &lt;see langword=&quot;EndEntity&quot; /&gt; nodes.">属性値を解析して、1 つ以上の <see langword="Text" />、<see langword="EntityReference" />、<see langword="EndEntity" /> の各ノードに格納します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there are nodes to return.  &#xA;  &#xA; &lt;see langword=&quot;false&quot; /&gt; if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.  &#xA;  &#xA; An empty attribute, such as, &lt;c&gt;misc=&quot;&quot;&lt;/c&gt;, returns &lt;see langword=&quot;true&quot; /&gt; with a single node with a value of &lt;see langword=&quot;String.Empty&quot; /&gt;.">返すノードがある場合は <see langword="true" />。  
 初めて呼び出すときにリーダーの位置が属性ノード上にない場合、またはすべての属性値が読み込まれている場合は <see langword="false" />。  
<c>misc=""</c> などの空の属性は、値 <see langword="String.Empty" /> を持つ単一のノードと一緒に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Decodes Base64 and returns the decoded binary bytes.">Base64 をデコードし、デコードされたバイナリ バイトを返します。</summary>
      <param name="array" vsli:raw="The array of characters that serves as the buffer to which the text contents are written.">テキストの内容が書き込まれるバッファーとして機能する文字の配列。</param>
      <param name="offset" vsli:raw="The zero-based index into the array specifying where the method can begin to write to the buffer.">メソッドがバッファーへの書き込みを開始できる位置を示す配列のインデックス (0 から始まる)。</param>
      <param name="len" vsli:raw="The number of bytes to write into the buffer.">バッファーに書き込むバイト数。</param>
      <returns vsli:raw="The number of bytes written to the buffer.">バッファーに書き込まれたバイト数。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The Base64 sequence is not valid.">Base64 シーケンスが無効です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The value of &lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; &amp;lt; 0, or &lt;paramref name=&quot;len&quot; /&gt; &amp;lt; 0, or &lt;paramref name=&quot;len&quot; /&gt; &amp;gt; &lt;paramref name=&quot;array&quot; /&gt;.Length- &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0、または <paramref name="len" /> &lt; 0、または <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Decodes &lt;see langword=&quot;BinHex&quot; /&gt; and returns the decoded binary bytes.">
        <see langword="BinHex" /> をデコードし、デコードされたバイナリ バイトを返します。</summary>
      <param name="array" vsli:raw="The byte array that serves as the buffer to which the decoded binary bytes are written.">デコードされたバイナリ バイトが書き込まれるバッファーとして機能するバイト配列。</param>
      <param name="offset" vsli:raw="The zero-based index into the array specifying where the method can begin to write to the buffer.">メソッドがバッファーへの書き込みを開始できる位置を示す配列のインデックス (0 から始まる)。</param>
      <param name="len" vsli:raw="The number of bytes to write into the buffer.">バッファーに書き込むバイト数。</param>
      <returns vsli:raw="The number of bytes written to your buffer.">バッファーに書き込まれたバイト数。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The &lt;see langword=&quot;BinHex&quot; /&gt; sequence is not valid.">
        <see langword="BinHex" /> シーケンスが有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The value of &lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; &amp;lt; 0, or &lt;paramref name=&quot;len&quot; /&gt; &amp;lt; 0, or &lt;paramref name=&quot;len&quot; /&gt; &amp;gt; &lt;paramref name=&quot;array&quot; /&gt;.Length- &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0、または <paramref name="len" /> &lt; 0、または <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the text contents of an element into a character buffer. This method is designed to read large streams of embedded text by calling it successively.">要素のテキストの内容を文字バッファーに読み取ります。 このメソッドは、連続して呼び出すことによって埋め込みテキストの大量のストリームを読み取るように設計されています。</summary>
      <param name="buffer" vsli:raw="The array of characters that serves as the buffer to which the text contents are written.">テキストの内容が書き込まれるバッファーとして機能する文字の配列。</param>
      <param name="index" vsli:raw="The position within &lt;paramref name=&quot;buffer&quot; /&gt; where the method can begin writing text contents.">メソッドがテキストの内容の書き込みを開始できる <paramref name="buffer" /> 内の位置。</param>
      <param name="count" vsli:raw="The number of characters to write into &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="buffer" /> に書き込む文字数。</param>
      <returns vsli:raw="The number of characters read. This can be &lt;see langword=&quot;0&quot; /&gt; if the reader is not positioned on an element or if there is no more text content to return in the current context.">読み取った文字数。 リーダーが要素に配置されていない場合、または返す対象となるテキストの内容が現在のコンテキスト内にこれ以上ない場合は、<see langword="0" /> になる可能性があります。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;count&quot; /&gt; is greater than the space specified in the &lt;paramref name=&quot;buffer&quot; /&gt; (buffer size - &lt;paramref name=&quot;index&quot; /&gt;).">
        <paramref name="count" /> が <paramref name="buffer" /> (バッファー サイズ - <paramref name="index" />) で指定した値を超えています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt;&lt;see langword=&quot;&amp;lt; 0&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt;&lt;see langword=&quot;&amp;lt; 0&quot; /&gt;.">
        <paramref name="index" />
        <see langword="&lt; 0" /> または <paramref name="count" /><see langword="&lt; 0" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the content and returns the &lt;see langword=&quot;Base64&quot; /&gt; decoded binary bytes.">コンテンツを読み取り、<see langword="Base64" /> でデコードされたバイナリ バイトを返します。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <returns vsli:raw="The number of bytes written to the buffer.">バッファーに書き込まれたバイト数。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)&quot; /&gt; is not supported in the current node.">
        <see cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> は、現在のノードではサポートされていません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the content and returns the &lt;see langword=&quot;BinHex&quot; /&gt; decoded binary bytes.">コンテンツを読み取り、<see langword="BinHex" /> でデコードされたバイナリ バイトを返します。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <returns vsli:raw="The number of bytes written to the buffer.">バッファーに書き込まれたバイト数。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)&quot; /&gt; is not supported on the current node.">
        <see cref="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> は、現在のノードではサポートされていません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; implementation does not support this method.">
        <see cref="T:System.Xml.XmlTextReader" /> 実装が、このメソッドをサポートしていません。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the element and decodes the Base64 content.">要素を読み取り、Base64 のコンテンツをデコードします。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <returns vsli:raw="The number of bytes written to the buffer.">バッファーに書き込まれたバイト数。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node is not an element node.">現在のノードは要素ノードではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; implementation does not support this method.">
        <see cref="T:System.Xml.XmlTextReader" /> 実装が、このメソッドをサポートしていません。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The element contains mixed-content.">要素には混合コンテンツが含まれます。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The content cannot be converted to the requested type.">コンテンツを要求された型に変換できません。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the element and decodes the &lt;see langword=&quot;BinHex&quot; /&gt; content.">要素を読み取り、<see langword="BinHex" /> の内容をデコードします。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <returns vsli:raw="The number of bytes written to the buffer.">バッファーに書き込まれたバイト数。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node is not an element node.">現在のノードは要素ノードではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; implementation does not support this method.">
        <see cref="T:System.Xml.XmlReader" /> 実装が、このメソッドをサポートしていません。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The element contains mixed-content.">要素には混合コンテンツが含まれます。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The content cannot be converted to the requested type.">コンテンツを要求された型に変換できません。</exception>
    </member>
    <member name="P:System.Xml.XmlTextReader.ReadState">
      <summary vsli:raw="Gets the state of the reader.">リーダーの状態を取得します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.ReadState&quot; /&gt; values.">
        <see cref="T:System.Xml.ReadState" /> 値のいずれか 1 つ。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadString">
      <summary vsli:raw="Reads the contents of an element or a text node as a string.">要素ノードまたはテキスト ノードの内容を文字列として読み取ります。</summary>
      <returns vsli:raw="The contents of the element or text node. This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.  &#xA;  &#xA; &lt;see langword=&quot;Note:&quot; /&gt; The text node can be either an element or an attribute text node.">要素ノードまたはテキスト ノードの内容。 要素ノードまたはテキスト ノード以外にリーダーが配置されている場合、または返す対象となるテキスト コンテンツが現在のコンテキスト内にこれ以上ない場合は、これが空の文字列になる場合があります。  
 <see langword="Note:" /> テキスト ノードは、要素テキスト ノードまたは属性テキスト ノードのいずれかが可能です。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="An error occurred while parsing the XML.">XML の解析中にエラーが発生しました。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An invalid operation was attempted.">無効な操作を実行しようとしました。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ResetState">
      <summary vsli:raw="Resets the state of the reader to ReadState.Initial.">リーダーの状態を ReadState.Initial にリセットします。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Calling &lt;see langword=&quot;ResetState&quot; /&gt; if the reader was constructed using an &lt;see cref=&quot;T:System.Xml.XmlParserContext&quot; /&gt;.">
        <see cref="T:System.Xml.XmlParserContext" /> を使用してリーダーを構築した場合の <see langword="ResetState" /> の呼び出し。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="Documents in a single stream do not share the same encoding.">単一ストリーム内のドキュメントが同じエンコーディングを共有していません。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ResolveEntity">
      <summary vsli:raw="Resolves the entity reference for &lt;see langword=&quot;EntityReference&quot; /&gt; nodes.">
        <see langword="EntityReference" /> ノードのエンティティ参照を解決します。</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.Skip">
      <summary vsli:raw="Skips the children of the current node.">現在のノードの子をスキップします。</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)&quot; /&gt;.">このメンバーの説明については、<see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" /> のトピックを参照してください。</summary>
      <param name="scope" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNamespaceScope&quot; /&gt; value that specifies the type of namespace nodes to return.">返される名前空間ノードの種類を指定する <see cref="T:System.Xml.XmlNamespaceScope" /> 値。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; that contains the current in-scope namespaces.">現在のスコープ内にある名前空間が格納された <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)&quot; /&gt;.">このメンバーの説明については、<see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" /> のトピックを参照してください。</summary>
      <param name="prefix" vsli:raw="The prefix whose namespace URI you wish to find.">検索対象の名前空間 URI を持つプレフィックス。</param>
      <returns vsli:raw="The namespace URI that is mapped to the prefix; &lt;see langword=&quot;null&quot; /&gt; if the prefix is not mapped to a namespace URI.">プレフィックスに割り当てられている名前空間 URI。このプレフィックスに名前空間 URI が割り当てられていない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)&quot; /&gt;.">このメンバーの説明については、<see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" /> のトピックを参照してください。</summary>
      <param name="namespaceName" vsli:raw="The namespace URI whose prefix you wish to find.">検索対象のプレフィックスを持つ名前空間 URI。</param>
      <returns vsli:raw="The prefix that is mapped to the namespace URI; &lt;see langword=&quot;null&quot; /&gt; if the namespace URI is not mapped to a prefix.">名前空間 URI に割り当てられているプレフィックス。この名前空間 URI にプレフィックスが割り当てられていない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Value">
      <summary vsli:raw="Gets the text value of the current node.">現在のノードのテキスト値を取得します。</summary>
      <returns vsli:raw="The value returned depends on the &lt;see cref=&quot;P:System.Xml.XmlTextReader.NodeType&quot; /&gt; of the node. The following table lists node types that have a value to return. All other node types return &lt;see langword=&quot;String.Empty&quot; /&gt;.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Node Type&lt;/term&gt;&lt;description&gt; Value&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Attribute&quot; /&gt;&lt;/term&gt;&lt;description&gt; The value of the attribute.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;CDATA&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the CDATA section.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Comment&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the comment.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;DocumentType&quot; /&gt;&lt;/term&gt;&lt;description&gt; The internal subset.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;ProcessingInstruction&quot; /&gt;&lt;/term&gt;&lt;description&gt; The entire content, excluding the target.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;SignificantWhitespace&quot; /&gt;&lt;/term&gt;&lt;description&gt; The white space within an &lt;see langword=&quot;xml:space&quot; /&gt;= 'preserve' scope.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Text&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the text node.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Whitespace&quot; /&gt;&lt;/term&gt;&lt;description&gt; The white space between markup.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;XmlDeclaration&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the declaration.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">返される値は、ノードの <see cref="P:System.Xml.XmlTextReader.NodeType" /> によって異なります。 返す値を持つノード型の一覧を次の表に示します。 これ以外のノード型はすべて <see langword="String.Empty" /> を返します。  
  ノード型 
  [値] 
 <see langword="Attribute" /> 属性の値。  

 <see langword="CDATA" /> CDATA セクションの内容。  

 <see langword="Comment" /> コメントの内容。  

 <see langword="DocumentType" /> 内部サブセット。  

 <see langword="ProcessingInstruction" /> ターゲットを除く全内容。  

 <see langword="SignificantWhitespace" /><see langword="xml:space" />= 'preserve' スコープ内の空白。  

 <see langword="Text" /> テキスト ノードの内容。  

 <see langword="Whitespace" /> マークアップ間の空白。  

 <see langword="XmlDeclaration" /> 宣言の内容。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.WhitespaceHandling">
      <summary vsli:raw="Gets or sets a value that specifies how white space is handled.">空白の処理方法を指定する値を取得または設定します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.WhitespaceHandling&quot; /&gt; values. The default is &lt;see langword=&quot;WhitespaceHandling.All&quot; /&gt; (returns &lt;see langword=&quot;Whitespace&quot; /&gt; and &lt;see langword=&quot;SignificantWhitespace&quot; /&gt; nodes).">
        <see cref="T:System.Xml.WhitespaceHandling" /> 値のいずれか 1 つ。 既定値は <see langword="WhitespaceHandling.All" /> で、<see langword="Whitespace" /> と <see langword="SignificantWhitespace" /> ノードを返します。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="Invalid value specified.">無効な値を指定しています。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Setting this property when the reader is closed (&lt;see cref=&quot;P:System.Xml.XmlTextReader.ReadState&quot; /&gt; is &lt;see langword=&quot;ReadState.Closed&quot; /&gt;).">リーダーが閉じているとき (<see cref="P:System.Xml.XmlTextReader.ReadState" /> が <see langword="ReadState.Closed" /> のとき) にこのプロパティを設定します。</exception>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlLang">
      <summary vsli:raw="Gets the current &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">現在の <see langword="xml:lang" /> スコープを取得します。</summary>
      <returns vsli:raw="The current &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">現在の <see langword="xml:lang" /> スコープ。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlResolver">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used for resolving DTD references.">DTD 参照を解決するために使用する <see cref="T:System.Xml.XmlResolver" /> を設定します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlResolver&quot; /&gt; to use. If set to &lt;see langword=&quot;null&quot; /&gt;, external resources are not resolved.  &#xA;  &#xA; In version 1.1 of the .NET Framework, the caller must be fully trusted in order to specify an &lt;see langword=&quot;XmlResolver&quot; /&gt;.">使用する <see langword="XmlResolver" />。 <see langword="null" /> に設定されていると、外部リソースが解決されません。  
.NET Framework バージョン 1.1 では、<see langword="XmlResolver" /> を指定するには呼び出し元が完全に信頼されている必要があります。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlSpace">
      <summary vsli:raw="Gets the current &lt;see langword=&quot;xml:space&quot; /&gt; scope.">現在の <see langword="xml:space" /> スコープを取得します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.XmlSpace&quot; /&gt; values. If no &lt;see langword=&quot;xml:space&quot; /&gt; scope exists, this property defaults to &lt;see langword=&quot;XmlSpace.None&quot; /&gt;.">
        <see cref="T:System.Xml.XmlSpace" /> 値のいずれか。 <see langword="xml:space" /> スコープが存在しない場合、このプロパティは既定の <see langword="XmlSpace.None" /> に設定されます。</returns>
    </member>
    <member name="T:System.Xml.XmlTextWriter">
      <summary vsli:raw="Represents a writer that provides a fast, non-cached, forward-only way of generating streams or files containing XML data that conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations.  &#xA;  &#xA; Starting with the .NET Framework 2.0, we recommend that you use the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; class instead.">W3C 勧告『Extensible Markup Language (XML) 1.0』および勧告『Namespaces in XML』に準拠する XML データを格納するストリームまたはファイルを高速に、非キャッシュで、前方向に生成する方法を提供するライターを表します。  
.NET Framework 2.0 以降では、代わりに <see cref="T:System.Xml.XmlWriter" /> クラスを使用することをお勧めします。</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary vsli:raw="Creates an instance of the &lt;see langword=&quot;XmlTextWriter&quot; /&gt; class using the specified stream and encoding.">指定したストリームおよびエンコーディングを使用して、<see langword="XmlTextWriter" /> クラスのインスタンスを作成します。</summary>
      <param name="w" vsli:raw="The stream to which you want to write.">書き込み先のストリーム。</param>
      <param name="encoding" vsli:raw="The encoding to generate. If encoding is &lt;see langword=&quot;null&quot; /&gt; it writes out the stream as UTF-8 and omits the encoding attribute from the &lt;see langword=&quot;ProcessingInstruction&quot; /&gt;.">生成するエンコーディング。 エンコーディングが <see langword="null" /> の場合は、ストリームを UTF-8 として書き込み、<see langword="ProcessingInstruction" /> からエンコーディング属性を省略します。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The encoding is not supported or the stream cannot be written to.">エンコーディングがサポートされていないか、ストリームに書き込むことができません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="w" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)">
      <summary vsli:raw="Creates an instance of the &lt;see langword=&quot;XmlTextWriter&quot; /&gt; class using the specified &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;.">指定した <see cref="T:System.IO.TextWriter" /> を使用して <see langword="XmlTextWriter" /> クラスのインスタンスを作成します。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;TextWriter&quot; /&gt; to write to. It is assumed that the &lt;see langword=&quot;TextWriter&quot; /&gt; is already set to the correct encoding.">書き込み先の <see langword="TextWriter" />。 <see langword="TextWriter" /> が既に正しいエンコーディングに設定されていることを前提にしています。</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
      <summary vsli:raw="Creates an instance of the &lt;see cref=&quot;T:System.Xml.XmlTextWriter&quot; /&gt; class using the specified file.">指定したファイルを使用して <see cref="T:System.Xml.XmlTextWriter" /> クラスのインスタンスを作成します。</summary>
      <param name="filename" vsli:raw="The filename to write to. If the file exists, it truncates it and overwrites it with the new content.">書き込むファイル名。 ファイルが存在する場合は、ファイルを切り詰め、新しい内容で上書きします。</param>
      <param name="encoding" vsli:raw="The encoding to generate. If encoding is &lt;see langword=&quot;null&quot; /&gt; it writes the file out as UTF-8, and omits the encoding attribute from the &lt;see langword=&quot;ProcessingInstruction&quot; /&gt;.">生成するエンコーディング。 エンコーディングが <see langword="null" /> の場合は、ファイルを UTF-8 として書き込み、<see langword="ProcessingInstruction" /> からエンコーディング属性を省略します。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The encoding is not supported; the filename is empty, contains only white space, or contains one or more invalid characters.">エンコーディングがサポートされていません。ファイル名が空で、空白しか含んでいないか、無効な文字を 1 つ以上含んでいます。</exception>
      <exception cref="T:System.UnauthorizedAccessException" vsli:raw="Access is denied.">アクセスが拒否されました。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The filename is &lt;see langword=&quot;null&quot; /&gt;.">ファイル名が <see langword="null" /> です。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException" vsli:raw="The directory to write to is not found.">書き込むディレクトリが見つかりません。</exception>
      <exception cref="T:System.IO.IOException" vsli:raw="The filename includes an incorrect or invalid syntax for file name, directory name, or volume label syntax.">ファイル名には、ファイル名、ディレクトリ名、またはボリューム ラベルの不正な構文または無効な構文が含まれています。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.BaseStream">
      <summary vsli:raw="Gets the underlying stream object.">基になるストリーム オブジェクトを取得します。</summary>
      <returns vsli:raw="The stream to which the &lt;see langword=&quot;XmlTextWriter&quot; /&gt; is writing or &lt;see langword=&quot;null&quot; /&gt; if the &lt;see langword=&quot;XmlTextWriter&quot; /&gt; was constructed using a &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; that does not inherit from the &lt;see cref=&quot;T:System.IO.StreamWriter&quot; /&gt; class.">
        <see langword="XmlTextWriter" /> の書き込み先のストリーム。<see cref="T:System.IO.TextWriter" /> クラスから継承されない <see cref="T:System.IO.StreamWriter" /> を使用して <see langword="null" /> が構築された場合は <see langword="XmlTextWriter" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextWriter.Close">
      <summary vsli:raw="Closes this stream and the underlying stream.">このストリームおよび基になるストリームを閉じます。</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.Flush">
      <summary vsli:raw="Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.">バッファー内のデータをすべて基になるストリームにフラッシュし、基になるストリームもフラッシュします。</summary>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Formatting">
      <summary vsli:raw="Indicates how the output is formatted.">出力の書式設定方法を示します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.Formatting&quot; /&gt; values. The default is &lt;see langword=&quot;Formatting.None&quot; /&gt; (no special formatting).">
        <see cref="T:System.Xml.Formatting" /> 値のいずれか 1 つ。 既定値は <see langword="Formatting.None" /> (特定の書式設定なし) です。</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Indentation">
      <summary vsli:raw="Gets or sets how many IndentChars to write for each level in the hierarchy when &lt;see cref=&quot;P:System.Xml.XmlTextWriter.Formatting&quot; /&gt; is set to &lt;see langword=&quot;Formatting.Indented&quot; /&gt;.">
        <see cref="P:System.Xml.XmlTextWriter.Formatting" /> を <see langword="Formatting.Indented" /> に設定するときに、階層構造のレベルごとに書き込む IndentChar の数を取得または設定します。</summary>
      <returns vsli:raw="Number of &lt;see langword=&quot;IndentChars&quot; /&gt; for each level. The default is 2.">各レベルの <see langword="IndentChars" /> の数。 既定値は 2 です。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Setting this property to a negative value.">このプロパティを負の値に設定。</exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.IndentChar">
      <summary vsli:raw="Gets or sets which character to use for indenting when &lt;see cref=&quot;P:System.Xml.XmlTextWriter.Formatting&quot; /&gt; is set to &lt;see langword=&quot;Formatting.Indented&quot; /&gt;.">
        <see cref="P:System.Xml.XmlTextWriter.Formatting" /> を <see langword="Formatting.Indented" /> に設定するときに、インデントに使用する文字を取得または設定します。</summary>
      <returns vsli:raw="The character to use for indenting. The default is space.">インデントに使用する文字。 既定値は空白です。  
   
 <see langword="XmlTextWriter" /> を使用すると、このプロパティを任意の文字に設定できます。 有効な XML を確認するには、有効な空白文字、0x9、0x10、0x13、または 0x20 を指定する必要があります。</returns>
    </member>
    <member name="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
      <summary vsli:raw="Returns the closest prefix defined in the current namespace scope for the namespace URI.">名前空間 URI の現在の名前空間スコープで定義されたものに最も近いプリフィックスを返します。</summary>
      <param name="ns" vsli:raw="Namespace URI whose prefix you want to find.">検索する対象となるプリフィックスを持つ名前空間 URI。</param>
      <returns vsli:raw="The matching prefix. Or &lt;see langword=&quot;null&quot; /&gt; if no matching namespace URI is found in the current scope.">一致するプリフィックス。 一致する名前空間 URI が現在のスコープで見つからない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ns&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;.">
        <paramref name="ns" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Namespaces">
      <summary vsli:raw="Gets or sets a value indicating whether to do namespace support.">名前空間をサポートするかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to support namespaces; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  &#xA;  &#xA; The default is &lt;see langword=&quot;true&quot; /&gt;.">名前空間をサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  
既定値は、<see langword="true" /> です。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="You can only change this property when in the &lt;see langword=&quot;WriteState.Start&quot; /&gt; state.">このプロパティを変更できるのは、<see langword="WriteState.Start" /> 状態のときだけです。</exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.QuoteChar">
      <summary vsli:raw="Gets or sets which character to use to quote attribute values.">属性値を囲む引用符に使用する文字を取得または設定します。</summary>
      <returns vsli:raw="The character to use to quote attribute values. This must be a single quote (&amp;amp;#39;) or a double quote (&amp;amp;#34;). The default is a double quote.">属性値を囲む引用符に使用する文字。 これは単一引用符でなければ&amp;なりません (#39;)または二重引用符 (&amp;#34;)。 既定値は二重引用符です。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Setting this property to something other than either a single or double quote.">このプロパティを単一引用符または二重引用符以外の値に設定。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Encodes the specified binary bytes as base64 and writes out the resulting text.">指定したバイナリ バイトを base64 としてエンコードし、その結果生成されるテキストを書き込みます。</summary>
      <param name="buffer" vsli:raw="Byte array to encode.">エンコードするバイト配列。</param>
      <param name="index" vsli:raw="The position within the buffer indicating the start of the bytes to write.">書き込むバイトの開始を示すバッファー内の位置。</param>
      <param name="count" vsli:raw="The number of bytes to write.">書き込むバイト数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The buffer length minus &lt;paramref name=&quot;index&quot; /&gt; is less than &lt;paramref name=&quot;count&quot; /&gt;.">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is less than zero.">
        <paramref name="index" /> または <paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Xml.XmlTextWriter.WriteState&quot; /&gt; is &lt;see langword=&quot;Closed&quot; /&gt;.">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> が <see langword="Closed" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Encodes the specified binary bytes as binhex and writes out the resulting text.">指定したバイナリ バイトを binhex としてエンコードし、その結果生成されるテキストを書き込みます。</summary>
      <param name="buffer" vsli:raw="Byte array to encode.">エンコードするバイト配列。</param>
      <param name="index" vsli:raw="The position in the buffer indicating the start of the bytes to write.">書き込むバイトの開始を示すバッファー内の位置。</param>
      <param name="count" vsli:raw="The number of bytes to write.">書き込むバイト数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The buffer length minus &lt;paramref name=&quot;index&quot; /&gt; is less than &lt;paramref name=&quot;count&quot; /&gt;.">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is less than zero.">
        <paramref name="index" /> または <paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Xml.XmlTextWriter.WriteState&quot; /&gt; is Closed.">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> が閉じています。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
      <summary vsli:raw="Writes out a &amp;lt;![CDATA[...]]&amp;gt; block containing the specified text.">指定したテキストを格納する &lt;![CDATA[...]]&gt; ブロックを書き込みます。</summary>
      <param name="text" vsli:raw="Text to place inside the CDATA block.">CDATA ブロック内に配置するテキスト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The text would result in a non-well formed XML document.">テキストは、非整形式の XML ドキュメントになります。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Xml.XmlTextWriter.WriteState&quot; /&gt; is &lt;see langword=&quot;Closed&quot; /&gt;.">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> が <see langword="Closed" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
      <summary vsli:raw="Forces the generation of a character entity for the specified Unicode character value.">指定した Unicode 文字値の文字エンティティを強制的に生成します。</summary>
      <param name="ch" vsli:raw="Unicode character for which to generate a character entity.">文字エンティティを生成する対象の Unicode 文字。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The character is in the surrogate pair character range, &lt;see langword=&quot;0xd800&quot; /&gt; - &lt;see langword=&quot;0xdfff&quot; /&gt;; or the text would result in a non-well formed XML document.">文字がサロゲート ペアの文字範囲、つまり <see langword="0xd800" /> - <see langword="0xdfff" />内にあります。これ以外の場合、テキストは非整形式の XML ドキュメントになります。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Xml.XmlTextWriter.WriteState&quot; /&gt; is &lt;see langword=&quot;Closed&quot; /&gt;.">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> が <see langword="Closed" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes text one buffer at a time.">一度に 1 つのバッファーにテキストを書き込みます。</summary>
      <param name="buffer" vsli:raw="Character array containing the text to write.">書き込むテキストを格納している文字配列。</param>
      <param name="index" vsli:raw="The position in the buffer indicating the start of the text to write.">書き込むテキストの開始を示すバッファー内の位置。</param>
      <param name="count" vsli:raw="The number of characters to write.">書き込む文字数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The buffer length minus &lt;paramref name=&quot;index&quot; /&gt; is less than &lt;paramref name=&quot;count&quot; /&gt;; the call results in surrogate pair characters being split or an invalid surrogate pair being written.">
        <paramref name="index" /> または <paramref name="count" /> が 0 未満です。  

または - 
バッファー長から <paramref name="index" /> を差し引いた値が <paramref name="count" /> 未満です。この呼び出しにより、サロゲート ペア文字が分割されるか、無効なサロゲート ペアが書き込まれます。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Xml.XmlTextWriter.WriteState&quot; /&gt; is Closed.">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> が閉じています。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
      <summary vsli:raw="Writes out a comment &amp;lt;!--...--&amp;gt; containing the specified text.">指定したテキストを格納するコメント &lt;!--...--&gt; を書き込みます。</summary>
      <param name="text" vsli:raw="Text to place inside the comment.">コメント内に配置するテキスト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The text would result in a non-well formed XML document.">テキストは、非整形式の XML ドキュメントになります。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Xml.XmlTextWriter.WriteState&quot; /&gt; is &lt;see langword=&quot;Closed&quot; /&gt;.">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> が <see langword="Closed" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Writes the DOCTYPE declaration with the specified name and optional attributes.">名前とオプション属性を指定して、DOCTYPE 宣言を書き込みます。</summary>
      <param name="name" vsli:raw="The name of the DOCTYPE. This must be non-empty.">DOCTYPE の名前。 これを空にすることはできません。</param>
      <param name="pubid" vsli:raw="If non-null it also writes PUBLIC &quot;pubid&quot; &quot;sysid&quot; where &lt;paramref name=&quot;pubid&quot; /&gt; and &lt;paramref name=&quot;sysid&quot; /&gt; are replaced with the value of the given arguments.">null でない場合は、PUBLIC "pubid" "sysid" も書き込みます。<paramref name="pubid" /> と <paramref name="sysid" /> は、指定した引数の値に置き換えられます。</param>
      <param name="sysid" vsli:raw="If &lt;paramref name=&quot;pubid&quot; /&gt; is null and &lt;paramref name=&quot;sysid&quot; /&gt; is non-null it writes SYSTEM &quot;sysid&quot; where &lt;paramref name=&quot;sysid&quot; /&gt; is replaced with the value of this argument.">
        <paramref name="pubid" /> が null で <paramref name="sysid" /> が非 null の場合は、<paramref name="sysid" /> がこの引数の値に置き換えられる SYSTEM "sysid" を書き込みます。</param>
      <param name="subset" vsli:raw="If non-null it writes [subset] where subset is replaced with the value of this argument.">null でない場合は、[subset] を書き込みます。subset は、この引数の値に置き換えられます。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This method was called outside the prolog (after the root element).">このメソッドが、プロローグの外 (ルート要素の後) で呼び出されました。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;  &#xA;  &#xA; -or-  &#xA;  &#xA; the value for &lt;paramref name=&quot;name&quot; /&gt; would result in invalid XML.">
        <paramref name="name" /> が <see langword="null" /> または <see langword="String.Empty" /> です。  

または - 
<paramref name="name" /> の値が、無効な XML になることがあります。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndAttribute">
      <summary vsli:raw="Closes the previous &lt;see cref=&quot;M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)&quot; /&gt; call.">前の <see cref="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" /> 呼び出しを閉じます。</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndDocument">
      <summary vsli:raw="Closes any open elements or attributes and puts the writer back in the Start state.">開いている要素または属性を閉じ、ライターを Start 状態に戻します。</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="The XML document is invalid.">XML ドキュメントが無効です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndElement">
      <summary vsli:raw="Closes one element and pops the corresponding namespace scope.">1 つの要素を閉じ、対応する名前空間スコープをポップします。</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
      <summary vsli:raw="Writes out an entity reference as &lt;see langword=&quot;&amp;amp;name;&quot; /&gt;.">
        <see langword="&amp;name;" /> のようにエンティティ参照を書き込みます。</summary>
      <param name="name" vsli:raw="Name of the entity reference.">エンティティ参照の名前。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The text would result in a non-well formed XML document or &lt;paramref name=&quot;name&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;.">テキストが非整形式の XML ドキュメントになるか、<paramref name="name" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteFullEndElement">
      <summary vsli:raw="Closes one element and pops the corresponding namespace scope.">1 つの要素を閉じ、対応する名前空間スコープをポップします。</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteName(System.String)">
      <summary vsli:raw="Writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation.">指定した名前が W3C 勧告『XML 1.0』に準拠した有効な名前であることを確認して、それを書き込みます。</summary>
      <param name="name" vsli:raw="Name to write.">書き込む名前。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not a valid XML name; or &lt;paramref name=&quot;name&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;.">
        <paramref name="name" /> が有効な XML 名ではありません。または、<paramref name="name" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)">
      <summary vsli:raw="Writes out the specified name, ensuring it is a valid &lt;see langword=&quot;NmToken&quot; /&gt; according to the W3C XML 1.0 recommendation.">指定した名前が W3C 勧告『XML 1.0』に準拠した有効な <see langword="NmToken" /> であることを確認して、それを書き込みます。</summary>
      <param name="name" vsli:raw="Name to write.">書き込む名前。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not a valid &lt;see langword=&quot;NmToken&quot; /&gt;; or &lt;paramref name=&quot;name&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;.">
        <paramref name="name" /> が有効な <see langword="NmToken" /> ではありません。または、<paramref name="name" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary vsli:raw="Writes out a processing instruction with a space between the name and text as follows: &amp;lt;?name text?&amp;gt;.">名前とテキストの間にスペースがある処理命令を、次のように書き込みます: &lt;?name text?&gt;。</summary>
      <param name="name" vsli:raw="Name of the processing instruction.">処理命令の名前。</param>
      <param name="text" vsli:raw="Text to include in the processing instruction.">処理命令に含めるテキスト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The text would result in a non-well formed XML document.  &#xA;  &#xA; &lt;paramref name=&quot;name&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;.  &#xA;  &#xA; This method is being used to create an XML declaration after &lt;see cref=&quot;M:System.Xml.XmlTextWriter.WriteStartDocument&quot; /&gt; has already been called.">テキストは、非整形式の XML ドキュメントになります。  
 <paramref name="name" /> が <see langword="null" /> または <see langword="String.Empty" /> です。  
このメソッドは、<see cref="M:System.Xml.XmlTextWriter.WriteStartDocument" /> が呼び出された後に XML 宣言を作成するために使用されています。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
      <summary vsli:raw="Writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.">名前空間の修飾名を書き込みます。 このメソッドは、指定した名前空間のスコープ内にあるプレフィックスを検索します。</summary>
      <param name="localName" vsli:raw="The local name to write.">書き込むローカル名。</param>
      <param name="ns" vsli:raw="The namespace URI to associate with the name.">名前に関連付ける名前空間 URI。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;localName&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;.  &#xA;  &#xA; &lt;paramref name=&quot;localName&quot; /&gt; is not a valid name according to the W3C Namespaces spec.">
        <paramref name="localName" /> が <see langword="null" /> または <see langword="String.Empty" /> です。  
 <paramref name="localName" /> が、W3C の名前空間の仕様に準拠した有効な名前ではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes raw markup manually from a character buffer.">文字バッファーから手動で生のマークアップを書き込みます。</summary>
      <param name="buffer" vsli:raw="Character array containing the text to write.">書き込むテキストを格納している文字配列。</param>
      <param name="index" vsli:raw="The position within the buffer indicating the start of the text to write.">書き込むテキストの開始を示すバッファー内の位置。</param>
      <param name="count" vsli:raw="The number of characters to write.">書き込む文字数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The buffer length minus &lt;paramref name=&quot;index&quot; /&gt; is less than &lt;paramref name=&quot;count&quot; /&gt;.">
        <paramref name="index" /> または <paramref name="count" /> が 0 未満です。  
または 
バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
      <summary vsli:raw="Writes raw markup manually from a string.">文字列から手動で生のマークアップを書き込みます。</summary>
      <param name="data" vsli:raw="String containing the text to write.">書き込むテキストを格納している文字列。</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary vsli:raw="Writes the start of an attribute.">属性の開始を書き込みます。</summary>
      <param name="prefix" vsli:raw="&lt;see langword=&quot;Namespace&quot; /&gt; prefix of the attribute.">属性の <see langword="Namespace" /> プリフィックス。</param>
      <param name="localName" vsli:raw="&lt;see langword=&quot;LocalName&quot; /&gt; of the attribute.">属性の <see langword="LocalName" />。</param>
      <param name="ns" vsli:raw="&lt;see langword=&quot;NamespaceURI&quot; /&gt; of the attribute.">属性の <see langword="NamespaceURI" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;localName&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;.">
        <paramref name="localName" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartDocument">
      <summary vsli:raw="Writes the XML declaration with the version &quot;1.0&quot;.">バージョン "1.0" で XML 宣言を書き込みます。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This is not the first write method called after the constructor.">これは、コンストラクターの後に呼び出された最初の書き込みメソッドではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
      <summary vsli:raw="Writes the XML declaration with the version &quot;1.0&quot; and the standalone attribute.">バージョン "1.0" とスタントアロン属性を使用して XML 宣言を書き込みます。</summary>
      <param name="standalone" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, it writes &quot;standalone=yes&quot;; if &lt;see langword=&quot;false&quot; /&gt;, it writes &quot;standalone=no&quot;.">
        <see langword="true" /> の場合は "standalone=yes"、<see langword="false" /> の場合は "standalone=no" を書き込みます。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This is not the first write method called after the constructor.">これは、コンストラクターの後に呼び出された最初の書き込みメソッドではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary vsli:raw="Writes the specified start tag and associates it with the given namespace and prefix.">指定した開始タグを書き込み、指定した名前空間とプレフィックスに関連付けます。</summary>
      <param name="prefix" vsli:raw="The namespace prefix of the element.">要素の名前空間プリフィックス。</param>
      <param name="localName" vsli:raw="The local name of the element.">要素のローカル名。</param>
      <param name="ns" vsli:raw="The namespace URI to associate with the element. If this namespace is already in scope and has an associated prefix then the writer automatically writes that prefix also.">要素に関連付ける名前空間 URI。 この名前空間が既にスコープ内にあり、関連付けられたプリフィックスを持つ場合、ライターは、そのプリフィックスも自動的に書き込みます。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The writer is closed.">ライターが閉じています。</exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.WriteState">
      <summary vsli:raw="Gets the state of the writer.">ライターの状態を取得します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.WriteState&quot; /&gt; values.">
        <see cref="T:System.Xml.WriteState" /> 値のいずれか 1 つ。</returns>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteString(System.String)">
      <summary vsli:raw="Writes the given text content.">指定したテキストの内容を書き込みます。</summary>
      <param name="text" vsli:raw="Text to write.">書き込むテキスト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The text string contains an invalid surrogate pair.">テキスト文字列に、無効なサロゲート ペアが含まれています。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary vsli:raw="Generates and writes the surrogate character entity for the surrogate character pair.">サロゲート文字ペアのサロゲート文字エンティティを生成し、書き込みます。</summary>
      <param name="lowChar" vsli:raw="The low surrogate. This must be a value between &lt;see langword=&quot;0xDC00&quot; /&gt; and &lt;see langword=&quot;0xDFFF&quot; /&gt;.">下位サロゲート。 この値は、<see langword="0xDC00" /> から <see langword="0xDFFF" /> の範囲内にある必要があります。</param>
      <param name="highChar" vsli:raw="The high surrogate. This must be a value between &lt;see langword=&quot;0xD800&quot; /&gt; and &lt;see langword=&quot;0xDBFF&quot; /&gt;.">上位サロゲート。 この値は、<see langword="0xD800" /> から <see langword="0xDBFF" /> の範囲内にある必要があります。</param>
      <exception cref="T:System.Exception" vsli:raw="An invalid surrogate character pair was passed.">無効なサロゲート文字ペアが渡されました。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
      <summary vsli:raw="Writes out the given white space.">指定した空白を書き込みます。</summary>
      <param name="ws" vsli:raw="The string of white space characters.">空白文字の文字列。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The string contains non-white space characters.">文字列に空白以外の文字が含まれています。</exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.XmlLang">
      <summary vsli:raw="Gets the current &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">現在の <see langword="xml:lang" /> スコープを取得します。</summary>
      <returns vsli:raw="The current &lt;see langword=&quot;xml:lang&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; if there is no &lt;see langword=&quot;xml:lang&quot; /&gt; in the current scope.">現在の <see langword="xml:lang" />。または現在のスコープ内に <see langword="null" /> がない場合は <see langword="xml:lang" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.XmlSpace">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Xml.XmlSpace&quot; /&gt; representing the current &lt;see langword=&quot;xml:space&quot; /&gt; scope.">現在の <see langword="xml:space" /> スコープを表す <see cref="T:System.Xml.XmlSpace" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see langword=&quot;XmlSpace&quot; /&gt; representing the current &lt;see langword=&quot;xml:space&quot; /&gt; scope.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Meaning&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; None&lt;/term&gt;&lt;description&gt; This is the default if no &lt;see langword=&quot;xml:space&quot; /&gt; scope exists.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Default&lt;/term&gt;&lt;description&gt; The current scope is &lt;see langword=&quot;xml:space&quot; /&gt;=&quot;default&quot;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Preserve&lt;/term&gt;&lt;description&gt; The current scope is &lt;see langword=&quot;xml:space&quot; /&gt;=&quot;preserve&quot;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">現在の <see langword="XmlSpace" /> スコープを表す <see langword="xml:space" />。  
  [値] 
  説明 
  None 
  <see langword="xml:space" /> スコープが存在しない場合は、これが既定値になります。  

  既定値 
  現在のスコープは、<see langword="xml:space" />="default" です。  

  Preserve 
  現在のスコープは、<see langword="xml:space" />="preserve" です。</returns>
    </member>
    <member name="T:System.Xml.XmlTokenizedType">
      <summary vsli:raw="Represents the XML type for the string. This allows the string to be read as a particular XML type, for example a CDATA section type.">文字列の XML 型を表します。 これにより、文字列を CDATA セクション型などの特定の XML 型として読み取ることができます。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.CDATA">
      <summary vsli:raw="CDATA type.">CDATA 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENTITIES">
      <summary vsli:raw="ENTITIES type.">ENTITIES 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENTITY">
      <summary vsli:raw="ENTITY type.">ENTITY 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENUMERATION">
      <summary vsli:raw="ENUMERATION type.">ENUMERATION 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ID">
      <summary vsli:raw="ID type.">ID 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.IDREF">
      <summary vsli:raw="IDREF type.">IDREF 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.IDREFS">
      <summary vsli:raw="IDREFS type.">IDREFS 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NCName">
      <summary vsli:raw="NCName type.">NCName 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NMTOKEN">
      <summary vsli:raw="NMTOKEN type.">NMTOKEN 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NMTOKENS">
      <summary vsli:raw="NMTOKENS type.">NMTOKENS 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.None">
      <summary vsli:raw="No type.">型なし。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NOTATION">
      <summary vsli:raw="NOTATION type.">NOTATION 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.QName">
      <summary vsli:raw="QName type.">QName 型。</summary>
    </member>
    <member name="T:System.Xml.XmlUrlResolver">
      <summary vsli:raw="Resolves external XML resources named by a Uniform Resource Identifier (URI).">URI (Uniform Resource Identifier) で名前が指定された外部 XML リソースを解決します。</summary>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlUrlResolver&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlUrlResolver" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.XmlUrlResolver.CachePolicy">
      <summary vsli:raw="Gets or sets the cache policy for the underlying &lt;see cref=&quot;T:System.Net.WebRequest&quot; /&gt; object.">基になる <see cref="T:System.Net.WebRequest" /> オブジェクトのキャッシュ ポリシーを取得または設定します。</summary>
      <returns vsli:raw="The cache policy for the underlying web request.">基になる Web 要求のキャッシュ ポリシー。</returns>
    </member>
    <member name="P:System.Xml.XmlUrlResolver.Credentials">
      <summary vsli:raw="Sets credentials used to authenticate web requests.">Web 要求を認証するために使用する資格情報を設定します。</summary>
      <returns vsli:raw="The credentials to be used to authenticate web requests. If this property is not set, the value defaults to &lt;see langword=&quot;null&quot; /&gt;; that is, the &lt;see langword=&quot;XmlUrlResolver&quot; /&gt; has no user credentials.">Web 要求を認証するために使用する資格情報。 このプロパティが設定されていない場合、既定値は <see langword="null" /> です。つまり、<see langword="XmlUrlResolver" /> にはユーザーの資格情報がありません。</returns>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary vsli:raw="Maps a URI to an object that contains the actual resource.">URI を実際のリソースを格納しているオブジェクトにマップします。</summary>
      <param name="absoluteUri" vsli:raw="The URI returned from &lt;see cref=&quot;M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)&quot; /&gt;.">
        <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> から返された URI。</param>
      <param name="role" vsli:raw="Currently not used.">現在は使用されていません。</param>
      <param name="ofObjectToReturn" vsli:raw="The type of object to return. The current implementation only returns &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; objects.">返すオブジェクトの型。 現在の実装では、<see cref="T:System.IO.Stream" /> オブジェクトだけを返します。</param>
      <returns vsli:raw="A stream object or &lt;see langword=&quot;null&quot; /&gt; if a type other than stream is specified.">ストリーム オブジェクト。ストリーム以外の型が指定された場合は <see langword="null" />。</returns>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;paramref name=&quot;ofObjectToReturn&quot; /&gt; is neither &lt;see langword=&quot;null&quot; /&gt; nor a &lt;see langword=&quot;Stream&quot; /&gt; type.">
        <paramref name="ofObjectToReturn" /> が <see langword="null" /> でも <see langword="Stream" /> 型でもありません。</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="The specified URI is not an absolute URI.">指定した URI が絶対 URI ではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;absoluteUri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="absoluteUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Exception" vsli:raw="There is a runtime error (for example, an interrupted server connection).">実行時エラー (サーバー接続の中断など) があります。</exception>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.GetEntityAsync(System.Uri,System.String,System.Type)">
      <summary vsli:raw="Asynchronously maps a URI to an object that contains the actual resource.">URI を実際のリソースを格納しているオブジェクトに非同期にマップします。</summary>
      <param name="absoluteUri" vsli:raw="The URI returned from &lt;see cref=&quot;M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)&quot; /&gt;.">
        <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> から返された URI。</param>
      <param name="role" vsli:raw="Currently not used.">現在は使用されていません。</param>
      <param name="ofObjectToReturn" vsli:raw="The type of object to return. The current implementation only returns &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; objects.">返すオブジェクトの型。 現在の実装では、<see cref="T:System.IO.Stream" /> オブジェクトだけを返します。</param>
      <returns vsli:raw="A stream object or &lt;see langword=&quot;null&quot; /&gt; if a type other than stream is specified.">ストリーム オブジェクト。ストリーム以外の型が指定された場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlUrlResolver.Proxy">
      <summary vsli:raw="Gets or sets the network proxy for the underlying &lt;see cref=&quot;T:System.Net.WebRequest&quot; /&gt; object.">基になる <see cref="T:System.Net.WebRequest" /> オブジェクトのネットワーク プロキシを取得または設定します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Net.IWebProxy&quot; /&gt; to use to access the Internet resource.">インターネット リソースにアクセスするために使用する <see cref="T:System.Net.IWebProxy" />。</returns>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)">
      <summary vsli:raw="Resolves the absolute URI from the base and relative URIs.">ベース URI および 相対 URI を解決して絶対 URI を返します。</summary>
      <param name="baseUri" vsli:raw="The base URI used to resolve the relative URI.">相対 URI の解決に使用するベース URI。</param>
      <param name="relativeUri" vsli:raw="The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the &lt;paramref name=&quot;baseUri&quot; /&gt; value. If relative, it combines with the &lt;paramref name=&quot;baseUri&quot; /&gt; to make an absolute URI.">解決対象の URI。 URI は絶対 URI でも相対 URI でもかまいません。 絶対 URI の場合は、この値が <paramref name="baseUri" /> 値を効率的に置き換えます。 相対 URI の場合、この値は <paramref name="baseUri" /> と結合して絶対 URI を作成します。</param>
      <returns vsli:raw="The absolute URI, or &lt;see langword=&quot;null&quot; /&gt; if the relative URI cannot be resolved.">絶対 URI。相対 URI を解決できない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;baseUri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;paramref name=&quot;relativeUri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="baseUri" /> が <see langword="null" /> または <paramref name="relativeUri" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="T:System.Xml.XmlValidatingReader">
      <summary vsli:raw="Represents a reader that provides document type definition (DTD), XML-Data Reduced (XDR) schema, and XML Schema definition language (XSD) validation.  &#xA;  &#xA; This class is obsolete. Starting with the .NET Framework 2.0, we recommend that you use the &lt;see cref=&quot;T:System.Xml.XmlReaderSettings&quot; /&gt; class and the &lt;see cref=&quot;Overload:System.Xml.XmlReader.Create&quot; /&gt; method to create a validating XML reader.">ドキュメント型定義 (DTD: Document Type Definition)、XML-Data Reduced (XDR) スキーマ、および XML スキーマ定義言語 (XSD) 検証を提供するリーダーを表します。  
このクラスは今後は使用しません。 .NET Framework 2.0 以降は、検証 XML リーダーを作成するのに <see cref="T:System.Xml.XmlReaderSettings" /> クラスおよび <see cref="Overload:System.Xml.XmlReader.Create" /> メソッドを使用することをお勧めします。</summary>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlValidatingReader&quot; /&gt; class with the specified values.">値を指定して、<see langword="XmlValidatingReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="xmlFragment" vsli:raw="The stream containing the XML fragment to parse.">解析する XML フラグメントを含んでいるストリーム。</param>
      <param name="fragType" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNodeType&quot; /&gt; of the XML fragment. This determines what the fragment can contain (see table below).">XML フラグメントの <see cref="T:System.Xml.XmlNodeType" />。 これは、フラグメントに何を含めることができるかを判断します (次の表を参照)。</param>
      <param name="context" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlParserContext&quot; /&gt; in which the XML fragment is to be parsed. This includes the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; to use, encoding, namespace scope, current &lt;see langword=&quot;xml:lang&quot; /&gt;, and &lt;see langword=&quot;xml:space&quot; /&gt; scope.">XML フラグメントの解析先の <see cref="T:System.Xml.XmlParserContext" />。 これには、使用する <see cref="T:System.Xml.XmlNameTable" />、エンコーディング、名前空間スコープ、現在の <see langword="xml:lang" />、および <see langword="xml:space" /> スコープが含まれます。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;paramref name=&quot;fragType&quot; /&gt; is not one of the node types listed in the table below.">
        <paramref name="fragType" /> が、次の表に示すノード型の 1 つではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlValidatingReader&quot; /&gt; class with the specified values.">値を指定して、<see langword="XmlValidatingReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="xmlFragment" vsli:raw="The string containing the XML fragment to parse.">解析する XML フラグメントを含んでいる文字列。</param>
      <param name="fragType" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNodeType&quot; /&gt; of the XML fragment. This also determines what the fragment string can contain (see table below).">XML フラグメントの <see cref="T:System.Xml.XmlNodeType" />。 これは、フラグメント文字列に何を含めることができるかも判断します (次の表を参照)。</param>
      <param name="context" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlParserContext&quot; /&gt; in which the XML fragment is to be parsed. This includes the &lt;see cref=&quot;T:System.Xml.NameTable&quot; /&gt; to use, encoding, namespace scope, current xml:lang, and xml:space scope.">XML フラグメントの解析先の <see cref="T:System.Xml.XmlParserContext" />。 これには、使用する <see cref="T:System.Xml.NameTable" />、エンコーディング、名前空間スコープ、現在の xml:lang、および xml:space スコープが含まれます。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;paramref name=&quot;fragType&quot; /&gt; is not one of the node types listed in the table below.">
        <paramref name="fragType" /> が、次の表に示すノード型の 1 つではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.Xml.XmlReader)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlValidatingReader&quot; /&gt; class that validates the content returned from the given &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">指定した <see cref="T:System.Xml.XmlReader" /> から返される内容を検証する <see langword="XmlValidatingReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="reader" vsli:raw="The &lt;see langword=&quot;XmlReader&quot; /&gt; to read from while validating. The current implementation supports only &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt;.">検証中に読み取る対象の <see langword="XmlReader" />。 現在の実装では、<see cref="T:System.Xml.XmlTextReader" /> のみサポートします。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The reader specified is not an &lt;see langword=&quot;XmlTextReader&quot; /&gt;.">指定したリーダーが <see langword="XmlTextReader" /> ではありません。</exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.AttributeCount">
      <summary vsli:raw="Gets the number of attributes on the current node.">現在のノードにある属性の数を取得します。</summary>
      <returns vsli:raw="The number of attributes on the current node. This number includes default attributes.">現在のノードにある属性の数。 この属性数には、既定の属性も含まれます。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.BaseURI">
      <summary vsli:raw="Gets the base URI of the current node.">現在のノードのベース URI を取得します。</summary>
      <returns vsli:raw="The base URI of the current node.">現在のノードのベース URI。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.CanReadBinaryContent">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Xml.XmlValidatingReader&quot; /&gt; implements the binary content read methods.">
        <see cref="T:System.Xml.XmlValidatingReader" /> がバイナリ コンテンツ用の読み取りメソッドを実装するかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the binary content read methods are implemented; otherwise &lt;see langword=&quot;false&quot; /&gt;. The &lt;see cref=&quot;T:System.Xml.XmlValidatingReader&quot; /&gt; class returns &lt;see langword=&quot;true&quot; /&gt;.">バイナリ コンテンツ用の読み取りメソッドを実装する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see cref="T:System.Xml.XmlValidatingReader" /> クラスは <see langword="true" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.CanResolveEntity">
      <summary vsli:raw="Gets a value indicating whether this reader can parse and resolve entities.">このリーダーがエンティティを解析および解決できるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader can parse and resolve entities; otherwise, &lt;see langword=&quot;false&quot; /&gt;. &lt;see langword=&quot;XmlValidatingReader&quot; /&gt; always returns &lt;see langword=&quot;true&quot; /&gt;.">リーダーがエンティティを解析および解決できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="XmlValidatingReader" /> は常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.Close">
      <summary vsli:raw="Changes the &lt;see cref=&quot;P:System.Xml.XmlReader.ReadState&quot; /&gt; to Closed.">
        <see cref="P:System.Xml.XmlReader.ReadState" /> を Closed に変更します。</summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Depth">
      <summary vsli:raw="Gets the depth of the current node in the XML document.">XML ドキュメント内の現在のノードの深さを取得します。</summary>
      <returns vsli:raw="The depth of the current node in the XML document.">XML ドキュメント内の現在のノードの深さ。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Encoding">
      <summary vsli:raw="Gets the encoding attribute for the document.">ドキュメントのエンコーディング属性を取得します。</summary>
      <returns vsli:raw="The encoding value. If no encoding attribute exists, and there is not byte-order mark, this defaults to UTF-8.">エンコーディング値。 エンコーディング属性が存在せず、バイト順のマークもない場合は、既定として UTF-8 が使用されます。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.EntityHandling">
      <summary vsli:raw="Gets or sets a value that specifies how the reader handles entities.">リーダーによるエンティティの処理方法を指定する値を取得または設定します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.EntityHandling&quot; /&gt; values. If no &lt;see langword=&quot;EntityHandling&quot; /&gt; is specified, it defaults to EntityHandling.ExpandEntities.">
        <see cref="T:System.Xml.EntityHandling" /> 値のいずれか 1 つ。 <see langword="EntityHandling" /> が指定されていない場合は、既定で EntityHandling.ExpandEntities が使用されます。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="Invalid value was specified.">無効な値が指定されました。</exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.EOF">
      <summary vsli:raw="Gets a value indicating whether the reader is positioned at the end of the stream.">リーダーがストリームの末尾に配置されているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is positioned at the end of the stream; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">ストリームの末尾にリーダーが配置されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.Int32)">
      <summary vsli:raw="Gets the value of the attribute with the specified index.">指定したインデックスの属性の値を取得します。</summary>
      <param name="i" vsli:raw="The index of the attribute. The index is zero-based. (The first attribute has index 0.)">属性のインデックス。 インデックスの値は、0 から始まります。 最初の属性のインデックスは 0 です。</param>
      <returns vsli:raw="The value of the specified attribute.">指定した属性の値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;i&quot; /&gt; parameter is less than 0 or greater than or equal to &lt;see cref=&quot;P:System.Xml.XmlValidatingReader.AttributeCount&quot; /&gt;.">
        <paramref name="i" /> パラメーターが 0 未満か、<see cref="P:System.Xml.XmlValidatingReader.AttributeCount" /> 以上です。</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.String)">
      <summary vsli:raw="Gets the value of the attribute with the specified name.">指定した名前の属性の値を取得します。</summary>
      <param name="name" vsli:raw="The qualified name of the attribute.">属性の限定名。</param>
      <returns vsli:raw="The value of the specified attribute. If the attribute is not found, &lt;see langword=&quot;null&quot; /&gt; is returned.">指定した属性の値。 指定した属性が見つからない場合は <see langword="null" /> が返されます。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.String,System.String)">
      <summary vsli:raw="Gets the value of the attribute with the specified local name and namespace Uniform Resource Identifier (URI).">指定したローカル名および名前空間 URI (Uniform Resource Identifier) の属性値を取得します。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">属性のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute.">属性の名前空間 URI。</param>
      <returns vsli:raw="The value of the specified attribute. If the attribute is not found, &lt;see langword=&quot;null&quot; /&gt; is returned. This method does not move the reader.">指定した属性の値。 指定した属性が見つからない場合は <see langword="null" /> が返されます。 このメソッドは、リーダーを移動しません。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.HasLineInfo">
      <summary vsli:raw="Gets a value indicating whether the class can return line information.">クラスが行情報を返すことができるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the class can return line information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">クラスが行情報を返せる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.HasValue">
      <summary vsli:raw="Gets a value indicating whether the current node can have a &lt;see cref=&quot;P:System.Xml.XmlValidatingReader.Value&quot; /&gt; other than String.Empty.">現在のノードが String.Empty 以外の <see cref="P:System.Xml.XmlValidatingReader.Value" /> を保持できるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node on which the reader is currently positioned can have a &lt;see langword=&quot;Value&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">リーダーが現在配置されているノードが <see langword="Value" /> を持つことができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.IsDefault">
      <summary vsli:raw="Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the document type definition (DTD) or schema.">現在のノードがドキュメント型定義 (DTD) またはスキーマで定義された既定値から生成された属性かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node is an attribute whose value was generated from the default value defined in the DTD or schema; &lt;see langword=&quot;false&quot; /&gt; if the attribute value was explicitly set.">現在のノードが、DTD またはスキーマで定義された既定値から生成された値を持つ属性である場合は <see langword="true" />。属性値が明示的に設定された場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.IsEmptyElement">
      <summary vsli:raw="Gets a value indicating whether the current node is an empty element (for example, &lt;c&gt;&amp;lt;MyElement/&amp;gt;&lt;/c&gt;).">現在のノードが空の要素 (<c>&lt;MyElement/&gt;</c> など) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node is an element (&lt;see cref=&quot;P:System.Xml.XmlValidatingReader.NodeType&quot; /&gt; equals &lt;see langword=&quot;XmlNodeType.Element&quot; /&gt;) that ends with &lt;c&gt;/&amp;gt;&lt;/c&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />現在<see cref="P:System.Xml.XmlValidatingReader.NodeType" />のノードがで<see langword="XmlNodeType.Element" /><c>/終わる要素(equals) である場合は。それ以外の場合は。 &gt;</c><see langword="false" /></returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LineNumber">
      <summary vsli:raw="Gets the current line number.">現在の行番号を取得します。</summary>
      <returns vsli:raw="The current line number. The starting value for this property is 1.">現在の行番号。 このプロパティの開始値は 1 です。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LinePosition">
      <summary vsli:raw="Gets the current line position.">現在の行の位置を取得します。</summary>
      <returns vsli:raw="The current line position. The starting value for this property is 1.">現在の行の位置。 このプロパティの開始値は 1 です。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LocalName">
      <summary vsli:raw="Gets the local name of the current node.">現在のノードのローカル名を取得します。</summary>
      <returns vsli:raw="The name of the current node with the prefix removed. For example, &lt;see langword=&quot;LocalName&quot; /&gt; is &lt;see langword=&quot;book&quot; /&gt; for the element &lt;c&gt;&amp;lt;bk:book&amp;gt;&lt;/c&gt;.  &#xA;  &#xA; For node types that do not have a name (like &lt;see langword=&quot;Text&quot; /&gt;, &lt;see langword=&quot;Comment&quot; /&gt;, and so on), this property returns String.Empty.">プリフィックスを削除した現在のノードの名前。 たとえば、 <see langword="LocalName" />は<see langword="book" />要素<c>&gt;bk: book 用です。 &lt;</c>  
名前を持たないノード型 (<see langword="Text" />、<see langword="Comment" />、など) の場合は、このプロパティは String.Empty を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.LookupNamespace(System.String)">
      <summary vsli:raw="Resolves a namespace prefix in the current element's scope.">現在の要素のスコープ内の名前空間プリフィックスを解決します。</summary>
      <param name="prefix" vsli:raw="The prefix whose namespace Uniform Resource Identifier (URI) you want to resolve. To match the default namespace, pass an empty string.">解決する対象となる名前空間 URI (Uniform Resource Identifier) を持つプレフィックス。 既定の名前空間と一致させるには、空の文字列を渡します。</param>
      <returns vsli:raw="The namespace URI to which the prefix maps or &lt;see langword=&quot;null&quot; /&gt; if no matching prefix is found.">プレフィックスの割り当て先の名前空間 URI。条件に合うプレフィックスが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.Int32)">
      <summary vsli:raw="Moves to the attribute with the specified index.">指定したインデックスを持つ属性に移動します。</summary>
      <param name="i" vsli:raw="The index of the attribute.">属性のインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;i&quot; /&gt; parameter is less than 0 or greater than or equal to &lt;see cref=&quot;P:System.Xml.XmlReader.AttributeCount&quot; /&gt;.">
        <paramref name="i" /> パラメーターが 0 未満か、<see cref="P:System.Xml.XmlReader.AttributeCount" /> 以上です。</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String)">
      <summary vsli:raw="Moves to the attribute with the specified name.">指定した名前を持つ属性へ移動します。</summary>
      <param name="name" vsli:raw="The qualified name of the attribute.">属性の限定名。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the position of the reader does not change.">属性が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、リーダーの位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String,System.String)">
      <summary vsli:raw="Moves to the attribute with the specified local name and namespace Uniform Resource Identifier (URI).">指定したローカル名および名前空間 URI (Uniform Resource Identifier) の属性に移動します。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">属性のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute.">属性の名前空間 URI。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the position of the reader does not change.">属性が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、リーダーの位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToElement">
      <summary vsli:raw="Moves to the element that contains the current attribute node.">現在の属性ノードを含む要素に移動します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); &lt;see langword=&quot;false&quot; /&gt; if the reader is not positioned on an attribute (the position of the reader does not change).">リーダーが属性の位置に配置されている場合は <see langword="true" /> で、属性を所有している要素の位置にリーダーが移動します。リーダーが属性の位置に配置されていない場合は <see langword="false" /> で、リーダーの位置が変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToFirstAttribute">
      <summary vsli:raw="Moves to the first attribute.">最初の属性に移動します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an attribute exists (the reader moves to the first attribute); otherwise, &lt;see langword=&quot;false&quot; /&gt; (the position of the reader does not change).">属性が存在する場合は <see langword="true" /> で、リーダーが最初の属性へ移動します。それ以外の場合は <see langword="false" /> で、リーダーの位置が変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToNextAttribute">
      <summary vsli:raw="Moves to the next attribute.">次の属性に移動します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is a next attribute; &lt;see langword=&quot;false&quot; /&gt; if there are no more attributes.">次の属性が存在する場合は <see langword="true" />。それ以上、属性が存在しない場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Name">
      <summary vsli:raw="Gets the qualified name of the current node.">現在のノードの限定名を取得します。</summary>
      <returns vsli:raw="The qualified name of the current node. For example, &lt;see langword=&quot;Name&quot; /&gt; is &lt;see langword=&quot;bk:book&quot; /&gt; for the element &lt;c&gt;&amp;lt;bk:book&amp;gt;&lt;/c&gt;.  &#xA;  &#xA; The name returned is dependent on the &lt;see cref=&quot;P:System.Xml.XmlValidatingReader.NodeType&quot; /&gt; of the node. The following node types return the listed values. All other node types return an empty string.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Node Type&lt;/term&gt;&lt;description&gt; Name&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Attribute&quot; /&gt;&lt;/term&gt;&lt;description&gt; The name of the attribute.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;DocumentType&quot; /&gt;&lt;/term&gt;&lt;description&gt; The document type name.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Element&quot; /&gt;&lt;/term&gt;&lt;description&gt; The tag name.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;EntityReference&quot; /&gt;&lt;/term&gt;&lt;description&gt; The name of the entity referenced.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;ProcessingInstruction&quot; /&gt;&lt;/term&gt;&lt;description&gt; The target of the processing instruction.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;XmlDeclaration&quot; /&gt;&lt;/term&gt;&lt;description&gt; The literal string &lt;see langword=&quot;xml&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">現在のノードの限定名。 たとえば、 <see langword="Name" />は<see langword="bk:book" />要素<c>&gt;bk: book 用です。 &lt;</c>  
返される名前は、ノードの <see cref="P:System.Xml.XmlValidatingReader.NodeType" /> によって異なります。 リストされた値を返すノード型を次に示します。 その他のすべてのノード型は、空の文字列を返します。  
  ノード型 
  name 
 <see langword="Attribute" /> 属性の名前。  

 <see langword="DocumentType" /> ドキュメントの種類の名前。  

 <see langword="Element" /> タグ名。  

 <see langword="EntityReference" /> 参照されたエンティティの名前。  

 <see langword="ProcessingInstruction" /> 処理命令の対象。  

 <see langword="XmlDeclaration" /> リテラル文字列 <see langword="xml" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Namespaces">
      <summary vsli:raw="Gets or sets a value indicating whether to do namespace support.">名前空間をサポートするかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to do namespace support; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">名前空間をサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NamespaceURI">
      <summary vsli:raw="Gets the namespace Uniform Resource Identifier (URI) (as defined in the World Wide Web Consortium (W3C) Namespace specification) of the node on which the reader is positioned.">リーダーが配置されているノードの、W3C (World Wide Web Consortium) の名前空間の仕様における定義に基づいた名前空間 URI (Uniform Resource Identifier) を取得します。</summary>
      <returns vsli:raw="The namespace URI of the current node; otherwise an empty string.">現在のノードの名前空間 URI。それ以外の場合は空の文字列。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NameTable">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; associated with this implementation.">この実装に関連付けられている <see cref="T:System.Xml.XmlNameTable" /> を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;XmlNameTable&quot; /&gt; that enables you to get the atomized version of a string within the node.">ノード内の最小単位に分割された文字列の取得を可能にする <see langword="XmlNameTable" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NodeType">
      <summary vsli:raw="Gets the type of the current node.">現在のノードの種類を取得します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.XmlNodeType&quot; /&gt; values representing the type of the current node.">現在のノードの型を表す <see cref="T:System.Xml.XmlNodeType" /> 値の 1 つ。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Prefix">
      <summary vsli:raw="Gets the namespace prefix associated with the current node.">現在のノードに関連付けられた名前空間プリフィックスを取得します。</summary>
      <returns vsli:raw="The namespace prefix associated with the current node.">現在のノードに関連付けられた名前空間プリフィックス。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.QuoteChar">
      <summary vsli:raw="Gets the quotation mark character used to enclose the value of an attribute node.">属性ノードの値を囲むために使用する引用符文字を取得します。</summary>
      <returns vsli:raw="The quotation mark character (&quot; or ') used to enclose the value of an attribute node.">属性ノードの値を囲むために使用されている引用符 (" または ')。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.Read">
      <summary vsli:raw="Reads the next node from the stream.">ストリームから次のノードを読み取ります。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the next node was read successfully; &lt;see langword=&quot;false&quot; /&gt; if there are no more nodes to read.">次のノードが正常に読み取られた場合は <see langword="true" />。それ以上読み取る対象となるノードが存在しない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadAttributeValue">
      <summary vsli:raw="Parses the attribute value into one or more &lt;see langword=&quot;Text&quot; /&gt;, &lt;see langword=&quot;EntityReference&quot; /&gt;, or &lt;see langword=&quot;EndEntity&quot; /&gt; nodes.">属性値を解析して、1 つ以上の <see langword="Text" />、<see langword="EntityReference" />、<see langword="EndEntity" /> の各ノードに格納します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there are nodes to return.  &#xA;  &#xA; &lt;see langword=&quot;false&quot; /&gt; if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.  &#xA;  &#xA; An empty attribute, such as, &lt;c&gt;misc=&quot;&quot;&lt;/c&gt;, returns &lt;see langword=&quot;true&quot; /&gt; with a single node with a value of String.Empty.">返すノードがある場合は <see langword="true" />。  
 初めて呼び出すときにリーダーの位置が属性ノード上にない場合、またはすべての属性値が読み込まれている場合は <see langword="false" />。  
<c>misc=""</c> などの空の属性は、値 String.Empty を持つ単一のノードと一緒に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the content and returns the Base64 decoded binary bytes.">コンテンツを読み取り、Base64 でデコードされたバイナリ バイトを返します。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <returns vsli:raw="The number of bytes written to the buffer.">バッファーに書き込まれたバイト数。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)&quot; /&gt; is not supported on the current node.">
        <see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> は、現在のノードではサポートされていません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the content and returns the BinHex decoded binary bytes.">コンテンツを読み取り、BinHex でデコードされたバイナリ バイトを返します。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <returns vsli:raw="The number of bytes written to the buffer.">バッファーに書き込まれたバイト数。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)&quot; /&gt; is not supported on the current node.">
        <see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> は、現在のノードではサポートされていません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlValidatingReader&quot; /&gt; implementation does not support this method.">
        <see cref="T:System.Xml.XmlValidatingReader" /> 実装が、このメソッドをサポートしていません。</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the element and decodes the Base64 content.">要素を読み取り、Base64 のコンテンツをデコードします。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <returns vsli:raw="The number of bytes written to the buffer.">バッファーに書き込まれたバイト数。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node is not an element node.">現在のノードは要素ノードではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlValidatingReader&quot; /&gt; implementation does not support this method.">
        <see cref="T:System.Xml.XmlValidatingReader" /> 実装が、このメソッドをサポートしていません。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The element contains mixed-content.">要素には混合コンテンツが含まれます。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The content cannot be converted to the requested type.">コンテンツを要求された型に変換できません。</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the element and decodes the BinHex content.">要素を読み取り、BinHex のコンテンツをデコードします。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <returns vsli:raw="The number of bytes written to the buffer.">バッファーに書き込まれたバイト数。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node is not an element node.">現在のノードは要素ノードではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlValidatingReader&quot; /&gt; implementation does not support this method.">
        <see cref="T:System.Xml.XmlValidatingReader" /> 実装が、このメソッドをサポートしていません。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The element contains mixed-content.">要素には混合コンテンツが含まれます。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The content cannot be converted to the requested type.">コンテンツを要求された型に変換できません。</exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Reader">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; used to construct this &lt;see langword=&quot;XmlValidatingReader&quot; /&gt;.">この <see langword="XmlValidatingReader" /> を構築するために使用する <see cref="T:System.Xml.XmlReader" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlReader&quot; /&gt; specified in the constructor.">コンストラクターで指定した <see langword="XmlReader" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.ReadState">
      <summary vsli:raw="Gets the state of the reader.">リーダーの状態を取得します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.ReadState&quot; /&gt; values.">
        <see cref="T:System.Xml.ReadState" /> 値のいずれか 1 つ。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadString">
      <summary vsli:raw="Reads the contents of an element or text node as a string.">要素ノードまたはテキスト ノードの内容を文字列として読み取ります。</summary>
      <returns vsli:raw="The contents of the element or text node. This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.">要素ノードまたはテキスト ノードの内容。 要素ノードまたはテキスト ノード以外にリーダーが配置されている場合、または返す対象となるテキスト コンテンツが現在のコンテキスト内にこれ以上ない場合は、これが空の文字列になる場合があります。  
   
 テキスト ノードは、要素ノードまたは属性ノードのいずれかにできます。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadTypedValue">
      <summary vsli:raw="Gets the common language runtime type for the specified XML Schema definition language (XSD) type.">指定した XML スキーマ定義言語 (XSD) 型の共通言語ランタイム型を取得します。</summary>
      <returns vsli:raw="The common language runtime type for the specified XML Schema type.">指定した XML スキーマ型の共通言語ランタイム型。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ResolveEntity">
      <summary vsli:raw="Resolves the entity reference for &lt;see langword=&quot;EntityReference&quot; /&gt; nodes.">
        <see langword="EntityReference" /> ノードのエンティティ参照を解決します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The reader is not positioned on an &lt;see langword=&quot;EntityReference&quot; /&gt; node.">リーダーが <see langword="EntityReference" /> ノードに配置されていません。</exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Schemas">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaCollection&quot; /&gt; to use for validation.">検証に使用する <see cref="T:System.Xml.Schema.XmlSchemaCollection" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlSchemaCollection&quot; /&gt; to use for validation.">検証に使用する <see langword="XmlSchemaCollection" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.SchemaType">
      <summary vsli:raw="Gets a schema type object.">スキーマ型のオブジェクトを取得します。</summary>
      <returns vsli:raw="&lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDatatype&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaComplexType&quot; /&gt; depending whether the node value is a built in XML Schema definition language (XSD) type or a user defined simpleType or complexType; &lt;see langword=&quot;null&quot; /&gt; if the current node has no schema type.">ノード値が XML スキーマ定義言語 (XSD) 型またはユーザー定義の simpleType あるいは complexType に組み込まれているかどうかに応じて、<see cref="T:System.Xml.Schema.XmlSchemaDatatype" />、<see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />、または <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />。現在のノードにスキーマ型がない場合は、<see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)&quot; /&gt;.">このメンバーの詳細については、「<see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />」をご覧ください。</summary>
      <param name="scope" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNamespaceScope&quot; /&gt; object that identifies the scope of the reader.">リーダーのスコープを識別する <see cref="T:System.Xml.XmlNamespaceScope" /> オブジェクト。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object that identifies the namespaces in scope.">スコープの名前空間を識別する T:System.Collections.IDictionary オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)&quot; /&gt;.">このメンバーの説明については、<see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" /> のトピックを参照してください。</summary>
      <param name="prefix" vsli:raw="The namespace prefix.">名前空間プレフィックス。</param>
      <returns vsli:raw="A string value that contains the namespace Uri that is associated with the prefix.">プレフィックスに関連付けられた名前空間 URI が格納されている文字列値。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)&quot; /&gt;.">このメンバーの説明については、<see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" /> のトピックを参照してください。</summary>
      <param name="namespaceName" vsli:raw="The namespace that is associated with the prefix.">プレフィックスに関連付けられた名前空間。</param>
      <returns vsli:raw="A string value that contains the namespace prefix that is associated with the &lt;paramref name=&quot;namespaceName&quot; /&gt;.">
        <paramref name="namespaceName" /> に関連付けられた名前空間プレフィックスが格納されている文字列値。</returns>
    </member>
    <member name="E:System.Xml.XmlValidatingReader.ValidationEventHandler">
      <summary vsli:raw="Sets an event handler for receiving information about document type definition (DTD), XML-Data Reduced (XDR) schema, and XML Schema definition language (XSD) schema validation errors.">ドキュメント型定義 (DTD)、XML-Data Reduced (XDR) スキーマ、および XML スキーマ定義言語 (XSD) スキーマ検証エラーに関する情報を受信するためのイベント ハンドラーを設定します。</summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.ValidationType">
      <summary vsli:raw="Gets or sets a value indicating the type of validation to perform.">実行する検証のタイプを示す値を取得または設定します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.ValidationType&quot; /&gt; values. If this property is not set, it defaults to ValidationType.Auto.">
        <see cref="T:System.Xml.ValidationType" /> 値のいずれか。 このプロパティを設定しないと、既定により ValidationType.Auto が設定されます。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Setting the property after a Read has been called.">Read を呼び出した後、このプロパティを設定。</exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Value">
      <summary vsli:raw="Gets the text value of the current node.">現在のノードのテキスト値を取得します。</summary>
      <returns vsli:raw="The value returned depends on the &lt;see cref=&quot;P:System.Xml.XmlValidatingReader.NodeType&quot; /&gt; of the node. The following table lists node types that have a value to return. All other node types return String.Empty.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Node Type&lt;/term&gt;&lt;description&gt; Value&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Attribute&quot; /&gt;&lt;/term&gt;&lt;description&gt; The value of the attribute.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;CDATA&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the CDATA section.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Comment&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the comment.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;DocumentType&quot; /&gt;&lt;/term&gt;&lt;description&gt; The internal subset.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;ProcessingInstruction&quot; /&gt;&lt;/term&gt;&lt;description&gt; The entire content, excluding the target.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;SignificantWhitespace&quot; /&gt;&lt;/term&gt;&lt;description&gt; The white space between markup in a mixed content model.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Text&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the text node.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Whitespace&quot; /&gt;&lt;/term&gt;&lt;description&gt; The white space between markup.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;XmlDeclaration&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the declaration.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">返される値は、ノードの <see cref="P:System.Xml.XmlValidatingReader.NodeType" /> によって異なります。 返す値を持つノード型の一覧を次の表に示します。 その他のすべてのノード型は、String.Empty を返します。  
  ノード型 
  [値] 
 <see langword="Attribute" /> 属性の値。  

 <see langword="CDATA" /> CDATA セクションの内容。  

 <see langword="Comment" /> コメントの内容。  

 <see langword="DocumentType" /> 内部サブセット。  

 <see langword="ProcessingInstruction" /> ターゲットを除く全内容。  

 <see langword="SignificantWhitespace" /> 混合コンテンツ モデル内のマークアップ間の空白。  

 <see langword="Text" /> テキスト ノードの内容。  

 <see langword="Whitespace" /> マークアップ間の空白。  

 <see langword="XmlDeclaration" /> 宣言の内容。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlLang">
      <summary vsli:raw="Gets the current &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">現在の <see langword="xml:lang" /> スコープを取得します。</summary>
      <returns vsli:raw="The current &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">現在の <see langword="xml:lang" /> スコープ。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlResolver">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used for resolving external document type definition (DTD) and schema location references. The &lt;see langword=&quot;XmlResolver&quot; /&gt; is also used to handle any import or include elements found in XML Schema definition language (XSD) schemas.">外部ドキュメント型定義 (DTD) およびスキーマ位置参照を解決するために使用する <see cref="T:System.Xml.XmlResolver" /> を設定します。 <see langword="XmlResolver" /> は、XML スキーマ定義言語 (XSD) スキーマで見つかったインポート要素またはインクルード要素を処理するためにも使用されます。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlResolver&quot; /&gt; to use. If set to &lt;see langword=&quot;null&quot; /&gt;, external resources are not resolved.  &#xA;  &#xA; In version 1.1 of the .NET Framework, the caller must be fully trusted to specify an &lt;see langword=&quot;XmlResolver&quot; /&gt;.">使用する <see langword="XmlResolver" />。 <see langword="null" /> に設定されていると、外部リソースが解決されません。  
.NET Framework バージョン 1.1 の場合、<see langword="XmlResolver" /> を指定するには呼び出し元が完全に信頼されている必要があります。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlSpace">
      <summary vsli:raw="Gets the current &lt;see langword=&quot;xml:space&quot; /&gt; scope.">現在の <see langword="xml:space" /> スコープを取得します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.XmlSpace&quot; /&gt; values. If no &lt;see langword=&quot;xml:space&quot; /&gt; scope exists, this property defaults to &lt;see langword=&quot;XmlSpace.None&quot; /&gt;.">
        <see cref="T:System.Xml.XmlSpace" /> 値のいずれか 1 つ。 <see langword="xml:space" /> スコープが存在しない場合、このプロパティは既定の <see langword="XmlSpace.None" /> に設定されます。</returns>
    </member>
    <member name="T:System.Xml.XmlWhitespace">
      <summary vsli:raw="Represents white space in element content.">要素の内容の中にある空白を表します。</summary>
    </member>
    <member name="M:System.Xml.XmlWhitespace.#ctor(System.String,System.Xml.XmlDocument)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlWhitespace&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlWhitespace" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="strData" vsli:raw="The white space characters of the node.">ノードの空白文字。</param>
      <param name="doc" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlDocument" /> オブジェクト。</param>
    </member>
    <member name="M:System.Xml.XmlWhitespace.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node.">このノードの複製を作成します。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself. For white space nodes, the cloned node always includes the data value, regardless of the parameter setting.">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。 空白ノードの場合、クローンとして作成されたノードには、パラメーターの設定に関係なく、常にデータ値が含まれます。</param>
      <returns vsli:raw="The cloned node.">クローンとして作成されたノード。</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.LocalName">
      <summary vsli:raw="Gets the local name of the node.">ノードのローカル名を取得します。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlWhitespace&quot; /&gt; nodes, this property returns &lt;see langword=&quot;#whitespace&quot; /&gt;.">
        <see langword="XmlWhitespace" /> ノードの場合、このプロパティは <see langword="#whitespace" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.Name">
      <summary vsli:raw="Gets the qualified name of the node.">ノードの限定名を取得します。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlWhitespace&quot; /&gt; nodes, this property returns &lt;see langword=&quot;#whitespace&quot; /&gt;.">
        <see langword="XmlWhitespace" /> ノードの場合、このプロパティは <see langword="#whitespace" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.NodeType">
      <summary vsli:raw="Gets the type of the node.">ノードの種類を取得します。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlWhitespace&quot; /&gt; nodes, the value is &lt;see cref=&quot;F:System.Xml.XmlNodeType.Whitespace&quot; /&gt;.">
        <see langword="XmlWhitespace" /> ノードの場合、値は <see cref="F:System.Xml.XmlNodeType.Whitespace" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.ParentNode">
      <summary vsli:raw="Gets the parent of the current node.">現在のノードの親を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; parent node of the current node.">現在のノードの <see cref="T:System.Xml.XmlNode" /> 親ノード。</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.PreviousText">
      <summary vsli:raw="Gets the text node that immediately precedes this node.">このノードの直前にあるテキスト ノードを取得します。</summary>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt;.">
        <see cref="T:System.Xml.XmlNode" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.Value">
      <summary vsli:raw="Gets or sets the value of the node.">ノードの値を取得または設定します。</summary>
      <returns vsli:raw="The white space characters found in the node.">ノードで検出された空白文字。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Setting &lt;see cref=&quot;P:System.Xml.XmlWhitespace.Value&quot; /&gt; to invalid white space characters.">
        <see cref="P:System.Xml.XmlWhitespace.Value" /> が無効な空白文字に設定されています。</exception>
    </member>
    <member name="M:System.Xml.XmlWhitespace.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves all the children of the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">指定した <see cref="T:System.Xml.XmlWriter" /> にノードのすべての子を保存します。</summary>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to which you want to save.">保存先の <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlWhitespace.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">指定した <see cref="T:System.Xml.XmlWriter" /> にノードを保存します。</summary>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to which you want to save.">保存先の <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="T:System.Xml.XmlWriter">
      <summary vsli:raw="Represents a writer that provides a fast, non-cached, forward-only way to generate streams or files that contain XML data.">XML データが格納されたストリームまたはファイルを、高速かつ非キャッシュで前方のみに生成する方法を提供するライターを表します。</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlWriter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.Close">
      <summary vsli:raw="When overridden in a derived class, closes this stream and the underlying stream.">派生クラスでオーバーライドされると、このストリームと基になるストリームを閉じます。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="A call is made to write more output after &lt;see langword=&quot;Close&quot; /&gt; has been called or the result of this call is an invalid XML document.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see langword="Close" /> が呼び出された後に、追加出力を書き込む呼び出しが行われたか、この呼び出しの結果が無効な XML ドキュメントです。

または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.Stream)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance using the specified stream.">指定されたストリームを使用して新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを作成します。</summary>
      <param name="output" vsli:raw="The stream to which you want to write. The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; writes XML 1.0 text syntax and appends it to the specified stream.">書き込み先のストリーム。 <see cref="T:System.Xml.XmlWriter" /> は、XML 1.0 テキスト構文を書き込み、指定されたストリームにそれを付加します。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;stream&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> 値は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance using the stream and &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object.">ストリームと <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを作成します。</summary>
      <param name="output" vsli:raw="The stream to which you want to write. The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; writes XML 1.0 text syntax and appends it to the specified stream.">書き込み先のストリーム。 <see cref="T:System.Xml.XmlWriter" /> は、XML 1.0 テキスト構文を書き込み、指定されたストリームにそれを付加します。</param>
      <param name="settings" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object used to configure the new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance. If this is &lt;see langword=&quot;null&quot; /&gt;, a &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; with default settings is used.  &#xA;  &#xA; If the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; is being used with the &lt;see cref=&quot;M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)&quot; /&gt; method, you should use the &lt;see cref=&quot;P:System.Xml.Xsl.XslCompiledTransform.OutputSettings&quot; /&gt; property to obtain an &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object with the correct settings. This ensures that the created &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object has the correct output settings.">新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを構成するために使用される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクト。 これが <see langword="null" /> である場合は、既定の設定で <see cref="T:System.Xml.XmlWriterSettings" /> が使用されます。  
<see cref="T:System.Xml.XmlWriter" /> を <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> メソッドと組み合わせて使用する場合は、<see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> プロパティを使って、正しい設定の割り当てられた <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを取得する必要があります。 これにより、作成された <see cref="T:System.Xml.XmlWriter" /> オブジェクトに正しい出力設定が適用されます。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;stream&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> 値は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.TextWriter)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance using the specified &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;.">指定された <see cref="T:System.IO.TextWriter" /> を使用して新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを作成します。</summary>
      <param name="output" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which you want to write. The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; writes XML 1.0 text syntax and appends it to the specified &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;.">書き込み先の <see cref="T:System.IO.TextWriter" />。 <see cref="T:System.Xml.XmlWriter" /> は、XML 1.0 テキスト構文を書き込み、指定された <see cref="T:System.IO.TextWriter" /> にそれを付加します。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;text&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="text" /> 値は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.TextWriter,System.Xml.XmlWriterSettings)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance using the &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; and &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; objects.">
        <see cref="T:System.IO.TextWriter" /> オブジェクトと <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを作成します。</summary>
      <param name="output" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which you want to write. The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; writes XML 1.0 text syntax and appends it to the specified &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;.">書き込み先の <see cref="T:System.IO.TextWriter" />。 <see cref="T:System.Xml.XmlWriter" /> は、XML 1.0 テキスト構文を書き込み、指定された <see cref="T:System.IO.TextWriter" /> にそれを付加します。</param>
      <param name="settings" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object used to configure the new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance. If this is &lt;see langword=&quot;null&quot; /&gt;, a &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; with default settings is used.  &#xA;  &#xA; If the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; is being used with the &lt;see cref=&quot;M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)&quot; /&gt; method, you should use the &lt;see cref=&quot;P:System.Xml.Xsl.XslCompiledTransform.OutputSettings&quot; /&gt; property to obtain an &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object with the correct settings. This ensures that the created &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object has the correct output settings.">新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを構成するために使用される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクト。 これが <see langword="null" /> である場合は、既定の設定で <see cref="T:System.Xml.XmlWriterSettings" /> が使用されます。  
<see cref="T:System.Xml.XmlWriter" /> を <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> メソッドと組み合わせて使用する場合は、<see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> プロパティを使って、正しい設定の割り当てられた <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを取得する必要があります。 これにより、作成された <see cref="T:System.Xml.XmlWriter" /> オブジェクトに正しい出力設定が適用されます。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;text&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="text" /> 値は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.String)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance using the specified filename.">指定されたファイル名を使用して新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを作成します。</summary>
      <param name="outputFileName" vsli:raw="The file to which you want to write. The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; creates a file at the specified path and writes to it in XML 1.0 text syntax. The &lt;paramref name=&quot;outputFileName&quot; /&gt; must be a file system path.">書き込み先のファイル。 <see cref="T:System.Xml.XmlWriter" /> は、指定されたパスにファイルを作成し、XML 1.0 テキスト構文でファイルに書き込みます。 <paramref name="outputFileName" /> はファイル システム パスにする必要があります。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;url&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="url" /> 値は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.String,System.Xml.XmlWriterSettings)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance using the filename and &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object.">ファイル名と <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを作成します。</summary>
      <param name="outputFileName" vsli:raw="The file to which you want to write. The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; creates a file at the specified path and writes to it in XML 1.0 text syntax. The &lt;paramref name=&quot;outputFileName&quot; /&gt; must be a file system path.">書き込み先のファイル。 <see cref="T:System.Xml.XmlWriter" /> は、指定されたパスにファイルを作成し、XML 1.0 テキスト構文でファイルに書き込みます。 <paramref name="outputFileName" /> はファイル システム パスにする必要があります。</param>
      <param name="settings" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object used to configure the new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance. If this is &lt;see langword=&quot;null&quot; /&gt;, a &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; with default settings is used.  &#xA;  &#xA; If the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; is being used with the &lt;see cref=&quot;M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)&quot; /&gt; method, you should use the &lt;see cref=&quot;P:System.Xml.Xsl.XslCompiledTransform.OutputSettings&quot; /&gt; property to obtain an &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object with the correct settings. This ensures that the created &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object has the correct output settings.">新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを構成するために使用される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクト。 これが <see langword="null" /> である場合は、既定の設定で <see cref="T:System.Xml.XmlWriterSettings" /> が使用されます。  
<see cref="T:System.Xml.XmlWriter" /> を <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> メソッドと組み合わせて使用する場合は、<see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> プロパティを使って、正しい設定の割り当てられた <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを取得する必要があります。 これにより、作成された <see cref="T:System.Xml.XmlWriter" /> オブジェクトに正しい出力設定が適用されます。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;url&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="url" /> 値は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance using the specified &lt;see cref=&quot;T:System.Text.StringBuilder&quot; /&gt;.">指定された <see cref="T:System.Text.StringBuilder" /> を使用して新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを作成します。</summary>
      <param name="output" vsli:raw="The &lt;see cref=&quot;T:System.Text.StringBuilder&quot; /&gt; to which to write to. Content written by the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; is appended to the &lt;see cref=&quot;T:System.Text.StringBuilder&quot; /&gt;.">書き込み先の <see cref="T:System.Text.StringBuilder" />。 <see cref="T:System.Xml.XmlWriter" /> で書き込まれたコンテンツが、<see cref="T:System.Text.StringBuilder" /> に付加されます。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;builder&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="builder" /> 値は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder,System.Xml.XmlWriterSettings)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance using the &lt;see cref=&quot;T:System.Text.StringBuilder&quot; /&gt; and &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; objects.">
        <see cref="T:System.Text.StringBuilder" /> オブジェクトと <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを作成します。</summary>
      <param name="output" vsli:raw="The &lt;see cref=&quot;T:System.Text.StringBuilder&quot; /&gt; to which to write to. Content written by the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; is appended to the &lt;see cref=&quot;T:System.Text.StringBuilder&quot; /&gt;.">書き込み先の <see cref="T:System.Text.StringBuilder" />。 <see cref="T:System.Xml.XmlWriter" /> で書き込まれたコンテンツが、<see cref="T:System.Text.StringBuilder" /> に付加されます。</param>
      <param name="settings" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object used to configure the new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance. If this is &lt;see langword=&quot;null&quot; /&gt;, a &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; with default settings is used.  &#xA;  &#xA; If the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; is being used with the &lt;see cref=&quot;M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)&quot; /&gt; method, you should use the &lt;see cref=&quot;P:System.Xml.Xsl.XslCompiledTransform.OutputSettings&quot; /&gt; property to obtain an &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object with the correct settings. This ensures that the created &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object has the correct output settings.">新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを構成するために使用される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクト。 これが <see langword="null" /> である場合は、既定の設定で <see cref="T:System.Xml.XmlWriterSettings" /> が使用されます。  
<see cref="T:System.Xml.XmlWriter" /> を <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> メソッドと組み合わせて使用する場合は、<see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> プロパティを使って、正しい設定の割り当てられた <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを取得する必要があります。 これにより、作成された <see cref="T:System.Xml.XmlWriter" /> オブジェクトに正しい出力設定が適用されます。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;builder&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="builder" /> 値は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance using the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object.">指定された <see cref="T:System.Xml.XmlWriter" /> オブジェクトを使用して新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを作成します。</summary>
      <param name="output" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object that you want to use as the underlying writer.">基になるライターとして使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object that is wrapped around the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object.">指定された <see cref="T:System.Xml.XmlWriter" /> オブジェクトをラップする <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;writer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> 値は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter,System.Xml.XmlWriterSettings)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance using the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; and &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; objects.">指定された <see cref="T:System.Xml.XmlWriter" /> オブジェクトと <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを作成します。</summary>
      <param name="output" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object that you want to use as the underlying writer.">基になるライターとして使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</param>
      <param name="settings" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object used to configure the new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance. If this is &lt;see langword=&quot;null&quot; /&gt;, a &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; with default settings is used.  &#xA;  &#xA; If the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; is being used with the &lt;see cref=&quot;M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)&quot; /&gt; method, you should use the &lt;see cref=&quot;P:System.Xml.Xsl.XslCompiledTransform.OutputSettings&quot; /&gt; property to obtain an &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object with the correct settings. This ensures that the created &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object has the correct output settings.">新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを構成するために使用される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクト。 これが <see langword="null" /> である場合は、既定の設定で <see cref="T:System.Xml.XmlWriterSettings" /> が使用されます。  
<see cref="T:System.Xml.XmlWriter" /> を <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> メソッドと組み合わせて使用する場合は、<see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> プロパティを使って、正しい設定の割り当てられた <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを取得する必要があります。 これにより、作成された <see cref="T:System.Xml.XmlWriter" /> オブジェクトに正しい出力設定が適用されます。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object that is wrapped around the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object.">指定された <see cref="T:System.Xml.XmlWriter" /> オブジェクトをラップする <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;writer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> 値は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Dispose">
      <summary vsli:raw="Releases all resources used by the current instance of the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlWriter" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; and optionally releases the managed resources.">
        <see cref="T:System.Xml.XmlWriter" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Flush">
      <summary vsli:raw="When overridden in a derived class, flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.">派生クラスでオーバーライドされると、バッファー内のデータをすべて基になるストリームにフラッシュし、基になるストリームもフラッシュします。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.FlushAsync">
      <summary vsli:raw="Asynchronously flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.">バッファー内のデータをすべて基になるストリームに非同期にフラッシュし、基になるストリームもフラッシュします。</summary>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;Flush&quot; /&gt; operation.">非同期の <see langword="Flush" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.LookupPrefix(System.String)">
      <summary vsli:raw="When overridden in a derived class, returns the closest prefix defined in the current namespace scope for the namespace URI.">派生クラスでオーバーライドされると、名前空間 URI の現在の名前空間スコープで定義された最も近いプリフィックスを返します。</summary>
      <param name="ns" vsli:raw="The namespace URI whose prefix you want to find.">検索対象のプリフィックスを持つ名前空間 URI。</param>
      <returns vsli:raw="The matching prefix or &lt;see langword=&quot;null&quot; /&gt; if no matching namespace URI is found in the current scope.">一致するプリフィックス。現在のスコープに一致する名前空間 URI が見つからない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ns&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;.">
        <paramref name="ns" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlWriter.Settings">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object used to create this &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance.">この <see cref="T:System.Xml.XmlWriter" /> インスタンスを作成するために使用された <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object used to create this writer instance. If this writer was not created using the &lt;see cref=&quot;Overload:System.Xml.XmlWriter.Create&quot; /&gt; method, this property returns &lt;see langword=&quot;null&quot; /&gt;.">このライターのインスタンスを作成するために使用した <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクト。 このライターが <see cref="Overload:System.Xml.XmlWriter.Create" /> メソッドを使用して作成されなかった場合、このプロパティは <see langword="null" /> を返します。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, writes out all the attributes found at the current position in the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">派生クラスでオーバーライドされると、<see cref="T:System.Xml.XmlReader" /> の現在の位置で見つかったすべての属性を書き込みます。</summary>
      <param name="reader" vsli:raw="The &lt;see langword=&quot;XmlReader&quot; /&gt; from which to copy the attributes.">属性のコピー元の <see langword="XmlReader" />。</param>
      <param name="defattr" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to copy the default attributes from the &lt;see langword=&quot;XmlReader&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="XmlReader" /> の既定の属性をコピーする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="reader" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The reader is not positioned on an &lt;see langword=&quot;element&quot; /&gt;, &lt;see langword=&quot;attribute&quot; /&gt; or &lt;see langword=&quot;XmlDeclaration&quot; /&gt; node.">リーダーが <see langword="element" /> ノード、<see langword="attribute" /> ノード、または <see langword="XmlDeclaration" /> ノードに配置されていません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributesAsync(System.Xml.XmlReader,System.Boolean)">
      <summary vsli:raw="Asynchronously writes out all the attributes found at the current position in the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlReader" /> の現在の位置で見つかったすべての属性を非同期に書き込みます。</summary>
      <param name="reader" vsli:raw="The &lt;see langword=&quot;XmlReader&quot; /&gt; from which to copy the attributes.">属性のコピー元の <see langword="XmlReader" />。</param>
      <param name="defattr" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to copy the default attributes from the &lt;see langword=&quot;XmlReader&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="XmlReader" /> の既定の属性をコピーする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteAttributes&quot; /&gt; operation.">非同期の <see langword="WriteAttributes" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String)">
      <summary vsli:raw="When overridden in a derived class, writes out the attribute with the specified local name and value.">派生クラスでオーバーライドされると、指定したローカル名と値の属性を書き込みます。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">属性のローカル名。</param>
      <param name="value" vsli:raw="The value of the attribute.">属性の値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The state of writer is not &lt;see langword=&quot;WriteState.Element&quot; /&gt; or writer is closed.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">ライターが <see langword="WriteState.Element" /> の状態にないか、またはライターが閉じています。

または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see langword=&quot;xml:space&quot; /&gt; or &lt;see langword=&quot;xml:lang&quot; /&gt; attribute value is invalid.">
        <see langword="xml:space" /> 属性値または <see langword="xml:lang" /> 属性値が無効です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)">
      <summary vsli:raw="When overridden in a derived class, writes an attribute with the specified local name, namespace URI, and value.">派生クラスでオーバーライドされると、指定したローカル名、名前空間 URI、および値の属性を書き込みます。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">属性のローカル名。</param>
      <param name="ns" vsli:raw="The namespace URI to associate with the attribute.">属性に関連付ける名前空間 URI。</param>
      <param name="value" vsli:raw="The value of the attribute.">属性の値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The state of writer is not &lt;see langword=&quot;WriteState.Element&quot; /&gt; or writer is closed.&#xA;&#xA;-or-&#xA;        &#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">ライターが <see langword="WriteState.Element" /> の状態にないか、またはライターが閉じています。

または - 
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see langword=&quot;xml:space&quot; /&gt; or &lt;see langword=&quot;xml:lang&quot; /&gt; attribute value is invalid.">
        <see langword="xml:space" /> 属性値または <see langword="xml:lang" /> 属性値が無効です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="When overridden in a derived class, writes out the attribute with the specified prefix, local name, namespace URI, and value.">派生クラスでオーバーライドされると、指定したプリフィックス、ローカル名、名前空間 URI、および値の属性を書き込みます。</summary>
      <param name="prefix" vsli:raw="The namespace prefix of the attribute.">属性の名前空間プレフィックス。</param>
      <param name="localName" vsli:raw="The local name of the attribute.">属性のローカル名。</param>
      <param name="ns" vsli:raw="The namespace URI of the attribute.">属性の名前空間 URI。</param>
      <param name="value" vsli:raw="The value of the attribute.">属性の値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The state of writer is not &lt;see langword=&quot;WriteState.Element&quot; /&gt; or writer is closed.&#xA;&#xA;-or-&#xA;        &#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">ライターが <see langword="WriteState.Element" /> の状態にないか、またはライターが閉じています。
または 
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see langword=&quot;xml:space&quot; /&gt; or &lt;see langword=&quot;xml:lang&quot; /&gt; attribute value is invalid.">
        <see langword="xml:space" /> 属性値または <see langword="xml:lang" /> 属性値が無効です。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The &lt;paramref name=&quot;localName&quot; /&gt; or &lt;paramref name=&quot;ns&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localName" /> または <paramref name="ns" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeStringAsync(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Asynchronously writes out the attribute with the specified prefix, local name, namespace URI, and value.">指定されたプレフィックス、ローカル名、名前空間 URI、および値を使用して属性を非同期に書き込みます。</summary>
      <param name="prefix" vsli:raw="The namespace prefix of the attribute.">属性の名前空間プレフィックス。</param>
      <param name="localName" vsli:raw="The local name of the attribute.">属性のローカル名。</param>
      <param name="ns" vsli:raw="The namespace URI of the attribute.">属性の名前空間 URI。</param>
      <param name="value" vsli:raw="The value of the attribute.">属性の値。</param>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteAttributeString&quot; /&gt; operation.">非同期の <see langword="WriteAttributeString" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;    &#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

または - 
<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="When overridden in a derived class, encodes the specified binary bytes as Base64 and writes out the resulting text.">派生クラスでオーバーライドされると、指定したバイナリ バイトを Base64 としてエンコードし、その結果生成されるテキストを書き込みます。</summary>
      <param name="buffer" vsli:raw="Byte array to encode.">エンコードするバイト配列。</param>
      <param name="index" vsli:raw="The position in the buffer indicating the start of the bytes to write.">書き込むバイトの開始を示すバッファー内の位置。</param>
      <param name="count" vsli:raw="The number of bytes to write.">書き込むバイト数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The buffer length minus &lt;paramref name=&quot;index&quot; /&gt; is less than &lt;paramref name=&quot;count&quot; /&gt;.">
        <paramref name="index" /> または <paramref name="count" /> が 0 未満です。  

または - 
バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBase64Async(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Asynchronously encodes the specified binary bytes as Base64 and writes out the resulting text.">指定したバイナリ バイトを base64 として非同期にエンコードし、その結果生成されるテキストを書き込みます。</summary>
      <param name="buffer" vsli:raw="Byte array to encode.">エンコードするバイト配列。</param>
      <param name="index" vsli:raw="The position in the buffer indicating the start of the bytes to write.">書き込むバイトの開始を示すバッファー内の位置。</param>
      <param name="count" vsli:raw="The number of bytes to write.">書き込むバイト数。</param>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteBase64&quot; /&gt; operation.">非同期の <see langword="WriteBase64" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="When overridden in a derived class, encodes the specified binary bytes as &lt;see langword=&quot;BinHex&quot; /&gt; and writes out the resulting text.">派生クラスでオーバーライドされると、指定されたバイナリ バイトを <see langword="BinHex" /> としてエンコードし、その結果生成されるテキストを書き込みます。</summary>
      <param name="buffer" vsli:raw="Byte array to encode.">エンコードするバイト配列。</param>
      <param name="index" vsli:raw="The position in the buffer indicating the start of the bytes to write.">書き込むバイトの開始を示すバッファー内の位置。</param>
      <param name="count" vsli:raw="The number of bytes to write.">書き込むバイト数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The writer is closed or in error state.&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">ライターが閉じているかエラー状態です。
または
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The buffer length minus &lt;paramref name=&quot;index&quot; /&gt; is less than &lt;paramref name=&quot;count&quot; /&gt;.">
        <paramref name="index" /> または <paramref name="count" /> が 0 未満です。  

または - 
バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBinHexAsync(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Asynchronously encodes the specified binary bytes as &lt;see langword=&quot;BinHex&quot; /&gt; and writes out the resulting text.">指定したバイナリ バイトを <see langword="BinHex" /> として非同期にエンコードし、その結果生成されるテキストを書き込みます。</summary>
      <param name="buffer" vsli:raw="Byte array to encode.">エンコードするバイト配列。</param>
      <param name="index" vsli:raw="The position in the buffer indicating the start of the bytes to write.">書き込むバイトの開始を示すバッファー内の位置。</param>
      <param name="count" vsli:raw="The number of bytes to write.">書き込むバイト数。</param>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteBinHex&quot; /&gt; operation.">非同期の <see langword="WriteBinHex" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCData(System.String)">
      <summary vsli:raw="When overridden in a derived class, writes out a &amp;lt;![CDATA[...]]&amp;gt; block containing the specified text.">派生クラスでオーバーライドされると、指定したテキストを含む &lt;![CDATA[...]]&gt; ブロックを書き込みます。</summary>
      <param name="text" vsli:raw="The text to place inside the CDATA block.">CDATA ブロック内に配置するテキスト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The text would result in a non-well formed XML document.">テキストは、非整形式の XML ドキュメントになります。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCDataAsync(System.String)">
      <summary vsli:raw="Asynchronously writes out a &amp;lt;![CDATA[...]]&amp;gt; block containing the specified text.">指定したテキストを格納する &lt;![CDATA[...]]&gt; ブロックを非同期に書き込みます。</summary>
      <param name="text" vsli:raw="The text to place inside the CDATA block.">CDATA ブロック内に配置するテキスト。</param>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteCData&quot; /&gt; operation.">非同期の <see langword="WriteCData" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharEntity(System.Char)">
      <summary vsli:raw="When overridden in a derived class, forces the generation of a character entity for the specified Unicode character value.">派生クラスでオーバーライドされると、指定した Unicode 文字値の文字エンティティを強制的に生成します。</summary>
      <param name="ch" vsli:raw="The Unicode character for which to generate a character entity.">文字エンティティを生成する Unicode 文字。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The character is in the surrogate pair character range, &lt;see langword=&quot;0xd800&quot; /&gt; - &lt;see langword=&quot;0xdfff&quot; /&gt;.">文字がサロゲート ペアの文字範囲、つまり <see langword="0xd800" /> - <see langword="0xdfff" /> 内にあります。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharEntityAsync(System.Char)">
      <summary vsli:raw="Asynchronously forces the generation of a character entity for the specified Unicode character value.">指定した Unicode 文字値の文字エンティティを非同期に強制的に生成します。</summary>
      <param name="ch" vsli:raw="The Unicode character for which to generate a character entity.">文字エンティティを生成する Unicode 文字。</param>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteCharEntity&quot; /&gt; operation.">非同期の <see langword="WriteCharEntity" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="When overridden in a derived class, writes text one buffer at a time.">派生クラスでオーバーライドされると、一度に 1 つのバッファーにテキストを書き込みます。</summary>
      <param name="buffer" vsli:raw="Character array containing the text to write.">書き込むテキストを格納している文字配列。</param>
      <param name="index" vsli:raw="The position in the buffer indicating the start of the text to write.">書き込むテキストの開始を示すバッファー内の位置。</param>
      <param name="count" vsli:raw="The number of characters to write.">書き込む文字数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The buffer length minus &lt;paramref name=&quot;index&quot; /&gt; is less than &lt;paramref name=&quot;count&quot; /&gt;; the call results in surrogate pair characters being split or an invalid surrogate pair being written.">
        <paramref name="index" /> または <paramref name="count" /> が 0 未満です。  

または - 
バッファー長から <paramref name="index" /> を差し引いた値が <paramref name="count" /> 未満です。この呼び出しにより、サロゲート ペア文字が分割されるか、無効なサロゲート ペアが書き込まれます。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; parameter value is not valid.">
        <paramref name="buffer" /> パラメーター値が有効ではありません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharsAsync(System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="Asynchronously writes text one buffer at a time.">一度に 1 つのバッファーにテキストを非同期に書き込みます。</summary>
      <param name="buffer" vsli:raw="Character array containing the text to write.">書き込むテキストを格納している文字配列。</param>
      <param name="index" vsli:raw="The position in the buffer indicating the start of the text to write.">書き込むテキストの開始を示すバッファー内の位置。</param>
      <param name="count" vsli:raw="The number of characters to write.">書き込む文字数。</param>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteChars&quot; /&gt; operation.">非同期の <see langword="WriteChars" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteComment(System.String)">
      <summary vsli:raw="When overridden in a derived class, writes out a comment &amp;lt;!--...--&amp;gt; containing the specified text.">派生クラスでオーバーライドされると、指定したテキストを格納している &lt;!--...--&gt; コメントを書き込みます。</summary>
      <param name="text" vsli:raw="Text to place inside the comment.">コメント内に配置するテキスト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The text would result in a non-well-formed XML document.">テキストは、非整形式の XML ドキュメントになります。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCommentAsync(System.String)">
      <summary vsli:raw="Asynchronously writes out a comment &amp;lt;!--...--&amp;gt; containing the specified text.">指定したテキストを含むコメント &lt;!--...--&gt; を非同期に書き込みます。</summary>
      <param name="text" vsli:raw="Text to place inside the comment.">コメント内に配置するテキスト。</param>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteComment&quot; /&gt; operation.">非同期の <see langword="WriteComment" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="When overridden in a derived class, writes the DOCTYPE declaration with the specified name and optional attributes.">派生クラスでオーバーライドされると、指定した名前とオプションの属性を含む DOCTYPE 宣言を書き込みます。</summary>
      <param name="name" vsli:raw="The name of the DOCTYPE. This must be non-empty.">DOCTYPE の名前。 これを空にすることはできません。</param>
      <param name="pubid" vsli:raw="If non-null it also writes PUBLIC &quot;pubid&quot; &quot;sysid&quot; where &lt;paramref name=&quot;pubid&quot; /&gt; and &lt;paramref name=&quot;sysid&quot; /&gt; are replaced with the value of the given arguments.">null でない場合は、PUBLIC "pubid" "sysid" も書き込みます。<paramref name="pubid" /> と <paramref name="sysid" /> は、指定した引数の値に置き換えられます。</param>
      <param name="sysid" vsli:raw="If &lt;paramref name=&quot;pubid&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;sysid&quot; /&gt; is non-null it writes SYSTEM &quot;sysid&quot; where &lt;paramref name=&quot;sysid&quot; /&gt; is replaced with the value of this argument.">
        <paramref name="pubid" /> が <see langword="null" /> で <paramref name="sysid" /> が null でない場合は、SYSTEM "sysid" を書き込みます。<paramref name="sysid" /> は、この引数の値に置き換えられます。</param>
      <param name="subset" vsli:raw="If non-null it writes [subset] where subset is replaced with the value of this argument.">null でない場合は、[subset] を書き込みます。subset は、この引数の値に置き換えられます。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This method was called outside the prolog (after the root element).&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">このメソッドが、プロローグの外 (ルート要素の後) で呼び出されました。

または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The value for &lt;paramref name=&quot;name&quot; /&gt; would result in invalid XML.">
        <paramref name="name" /> の値が、無効な XML になることがあります。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteDocTypeAsync(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Asynchronously writes the DOCTYPE declaration with the specified name and optional attributes.">指定された名前とオプション属性を使用して DOC 宣言を非同期に書き込みます。</summary>
      <param name="name" vsli:raw="The name of the DOCTYPE. This must be non-empty.">DOCTYPE の名前。 これを空にすることはできません。</param>
      <param name="pubid" vsli:raw="If non-null it also writes PUBLIC &quot;pubid&quot; &quot;sysid&quot; where &lt;paramref name=&quot;pubid&quot; /&gt; and &lt;paramref name=&quot;sysid&quot; /&gt; are replaced with the value of the given arguments.">null でない場合は、PUBLIC "pubid" "sysid" も書き込みます。<paramref name="pubid" /> と <paramref name="sysid" /> は、指定した引数の値に置き換えられます。</param>
      <param name="sysid" vsli:raw="If &lt;paramref name=&quot;pubid&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;sysid&quot; /&gt; is non-null it writes SYSTEM &quot;sysid&quot; where &lt;paramref name=&quot;sysid&quot; /&gt; is replaced with the value of this argument.">
        <paramref name="pubid" /> が <see langword="null" /> で <paramref name="sysid" /> が null でない場合は、SYSTEM "sysid" を書き込みます。<paramref name="sysid" /> は、この引数の値に置き換えられます。</param>
      <param name="subset" vsli:raw="If non-null it writes [subset] where subset is replaced with the value of this argument.">null でない場合は、[subset] を書き込みます。subset は、この引数の値に置き換えられます。</param>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteDocType&quot; /&gt; operation.">非同期の <see langword="WriteDocType" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。
または
<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String)">
      <summary vsli:raw="Writes an element with the specified local name and value.">指定されたローカル名および値を使用して要素を書き込みます。</summary>
      <param name="localName" vsli:raw="The local name of the element.">要素のローカル名。</param>
      <param name="value" vsli:raw="The value of the element.">要素の値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;localName&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt; or an empty string.  &#xA;  &#xA; -or-  &#xA;  &#xA; The parameter values are not valid.">
        <paramref name="localName" /> 値が <see langword="null" /> または空の文字列です。  

または - 
パラメーターの値が有効ではありません。</exception>
      <exception cref="T:System.Text.EncoderFallbackException" vsli:raw="There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.">有効な XML 文字であるが出力エンコーディングには有効でない文字がバッファー内にあります。 たとえば、出力エンコーディングが ASCII の場合、要素名と属性名には 0 ～ 127 の範囲の文字だけを使用する必要があります。 無効な文字は、このメソッドの引数か、バッファーに書き込んでいた以前のメソッドの引数に含まれている可能性があります。 このような文字は、可能であれば文字エンティティ参照によってエスケープされます (たとえば、テキスト ノード内や属性値内で)。 ただし、文字エンティティの参照は、要素名と属性名、コメント、処理命令、または CDATA セクションでは使用できません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String)">
      <summary vsli:raw="Writes an element with the specified local name, namespace URI, and value.">指定されたローカル名、名前空間 URI、および値を使用して要素を書き込みます。</summary>
      <param name="localName" vsli:raw="The local name of the element.">要素のローカル名。</param>
      <param name="ns" vsli:raw="The namespace URI to associate with the element.">要素に関連付ける名前空間 URI。</param>
      <param name="value" vsli:raw="The value of the element.">要素の値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;localName&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt; or an empty string.  &#xA;  &#xA; -or-  &#xA;  &#xA; The parameter values are not valid.">
        <paramref name="localName" /> 値が <see langword="null" /> または空の文字列です。  

または - 
パラメーターの値が有効ではありません。</exception>
      <exception cref="T:System.Text.EncoderFallbackException" vsli:raw="There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.">有効な XML 文字であるが出力エンコーディングには有効でない文字がバッファー内にあります。 たとえば、出力エンコーディングが ASCII の場合、要素名と属性名には 0 ～ 127 の範囲の文字だけを使用する必要があります。 無効な文字は、このメソッドの引数か、バッファーに書き込んでいた以前のメソッドの引数に含まれている可能性があります。 このような文字は、可能であれば文字エンティティ参照によってエスケープされます (たとえば、テキスト ノード内や属性値内で)。 ただし、文字エンティティの参照は、要素名と属性名、コメント、処理命令、または CDATA セクションでは使用できません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Writes an element with the specified prefix, local name, namespace URI, and value.">指定されたプレフィックス、ローカル名、名前空間 URI、および値を使用して要素を書き込みます。</summary>
      <param name="prefix" vsli:raw="The prefix of the element.">要素のプレフィックス。</param>
      <param name="localName" vsli:raw="The local name of the element.">要素のローカル名。</param>
      <param name="ns" vsli:raw="The namespace URI of the element.">要素の名前空間 URI。</param>
      <param name="value" vsli:raw="The value of the element.">要素の値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;localName&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt; or an empty string.  &#xA;  &#xA; -or-  &#xA;  &#xA; The parameter values are not valid.">
        <paramref name="localName" /> 値が <see langword="null" /> または空の文字列です。  

または - 
パラメーターの値が有効ではありません。</exception>
      <exception cref="T:System.Text.EncoderFallbackException" vsli:raw="There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.">有効な XML 文字であるが出力エンコーディングには有効でない文字がバッファー内にあります。 たとえば、出力エンコーディングが ASCII の場合、要素名と属性名には 0 ～ 127 の範囲の文字だけを使用する必要があります。 無効な文字は、このメソッドの引数か、バッファーに書き込んでいた以前のメソッドの引数に含まれている可能性があります。 このような文字は、可能であれば文字エンティティ参照によってエスケープされます (たとえば、テキスト ノード内や属性値内で)。 ただし、文字エンティティの参照は、要素名と属性名、コメント、処理命令、または CDATA セクションでは使用できません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementStringAsync(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Asynchronously writes an element with the specified prefix, local name, namespace URI, and value.">指定されたプレフィックス、ローカル名、名前空間 URI、および値を使用して要素を非同期に書き込みます。</summary>
      <param name="prefix" vsli:raw="The prefix of the element.">要素のプレフィックス。</param>
      <param name="localName" vsli:raw="The local name of the element.">要素のローカル名。</param>
      <param name="ns" vsli:raw="The namespace URI of the element.">要素の名前空間 URI。</param>
      <param name="value" vsli:raw="The value of the element.">要素の値。</param>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteElementString&quot; /&gt; operation.">非同期の <see langword="WriteElementString" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndAttribute">
      <summary vsli:raw="When overridden in a derived class, closes the previous &lt;see cref=&quot;M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)&quot; /&gt; call.">派生クラスでオーバーライドされると、前の <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> 呼び出しを閉じます。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndAttributeAsync">
      <summary vsli:raw="Asynchronously closes the previous &lt;see cref=&quot;M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)&quot; /&gt; call.">前の <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> 呼び出しを非同期に閉じます。</summary>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteEndAttribute&quot; /&gt; operation.">非同期の <see langword="WriteEndAttribute" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndDocument">
      <summary vsli:raw="When overridden in a derived class, closes any open elements or attributes and puts the writer back in the Start state.">派生クラスでオーバーライドされると、開いている任意の要素または属性を閉じ、ライターを Start 状態に戻します。</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="The XML document is invalid.">XML ドキュメントが無効です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndDocumentAsync">
      <summary vsli:raw="Asynchronously closes any open elements or attributes and puts the writer back in the Start state.">開いている要素または属性を非同期に閉じ、ライターを Start 状態に戻します。</summary>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteEndDocument&quot; /&gt; operation.">非同期の <see langword="WriteEndDocument" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。
または
<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndElement">
      <summary vsli:raw="When overridden in a derived class, closes one element and pops the corresponding namespace scope.">派生クラスでオーバーライドされると、1 つの要素を閉じ、対応する名前空間スコープをポップします。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This results in an invalid XML document.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">結果が無効な XML ドキュメントになります。

または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndElementAsync">
      <summary vsli:raw="Asynchronously closes one element and pops the corresponding namespace scope.">1 つの要素を非同期に閉じ、対応する名前空間スコープをポップします。</summary>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteEndElement&quot; /&gt; operation.">非同期の <see langword="WriteEndElement" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEntityRef(System.String)">
      <summary vsli:raw="When overridden in a derived class, writes out an entity reference as &lt;see langword=&quot;&amp;amp;name;&quot; /&gt;.">派生クラスでオーバーライドされると、<see langword="&amp;name;" /> などのエンティティ参照を書き込みます。</summary>
      <param name="name" vsli:raw="The name of the entity reference.">エンティティ参照の名前。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;.">
        <paramref name="name" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEntityRefAsync(System.String)">
      <summary vsli:raw="Asynchronously writes out an entity reference as &lt;see langword=&quot;&amp;amp;name;&quot; /&gt;.">エンティティ参照を <see langword="&amp;name;" /> として非同期的に書き込みます。</summary>
      <param name="name" vsli:raw="The name of the entity reference.">エンティティ参照の名前。</param>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteEntityRef&quot; /&gt; operation.">非同期の <see langword="WriteEntityRef" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。
または
<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteFullEndElement">
      <summary vsli:raw="When overridden in a derived class, closes one element and pops the corresponding namespace scope.">派生クラスでオーバーライドされると、1 つの要素を閉じ、対応する名前空間スコープをポップします。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteFullEndElementAsync">
      <summary vsli:raw="Asynchronously closes one element and pops the corresponding namespace scope.">1 つの要素を非同期に閉じ、対応する名前空間スコープをポップします。</summary>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteFullEndElement&quot; /&gt; operation.">非同期の <see langword="WriteFullEndElement" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。
または
<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteName(System.String)">
      <summary vsli:raw="When overridden in a derived class, writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation (https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).">派生クラスでオーバーライドされると、指定した名前を書き込み、その名前が W3C 勧告『XML 1.0』(https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)) に準拠した有効な名前であるようにします。</summary>
      <param name="name" vsli:raw="The name to write.">書き込む名前。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not a valid XML name; or &lt;paramref name=&quot;name&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;.">
        <paramref name="name" /> が有効な XML 名ではありません。または、<paramref name="name" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNameAsync(System.String)">
      <summary vsli:raw="Asynchronously writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation (https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).">指定した名前が W3C 勧告『XML 1.0』(https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)) に準拠した有効な名前であることを確認し、それを非同期に書き込みます。</summary>
      <param name="name" vsli:raw="The name to write.">書き込む名前。</param>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteName&quot; /&gt; operation.">非同期の <see langword="WriteName" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNmToken(System.String)">
      <summary vsli:raw="When overridden in a derived class, writes out the specified name, ensuring it is a valid NmToken according to the W3C XML 1.0 recommendation (https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).">派生クラスでオーバーライドされると、指定した名前を書き込み、その名前が W3C 勧告『XML 1.0』(https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)) に準拠した有効な NmToken であるようにします。</summary>
      <param name="name" vsli:raw="The name to write.">書き込む名前。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not a valid NmToken; or &lt;paramref name=&quot;name&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;.">
        <paramref name="name" /> が有効な NmToken ではありません。または、<paramref name="name" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNmTokenAsync(System.String)">
      <summary vsli:raw="Asynchronously writes out the specified name, ensuring it is a valid NmToken according to the W3C XML 1.0 recommendation (https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).">指定した名前が W3C 勧告『XML 1.0』(https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)) に準拠した有効な NmToken であることを確認し、それを非同期に書き込みます。</summary>
      <param name="name" vsli:raw="The name to write.">書き込む名前。</param>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteNmToken&quot; /&gt; operation.">非同期の <see langword="WriteNmToken" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, copies everything from the reader to the writer and moves the reader to the start of the next sibling.">派生クラスでオーバーライドされると、リーダーのデータをすべてライターにコピーし、リーダーを次の兄弟の開始位置に移動します。</summary>
      <param name="reader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to read from.">読み取り元の <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="defattr" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to copy the default attributes from the &lt;see langword=&quot;XmlReader&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="XmlReader" /> の既定の属性をコピーする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="reader" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; contains invalid characters.">
        <paramref name="reader" /> に無効な文字が含まれています。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNode(System.Xml.XPath.XPathNavigator,System.Boolean)">
      <summary vsli:raw="Copies everything from the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object to the writer. The position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; remains unchanged.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトからライターにすべてをコピーします。 <see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</summary>
      <param name="navigator" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to copy from.">コピー元の <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="defattr" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to copy the default attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">既定の属性をコピーする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;navigator&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="navigator" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XmlReader,System.Boolean)">
      <summary vsli:raw="Asynchronously copies everything from the reader to the writer and moves the reader to the start of the next sibling.">派生クラスでオーバーライドされると、リーダーのデータをすべてライターに非同期にコピーし、リーダーを次の兄弟の開始位置に移動します。</summary>
      <param name="reader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to read from.">読み取り元の <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="defattr" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to copy the default attributes from the &lt;see langword=&quot;XmlReader&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="XmlReader" /> の既定の属性をコピーする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteNode&quot; /&gt; operation.">非同期の <see langword="WriteNode" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XPath.XPathNavigator,System.Boolean)">
      <summary vsli:raw="Asynchronously copies everything from the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object to the writer. The position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; remains unchanged.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトのすべてをライターに非同期にコピーします。 <see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</summary>
      <param name="navigator" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to copy from.">コピー元の <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="defattr" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to copy the default attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">既定の属性をコピーする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteNode&quot; /&gt; operation.">非同期の <see langword="WriteNode" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。
または
<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary vsli:raw="When overridden in a derived class, writes out a processing instruction with a space between the name and text as follows: &amp;lt;?name text?&amp;gt;.">派生クラスでオーバーライドされると、名前とテキストの間にスペースがある処理命令を、次のように非同期的に書き込みます: &lt;?name text?&gt;。</summary>
      <param name="name" vsli:raw="The name of the processing instruction.">処理命令の名前。</param>
      <param name="text" vsli:raw="The text to include in the processing instruction.">処理命令に含めるテキスト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The text would result in a non-well formed XML document.  &#xA;  &#xA; &lt;paramref name=&quot;name&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;.  &#xA;  &#xA; This method is being used to create an XML declaration after &lt;see cref=&quot;M:System.Xml.XmlWriter.WriteStartDocument&quot; /&gt; has already been called.">テキストは、非整形式の XML ドキュメントになります。  
 <paramref name="name" /> が <see langword="null" /> または <see langword="String.Empty" /> です。  
このメソッドは、<see cref="M:System.Xml.XmlWriter.WriteStartDocument" /> が呼び出された後に XML 宣言を作成するために使用されています。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteProcessingInstructionAsync(System.String,System.String)">
      <summary vsli:raw="Asynchronously writes out a processing instruction with a space between the name and text as follows: &amp;lt;?name text?&amp;gt;.">名前とテキストの間にスペースがある処理命令を、次のように非同期的に書き込みます: &lt;?name text?&gt;。</summary>
      <param name="name" vsli:raw="The name of the processing instruction.">処理命令の名前。</param>
      <param name="text" vsli:raw="The text to include in the processing instruction.">処理命令に含めるテキスト。</param>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteProcessingInstruction&quot; /&gt; operation.">非同期の <see langword="WriteProcessingInstruction" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)">
      <summary vsli:raw="When overridden in a derived class, writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.">派生クラスでオーバーライドされると、名前空間の限定名を書き込みます。 このメソッドは、指定した名前空間のスコープ内にあるプレフィックスを検索します。</summary>
      <param name="localName" vsli:raw="The local name to write.">書き込むローカル名。</param>
      <param name="ns" vsli:raw="The namespace URI for the name.">名前の名前空間 URI。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;localName&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;.  &#xA;  &#xA; &lt;paramref name=&quot;localName&quot; /&gt; is not a valid name.">
        <paramref name="localName" /> が <see langword="null" /> または <see langword="String.Empty" /> です。  
 <paramref name="localName" /> が有効な名前ではありません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteQualifiedNameAsync(System.String,System.String)">
      <summary vsli:raw="Asynchronously writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.">名前空間の修飾名を非同期に書き込みます。 このメソッドは、指定した名前空間のスコープ内にあるプレフィックスを検索します。</summary>
      <param name="localName" vsli:raw="The local name to write.">書き込むローカル名。</param>
      <param name="ns" vsli:raw="The namespace URI for the name.">名前の名前空間 URI。</param>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteQualifiedName&quot; /&gt; operation.">非同期の <see langword="WriteQualifiedName" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。
または
<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="When overridden in a derived class, writes raw markup manually from a character buffer.">派生クラスでオーバーライドされると、手動で文字バッファーから生のマークアップを書き込みます。</summary>
      <param name="buffer" vsli:raw="Character array containing the text to write.">書き込むテキストを格納している文字配列。</param>
      <param name="index" vsli:raw="The position within the buffer indicating the start of the text to write.">書き込むテキストの開始を示すバッファー内の位置。</param>
      <param name="count" vsli:raw="The number of characters to write.">書き込む文字数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The buffer length minus &lt;paramref name=&quot;index&quot; /&gt; is less than &lt;paramref name=&quot;count&quot; /&gt;.">
        <paramref name="index" /> または <paramref name="count" /> が 0 未満です。  

または - 
バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRaw(System.String)">
      <summary vsli:raw="When overridden in a derived class, writes raw markup manually from a string.">派生クラスでオーバーライドされると、手動で文字列から生のマークアップを書き込みます。</summary>
      <param name="data" vsli:raw="String containing the text to write.">書き込むテキストを格納している文字列。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;data&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;.">
        <paramref name="data" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRawAsync(System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="Asynchronously writes raw markup manually from a character buffer.">文字バッファーから手動で生のマークアップを非同期に書き込みます。</summary>
      <param name="buffer" vsli:raw="Character array containing the text to write.">書き込むテキストを格納している文字配列。</param>
      <param name="index" vsli:raw="The position within the buffer indicating the start of the text to write.">書き込むテキストの開始を示すバッファー内の位置。</param>
      <param name="count" vsli:raw="The number of characters to write.">書き込む文字数。</param>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteRaw&quot; /&gt; operation.">非同期の <see langword="WriteRaw" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRawAsync(System.String)">
      <summary vsli:raw="Asynchronously writes raw markup manually from a string.">文字列から手動で生のマークアップを非同期に書き込みます。</summary>
      <param name="data" vsli:raw="String containing the text to write.">書き込むテキストを格納している文字列。</param>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteRaw&quot; /&gt; operation.">非同期の <see langword="WriteRaw" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String)">
      <summary vsli:raw="Writes the start of an attribute with the specified local name.">指定されたローカル名を使用して属性の開始を書き込みます。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">属性のローカル名。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The writer is closed.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">ライターが閉じています。

または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Text.EncoderFallbackException" vsli:raw="There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.">有効な XML 文字であるが出力エンコーディングには有効でない文字がバッファー内にあります。 たとえば、出力エンコーディングが ASCII の場合、要素名と属性名には 0 ～ 127 の範囲の文字だけを使用する必要があります。 無効な文字は、このメソッドの引数か、バッファーに書き込んでいた以前のメソッドの引数に含まれている可能性があります。 このような文字は、可能であれば文字エンティティ参照によってエスケープされます (たとえば、テキスト ノード内や属性値内で)。 ただし、文字エンティティの参照は、要素名と属性名、コメント、処理命令、または CDATA セクションでは使用できません。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)">
      <summary vsli:raw="Writes the start of an attribute with the specified local name and namespace URI.">指定されたローカル名および名前空間 URI を使用して属性の開始を書き込みます。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">属性のローカル名。</param>
      <param name="ns" vsli:raw="The namespace URI of the attribute.">属性の名前空間 URI。</param>
      <exception cref="T:System.Text.EncoderFallbackException" vsli:raw="There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.">有効な XML 文字であるが出力エンコーディングには有効でない文字がバッファー内にあります。 たとえば、出力エンコーディングが ASCII の場合、要素名と属性名には 0 ～ 127 の範囲の文字だけを使用する必要があります。 無効な文字は、このメソッドの引数か、バッファーに書き込んでいた以前のメソッドの引数に含まれている可能性があります。 このような文字は、可能であれば文字エンティティ参照によってエスケープされます (たとえば、テキスト ノード内や属性値内で)。 ただし、文字エンティティの参照は、要素名と属性名、コメント、処理命令、または CDATA セクションでは使用できません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary vsli:raw="When overridden in a derived class, writes the start of an attribute with the specified prefix, local name, and namespace URI.">派生クラスでオーバーライドされると、指定されたプリフィックス、ローカル名、および名前空間 URI を使用して属性の開始を書き込みます。</summary>
      <param name="prefix" vsli:raw="The namespace prefix of the attribute.">属性の名前空間プレフィックス。</param>
      <param name="localName" vsli:raw="The local name of the attribute.">属性のローカル名。</param>
      <param name="ns" vsli:raw="The namespace URI for the attribute.">属性の名前空間 URI。</param>
      <exception cref="T:System.Text.EncoderFallbackException" vsli:raw="There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.">有効な XML 文字であるが出力エンコーディングには有効でない文字がバッファー内にあります。 たとえば、出力エンコーディングが ASCII の場合、要素名と属性名には 0 ～ 127 の範囲の文字だけを使用する必要があります。 無効な文字は、このメソッドの引数か、バッファーに書き込んでいた以前のメソッドの引数に含まれている可能性があります。 このような文字は、可能であれば文字エンティティ参照によってエスケープされます (たとえば、テキスト ノード内や属性値内で)。 ただし、文字エンティティの参照は、要素名と属性名、コメント、処理命令、または CDATA セクションでは使用できません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttributeAsync(System.String,System.String,System.String)">
      <summary vsli:raw="Asynchronously writes the start of an attribute with the specified prefix, local name, and namespace URI.">指定されたプレフィックス、ローカル名、および名前空間 URI を使用して属性の開始を非同期に書き込みます。</summary>
      <param name="prefix" vsli:raw="The namespace prefix of the attribute.">属性の名前空間プレフィックス。</param>
      <param name="localName" vsli:raw="The local name of the attribute.">属性のローカル名。</param>
      <param name="ns" vsli:raw="The namespace URI for the attribute.">属性の名前空間 URI。</param>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteStartAttribute&quot; /&gt; operation.">非同期の <see langword="WriteStartAttribute" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。
または
<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocument">
      <summary vsli:raw="When overridden in a derived class, writes the XML declaration with the version &quot;1.0&quot;.">派生クラスでオーバーライドされると、バージョン "1.0" の XML 宣言を書き込みます。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This is not the first write method called after the constructor.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">これは、コンストラクターの後に呼び出された最初の書き込みメソッドではありません。

または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocument(System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, writes the XML declaration with the version &quot;1.0&quot; and the standalone attribute.">派生クラスでオーバーライドされると、バージョン "1.0" の XML 宣言とスタンドアロン属性を書き込みます。</summary>
      <param name="standalone" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, it writes &quot;standalone=yes&quot;; if &lt;see langword=&quot;false&quot; /&gt;, it writes &quot;standalone=no&quot;.">
        <see langword="true" /> の場合は "standalone=yes"、<see langword="false" /> の場合は "standalone=no" を書き込みます。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This is not the first write method called after the constructor.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">これは、コンストラクターの後に呼び出された最初の書き込みメソッドではありません。

または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocumentAsync">
      <summary vsli:raw="Asynchronously writes the XML declaration with the version &quot;1.0&quot;.">バージョン "1.0" で XML 宣言を非同期に書き込みます。</summary>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteStartDocument&quot; /&gt; operation.">非同期の <see langword="WriteStartDocument" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。
または
<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocumentAsync(System.Boolean)">
      <summary vsli:raw="Asynchronously writes the XML declaration with the version &quot;1.0&quot; and the standalone attribute.">バージョン "1.0" とスタントアロン属性を使用して XML 宣言を非同期に書き込みます。</summary>
      <param name="standalone" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, it writes &quot;standalone=yes&quot;; if &lt;see langword=&quot;false&quot; /&gt;, it writes &quot;standalone=no&quot;.">
        <see langword="true" /> の場合は "standalone=yes"、<see langword="false" /> の場合は "standalone=no" を書き込みます。</param>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteStartDocument&quot; /&gt; operation.">非同期の <see langword="WriteStartDocument" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。
または
<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String)">
      <summary vsli:raw="When overridden in a derived class, writes out a start tag with the specified local name.">派生クラスでオーバーライドされると、指定したローカル名の開始タグを書き込みます。</summary>
      <param name="localName" vsli:raw="The local name of the element.">要素のローカル名。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The writer is closed.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">ライターが閉じています。

または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Text.EncoderFallbackException" vsli:raw="There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.">有効な XML 文字であるが出力エンコーディングには有効でない文字がバッファー内にあります。 たとえば、出力エンコーディングが ASCII の場合、要素名と属性名には 0 ～ 127 の範囲の文字だけを使用する必要があります。 無効な文字は、このメソッドの引数か、バッファーに書き込んでいた以前のメソッドの引数に含まれている可能性があります。 このような文字は、可能であれば文字エンティティ参照によってエスケープされます (たとえば、テキスト ノード内や属性値内で)。 ただし、文字エンティティの参照は、要素名と属性名、コメント、処理命令、または CDATA セクションでは使用できません。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String)">
      <summary vsli:raw="When overridden in a derived class, writes the specified start tag and associates it with the given namespace.">派生クラスでオーバーライドされると、指定した開始タグを書き込み、指定した名前空間に関連付けます。</summary>
      <param name="localName" vsli:raw="The local name of the element.">要素のローカル名。</param>
      <param name="ns" vsli:raw="The namespace URI to associate with the element. If this namespace is already in scope and has an associated prefix, the writer automatically writes that prefix also.">要素に関連付ける名前空間 URI。 この名前空間が既にスコープ内にあり、関連付けられたプリフィックスを持つ場合、ライターは、そのプリフィックスも自動的に書き込みます。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The writer is closed.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">ライターが閉じています。
または
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Text.EncoderFallbackException" vsli:raw="There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.">有効な XML 文字であるが出力エンコーディングには有効でない文字がバッファー内にあります。 たとえば、出力エンコーディングが ASCII の場合、要素名と属性名には 0 ～ 127 の範囲の文字だけを使用する必要があります。 無効な文字は、このメソッドの引数か、バッファーに書き込んでいた以前のメソッドの引数に含まれている可能性があります。 このような文字は、可能であれば文字エンティティ参照によってエスケープされます (たとえば、テキスト ノード内や属性値内で)。 ただし、文字エンティティの参照は、要素名と属性名、コメント、処理命令、または CDATA セクションでは使用できません。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary vsli:raw="When overridden in a derived class, writes the specified start tag and associates it with the given namespace and prefix.">派生クラスでオーバーライドされると、指定した開始タグを書き込み、指定した名前空間とプリフィックスに関連付けます。</summary>
      <param name="prefix" vsli:raw="The namespace prefix of the element.">要素の名前空間プリフィックス。</param>
      <param name="localName" vsli:raw="The local name of the element.">要素のローカル名。</param>
      <param name="ns" vsli:raw="The namespace URI to associate with the element.">要素に関連付ける名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The writer is closed.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">ライターが閉じています。

または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Text.EncoderFallbackException" vsli:raw="There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.">有効な XML 文字であるが出力エンコーディングには有効でない文字がバッファー内にあります。 たとえば、出力エンコーディングが ASCII の場合、要素名と属性名には 0 ～ 127 の範囲の文字だけを使用する必要があります。 無効な文字は、このメソッドの引数か、バッファーに書き込んでいた以前のメソッドの引数に含まれている可能性があります。 このような文字は、可能であれば文字エンティティ参照によってエスケープされます (たとえば、テキスト ノード内や属性値内で)。 ただし、文字エンティティの参照は、要素名と属性名、コメント、処理命令、または CDATA セクションでは使用できません。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElementAsync(System.String,System.String,System.String)">
      <summary vsli:raw="Asynchronously writes the specified start tag and associates it with the given namespace and prefix.">指定した開始タグを非同期に書き込み、指定した名前空間とプレフィックスに関連付けます。</summary>
      <param name="prefix" vsli:raw="The namespace prefix of the element.">要素の名前空間プリフィックス。</param>
      <param name="localName" vsli:raw="The local name of the element.">要素のローカル名。</param>
      <param name="ns" vsli:raw="The namespace URI to associate with the element.">要素に関連付ける名前空間 URI。</param>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteStartElement&quot; /&gt; operation.">非同期の <see langword="WriteStartElement" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlWriter.WriteState">
      <summary vsli:raw="When overridden in a derived class, gets the state of the writer.">派生クラスでオーバーライドされると、ライターの状態を取得します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.WriteState&quot; /&gt; values.">
        <see cref="T:System.Xml.WriteState" /> 値のいずれか 1 つ。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteString(System.String)">
      <summary vsli:raw="When overridden in a derived class, writes the given text content.">派生クラスでオーバーライドされると、指定したテキスト内容を書き込みます。</summary>
      <param name="text" vsli:raw="The text to write.">書き込むテキスト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The text string contains an invalid surrogate pair.">テキスト文字列に、無効なサロゲート ペアが含まれています。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStringAsync(System.String)">
      <summary vsli:raw="Asynchronously writes the given text content.">指定したテキストの内容を非同期に書き込みます。</summary>
      <param name="text" vsli:raw="The text to write.">書き込むテキスト。</param>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteString&quot; /&gt; operation.">非同期の <see langword="WriteString" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。
または
<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary vsli:raw="When overridden in a derived class, generates and writes the surrogate character entity for the surrogate character pair.">派生クラスでオーバーライドされると、サロゲート文字ペアのサロゲート文字エンティティを生成し、書き込みます。</summary>
      <param name="lowChar" vsli:raw="The low surrogate. This must be a value between 0xDC00 and 0xDFFF.">下位サロゲート。 この値は、0xDC00 から 0xDFFF の範囲内にある必要があります。</param>
      <param name="highChar" vsli:raw="The high surrogate. This must be a value between 0xD800 and 0xDBFF.">上位サロゲート。 この値は、0xD800 から 0xDBFF の範囲内にある必要があります。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An invalid surrogate character pair was passed.">無効なサロゲート文字ペアが渡されました。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteSurrogateCharEntityAsync(System.Char,System.Char)">
      <summary vsli:raw="Asynchronously generates and writes the surrogate character entity for the surrogate character pair.">サロゲート文字ペアのサロゲート文字エンティティを非同期に生成して書き込みます。</summary>
      <param name="lowChar" vsli:raw="The low surrogate. This must be a value between 0xDC00 and 0xDFFF.">下位サロゲート。 この値は、0xDC00 から 0xDFFF の範囲内にある必要があります。</param>
      <param name="highChar" vsli:raw="The high surrogate. This must be a value between 0xD800 and 0xDBFF.">上位サロゲート。 この値は、0xD800 から 0xDBFF の範囲内にある必要があります。</param>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteSurrogateCharEntity&quot; /&gt; operation.">非同期の <see langword="WriteSurrogateCharEntity" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Boolean)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value.">
        <see cref="T:System.Boolean" /> 値を書き込みます。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value to write.">書き込む <see cref="T:System.Boolean" /> 値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An invalid value was specified.">無効な値が指定されました。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.DateTime)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value.">
        <see cref="T:System.DateTime" /> 値を書き込みます。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value to write.">書き込む <see cref="T:System.DateTime" /> 値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An invalid value was specified.">無効な値が指定されました。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.DateTimeOffset)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value.">
        <see cref="T:System.DateTimeOffset" /> 値を書き込みます。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value to write.">書き込む <see cref="T:System.DateTimeOffset" /> 値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Decimal)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value.">
        <see cref="T:System.Decimal" /> 値を書き込みます。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value to write.">書き込む <see cref="T:System.Decimal" /> 値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An invalid value was specified.">無効な値が指定されました。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Double)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Double&quot; /&gt; value.">
        <see cref="T:System.Double" /> 値を書き込みます。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Double&quot; /&gt; value to write.">書き込む <see cref="T:System.Double" /> 値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An invalid value was specified.">無効な値が指定されました。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Int32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Int32&quot; /&gt; value.">
        <see cref="T:System.Int32" /> 値を書き込みます。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Int32&quot; /&gt; value to write.">書き込む <see cref="T:System.Int32" /> 値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An invalid value was specified.">無効な値が指定されました。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Int64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Int64&quot; /&gt; value.">
        <see cref="T:System.Int64" /> 値を書き込みます。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Int64&quot; /&gt; value to write.">書き込む <see cref="T:System.Int64" /> 値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An invalid value was specified.">無効な値が指定されました。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Object)">
      <summary vsli:raw="Writes the object value.">オブジェクト値を書き込みます。</summary>
      <param name="value" vsli:raw="The object value to write.  &#xA;  &#xA; Note With the release of the .NET Framework 3.5, this method accepts &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; as a parameter.">書き込むオブジェクト値。  
 メモ .NET Framework 3.5 のリリースでは、このメソッドは <see cref="T:System.DateTimeOffset" /> をパラメーターとして受け入れます。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An invalid value was specified.">無効な値が指定されました。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The writer is closed or in error state.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">ライターが閉じているかエラー状態です。
または
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Single)">
      <summary vsli:raw="Writes a single-precision floating-point number.">単精度浮動小数点数を書き込みます。</summary>
      <param name="value" vsli:raw="The single-precision floating-point number to write.">書き込む単精度浮動小数点数。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An invalid value was specified.">無効な値が指定されました。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.String)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.String&quot; /&gt; value.">
        <see cref="T:System.String" /> 値を書き込みます。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value to write.">書き込む <see cref="T:System.String" /> 値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An invalid value was specified.">無効な値が指定されました。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteWhitespace(System.String)">
      <summary vsli:raw="When overridden in a derived class, writes out the given white space.">派生クラスでオーバーライドされると、指定した空白を書き込みます。</summary>
      <param name="ws" vsli:raw="The string of white space characters.">空白文字の文字列。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The string contains non-white space characters.">文字列に空白以外の文字が含まれています。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteWhitespaceAsync(System.String)">
      <summary vsli:raw="Asynchronously writes out the given white space.">指定した空白を非同期に書き込みます。</summary>
      <param name="ws" vsli:raw="The string of white space characters.">空白文字の文字列。</param>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteWhitespace&quot; /&gt; operation.">非同期の <see langword="WriteWhitespace" /> 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlWriter.XmlLang">
      <summary vsli:raw="When overridden in a derived class, gets the current &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">派生クラスでオーバーライドされると、現在の <see langword="xml:lang" /> スコープを取得します。</summary>
      <returns vsli:raw="The current &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">現在の <see langword="xml:lang" /> スコープ。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlWriter.XmlSpace">
      <summary vsli:raw="When overridden in a derived class, gets an &lt;see cref=&quot;T:System.Xml.XmlSpace&quot; /&gt; representing the current &lt;see langword=&quot;xml:space&quot; /&gt; scope.">派生クラスでオーバーライドされると、現在の <see langword="xml:space" /> スコープを表す <see cref="T:System.Xml.XmlSpace" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see langword=&quot;XmlSpace&quot; /&gt; representing the current &lt;see langword=&quot;xml:space&quot; /&gt; scope.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Meaning&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;None&quot; /&gt;&lt;/term&gt;&lt;description&gt; This is the default if no &lt;see langword=&quot;xml:space&quot; /&gt; scope exists.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Default&quot; /&gt;&lt;/term&gt;&lt;description&gt; The current scope is &lt;see langword=&quot;xml:space&quot; /&gt;=&quot;default&quot;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Preserve&quot; /&gt;&lt;/term&gt;&lt;description&gt; The current scope is &lt;see langword=&quot;xml:space&quot; /&gt;=&quot;preserve&quot;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">現在の <see langword="XmlSpace" /> スコープを表す <see langword="xml:space" />。  
  [値] 
  説明 
 <see langword="None" /><see langword="xml:space" /> スコープが存在しない場合は、これが既定値になります。  

 <see langword="Default" /> 現在のスコープは、<see langword="xml:space" />="default" です。  

 <see langword="Preserve" /> 現在のスコープは、<see langword="xml:space" />="preserve" です。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="T:System.Xml.XmlWriterSettings">
      <summary vsli:raw="Specifies a set of features to support on the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object created by the &lt;see cref=&quot;Overload:System.Xml.XmlWriter.Create&quot; /&gt; method.">
        <see cref="T:System.Xml.XmlWriter" /> メソッドで作成された <see cref="Overload:System.Xml.XmlWriter.Create" /> オブジェクトでサポートする一連の機能を指定します。</summary>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlWriterSettings" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Async">
      <summary vsli:raw="Gets or sets a value that indicates whether asynchronous &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; methods can be used on a particular &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance.">非同期 <see cref="T:System.Xml.XmlWriter" /> メソッドを <see cref="T:System.Xml.XmlWriter" /> の特定のインスタンスで使用できるかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if asynchronous methods can be used; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">非同期メソッドを使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.CheckCharacters">
      <summary vsli:raw="Gets or sets a value that indicates whether the XML writer should check to ensure that all characters in the document conform to the &quot;2.2 Characters&quot; section of the W3C XML 1.0 Recommendation.">ドキュメント内のすべての文字が W3C の「XML 1.0 Recommendation」(XML 1.0 勧告) の「2.2 Characters」(2.2 文字) に準拠していることを XML ライターがチェックする必要があるかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to do character checking; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">文字をチェックする場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.Clone">
      <summary vsli:raw="Creates a copy of the &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; instance.">
        <see cref="T:System.Xml.XmlWriterSettings" /> インスタンスのコピーを作成します。</summary>
      <returns vsli:raw="The cloned &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object.">複製された <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.CloseOutput">
      <summary vsli:raw="Gets or sets a value indicating whether the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; should also close the underlying stream or &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; when the &lt;see cref=&quot;M:System.Xml.XmlWriter.Close&quot; /&gt; method is called.">
        <see cref="T:System.Xml.XmlWriter" /> メソッドを呼び出したときに、<see cref="T:System.IO.TextWriter" /> が、基になるストリームまたは <see cref="M:System.Xml.XmlWriter.Close" /> も閉じる必要があるかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to also close the underlying stream or &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">基になるストリームまたは <see cref="T:System.IO.TextWriter" /> も閉じる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.ConformanceLevel">
      <summary vsli:raw="Gets or sets the level of conformance that the XML writer checks the XML output for.">XML ライターが XML 出力をチェックする準拠のレベルを取得または設定します。</summary>
      <returns vsli:raw="One of the enumeration values that specifies the level of conformance (document, fragment, or automatic detection). The default is &lt;see cref=&quot;F:System.Xml.ConformanceLevel.Document&quot; /&gt;.">準拠のレベル (ドキュメント、フラグメント、自動検出) を指定する列挙値のいずれか。 既定値は、<see cref="F:System.Xml.ConformanceLevel.Document" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.DoNotEscapeUriAttributes">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; does not escape URI attributes.">
        <see cref="T:System.Xml.XmlWriter" /> が URI 属性をエスケープしないかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; does not escape URI attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />が URI 属性をエスケープしない場合は。 <see langword="false" />それ以外の場合は。 <see cref="T:System.Xml.XmlWriter" /> 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Encoding">
      <summary vsli:raw="Gets or sets the type of text encoding to use.">使用するテキスト エンコーディングの種類を取得または設定します。</summary>
      <returns vsli:raw="The text encoding to use. The default is &lt;see langword=&quot;Encoding.UTF8&quot; /&gt;.">使用するテキスト エンコーディング。 既定値は、<see langword="Encoding.UTF8" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Indent">
      <summary vsli:raw="Gets or sets a value indicating whether to indent elements.">要素にインデントを設定するかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to write individual elements on new lines and indent; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">各要素を新しい行に書き込んでインデントを設定する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.IndentChars">
      <summary vsli:raw="Gets or sets the character string to use when indenting. This setting is used when the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Indent&quot; /&gt; property is set to &lt;see langword=&quot;true&quot; /&gt;.">インデント処理を行うときに使用する文字列を取得または設定します。 この設定は、<see cref="P:System.Xml.XmlWriterSettings.Indent" /> プロパティが <see langword="true" /> に設定されている場合に使用します。</summary>
      <returns vsli:raw="The character string to use when indenting. This can be set to any string value. However, to ensure valid XML, you should specify only valid white space characters, such as space characters, tabs, carriage returns, or line feeds. The default is two spaces.">インデント処理を行うときに使用する文字列。 これには任意の文字列値を設定できます。 ただし、有効な XML にするには、空白、タブ、復帰、ライン フィードなどの有効な空白文字だけを指定する必要があります。 既定値は 2 つのスペースです。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The value assigned to the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.IndentChars&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="P:System.Xml.XmlWriterSettings.IndentChars" /> に代入された値が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NamespaceHandling">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; should remove duplicate namespace declarations when writing XML content. The default behavior is for the writer to output all namespace declarations that are present in the writer's namespace resolver.">XML コンテンツの書き込み時に、重複する名前空間宣言を <see cref="T:System.Xml.XmlWriter" /> で削除するかどうかを示す値を取得または設定します。 既定の動作では、ライターの名前空間リゾルバーに存在するすべての名前空間宣言がライターによって出力されます。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.NamespaceHandling&quot; /&gt; enumeration used to specify whether to remove duplicate namespace declarations in the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">
        <see cref="T:System.Xml.NamespaceHandling" /> で重複する名前空間宣言を削除するかどうかを指定するための <see cref="T:System.Xml.XmlWriter" /> 列挙体。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineChars">
      <summary vsli:raw="Gets or sets the character string to use for line breaks.">改行に使用する文字列を取得または設定します。</summary>
      <returns vsli:raw="The character string to use for line breaks. This can be set to any string value. However, to ensure valid XML, you should specify only valid white space characters, such as space characters, tabs, carriage returns, or line feeds. The default is &lt;c&gt;\r\n&lt;/c&gt; (carriage return, new line) for non-Unix platforms, and &lt;c&gt;\n&lt;/c&gt; (new line) for Unix platforms.">改行に使用する文字列。 これには任意の文字列値を設定できます。 ただし、有効な XML にするには、空白、タブ、復帰、ライン フィードなどの有効な空白文字だけを指定する必要があります。 既定値は<c>\r\n</c> (キャリッジリターン、改行) です。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The value assigned to the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.NewLineChars&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> に代入された値が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineHandling">
      <summary vsli:raw="Gets or sets a value indicating whether to normalize line breaks in the output.">出力内の改行を正規化するかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.NewLineHandling&quot; /&gt; values. The default is &lt;see cref=&quot;F:System.Xml.NewLineHandling.Replace&quot; /&gt;.">
        <see cref="T:System.Xml.NewLineHandling" /> 値のいずれか 1 つ。 既定値は、<see cref="F:System.Xml.NewLineHandling.Replace" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineOnAttributes">
      <summary vsli:raw="Gets or sets a value indicating whether to write attributes on a new line.">新しい行に属性を書き込むかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to write attributes on individual lines; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">個々の行に属性を書き込む場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。  
   
 <see cref="P:System.Xml.XmlWriterSettings.Indent" /> プロパティ値が <see langword="false" /> の場合、この設定は無効です。  

  

 <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" /> を <see langword="true" /> に設定すると、各属性は、新しい行にインデントを 1 レベル増やして記述されます。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration">
      <summary vsli:raw="Gets or sets a value indicating whether to omit an XML declaration.">XML 宣言を省略するかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to omit the XML declaration; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;, an XML declaration is written.">XML 宣言を省略する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> で、XML 宣言が書き込まれます。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.OutputMethod">
      <summary vsli:raw="Gets the method used to serialize the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; output.">
        <see cref="T:System.Xml.XmlWriter" /> 出力をシリアル化するために使用するメソッドを取得します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.XmlOutputMethod&quot; /&gt; values. The default is &lt;see cref=&quot;F:System.Xml.XmlOutputMethod.Xml&quot; /&gt;.">
        <see cref="T:System.Xml.XmlOutputMethod" /> 値のいずれか 1 つ。 既定値は、<see cref="F:System.Xml.XmlOutputMethod.Xml" /> です。</returns>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.Reset">
      <summary vsli:raw="Resets the members of the settings class to their default values.">設定クラスのメンバーを既定値にリセットします。</summary>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; will add closing tags to all unclosed element tags when the &lt;see cref=&quot;M:System.Xml.XmlWriter.Close&quot; /&gt; method is called.">
        <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されるときに <see cref="M:System.Xml.XmlWriter.Close" /> がすべての閉じられていない要素タグに終了タグを追加するかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all unclosed element tags will be closed out; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value is &lt;see langword=&quot;true&quot; /&gt;.">閉じられていない要素タグがすべて閉じられる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</returns>
    </member>
    <member name="T:System.Xml.XPath.IXPathNavigable">
      <summary vsli:raw="Provides an accessor to the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; class.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> クラスのアクセサーを提供します。</summary>
    </member>
    <member name="M:System.Xml.XPath.IXPathNavigable.CreateNavigator">
      <summary vsli:raw="Returns a new &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object.">新しい <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトを返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Xml.XPath.XmlCaseOrder">
      <summary vsli:raw="Specifies the sort order for uppercase and lowercase letters.">大文字と小文字の並べ替え順序を指定します。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.LowerFirst">
      <summary vsli:raw="Lowercase letters are sorted before uppercase letters.">小文字は、大文字の前に並べ替えられます。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.None">
      <summary vsli:raw="Ignore the case.">大文字と小文字の区別を無視します。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.UpperFirst">
      <summary vsli:raw="Uppercase letters are sorted before lowercase letters.">大文字は、小文字の前に並べ替えられます。</summary>
    </member>
    <member name="T:System.Xml.XPath.XmlDataType">
      <summary vsli:raw="Specifies the data type used to determine sort order.">並べ替え順序を決定するためのデータ型を指定します。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlDataType.Number">
      <summary vsli:raw="Values are sorted numerically.">値は数値順に並べ替えられます。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlDataType.Text">
      <summary vsli:raw="Values are sorted alphabetically.">値はアルファベット順に並べ替えられます。</summary>
    </member>
    <member name="T:System.Xml.XPath.XmlSortOrder">
      <summary vsli:raw="Specifies the sort order.">並べ替え順序を指定します。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlSortOrder.Ascending">
      <summary vsli:raw="Nodes are sorted in ascending order. For example, if the numbers 1,2,3, and 4 are sorted in ascending order, they appear as 1,2,3,4.">ノードは昇順に並べ替えられます。 たとえば、数字 1、2、3、4 を昇順に並べ替えると、1、2、3、4 となります。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlSortOrder.Descending">
      <summary vsli:raw="Nodes are sorted in descending order. For example, if the numbers 1,2,3, and 4 are sorted in descending order, they appear as, 4,3,2,1.">ノードは降順に並べ替えられます。 たとえば、数字 1、2、3、4 を降順に並べ替えると、4、3、2、1 となります。</summary>
    </member>
    <member name="T:System.Xml.XPath.XPathExpression">
      <summary vsli:raw="Provides a typed class that represents a compiled XPath expression.">コンパイル済みの XPath 式を表す、型指定されたクラスを提供します。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Collections.IComparer)">
      <summary vsli:raw="When overridden in a derived class, sorts the nodes selected by the XPath expression according to the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; object.">派生クラスでオーバーライドされた場合、XPath 式で選択されたノードを、指定された <see cref="T:System.Collections.IComparer" /> オブジェクトに従って並べ替えます。</summary>
      <param name="expr" vsli:raw="An object representing the sort key. This can be the &lt;see langword=&quot;string&quot; /&gt; value of the node or an &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; object with a compiled XPath expression.">並べ替えキーを表すオブジェクト。 これは、ノードの <see langword="string" /> 値、またはコンパイル済みの XPath 式を持つ <see cref="T:System.Xml.XPath.XPathExpression" /> オブジェクトです。</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; object that provides the specific data type comparisons for comparing two objects for equivalence.">2 つのオブジェクトが等しいかどうかを比較するために特定のデータ型を提供する <see cref="T:System.Collections.IComparer" /> オブジェクト。</param>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; or sort key includes a prefix and either an &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; is not provided, or the prefix cannot be found in the supplied &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;.">
        <see cref="T:System.Xml.XPath.XPathExpression" /> または並べ替えキーにプレフィックスが含まれ、<see cref="T:System.Xml.XmlNamespaceManager" /> が提供されていないか、提供された <see cref="T:System.Xml.XmlNamespaceManager" /> 内にプレフィックスが見つかりません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Xml.XPath.XmlSortOrder,System.Xml.XPath.XmlCaseOrder,System.String,System.Xml.XPath.XmlDataType)">
      <summary vsli:raw="When overridden in a derived class, sorts the nodes selected by the XPath expression according to the supplied parameters.">派生クラスでオーバーライドされた場合、XPath 式で選択されたノードを、提供されたパラメーターに従って並べ替えます。</summary>
      <param name="expr" vsli:raw="An object representing the sort key. This can be the &lt;see langword=&quot;string&quot; /&gt; value of the node or an &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; object with a compiled XPath expression.">並べ替えキーを表すオブジェクト。 これは、ノードの <see langword="string" /> 値、またはコンパイル済みの XPath 式を持つ <see cref="T:System.Xml.XPath.XPathExpression" /> オブジェクトです。</param>
      <param name="order" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XmlSortOrder&quot; /&gt; value indicating the sort order.">並べ替え順序を示す <see cref="T:System.Xml.XPath.XmlSortOrder" /> 値。</param>
      <param name="caseOrder" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XmlCaseOrder&quot; /&gt; value indicating how to sort uppercase and lowercase letters.">大文字または小文字で並べ替える方法を示す <see cref="T:System.Xml.XPath.XmlCaseOrder" /> 値。</param>
      <param name="lang" vsli:raw="The language to use for comparison. Uses the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; class that can be passed to the &lt;see cref=&quot;Overload:System.String.Compare&quot; /&gt; method for the language types, for example, &quot;us-en&quot; for U.S. English. If an empty string is specified, the system environment is used to determine the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;.">比較に使用する言語。 アメリカ英語の "us-en" など、言語種類について <see cref="Overload:System.String.Compare" /> メソッドに渡すことのできる <see cref="T:System.Globalization.CultureInfo" /> クラスを使用します。 空の文字列を指定した場合、システム環境の情報を使って <see cref="T:System.Globalization.CultureInfo" /> が決定されます。</param>
      <param name="dataType" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XmlDataType&quot; /&gt; value indicating the sort order for the data type.">データ型での並べ替え順序を示す <see cref="T:System.Xml.XPath.XmlDataType" /> 値。</param>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; or sort key includes a prefix and either an &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; is not provided, or the prefix cannot be found in the supplied &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;.">
        <see cref="T:System.Xml.XPath.XPathExpression" /> または並べ替えキーにプレフィックスが含まれ、<see cref="T:System.Xml.XmlNamespaceManager" /> が提供されていないか、提供された <see cref="T:System.Xml.XmlNamespaceManager" /> 内にプレフィックスが見つかりません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.Clone">
      <summary vsli:raw="When overridden in a derived class, returns a clone of this &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt;.">派生クラスでオーバーライドされた場合、この <see cref="T:System.Xml.XPath.XPathExpression" /> の複製を返します。</summary>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; object.">新しい <see cref="T:System.Xml.XPath.XPathExpression" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.Compile(System.String)">
      <summary vsli:raw="Compiles the XPath expression specified and returns an &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; object representing the XPath expression.">指定された XPath 式をコンパイルし、XPath 式を表す <see cref="T:System.Xml.XPath.XPathExpression" /> オブジェクトを返します。</summary>
      <param name="xpath" vsli:raw="An XPath expression.">XPath 式。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; object.">
        <see cref="T:System.Xml.XPath.XPathExpression" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The XPath expression parameter is not a valid XPath expression.">XPath 式パラメーターが有効な XPath 式ではありません。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression is not valid.">XPath 式が無効です。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.Compile(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary vsli:raw="Compiles the specified XPath expression, with the &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object specified for namespace resolution, and returns an &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; object that represents the XPath expression.">指定された XPath 式を、名前空間の解決用に指定された <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクトを使用してコンパイルし、XPath 式を表す <see cref="T:System.Xml.XPath.XPathExpression" /> オブジェクトを返します。</summary>
      <param name="xpath" vsli:raw="An XPath expression.">XPath 式。</param>
      <param name="nsResolver" vsli:raw="An object that implements the &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; interface for namespace resolution.">名前空間を解決するための <see cref="T:System.Xml.IXmlNamespaceResolver" /> インターフェイスを実装するオブジェクト。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; object.">
        <see cref="T:System.Xml.XPath.XPathExpression" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The XPath expression parameter is not a valid XPath expression.">XPath 式パラメーターが有効な XPath 式ではありません。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression is not valid.">XPath 式が無効です。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathExpression.Expression">
      <summary vsli:raw="When overridden in a derived class, gets a &lt;see langword=&quot;string&quot; /&gt; representation of the &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt;.">派生クラスでオーバーライドされた場合、<see cref="T:System.Xml.XPath.XPathExpression" /> の <see langword="string" /> 表現を取得します。</summary>
      <returns vsli:raw="A &lt;see langword=&quot;string&quot; /&gt; representation of the &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt;.">
        <see langword="string" /> の <see cref="T:System.Xml.XPath.XPathExpression" /> 表現。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathExpression.ReturnType">
      <summary vsli:raw="When overridden in a derived class, gets the result type of the XPath expression.">派生クラスでオーバーライドされた場合、XPath 式の結果型を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathResultType&quot; /&gt; value representing the result type of the XPath expression.">XPath 式の結果型を表す <see cref="T:System.Xml.XPath.XPathResultType" /> 値。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.IXmlNamespaceResolver)">
      <summary vsli:raw="When overridden in a derived class, specifies the &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object to use for namespace resolution.">派生クラスでオーバーライドされた場合、名前の解決に使用する <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクトを指定します。</summary>
      <param name="nsResolver" vsli:raw="An object that implements the &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; interface to use for namespace resolution.">名前空間を解決するために使用する <see cref="T:System.Xml.IXmlNamespaceResolver" /> インターフェイスを実装するオブジェクト。</param>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object parameter is not derived from &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt;.">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト パラメーターが <see cref="T:System.Xml.IXmlNamespaceResolver" /> から派生していません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)">
      <summary vsli:raw="When overridden in a derived class, specifies the &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; object to use for namespace resolution.">派生クラスでオーバーライドされた場合、名前の解決に使用する <see cref="T:System.Xml.XmlNamespaceManager" /> オブジェクトを指定します。</summary>
      <param name="nsManager" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; object to use for namespace resolution.">名前空間の解決に使用する <see cref="T:System.Xml.XmlNamespaceManager" /> オブジェクト。</param>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; object parameter is not derived from the &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlNamespaceManager" /> オブジェクト パラメーターが <see cref="T:System.Xml.XmlNamespaceManager" /> クラスから派生していません。</exception>
    </member>
    <member name="T:System.Xml.XPath.XPathItem">
      <summary vsli:raw="Represents an item in the XQuery 1.0 and XPath 2.0 Data Model.">XQuery 1.0 および XPath 2.0 データ モデルの項目を表します。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathItem.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XPath.XPathItem&quot; /&gt; class.">
        <see cref="T:System.Xml.XPath.XPathItem" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.IsNode">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether the item represents an XPath node or an atomic value.">派生クラスでオーバーライドされた場合、項目が XPath ノードと原子値のどちらであるかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item represents an XPath node; &lt;see langword=&quot;false&quot; /&gt; if the item represents an atomic value.">項目が XPath ノードを表す場合は <see langword="true" />。原子値を表す場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.TypedValue">
      <summary vsli:raw="When overridden in a derived class, gets the current item as a boxed object of the most appropriate .NET Framework 2.0 type according to its schema type.">派生クラスでオーバーライドされた場合、現在の項目を、そのスキーマ型に従って、最適な .NET Framework 2.0 型のボックス化変換されたオブジェクトとして取得します。</summary>
      <returns vsli:raw="The current item as a boxed object of the most appropriate .NET Framework type.">最適な .NET Framework 型のボックス化変換されたオブジェクトとして扱われた現在の項目。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.Value">
      <summary vsli:raw="When overridden in a derived class, gets the &lt;see langword=&quot;string&quot; /&gt; value of the item.">派生クラスでオーバーライドされた場合、項目の <see langword="string" /> 値を取得します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;string&quot; /&gt; value of the item.">項目の <see langword="string" /> 値。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathItem.ValueAs(System.Type)">
      <summary vsli:raw="Returns the item's value as the specified type.">項目の値を、指定した型にして返します。</summary>
      <param name="returnType" vsli:raw="The type to return the item value as.">返す項目の値に指定する型。</param>
      <returns vsli:raw="The value of the item as the type requested.">要求した型に変換された項目の値。</returns>
      <exception cref="T:System.FormatException" vsli:raw="The item's value is not in the correct format for the target type.">項目の値が、指定した型の正しい形式になっていません。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast is not valid.">試行されたキャストが無効です。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The attempted cast resulted in an overflow.">試行されたキャストで、オーバーフローが発生しました。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathItem.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary vsli:raw="When overridden in a derived class, returns the item's value as the type specified using the &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object specified to resolve namespace prefixes.">派生クラスでオーバーライドされた場合、名前空間プレフィックスの解決に指定された <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクトを使用して、項目の値を指定された型にして返します。</summary>
      <param name="returnType" vsli:raw="The type to return the item's value as.">返す項目の値に指定する型。</param>
      <param name="nsResolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object used to resolve namespace prefixes.">名前空間プレフィックスの解決に使用する <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
      <returns vsli:raw="The value of the item as the type requested.">要求した型に変換された項目の値。</returns>
      <exception cref="T:System.FormatException" vsli:raw="The item's value is not in the correct format for the target type.">項目の値が、指定した型の正しい形式になっていません。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast is not valid.">試行されたキャストが無効です。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The attempted cast resulted in an overflow.">試行されたキャストで、オーバーフローが発生しました。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsBoolean">
      <summary vsli:raw="When overridden in a derived class, gets the item's value as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">派生クラスでオーバーライドされた場合、項目の値を <see cref="T:System.Boolean" /> として取得します。</summary>
      <returns vsli:raw="The item's value as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">
        <see cref="T:System.Boolean" /> としての項目の値。</returns>
      <exception cref="T:System.FormatException" vsli:raw="The item's value is not in the correct format for the &lt;see cref=&quot;T:System.Boolean&quot; /&gt; type.">項目の値が、<see cref="T:System.Boolean" /> 型の正しい形式になっていません。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.Boolean&quot; /&gt; is not valid.">試行された <see cref="T:System.Boolean" /> へのキャストは無効です。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsDateTime">
      <summary vsli:raw="When overridden in a derived class, gets the item's value as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">派生クラスでオーバーライドされた場合、項目の値を <see cref="T:System.DateTime" /> として取得します。</summary>
      <returns vsli:raw="The item's value as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">
        <see cref="T:System.DateTime" /> としての項目の値。</returns>
      <exception cref="T:System.FormatException" vsli:raw="The item's value is not in the correct format for the &lt;see cref=&quot;T:System.DateTime&quot; /&gt; type.">項目の値が、<see cref="T:System.DateTime" /> 型の正しい形式になっていません。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.DateTime&quot; /&gt; is not valid.">試行された <see cref="T:System.DateTime" /> へのキャストは無効です。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsDouble">
      <summary vsli:raw="When overridden in a derived class, gets the item's value as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">派生クラスでオーバーライドされた場合、項目の値を <see cref="T:System.Double" /> として取得します。</summary>
      <returns vsli:raw="The item's value as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">
        <see cref="T:System.Double" /> としての項目の値。</returns>
      <exception cref="T:System.FormatException" vsli:raw="The item's value is not in the correct format for the &lt;see cref=&quot;T:System.Double&quot; /&gt; type.">項目の値が、<see cref="T:System.Double" /> 型の正しい形式になっていません。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.Double&quot; /&gt; is not valid.">試行された <see cref="T:System.Double" /> へのキャストは無効です。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The attempted cast resulted in an overflow.">試行されたキャストで、オーバーフローが発生しました。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsInt">
      <summary vsli:raw="When overridden in a derived class, gets the item's value as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">派生クラスでオーバーライドされた場合、項目の値を <see cref="T:System.Int32" /> として取得します。</summary>
      <returns vsli:raw="The item's value as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <see cref="T:System.Int32" /> としての項目の値。</returns>
      <exception cref="T:System.FormatException" vsli:raw="The item's value is not in the correct format for the &lt;see cref=&quot;T:System.Int32&quot; /&gt; type.">項目の値が、<see cref="T:System.Int32" /> 型の正しい形式になっていません。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.Int32&quot; /&gt; is not valid.">試行された <see cref="T:System.Int32" /> へのキャストは無効です。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The attempted cast resulted in an overflow.">試行されたキャストで、オーバーフローが発生しました。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsLong">
      <summary vsli:raw="When overridden in a derived class, gets the item's value as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">派生クラスでオーバーライドされた場合、項目の値を <see cref="T:System.Int64" /> として取得します。</summary>
      <returns vsli:raw="The item's value as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">
        <see cref="T:System.Int64" /> としての項目の値。</returns>
      <exception cref="T:System.FormatException" vsli:raw="The item's value is not in the correct format for the &lt;see cref=&quot;T:System.Int64&quot; /&gt; type.">項目の値が、<see cref="T:System.Int64" /> 型の正しい形式になっていません。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.Int64&quot; /&gt; is not valid.">試行された <see cref="T:System.Int64" /> へのキャストは無効です。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The attempted cast resulted in an overflow.">試行されたキャストで、オーバーフローが発生しました。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueType">
      <summary vsli:raw="When overridden in a derived class, gets the .NET Framework 2.0 type of the item.">派生クラスでオーバーライドされた場合、項目の .NET Framework 2.0 型を取得します。</summary>
      <returns vsli:raw="The .NET Framework type of the item. The default value is &lt;see cref=&quot;T:System.String&quot; /&gt;.">項目の .NET Framework 型。 既定値は <see cref="T:System.String" /> です。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.XmlType">
      <summary vsli:raw="When overridden in a derived class, gets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; for the item.">派生クラスでオーバーライドされた場合は、項目の <see cref="T:System.Xml.Schema.XmlSchemaType" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; for the item.">項目の <see cref="T:System.Xml.Schema.XmlSchemaType" />。</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNamespaceScope">
      <summary vsli:raw="Defines the namespace scope.">名前空間スコープを定義します。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.All">
      <summary vsli:raw="Returns all namespaces defined in the scope of the current node. This includes the &lt;c&gt;xmlns:xml&lt;/c&gt; namespace which is always declared implicitly. The order of the namespaces returned is not defined.">現在のノードのスコープに定義されている名前空間をすべて返します。 この名前空間には、常に暗黙的に宣言される <c>xmlns:xml</c> 名前空間が含まれます。 返される名前空間の順序は定義されません。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.ExcludeXml">
      <summary vsli:raw="Returns all namespaces defined in the scope of the current node, excluding the &lt;c&gt;xmlns:xml&lt;/c&gt; namespace. The &lt;c&gt;xmlns:xml&lt;/c&gt; namespace is always declared implicitly. The order of the namespaces returned is not defined.">現在のノードのスコープに定義されている名前空間をすべて返します。ただし、<c>xmlns:xml</c> 名前空間は除きます。 <c>xmlns:xml</c> 名前空間は、常に暗黙的に宣言されます。 返される名前空間の順序は定義されません。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.Local">
      <summary vsli:raw="Returns all namespaces that are defined locally at the current node.">現在のノードでローカルに定義されている名前空間をすべて返します。</summary>
    </member>
    <member name="T:System.Xml.XPath.XPathNavigator">
      <summary vsli:raw="Provides a cursor model for navigating and editing XML data.">XML データ内を移動したり XML データを編集したりするためのカーソル モデルを提供します。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; class.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object used to create one or more new child nodes at the end of the list of child nodes of the current node.">現在のノード下に存在する子ノードのリストの末尾に 1 つまたは複数の新しい子ノードを作成するために使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクトを返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object used to create new child nodes at the end of the list of child nodes of the current node.">現在のノード下に存在する子ノードのリストの末尾に新しい子ノードを作成するために使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is positioned on is not the root node or an element node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が配置されている現在のノードが、ルート ノードでも要素ノードでもありません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.String)">
      <summary vsli:raw="Creates a new child node at the end of the list of child nodes of the current node using the XML data string specified.">指定された XML データ文字列を使用して、現在のノード下に存在する子ノードのリストの末尾に新しい子ノードを作成します。</summary>
      <param name="newChild" vsli:raw="The XML data string for the new child node.">新しい子ノード用の XML データ文字列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The XML data string parameter is &lt;see langword=&quot;null&quot; /&gt;.">XML データ文字列パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is positioned on is not the root node or an element node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が配置されている現在のノードが、ルート ノードでも要素ノードでもありません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML data string parameter is not well-formed.">XML データ文字列パラメーターは、整形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.Xml.XmlReader)">
      <summary vsli:raw="Creates a new child node at the end of the list of child nodes of the current node using the XML contents of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object specified.">指定された <see cref="T:System.Xml.XmlReader" /> オブジェクトの XML コンテンツを使用して、現在のノード下に存在する子ノードのリストの末尾に新しい子ノードを作成します。</summary>
      <param name="newChild" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object positioned on the XML data for the new child node.">新しい子ノード用の XML データに配置された <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object is in an error state or closed.">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトがエラー状態か、または閉じています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトのパラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is positioned on is not the root node or an element node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が配置されている現在のノードが、ルート ノードでも要素ノードでもありません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML contents of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object parameter is not well-formed.">
        <see cref="T:System.Xml.XmlReader" /> オブジェクト パラメーターの XML コンテンツは整形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="Creates a new child node at the end of the list of child nodes of the current node using the nodes in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; specified.">指定された <see cref="T:System.Xml.XPath.XPathNavigator" /> のノードを使用して、現在のノード下に存在する子ノードのリストの末尾に新しい子ノードを作成します。</summary>
      <param name="newChild" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object positioned on the node to add as the new child node.">新しい子ノードとして追加するノードに配置される <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトのパラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is positioned on is not the root node or an element node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が配置されている現在のノードが、ルート ノードでも要素ノードでもありません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChildElement(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Creates a new child element node at the end of the list of child nodes of the current node using the namespace prefix, local name and namespace URI specified with the value specified.">指定された値と共に指定した名前空間プレフィックス、ローカル名、および名前空間 URI を使用して、現在のノード下に存在する子ノードのリストの末尾に新しい子要素ノードを作成します。</summary>
      <param name="prefix" vsli:raw="The namespace prefix of the new child element node (if any).">新しい子要素ノードの名前空間プレフィックス (存在する場合)。</param>
      <param name="localName" vsli:raw="The local name of the new child element node (if any).">新しい子要素ノードのローカル名 (存在する場合)。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the new child element node (if any). &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; and &lt;see langword=&quot;null&quot; /&gt; are equivalent.">新しい子要素の名前空間 URI (存在する場合)。 <see cref="F:System.String.Empty" /> と <see langword="null" /> は等価です。</param>
      <param name="value" vsli:raw="The value of the new child element node. If &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; are passed, an empty element is created.">新しい子要素ノードの値。 <see cref="F:System.String.Empty" /> または <see langword="null" /> を渡すと、空の要素が作成されます。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is positioned on is not the root node or an element node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が配置されている現在のノードが、ルート ノードでも要素ノードでもありません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.BaseURI">
      <summary vsli:raw="When overridden in a derived class, gets the base URI for the current node.">派生クラスでオーバーライドされると、現在のノードのベース URI を取得します。</summary>
      <returns vsli:raw="The location from which the node was loaded, or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; if there is no value.">ノードの読み込み元となった場所。または、値がない場合は <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.CanEdit">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; can edit the underlying XML data.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> で、基になる XML データを編集できるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; can edit the underlying XML data; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />が基になる XML データを編集<see langword="false" />できる場合は。それ以外の場合は。<see cref="T:System.Xml.XPath.XPathNavigator" /></returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CheckValidity(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
      <summary vsli:raw="Verifies that the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; conforms to the XML Schema definition language (XSD) schema provided.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 内の XML データが、提供された XML スキーマ定義言語 (XSD) スキーマに準拠していることを検証します。</summary>
      <param name="schemas" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; containing the schemas used to validate the XML data contained in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に格納されている XML データを検証するために使用するスキーマを格納している <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="validationEventHandler" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventHandler&quot; /&gt; that receives information about schema validation warnings and errors.">スキーマ検証の警告とエラーに関する情報を受け取る <see cref="T:System.Xml.Schema.ValidationEventHandler" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if no schema validation errors occurred; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">スキーマ検証エラーが発生しなかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="A schema validation error occurred, and no &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventHandler&quot; /&gt; was specified to handle validation errors.">スキーマ検証エラーが発生しましたが、検証エラーを処理する <see cref="T:System.Xml.Schema.ValidationEventHandler" /> が指定されていませんでした。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is positioned on a node that is not an element, attribute, or the root node or there is not type information to perform validation.">要素、属性、およびルート ノードではないノードに <see cref="T:System.Xml.XPath.XPathNavigator" /> が配置されているか、または検証を実行するための型情報がありません。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;M:System.Xml.XPath.XPathNavigator.CheckValidity(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)&quot; /&gt; method was called with an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; parameter when the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; was not positioned on the root node of the XML data.">
        <see cref="M:System.Xml.XPath.XPathNavigator.CheckValidity(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)" /> が XML データのルート ノードに配置されていないときに、<see cref="T:System.Xml.Schema.XmlSchemaSet" /> パラメーターを使用して <see cref="T:System.Xml.XPath.XPathNavigator" /> メソッドが呼び出されました。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Clone">
      <summary vsli:raw="When overridden in a derived class, creates a new &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; positioned at the same node as this &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;.">派生クラスでオーバーライドされると、この <see cref="T:System.Xml.XPath.XPathNavigator" /> と同じノードに配置される新しい <see cref="T:System.Xml.XPath.XPathNavigator" /> を作成します。</summary>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; positioned at the same node as this &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;.">この <see cref="T:System.Xml.XPath.XPathNavigator" /> と同じノードに配置された新しい <see cref="T:System.Xml.XPath.XPathNavigator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ComparePosition(System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="Compares the position of the current &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; with the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; specified.">現在の <see cref="T:System.Xml.XPath.XPathNavigator" /> の位置と指定された <see cref="T:System.Xml.XPath.XPathNavigator" /> の位置を比較します。</summary>
      <param name="nav" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to compare against.">比較対象の <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNodeOrder&quot; /&gt; value representing the comparative position of the two &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; objects.">2 つの <see cref="T:System.Xml.XmlNodeOrder" /> オブジェクトの比較位置を表す <see cref="T:System.Xml.XPath.XPathNavigator" /> 値。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Compile(System.String)">
      <summary vsli:raw="Compiles a string representing an XPath expression and returns an &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; object.">XPath 式を表す文字列をコンパイルし、<see cref="T:System.Xml.XPath.XPathExpression" /> オブジェクトを返します。</summary>
      <param name="xpath" vsli:raw="A string representing an XPath expression.">XPath 式を表す文字列。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; object representing the XPath expression.">XPath 式を表す <see cref="T:System.Xml.XPath.XPathExpression" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;xpath&quot; /&gt; parameter contains an XPath expression that is not valid.">
        <paramref name="xpath" /> パラメーターに無効な XPath 式が含まれています。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression is not valid.">XPath 式が無効です。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CreateAttribute(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Creates an attribute node on the current element node using the namespace prefix, local name and namespace URI specified with the value specified.">指定された値で指定した名前空間プレフィックス、ローカル名、および名前空間 URI を使用して、現在の要素ノードに属性ノードを作成します。</summary>
      <param name="prefix" vsli:raw="The namespace prefix of the new attribute node (if any).">新しい属性ノードの名前空間プレフィックス (存在する場合)。</param>
      <param name="localName" vsli:raw="The local name of the new attribute node which cannot &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt;.">新しい属性ノードのローカル名。これには <see cref="F:System.String.Empty" /> および <see langword="null" /> を設定できません。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI for the new attribute node (if any).">新しい属性ノードの名前空間 URI (存在する場合)。</param>
      <param name="value" vsli:raw="The value of the new attribute node. If &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; are passed, an empty attribute node is created.">新しい属性ノードの値。 <see cref="F:System.String.Empty" /> または <see langword="null" /> を渡すと、空の属性ノードが作成されます。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is not positioned on an element node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が要素ノードに配置されていません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CreateAttributes">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object used to create new attributes on the current element.">現在の要素に新しい属性を作成するために使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクトを返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object used to create new attributes on the current element.">現在の要素に新しい属性を作成するために使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is not positioned on an element node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が要素ノードに配置されていません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CreateNavigator">
      <summary vsli:raw="Returns a copy of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> のコピーを返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; copy of this &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;.">この <see cref="T:System.Xml.XPath.XPathNavigator" /> の <see cref="T:System.Xml.XPath.XPathNavigator" /> コピー。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.DeleteRange(System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="Deletes a range of sibling nodes from the current node to the node specified.">現在のノードから指定されたノードまでの範囲にある兄弟ノードを削除します。</summary>
      <param name="lastSiblingToDelete" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; positioned on the last sibling node in the range to delete.">削除する範囲内にある最後の兄弟ノードに配置された <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; specified is &lt;see langword=&quot;null&quot; /&gt;.">指定された <see cref="T:System.Xml.XPath.XPathNavigator" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The last node to delete specified is not a valid sibling node of the current node.">削除対象として指定された最後のノードは、現在のノードの有効な兄弟ノードではありません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.DeleteSelf">
      <summary vsli:raw="Deletes the current node and its child nodes.">現在のノードとその子ノードを削除します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is positioned on a node that cannot be deleted such as the root node or a namespace node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は、ルート ノードや名前空間ノードなど、削除できないノードに配置されます。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.String)">
      <summary vsli:raw="Evaluates the specified XPath expression and returns the typed result.">指定された XPath 式を計算し、型指定された結果を返します。</summary>
      <param name="xpath" vsli:raw="A string representing an XPath expression that can be evaluated.">計算できる XPath 式を表す文字列。</param>
      <returns vsli:raw="The result of the expression (Boolean, number, string, or node set). This maps to &lt;see cref=&quot;T:System.Boolean&quot; /&gt;, &lt;see cref=&quot;T:System.Double&quot; /&gt;, &lt;see cref=&quot;T:System.String&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; objects respectively.">式の結果 (ブール値、数値、文字列、またはノード セット)。 <see cref="T:System.Boolean" /> オブジェクト、<see cref="T:System.Double" />オブジェクト、<see cref="T:System.String" /> オブジェクト、または <see cref="T:System.Xml.XPath.XPathNodeIterator" /> オブジェクトにそれぞれ割り当てられます。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The return type of the XPath expression is a node set.">XPath 式の戻り値の型がノード セットです。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression is not valid.">XPath 式が無効です。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary vsli:raw="Evaluates the specified XPath expression and returns the typed result, using the &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object specified to resolve namespace prefixes in the XPath expression.">指定された <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクトを使用して XPath 式の名前空間プレフィックスを解決することにより、指定された XPath 式を計算して、型指定された結果を返します。</summary>
      <param name="xpath" vsli:raw="A string representing an XPath expression that can be evaluated.">計算できる XPath 式を表す文字列。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object used to resolve namespace prefixes in the XPath expression.">XPath 式の名前空間プレフィックスの解決に使用する <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
      <returns vsli:raw="The result of the expression (Boolean, number, string, or node set). This maps to &lt;see cref=&quot;T:System.Boolean&quot; /&gt;, &lt;see cref=&quot;T:System.Double&quot; /&gt;, &lt;see cref=&quot;T:System.String&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; objects respectively.">式の結果 (ブール値、数値、文字列、またはノード セット)。 <see cref="T:System.Boolean" /> オブジェクト、<see cref="T:System.Double" />オブジェクト、<see cref="T:System.String" /> オブジェクト、または <see cref="T:System.Xml.XPath.XPathNodeIterator" /> オブジェクトにそれぞれ割り当てられます。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The return type of the XPath expression is a node set.">XPath 式の戻り値の型がノード セットです。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression is not valid.">XPath 式が無効です。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression)">
      <summary vsli:raw="Evaluates the &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; and returns the typed result.">
        <see cref="T:System.Xml.XPath.XPathExpression" /> を計算し、型指定された結果を返します。</summary>
      <param name="expr" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; that can be evaluated.">計算できる <see cref="T:System.Xml.XPath.XPathExpression" />。</param>
      <returns vsli:raw="The result of the expression (Boolean, number, string, or node set). This maps to &lt;see cref=&quot;T:System.Boolean&quot; /&gt;, &lt;see cref=&quot;T:System.Double&quot; /&gt;, &lt;see cref=&quot;T:System.String&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; objects respectively.">式の結果 (ブール値、数値、文字列、またはノード セット)。 <see cref="T:System.Boolean" /> オブジェクト、<see cref="T:System.Double" />オブジェクト、<see cref="T:System.String" /> オブジェクト、または <see cref="T:System.Xml.XPath.XPathNodeIterator" /> オブジェクトにそれぞれ割り当てられます。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The return type of the XPath expression is a node set.">XPath 式の戻り値の型がノード セットです。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression is not valid.">XPath 式が無効です。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression,System.Xml.XPath.XPathNodeIterator)">
      <summary vsli:raw="Uses the supplied context to evaluate the &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt;, and returns the typed result.">提供されたコンテキストを使用して <see cref="T:System.Xml.XPath.XPathExpression" /> を計算し、型指定された結果を返します。</summary>
      <param name="expr" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; that can be evaluated.">計算できる <see cref="T:System.Xml.XPath.XPathExpression" />。</param>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; that points to the selected node set that the evaluation is to be performed on.">計算を行う対象の選択したノード セットを指す <see cref="T:System.Xml.XPath.XPathNodeIterator" />。</param>
      <returns vsli:raw="The result of the expression (Boolean, number, string, or node set). This maps to &lt;see cref=&quot;T:System.Boolean&quot; /&gt;, &lt;see cref=&quot;T:System.Double&quot; /&gt;, &lt;see cref=&quot;T:System.String&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; objects respectively.">式の結果 (ブール値、数値、文字列、またはノード セット)。 <see cref="T:System.Boolean" /> オブジェクト、<see cref="T:System.Double" />オブジェクト、<see cref="T:System.String" /> オブジェクト、または <see cref="T:System.Xml.XPath.XPathNodeIterator" /> オブジェクトにそれぞれ割り当てられます。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The return type of the XPath expression is a node set.">XPath 式の戻り値の型がノード セットです。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression is not valid.">XPath 式が無効です。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetAttribute(System.String,System.String)">
      <summary vsli:raw="Gets the value of the attribute with the specified local name and namespace URI.">指定したローカル名および名前空間 URI に関連付けられた属性の値を取得します。</summary>
      <param name="localName" vsli:raw="The local name of the attribute. &lt;paramref name=&quot;localName&quot; /&gt; is case-sensitive.">属性のローカル名。 <paramref name="localName" /> では、大文字と小文字が区別されます。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute.">属性の名前空間 URI。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the value of the specified attribute; &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; if a matching attribute is not found, or if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is not positioned on an element node.">指定された属性の値が格納された <see cref="T:System.String" />。一致する属性が見つからないか、または <see cref="F:System.String.Empty" /> が要素ノードに配置されていない場合は <see cref="T:System.Xml.XPath.XPathNavigator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetNamespace(System.String)">
      <summary vsli:raw="Returns the value of the namespace node corresponding to the specified local name.">指定したローカル名に対応する名前空間ノードの値を返します。</summary>
      <param name="name" vsli:raw="The local name of the namespace node.">名前空間ノードのローカル名。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the value of the namespace node; &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; if a matching namespace node is not found, or if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is not positioned on an element node.">名前空間ノードの値が格納された <see cref="T:System.String" />。一致する名前空間ノードが見つからないか、または <see cref="F:System.String.Empty" /> が要素ノードに配置されていない場合は <see cref="T:System.Xml.XPath.XPathNavigator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary vsli:raw="Returns the in-scope namespaces of the current node.">現在のノードのスコープ内の名前空間を返します。</summary>
      <param name="scope" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNamespaceScope&quot; /&gt; value specifying the namespaces to return.">返す名前空間を指定する <see cref="T:System.Xml.XmlNamespaceScope" /> 値。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; collection of namespace names keyed by prefix.">プレフィックスをキーとした名前空間名の <see cref="T:System.Collections.Generic.IDictionary`2" /> コレクション。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.HasAttributes">
      <summary vsli:raw="Gets a value that indicates whether the current node has any attributes.">現在のノードに属性があるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node has attributes; returns &lt;see langword=&quot;false&quot; /&gt; if the current node has no attributes, or if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is not positioned on an element node.">
        <see langword="true" />現在のノードに属性がある場合は。現在<see langword="false" />のノードに属性がない場合、または<see cref="T:System.Xml.XPath.XPathNavigator" />が要素ノードに配置されていない場合は、を返します。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.HasChildren">
      <summary vsli:raw="Gets a value that indicates whether the current node has any child nodes.">現在のノードに子ノードがあるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node has any child nodes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のノードが子ノードを持っている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.InnerXml">
      <summary vsli:raw="Gets or sets the markup representing the child nodes of the current node.">現在のノードの子ノードを表すマークアップを取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the markup of the child nodes of the current node.">現在のノードの子ノードのマークアップが格納された <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Xml.XPath.XPathNavigator.InnerXml&quot; /&gt; property cannot be set.">
        <see cref="P:System.Xml.XPath.XPathNavigator.InnerXml" /> プロパティは設定できません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object used to create a new sibling node after the currently selected node.">現在選択されているノードの後に新しい兄弟ノードを作成するために使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクトを返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object used to create a new sibling node after the currently selected node.">現在選択されているノードの後に新しい兄弟ノードを作成するために使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not allow a new sibling node to be inserted after the current node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> の該当位置では、新しい兄弟ノードを現在のノードの後に挿入することはできません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.String)">
      <summary vsli:raw="Creates a new sibling node after the currently selected node using the XML string specified.">指定された XML 文字列を使用して、現在選択されているノードの後に新しい兄弟ノードを作成します。</summary>
      <param name="newSibling" vsli:raw="The XML data string for the new sibling node.">新しい兄弟ノード用の XML データ文字列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The XML string parameter is &lt;see langword=&quot;null&quot; /&gt;.">XML 文字列パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not allow a new sibling node to be inserted after the current node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> の該当位置では、新しい兄弟ノードを現在のノードの後に挿入することはできません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML string parameter is not well-formed.">XML の文字列パラメーターが、整形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.Xml.XmlReader)">
      <summary vsli:raw="Creates a new sibling node after the currently selected node using the XML contents of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object specified.">指定された <see cref="T:System.Xml.XmlReader" /> オブジェクトの XML の内容を使用して、現在選択されているノードの後に新しい兄弟ノードを作成します。</summary>
      <param name="newSibling" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object positioned on the XML data for the new sibling node.">新しい兄弟ノード用の XML データに配置された <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object is in an error state or closed.">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトがエラー状態か、または閉じています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトのパラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not allow a new sibling node to be inserted after the current node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> の該当位置では、新しい兄弟ノードを現在のノードの後に挿入することはできません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML contents of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object parameter is not well-formed.">
        <see cref="T:System.Xml.XmlReader" /> オブジェクト パラメーターの XML コンテンツは整形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="Creates a new sibling node after the currently selected node using the nodes in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object specified.">指定された <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトのノードを使用して、現在選択されているノードの後に新しい兄弟ノードを作成します。</summary>
      <param name="newSibling" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object positioned on the node to add as the new sibling node.">新しい兄弟ノードとして追加するノードに配置されている <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトのパラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not allow a new sibling node to be inserted after the current node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> の該当位置では、新しい兄弟ノードを現在のノードの後に挿入することはできません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object used to create a new sibling node before the currently selected node.">現在選択されているノードの前に新しい兄弟ノードを作成するために使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクトを返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object used to create a new sibling node before the currently selected node.">現在選択されているノードの前に新しい兄弟ノードを作成するために使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not allow a new sibling node to be inserted before the current node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> の該当位置では、新しい兄弟ノードを現在のノードの前に挿入することはできません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.String)">
      <summary vsli:raw="Creates a new sibling node before the currently selected node using the XML string specified.">指定された XML 文字列を使用して、現在選択されているノードの前に新しい兄弟ノードを作成します。</summary>
      <param name="newSibling" vsli:raw="The XML data string for the new sibling node.">新しい兄弟ノード用の XML データ文字列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The XML string parameter is &lt;see langword=&quot;null&quot; /&gt;.">XML 文字列パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not allow a new sibling node to be inserted before the current node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> の該当位置では、新しい兄弟ノードを現在のノードの前に挿入することはできません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML string parameter is not well-formed.">XML の文字列パラメーターが、整形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.Xml.XmlReader)">
      <summary vsli:raw="Creates a new sibling node before the currently selected node using the XML contents of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object specified.">指定された <see cref="T:System.Xml.XmlReader" /> オブジェクトの XML の内容を使用して、現在選択されているノードの前に新しい兄弟ノードを作成します。</summary>
      <param name="newSibling" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object positioned on the XML data for the new sibling node.">新しい兄弟ノード用の XML データに配置された <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object is in an error state or closed.">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトがエラー状態か、または閉じています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトのパラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not allow a new sibling node to be inserted before the current node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> の該当位置では、新しい兄弟ノードを現在のノードの前に挿入することはできません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML contents of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object parameter is not well-formed.">
        <see cref="T:System.Xml.XmlReader" /> オブジェクト パラメーターの XML コンテンツは整形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="Creates a new sibling node before the currently selected node using the nodes in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; specified.">指定された <see cref="T:System.Xml.XPath.XPathNavigator" /> のノードを使用して、現在選択されているノードの前に新しい兄弟ノードを作成します。</summary>
      <param name="newSibling" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object positioned on the node to add as the new sibling node.">新しい兄弟ノードとして追加するノードに配置されている <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトのパラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not allow a new sibling node to be inserted before the current node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> の該当位置では、新しい兄弟ノードを現在のノードの前に挿入することはできません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertElementAfter(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Creates a new sibling element after the current node using the namespace prefix, local name and namespace URI specified, with the value specified.">指定された値と共に指定した名前空間プレフィックス、ローカル名、および名前空間 URI を使用して、現在のノードの後に新しい兄弟要素を作成します。</summary>
      <param name="prefix" vsli:raw="The namespace prefix of the new child element (if any).">新しい子要素の名前空間プレフィックス (存在する場合)。</param>
      <param name="localName" vsli:raw="The local name of the new child element (if any).">新しい子要素のローカル名 (存在する場合)。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the new child element (if any). &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; and &lt;see langword=&quot;null&quot; /&gt; are equivalent.">新しい子要素の名前空間 URI (存在する場合)。 <see cref="F:System.String.Empty" /> と <see langword="null" /> は等価です。</param>
      <param name="value" vsli:raw="The value of the new child element. If &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; are passed, an empty element is created.">新しい子要素の値。 <see cref="F:System.String.Empty" /> または <see langword="null" /> を渡すと、空の要素が作成されます。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not allow a new sibling node to be inserted after the current node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> の該当位置では、新しい兄弟ノードを現在のノードの後に挿入することはできません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertElementBefore(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Creates a new sibling element before the current node using the namespace prefix, local name, and namespace URI specified, with the value specified.">指定された値と共に指定した名前空間プレフィックス、ローカル名、および名前空間 URI を使用して、現在のノードの前に新しい兄弟要素を作成します。</summary>
      <param name="prefix" vsli:raw="The namespace prefix of the new child element (if any).">新しい子要素の名前空間プレフィックス (存在する場合)。</param>
      <param name="localName" vsli:raw="The local name of the new child element (if any).">新しい子要素のローカル名 (存在する場合)。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the new child element (if any). &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; and &lt;see langword=&quot;null&quot; /&gt; are equivalent.">新しい子要素の名前空間 URI (存在する場合)。 <see cref="F:System.String.Empty" /> と <see langword="null" /> は等価です。</param>
      <param name="value" vsli:raw="The value of the new child element. If &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; are passed, an empty element is created.">新しい子要素の値。 <see cref="F:System.String.Empty" /> または <see langword="null" /> を渡すと、空の要素が作成されます。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not allow a new sibling node to be inserted before the current node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> の該当位置では、新しい兄弟ノードを現在のノードの前に挿入することはできません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.IsDescendant(System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is a descendant of the current &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;.">指定した <see cref="T:System.Xml.XPath.XPathNavigator" /> が、現在の <see cref="T:System.Xml.XPath.XPathNavigator" /> の子孫かどうかを判断します。</summary>
      <param name="nav" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to compare to this &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;.">この <see cref="T:System.Xml.XPath.XPathNavigator" /> と比較する <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is a descendant of the current &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定された <see cref="T:System.Xml.XPath.XPathNavigator" /> が現在の <see cref="T:System.Xml.XPath.XPathNavigator" /> の子孫である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.IsEmptyElement">
      <summary vsli:raw="When overridden in a derived class, gets a value that indicates whether the current node is an empty element without an end element tag.">派生クラスでオーバーライドされると、現在のノードが終了要素タグのない空の要素かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node is an empty element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のノードが空の要素の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.IsNode">
      <summary vsli:raw="Gets a value that indicates if the current node represents an XPath node.">現在のノードが XPath ノードかどうかを表す値を取得します。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="When overridden in a derived class, determines whether the current &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is at the same position as the specified &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;.">派生クラスでオーバーライドされると、現在の <see cref="T:System.Xml.XPath.XPathNavigator" /> が、指定された <see cref="T:System.Xml.XPath.XPathNavigator" /> と同じ位置にあるかどうかを判断します。</summary>
      <param name="other" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to compare to this &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;.">この <see cref="T:System.Xml.XPath.XPathNavigator" /> と比較する <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; objects have the same position; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">2 つの <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトが同じ位置にある場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.LocalName">
      <summary vsli:raw="When overridden in a derived class, gets the &lt;see cref=&quot;P:System.Xml.XPath.XPathNavigator.Name&quot; /&gt; of the current node without any namespace prefix.">派生クラスでオーバーライドされると、現在のノードの名前空間プレフィックスなしの <see cref="P:System.Xml.XPath.XPathNavigator.Name" /> を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the local name of the current node, or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; if the current node does not have a name (for example, text or comment nodes).">現在のノードのローカル名が格納された <see cref="T:System.String" />。現在のノードが名前を持たない場合 (たとえばテキスト ノードまたはコメント ノード) は <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.LookupNamespace(System.String)">
      <summary vsli:raw="Gets the namespace URI for the specified prefix.">指定したプリフィックスの名前空間 URI を取得します。</summary>
      <param name="prefix" vsli:raw="The prefix whose namespace URI you want to resolve. To match the default namespace, pass &lt;see cref=&quot;F:System.String.Empty&quot; /&gt;.">解決する対象となる名前空間 URI のプレフィックス。 既定の名前空間と一致するようにするには、<see cref="F:System.String.Empty" /> を渡します。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the namespace URI assigned to the namespace prefix specified; &lt;see langword=&quot;null&quot; /&gt; if no namespace URI is assigned to the prefix specified. The &lt;see cref=&quot;T:System.String&quot; /&gt; returned is atomized.">指定した名前空間プレフィックスに割り当てられている名前空間 URI が格納された <see cref="T:System.String" />。指定したプレフィックスに名前空間 URI が割り当てられていない場合は <see langword="null" />。 返される <see cref="T:System.String" /> は最小単位に分割されます。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.LookupPrefix(System.String)">
      <summary vsli:raw="Gets the prefix declared for the specified namespace URI.">指定された名前空間 URI に対して宣言されたプレフィックスを取得します。</summary>
      <param name="namespaceURI" vsli:raw="The namespace URI to resolve for the prefix.">プレフィックスに対して解決する名前空間 URI。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the namespace prefix assigned to the namespace URI specified; otherwise, &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; if no prefix is assigned to the namespace URI specified. The &lt;see cref=&quot;T:System.String&quot; /&gt; returned is atomized.">指定した名前空間 URI に割り当てられた名前空間プレフィックスが格納された <see cref="T:System.String" />。指定した名前空間 URI にプレフィックスが割り当てられていない場合は <see cref="F:System.String.Empty" />。 返される <see cref="T:System.String" /> は最小単位に分割されます。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Matches(System.String)">
      <summary vsli:raw="Determines whether the current node matches the specified XPath expression.">現在のノードが、指定された XPath 式と一致するかどうかを判断します。</summary>
      <param name="xpath" vsli:raw="The XPath expression.">XPath 式。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node matches the specified XPath expression; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のノードが、指定された XPath 式と一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The XPath expression cannot be evaluated.">XPath 式を計算できません。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression is not valid.">XPath 式が無効です。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Matches(System.Xml.XPath.XPathExpression)">
      <summary vsli:raw="Determines whether the current node matches the specified &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt;.">現在のノードが指定した <see cref="T:System.Xml.XPath.XPathExpression" /> と一致するかどうかを判断します。</summary>
      <param name="expr" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; object containing the compiled XPath expression.">コンパイル済みの XPath 式が格納された <see cref="T:System.Xml.XPath.XPathExpression" /> オブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node matches the &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現ノードが <see cref="T:System.Xml.XPath.XPathExpression" /> に一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The XPath expression cannot be evaluated.">XPath 式を計算できません。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression is not valid.">XPath 式が無効です。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveTo(System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="When overridden in a derived class, moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the same position as the specified &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;.">派生クラスでオーバーライドされると、<see cref="T:System.Xml.XPath.XPathNavigator" /> を、指定された <see cref="T:System.Xml.XPath.XPathNavigator" /> と同じ位置に移動します。</summary>
      <param name="other" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; positioned on the node that you want to move to.">移動先のノードに配置される <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the same position as the specified &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が指定された <see cref="T:System.Xml.XPath.XPathNavigator" /> と同じ位置に正常に移動する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToAttribute(System.String,System.String)">
      <summary vsli:raw="Moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the attribute with the matching local name and namespace URI.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> を、ローカル名および名前空間 URI が一致する属性に移動します。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">属性のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute; &lt;see langword=&quot;null&quot; /&gt; for an empty namespace.">属性の名前空間 URI。空の名前空間に対しては <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the attribute; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が属性に正常に移動した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToChild(System.String,System.String)">
      <summary vsli:raw="Moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the child node with the local name and namespace URI specified.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> を、指定されたローカル名と名前空間 URI を持つ子ノードに移動します。</summary>
      <param name="localName" vsli:raw="The local name of the child node to move to.">移動先となる子ノードのローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the child node to move to.">移動先となる子ノードの名前空間 URI。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the child node; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が子ノードに正常に移動した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToChild(System.Xml.XPath.XPathNodeType)">
      <summary vsli:raw="Moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the child node of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; specified.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> を、指定された <see cref="T:System.Xml.XPath.XPathNodeType" /> の子ノードに移動します。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; of the child node to move to.">移動先となる子ノードの <see cref="T:System.Xml.XPath.XPathNodeType" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the child node; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が子ノードに正常に移動した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirst">
      <summary vsli:raw="Moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the first sibling node of the current node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> を現在のノードの最初の兄弟ノードに移動します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the first sibling node of the current node; &lt;see langword=&quot;false&quot; /&gt; if there is no first sibling, or if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is currently positioned on an attribute node. If the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is already positioned on the first sibling, &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; will return &lt;see langword=&quot;true&quot; /&gt; and will not move its position.  &#xA;  &#xA; If &lt;see cref=&quot;M:System.Xml.XPath.XPathNavigator.MoveToFirst&quot; /&gt; returns &lt;see langword=&quot;false&quot; /&gt; because there is no first sibling, or if &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is currently positioned on an attribute, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が現在のノードの最初の兄弟ノードに正常に移動した場合は <see langword="true" />。最初のレベルに兄弟がないか、<see cref="T:System.Xml.XPath.XPathNavigator" /> が現在属性ノードに配置されている場合は <see langword="false" />。 <see cref="T:System.Xml.XPath.XPathNavigator" /> が既に最初の兄弟に配置されている場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> は <see langword="true" /> を返し、その位置を移動しません。  
最初の兄弟がないために <see cref="M:System.Xml.XPath.XPathNavigator.MoveToFirst" /> が <see langword="false" /> を返す場合、または <see cref="T:System.Xml.XPath.XPathNavigator" /> が現在属性に配置されている場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstAttribute">
      <summary vsli:raw="When overridden in a derived class, moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the first attribute of the current node.">派生クラスでオーバーライドされると、<see cref="T:System.Xml.XPath.XPathNavigator" /> を現在のノードの最初の属性に移動します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the first attribute of the current node; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が現在のノードの最初の属性に正常に移動した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstChild">
      <summary vsli:raw="When overridden in a derived class, moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the first child node of the current node.">派生クラスでオーバーライドされると、<see cref="T:System.Xml.XPath.XPathNavigator" /> を現在のノードの最初の子ノードに移動します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the first child node of the current node; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が現在のノードの最初の子ノードに正常に移動した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace">
      <summary vsli:raw="Moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to first namespace node of the current node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> を現在のノードの最初の名前空間ノードに移動します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the first namespace node; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が最初の名前空間ノードに正常に移動した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)">
      <summary vsli:raw="When overridden in a derived class, moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the first namespace node that matches the &lt;see cref=&quot;T:System.Xml.XPath.XPathNamespaceScope&quot; /&gt; specified.">派生クラスでオーバーライドされると、<see cref="T:System.Xml.XPath.XPathNavigator" /> を、指定された <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> と一致する最初の名前空間ノードに移動します。</summary>
      <param name="namespaceScope" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNamespaceScope&quot; /&gt; value describing the namespace scope.">名前空間スコープを記述する <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> 値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the first namespace node; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が最初の名前空間ノードに正常に移動した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.String,System.String)">
      <summary vsli:raw="Moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the element with the local name and namespace URI specified in document order.">指定されたローカル名と名前空間 URI を持つ要素に、<see cref="T:System.Xml.XPath.XPathNavigator" /> をドキュメント順に移動します。</summary>
      <param name="localName" vsli:raw="The local name of the element.">要素のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element.">要素の名前空間 URI。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; moved successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が正常に移動した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.String,System.String,System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="Moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the element with the local name and namespace URI specified, to the boundary specified, in document order.">指定されたローカル名と名前空間 URI を持つ要素から指定された境界に、<see cref="T:System.Xml.XPath.XPathNavigator" /> をドキュメント順に移動します。</summary>
      <param name="localName" vsli:raw="The local name of the element.">要素のローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element.">要素の名前空間 URI。</param>
      <param name="end" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object positioned on the element boundary which the current &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; will not move past while searching for the following element.">現在の <see cref="T:System.Xml.XPath.XPathNavigator" /> が、次の要素の検索でこれより先に進まないようにする要素の境界に配置された <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; moved successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が正常に移動した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.Xml.XPath.XPathNodeType)">
      <summary vsli:raw="Moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the following element of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; specified in document order.">指定された <see cref="T:System.Xml.XPath.XPathNavigator" /> の次の要素に、<see cref="T:System.Xml.XPath.XPathNodeType" /> をドキュメント順に移動します。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; of the element. The &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; cannot be &lt;see cref=&quot;F:System.Xml.XPath.XPathNodeType.Attribute&quot; /&gt; or &lt;see cref=&quot;F:System.Xml.XPath.XPathNodeType.Namespace&quot; /&gt;.">要素の <see cref="T:System.Xml.XPath.XPathNodeType" />。 <see cref="T:System.Xml.XPath.XPathNodeType" /> は、<see cref="F:System.Xml.XPath.XPathNodeType.Attribute" /> および <see cref="F:System.Xml.XPath.XPathNodeType.Namespace" /> にはできません。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; moved successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が正常に移動した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.Xml.XPath.XPathNodeType,System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="Moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the following element of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; specified, to the boundary specified, in document order.">指定された <see cref="T:System.Xml.XPath.XPathNavigator" /> の次の要素から指定された境界まで、<see cref="T:System.Xml.XPath.XPathNodeType" /> をドキュメント順に移動します。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; of the element. The &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; cannot be &lt;see cref=&quot;F:System.Xml.XPath.XPathNodeType.Attribute&quot; /&gt; or &lt;see cref=&quot;F:System.Xml.XPath.XPathNodeType.Namespace&quot; /&gt;.">要素の <see cref="T:System.Xml.XPath.XPathNodeType" />。 <see cref="T:System.Xml.XPath.XPathNodeType" /> は、<see cref="F:System.Xml.XPath.XPathNodeType.Attribute" /> および <see cref="F:System.Xml.XPath.XPathNodeType.Namespace" /> にはできません。</param>
      <param name="end" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object positioned on the element boundary which the current &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; will not move past while searching for the following element.">現在の <see cref="T:System.Xml.XPath.XPathNavigator" /> が、次の要素の検索でこれより先に進まないようにする要素の境界に配置された <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; moved successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が正常に移動した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToId(System.String)">
      <summary vsli:raw="When overridden in a derived class, moves to the node that has an attribute of type &lt;c&gt;ID&lt;/c&gt; whose value matches the specified &lt;see cref=&quot;T:System.String&quot; /&gt;.">派生クラスでオーバーライドされると、指定された <see cref="T:System.String" /> と値が一致する型 <c>ID</c> の属性を持つノードに移動します。</summary>
      <param name="id" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; representing the &lt;c&gt;ID&lt;/c&gt; value of the node to which you want to move.">移動先のノードの <c>ID</c> 値を表す <see cref="T:System.String" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the position of the navigator is unchanged.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が正常に移動された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、ナビゲーターの位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNamespace(System.String)">
      <summary vsli:raw="Moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the namespace node with the specified namespace prefix.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> を、指定された名前空間プレフィックスを持つ名前空間ノードに移動します。</summary>
      <param name="name" vsli:raw="The namespace prefix of the namespace node.">名前空間ノードの名前空間プレフィックス。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the specified namespace; &lt;see langword=&quot;false&quot; /&gt; if a matching namespace node was not found, or if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is not positioned on an element node. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が、指定された名前空間に正常に移動された場合は <see langword="true" />。一致する名前空間ノードが見つからないか、または <see cref="T:System.Xml.XPath.XPathNavigator" /> が要素ノードに配置されていない場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNext">
      <summary vsli:raw="When overridden in a derived class, moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the next sibling node of the current node.">派生クラスでオーバーライドされると、<see cref="T:System.Xml.XPath.XPathNavigator" /> を現在のノードの次の兄弟ノードに移動します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the next sibling node; otherwise, &lt;see langword=&quot;false&quot; /&gt; if there are no more siblings or if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is currently positioned on an attribute node. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が次の兄弟ノードに正常に移動された場合は <see langword="true" />。それ以上兄弟がないか、<see cref="T:System.Xml.XPath.XPathNavigator" /> が属性ノードに現在配置されている場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNext(System.String,System.String)">
      <summary vsli:raw="Moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the next sibling node with the local name and namespace URI specified.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> を、指定されたローカル名と名前空間 URI を持つ次の兄弟ノードに移動します。</summary>
      <param name="localName" vsli:raw="The local name of the next sibling node to move to.">移動先となる次の兄弟ノードのローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the next sibling node to move to.">移動先となる次の兄弟ノードの名前空間 URI。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the next sibling node; &lt;see langword=&quot;false&quot; /&gt; if there are no more siblings, or if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is currently positioned on an attribute node. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が次の兄弟ノードに正常に移動した場合は <see langword="true" />。それ以上兄弟がないか、<see cref="T:System.Xml.XPath.XPathNavigator" /> の現在位置が属性ノードの場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNext(System.Xml.XPath.XPathNodeType)">
      <summary vsli:raw="Moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the next sibling node of the current node that matches the &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; specified.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> を、指定された <see cref="T:System.Xml.XPath.XPathNodeType" /> に一致する現在のノードの次の兄弟ノードに移動します。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; of the sibling node to move to.">移動先となる兄弟ノードの <see cref="T:System.Xml.XPath.XPathNodeType" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the next sibling node; otherwise, &lt;see langword=&quot;false&quot; /&gt; if there are no more siblings or if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is currently positioned on an attribute node. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が次の兄弟ノードに正常に移動された場合は <see langword="true" />。それ以上兄弟がないか、<see cref="T:System.Xml.XPath.XPathNavigator" /> が属性ノードに現在配置されている場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextAttribute">
      <summary vsli:raw="When overridden in a derived class, moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the next attribute.">派生クラスでオーバーライドされると、<see cref="T:System.Xml.XPath.XPathNavigator" /> を次の属性に移動します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the next attribute; &lt;see langword=&quot;false&quot; /&gt; if there are no more attributes. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が次の属性に正常に移動した場合は <see langword="true" />。それ以上、属性が存在しない場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace">
      <summary vsli:raw="Moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the next namespace node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> を次の名前空間ノードに移動します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the next namespace node; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が次の名前空間ノードに正常に移動した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)">
      <summary vsli:raw="When overridden in a derived class, moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the next namespace node matching the &lt;see cref=&quot;T:System.Xml.XPath.XPathNamespaceScope&quot; /&gt; specified.">派生クラスでオーバーライドされると、<see cref="T:System.Xml.XPath.XPathNavigator" /> を、指定された <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> と一致する次の名前空間ノードに移動します。</summary>
      <param name="namespaceScope" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNamespaceScope&quot; /&gt; value describing the namespace scope.">名前空間スコープを記述する <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> 値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the next namespace node; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が次の名前空間ノードに正常に移動した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToParent">
      <summary vsli:raw="When overridden in a derived class, moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the parent node of the current node.">派生クラスでオーバーライドされると、<see cref="T:System.Xml.XPath.XPathNavigator" /> を現在のノードの親ノードに移動します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the parent node of the current node; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が現在のノードの親ノードに正常に移動した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToPrevious">
      <summary vsli:raw="When overridden in a derived class, moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the previous sibling node of the current node.">派生クラスでオーバーライドされると、<see cref="T:System.Xml.XPath.XPathNavigator" /> を現在のノードの前の兄弟ノードに移動します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the previous sibling node; otherwise, &lt;see langword=&quot;false&quot; /&gt; if there is no previous sibling node or if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is currently positioned on an attribute node. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が前の兄弟ノードに正常に移動した場合は <see langword="true" />。前の兄弟ノードがないか、<see cref="T:System.Xml.XPath.XPathNavigator" /> の現在位置が属性ノードの場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToRoot">
      <summary vsli:raw="Moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the root node that the current node belongs to.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> を、現在のノードが属しているルート ノードに移動します。</summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.Name">
      <summary vsli:raw="When overridden in a derived class, gets the qualified name of the current node.">派生クラスでオーバーライドされると、現在のノードの限定名を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the qualified &lt;see cref=&quot;P:System.Xml.XPath.XPathNavigator.Name&quot; /&gt; of the current node, or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; if the current node does not have a name (for example, text or comment nodes).">現在のノードの修飾 <see cref="T:System.String" /> が格納された <see cref="P:System.Xml.XPath.XPathNavigator.Name" />。現在のノードが名前を持たない場合 (たとえばテキスト ノードまたはコメント ノード) は <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NamespaceURI">
      <summary vsli:raw="When overridden in a derived class, gets the namespace URI of the current node.">派生クラスでオーバーライドされると、現在のノードの名前空間 URI を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the namespace URI of the current node, or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; if the current node has no namespace URI.">現在のノードの名前空間 URI が格納された <see cref="T:System.String" />。現在のノードが名前空間 URI を持っていない場合は <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NameTable">
      <summary vsli:raw="When overridden in a derived class, gets the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;.">派生クラスでオーバーライドされた場合、<see cref="T:System.Xml.XmlNameTable" /> の <see cref="T:System.Xml.XPath.XPathNavigator" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; object enabling you to get the atomized version of a &lt;see cref=&quot;T:System.String&quot; /&gt; within the XML document.">XML ドキュメント内の最小単位に分割された <see cref="T:System.Xml.XmlNameTable" /> を取得できる <see cref="T:System.String" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NavigatorComparer">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.IEqualityComparer&quot; /&gt; used for equality comparison of &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; objects.">
        <see cref="T:System.Collections.IEqualityComparer" /> オブジェクトの等価性を比較するための <see cref="T:System.Xml.XPath.XPathNavigator" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEqualityComparer&quot; /&gt; used for equality comparison of &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; objects.">
        <see cref="T:System.Collections.IEqualityComparer" /> オブジェクトの等価性を比較するための <see cref="T:System.Xml.XPath.XPathNavigator" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NodeType">
      <summary vsli:raw="When overridden in a derived class, gets the &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; of the current node.">派生クラスでオーバーライドされると、現在のノードの <see cref="T:System.Xml.XPath.XPathNodeType" /> を取得します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; values representing the current node.">現在のノードを表す <see cref="T:System.Xml.XPath.XPathNodeType" /> 値の 1 つ。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.OuterXml">
      <summary vsli:raw="Gets or sets the markup representing the opening and closing tags of the current node and its child nodes.">現在のノードとその子ノードの開始タグおよび終了タグを表すマークアップを取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the markup representing the opening and closing tags of the current node and its child nodes.">現在のノードとその子ノードの開始タグおよび終了タグを表すマークアップが格納された <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.Prefix">
      <summary vsli:raw="When overridden in a derived class, gets the namespace prefix associated with the current node.">派生クラスでオーバーライドされると、現在のノードに関連付けられている名前空間プリフィックスを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the namespace prefix associated with the current node.">現在のノードに関連付けられた名前空間プレフィックスが格納された <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object used to create a new child node at the beginning of the list of child nodes of the current node.">現在のノード下に存在する子ノードのリストの先頭に新しい子ノードを作成するために使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクトを返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object used to create a new child node at the beginning of the list of child nodes of the current node.">現在のノード下に存在する子ノードのリストの先頭に新しい子ノードを作成するために使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is positioned on does not allow a new child node to be prepended.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が配置されている現在のノードの前には、新しい子ノードを追加することはできません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.String)">
      <summary vsli:raw="Creates a new child node at the beginning of the list of child nodes of the current node using the XML string specified.">指定された XML 文字列を使用して、現在のノード下に存在する子ノードのリストの先頭に新しい子ノードを作成します。</summary>
      <param name="newChild" vsli:raw="The XML data string for the new child node.">新しい子ノード用の XML データ文字列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The XML string parameter is &lt;see langword=&quot;null&quot; /&gt;.">XML 文字列パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is positioned on does not allow a new child node to be prepended.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が配置されている現在のノードの前には、新しい子ノードを追加することはできません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML string parameter is not well-formed.">XML の文字列パラメーターが、整形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.Xml.XmlReader)">
      <summary vsli:raw="Creates a new child node at the beginning of the list of child nodes of the current node using the XML contents of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object specified.">指定された <see cref="T:System.Xml.XmlReader" /> オブジェクトの XML コンテンツを使用して、現在のノード下に存在する子ノードのリストの先頭に新しい子ノードを作成します。</summary>
      <param name="newChild" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object positioned on the XML data for the new child node.">新しい子ノード用の XML データに配置された <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object is in an error state or closed.">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトがエラー状態か、または閉じています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトのパラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is positioned on does not allow a new child node to be prepended.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が配置されている現在のノードの前には、新しい子ノードを追加することはできません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML contents of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object parameter is not well-formed.">
        <see cref="T:System.Xml.XmlReader" /> オブジェクト パラメーターの XML コンテンツは整形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="Creates a new child node at the beginning of the list of child nodes of the current node using the nodes in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object specified.">指定された <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトのノードを使用して、現在のノード下に存在する子ノードのリストの先頭に新しい子ノードを作成します。</summary>
      <param name="newChild" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object positioned on the node to add as the new child node.">新しい子ノードとして追加するノードに配置される <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトのパラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is positioned on does not allow a new child node to be prepended.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が配置されている現在のノードの前には、新しい子ノードを追加することはできません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChildElement(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Creates a new child element at the beginning of the list of child nodes of the current node using the namespace prefix, local name, and namespace URI specified with the value specified.">指定された値と共に指定した名前空間プレフィックス、ローカル名、および名前空間 URI を使用して、現在のノード下に存在する子ノードのリストの先頭に新しい子要素を作成します。</summary>
      <param name="prefix" vsli:raw="The namespace prefix of the new child element (if any).">新しい子要素の名前空間プレフィックス (存在する場合)。</param>
      <param name="localName" vsli:raw="The local name of the new child element (if any).">新しい子要素のローカル名 (存在する場合)。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the new child element (if any). &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; and &lt;see langword=&quot;null&quot; /&gt; are equivalent.">新しい子要素の名前空間 URI (存在する場合)。 <see cref="F:System.String.Empty" /> と <see langword="null" /> は等価です。</param>
      <param name="value" vsli:raw="The value of the new child element. If &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; are passed, an empty element is created.">新しい子要素の値。 <see cref="F:System.String.Empty" /> または <see langword="null" /> を渡すと、空の要素が作成されます。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is positioned on does not allow a new child node to be prepended.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が配置されている現在のノードの前には、新しい子ノードを追加することはできません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReadSubtree">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object that contains the current node and its child nodes.">現在のノードとその子ノードが格納された <see cref="T:System.Xml.XmlReader" /> オブジェクトを返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object that contains the current node and its child nodes.">現在のノードとその子ノードが格納された <see cref="T:System.Xml.XmlReader" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is not positioned on an element node or the root node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が要素ノードまたはルート ノードのいずれにも配置されていません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceRange(System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="Replaces a range of sibling nodes from the current node to the node specified.">現在のノードから指定されたノードまでの範囲内にある兄弟ノードを置き換えます。</summary>
      <param name="lastSiblingToReplace" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; positioned on the last sibling node in the range to replace.">置き換える範囲内の最後の兄弟ノードに配置された <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object used to specify the replacement range.">置き換える範囲を指定するために使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; specified is &lt;see langword=&quot;null&quot; /&gt;.">指定された <see cref="T:System.Xml.XPath.XPathNavigator" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The last node to replace specified is not a valid sibling node of the current node.">置き換え対象として指定された最後のノードは、現在のノードの有効な兄弟ノードではありません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.String)">
      <summary vsli:raw="Replaces the current node with the content of the string specified.">現在のノードを指定された文字列の内容に置き換えます。</summary>
      <param name="newNode" vsli:raw="The XML data string for the new node.">新しいノード用の XML データ文字列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The XML string parameter is &lt;see langword=&quot;null&quot; /&gt;.">XML 文字列パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is not positioned on an element, text, processing instruction, or comment node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が、要素、テキスト、処理命令、またはコメント ノードに配置されていません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML string parameter is not well-formed.">XML の文字列パラメーターが、整形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.Xml.XmlReader)">
      <summary vsli:raw="Replaces the current node with the contents of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object specified.">現在のノードを指定された <see cref="T:System.Xml.XmlReader" /> オブジェクトの内容に置き換えます。</summary>
      <param name="newNode" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object positioned on the XML data for the new node.">新しいノード用の XML データに配置されている <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object is in an error state or closed.">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトがエラー状態か、または閉じています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトのパラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is not positioned on an element, text, processing instruction, or comment node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が、要素、テキスト、処理命令、またはコメント ノードに配置されていません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML contents of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object parameter is not well-formed.">
        <see cref="T:System.Xml.XmlReader" /> オブジェクト パラメーターの XML コンテンツは整形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="Replaces the current node with the contents of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object specified.">現在のノードを指定された <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトの内容に置き換えます。</summary>
      <param name="newNode" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object positioned on the new node.">新しいノードに配置された <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトのパラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is not positioned on an element, text, processing instruction, or comment node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が、要素、テキスト、処理命令、またはコメント ノードに配置されていません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML contents of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object parameter is not well-formed.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト パラメーターの XML コンテンツは整形式ではありません。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.SchemaInfo">
      <summary vsli:raw="Gets the schema information that has been assigned to the current node as a result of schema validation.">スキーマ検証の結果、現在のノードに割り当てられているスキーマ情報を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.IXmlSchemaInfo&quot; /&gt; object that contains the schema information for the current node.">現在のノードのスキーマ情報が格納された <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.String)">
      <summary vsli:raw="Selects a node set, using the specified XPath expression.">指定された XPath 式を使用して、ノード セットを選択します。</summary>
      <param name="xpath" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; representing an XPath expression.">XPath 式を表す <see cref="T:System.String" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; pointing to the selected node set.">選択されたノード セットを指している <see cref="T:System.Xml.XPath.XPathNodeIterator" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The XPath expression contains an error or its return type is not a node set.">XPath 式にエラーが含まれているか、またはその戻り値の型がノード セットではありません。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression is not valid.">XPath 式が無効です。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary vsli:raw="Selects a node set using the specified XPath expression with the &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object specified to resolve namespace prefixes.">名前空間プレフィックスを解決するように指定された <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクトと共に指定した XPath 式を使用して、ノード セットを選択します。</summary>
      <param name="xpath" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; representing an XPath expression.">XPath 式を表す <see cref="T:System.String" />。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object used to resolve namespace prefixes.">名前空間プレフィックスの解決に使用する <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; that points to the selected node set.">選択されたノード セットを指している <see cref="T:System.Xml.XPath.XPathNodeIterator" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The XPath expression contains an error or its return type is not a node set.">XPath 式にエラーが含まれているか、またはその戻り値の型がノード セットではありません。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression is not valid.">XPath 式が無効です。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.Xml.XPath.XPathExpression)">
      <summary vsli:raw="Selects a node set using the specified &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt;.">指定した <see cref="T:System.Xml.XPath.XPathExpression" /> を使用して、ノード セットを選択します。</summary>
      <param name="expr" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; object containing the compiled XPath query.">コンパイル済みの XPath クエリが格納されている <see cref="T:System.Xml.XPath.XPathExpression" /> オブジェクト。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; that points to the selected node set.">選択されたノード セットを指している <see cref="T:System.Xml.XPath.XPathNodeIterator" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The XPath expression contains an error or its return type is not a node set.">XPath 式にエラーが含まれているか、またはその戻り値の型がノード セットではありません。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression is not valid.">XPath 式が無効です。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectAncestors(System.String,System.String,System.Boolean)">
      <summary vsli:raw="Selects all the ancestor nodes of the current node that have the specified local name and namespace URI.">指定されたローカル名と名前空間 URI を持つ現在のノードのすべての先祖ノードを選択します。</summary>
      <param name="name" vsli:raw="The local name of the ancestor nodes.">先祖ノードのローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the ancestor nodes.">先祖ノードの名前空間 URI。</param>
      <param name="matchSelf" vsli:raw="To include the context node in the selection, &lt;see langword=&quot;true&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">選択項目にコンテキスト ノードを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; that contains the selected nodes. The returned nodes are in reverse document order.">選択されたノードを格納している <see cref="T:System.Xml.XPath.XPathNodeIterator" />。 ノードは、ドキュメントの逆順で返されます。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;see langword=&quot;null&quot; /&gt; cannot be passed as a parameter.">
        <see langword="null" /> はパラメーターとして渡すことはできません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectAncestors(System.Xml.XPath.XPathNodeType,System.Boolean)">
      <summary vsli:raw="Selects all the ancestor nodes of the current node that have a matching &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt;.">一致する <see cref="T:System.Xml.XPath.XPathNodeType" /> を持つ現在のノードのすべての先祖ノードを選択します。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; of the ancestor nodes.">先祖ノードの <see cref="T:System.Xml.XPath.XPathNodeType" />。</param>
      <param name="matchSelf" vsli:raw="To include the context node in the selection, &lt;see langword=&quot;true&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">選択項目にコンテキスト ノードを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; that contains the selected nodes. The returned nodes are in reverse document order.">選択されたノードを格納している <see cref="T:System.Xml.XPath.XPathNodeIterator" />。 ノードは、ドキュメントの逆順で返されます。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectChildren(System.String,System.String)">
      <summary vsli:raw="Selects all the child nodes of the current node that have the local name and namespace URI specified.">指定されたローカル名と名前空間 URI を持つ現在のノードのすべての子ノードを選択します。</summary>
      <param name="name" vsli:raw="The local name of the child nodes.">子ノードのローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the child nodes.">子ノードの名前空間 URI。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; that contains the selected nodes.">選択されたノードを格納している <see cref="T:System.Xml.XPath.XPathNodeIterator" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;see langword=&quot;null&quot; /&gt; cannot be passed as a parameter.">
        <see langword="null" /> はパラメーターとして渡すことはできません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectChildren(System.Xml.XPath.XPathNodeType)">
      <summary vsli:raw="Selects all the child nodes of the current node that have the matching &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt;.">一致する <see cref="T:System.Xml.XPath.XPathNodeType" /> を持つ現在のノードのすべての子ノードを選択します。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; of the child nodes.">子ノードの <see cref="T:System.Xml.XPath.XPathNodeType" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; that contains the selected nodes.">選択されたノードを格納している <see cref="T:System.Xml.XPath.XPathNodeIterator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectDescendants(System.String,System.String,System.Boolean)">
      <summary vsli:raw="Selects all the descendant nodes of the current node with the local name and namespace URI specified.">指定されたローカル名と名前空間 URI を持つ現在のノードのすべての子孫ノードを選択します。</summary>
      <param name="name" vsli:raw="The local name of the descendant nodes.">子孫ノードのローカル名。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the descendant nodes.">子孫ノードの名前空間 URI。</param>
      <param name="matchSelf" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include the context node in the selection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">選択項目にコンテキスト ノードを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; that contains the selected nodes.">選択されたノードを格納している <see cref="T:System.Xml.XPath.XPathNodeIterator" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;see langword=&quot;null&quot; /&gt; cannot be passed as a parameter.">
        <see langword="null" /> はパラメーターとして渡すことはできません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectDescendants(System.Xml.XPath.XPathNodeType,System.Boolean)">
      <summary vsli:raw="Selects all the descendant nodes of the current node that have a matching &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt;.">一致する <see cref="T:System.Xml.XPath.XPathNodeType" /> を持つ現在のノードのすべての子孫ノードを選択します。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; of the descendant nodes.">子孫ノードの <see cref="T:System.Xml.XPath.XPathNodeType" />。</param>
      <param name="matchSelf" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include the context node in the selection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">選択項目にコンテキスト ノードを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; that contains the selected nodes.">選択されたノードを格納している <see cref="T:System.Xml.XPath.XPathNodeIterator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.String)">
      <summary vsli:raw="Selects a single node in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; using the specified XPath query.">指定された XPath クエリを使用して、<see cref="T:System.Xml.XPath.XPathNavigator" /> 内の単一のノードを選択します。</summary>
      <param name="xpath" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; representing an XPath expression.">XPath 式を表す <see cref="T:System.String" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object that contains the first matching node for the XPath query specified; otherwise, &lt;see langword=&quot;null&quot; /&gt; if there are no query results.">指定された XPath クエリに対して最初に一致するノードが格納された <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。クエリ結果がない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="An error was encountered in the XPath query or the return type of the XPath expression is not a node.">XPath クエリでエラーが発生したか、または XPath 式の戻り値の型がノードではありません。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath query is not valid.">XPath クエリが無効です。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary vsli:raw="Selects a single node in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object using the specified XPath query with the &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object specified to resolve namespace prefixes.">名前空間プレフィックスを解決するために指定された <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトと共に、指定された XPath クエリを使用して <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト内の単一のノードを選択します。</summary>
      <param name="xpath" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; representing an XPath expression.">XPath 式を表す <see cref="T:System.String" />。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object used to resolve namespace prefixes in the XPath query.">XPath クエリの名前空間プレフィックスの解決に使用する <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object that contains the first matching node for the XPath query specified; otherwise &lt;see langword=&quot;null&quot; /&gt; if there are no query results.">指定された XPath クエリに対して最初に一致するノードが格納された <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。クエリ結果がない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="An error was encountered in the XPath query or the return type of the XPath expression is not a node.">XPath クエリでエラーが発生したか、または XPath 式の戻り値の型がノードではありません。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath query is not valid.">XPath クエリが無効です。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.Xml.XPath.XPathExpression)">
      <summary vsli:raw="Selects a single node in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; using the specified &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; object.">指定された <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトを使用して、<see cref="T:System.Xml.XPath.XPathExpression" /> 内の単一のノードを選択します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; object containing the compiled XPath query.">コンパイル済みの XPath クエリが格納されている <see cref="T:System.Xml.XPath.XPathExpression" /> オブジェクト。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object that contains the first matching node for the XPath query specified; otherwise &lt;see langword=&quot;null&quot; /&gt; if there are no query results.">指定された XPath クエリに対して最初に一致するノードが格納された <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。クエリ結果がない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="An error was encountered in the XPath query or the return type of the XPath expression is not a node.">XPath クエリでエラーが発生したか、または XPath 式の戻り値の型がノードではありません。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath query is not valid.">XPath クエリが無効です。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SetTypedValue(System.Object)">
      <summary vsli:raw="Sets the typed value of the current node.">現在のノードの型指定された値を設定します。</summary>
      <param name="typedValue" vsli:raw="The new typed value of the node.">ノードの型指定された新しい値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support the type of the object specified.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は、指定されたオブジェクトの型をサポートしていません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The value specified cannot be &lt;see langword=&quot;null&quot; /&gt;.">指定された値を <see langword="null" /> にすることはできません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is not positioned on an element or attribute node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が、要素ノードと属性ノードのいずれにも配置されていません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SetValue(System.String)">
      <summary vsli:raw="Sets the value of the current node.">現在のノードの値を設定します。</summary>
      <param name="value" vsli:raw="The new value of the node.">ノードの新しい値。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The value parameter is &lt;see langword=&quot;null&quot; /&gt;.">値パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is positioned on the root node, a namespace node, or the specified value is invalid.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> がルート ノードまたは名前空間ノードに配置されているか、指定された値が無効です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は編集をサポートしていません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.System#ICloneable#Clone">
      <summary vsli:raw="Creates a new copy of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object.">現在の <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトの新しいコピーを作成します。</summary>
      <returns vsli:raw="A new copy of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object.">現在の <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトの新しいコピー。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ToString">
      <summary vsli:raw="Gets the text value of the current node.">現在のノードのテキスト値を取得します。</summary>
      <returns vsli:raw="A &lt;see langword=&quot;string&quot; /&gt; that contains the text value of the current node.">現在のノードのテキスト値が格納された <see langword="string" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.TypedValue">
      <summary vsli:raw="Gets the current node as a boxed object of the most appropriate .NET type.">現在のノードを、最も適切な .NET Framework 型にボックス化変換したオブジェクトとして取得します。</summary>
      <returns vsli:raw="The current node as a boxed object of the most appropriate .NET type.">最も適切な .NET Framework 型にボックス化変換されたオブジェクトとしての現在のノード。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.UnderlyingObject">
      <summary vsli:raw="Used by &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; implementations which provide a &quot;virtualized&quot; XML view over a store, to provide access to underlying objects.">ストアに対する "仮想化された" XML ビューを提供する <see cref="T:System.Xml.XPath.XPathNavigator" /> 実装で使用し、基になるオブジェクトへのアクセスを提供します。</summary>
      <returns vsli:raw="The default is &lt;see langword=&quot;null&quot; /&gt;.">既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary vsli:raw="Gets the current node's value as the &lt;see cref=&quot;T:System.Type&quot; /&gt; specified, using the &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object specified to resolve namespace prefixes.">現在のノードの値を指定された <see cref="T:System.Type" /> として取得し、指定された <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクトを使用して名前空間プレフィックスを解決します。</summary>
      <param name="returnType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to return the current node's value as.">現在のノードの値を返すときの <see cref="T:System.Type" />。</param>
      <param name="nsResolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object used to resolve namespace prefixes.">名前空間プレフィックスの解決に使用する <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
      <returns vsli:raw="The value of the current node as the &lt;see cref=&quot;T:System.Type&quot; /&gt; requested.">要求した <see cref="T:System.Type" /> に変換された現在のノードの値。</returns>
      <exception cref="T:System.FormatException" vsli:raw="The current node's value is not in the correct format for the target type.">現在のノードの値が、指定した型に適した形式ではありません。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast is not valid.">試行されたキャストが無効です。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsBoolean">
      <summary vsli:raw="Gets the current node's value as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">現在のノードの値を <see cref="T:System.Boolean" /> として取得します。</summary>
      <returns vsli:raw="The current node's value as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">現在のノードの <see cref="T:System.Boolean" /> としての値。</returns>
      <exception cref="T:System.FormatException" vsli:raw="The current node's string value cannot be converted to a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">現在のノードの文字列値を、<see cref="T:System.Boolean" /> に変換することはできません。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.Boolean&quot; /&gt; is not valid.">試行された <see cref="T:System.Boolean" /> へのキャストは無効です。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsDateTime">
      <summary vsli:raw="Gets the current node's value as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">現在のノードの値を <see cref="T:System.DateTime" /> として取得します。</summary>
      <returns vsli:raw="The current node's value as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">現在のノードの <see cref="T:System.DateTime" /> としての値。</returns>
      <exception cref="T:System.FormatException" vsli:raw="The current node's string value cannot be converted to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">現在のノードの文字列値を、<see cref="T:System.DateTime" /> に変換することはできません。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.DateTime&quot; /&gt; is not valid.">試行された <see cref="T:System.DateTime" /> へのキャストは無効です。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsDouble">
      <summary vsli:raw="Gets the current node's value as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">現在のノードの値を <see cref="T:System.Double" /> として取得します。</summary>
      <returns vsli:raw="The current node's value as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">現在のノードの <see cref="T:System.Double" /> としての値。</returns>
      <exception cref="T:System.FormatException" vsli:raw="The current node's string value cannot be converted to a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">現在のノードの文字列値を、<see cref="T:System.Double" /> に変換することはできません。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.Double&quot; /&gt; is not valid.">試行された <see cref="T:System.Double" /> へのキャストは無効です。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsInt">
      <summary vsli:raw="Gets the current node's value as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">現在のノードの値を <see cref="T:System.Int32" /> として取得します。</summary>
      <returns vsli:raw="The current node's value as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">現在のノードの <see cref="T:System.Int32" /> としての値。</returns>
      <exception cref="T:System.FormatException" vsli:raw="The current node's string value cannot be converted to a &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">現在のノードの文字列値を、<see cref="T:System.Int32" /> に変換することはできません。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.Int32&quot; /&gt; is not valid.">試行された <see cref="T:System.Int32" /> へのキャストは無効です。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsLong">
      <summary vsli:raw="Gets the current node's value as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">現在のノードの値を <see cref="T:System.Int64" /> として取得します。</summary>
      <returns vsli:raw="The current node's value as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">現在のノードの <see cref="T:System.Int64" /> としての値。</returns>
      <exception cref="T:System.FormatException" vsli:raw="The current node's string value cannot be converted to a &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">現在のノードの文字列値を、<see cref="T:System.Int64" /> に変換することはできません。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.Int64&quot; /&gt; is not valid.">試行された <see cref="T:System.Int64" /> へのキャストは無効です。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueType">
      <summary vsli:raw="Gets the .NET &lt;see cref=&quot;T:System.Type&quot; /&gt; of the current node.">現在のノードの .NET Framework <see cref="T:System.Type" /> を取得します。</summary>
      <returns vsli:raw="The .NET &lt;see cref=&quot;T:System.Type&quot; /&gt; of the current node. The default value is &lt;see cref=&quot;T:System.String&quot; /&gt;.">現在のノードの .NET Framework <see cref="T:System.Type" />。 既定値は <see cref="T:System.String" /> です。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.WriteSubtree(System.Xml.XmlWriter)">
      <summary vsli:raw="Streams the current node and its child nodes to the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object specified.">現在のノードとその子ノードを、指定された <see cref="T:System.Xml.XmlWriter" /> オブジェクトにストリーム転送します。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object to stream to.">ストリーム転送先の <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</param>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.XmlLang">
      <summary vsli:raw="Gets the &lt;c&gt;xml:lang&lt;/c&gt; scope for the current node.">現在のノードの <c>xml:lang</c> スコープを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the value of the &lt;c&gt;xml:lang&lt;/c&gt; scope, or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; if the current node has no &lt;c&gt;xml:lang&lt;/c&gt; scope value to return.">Xml: <c>lang</c>スコープの値を格納している。また<see cref="F:System.String.Empty" />は、返さ<c></c> れるxml:langスコープ値が現在のノードにない場合<see cref="T:System.String" />は。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.XmlType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; information for the current node.">現在のノードの <see cref="T:System.Xml.Schema.XmlSchemaType" /> 情報を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; object; default is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaType" /> オブジェクト。既定値は <see langword="null" /> です。</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNodeIterator">
      <summary vsli:raw="Provides an iterator over a selected set of nodes.">選択したノード セットに対する反復子を提供します。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; class.">
        <see cref="T:System.Xml.XPath.XPathNodeIterator" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.Clone">
      <summary vsli:raw="When overridden in a derived class, returns a clone of this &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; object.">派生クラスでオーバーライドされた場合、この <see cref="T:System.Xml.XPath.XPathNodeIterator" /> オブジェクトの複製を返します。</summary>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; object clone of this &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; object.">この <see cref="T:System.Xml.XPath.XPathNodeIterator" /> オブジェクトを複製した新しい <see cref="T:System.Xml.XPath.XPathNodeIterator" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.Count">
      <summary vsli:raw="Gets the index of the last node in the selected set of nodes.">選択したノード セットの最後のノードのインデックスを取得します。</summary>
      <returns vsli:raw="The index of the last node in the selected set of nodes, or 0 if there are no selected nodes.">選択したノード セットの最後のノードのインデックス。ノードが選択されていない場合は 0。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.Current">
      <summary vsli:raw="When overridden in a derived class, gets the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object for this &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt;, positioned on the current context node.">派生クラスでオーバーライドされると、現在のコンテキスト ノードに配置されている、この <see cref="T:System.Xml.XPath.XPathNavigator" /> に対する <see cref="T:System.Xml.XPath.XPathNodeIterator" /> オブジェクトを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object positioned on the context node from which the node set was selected. The &lt;see cref=&quot;M:System.Xml.XPath.XPathNodeIterator.MoveNext&quot; /&gt; method must be called to move the &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; to the first node in the selected set.">ノード セットの選択元であるコンテキスト ノードに配置されている <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。 <see cref="M:System.Xml.XPath.XPathNodeIterator.MoveNext" /> を選択ノード セットの最初のノードに移動するには、<see cref="T:System.Xml.XPath.XPathNodeIterator" /> メソッドを呼び出す必要があります。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.CurrentPosition">
      <summary vsli:raw="When overridden in a derived class, gets the index of the current position in the selected set of nodes.">派生クラスでオーバーライドされると、選択したノード セットの現在の位置のインデックスを取得します。</summary>
      <returns vsli:raw="The index of the current position.">現在の位置のインデックス。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object to iterate through the selected node set.">選択したノード セットを反復処理する <see cref="T:System.Collections.IEnumerator" /> オブジェクトを返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object to iterate through the selected node set.">選択したノード セットを反復処理する <see cref="T:System.Collections.IEnumerator" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.MoveNext">
      <summary vsli:raw="When overridden in a derived class, moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object returned by the &lt;see cref=&quot;P:System.Xml.XPath.XPathNodeIterator.Current&quot; /&gt; property to the next node in the selected node set.">派生クラスでオーバーライドされた場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> プロパティによって返された <see cref="P:System.Xml.XPath.XPathNodeIterator.Current" /> オブジェクトを、選択したノード セットの次のノードへ移動します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object moved to the next node; &lt;see langword=&quot;false&quot; /&gt; if there are no more selected nodes.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトが次のノードへ移動した場合は <see langword="true" />。それ以上選択したノードが存在しない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.System#ICloneable#Clone">
      <summary vsli:raw="Creates a new object that is a copy of the current instance.">現在のインスタンスのコピーである新しいオブジェクトを作成します。</summary>
      <returns vsli:raw="A new object that is a copy of this instance.">このインスタンスのコピーである新しいオブジェクト。</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNodeType">
      <summary vsli:raw="Defines the XPath node types that can be returned from the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; class.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> クラスから返される XPath ノード型を定義します。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.All">
      <summary vsli:raw="Any of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; node types.">任意の <see cref="T:System.Xml.XPath.XPathNodeType" /> ノード型。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Attribute">
      <summary vsli:raw="An attribute, such as &lt;c&gt;id='123'&lt;/c&gt;.">
        <c>id='123'</c> などの属性。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Comment">
      <summary vsli:raw="A comment, such as &lt;c&gt;&amp;lt;!-- my comment --&amp;gt;&lt;/c&gt;.">
        <c>&lt;!-- my comment --&gt;</c> などのコメント。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Element">
      <summary vsli:raw="An element, such as &lt;c&gt;&amp;lt;element&amp;gt;&lt;/c&gt;.">
        <c>&lt;element&gt;</c> などの要素。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Namespace">
      <summary vsli:raw="A namespace, such as &lt;c&gt;xmlns=&quot;namespace&quot;&lt;/c&gt;.">
        <c>xmlns="namespace"</c> などの名前空間。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.ProcessingInstruction">
      <summary vsli:raw="A processing instruction, such as &lt;c&gt;&amp;lt;?pi test?&amp;gt;&lt;/c&gt;. This does not include XML declarations, which are not visible to the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; class.">
        <c>&lt;?pi test?&gt;</c> などの処理命令。 XML 宣言は <see cref="T:System.Xml.XPath.XPathNavigator" /> クラスから参照できないため、これには含まれません。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Root">
      <summary vsli:raw="The root node of the XML document or node tree.">XML ドキュメントまたはノード ツリーのルート ノード。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.SignificantWhitespace">
      <summary vsli:raw="A node with white space characters and &lt;c&gt;xml:space&lt;/c&gt; set to &lt;c&gt;preserve&lt;/c&gt;.">空白文字を含み、<c>xml:space</c> が <c>preserve</c> に設定されているノード。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Text">
      <summary vsli:raw="The text content of a node. Equivalent to the Document Object Model (DOM) Text and CDATA node types. Contains at least one character.">ノードのテキストの内容。 ドキュメント オブジェクト モデル (DOM: Document Object Model) Text 型および CDATA ノード型と等価です。 少なくとも 1 文字を含みます。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Whitespace">
      <summary vsli:raw="A node with only white space characters and no significant white space. White space characters are &lt;c&gt;#x20&lt;/c&gt;, &lt;c&gt;#x9&lt;/c&gt;, &lt;c&gt;#xD&lt;/c&gt;, or &lt;c&gt;#xA&lt;/c&gt;.">空白文字だけを含み、有意な空白を含まないノード。 空白文字は <c>#x20</c>、<c>#x9</c>、<c>#xD</c>、または <c>#xA</c> です。</summary>
    </member>
    <member name="T:System.Xml.XPath.XPathResultType">
      <summary vsli:raw="Specifies the return type of the XPath expression.">XPath 式の戻り値の型を指定します。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Any">
      <summary vsli:raw="Any of the XPath node types.">任意の XPath ノード型。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Boolean">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt;&lt;see langword=&quot;true&quot; /&gt; or &lt;see langword=&quot;false&quot; /&gt; value.">
        <see cref="T:System.Boolean" />
        <see langword="true" /> 値、または <see langword="false" /> 値。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Error">
      <summary vsli:raw="The expression does not evaluate to the correct XPath type.">式が正しい XPath 型を評価しません。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Navigator">
      <summary vsli:raw="A tree fragment.">ツリー フラグメント。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.NodeSet">
      <summary vsli:raw="A node collection.">ノード コレクション。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Number">
      <summary vsli:raw="A numeric value.">数値を指定します。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.String">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; value.">
        <see cref="T:System.String" /> 値。</summary>
    </member>
    <member name="T:System.Xml.Xsl.IXsltContextFunction">
      <summary vsli:raw="Provides an interface to a given function defined in the Extensible Stylesheet Language for Transformations (XSLT) style sheet during runtime execution.">XSLT (Extensible Stylesheet Language Transformations) スタイル シートに定義されている特定の関数へのインターフェイスをランタイム実行時に提供します。</summary>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.ArgTypes">
      <summary vsli:raw="Gets the supplied XML Path Language (XPath) types for the function's argument list. This information can be used to discover the signature of the function which allows you to differentiate between overloaded functions.">関数の引数リストに対して指定されている XPath (XML Path Language) 型を取得します。 この情報を使用すると、オーバーロードされた関数を区別するための関数のシグネチャを検出できます。</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Xml.XPath.XPathResultType&quot; /&gt; representing the types for the function's argument list.">関数の引数リストの型を表す <see cref="T:System.Xml.XPath.XPathResultType" /> の配列。</returns>
    </member>
    <member name="M:System.Xml.Xsl.IXsltContextFunction.Invoke(System.Xml.Xsl.XsltContext,System.Object[],System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="Provides the method to invoke the function with the given arguments in the given context.">特定のコンテキストにおいて、引数を指定して関数を呼び出すメソッドを提供します。</summary>
      <param name="xsltContext" vsli:raw="The XSLT context for the function call.">関数の呼び出し時の XSLT コンテキスト。</param>
      <param name="args" vsli:raw="The arguments of the function call. Each argument is an element in the array.">関数の呼び出し時に渡す引数。 各引数は配列内の要素です。</param>
      <param name="docContext" vsli:raw="The context node for the function call.">関数の呼び出し時のコンテキスト ノード。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the return value of the function.">関数の戻り値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.Maxargs">
      <summary vsli:raw="Gets the maximum number of arguments for the function. This enables the user to differentiate between overloaded functions.">関数の引数の最大数を取得します。 この情報を使用すると、オーバーロードされた関数を区別できます。</summary>
      <returns vsli:raw="The maximum number of arguments for the function.">関数の引数の最大数。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.Minargs">
      <summary vsli:raw="Gets the minimum number of arguments for the function. This enables the user to differentiate between overloaded functions.">関数の引数の最小数を取得します。 この情報を使用すると、オーバーロードされた関数を区別できます。</summary>
      <returns vsli:raw="The minimum number of arguments for the function.">関数の引数の最小数。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.ReturnType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XPath.XPathResultType&quot; /&gt; representing the XPath type returned by the function.">関数によって返された XPath 型を表す <see cref="T:System.Xml.XPath.XPathResultType" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathResultType&quot; /&gt; representing the XPath type returned by the function.">関数によって返された XPath 型を表す <see cref="T:System.Xml.XPath.XPathResultType" />。</returns>
    </member>
    <member name="T:System.Xml.Xsl.IXsltContextVariable">
      <summary vsli:raw="Provides an interface to a given variable that is defined in the style sheet during runtime execution.">スタイル シートに定義されている特定の変数へのインターフェイスを、ランタイムでの実行中に提供します。</summary>
    </member>
    <member name="M:System.Xml.Xsl.IXsltContextVariable.Evaluate(System.Xml.Xsl.XsltContext)">
      <summary vsli:raw="Evaluates the variable at runtime and returns an object that represents the value of the variable.">実行時に変数を評価し、変数の値を表すオブジェクトを返します。</summary>
      <param name="xsltContext" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltContext&quot; /&gt; representing the execution context of the variable.">変数の実行コンテキストを表す <see cref="T:System.Xml.Xsl.XsltContext" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the value of the variable. Possible return types include number, string, Boolean, document fragment, or node set.">変数の値を表す <see cref="T:System.Object" />。 有効な戻り値の型には、数字、文字列、ブール値、ドキュメントの断片、またはノード セットがあります。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.IsLocal">
      <summary vsli:raw="Gets a value indicating whether the variable is local.">変数がローカルかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the variable is a local variable in the current context; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">変数が現在のコンテキストにおいてローカル変数である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.IsParam">
      <summary vsli:raw="Gets a value indicating whether the variable is an Extensible Stylesheet Language Transformations (XSLT) parameter. This can be a parameter to a style sheet or a template.">変数が、XSLT (Extensible Stylesheet Language Transformations) パラメーターかどうかを示す値を取得します。 これは、スタイル シートまたはテンプレートに対するパラメーターになります。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the variable is an XSLT parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">変数が XSLT パラメーターの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.VariableType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XPath.XPathResultType&quot; /&gt; representing the XML Path Language (XPath) type of the variable.">変数の XPath (XML Path Language) 型を表す <see cref="T:System.Xml.XPath.XPathResultType" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathResultType&quot; /&gt; representing the XPath type of the variable.">変数の XPath 型を表す <see cref="T:System.Xml.XPath.XPathResultType" />。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XslCompiledTransform">
      <summary vsli:raw="Transforms XML data using an XSLT style sheet.">XSLT スタイル シートを使用して、XML データを変換します。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Xsl.XslCompiledTransform&quot; /&gt; class.">
        <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Xsl.XslCompiledTransform&quot; /&gt; class with the specified debug setting.">
        <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> クラスの新しいインスタンスを、指定されたデバッグ設定を使用して初期化します。</summary>
      <param name="enableDebug" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to generate debug information; otherwise &lt;see langword=&quot;false&quot; /&gt;. Setting this to &lt;see langword=&quot;true&quot; /&gt; enables you to debug the style sheet with the Microsoft Visual Studio Debugger.">デバッグ情報を生成する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 これを <see langword="true" /> に設定すると、Microsoft Visual Studio デバッガーを使用してスタイル シートをデバッグできます。</param>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Reflection.MethodInfo,System.Byte[],System.Type[])">
      <summary vsli:raw="Loads a method from a style sheet compiled using the &lt;see langword=&quot;XSLTC.exe&quot; /&gt; utility.">
        <see langword="XSLTC.exe" /> ユーティリティを使用してコンパイルされたスタイル シートからメソッドを読み込みます。</summary>
      <param name="executeMethod" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object representing the compiler-generated &lt;c&gt;execute&lt;/c&gt; method of the compiled style sheet.">コンパイラが生成した、コンパイル済みスタイル シートの <c>execute</c> メソッドを表す <see cref="T:System.Reflection.MethodInfo" /> オブジェクト。</param>
      <param name="queryData" vsli:raw="A byte array of serialized data structures in the &lt;c&gt;staticData&lt;/c&gt; field of the compiled style sheet as generated by the &lt;see cref=&quot;M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)&quot; /&gt; method.">
        <see cref="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" /> メソッドによって生成されたコンパイル済みスタイル シートの <c>staticData</c> フィールドに含まれるシリアル化されたデータ構造のバイト配列。</param>
      <param name="earlyBoundTypes" vsli:raw="An array of types stored in the compiler-generated &lt;c&gt;ebTypes&lt;/c&gt; field of the compiled style sheet.">コンパイラが生成した、コンパイル済みスタイル シートの <c>ebTypes</c> フィールドに格納された型の配列。</param>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String)">
      <summary vsli:raw="Loads and compiles the style sheet located at the specified URI.">指定された URI にあるスタイル シートの読み込みおよびコンパイルを行います。</summary>
      <param name="stylesheetUri" vsli:raw="The URI of the style sheet.">スタイル シートの URI。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;stylesheetUri&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stylesheetUri" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="The style sheet contains an error.">スタイル シートにエラーが含まれています。</exception>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The style sheet cannot be found.">スタイル シートが見つかりません。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException" vsli:raw="The &lt;paramref name=&quot;stylesheetUri&quot; /&gt; value includes a filename or directory that cannot be found.">
        <paramref name="stylesheetUri" /> の値に、存在しないファイル名またはディレクトリが含まれています。</exception>
      <exception cref="T:System.Net.WebException" vsli:raw="The &lt;paramref name=&quot;stylesheetUri&quot; /&gt; value cannot be resolved.  &#xA;  &#xA; -or-  &#xA;  &#xA; An error occurred while processing the request.">
        <paramref name="stylesheetUri" /> 値を解決できません。  

または - 
この要求の処理中にエラーが発生しました。</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="&lt;paramref name=&quot;stylesheetUri&quot; /&gt; is not a valid URI.">
        <paramref name="stylesheetUri" /> は有効な URI ではありません。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="There was a parsing error loading the style sheet.">スタイル シートの読み込み中に解析エラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
      <summary vsli:raw="Loads and compiles the XSLT style sheet specified by the URI. The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; resolves any XSLT &lt;c&gt;import&lt;/c&gt; or &lt;c&gt;include&lt;/c&gt; elements and the XSLT settings determine the permissions for the style sheet.">URI で指定された XSLT スタイル シートの読み込みおよびコンパイルを行います。 <see cref="T:System.Xml.XmlResolver" /> は、XSLT の <c>import</c> 要素または <c>include</c> 要素を解決し、XSLT 設定でスタイル シートに対するアクセス許可を確認します。</summary>
      <param name="stylesheetUri" vsli:raw="The URI of the style sheet.">スタイル シートの URI。</param>
      <param name="settings" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Xsl.XsltSettings&quot; /&gt; to apply to the style sheet. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;see cref=&quot;P:System.Xml.Xsl.XsltSettings.Default&quot; /&gt; setting is applied.">スタイル シートに適用する <see cref="T:System.Xml.Xsl.XsltSettings" />。 これが <see langword="null" /> の場合は、<see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 設定が適用されます。</param>
      <param name="stylesheetResolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve the style sheet URI and any style sheets referenced in XSLT &lt;c&gt;import&lt;/c&gt; and &lt;c&gt;include&lt;/c&gt; elements.">XSLT の <c>import</c> 要素および <c>include</c> 要素で参照されるスタイル シート URI および任意のスタイル シートを解決するために使用する <see cref="T:System.Xml.XmlResolver" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;stylesheetUri&quot; /&gt; or &lt;paramref name=&quot;stylesheetResolver&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stylesheetUri" /> または <paramref name="stylesheetResolver" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="The style sheet contains an error.">スタイル シートにエラーが含まれています。</exception>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The style sheet cannot be found.">スタイル シートが見つかりません。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException" vsli:raw="The &lt;paramref name=&quot;stylesheetUri&quot; /&gt; value includes a filename or directory that cannot be found.">
        <paramref name="stylesheetUri" /> の値に、存在しないファイル名またはディレクトリが含まれています。</exception>
      <exception cref="T:System.Net.WebException" vsli:raw="The &lt;paramref name=&quot;stylesheetUri&quot; /&gt; value cannot be resolved.  &#xA;  &#xA; -or-  &#xA;  &#xA; An error occurred while processing the request.">
        <paramref name="stylesheetUri" /> 値を解決できません。  

または - 
この要求の処理中にエラーが発生しました。</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="&lt;paramref name=&quot;stylesheetUri&quot; /&gt; is not a valid URI.">
        <paramref name="stylesheetUri" /> は有効な URI ではありません。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="There was a parsing error loading the style sheet.">スタイル シートの読み込み中に解析エラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Type)">
      <summary vsli:raw="Loads the compiled style sheet that was created using the XSLT Compiler (xsltc.exe).">XSLT コンパイラ (xsltc.exe) を使用して作成されたコンパイル済みスタイル シートを読み込みます。</summary>
      <param name="compiledStylesheet" vsli:raw="The name of the class that contains the compiled style sheet.  &#xA;  &#xA; This is usually the name of the style sheet. Unless otherwise specified, the xsltc.exe tool uses the name of the style sheet for the class and assembly names.">コンパイル済みスタイル シートを含むクラスの名前。  
 これは、通常、スタイル シート名です。 別途指定しない限り、xsltc.exe ツールはスタイル シート名をクラス名およびアセンブリ名に使用します。</param>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader)">
      <summary vsli:raw="Compiles the style sheet contained in the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlReader" /> に格納されているスタイル シートをコンパイルします。</summary>
      <param name="stylesheet" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; containing the style sheet.">スタイル シートが格納されている <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;stylesheet&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stylesheet" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="The style sheet contains an error.">スタイル シートにエラーが含まれています。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
      <summary vsli:raw="Compiles the XSLT style sheet contained in the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;. The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; resolves any XSLT &lt;c&gt;import&lt;/c&gt; or &lt;c&gt;include&lt;/c&gt; elements and the XSLT settings determine the permissions for the style sheet.">
        <see cref="T:System.Xml.XmlReader" /> に格納されている XSLT スタイル シートをコンパイルします。 <see cref="T:System.Xml.XmlResolver" /> は、XSLT の <c>import</c> 要素または <c>include</c> 要素を解決し、XSLT 設定でスタイル シートに対するアクセス許可を確認します。</summary>
      <param name="stylesheet" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; containing the style sheet.">スタイル シートが格納されている <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="settings" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Xsl.XsltSettings&quot; /&gt; to apply to the style sheet. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;see cref=&quot;P:System.Xml.Xsl.XsltSettings.Default&quot; /&gt; setting is applied.">スタイル シートに適用する <see cref="T:System.Xml.Xsl.XsltSettings" />。 これが <see langword="null" /> の場合は、<see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 設定が適用されます。</param>
      <param name="stylesheetResolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve any style sheets referenced in XSLT &lt;c&gt;import&lt;/c&gt; and &lt;c&gt;include&lt;/c&gt; elements. If this is &lt;see langword=&quot;null&quot; /&gt;, external resources are not resolved.">XSLT の <c>import</c> 要素および <c>include</c> 要素で参照される任意のスタイル シートを解決するために使用する <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合は、外部リソースが解決されません。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;stylesheet&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stylesheet" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="The style sheet contains an error.">スタイル シートにエラーが含まれています。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable)">
      <summary vsli:raw="Compiles the style sheet contained in the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; object.">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> オブジェクトに格納されているスタイル シートをコンパイルします。</summary>
      <param name="stylesheet" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the Microsoft .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the style sheet.">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクト。 Microsoft .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、またはスタイル シートが格納されている <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;stylesheet&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stylesheet" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="The style sheet contains an error.">スタイル シートにエラーが含まれています。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
      <summary vsli:raw="Compiles the XSLT style sheet contained in the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt;. The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; resolves any XSLT &lt;c&gt;import&lt;/c&gt; or &lt;c&gt;include&lt;/c&gt; elements and the XSLT settings determine the permissions for the style sheet.">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> に格納されている XSLT スタイル シートをコンパイルします。 <see cref="T:System.Xml.XmlResolver" /> は、XSLT の <c>import</c> 要素または <c>include</c> 要素を解決し、XSLT 設定でスタイル シートに対するアクセス許可を確認します。</summary>
      <param name="stylesheet" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the Microsoft .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the style sheet.">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクト。 Microsoft .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、またはスタイル シートが格納されている <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <param name="settings" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Xsl.XsltSettings&quot; /&gt; to apply to the style sheet. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;see cref=&quot;P:System.Xml.Xsl.XsltSettings.Default&quot; /&gt; setting is applied.">スタイル シートに適用する <see cref="T:System.Xml.Xsl.XsltSettings" />。 これが <see langword="null" /> の場合は、<see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 設定が適用されます。</param>
      <param name="stylesheetResolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve any style sheets referenced in XSLT &lt;c&gt;import&lt;/c&gt; and &lt;c&gt;include&lt;/c&gt; elements. If this is &lt;see langword=&quot;null&quot; /&gt;, external resources are not resolved.">XSLT の <c>import</c> 要素および <c>include</c> 要素で参照される任意のスタイル シートを解決するために使用する <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合は、外部リソースが解決されません。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;stylesheet&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stylesheet" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="The style sheet contains an error.">スタイル シートにエラーが含まれています。</exception>
    </member>
    <member name="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object that contains the output information derived from the &lt;c&gt;xsl:output&lt;/c&gt; element of the style sheet.">スタイル シートの <c>xsl:output</c> 要素から派生した出力情報が格納された <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを取得します。</summary>
      <returns vsli:raw="A read-only &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object that contains the output information derived from the &lt;c&gt;xsl:output&lt;/c&gt; element of the style sheet. This value can be &lt;see langword=&quot;null&quot; /&gt;.">スタイルシートの<see cref="T:System.Xml.XmlWriterSettings" /><c>xsl: output</c>要素から派生した出力情報を格納している読み取り専用のオブジェクト。 この値は、<see langword="null" /> の場合もあります。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.String)">
      <summary vsli:raw="Executes the transform using the input document specified by the URI and outputs the results to a file.">URI で指定された入力ドキュメントを使用して変換を実行し、結果をファイルに出力します。</summary>
      <param name="inputUri" vsli:raw="The URI of the input document.">入力ドキュメントの URI。</param>
      <param name="resultsFile" vsli:raw="The URI of the output file.">出力ファイルの URI。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; or &lt;paramref name=&quot;resultsFile&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="inputUri" /> または <paramref name="resultsFile" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="There was an error executing the XSLT transform.">XSLT 変換の実行中にエラーが発生しました。</exception>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The input document cannot be found.">入力ドキュメントが見つかりません。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; or &lt;paramref name=&quot;resultsFile&quot; /&gt; value includes a filename or directory cannot be found.">
        <paramref name="inputUri" /> 値または <paramref name="resultsFile" /> 値に、存在しないファイル名またはディレクトリが含まれています。</exception>
      <exception cref="T:System.Net.WebException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; or &lt;paramref name=&quot;resultsFile&quot; /&gt; value cannot be resolved.  &#xA;  &#xA; -or-  &#xA;  &#xA; An error occurred while processing the request.">
        <paramref name="inputUri" /> 値または <paramref name="resultsFile" /> 値を解決できません。  
または 
要求の処理中にエラーが発生しました。</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="&lt;paramref name=&quot;inputUri&quot; /&gt; or &lt;paramref name=&quot;resultsFile&quot; /&gt; is not a valid URI.">
        <paramref name="inputUri" /> または <paramref name="resultsFile" /> が有効な URI ではありません。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="There was a parsing error loading the input document.">入力ドキュメントの読み込み中に解析エラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)">
      <summary vsli:raw="Executes the transform using the input document specified by the URI and outputs the results to an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">URI で指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。</summary>
      <param name="inputUri" vsli:raw="The URI of the input document.">入力ドキュメントの URI。</param>
      <param name="results" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to which you want to output.  &#xA;  &#xA; If the style sheet contains an &lt;c&gt;xsl:output&lt;/c&gt; element, you should create the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; using the &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object returned from the &lt;see cref=&quot;P:System.Xml.Xsl.XslCompiledTransform.OutputSettings&quot; /&gt; property. This ensures that the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; has the correct output settings.">出力先の <see cref="T:System.Xml.XmlWriter" />。  
スタイル シートに <c>xsl:output</c> 要素が含まれている場合は、<see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> プロパティから返される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して <see cref="T:System.Xml.XmlWriter" /> を作成する必要があります。 これにより、<see cref="T:System.Xml.XmlWriter" /> に正しい出力設定が設定されます。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; or &lt;paramref name=&quot;results&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="inputUri" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="There was an error executing the XSLT transform.">XSLT 変換の実行中にエラーが発生しました。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; value includes a filename or directory cannot be found.">
        <paramref name="inputUri" /> の値に、存在しないファイル名またはディレクトリが含まれています。</exception>
      <exception cref="T:System.Net.WebException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; value cannot be resolved.  &#xA;  &#xA; -or-  &#xA;  &#xA; An error occurred while processing the request.">
        <paramref name="inputUri" /> 値を解決できません。  

または - 
この要求の処理中にエラーが発生しました。</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="&lt;paramref name=&quot;inputUri&quot; /&gt; is not a valid URI.">
        <paramref name="inputUri" /> は有効な URI ではありません。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="There was a parsing error loading the input document.">入力ドキュメントの読み込み中に解析エラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary vsli:raw="Executes the transform using the input document specified by the URI and outputs the results to stream. The &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; provides additional run-time arguments.">URI で指定された入力ドキュメントを使用して変換を実行し、結果をストリームに出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には、追加の実行時引数を指定します。</summary>
      <param name="inputUri" vsli:raw="The URI of the input document.">入力ドキュメントの URI。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transform. This value can be &lt;see langword=&quot;null&quot; /&gt;.">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="results" vsli:raw="The stream to which you want to output.">出力先のストリーム。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; or &lt;paramref name=&quot;results&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="inputUri" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="There was an error executing the XSLT transform.">XSLT 変換の実行中にエラーが発生しました。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; value includes a filename or directory cannot be found.">
        <paramref name="inputUri" /> の値に、存在しないファイル名またはディレクトリが含まれています。</exception>
      <exception cref="T:System.Net.WebException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; value cannot be resolved.  &#xA;  &#xA; -or-  &#xA;  &#xA; An error occurred while processing the request.">
        <paramref name="inputUri" /> 値を解決できません。  

または - 
要求の処理中にエラーが発生しました。</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="&lt;paramref name=&quot;inputUri&quot; /&gt; is not a valid URI.">
        <paramref name="inputUri" /> は有効な URI ではありません。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="There was a parsing error loading the input document.">入力ドキュメントの読み込み中に解析エラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary vsli:raw="Executes the transform using the input document specified by the URI and outputs the results to a &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;.">URI で指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.IO.TextWriter" /> に出力します。</summary>
      <param name="inputUri" vsli:raw="The URI of the input document.">入力ドキュメントの URI。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transform. This value can be &lt;see langword=&quot;null&quot; /&gt;.">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="results" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which you want to output.">出力先の <see cref="T:System.IO.TextWriter" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; or &lt;paramref name=&quot;results&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="inputUri" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="There was an error executing the XSLT transform.">XSLT 変換の実行中にエラーが発生しました。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; value includes a filename or directory cannot be found.">
        <paramref name="inputUri" /> の値に、存在しないファイル名またはディレクトリが含まれています。</exception>
      <exception cref="T:System.Net.WebException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; value cannot be resolved.  &#xA;  &#xA; -or-  &#xA;  &#xA; An error occurred while processing the request.">
        <paramref name="inputUri" /> 値を解決できません。  

または - 
要求の処理中にエラーが発生しました。</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="&lt;paramref name=&quot;inputUri&quot; /&gt; is not a valid URI.">
        <paramref name="inputUri" /> は有効な URI ではありません。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="There was a parsing error loading the input document.">入力ドキュメントの読み込み中に解析エラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary vsli:raw="Executes the transform using the input document specified by the URI and outputs the results to an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;. The &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; provides additional run-time arguments.">URI で指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には、追加の実行時引数を指定します。</summary>
      <param name="inputUri" vsli:raw="The URI of the input document.">入力ドキュメントの URI。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transform. This value can be &lt;see langword=&quot;null&quot; /&gt;.">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="results" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to which you want to output.  &#xA;  &#xA; If the style sheet contains an &lt;c&gt;xsl:output&lt;/c&gt; element, you should create the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; using the &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object returned from the &lt;see cref=&quot;P:System.Xml.Xsl.XslCompiledTransform.OutputSettings&quot; /&gt; property. This ensures that the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; has the correct output settings.">出力先の <see cref="T:System.Xml.XmlWriter" />。  
スタイル シートに <c>xsl:output</c> 要素が含まれている場合は、<see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> プロパティから返される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して <see cref="T:System.Xml.XmlWriter" /> を作成する必要があります。 これにより、<see cref="T:System.Xml.XmlWriter" /> に正しい出力設定が設定されます。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; or &lt;paramref name=&quot;results&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="inputUri" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="There was an error executing the XSLT transform.">XSLT 変換の実行中にエラーが発生しました。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException" vsli:raw="The &lt;paramref name=&quot;inputtUri&quot; /&gt; value includes a filename or directory cannot be found.">
        <paramref name="inputtUri" /> の値に、存在しないファイル名またはディレクトリが含まれています。</exception>
      <exception cref="T:System.Net.WebException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; value cannot be resolved.  &#xA;  &#xA; -or-  &#xA;  &#xA; An error occurred while processing the request.">
        <paramref name="inputUri" /> 値を解決できません。  
または 
この要求の処理中にエラーが発生しました。</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="&lt;paramref name=&quot;inputUri&quot; /&gt; is not a valid URI.">
        <paramref name="inputUri" /> は有効な URI ではありません。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="There was a parsing error loading the input document.">入力ドキュメントの読み込み中に解析エラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.XmlWriter)">
      <summary vsli:raw="Executes the transform using the input document specified by the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object and outputs the results to an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; containing the input document.">入力ドキュメントが格納されている <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="results" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to which you want to output.  &#xA;  &#xA; If the style sheet contains an &lt;c&gt;xsl:output&lt;/c&gt; element, you should create the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; using the &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object returned from the &lt;see cref=&quot;P:System.Xml.Xsl.XslCompiledTransform.OutputSettings&quot; /&gt; property. This ensures that the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; has the correct output settings.">出力先の <see cref="T:System.Xml.XmlWriter" />。  
スタイル シートに <c>xsl:output</c> 要素が含まれている場合は、<see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> プロパティから返される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して <see cref="T:System.Xml.XmlWriter" /> を作成する必要があります。 これにより、<see cref="T:System.Xml.XmlWriter" /> に正しい出力設定が設定されます。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; or &lt;paramref name=&quot;results&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="There was an error executing the XSLT transform.">XSLT 変換の実行中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary vsli:raw="Executes the transform using the input document specified by the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object and outputs the results to a stream. The &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; provides additional run-time arguments.">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果をストリームに出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には、追加の実行時引数を指定します。</summary>
      <param name="input" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; containing the input document.">入力ドキュメントが格納されている <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transform. This value can be &lt;see langword=&quot;null&quot; /&gt;.">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="results" vsli:raw="The stream to which you want to output.">出力先のストリーム。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; or &lt;paramref name=&quot;results&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="There was an error executing the XSLT transform.">XSLT 変換の実行中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary vsli:raw="Executes the transform using the input document specified by the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object and outputs the results to a &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;. The &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; provides additional run-time arguments.">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.IO.TextWriter" /> に出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には、追加の実行時引数を指定します。</summary>
      <param name="input" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; containing the input document.">入力ドキュメントが格納されている <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transform. This value can be &lt;see langword=&quot;null&quot; /&gt;.">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="results" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which you want to output.">出力先の <see cref="T:System.IO.TextWriter" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; or &lt;paramref name=&quot;results&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="There was an error executing the XSLT transform.">XSLT 変換の実行中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary vsli:raw="Executes the transform using the input document specified by the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object and outputs the results to an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;. The &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; provides additional run-time arguments.">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には、追加の実行時引数を指定します。</summary>
      <param name="input" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; containing the input document.">入力ドキュメントが格納されている <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transform. This value can be &lt;see langword=&quot;null&quot; /&gt;.">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="results" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to which you want to output.  &#xA;  &#xA; If the style sheet contains an &lt;c&gt;xsl:output&lt;/c&gt; element, you should create the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; using the &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object returned from the &lt;see cref=&quot;P:System.Xml.Xsl.XslCompiledTransform.OutputSettings&quot; /&gt; property. This ensures that the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; has the correct output settings.">出力先の <see cref="T:System.Xml.XmlWriter" />。  
スタイル シートに <c>xsl:output</c> 要素が含まれている場合は、<see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> プロパティから返される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して <see cref="T:System.Xml.XmlWriter" /> を作成する必要があります。 これにより、<see cref="T:System.Xml.XmlWriter" /> に正しい出力設定が設定されます。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; or &lt;paramref name=&quot;results&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="There was an error executing the XSLT transform.">XSLT 変換の実行中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary vsli:raw="Executes the transform using the input document specified by the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object and outputs the results to an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;. The &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; provides additional run-time arguments and the XmlResolver resolves the XSLT &lt;c&gt;document()&lt;/c&gt; function.">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には追加の実行時引数を指定し、XmlResolver で XSLT の <c>document()</c> 関数を解決します。</summary>
      <param name="input" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; containing the input document.">入力ドキュメントが格納されている <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transform. This value can be &lt;see langword=&quot;null&quot; /&gt;.">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="results" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to which you want to output.  &#xA;  &#xA; If the style sheet contains an &lt;c&gt;xsl:output&lt;/c&gt; element, you should create the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; using the &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object returned from the &lt;see cref=&quot;P:System.Xml.Xsl.XslCompiledTransform.OutputSettings&quot; /&gt; property. This ensures that the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; has the correct output settings.">出力先の <see cref="T:System.Xml.XmlWriter" />。  
スタイル シートに <c>xsl:output</c> 要素が含まれている場合は、<see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> プロパティから返される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して <see cref="T:System.Xml.XmlWriter" /> を作成する必要があります。 これにより、<see cref="T:System.Xml.XmlWriter" /> に正しい出力設定が設定されます。</param>
      <param name="documentResolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve the XSLT &lt;c&gt;document()&lt;/c&gt; function. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;c&gt;document()&lt;/c&gt; function is not resolved.">XSLT の <c>document()</c> 関数を解決するために使用する <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; or &lt;paramref name=&quot;results&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="There was an error executing the XSLT transform.">XSLT 変換の実行中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)">
      <summary vsli:raw="Executes the transform using the input document specified by the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; object and outputs the results to an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。</summary>
      <param name="input" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the Microsoft .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the data to be transformed.">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクト。 Microsoft .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <param name="results" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to which you want to output.  &#xA;  &#xA; If the style sheet contains an &lt;c&gt;xsl:output&lt;/c&gt; element, you should create the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; using the &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object returned from the &lt;see cref=&quot;P:System.Xml.Xsl.XslCompiledTransform.OutputSettings&quot; /&gt; property. This ensures that the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; has the correct output settings.">出力先の <see cref="T:System.Xml.XmlWriter" />。  
スタイル シートに <c>xsl:output</c> 要素が含まれている場合は、<see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> プロパティから返される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して <see cref="T:System.Xml.XmlWriter" /> を作成する必要があります。 これにより、<see cref="T:System.Xml.XmlWriter" /> に正しい出力設定が設定されます。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; or &lt;paramref name=&quot;results&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="There was an error executing the XSLT transform.">XSLT 変換の実行中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary vsli:raw="Executes the transform using the input document specified by the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; object and outputs the results to a stream. The &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; provides additional runtime arguments.">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果をストリームに出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には、追加の実行時引数を指定します。</summary>
      <param name="input" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the Microsoft .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the data to be transformed.">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクト。 Microsoft .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transform. This value can be &lt;see langword=&quot;null&quot; /&gt;.">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="results" vsli:raw="The stream to which you want to output.">出力先のストリーム。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; or &lt;paramref name=&quot;results&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="There was an error executing the XSLT transform.">XSLT 変換の実行中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary vsli:raw="Executes the transform using the input document specified by the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; object and outputs the results to an &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;. The &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; provides additional run-time arguments.">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.IO.TextWriter" /> に出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には、追加の実行時引数を指定します。</summary>
      <param name="input" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the Microsoft .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the data to be transformed.">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクト。 Microsoft .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transform. This value can be &lt;see langword=&quot;null&quot; /&gt;.">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="results" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which you want to output.">出力先の <see cref="T:System.IO.TextWriter" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; or &lt;paramref name=&quot;results&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="There was an error executing the XSLT transform.">XSLT 変換の実行中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary vsli:raw="Executes the transform using the input document specified by the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; object and outputs the results to an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;. The &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; provides additional run-time arguments.">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には、追加の実行時引数を指定します。</summary>
      <param name="input" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the Microsoft .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the data to be transformed.">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクト。 Microsoft .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transform. This value can be &lt;see langword=&quot;null&quot; /&gt;.">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="results" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to which you want to output.  &#xA;  &#xA; If the style sheet contains an &lt;c&gt;xsl:output&lt;/c&gt; element, you should create the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; using the &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object returned from the &lt;see cref=&quot;P:System.Xml.Xsl.XslCompiledTransform.OutputSettings&quot; /&gt; property. This ensures that the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; has the correct output settings.">出力先の <see cref="T:System.Xml.XmlWriter" />。  
スタイル シートに <c>xsl:output</c> 要素が含まれている場合は、<see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> プロパティから返される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して <see cref="T:System.Xml.XmlWriter" /> を作成する必要があります。 これにより、<see cref="T:System.Xml.XmlWriter" /> に正しい出力設定が設定されます。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; or &lt;paramref name=&quot;results&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="There was an error executing the XSLT transform.">XSLT 変換の実行中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary vsli:raw="Executes the transform by using the input document that is specified by the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; object and outputs the results to an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;. The &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; provides additional run-time arguments and the &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; resolves the XSLT &lt;see langword=&quot;document()&quot; /&gt; function.">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には追加の実行時引数を指定し、<see cref="T:System.Xml.XmlResolver" /> で XSLT の <see langword="document()" /> 関数を解決します。</summary>
      <param name="input" vsli:raw="The document to transform that is specified by the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; object.">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> オブジェクトで指定された変換対象のドキュメント。</param>
      <param name="arguments" vsli:raw="Argument list as &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt;.">引数リスト (<see cref="T:System.Xml.Xsl.XsltArgumentList" />)。</param>
      <param name="results" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to which you want to output.  &#xA;  &#xA; If the style sheet contains an &lt;see langword=&quot;xsl:output&quot; /&gt; element, you should create the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; by using the &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object that is returned from the &lt;see cref=&quot;P:System.Xml.Xsl.XslCompiledTransform.OutputSettings&quot; /&gt; property. This ensures that the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; has the correct output settings.">出力先の <see cref="T:System.Xml.XmlWriter" />。  
スタイル シートに <see langword="xsl:output" /> 要素が含まれている場合は、<see cref="T:System.Xml.XmlWriter" /> プロパティから返される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> を作成する必要があります。 これにより、<see cref="T:System.Xml.XmlWriter" /> に正しい出力設定が設定されます。</param>
      <param name="documentResolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve the XSLT &lt;see langword=&quot;document()&quot; /&gt; function. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;see langword=&quot;document()&quot; /&gt; function is not resolved.">XSLT の <see langword="document()" /> 関数を解決するために使用する <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合、<see langword="document()" /> 関数は解決されません。</param>
    </member>
    <member name="T:System.Xml.Xsl.XsltArgumentList">
      <summary vsli:raw="Contains a variable number of arguments which are either XSLT parameters or extension objects.">XSLT パラメーターまたは拡張オブジェクトで、可変な数の引数を格納します。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.#ctor">
      <summary vsli:raw="Implements a new instance of the &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt;.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> の新しいインスタンスを実装します。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.AddExtensionObject(System.String,System.Object)">
      <summary vsli:raw="Adds a new object to the &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; and associates it with the namespace URI.">新しいオブジェクトを <see cref="T:System.Xml.Xsl.XsltArgumentList" /> に追加し、それを名前空間 URI に関連付けます。</summary>
      <param name="namespaceUri" vsli:raw="The namespace URI to associate with the object. To use the default namespace, specify an empty string.">オブジェクトに関連付ける名前空間 URI。 既定の名前空間を使用するには、空の文字列を指定します。</param>
      <param name="extension" vsli:raw="The object to add to the list.">リストに追加するオブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;namespaceUri&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or http://www.w3.org/1999/XSL/Transform  &#xA;  &#xA; The &lt;paramref name=&quot;namespaceUri&quot; /&gt; already has an extension object associated with it.">
        <paramref name="namespaceUri" /> が <see langword="null" /> または http://www.w3.org/1999/XSL/Transform のいずれかです 
<paramref name="namespaceUri" /> には、既に拡張オブジェクトが関連付けられています。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have sufficient permissions to call this method.">呼び出し元に、このメソッドを呼び出すための十分なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.AddParam(System.String,System.String,System.Object)">
      <summary vsli:raw="Adds a parameter to the &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; and associates it with the namespace qualified name.">パラメーターを <see cref="T:System.Xml.Xsl.XsltArgumentList" /> に追加し、それを名前空間限定名に関連付けます。</summary>
      <param name="name" vsli:raw="The name to associate with the parameter.">パラメーターに関連付ける名前。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI to associate with the parameter. To use the default namespace, specify an empty string.">パラメーターに関連付ける名前空間 URI。 既定の名前空間を使用するには、空の文字列を指定します。</param>
      <param name="parameter" vsli:raw="The parameter value or object to add to the list.">リストに追加するパラメーター値またはオブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;namespaceUri&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or http://www.w3.org/1999/XSL/Transform.  &#xA;  &#xA; The &lt;paramref name=&quot;name&quot; /&gt; is not a valid name according to the W3C XML specification.  &#xA;  &#xA; The &lt;paramref name=&quot;namespaceUri&quot; /&gt; already has a parameter associated with it.">
        <paramref name="namespaceUri" /> が <see langword="null" /> または http://www.w3.org/1999/XSL/Transform です。  
<paramref name="name" /> が、W3C XML 仕様に準拠した有効な名前ではありません。  
<paramref name="namespaceUri" /> には、既にパラメーターが関連付けられています。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.Clear">
      <summary vsli:raw="Removes all parameters and extension objects from the &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt;.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> からすべてのパラメーターと拡張オブジェクトを削除します。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.GetExtensionObject(System.String)">
      <summary vsli:raw="Gets the object associated with the given namespace.">指定した名前空間に関連付けられているオブジェクトを取得します。</summary>
      <param name="namespaceUri" vsli:raw="The namespace URI of the object.">オブジェクトの名前空間 URI。</param>
      <returns vsli:raw="The namespace URI object or &lt;see langword=&quot;null&quot; /&gt; if one was not found.">名前空間 URI オブジェクト。見つからなかった場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.GetParam(System.String,System.String)">
      <summary vsli:raw="Gets the parameter associated with the namespace qualified name.">名前空間限定名に関連付けられているパラメーターを取得します。</summary>
      <param name="name" vsli:raw="The name of the parameter. &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; does not check to ensure the name passed is a valid local name; however, the name cannot be &lt;see langword=&quot;null&quot; /&gt;.">パラメーターの名前。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> は、渡された名前が有効なローカル名であるかどうかを確認しません。ただし、名前を <see langword="null" /> にすることはできません。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI associated with the parameter.">パラメーターに関連付けられた名前空間 URI。</param>
      <returns vsli:raw="The parameter object or &lt;see langword=&quot;null&quot; /&gt; if one was not found.">パラメーター オブジェクト。見つからなかった場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.RemoveExtensionObject(System.String)">
      <summary vsli:raw="Removes the object with the namespace URI from the &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt;.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> から名前空間 URI を持つオブジェクトを削除します。</summary>
      <param name="namespaceUri" vsli:raw="The namespace URI associated with the object to remove.">削除するオブジェクトに関連付けられている名前空間 URI。</param>
      <returns vsli:raw="The object with the namespace URI or &lt;see langword=&quot;null&quot; /&gt; if one was not found.">名前空間 URI を含むオブジェクト。見つからなかった場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.RemoveParam(System.String,System.String)">
      <summary vsli:raw="Removes the parameter from the &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt;.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> からパラメーターを削除します。</summary>
      <param name="name" vsli:raw="The name of the parameter to remove. &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; does not check to ensure the name passed is a valid local name; however, the name cannot be &lt;see langword=&quot;null&quot; /&gt;.">削除するパラメーターの名前。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> は、渡された名前が有効なローカル名であるかどうかを確認しません。ただし、名前を <see langword="null" /> にすることはできません。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the parameter to remove.">削除するパラメーターの名前空間 URI。</param>
      <returns vsli:raw="The parameter object or &lt;see langword=&quot;null&quot; /&gt; if one was not found.">パラメーター オブジェクト。見つからなかった場合は <see langword="null" />。</returns>
    </member>
    <member name="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered">
      <summary vsli:raw="Occurs when a message is specified in the style sheet by the &lt;c&gt;xsl:message&lt;/c&gt; element.">スタイル シートに <c>xsl:message</c> 要素でメッセージが指定されている場合に発生します。</summary>
    </member>
    <member name="T:System.Xml.Xsl.XsltCompileException">
      <summary vsli:raw="The exception that is thrown by the Load method when an error is found in the XSLT style sheet.">XSLT スタイル シートでエラーが見つかったときに、Load メソッドによってスローされる例外。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Xsl.XsltCompileException&quot; /&gt; class.">
        <see cref="T:System.Xml.Xsl.XsltCompileException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.Exception,System.String,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XsltCompileException&quot; /&gt; class.">
        <see langword="XsltCompileException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="inner" vsli:raw="The &lt;see cref=&quot;T:System.Exception&quot; /&gt; that threw the &lt;see langword=&quot;XsltCompileException&quot; /&gt;.">
        <see langword="XsltCompileException" /> をスローした <see cref="T:System.Exception" />。</param>
      <param name="sourceUri" vsli:raw="The location path of the style sheet.">スタイル シートの位置パス。</param>
      <param name="lineNumber" vsli:raw="The line number indicating where the error occurred in the style sheet.">スタイル シートで発生したエラーの位置を示す行番号。</param>
      <param name="linePosition" vsli:raw="The line position indicating where the error occurred in the style sheet.">スタイル シートで発生したエラーの位置を示す行番号。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XsltCompileException&quot; /&gt; class using the information in the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; and &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; objects.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトおよび <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクトの情報を使用して、<see langword="XsltCompileException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info" vsli:raw="The &lt;see langword=&quot;SerializationInfo&quot; /&gt; object containing all the properties of an &lt;see langword=&quot;XsltCompileException&quot; /&gt;.">
        <see langword="SerializationInfo" /> のすべてのプロパティを格納している <see langword="XsltCompileException" /> オブジェクト。</param>
      <param name="context" vsli:raw="The &lt;see langword=&quot;StreamingContext&quot; /&gt; object containing the context information.">コンテキスト情報を格納している <see langword="StreamingContext" /> オブジェクト。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Xsl.XsltCompileException&quot; /&gt; class with a specified error message.">指定したエラー メッセージを使用して、<see cref="T:System.Xml.Xsl.XsltCompileException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="The message that describes the error.">エラーを説明するメッセージ。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Xsl.XsltCompileException&quot; /&gt; class specified error message and a reference to the inner exception that is the cause of this exception.">指定されたエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.Xml.Xsl.XsltCompileException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="The message that describes the error.">エラーを説明するメッセージ。</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception, or &lt;see langword=&quot;null&quot; /&gt; if no inner exception is specified.">現在の例外の原因である例外。または、内部例外を指定しない場合は <see langword="null" />。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Streams all the &lt;see langword=&quot;XsltCompileException&quot; /&gt; properties into the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; class for the given &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt;.">すべての <see langword="XsltCompileException" /> プロパティを、指定した <see cref="T:System.Runtime.Serialization.SerializationInfo" /> の <see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスにストリーム転送します。</summary>
      <param name="info" vsli:raw="The &lt;see langword=&quot;SerializationInfo&quot; /&gt; object.">
        <see langword="SerializationInfo" /> オブジェクト。</param>
      <param name="context" vsli:raw="The &lt;see langword=&quot;StreamingContext&quot; /&gt; object.">
        <see langword="StreamingContext" /> オブジェクト。</param>
    </member>
    <member name="T:System.Xml.Xsl.XsltContext">
      <summary vsli:raw="Encapsulates the current execution context of the Extensible Stylesheet Language for Transformations (XSLT) processor allowing XML Path Language (XPath) to resolve functions, parameters, and namespaces within XPath expressions.">XSLT (Extensible Stylesheet Language Transformations) プロセッサの現在の実行コンテキストをカプセル化して、XPath (XML Path Language) が、XPath 式内の関数、パラメーター、および名前空間を解決できるようにします。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Xsl.XsltContext&quot; /&gt; class.">
        <see cref="T:System.Xml.Xsl.XsltContext" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.#ctor(System.Xml.NameTable)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Xsl.XsltContext&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Xml.NameTable&quot; /&gt;.">
        <see cref="T:System.Xml.Xsl.XsltContext" /> を指定して、<see cref="T:System.Xml.NameTable" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="table" vsli:raw="The &lt;see cref=&quot;T:System.Xml.NameTable&quot; /&gt; to use.">使用する <see cref="T:System.Xml.NameTable" />。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.CompareDocument(System.String,System.String)">
      <summary vsli:raw="When overridden in a derived class, compares the base Uniform Resource Identifiers (URIs) of two documents based upon the order the documents were loaded by the XSLT processor (that is, the &lt;see cref=&quot;T:System.Xml.Xsl.XslTransform&quot; /&gt; class).">派生クラスでオーバーライドされた場合、2 つのドキュメントのベース URI (Uniform Resource Identifier) が XSLT プロセッサ (<see cref="T:System.Xml.Xsl.XslTransform" /> クラス) によって読み込まれた順序に基づいて、それらのドキュメントのベース URI を比較します。</summary>
      <param name="baseUri" vsli:raw="The base URI of the first document to compare.">比較対象の最初のドキュメントのベース URI。</param>
      <param name="nextbaseUri" vsli:raw="The base URI of the second document to compare.">比較対象の 2 番目のドキュメントのベース URI。</param>
      <returns vsli:raw="An integer value describing the relative order of the two base URIs: -1 if &lt;paramref name=&quot;baseUri&quot; /&gt; occurs before &lt;paramref name=&quot;nextbaseUri&quot; /&gt;; 0 if the two base URIs are identical; and 1 if &lt;paramref name=&quot;baseUri&quot; /&gt; occurs after &lt;paramref name=&quot;nextbaseUri&quot; /&gt;.">2 つのベース URI の相対的な順序を記述する整数値。<paramref name="baseUri" /> が <paramref name="nextbaseUri" /> の前になる場合は -1。2 つのベース URI が同じ場合は 0。<paramref name="baseUri" /> が <paramref name="nextbaseUri" /> の後になる場合は 1。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="When overridden in a derived class, evaluates whether to preserve white space nodes or strip them for the given context.">派生クラスでオーバーライドされた場合、空白ノードを維持するか、特定のコンテキストでは空白ノードを除去するかを評価します。</summary>
      <param name="node" vsli:raw="The white space node that is to be preserved or stripped in the current context.">現在のコンテキストで維持または除去される空白ノード。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the white space is to be preserved; &lt;see langword=&quot;false&quot; /&gt; if the white space is to be stripped.">空白が維持される場合は <see langword="true" />。空白が除去される場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.ResolveFunction(System.String,System.String,System.Xml.XPath.XPathResultType[])">
      <summary vsli:raw="When overridden in a derived class, resolves a function reference and returns an &lt;see cref=&quot;T:System.Xml.Xsl.IXsltContextFunction&quot; /&gt; representing the function. The &lt;see cref=&quot;T:System.Xml.Xsl.IXsltContextFunction&quot; /&gt; is used at execution time to get the return value of the function.">派生クラスでオーバーライドされた場合、関数参照を解決し、その関数を表す <see cref="T:System.Xml.Xsl.IXsltContextFunction" /> を返します。 実行時に <see cref="T:System.Xml.Xsl.IXsltContextFunction" /> を使用して、関数の戻り値を取得します。</summary>
      <param name="prefix" vsli:raw="The prefix of the function as it appears in the XPath expression.">XPath 式内に示されている、関数のプリフィックス。</param>
      <param name="name" vsli:raw="The name of the function.">関数の名前。</param>
      <param name="ArgTypes" vsli:raw="An array of argument types for the function being resolved. This allows you to select between methods with the same name (for example, overloaded methods).">解決対象の関数の引数型の配列。 この配列を使用すると、同じ名前の複数のメソッド (オーバーロードされたメソッドなど) の中から 1 つ選択できるようになります。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.IXsltContextFunction&quot; /&gt; representing the function.">関数を表す <see cref="T:System.Xml.Xsl.IXsltContextFunction" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.ResolveVariable(System.String,System.String)">
      <summary vsli:raw="When overridden in a derived class, resolves a variable reference and returns an &lt;see cref=&quot;T:System.Xml.Xsl.IXsltContextVariable&quot; /&gt; representing the variable.">派生クラスでオーバーライドされた場合、変数参照を解決し、その変数を表す <see cref="T:System.Xml.Xsl.IXsltContextVariable" /> を返します。</summary>
      <param name="prefix" vsli:raw="The prefix of the variable as it appears in the XPath expression.">XPath 式内に示されている、変数のプリフィックス。</param>
      <param name="name" vsli:raw="The name of the variable.">変数の名前。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.IXsltContextVariable&quot; /&gt; representing the variable at runtime.">実行時の変数を表す <see cref="T:System.Xml.Xsl.IXsltContextVariable" />。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltContext.Whitespace">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether to include white space nodes in the output.">派生クラスでオーバーライドされた場合、出力に空白ノードが含まれるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to check white space nodes in the source document for inclusion in the output; &lt;see langword=&quot;false&quot; /&gt; to not evaluate white space nodes. The default is &lt;see langword=&quot;true&quot; /&gt;.">ソース ドキュメントの空白ノードをチェックして出力に含める場合は <see langword="true" />。空白ノードをチェックしない場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltException">
      <summary vsli:raw="The exception that is thrown when an error occurs while processing an XSLT transformation.">XSLT 変換の処理中にエラーが発生したときにスローされる例外。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; class.">
        <see cref="T:System.Xml.Xsl.XsltException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XsltException&quot; /&gt; class using the information in the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; and &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; objects.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトおよび <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクトの情報を使用して、<see langword="XsltException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info" vsli:raw="The &lt;see langword=&quot;SerializationInfo&quot; /&gt; object containing all the properties of an &lt;see langword=&quot;XsltException&quot; /&gt;.">
        <see langword="SerializationInfo" /> のすべてのプロパティを格納している <see langword="XsltException" /> オブジェクト。</param>
      <param name="context" vsli:raw="The &lt;see langword=&quot;StreamingContext&quot; /&gt; object.">
        <see langword="StreamingContext" /> オブジェクト。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; class with a specified error message.">指定したエラー メッセージを使用して、<see cref="T:System.Xml.Xsl.XsltException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="The message that describes the error.">エラーを説明するメッセージ。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XsltException&quot; /&gt; class.">
        <see langword="XsltException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="The description of the error condition.">エラー状態の説明。</param>
      <param name="innerException" vsli:raw="The &lt;see cref=&quot;T:System.Exception&quot; /&gt; which threw the &lt;see langword=&quot;XsltException&quot; /&gt;, if any. This value can be &lt;see langword=&quot;null&quot; /&gt;.">
        <see langword="XsltException" /> をスローした <see cref="T:System.Exception" /> (存在する場合)。 この値は、<see langword="null" /> の場合もあります。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Streams all the &lt;see langword=&quot;XsltException&quot; /&gt; properties into the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; class for the given &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt;.">すべての <see langword="XsltException" /> プロパティを、指定した <see cref="T:System.Runtime.Serialization.SerializationInfo" /> の <see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスにストリーム転送します。</summary>
      <param name="info" vsli:raw="The &lt;see langword=&quot;SerializationInfo&quot; /&gt; object.">
        <see langword="SerializationInfo" /> オブジェクト。</param>
      <param name="context" vsli:raw="The &lt;see langword=&quot;StreamingContext&quot; /&gt; object.">
        <see langword="StreamingContext" /> オブジェクト。</param>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.LineNumber">
      <summary vsli:raw="Gets the line number indicating where the error occurred in the style sheet.">スタイル シートで発生したエラーの位置を示す行番号を取得します。</summary>
      <returns vsli:raw="The line number indicating where the error occurred in the style sheet.">スタイル シートで発生したエラーの位置を示す行番号。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.LinePosition">
      <summary vsli:raw="Gets the line position indicating where the error occurred in the style sheet.">スタイル シートで発生したエラーの位置を示す行番号を取得します。</summary>
      <returns vsli:raw="The line position indicating where the error occurred in the style sheet.">スタイル シートで発生したエラーの位置を示す行番号。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.Message">
      <summary vsli:raw="Gets the formatted error message describing the current exception.">現在の例外を記述する書式設定されたエラー メッセージを取得します。</summary>
      <returns vsli:raw="The formatted error message describing the current exception.">現在の例外を記述する書式設定されたエラー メッセージ。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.SourceUri">
      <summary vsli:raw="Gets the location path of the style sheet.">スタイル シートの位置パスを取得します。</summary>
      <returns vsli:raw="The location path of the style sheet.">スタイル シートの位置パス。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered&quot; /&gt; event.">
        <see cref="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltMessageEncounteredEventArgs.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Xsl.XsltMessageEncounteredEventArgs&quot; /&gt; class.">
        <see cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Xsl.XsltMessageEncounteredEventArgs.Message">
      <summary vsli:raw="Gets the contents of the &lt;c&gt;xsl:message&lt;/c&gt; element.">
        <c>xsl:message</c> 要素の内容を取得します。</summary>
      <returns vsli:raw="The contents of the &lt;c&gt;xsl:message&lt;/c&gt; element.">
        <c>Xsl: message</c>要素の内容。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltMessageEncounteredEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered&quot; /&gt; event.">
        <see cref="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender" vsli:raw="The source of the event.">イベントのソース。</param>
      <param name="e" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Xsl.XsltMessageEncounteredEventArgs&quot; /&gt; containing the event data.">イベント データが格納されている <see cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs" />。</param>
    </member>
    <member name="T:System.Xml.Xsl.XslTransform">
      <summary vsli:raw="Transforms XML data using an Extensible Stylesheet Language for Transformations (XSLT) style sheet.">XSLT (Extensible Stylesheet Language Transformations) スタイル シートを使用して XML データを変換します。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Xsl.XslTransform&quot; /&gt; class.">
        <see cref="T:System.Xml.Xsl.XslTransform" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.String)">
      <summary vsli:raw="Loads the XSLT style sheet specified by a URL.">URL で指定された XSLT スタイル シートを読み込みます。</summary>
      <param name="url" vsli:raw="The URL that specifies the XSLT style sheet to load.">読み込む XSLT スタイル シートを指定する URL。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException" vsli:raw="The loaded resource is not a valid style sheet.">読み込まれたリソースが、有効なスタイル シートではありません。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The style sheet contains embedded script, and the caller does not have &lt;see langword=&quot;UnmanagedCode&quot; /&gt; permission.">スタイル シートに埋め込みスクリプトが含まれており、読み出し元に <see langword="UnmanagedCode" /> アクセス許可がありません。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)">
      <summary vsli:raw="Loads the XSLT style sheet specified by a URL.">URL で指定された XSLT スタイル シートを読み込みます。</summary>
      <param name="url" vsli:raw="The URL that specifies the XSLT style sheet to load.">読み込む XSLT スタイル シートを指定する URL。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; to use to load the style sheet and any style sheet(s) referenced in &lt;c&gt;xsl:import&lt;/c&gt; and &lt;c&gt;xsl:include&lt;/c&gt; elements.  &#xA;  &#xA; If this is &lt;see langword=&quot;null&quot; /&gt;, a default &lt;see cref=&quot;T:System.Xml.XmlUrlResolver&quot; /&gt; with no user credentials is used to open the style sheet. The default &lt;see cref=&quot;T:System.Xml.XmlUrlResolver&quot; /&gt; is not used to resolve any external resources in the style sheet, so &lt;c&gt;xsl:import&lt;/c&gt; and &lt;c&gt;xsl:include&lt;/c&gt; elements are not resolved.  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is not cached after the &lt;see cref=&quot;M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)&quot; /&gt; method completes.">スタイル シート、および <c>xsl:import</c> 要素と <c>xsl:include</c> 要素で参照される任意のスタイル シートの読み込みに使用する <see cref="T:System.Xml.XmlResolver" />。  
これが <see langword="null" /> の場合は、ユーザー資格情報を持たない既定の <see cref="T:System.Xml.XmlUrlResolver" /> がスタイル シートを開くときに使用されます。 既定の <see cref="T:System.Xml.XmlUrlResolver" /> は、スタイル シート内の外部リソースの解決には使用されないため、<c>xsl:import</c> 要素と <c>xsl:include</c> 要素は解決されません。  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)" /> がキャッシュされていません。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException" vsli:raw="The loaded resource is not a valid style sheet.">読み込まれたリソースが、有効なスタイル シートではありません。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The style sheet contains embedded script, and the caller does not have &lt;see langword=&quot;UnmanagedCode&quot; /&gt; permission.">スタイル シートに埋め込みスクリプトが含まれており、読み出し元に <see langword="UnmanagedCode" /> アクセス許可がありません。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader)">
      <summary vsli:raw="Loads the XSLT style sheet contained in the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlReader" /> に格納されている XSLT スタイル シートを読み込みます。</summary>
      <param name="stylesheet" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object that contains the XSLT style sheet.">XSLT スタイル シートを格納している <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException" vsli:raw="The current node does not conform to a valid style sheet.">現在のノードは、有効なスタイル シートに準拠していません。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The style sheet contains embedded scripts, and the caller does not have &lt;see langword=&quot;UnmanagedCode&quot; /&gt; permission.">スタイル シートに埋め込みスクリプトが含まれており、読み出し元に <see langword="UnmanagedCode" /> アクセス許可がありません。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)">
      <summary vsli:raw="Loads the XSLT style sheet contained in the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">
        <see cref="T:System.Xml.XmlReader" /> に格納されている XSLT スタイル シートを読み込みます。</summary>
      <param name="stylesheet" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object that contains the XSLT style sheet.">XSLT スタイル シートを格納している <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to load any style sheets referenced in &lt;c&gt;xsl:import&lt;/c&gt; and &lt;c&gt;xsl:include&lt;/c&gt; elements. If this is &lt;see langword=&quot;null&quot; /&gt;, external resources are not resolved.  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is not cached after the &lt;see cref=&quot;M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)&quot; /&gt; method completes.">
        <c>xsl:import</c> 要素および <c>xsl:include</c> 要素で参照される任意のスタイル シートを読み込むために使用される <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合は、外部リソースが解決されません。  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)" /> がキャッシュされていません。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException" vsli:raw="The current node does not conform to a valid style sheet.">現在のノードは、有効なスタイル シートに準拠していません。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The style sheet contains embedded scripts, and the caller does not have &lt;see langword=&quot;UnmanagedCode&quot; /&gt; permission.">スタイル シートに埋め込みスクリプトが含まれており、読み出し元に <see langword="UnmanagedCode" /> アクセス許可がありません。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable)">
      <summary vsli:raw="Loads the XSLT style sheet contained in the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt;.">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> に格納されている XSLT スタイル シートを読み込みます。</summary>
      <param name="stylesheet" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the XSLT style sheet.">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクト。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または XSLT スタイル シートを含んでいる <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException" vsli:raw="The loaded resource is not a valid style sheet.">読み込まれたリソースが、有効なスタイル シートではありません。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The style sheet contains embedded scripts, and the caller does not have &lt;see langword=&quot;UnmanagedCode&quot; /&gt; permission.">スタイル シートに埋め込みスクリプトが含まれており、読み出し元に <see langword="UnmanagedCode" /> アクセス許可がありません。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver)">
      <summary vsli:raw="Loads the XSLT style sheet contained in the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt;.">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> に格納されている XSLT スタイル シートを読み込みます。</summary>
      <param name="stylesheet" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the XSLT style sheet.">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクト。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または XSLT スタイル シートを含んでいる <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to load any style sheets referenced in &lt;c&gt;xsl:import&lt;/c&gt; and &lt;c&gt;xsl:include&lt;/c&gt; elements. If this is &lt;see langword=&quot;null&quot; /&gt;, external resources are not resolved.  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is not cached after the &lt;see cref=&quot;Overload:System.Xml.Xsl.XslTransform.Load&quot; /&gt; method completes.">
        <c>xsl:import</c> 要素および <c>xsl:include</c> 要素で参照される任意のスタイル シートを読み込むために使用される <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合は、外部リソースが解決されません。  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> がキャッシュされていません。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException" vsli:raw="The loaded resource is not a valid style sheet.">読み込まれたリソースが、有効なスタイル シートではありません。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The style sheet contains embedded scripts, and the caller does not have &lt;see langword=&quot;UnmanagedCode&quot; /&gt; permission.">スタイル シートに埋め込みスクリプトが含まれており、読み出し元に <see langword="UnmanagedCode" /> アクセス許可がありません。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="Loads the XSLT style sheet contained in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> に格納されている XSLT スタイル シートを読み込みます。</summary>
      <param name="stylesheet" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object that contains the XSLT style sheet.">XSLT スタイル シートを格納している <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException" vsli:raw="The current node does not conform to a valid style sheet.">現在のノードは、有効なスタイル シートに準拠していません。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The style sheet contains embedded scripts, and the caller does not have &lt;see langword=&quot;UnmanagedCode&quot; /&gt; permission.">スタイル シートに埋め込みスクリプトが含まれており、読み出し元に <see langword="UnmanagedCode" /> アクセス許可がありません。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver)">
      <summary vsli:raw="Loads the XSLT style sheet contained in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> に格納されている XSLT スタイル シートを読み込みます。</summary>
      <param name="stylesheet" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object that contains the XSLT style sheet.">XSLT スタイル シートを格納している <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to load any style sheets referenced in &lt;c&gt;xsl:import&lt;/c&gt; and &lt;c&gt;xsl:include&lt;/c&gt; elements. If this is &lt;see langword=&quot;null&quot; /&gt;, external resources are not resolved.  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is not cached after the &lt;see cref=&quot;Overload:System.Xml.Xsl.XslTransform.Load&quot; /&gt; method completes.">
        <c>xsl:import</c> 要素および <c>xsl:include</c> 要素で参照される任意のスタイル シートを読み込むために使用される <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合は、外部リソースが解決されません。  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> がキャッシュされていません。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException" vsli:raw="The current node does not conform to a valid style sheet.">現在のノードは、有効なスタイル シートに準拠していません。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The style sheet contains embedded scripts, and the caller does not have &lt;see langword=&quot;UnmanagedCode&quot; /&gt; permission.">スタイル シートに埋め込みスクリプトが含まれており、読み出し元に <see langword="UnmanagedCode" /> アクセス許可がありません。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String)">
      <summary vsli:raw="Transforms the XML data in the input file and outputs the result to an output file.">XML データを入力ファイルに変換し、その結果を出力ファイルに出力します。</summary>
      <param name="inputfile" vsli:raw="The URL of the source document to be transformed.">変換するソース ドキュメントの URL。</param>
      <param name="outputfile" vsli:raw="The URL of the output file.">出力ファイルの URL。</param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String,System.Xml.XmlResolver)">
      <summary vsli:raw="Transforms the XML data in the input file and outputs the result to an output file.">XML データを入力ファイルに変換し、その結果を出力ファイルに出力します。</summary>
      <param name="inputfile" vsli:raw="The URL of the source document to be transformed.">変換するソース ドキュメントの URL。</param>
      <param name="outputfile" vsli:raw="The URL of the output file.">出力ファイルの URL。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve the XSLT &lt;c&gt;document()&lt;/c&gt; function. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;c&gt;document()&lt;/c&gt; function is not resolved.  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is not cached after the &lt;see cref=&quot;Overload:System.Xml.Xsl.XslTransform.Transform&quot; /&gt; method completes.">XSLT の <c>document()</c> 関数を解決するために使用する <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> がキャッシュされていません。</param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; using the specified &lt;paramref name=&quot;args&quot; /&gt; and outputs the result to an &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">指定した <paramref name="args" /> を使用して <see cref="T:System.Xml.XPath.IXPathNavigable" /> の XML データを変換し、その結果を <see cref="T:System.Xml.XmlReader" /> に出力します。</summary>
      <param name="input" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the data to be transformed.">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクト。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; containing the results of the transformation.">変換結果を格納している <see cref="T:System.Xml.XmlReader" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; using the specified &lt;paramref name=&quot;args&quot; /&gt; and outputs the result to a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt;.">指定した <paramref name="args" /> を使用して <see cref="T:System.Xml.XPath.IXPathNavigable" /> の XML データを変換し、その結果を <see cref="T:System.IO.Stream" /> に出力します。</summary>
      <param name="input" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the data to be transformed.">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクト。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <param name="output" vsli:raw="The stream to which you want to output.">出力先のストリーム。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There was an error processing the XSLT transformation.  &#xA;  &#xA; Note: This is a change in behavior from earlier versions. An &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.">XSLT 変換の処理中にエラーが発生しました。  
メモ:これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; using the specified &lt;paramref name=&quot;args&quot; /&gt; and outputs the result to a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt;.">指定した <paramref name="args" /> を使用して <see cref="T:System.Xml.XPath.IXPathNavigable" /> の XML データを変換し、その結果を <see cref="T:System.IO.Stream" /> に出力します。</summary>
      <param name="input" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the data to be transformed.">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクト。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <param name="output" vsli:raw="The stream to which you want to output.">出力先のストリーム。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve the XSLT &lt;c&gt;document()&lt;/c&gt; function. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;c&gt;document()&lt;/c&gt; function is not resolved.  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is not cached after the &lt;see cref=&quot;Overload:System.Xml.Xsl.XslTransform.Transform&quot; /&gt; method completes.">XSLT の <c>document()</c> 関数を解決するために使用する <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> がキャッシュされていません。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There was an error processing the XSLT transformation.  &#xA;  &#xA; Note: This is a change in behavior from earlier versions. An &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.">XSLT 変換の処理中にエラーが発生しました。  
メモ:これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; using the specified &lt;paramref name=&quot;args&quot; /&gt; and outputs the result to a &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;.">指定した <paramref name="args" /> を使用して <see cref="T:System.Xml.XPath.IXPathNavigable" /> の XML データを変換し、その結果を <see cref="T:System.IO.TextWriter" /> に出力します。</summary>
      <param name="input" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the data to be transformed.">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクト。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <param name="output" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which you want to output.">出力先の <see cref="T:System.IO.TextWriter" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There was an error processing the XSLT transformation.  &#xA;  &#xA; Note: This is a change in behavior from earlier versions. An &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.">XSLT 変換の処理中にエラーが発生しました。  
メモ:これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; using the specified &lt;paramref name=&quot;args&quot; /&gt; and outputs the result to a &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;.">指定した <paramref name="args" /> を使用して <see cref="T:System.Xml.XPath.IXPathNavigable" /> の XML データを変換し、その結果を <see cref="T:System.IO.TextWriter" /> に出力します。</summary>
      <param name="input" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the data to be transformed.">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクト。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <param name="output" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which you want to output.">出力先の <see cref="T:System.IO.TextWriter" />。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve the XSLT &lt;c&gt;document()&lt;/c&gt; function. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;c&gt;document()&lt;/c&gt; function is not resolved.  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is not cached after the &lt;see cref=&quot;M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)&quot; /&gt; method completes.">XSLT の <c>document()</c> 関数を解決するために使用する <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" /> がキャッシュされていません。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There was an error processing the XSLT transformation.  &#xA;  &#xA; Note: This is a change in behavior from earlier versions. An &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.">XSLT 変換の処理中にエラーが発生しました。  
メモ:これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; using the specified &lt;paramref name=&quot;args&quot; /&gt; and outputs the result to an &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">指定した <paramref name="args" /> を使用して <see cref="T:System.Xml.XPath.IXPathNavigable" /> の XML データを変換し、その結果を <see cref="T:System.Xml.XmlReader" /> に出力します。</summary>
      <param name="input" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the data to be transformed.">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクト。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve the XSLT &lt;c&gt;document()&lt;/c&gt; function. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;c&gt;document()&lt;/c&gt; function is not resolved.  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is not cached after the &lt;see cref=&quot;M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)&quot; /&gt; method completes.">XSLT の <c>document()</c> 関数を解決するために使用する <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" /> がキャッシュされていません。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; containing the results of the transformation.">変換結果を格納している <see cref="T:System.Xml.XmlReader" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; using the specified &lt;paramref name=&quot;args&quot; /&gt; and outputs the result to an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">指定した <paramref name="args" /> を使用して <see cref="T:System.Xml.XPath.IXPathNavigable" /> の XML データを変換し、その結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。</summary>
      <param name="input" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the data to be transformed.">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクト。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <param name="output" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to which you want to output.">出力先の <see cref="T:System.Xml.XmlWriter" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There was an error processing the XSLT transformation.  &#xA;  &#xA; Note: This is a change in behavior from earlier versions. An &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.">XSLT 変換の処理中にエラーが発生しました。  
メモ:これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; using the specified &lt;paramref name=&quot;args&quot; /&gt; and outputs the result to an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">指定した <paramref name="args" /> を使用して <see cref="T:System.Xml.XPath.IXPathNavigable" /> の XML データを変換し、その結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。</summary>
      <param name="input" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the data to be transformed.">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクト。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <param name="output" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to which you want to output.">出力先の <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve the XSLT &lt;c&gt;document()&lt;/c&gt; function. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;c&gt;document()&lt;/c&gt; function is not resolved.  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is not cached after the &lt;see cref=&quot;M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)&quot; /&gt; method completes.">XSLT の <c>document()</c> 関数を解決するために使用する <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" /> がキャッシュされていません。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There was an error processing the XSLT transformation.  &#xA;  &#xA; Note: This is a change in behavior from earlier versions. An &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.">XSLT 変換の処理中にエラーが発生しました。  
メモ:これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; using the specified &lt;paramref name=&quot;args&quot; /&gt; and outputs the result to an &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">指定した <paramref name="args" /> を使用して <see cref="T:System.Xml.XPath.XPathNavigator" /> の XML データを変換し、その結果を <see cref="T:System.Xml.XmlReader" /> に出力します。</summary>
      <param name="input" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; containing the data to be transformed.">変換されるデータを含む <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; containing the results of the transformation.">変換結果を格納している <see cref="T:System.Xml.XmlReader" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There was an error processing the XSLT transformation.  &#xA;  &#xA; Note: This is a change in behavior from earlier versions. An &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.">XSLT 変換の処理中にエラーが発生しました。  
メモ:これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; using the specified &lt;paramref name=&quot;args&quot; /&gt; and outputs the result to a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt;.">指定した <paramref name="args" /> を使用して <see cref="T:System.Xml.XPath.XPathNavigator" /> の XML データを変換し、その結果を <see cref="T:System.IO.Stream" /> に出力します。</summary>
      <param name="input" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; containing the data to be transformed.">変換されるデータを含む <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <param name="output" vsli:raw="The stream to which you want to output.">出力先のストリーム。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There was an error processing the XSLT transformation.  &#xA;  &#xA; Note: This is a change in behavior from earlier versions. An &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.">XSLT 変換の処理中にエラーが発生しました。  
メモ:これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; using the specified &lt;paramref name=&quot;args&quot; /&gt; and outputs the result to a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt;.">指定した <paramref name="args" /> を使用して <see cref="T:System.Xml.XPath.XPathNavigator" /> の XML データを変換し、その結果を <see cref="T:System.IO.Stream" /> に出力します。</summary>
      <param name="input" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; containing the data to be transformed.">変換されるデータを含む <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <param name="output" vsli:raw="The stream to which you want to output.">出力先のストリーム。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve the XSLT &lt;c&gt;document()&lt;/c&gt; function. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;c&gt;document()&lt;/c&gt; function is not resolved.  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is not cached after the &lt;see cref=&quot;M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)&quot; /&gt; method completes.">XSLT の <c>document()</c> 関数を解決するために使用する <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" /> がキャッシュされていません。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There was an error processing the XSLT transformation.  &#xA;  &#xA; Note: This is a change in behavior from earlier versions. An &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.">XSLT 変換の処理中にエラーが発生しました。  
メモ:これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; using the specified &lt;paramref name=&quot;args&quot; /&gt; and outputs the result to a &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;.">指定した <paramref name="args" /> を使用して <see cref="T:System.Xml.XPath.XPathNavigator" /> の XML データを変換し、その結果を <see cref="T:System.IO.TextWriter" /> に出力します。</summary>
      <param name="input" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; containing the data to be transformed.">変換されるデータを含む <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <param name="output" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which you want to output.">出力先の <see cref="T:System.IO.TextWriter" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There was an error processing the XSLT transformation.  &#xA;  &#xA; Note: This is a change in behavior from earlier versions. An &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.">XSLT 変換の処理中にエラーが発生しました。  
メモ:これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; using the specified &lt;paramref name=&quot;args&quot; /&gt; and outputs the result to a &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;.">指定した <paramref name="args" /> を使用して <see cref="T:System.Xml.XPath.XPathNavigator" /> の XML データを変換し、その結果を <see cref="T:System.IO.TextWriter" /> に出力します。</summary>
      <param name="input" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; containing the data to be transformed.">変換されるデータを含む <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <param name="output" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which you want to output.">出力先の <see cref="T:System.IO.TextWriter" />。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve the XSLT &lt;c&gt;document()&lt;/c&gt; function. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;c&gt;document()&lt;/c&gt; function is not resolved.  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is not cached after the &lt;see cref=&quot;M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)&quot; /&gt; method completes.">XSLT の <c>document()</c> 関数を解決するために使用する <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" /> がキャッシュされていません。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There was an error processing the XSLT transformation.  &#xA;  &#xA; Note: This is a change in behavior from earlier versions. An &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.">XSLT 変換の処理中にエラーが発生しました。  
メモ:これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; using the specified &lt;paramref name=&quot;args&quot; /&gt; and outputs the result to an &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">指定した <paramref name="args" /> を使用して <see cref="T:System.Xml.XPath.XPathNavigator" /> の XML データを変換し、その結果を <see cref="T:System.Xml.XmlReader" /> に出力します。</summary>
      <param name="input" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; containing the data to be transformed.">変換されるデータを含む <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve the XSLT &lt;c&gt;document()&lt;/c&gt; function. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;c&gt;document()&lt;/c&gt; function is not resolved.  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is not cached after the &lt;see cref=&quot;M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)&quot; /&gt; method completes.">XSLT の <c>document()</c> 関数を解決するために使用する <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" /> がキャッシュされていません。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; containing the results of the transformation.">変換結果を格納している <see cref="T:System.Xml.XmlReader" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There was an error processing the XSLT transformation.  &#xA;  &#xA; Note: This is a change in behavior from earlier versions. An &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.">XSLT 変換の処理中にエラーが発生しました。  
メモ:これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; using the specified args and outputs the result to an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">指定した args を使用して <see cref="T:System.Xml.XPath.XPathNavigator" /> の XML データを変換し、その結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。</summary>
      <param name="input" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; containing the data to be transformed.">変換されるデータを含む <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <param name="output" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to which you want to output.">出力先の <see cref="T:System.Xml.XmlWriter" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There was an error processing the XSLT transformation.  &#xA;  &#xA; Note: This is a change in behavior from earlier versions. An &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.">XSLT 変換の処理中にエラーが発生しました。  
メモ:これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; using the specified args and outputs the result to an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">指定した args を使用して <see cref="T:System.Xml.XPath.XPathNavigator" /> の XML データを変換し、その結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。</summary>
      <param name="input" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; containing the data to be transformed.">変換されるデータを含む <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <param name="output" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to which you want to output.">出力先の <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve the XSLT &lt;c&gt;document()&lt;/c&gt; function. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;c&gt;document()&lt;/c&gt; function is not resolved.  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is not cached after the &lt;see cref=&quot;M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)&quot; /&gt; method completes.">XSLT の <c>document()</c> 関数を解決するために使用する <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" /> がキャッシュされていません。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There was an error processing the XSLT transformation.  &#xA;  &#xA; Note: This is a change in behavior from earlier versions. An &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.">XSLT 変換の処理中にエラーが発生しました。  
メモ:これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.Xsl.XslTransform.XmlResolver">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve external resources when the &lt;see cref=&quot;Overload:System.Xml.Xsl.XslTransform.Transform&quot; /&gt; method is called.">
        <see cref="T:System.Xml.XmlResolver" /> メソッドの呼び出し時に外部リソースの解決に使用する <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> を設定します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; to use during transformation. If set to &lt;see langword=&quot;null&quot; /&gt;, the XSLT &lt;c&gt;document()&lt;/c&gt; function is not resolved.">変換中に使用する <see cref="T:System.Xml.XmlResolver" />。 に設定する<see langword="null" />と、XSLT<c>ドキュメント ()</c>関数は解決されません。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltSettings">
      <summary vsli:raw="Specifies the XSLT features to support during execution of the XSLT style sheet.">XSLT スタイル シートを実行しているときにサポートする XSLT 機能を指定します。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Xsl.XsltSettings&quot; /&gt; class with default settings.">
        <see cref="T:System.Xml.Xsl.XsltSettings" /> クラスの新しいインスタンスを既定の設定で初期化します。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltSettings.#ctor(System.Boolean,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Xsl.XsltSettings&quot; /&gt; class with the specified settings.">指定された設定を使用して、<see cref="T:System.Xml.Xsl.XsltSettings" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="enableDocumentFunction" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to enable support for the XSLT &lt;c&gt;document()&lt;/c&gt; function; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">XSLT の <c>document()</c> 関数に対するサポートを有効にする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="enableScript" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to enable support for embedded scripts blocks; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">埋め込みスクリプト ブロックに対するサポートを有効にする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.Default">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Xml.Xsl.XsltSettings&quot; /&gt; object with default settings. Support for the XSLT &lt;c&gt;document()&lt;/c&gt; function and embedded script blocks is disabled.">既定の設定を使用して <see cref="T:System.Xml.Xsl.XsltSettings" /> オブジェクトを取得します。 XSLT の <c>document()</c> 関数と埋め込みスクリプト ブロックのサポートは無効になっています。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltSettings&quot; /&gt; object with the &lt;see cref=&quot;P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.Xsl.XsltSettings.EnableScript&quot; /&gt; properties set to &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Xml.Xsl.XsltSettings" /> プロパティと <see cref="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction" /> プロパティが <see langword="false" /> に設定された <see cref="P:System.Xml.Xsl.XsltSettings.EnableScript" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction">
      <summary vsli:raw="Gets or sets a value indicating whether to enable support for the XSLT &lt;c&gt;document()&lt;/c&gt; function.">XSLT の <c>document()</c> 関数に対するサポートを有効にするかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to support the XSLT &lt;c&gt;document()&lt;/c&gt; function; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />XSLT<c>ドキュメント ()</c>関数をサポートするには、それ以外<see langword="false" />の場合は。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.EnableScript">
      <summary vsli:raw="Gets or sets a value indicating whether to enable support for embedded script blocks.">埋め込みスクリプト ブロックに対するサポートを有効にするかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to support script blocks in XSLT style sheets; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">XSLT スタイル シートのスクリプト ブロックをサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.TrustedXslt">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Xml.Xsl.XsltSettings&quot; /&gt; object that enables support for the XSLT &lt;c&gt;document()&lt;/c&gt; function and embedded script blocks.">XSLT の <c>document()</c> 関数および埋め込みスクリプト ブロックのサポートを有効にする <see cref="T:System.Xml.Xsl.XsltSettings" /> オブジェクトを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltSettings&quot; /&gt; object with the &lt;see cref=&quot;P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.Xsl.XsltSettings.EnableScript&quot; /&gt; properties set to &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="T:System.Xml.Xsl.XsltSettings" /> プロパティと <see cref="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction" /> プロパティが <see langword="true" /> に設定された <see cref="P:System.Xml.Xsl.XsltSettings.EnableScript" /> オブジェクト。</returns>
    </member>
  </members>
</doc>
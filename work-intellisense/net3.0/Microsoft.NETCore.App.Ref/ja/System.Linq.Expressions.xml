<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Linq.Expressions</name>
  </assembly>
  <members>
    <member name="T:System.Dynamic.BinaryOperationBinder">
      <summary vsli:raw="Represents the binary dynamic operation at the call site, providing the binding semantic and the details about the operation.">呼び出しサイトでの動的二項演算を表し、バインディングのセマンティクスと、操作に関する詳細な情報を提供します。</summary>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.BinaryOperationBinder&quot; /&gt; class.">
        <see cref="T:System.Dynamic.BinaryOperationBinder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="operation" vsli:raw="The binary operation kind.">二項演算の種類。</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic binary operation.">動的二項演算のバインドを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic operation.">動的演算のターゲット。</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic operation.">動的演算の引数の配列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the binary dynamic operation if the target dynamic object cannot bind.">ターゲットの動的オブジェクトがバインドできない場合に、動的二項演算のバインドを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic binary operation.">動的二項演算のターゲット。</param>
      <param name="arg" vsli:raw="The right hand side operand of the dynamic binary operation.">動的二項演算の右側のオペランド。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the binary dynamic operation if the target dynamic object cannot bind.">派生クラスでオーバーライドされた場合、ターゲットの動的オブジェクトがバインドできない場合に、動的二項演算のバインドを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic binary operation.">動的二項演算のターゲット。</param>
      <param name="arg" vsli:raw="The right hand side operand of the dynamic binary operation.">動的二項演算の右側のオペランド。</param>
      <param name="errorSuggestion" vsli:raw="The binding result if the binding fails, or null.">バインドに失敗した場合のバインドの結果、または null。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.Operation">
      <summary vsli:raw="The binary operation kind.">二項演算の種類。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; object representing the kind of binary operation.">二項演算の種類を表す <see cref="T:System.Linq.Expressions.ExpressionType" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">操作の結果型。</summary>
      <returns vsli:raw="The result type of the operation.">操作の結果型。</returns>
    </member>
    <member name="T:System.Dynamic.BindingRestrictions">
      <summary vsli:raw="Represents a set of binding restrictions on the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; under which the dynamic binding is valid.">動的バインディングが有効となる、<see cref="T:System.Dynamic.DynamicMetaObject" /> に対するバインディング制限のセットを表します。</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})">
      <summary vsli:raw="Combines binding restrictions from the list of &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; instances into one set of restrictions.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> インスタンスのリストに含まれているバインディング制限を 1 つの制限セットにまとめます。</summary>
      <param name="contributingObjects" vsli:raw="The list of &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; instances from which to combine restrictions.">結合する制限を含んでいる <see cref="T:System.Dynamic.DynamicMetaObject" /> インスタンスのリスト。</param>
      <returns vsli:raw="The new set of binding restrictions.">バインディング制限の新しいセット。</returns>
    </member>
    <member name="F:System.Dynamic.BindingRestrictions.Empty">
      <summary vsli:raw="Represents an empty set of binding restrictions. This field is read only.">空のバインディング制限のセットを表します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates the binding restriction that checks the expression for arbitrary immutable properties.">任意の不変プロパティに関して式を確認するバインディング制限を作成します。</summary>
      <param name="expression" vsli:raw="The expression representing the restrictions.">制限を表す式。</param>
      <returns vsli:raw="The new binding restrictions.">新しいバインディング制限。</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)">
      <summary vsli:raw="Creates the binding restriction that checks the expression for object instance identity.">オブジェクト インスタンス ID に関して式を確認するバインディング制限を作成します。</summary>
      <param name="expression" vsli:raw="The expression to test.">テストする式。</param>
      <param name="instance" vsli:raw="The exact object instance to test.">テストする正確なオブジェクト インスタンス。</param>
      <returns vsli:raw="The new binding restrictions.">新しいバインディング制限。</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates the binding restriction that check the expression for runtime type identity.">ランタイム型 ID に関して式を確認するバインディング制限を作成します。</summary>
      <param name="expression" vsli:raw="The expression to test.">テストする式。</param>
      <param name="type" vsli:raw="The exact type to test.">テストする正確な型。</param>
      <returns vsli:raw="The new binding restrictions.">新しいバインディング制限。</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)">
      <summary vsli:raw="Merges the set of binding restrictions with the current binding restrictions.">バインディング制限のセットを現在のバインディング制限にマージします。</summary>
      <param name="restrictions" vsli:raw="The set of restrictions with which to merge the current binding restrictions.">現在のバインディング制限にマージするバインディング制限のセット。</param>
      <returns vsli:raw="The new set of binding restrictions.">バインディング制限の新しいセット。</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.ToExpression">
      <summary vsli:raw="Creates the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; representing the binding restrictions.">バインディング制限を表す <see cref="T:System.Linq.Expressions.Expression" /> を作成します。</summary>
      <returns vsli:raw="The expression tree representing the restrictions.">制限を表す式ツリー。</returns>
    </member>
    <member name="T:System.Dynamic.CallInfo">
      <summary vsli:raw="Describes arguments in the dynamic binding process.">動的バインディング プロセスの引数を定義します。</summary>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
      <summary vsli:raw="Creates a new CallInfo that represents arguments in the dynamic binding process.">動的バインディング プロセスの引数を表す新しい CallInfo を作成します。</summary>
      <param name="argCount" vsli:raw="The number of arguments.">引数の数。</param>
      <param name="argNames" vsli:raw="The argument names.">引数の名前。</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])">
      <summary vsli:raw="Creates a new &lt;c&gt;PositionalArgumentInfo&lt;/c&gt;.">新しい <c>PositionalArgumentInfo</c> を作成します。</summary>
      <param name="argCount" vsli:raw="The number of arguments.">引数の数。</param>
      <param name="argNames" vsli:raw="The argument names.">引数の名前。</param>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentCount">
      <summary vsli:raw="The number of arguments.">引数の数。</summary>
      <returns vsli:raw="The number of arguments.">引数の数。</returns>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentNames">
      <summary vsli:raw="The argument names.">引数の名前。</summary>
      <returns vsli:raw="The read-only collection of argument names.">引数名の読み取り専用コレクション。</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified CallInfo instance is considered equal to the current.">指定された CallInfo インスタンスが現在のインスタンスと等しいと見なされるかどうかを判断します。</summary>
      <param name="obj" vsli:raw="The instance of &lt;see cref=&quot;T:System.Dynamic.CallInfo&quot; /&gt; to compare with the current instance.">現在のインスタンスと比較する <see cref="T:System.Dynamic.CallInfo" /> のインスタンス。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified instance is equal to the current one otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したインスタンスが現在のインスタンスと等しい場合は true、それ以外の場合は false です。</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.GetHashCode">
      <summary vsli:raw="Serves as a hash function for the current &lt;see cref=&quot;T:System.Dynamic.CallInfo&quot; /&gt;.">現在の <see cref="T:System.Dynamic.CallInfo" /> のハッシュ関数として機能します。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.Dynamic.CallInfo&quot; /&gt;.">現在の <see cref="T:System.Dynamic.CallInfo" /> のハッシュ コード。</returns>
    </member>
    <member name="T:System.Dynamic.ConvertBinder">
      <summary vsli:raw="Represents the convert dynamic operation at the call site, providing the binding semantic and the details about the operation.">呼び出しサイトでの動的変換操作を表しており、バインド セマンティックおよび操作の詳細を提供します。</summary>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.#ctor(System.Type,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.ConvertBinder&quot; /&gt;.">
        <see cref="T:System.Dynamic.ConvertBinder" />の新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="The type to convert to.">変換後の型。</param>
      <param name="explicit" vsli:raw="Is true if the conversion should consider explicit conversions; otherwise, false.">明示的な変換を考慮する必要がある場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic convert operation.">動的変換操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic convert operation.">動的変換操作のターゲット。</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic convert operation.">動的変換操作の引数の配列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Explicit">
      <summary vsli:raw="Gets the value indicating if the conversion should consider explicit conversions.">明示的な変換を考慮する必要があるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is an explicit conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />明示的な変換がある場合は。それ以外<see langword="false" />の場合は。</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic convert operation if the target dynamic object cannot bind.">ターゲットの動的オブジェクトがバインドできない場合に、動的変換操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic convert operation.">動的変換操作のターゲット。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic convert operation if the target dynamic object cannot bind.">派生クラスでオーバーライドされた場合、ターゲットの動的オブジェクトがバインドできない場合に、動的変換操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic convert operation.">動的変換操作のターゲット。</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">バインディングに失敗した場合に使用するバインディングの結果または null。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">操作の結果型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">操作の結果型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Type">
      <summary vsli:raw="The type to convert to.">変換後の型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type to convert to.">変換後の型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Dynamic.CreateInstanceBinder">
      <summary vsli:raw="Represents the dynamic create operation at the call site, providing the binding semantic and the details about the operation.">呼び出しサイトでの動的作成操作を表しており、バインド セマンティックおよび操作の詳細を提供します。</summary>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.#ctor(System.Dynamic.CallInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.CreateInstanceBinder&quot; /&gt;.">
        <see cref="T:System.Dynamic.CreateInstanceBinder" />の新しいインスタンスを初期化します。</summary>
      <param name="callInfo" vsli:raw="The signature of the arguments at the call site.">呼び出しサイトでの引数の署名。</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic create operation.">動的作成操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic create operation.">動的作成操作のターゲット。</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic create operation.">動的作成操作の引数の配列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.CallInfo">
      <summary vsli:raw="Gets the signature of the arguments at the call site.">呼び出しサイトで引数の署名を取得します。</summary>
      <returns vsli:raw="The signature of the arguments at the call site.">呼び出しサイトでの引数の署名。</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic create operation if the target dynamic object cannot bind.">ターゲットの動的オブジェクトがバインドできない場合に、動的作成操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic create operation.">動的作成操作のターゲット。</param>
      <param name="args" vsli:raw="The arguments of the dynamic create operation.">動的作成操作の引数。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic create operation if the target dynamic object cannot bind.">派生クラスでオーバーライドされた場合、ターゲットの動的オブジェクトがバインドできない場合に、動的作成操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic create operation.">動的作成操作のターゲット。</param>
      <param name="args" vsli:raw="The arguments of the dynamic create operation.">動的作成操作の引数。</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">バインディングに失敗した場合に使用するバインディングの結果または null。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">操作の結果型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">操作の結果型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Dynamic.DeleteIndexBinder">
      <summary vsli:raw="Represents the dynamic delete index operation at the call site, providing the binding semantic and the details about the operation.">呼び出しサイトでの動的インデックス削除操作を表し、バインディングのセマンティクスと、操作に関する詳細な情報を提供します。</summary>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.DeleteIndexBinder&quot; /&gt;.">
        <see cref="T:System.Dynamic.DeleteIndexBinder" />の新しいインスタンスを初期化します。</summary>
      <param name="callInfo" vsli:raw="The signature of the arguments at the call site.">呼び出しサイトでの引数の署名。</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic delete index operation.">動的インデックス削除操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic delete index operation.">動的インデックス削除操作のターゲット。</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic delete index operation.">動的インデックス削除操作の引数の配列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.CallInfo">
      <summary vsli:raw="Gets the signature of the arguments at the call site.">呼び出しサイトで引数の署名を取得します。</summary>
      <returns vsli:raw="The signature of the arguments at the call site.">呼び出しサイトでの引数の署名。</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic delete index operation if the target dynamic object cannot bind.">ターゲットの動的オブジェクトがバインドできない場合に、動的インデックス削除操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic delete index operation.">動的インデックス削除操作のターゲット。</param>
      <param name="indexes" vsli:raw="The arguments of the dynamic delete index operation.">動的インデックス削除操作の引数。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic delete index operation if the target dynamic object cannot bind.">派生クラスでオーバーライドされた場合、ターゲットの動的オブジェクトがバインドできない場合に、動的インデックス削除操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic delete index operation.">動的インデックス削除操作のターゲット。</param>
      <param name="indexes" vsli:raw="The arguments of the dynamic delete index operation.">動的インデックス削除操作の引数。</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">バインディングに失敗した場合に使用するバインディングの結果または null。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">操作の結果型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">操作の結果型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Dynamic.DeleteMemberBinder">
      <summary vsli:raw="Represents the dynamic delete member operation at the call site, providing the binding semantic and the details about the operation.">呼び出しサイトでの動的メンバー削除操作を表し、バインディングのセマンティクスと、操作に関する詳細な情報を提供します。</summary>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.DeleteIndexBinder&quot; /&gt;.">
        <see cref="T:System.Dynamic.DeleteIndexBinder" />の新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="The name of the member to delete.">削除するメンバーの名前。</param>
      <param name="ignoreCase" vsli:raw="Is true if the name should be matched ignoring case; false otherwise.">名前のマッチングで大文字と小文字の区別を無視する場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic delete member operation.">動的メンバー削除操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic delete member operation.">動的メンバー削除操作のターゲット。</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic delete member operation.">動的メンバー削除操作の引数の配列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic delete member operation if the target dynamic object cannot bind.">ターゲットの動的オブジェクトがバインドできない場合に、動的メンバー削除操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic delete member operation.">動的メンバー削除操作のターゲット。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic delete member operation if the target dynamic object cannot bind.">派生クラスでオーバーライドされた場合、ターゲットの動的オブジェクトがバインドできない場合に、動的メンバー削除操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic delete member operation.">動的メンバー削除操作のターゲット。</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">バインディングに失敗した場合に使用するバインディングの結果または null。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.IgnoreCase">
      <summary vsli:raw="Gets the value indicating if the string comparison should ignore the case of the member name.">文字列比較でメンバー名の大文字と小文字を区別するかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string comparison should ignore case; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />文字列比較で大文字と小文字を区別しない場合は、それ以外<see langword="false" />の場合は。</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.Name">
      <summary vsli:raw="Gets the name of the member to delete.">削除するメンバーの名前を取得します。</summary>
      <returns vsli:raw="The name of the member to delete.">削除するメンバーの名前。</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">操作の結果型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">操作の結果型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObject">
      <summary vsli:raw="Represents the dynamic binding and a binding logic of an object participating in the dynamic binding.">動的バインディングと、動的バインディングに参加しているオブジェクトのバインディング ロジックを表します。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; class.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="expression" vsli:raw="The expression representing this &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; during the dynamic binding process.">動的バインディング プロセスにおいてこの <see cref="T:System.Dynamic.DynamicMetaObject" /> を表す式。</param>
      <param name="restrictions" vsli:raw="The set of binding restrictions under which the binding is valid.">バインディングが有効となるバインディング制限のセット。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; class.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="expression" vsli:raw="The expression representing this &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; during the dynamic binding process.">動的バインディング プロセスにおいてこの <see cref="T:System.Dynamic.DynamicMetaObject" /> を表す式。</param>
      <param name="restrictions" vsli:raw="The set of binding restrictions under which the binding is valid.">バインディングが有効となるバインディング制限のセット。</param>
      <param name="value" vsli:raw="The runtime value represented by the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt;.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> が表すランタイム値。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic binary operation.">動的二項演算のバインドを実行します。</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.BinaryOperationBinder&quot; /&gt; that represents the details of the dynamic operation.">動的操作の詳細を表す <see cref="T:System.Dynamic.BinaryOperationBinder" /> のインスタンス。</param>
      <param name="arg" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the right hand side of the binary operation.">二項演算の右項を表す <see cref="T:System.Dynamic.DynamicMetaObject" /> のインスタンス。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)">
      <summary vsli:raw="Performs the binding of the dynamic conversion operation.">動的変換操作のバインディングを実行します。</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.ConvertBinder&quot; /&gt; that represents the details of the dynamic operation.">動的操作の詳細を表す <see cref="T:System.Dynamic.ConvertBinder" /> のインスタンス。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic create instance operation.">動的インスタンス作成操作のバインディングを実行します。</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.CreateInstanceBinder&quot; /&gt; that represents the details of the dynamic operation.">動的操作の詳細を表す <see cref="T:System.Dynamic.CreateInstanceBinder" /> のインスタンス。</param>
      <param name="args" vsli:raw="An array of &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; instances - arguments to the create instance operation.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> のインスタンスの配列 (インスタンス作成操作に対する引数)。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic delete index operation.">動的インデックス削除操作のバインディングを実行します。</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.DeleteIndexBinder&quot; /&gt; that represents the details of the dynamic operation.">動的操作の詳細を表す <see cref="T:System.Dynamic.DeleteIndexBinder" /> のインスタンス。</param>
      <param name="indexes" vsli:raw="An array of &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; instances - indexes for the delete index operation.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> のインスタンスの配列 (インデックス削除操作のインデックス)。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary vsli:raw="Performs the binding of the dynamic delete member operation.">動的メンバー削除操作のバインディングを実行します。</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.DeleteMemberBinder&quot; /&gt; that represents the details of the dynamic operation.">動的操作の詳細を表す <see cref="T:System.Dynamic.DeleteMemberBinder" /> のインスタンス。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic get index operation.">動的インデックス取得操作のバインディングを実行します。</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.GetIndexBinder&quot; /&gt; that represents the details of the dynamic operation.">動的操作の詳細を表す <see cref="T:System.Dynamic.GetIndexBinder" /> のインスタンス。</param>
      <param name="indexes" vsli:raw="An array of &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; instances - indexes for the get index operation.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> のインスタンスの配列 (インデックス取得操作のインデックス)。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
      <summary vsli:raw="Performs the binding of the dynamic get member operation.">動的メンバー取得操作のバインディングを実行します。</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.GetMemberBinder&quot; /&gt; that represents the details of the dynamic operation.">動的操作の詳細を表す <see cref="T:System.Dynamic.GetMemberBinder" /> のインスタンス。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic invoke operation.">動的呼び出し操作のバインディングを実行します。</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.InvokeBinder&quot; /&gt; that represents the details of the dynamic operation.">動的操作の詳細を表す <see cref="T:System.Dynamic.InvokeBinder" /> のインスタンス。</param>
      <param name="args" vsli:raw="An array of &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; instances - arguments to the invoke operation.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> のインスタンスの配列 (呼び出し操作に対する引数)。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic invoke member operation.">動的メンバー呼び出し操作のバインディングを実行します。</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.InvokeMemberBinder&quot; /&gt; that represents the details of the dynamic operation.">動的操作の詳細を表す <see cref="T:System.Dynamic.InvokeMemberBinder" /> のインスタンス。</param>
      <param name="args" vsli:raw="An array of &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; instances - arguments to the invoke member operation.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> のインスタンスの配列 (メンバーの呼び出し操作に対する引数)。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic set index operation.">動的インデックス設定操作のバインディングを実行します。</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.SetIndexBinder&quot; /&gt; that represents the details of the dynamic operation.">動的操作の詳細を表す <see cref="T:System.Dynamic.SetIndexBinder" /> のインスタンス。</param>
      <param name="indexes" vsli:raw="An array of &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; instances - indexes for the set index operation.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> のインスタンスの配列 (インデックス設定操作のインデックス)。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the value for the set index operation.">インデックス設定操作の値を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic set member operation.">動的メンバー設定操作のバインディングを実行します。</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.SetMemberBinder&quot; /&gt; that represents the details of the dynamic operation.">動的操作の詳細を表す <see cref="T:System.Dynamic.SetMemberBinder" /> のインスタンス。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the value for the set member operation.">メンバー設定操作の値を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)">
      <summary vsli:raw="Performs the binding of the dynamic unary operation.">動的単項演算のバインディングを実行します。</summary>
      <param name="binder" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Dynamic.UnaryOperationBinder&quot; /&gt; that represents the details of the dynamic operation.">動的操作の詳細を表す <see cref="T:System.Dynamic.UnaryOperationBinder" /> のインスタンス。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.Create(System.Object,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a meta-object for the specified object.">指定されたオブジェクトのメタオブジェクトを作成します。</summary>
      <param name="value" vsli:raw="The object to get a meta-object for.">メタオブジェクトの取得対象となるオブジェクト。</param>
      <param name="expression" vsli:raw="The expression representing this &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; during the dynamic binding process.">動的バインディング プロセスにおいてこの <see cref="T:System.Dynamic.DynamicMetaObject" /> を表す式。</param>
      <returns vsli:raw="If the given object implements &lt;see cref=&quot;T:System.Dynamic.IDynamicMetaObjectProvider&quot; /&gt; and is not a remote object from outside the current AppDomain, returns the object's specific meta-object returned by &lt;see cref=&quot;M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)&quot; /&gt;. Otherwise a plain new meta-object with no restrictions is created and returned.">指定されたオブジェクトが <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" /> を実装し、なおかつ (現在の AppDomain 外の) リモート オブジェクトではない場合、<see cref="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)" /> が返すオブジェクトの固有のメタオブジェクトが返されます。 それ以外の場合は、制限のない通常のメタオブジェクトが新たに作成されて、返されます。</returns>
    </member>
    <member name="F:System.Dynamic.DynamicMetaObject.EmptyMetaObjects">
      <summary vsli:raw="Represents an empty array of type &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt;. This field is read only.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 型の空の配列を表します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Expression">
      <summary vsli:raw="The expression representing the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; during the dynamic binding process.">動的バインディング プロセスにおいて <see cref="T:System.Dynamic.DynamicMetaObject" /> を表す式。</summary>
      <returns vsli:raw="The expression representing the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; during the dynamic binding process.">動的バインディング プロセスにおいて <see cref="T:System.Dynamic.DynamicMetaObject" /> を表す式。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.GetDynamicMemberNames">
      <summary vsli:raw="Returns the enumeration of all dynamic member names.">すべての動的メンバー名の列挙値を返します。</summary>
      <returns vsli:raw="The list of dynamic member names.">動的メンバー名のリスト。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.HasValue">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; has the runtime value.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> にランタイム値が存在するかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; has the runtime value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />に<see cref="T:System.Dynamic.DynamicMetaObject" />ランタイム値がある場合は。それ<see langword="false" />以外の場合は。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.LimitType">
      <summary vsli:raw="Gets the limit type of the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt;.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> の制限型を取得します。</summary>
      <returns vsli:raw="&lt;see cref=&quot;P:System.Dynamic.DynamicMetaObject.RuntimeType&quot; /&gt; if runtime value is available, a type of the &lt;see cref=&quot;P:System.Dynamic.DynamicMetaObject.Expression&quot; /&gt; otherwise.">ランタイム値が利用できる場合は <see cref="P:System.Dynamic.DynamicMetaObject.RuntimeType" />。それ以外の場合は <see cref="P:System.Dynamic.DynamicMetaObject.Expression" /> の型。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Restrictions">
      <summary vsli:raw="The set of binding restrictions under which the binding is valid.">バインディングが有効となるバインディング制限のセット。</summary>
      <returns vsli:raw="The set of binding restrictions.">バインディング制限のセット。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.RuntimeType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Type&quot; /&gt; of the runtime value or null if the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; has no value associated with it.">ランタイム値の <see cref="T:System.Type" /> を取得します。<see cref="T:System.Dynamic.DynamicMetaObject" /> に値が関連付けられていない場合は null です。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the runtime value or null.">ランタイム値の <see cref="T:System.Type" /> または null。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Value">
      <summary vsli:raw="The runtime value represented by this &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt;.">この <see cref="T:System.Dynamic.DynamicMetaObject" /> が表すランタイム値。</summary>
      <returns vsli:raw="The runtime value represented by this &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt;.">この <see cref="T:System.Dynamic.DynamicMetaObject" /> が表すランタイム値。</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObjectBinder">
      <summary vsli:raw="The dynamic call site binder that participates in the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; binding protocol.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> バインディング プロトコルに参加する動的呼び出しサイトのバインダー。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObjectBinder&quot; /&gt; class.">
        <see cref="T:System.Dynamic.DynamicMetaObjectBinder" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic operation.">派生クラスでオーバーライドされた場合、動的操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic operation.">動的演算のターゲット。</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic operation.">動的演算の引数の配列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Performs the runtime binding of the dynamic operation on a set of arguments.">引数のセットに対して動的操作の実行時バインディングを実行します。</summary>
      <param name="args" vsli:raw="An array of arguments to the dynamic operation.">動的操作の引数の配列。</param>
      <param name="parameters" vsli:raw="The array of &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; instances that represent the parameters of the call site in the binding process.">バインディング プロセスでの呼び出しサイトのパラメーターを表す <see cref="T:System.Linq.Expressions.ParameterExpression" /> インスタンスの配列。</param>
      <param name="returnLabel" vsli:raw="A LabelTarget used to return the result of the dynamic binding.">動的バインディングの結果を返すために使用される LabelTarget。</param>
      <returns vsli:raw="An Expression that performs tests on the dynamic operation arguments, and performs the dynamic operation if the tests are valid. If the tests fail on subsequent occurrences of the dynamic operation, Bind will be called again to produce a new &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; for the new argument types.">動的操作の引数に対してテストを実行し、テストが有効な場合に動的操作を実行する Expression。 後続の動的操作でテストが失敗すると、Bind が再び呼び出され、新しい引数の型に対する新しい <see cref="T:System.Linq.Expressions.Expression" /> が生成されます。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Defers the binding of the operation until later time when the runtime values of all dynamic operation arguments have been computed.">動的操作の引数のランタイム値がすべて計算されるまで、操作のバインディングを保留します。</summary>
      <param name="target" vsli:raw="The target of the dynamic operation.">動的演算のターゲット。</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic operation.">動的演算の引数の配列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Defers the binding of the operation until later time when the runtime values of all dynamic operation arguments have been computed.">動的操作の引数のランタイム値がすべて計算されるまで、操作のバインディングを保留します。</summary>
      <param name="args" vsli:raw="An array of arguments of the dynamic operation.">動的演算の引数の配列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.GetUpdateExpression(System.Type)">
      <summary vsli:raw="Gets an expression that will cause the binding to be updated. It indicates that the expression's binding is no longer valid. This is typically used when the &quot;version&quot; of a dynamic object has changed.">バインディングを更新する式を取得します。 これは、式のバインディングが有効でなくなったことを示します。 通常は、動的オブジェクトの "バージョン" が変更された場合に使用します。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of the resulting expression; any type is allowed.">結果として得られる式の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ。任意の型を使用できます。</param>
      <returns vsli:raw="The update expression.">更新式。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObjectBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">操作の結果型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">操作の結果型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Dynamic.DynamicObject">
      <summary vsli:raw="Provides a base class for specifying dynamic behavior at run time. This class must be inherited from; you cannot instantiate it directly.">実行時の動的な動作を指定するための基本クラスを提供します。 このクラスは継承する必要があり、直接インスタンス化することはできません。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.#ctor">
      <summary vsli:raw="Enables derived types to initialize a new instance of the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; type.">派生型で <see cref="T:System.Dynamic.DynamicObject" /> 型の新しいインスタンスを初期化できるようにします。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
      <summary vsli:raw="Returns the enumeration of all dynamic member names.">すべての動的メンバー名の列挙値を返します。</summary>
      <returns vsli:raw="A sequence that contains dynamic member names.">動的メンバー名を含むシーケンス。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; that dispatches to the dynamic virtual methods. The object can be encapsulated inside another &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; to provide custom behavior for individual actions. This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.">動的仮想メソッドにディスパッチされる <see cref="T:System.Dynamic.DynamicMetaObject" /> を提供します。 このオブジェクトを別の <see cref="T:System.Dynamic.DynamicMetaObject" /> の内部にカプセル化することにより、個々のアクションのカスタム動作を指定することができます。 このメソッドは言語実装者向けの DLR (動的言語ランタイム) インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
      <param name="parameter" vsli:raw="The expression that represents &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; to dispatch to the dynamic virtual methods.">動的仮想メソッドにディスパッチされる <see cref="T:System.Dynamic.DynamicMetaObject" /> を表す式。</param>
      <returns vsli:raw="An object of the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; type.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 型のオブジェクト。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
      <summary vsli:raw="Provides implementation for binary operations. Classes derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class can override this method to specify dynamic behavior for operations such as addition and multiplication.">二項演算の実装を提供します。 <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、加算や乗算などの演算の動的な動作を指定できます。</summary>
      <param name="binder" vsli:raw="Provides information about the binary operation. The &lt;c&gt;binder.Operation&lt;/c&gt; property returns an &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; object. For example, for the &lt;c&gt;sum = first + second&lt;/c&gt; statement, where &lt;c&gt;first&lt;/c&gt; and &lt;c&gt;second&lt;/c&gt; are derived from the &lt;see langword=&quot;DynamicObject&quot; /&gt; class, &lt;c&gt;binder.Operation&lt;/c&gt; returns &lt;c&gt;ExpressionType.Add&lt;/c&gt;.">二項演算に関する情報を提供します。 <c>binder.Operation</c> プロパティは <see cref="T:System.Linq.Expressions.ExpressionType" /> オブジェクトを返します。 たとえば、<c>sum = first + second</c> ステートメントの場合 (<c>first</c> と <c>second</c> は <see langword="DynamicObject" /> クラスから派生)、<c>binder.Operation</c> クラスは <c>ExpressionType.Add</c> を返します。</param>
      <param name="arg" vsli:raw="The right operand for the binary operation. For example, for the &lt;c&gt;sum = first + second&lt;/c&gt; statement, where &lt;c&gt;first&lt;/c&gt; and &lt;c&gt;second&lt;/c&gt; are derived from the &lt;see langword=&quot;DynamicObject&quot; /&gt; class, &lt;paramref name=&quot;arg&quot; /&gt; is equal to &lt;c&gt;second&lt;/c&gt;.">二項演算の右オペランド。 たとえば、<c>sum = first + second</c> ステートメントの場合 (<c>first</c> と <c>second</c> は <see langword="DynamicObject" /> クラスから派生)、<paramref name="arg" /> は <c>second</c> と等しくなります。</param>
      <param name="result" vsli:raw="The result of the binary operation.">二項演算の結果。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)">操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります (ほとんどの場合、言語固有の実行時例外がスローされます)。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
      <summary vsli:raw="Provides implementation for type conversion operations. Classes derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class can override this method to specify dynamic behavior for operations that convert an object from one type to another.">型変換演算の実装を提供します。 <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、オブジェクトの型を別の型に変換する演算の動的な動作を指定できます。</summary>
      <param name="binder" vsli:raw="Provides information about the conversion operation. The &lt;c&gt;binder.Type&lt;/c&gt; property provides the type to which the object must be converted. For example, for the statement &lt;c&gt;(String)sampleObject&lt;/c&gt; in C# (&lt;c&gt;CType(sampleObject, Type)&lt;/c&gt; in Visual Basic), where &lt;c&gt;sampleObject&lt;/c&gt; is an instance of the class derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, &lt;c&gt;binder.Type&lt;/c&gt; returns the &lt;see cref=&quot;T:System.String&quot; /&gt; type. The &lt;c&gt;binder.Explicit&lt;/c&gt; property provides information about the kind of conversion that occurs. It returns &lt;see langword=&quot;true&quot; /&gt; for explicit conversion and &lt;see langword=&quot;false&quot; /&gt; for implicit conversion.">変換演算に関する情報を提供します。 <c>binder.Type</c> プロパティは、オブジェクトの変換後の型を提供します。 たとえば、C# のステートメント <c>(String)sampleObject</c> (Visual Basic では <c>CType(sampleObject, Type)</c>) の場合 (<c>sampleObject</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスのインスタンス)、<c>binder.Type</c> は <see cref="T:System.String" /> 型を返します。 <c>binder.Explicit</c> プロパティは、行われる変換の種類に関する情報を提供します。 このプロパティは、明示的な変換の場合は <see langword="true" />、暗黙の変換の場合は <see langword="false" /> を返します。</param>
      <param name="result" vsli:raw="The result of the type conversion operation.">型変換演算の結果。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)">操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります (ほとんどの場合、言語固有の実行時例外がスローされます)。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
      <summary vsli:raw="Provides the implementation for operations that initialize a new instance of a dynamic object. This method is not intended for use in C# or Visual Basic.">動的オブジェクトの新しいインスタンスを初期化する演算の実装を提供します。 このメソッドは、C# または Visual Basic で使用するためのものではありません。</summary>
      <param name="binder" vsli:raw="Provides information about the initialization operation.">初期化演算に関する情報を提供します。</param>
      <param name="args" vsli:raw="The arguments that are passed to the object during initialization. For example, for the &lt;c&gt;new SampleType(100)&lt;/c&gt; operation, where &lt;c&gt;SampleType&lt;/c&gt; is the type derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, &lt;c&gt;args[0]&lt;/c&gt; is equal to 100.">初期化中にオブジェクトに渡される引数。 たとえば、<c>new SampleType(100)</c> 演算の場合 (<c>SampleType</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生型)、<c>args[0]</c> は 100 に等しくなります。</param>
      <param name="result" vsli:raw="The result of the initialization.">初期化の結果。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)">操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります (ほとんどの場合、言語固有の実行時例外がスローされます)。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
      <summary vsli:raw="Provides the implementation for operations that delete an object by index. This method is not intended for use in C# or Visual Basic.">インデックスを使用してオブジェクトを削除する演算の実装を提供します。 このメソッドは、C# または Visual Basic で使用するためのものではありません。</summary>
      <param name="binder" vsli:raw="Provides information about the deletion.">削除に関する情報を提供します。</param>
      <param name="indexes" vsli:raw="The indexes to be deleted.">削除するインデックス。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)">操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります (ほとんどの場合、言語固有の実行時例外がスローされます)。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary vsli:raw="Provides the implementation for operations that delete an object member. This method is not intended for use in C# or Visual Basic.">オブジェクト メンバーを削除する演算の実装を提供します。 このメソッドは、C# または Visual Basic で使用するためのものではありません。</summary>
      <param name="binder" vsli:raw="Provides information about the deletion.">削除に関する情報を提供します。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)">操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります (ほとんどの場合、言語固有の実行時例外がスローされます)。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
      <summary vsli:raw="Provides the implementation for operations that get a value by index. Classes derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class can override this method to specify dynamic behavior for indexing operations.">インデックスを使用して値を取得する演算の実装を提供します。 <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、インデックス演算の動的な動作を指定できます。</summary>
      <param name="binder" vsli:raw="Provides information about the operation.">演算に関する情報を提供します。</param>
      <param name="indexes" vsli:raw="The indexes that are used in the operation. For example, for the &lt;c&gt;sampleObject[3]&lt;/c&gt; operation in C# (&lt;c&gt;sampleObject(3)&lt;/c&gt; in Visual Basic), where &lt;c&gt;sampleObject&lt;/c&gt; is derived from the &lt;see langword=&quot;DynamicObject&quot; /&gt; class, &lt;c&gt;indexes[0]&lt;/c&gt; is equal to 3.">演算に使用されるインデックス。 たとえば、C# の <c>sampleObject[3]</c> (Visual Basic では <c>sampleObject(3)</c>) 演算の場合 (<c>sampleObject</c> は <see langword="DynamicObject" /> クラスから派生)、<c>indexes[0]</c> は 3 に等しくなります。</param>
      <param name="result" vsli:raw="The result of the index operation.">インデックス演算の結果。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)">操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります (ほとんどの場合、実行時例外がスローされます)。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary vsli:raw="Provides the implementation for operations that get member values. Classes derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class can override this method to specify dynamic behavior for operations such as getting a value for a property.">メンバー値を取得する演算の実装を提供します。 <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、プロパティ値の取得などの演算の動的な動作を指定できます。</summary>
      <param name="binder" vsli:raw="Provides information about the object that called the dynamic operation. The &lt;c&gt;binder.Name&lt;/c&gt; property provides the name of the member on which the dynamic operation is performed. For example, for the &lt;c&gt;Console.WriteLine(sampleObject.SampleProperty)&lt;/c&gt; statement, where &lt;c&gt;sampleObject&lt;/c&gt; is an instance of the class derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, &lt;c&gt;binder.Name&lt;/c&gt; returns &quot;SampleProperty&quot;. The &lt;c&gt;binder.IgnoreCase&lt;/c&gt; property specifies whether the member name is case-sensitive.">動的演算を呼び出したオブジェクトに関する情報を提供します。 <c>binder.Name</c> プロパティは、動的演算の対象であるメンバーの名前を提供します。 たとえば、<c>Console.WriteLine(sampleObject.SampleProperty)</c> ステートメントの場合 (<c>sampleObject</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスのインスタンス)、<c>binder.Name</c> は "SampleProperty" を返します。 メンバー名で大文字と小文字を区別するかどうかを <c>binder.IgnoreCase</c> プロパティで指定します。</param>
      <param name="result" vsli:raw="The result of the get operation. For example, if the method is called for a property, you can assign the property value to &lt;paramref name=&quot;result&quot; /&gt;.">取得操作の結果。 たとえば、このメソッドがプロパティに対して呼び出された場合、プロパティ値を <paramref name="result" /> に割り当てることができます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)">操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります (ほとんどの場合、実行時例外がスローされます)。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
      <summary vsli:raw="Provides the implementation for operations that invoke an object. Classes derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.">オブジェクトを呼び出す演算の実装を提供します。 <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、オブジェクトやデリゲートの呼び出しなどの演算の動的な動作を指定できます。</summary>
      <param name="binder" vsli:raw="Provides information about the invoke operation.">呼び出し演算に関する情報を提供します。</param>
      <param name="args" vsli:raw="The arguments that are passed to the object during the invoke operation. For example, for the &lt;c&gt;sampleObject(100)&lt;/c&gt; operation, where &lt;c&gt;sampleObject&lt;/c&gt; is derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, &lt;c&gt;args[0]&lt;/c&gt; is equal to 100.">呼び出し演算でオブジェクトに渡される引数。 たとえば、<c>sampleObject(100)</c> 演算の場合 (<c>sampleObject</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスから派生)、<c>args[0]</c> は 100 に等しくなります。</param>
      <param name="result" vsli:raw="The result of the object invocation.">オブジェクト呼び出しの結果。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.">操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります (ほとんどの場合、言語固有の実行時例外がスローされます)。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary vsli:raw="Provides the implementation for operations that invoke a member. Classes derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class can override this method to specify dynamic behavior for operations such as calling a method.">メンバーを呼び出す演算の実装を提供します。 <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、メソッドの呼び出しなどの演算の動的な動作を指定できます。</summary>
      <param name="binder" vsli:raw="Provides information about the dynamic operation. The &lt;c&gt;binder.Name&lt;/c&gt; property provides the name of the member on which the dynamic operation is performed. For example, for the statement &lt;c&gt;sampleObject.SampleMethod(100)&lt;/c&gt;, where &lt;c&gt;sampleObject&lt;/c&gt; is an instance of the class derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, &lt;c&gt;binder.Name&lt;/c&gt; returns &quot;SampleMethod&quot;. The &lt;c&gt;binder.IgnoreCase&lt;/c&gt; property specifies whether the member name is case-sensitive.">動的な演算に関する情報を提供します。 <c>binder.Name</c> プロパティは、動的演算の対象であるメンバーの名前を提供します。 たとえば、ステートメント <c>sampleObject.SampleMethod(100)</c> の場合 (<c>sampleObject</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスのインスタンス)、<c>binder.Name</c> は "SampleMethod" を返します。 メンバー名で大文字と小文字を区別するかどうかを <c>binder.IgnoreCase</c> プロパティで指定します。</param>
      <param name="args" vsli:raw="The arguments that are passed to the object member during the invoke operation. For example, for the statement &lt;c&gt;sampleObject.SampleMethod(100)&lt;/c&gt;, where &lt;c&gt;sampleObject&lt;/c&gt; is derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, &lt;c&gt;args[0]&lt;/c&gt; is equal to 100.">呼び出し演算でオブジェクト メンバーに渡される引数。 たとえば、ステートメント <c>sampleObject.SampleMethod(100)</c> の場合 (<c>sampleObject</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスから派生)、<c>args[0]</c> は 100 に等しくなります。</param>
      <param name="result" vsli:raw="The result of the member invocation.">メンバー呼び出しの結果。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)">操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります (ほとんどの場合、言語固有の実行時例外がスローされます)。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
      <summary vsli:raw="Provides the implementation for operations that set a value by index. Classes derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class can override this method to specify dynamic behavior for operations that access objects by a specified index.">インデックスを使用して値を設定する演算の実装を提供します。 <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、指定したインデックスを使用してオブジェクトにアクセスする演算の動的な動作を指定できます。</summary>
      <param name="binder" vsli:raw="Provides information about the operation.">演算に関する情報を提供します。</param>
      <param name="indexes" vsli:raw="The indexes that are used in the operation. For example, for the &lt;c&gt;sampleObject[3] = 10&lt;/c&gt; operation in C# (&lt;c&gt;sampleObject(3) = 10&lt;/c&gt; in Visual Basic), where &lt;c&gt;sampleObject&lt;/c&gt; is derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, &lt;c&gt;indexes[0]&lt;/c&gt; is equal to 3.">演算に使用されるインデックス。 たとえば、C# の <c>sampleObject[3] = 10</c> (Visual Basic では <c>sampleObject(3) = 10</c>) 演算の場合 (<c>sampleObject</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスから派生)、<c>indexes[0]</c> は 3 に等しくなります。</param>
      <param name="value" vsli:raw="The value to set to the object that has the specified index. For example, for the &lt;c&gt;sampleObject[3] = 10&lt;/c&gt; operation in C# (&lt;c&gt;sampleObject(3) = 10&lt;/c&gt; in Visual Basic), where &lt;c&gt;sampleObject&lt;/c&gt; is derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, &lt;paramref name=&quot;value&quot; /&gt; is equal to 10.">指定したインデックスのオブジェクトに設定する値。 たとえば、C# の <c>sampleObject[3] = 10</c> (Visual Basic では <c>sampleObject(3) = 10</c>) 演算の場合 (<c>sampleObject</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスから派生)、<paramref name="value" /> は 10 に等しくなります。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.">操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります (ほとんどの場合、言語固有の実行時例外がスローされます)。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary vsli:raw="Provides the implementation for operations that set member values. Classes derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class can override this method to specify dynamic behavior for operations such as setting a value for a property.">メンバー値を設定する演算の実装を提供します。 <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、プロパティ値の設定などの演算の動的な動作を指定できます。</summary>
      <param name="binder" vsli:raw="Provides information about the object that called the dynamic operation. The &lt;c&gt;binder.Name&lt;/c&gt; property provides the name of the member to which the value is being assigned. For example, for the statement &lt;c&gt;sampleObject.SampleProperty = &quot;Test&quot;&lt;/c&gt;, where &lt;c&gt;sampleObject&lt;/c&gt; is an instance of the class derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, &lt;c&gt;binder.Name&lt;/c&gt; returns &quot;SampleProperty&quot;. The &lt;c&gt;binder.IgnoreCase&lt;/c&gt; property specifies whether the member name is case-sensitive.">動的演算を呼び出したオブジェクトに関する情報を提供します。 <c>binder.Name</c> プロパティは、値の割り当て先のメンバーの名前を提供します。 たとえば、ステートメント <c>sampleObject.SampleProperty = "Test"</c> の場合 (<c>sampleObject</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスのインスタンス)、<c>binder.Name</c> は "SampleProperty" を返します。 メンバー名で大文字と小文字を区別するかどうかを <c>binder.IgnoreCase</c> プロパティで指定します。</param>
      <param name="value" vsli:raw="The value to set to the member. For example, for &lt;c&gt;sampleObject.SampleProperty = &quot;Test&quot;&lt;/c&gt;, where &lt;c&gt;sampleObject&lt;/c&gt; is an instance of the class derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class, the &lt;paramref name=&quot;value&quot; /&gt; is &quot;Test&quot;.">メンバーに設定する値。 たとえば、<c>sampleObject.SampleProperty = "Test"</c> の場合 (<c>sampleObject</c> は <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスのインスタンス)、<paramref name="value" /> は "Test" となります。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)">操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります (ほとんどの場合、言語固有の実行時例外がスローされます)。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
      <summary vsli:raw="Provides implementation for unary operations. Classes derived from the &lt;see cref=&quot;T:System.Dynamic.DynamicObject&quot; /&gt; class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.">単項演算の実装を提供します。 <see cref="T:System.Dynamic.DynamicObject" /> クラスの派生クラスでこのメソッドをオーバーライドして、否定、インクリメント、デクリメントなどの演算の動的な動作を指定できます。</summary>
      <param name="binder" vsli:raw="Provides information about the unary operation. The &lt;c&gt;binder.Operation&lt;/c&gt; property returns an &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; object. For example, for the &lt;c&gt;negativeNumber = -number&lt;/c&gt; statement, where &lt;c&gt;number&lt;/c&gt; is derived from the &lt;see langword=&quot;DynamicObject&quot; /&gt; class, &lt;c&gt;binder.Operation&lt;/c&gt; returns &quot;Negate&quot;.">単項演算に関する情報を提供します。 <c>binder.Operation</c> プロパティは <see cref="T:System.Linq.Expressions.ExpressionType" /> オブジェクトを返します。 たとえば、<c>negativeNumber = -number</c> ステートメントの場合 (<c>number</c> は <see langword="DynamicObject" /> クラスから派生)、<c>binder.Operation</c> は "Negate" を返します。</param>
      <param name="result" vsli:raw="The result of the unary operation.">単項演算の結果。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If this method returns &lt;see langword=&quot;false&quot; /&gt;, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)">操作が正常に終了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドが <see langword="false" /> を返す場合、言語のランタイム バインダーによって動作が決まります (ほとんどの場合、言語固有の実行時例外がスローされます)。</returns>
    </member>
    <member name="T:System.Dynamic.ExpandoObject">
      <summary vsli:raw="Represents an object whose members can be dynamically added and removed at run time.">実行時にメンバーを動的に追加および削除できるオブジェクトを表します。</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.#ctor">
      <summary vsli:raw="Initializes a new &lt;see langword=&quot;ExpandoObject&quot; /&gt; that does not have members.">メンバーを持たない新しい <see langword="ExpandoObject" /> を初期化します。</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="E:System.Dynamic.ExpandoObject.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary vsli:raw="Occurs when a property value changes.">プロパティ値が変更するときに発生します。</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
      <summary vsli:raw="The provided MetaObject will dispatch to the dynamic virtual methods. The object can be encapsulated inside another MetaObject to provide custom behavior for individual actions.">指定された MetaObject は動的仮想メソッドにディスパッチされます。 このオブジェクトを別の MetaObject の内部にカプセル化することにより、個々のアクションのカスタム動作を指定することができます。</summary>
      <param name="parameter" vsli:raw="The expression that represents the MetaObject to dispatch to the Dynamic virtual methods.">動的仮想メソッドにディスパッチされる MetaObject を表す式。</param>
      <returns vsli:raw="The object of the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; type.">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 型のオブジェクト。</returns>
    </member>
    <member name="T:System.Dynamic.GetIndexBinder">
      <summary vsli:raw="Represents the dynamic get index operation at the call site, providing the binding semantic and the details about the operation.">呼び出しサイトでの動的インデックス取得操作を表し、バインディングのセマンティクスと、操作に関する詳細な情報を提供します。</summary>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.GetIndexBinder&quot; /&gt;.">
        <see cref="T:System.Dynamic.GetIndexBinder" />の新しいインスタンスを初期化します。</summary>
      <param name="callInfo" vsli:raw="The signature of the arguments at the call site.">呼び出しサイトでの引数の署名。</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic get index operation.">動的インデックス取得操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic get index operation.">動的インデックス取得操作のターゲット。</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic get index operation.">動的インデックス取得操作の引数の配列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.CallInfo">
      <summary vsli:raw="Gets the signature of the arguments at the call site.">呼び出しサイトで引数の署名を取得します。</summary>
      <returns vsli:raw="The signature of the arguments at the call site.">呼び出しサイトでの引数の署名。</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic get index operation if the target dynamic object cannot bind.">ターゲットの動的オブジェクトがバインドできない場合に、動的インデックス取得操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic get index operation.">動的インデックス取得操作のターゲット。</param>
      <param name="indexes" vsli:raw="The arguments of the dynamic get index operation.">動的インデックス取得操作の引数。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic get index operation if the target dynamic object cannot bind.">派生クラスでオーバーライドされた場合、ターゲットの動的オブジェクトがバインドできない場合に、動的インデックス取得操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic get index operation.">動的インデックス取得操作のターゲット。</param>
      <param name="indexes" vsli:raw="The arguments of the dynamic get index operation.">動的インデックス取得操作の引数。</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">バインディングに失敗した場合に使用するバインディングの結果または null。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">操作の結果型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">操作の結果型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Dynamic.GetMemberBinder">
      <summary vsli:raw="Represents the dynamic get member operation at the call site, providing the binding semantic and the details about the operation.">呼び出しサイトでの動的メンバー取得操作を表し、バインディングのセマンティクスと、操作に関する詳細な情報を提供します。</summary>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.GetMemberBinder&quot; /&gt;.">
        <see cref="T:System.Dynamic.GetMemberBinder" />の新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="The name of the member to obtain.">取得するメンバーの名前。</param>
      <param name="ignoreCase" vsli:raw="Is true if the name should be matched ignoring case; false otherwise.">名前のマッチングで大文字と小文字の区別を無視する場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic get member operation.">動的メンバー取得操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic get member operation.">動的メンバー取得操作のターゲット。</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic get member operation.">動的メンバー取得操作の引数の配列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic get member operation if the target dynamic object cannot bind.">ターゲットの動的オブジェクトがバインドできない場合に、動的メンバー取得操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic get member operation.">動的メンバー取得操作のターゲット。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic get member operation if the target dynamic object cannot bind.">派生クラスでオーバーライドされた場合、ターゲットの動的オブジェクトがバインドできない場合に、動的メンバー取得操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic get member operation.">動的メンバー取得操作のターゲット。</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">バインディングに失敗した場合に使用するバインディングの結果または null。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.IgnoreCase">
      <summary vsli:raw="Gets the value indicating if the string comparison should ignore the case of the member name.">文字列比較でメンバー名の大文字と小文字を区別するかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if case is ignored; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />case が無視される場合は、それ以外<see langword="false" />の場合は。</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.Name">
      <summary vsli:raw="Gets the name of the member to obtain.">取得するメンバーの名前を取得します。</summary>
      <returns vsli:raw="The name of the member to obtain.">取得するメンバーの名前。</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">操作の結果型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">操作の結果型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Dynamic.IDynamicMetaObjectProvider">
      <summary vsli:raw="Represents a dynamic object, that can have its operations bound at runtime.">実行時に操作をバインドすることのできる動的オブジェクトを表します。</summary>
    </member>
    <member name="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; responsible for binding operations performed on this object.">このオブジェクトに対して実行される操作をバインドする <see cref="T:System.Dynamic.DynamicMetaObject" /> を返します。</summary>
      <param name="parameter" vsli:raw="The expression tree representation of the runtime value.">ランタイム値の式ツリー表現。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; to bind this object.">このオブジェクトをバインドする <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="T:System.Dynamic.IInvokeOnGetBinder">
      <summary vsli:raw="Represents information about a dynamic get member operation that indicates if the get member should invoke properties when they perform the get operation.">プロパティが取得操作を実行するときにメンバー取得がプロパティを呼び出す必要があるかどうかを示す、動的メンバー取得操作についての情報を表します。</summary>
    </member>
    <member name="P:System.Dynamic.IInvokeOnGetBinder.InvokeOnGet">
      <summary vsli:raw="Gets the value indicating if this get member operation should invoke properties when they perform the get operation. The default value when this interface is not present is true.">プロパティが取得操作を実行するときにこのメンバー取得操作がプロパティを呼び出す必要があるかどうかを示す値を取得します。 このインターフェイスがないときの既定値は true です。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this get member operation should invoke properties when they perform the get operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />get 操作を実行するときに、この get メンバー操作がプロパティを呼び出す必要がある場合は。それ以外<see langword="false" />の場合は。</returns>
    </member>
    <member name="T:System.Dynamic.InvokeBinder">
      <summary vsli:raw="Represents the invoke dynamic operation at the call site, providing the binding semantic and the details about the operation.">呼び出しサイトでの動的呼び出し操作を表し、バインディングのセマンティクスと、操作に関する詳細な情報を提供します。</summary>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.#ctor(System.Dynamic.CallInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.InvokeBinder&quot; /&gt;.">
        <see cref="T:System.Dynamic.InvokeBinder" />の新しいインスタンスを初期化します。</summary>
      <param name="callInfo" vsli:raw="The signature of the arguments at the call site.">呼び出しサイトでの引数の署名。</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic invoke operation.">動的呼び出し操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic invoke operation.">動的呼び出し操作のターゲット。</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic invoke operation.">動的呼び出し操作の引数の配列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.CallInfo">
      <summary vsli:raw="Gets the signature of the arguments at the call site.">呼び出しサイトで引数の署名を取得します。</summary>
      <returns vsli:raw="The signature of the arguments at the call site.">呼び出しサイトでの引数の署名。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic invoke operation if the target dynamic object cannot bind.">ターゲットの動的オブジェクトがバインドできない場合に、動的呼び出し操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic invoke operation.">動的呼び出し操作のターゲット。</param>
      <param name="args" vsli:raw="The arguments of the dynamic invoke operation.">動的呼び出し操作の引数。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic invoke operation if the target dynamic object cannot bind.">ターゲットの動的オブジェクトがバインドできない場合に、動的呼び出し操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic invoke operation.">動的呼び出し操作のターゲット。</param>
      <param name="args" vsli:raw="The arguments of the dynamic invoke operation.">動的呼び出し操作の引数。</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">バインディングに失敗した場合に使用するバインディングの結果または null。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">操作の結果型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">操作の結果型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Dynamic.InvokeMemberBinder">
      <summary vsli:raw="Represents the invoke member dynamic operation at the call site, providing the binding semantic and the details about the operation.">呼び出しサイトでの動的メンバー呼び出し操作を表し、バインディングのセマンティクスと、操作に関する詳細な情報を提供します。</summary>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.#ctor(System.String,System.Boolean,System.Dynamic.CallInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.InvokeMemberBinder&quot; /&gt;.">
        <see cref="T:System.Dynamic.InvokeMemberBinder" />の新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="The name of the member to invoke.">呼び出すメンバーの名前。</param>
      <param name="ignoreCase" vsli:raw="true if the name should be matched ignoring case; false otherwise.">名前のマッチングで大文字と小文字の区別を無視する場合は true。それ以外の場合は false。</param>
      <param name="callInfo" vsli:raw="The signature of the arguments at the call site.">呼び出しサイトでの引数の署名。</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic invoke member operation.">動的メンバー呼び出し操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic invoke member operation.">動的メンバー呼び出し操作のターゲット。</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic invoke member operation.">動的メンバー呼び出し操作の引数の配列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.CallInfo">
      <summary vsli:raw="Gets the signature of the arguments at the call site.">呼び出しサイトで引数の署名を取得します。</summary>
      <returns vsli:raw="The signature of the arguments at the call site.">呼び出しサイトでの引数の署名。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic invoke operation if the target dynamic object cannot bind.">派生クラスでオーバーライドされた場合、ターゲットの動的オブジェクトがバインドできない場合に、動的呼び出し操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic invoke operation.">動的呼び出し操作のターゲット。</param>
      <param name="args" vsli:raw="The arguments of the dynamic invoke operation.">動的呼び出し操作の引数。</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">バインディングに失敗した場合に使用するバインディングの結果または null。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic invoke member operation if the target dynamic object cannot bind.">ターゲットの動的オブジェクトがバインドできない場合に、動的メンバー呼び出し操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic invoke member operation.">動的メンバー呼び出し操作のターゲット。</param>
      <param name="args" vsli:raw="The arguments of the dynamic invoke member operation.">動的メンバー呼び出し操作の引数。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic invoke member operation if the target dynamic object cannot bind.">派生クラスでオーバーライドされた場合、ターゲットの動的オブジェクトがバインドできない場合に、動的メンバー呼び出し操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic invoke member operation.">動的メンバー呼び出し操作のターゲット。</param>
      <param name="args" vsli:raw="The arguments of the dynamic invoke member operation.">動的メンバー呼び出し操作の引数。</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">バインディングに失敗した場合に使用するバインディングの結果または null。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.IgnoreCase">
      <summary vsli:raw="Gets the value indicating if the string comparison should ignore the case of the member name.">文字列比較でメンバー名の大文字と小文字を区別するかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if case is ignored; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />case が無視される場合は、それ以外<see langword="false" />の場合は。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.Name">
      <summary vsli:raw="Gets the name of the member to invoke.">呼び出すメンバーの名前を取得します。</summary>
      <returns vsli:raw="The name of the member to invoke.">呼び出すメンバーの名前。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">操作の結果型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">操作の結果型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Dynamic.SetIndexBinder">
      <summary vsli:raw="Represents the dynamic set index operation at the call site, providing the binding semantic and the details about the operation.">呼び出しサイトでの動的インデックス設定操作を表し、バインディングのセマンティクスと、操作に関する詳細な情報を提供します。</summary>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.SetIndexBinder&quot; /&gt;.">
        <see cref="T:System.Dynamic.SetIndexBinder" />の新しいインスタンスを初期化します。</summary>
      <param name="callInfo" vsli:raw="The signature of the arguments at the call site.">呼び出しサイトでの引数の署名。</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic set index operation.">動的インデックス設定操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic set index operation.">動的インデックス設定操作のターゲット。</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic set index operation.">動的インデックス設定操作の引数の配列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.CallInfo">
      <summary vsli:raw="Gets the signature of the arguments at the call site.">呼び出しサイトで引数の署名を取得します。</summary>
      <returns vsli:raw="The signature of the arguments at the call site.">呼び出しサイトでの引数の署名。</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic set index operation if the target dynamic object cannot bind.">ターゲットの動的オブジェクトがバインドできない場合に、動的インデックス設定操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic set index operation.">動的インデックス設定操作のターゲット。</param>
      <param name="indexes" vsli:raw="The arguments of the dynamic set index operation.">動的インデックス設定操作の引数。</param>
      <param name="value" vsli:raw="The value to set to the collection.">コレクションに設定する値。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="When overridden in the derived class, performs the binding of the dynamic set index operation if the target dynamic object cannot bind.">派生クラスでオーバーライドされた場合、ターゲットの動的オブジェクトがバインドできない場合に、動的インデックス設定操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic set index operation.">動的インデックス設定操作のターゲット。</param>
      <param name="indexes" vsli:raw="The arguments of the dynamic set index operation.">動的インデックス設定操作の引数。</param>
      <param name="value" vsli:raw="The value to set to the collection.">コレクションに設定する値。</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">バインディングに失敗した場合に使用するバインディングの結果または null。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">操作の結果型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">操作の結果型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Dynamic.SetMemberBinder">
      <summary vsli:raw="Represents the dynamic set member operation at the call site, providing the binding semantic and the details about the operation.">呼び出しサイトでの動的メンバー設定操作を表しており、バインド セマンティックおよび操作の詳細を提供します。</summary>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.SetMemberBinder&quot; /&gt;.">
        <see cref="T:System.Dynamic.SetMemberBinder" />の新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="The name of the member to obtain.">取得するメンバーの名前。</param>
      <param name="ignoreCase" vsli:raw="Is true if the name should be matched ignoring case; false otherwise.">名前のマッチングで大文字と小文字の区別を無視する場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic set member operation.">動的メンバー設定操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic set member operation.">動的メンバー設定操作のターゲット。</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic set member operation.">動的メンバー設定操作の引数の配列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic set member operation if the target dynamic object cannot bind.">ターゲットの動的オブジェクトがバインドできない場合に、動的メンバー設定操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic set member operation.">動的メンバー設定操作のターゲット。</param>
      <param name="value" vsli:raw="The value to set to the member.">メンバーに設定する値。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the dynamic set member operation if the target dynamic object cannot bind.">ターゲットの動的オブジェクトがバインドできない場合に、動的メンバー設定操作のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic set member operation.">動的メンバー設定操作のターゲット。</param>
      <param name="value" vsli:raw="The value to set to the member.">メンバーに設定する値。</param>
      <param name="errorSuggestion" vsli:raw="The binding result to use if binding fails, or null.">バインドに失敗した場合、またはバインドが null の場合に使用するバインドの結果。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.IgnoreCase">
      <summary vsli:raw="Gets the value indicating if the string comparison should ignore the case of the member name.">文字列比較でメンバー名の大文字と小文字を区別するかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if case is ignored; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />case が無視される場合は、それ以外<see langword="false" />の場合は。</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.Name">
      <summary vsli:raw="Gets the name of the member to obtain.">取得するメンバーの名前を取得します。</summary>
      <returns vsli:raw="The name of the member to obtain.">取得するメンバーの名前。</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">操作の結果型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">操作の結果型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Dynamic.UnaryOperationBinder">
      <summary vsli:raw="Represents the unary dynamic operation at the call site, providing the binding semantic and the details about the operation.">呼び出しサイトでの動的単項演算を表し、バインディングのセマンティクスと、操作に関する詳細な情報を提供します。</summary>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Dynamic.BinaryOperationBinder&quot; /&gt; class.">
        <see cref="T:System.Dynamic.BinaryOperationBinder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="operation" vsli:raw="The unary operation kind.">単項演算の種類。</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary vsli:raw="Performs the binding of the dynamic unary operation.">動的単項演算のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic operation.">動的演算のターゲット。</param>
      <param name="args" vsli:raw="An array of arguments of the dynamic operation.">動的演算の引数の配列。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the unary dynamic operation if the target dynamic object cannot bind.">ターゲットの動的オブジェクトがバインドできない場合に、動的単項演算のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic unary operation.">動的単項演算のターゲット。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary vsli:raw="Performs the binding of the unary dynamic operation if the target dynamic object cannot bind.">ターゲットの動的オブジェクトがバインドできない場合に、動的単項演算のバインディングを実行します。</summary>
      <param name="target" vsli:raw="The target of the dynamic unary operation.">動的単項演算のターゲット。</param>
      <param name="errorSuggestion" vsli:raw="The binding result in case the binding fails, or null.">バインディングに失敗した場合のバインディングの結果または null。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Dynamic.DynamicMetaObject&quot; /&gt; representing the result of the binding.">バインドの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.Operation">
      <summary vsli:raw="The unary operation kind.">単項演算の種類。</summary>
      <returns vsli:raw="The object of the &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents the unary operation kind.">単項演算の種類を表す <see cref="T:System.Linq.Expressions.ExpressionType" /> のオブジェクト。</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.ReturnType">
      <summary vsli:raw="The result type of the operation.">操作の結果型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the result type of the operation.">操作の結果型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Linq.Expressions.BinaryExpression">
      <summary vsli:raw="Represents an expression that has a binary operator.">二項演算子を持つ式を表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">このノード型の特定の Visit メソッドにデスパッチします。 たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">このノードを走査するビジター。</param>
      <returns vsli:raw="The result of visiting this node.">このノードの走査結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.CanReduce">
      <summary vsli:raw="Gets a value that indicates whether the expression tree node can be reduced.">式ツリー ノードを縮小できるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the expression tree node can be reduced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />式ツリーノードを縮小できる場合は。それ以外<see langword="false" />の場合は。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Conversion">
      <summary vsli:raw="Gets the type conversion function that is used by a coalescing or compound assignment operation.">合体演算または複合代入演算で使用される型変換関数を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that represents a type conversion function.">型変換関数を表す <see cref="T:System.Linq.Expressions.LambdaExpression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLifted">
      <summary vsli:raw="Gets a value that indicates whether the expression tree node represents a lifted call to an operator.">式ツリー ノードが、演算子へのリフトされた呼び出しを表すかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node represents a lifted call; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">ノードがリフトされた呼び出しを表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
      <summary vsli:raw="Gets a value that indicates whether the expression tree node represents a lifted call to an operator whose return type is lifted to a nullable type.">式ツリー ノードが、戻り値の型が null 許容型にリフトされた演算子へのリフトされた呼び出しを表すかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operator's return type is lifted to a nullable type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">演算子の戻り値の型が null 許容型にリフトされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Left">
      <summary vsli:raw="Gets the left operand of the binary operation.">二項演算の左オペランドを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the left operand of the binary operation.">二項演算の左オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Method">
      <summary vsli:raw="Gets the implementing method for the binary operation.">二項演算の実装メソッドを取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Reduce">
      <summary vsli:raw="Reduces the binary expression node to a simpler expression.">二項式ノードをより単純な式へと変形します。</summary>
      <returns vsli:raw="The reduced expression.">単純化された式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Right">
      <summary vsli:raw="Gets the right operand of the binary operation.">二項演算の右オペランドを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the right operand of the binary operation.">二項演算の右オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">この式に似た新しい式を作成しますが、指定された子を使用します。 すべての子が同じであれば、この式が返されます。</summary>
      <param name="left" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティ。</param>
      <param name="conversion" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> プロパティ。</param>
      <param name="right" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> プロパティ。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">更新された子を使用した式。子が変更されていない場合はこの式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.BlockExpression">
      <summary vsli:raw="Represents a block that contains a sequence of expressions where variables can be defined.">変数を定義できる式のシーケンスを含んでいるブロックを表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">このノード型の特定の Visit メソッドにデスパッチします。 たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">このノードを走査するビジター。</param>
      <returns vsli:raw="The result of visiting this node.">このノードの走査結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Expressions">
      <summary vsli:raw="Gets the expressions in this block.">このブロック内の式を取得します。</summary>
      <returns vsli:raw="The read-only collection containing all the expressions in this block.">このブロック内のすべての式を格納している読み取り専用コレクション。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.NodeType">
      <summary vsli:raw="Returns the node type of this expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">この式のノード型を返します。 拡張ノードは、このメソッドをオーバーライドする際に <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Result">
      <summary vsli:raw="Gets the last expression in this block.">このブロック内の最後の式を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; object representing the last expression in this block.">このブロックの最後の式を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.BlockExpression.Type&quot; /&gt; that represents the static type of the expression.">式の静的な型を表す <see cref="P:System.Linq.Expressions.BlockExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">この式に似た新しい式を作成しますが、指定された子を使用します。 すべての子が同じであれば、この式が返されます。</summary>
      <param name="variables" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.BlockExpression.Variables&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.BlockExpression.Variables" /> プロパティ。</param>
      <param name="expressions" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.BlockExpression.Expressions&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.BlockExpression.Expressions" /> プロパティ。</param>
      <returns vsli:raw="This expression if no children changed, or an expression with the updated children.">更新された子を使用した式。子が変更されていない場合はこの式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Variables">
      <summary vsli:raw="Gets the variables defined in this block.">このブロックで定義されている変数を取得します。</summary>
      <returns vsli:raw="The read-only collection containing all the variables defined in this block.">このブロックで定義されているすべての変数を格納している読み取り専用コレクション。</returns>
    </member>
    <member name="T:System.Linq.Expressions.CatchBlock">
      <summary vsli:raw="Represents a catch statement in a try block.">try ブロックの catch ステートメントを表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Body">
      <summary vsli:raw="Gets the body of the catch block.">catch ブロックの本体を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; object representing the catch body.">catch 本体を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Filter">
      <summary vsli:raw="Gets the body of the &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; filter.">
        <see cref="T:System.Linq.Expressions.CatchBlock" /> フィルターの本体を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; object representing the body of the &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; filter.">
        <see cref="T:System.Linq.Expressions.Expression" /> フィルターの本体を表す <see cref="T:System.Linq.Expressions.CatchBlock" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Test">
      <summary vsli:raw="Gets the type of &lt;see cref=&quot;T:System.Exception&quot; /&gt; this handler catches.">このハンドラーによってキャッチされる <see cref="T:System.Exception" /> の型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the type of &lt;see cref=&quot;T:System.Exception&quot; /&gt; this handler catches.">このハンドラーによってキャッチされる <see cref="T:System.Type" /> の型を表す <see cref="T:System.Exception" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current &lt;see cref=&quot;T:System.Object&quot; /&gt;.">現在の <see cref="T:System.String" /> を表す <see cref="T:System.Object" /> を返します</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current &lt;see cref=&quot;T:System.Object&quot; /&gt;.">現在の <see cref="T:System.Object" /> を表す <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">この式に似た新しい式を作成しますが、指定された子を使用します。 すべての子が同じであれば、この式が返されます。</summary>
      <param name="variable" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.CatchBlock.Variable&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.CatchBlock.Variable" /> プロパティ。</param>
      <param name="filter" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.CatchBlock.Filter&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.CatchBlock.Filter" /> プロパティ。</param>
      <param name="body" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.CatchBlock.Body&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.CatchBlock.Body" /> プロパティ。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">更新された子を使用した式。子が変更されていない場合はこの式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Variable">
      <summary vsli:raw="Gets a reference to the &lt;see cref=&quot;T:System.Exception&quot; /&gt; object caught by this handler.">このハンドラーによってキャッチされる <see cref="T:System.Exception" /> オブジェクトへの参照を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; object representing a reference to the &lt;see cref=&quot;T:System.Exception&quot; /&gt; object caught by this handler.">このハンドラーによってキャッチされる <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトへの参照を表す <see cref="T:System.Exception" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConditionalExpression">
      <summary vsli:raw="Represents an expression that has a conditional operator.">条件演算子を持つ式を表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">このノード型の特定の Visit メソッドにデスパッチします。 たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">このノードを走査するビジター。</param>
      <returns vsli:raw="The result of visiting this node.">このノードの走査結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
      <summary vsli:raw="Gets the expression to execute if the test evaluates to &lt;see langword=&quot;false&quot; /&gt;.">テストで <see langword="false" /> と評価される場合に実行する式を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the expression to execute if the test is &lt;see langword=&quot;false&quot; /&gt;.">テストが <see langword="false" /> の場合に実行する式を表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
      <summary vsli:raw="Gets the expression to execute if the test evaluates to &lt;see langword=&quot;true&quot; /&gt;.">テストで <see langword="true" /> と評価される場合に実行する式を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the expression to execute if the test is &lt;see langword=&quot;true&quot; /&gt;.">テストが <see langword="true" /> の場合に実行する式を表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.NodeType">
      <summary vsli:raw="Returns the node type of this expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">この式のノード型を返します。 拡張ノードは、このメソッドをオーバーライドする際に <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Test">
      <summary vsli:raw="Gets the test of the conditional operation.">条件演算のテストを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the test of the conditional operation.">条件演算のテストを表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Type&quot; /&gt; that represents the static type of the expression.">式の静的な型を表す <see cref="P:System.Linq.Expressions.ConditionalExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">この式に似た新しい式を作成しますが、指定された子を使用します。 すべての子が同じであれば、この式が返されます。</summary>
      <param name="test" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Test&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> プロパティ。</param>
      <param name="ifTrue" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfTrue&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> プロパティ。</param>
      <param name="ifFalse" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfFalse&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> プロパティ。</param>
      <returns vsli:raw="This expression if no children changed, or an expression with the updated children.">更新された子を使用した式。子が変更されていない場合はこの式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConstantExpression">
      <summary vsli:raw="Represents an expression that has a constant value.">定数値を持つ式を表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">このノード型の特定の Visit メソッドにデスパッチします。 たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">このノードを走査するビジター。</param>
      <returns vsli:raw="The result of visiting this node.">このノードの走査結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.NodeType">
      <summary vsli:raw="Returns the node type of this Expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">この式のノード型を返します。 拡張ノードは、このメソッドをオーバーライドする際に <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ConstantExpression.Type&quot; /&gt; that represents the static type of the expression.">式の静的な型を表す <see cref="P:System.Linq.Expressions.ConstantExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Value">
      <summary vsli:raw="Gets the value of the constant expression.">定数式の値を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; equal to the value of the represented expression.">表された式の値に等しい <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.DebugInfoExpression">
      <summary vsli:raw="Emits or clears a sequence point for debug information. This allows the debugger to highlight the correct source code when debugging.">デバッグ情報のシーケンス ポイントを生成またはクリアします。 これにより、デバッガーはデバッグ時に正しいソース コードを強調表示できます。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">このノード型の特定の Visit メソッドにデスパッチします。 たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">このノードを走査するビジター。</param>
      <returns vsli:raw="The result of visiting this node.">このノードの走査結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Document">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt; that represents the source file.">ソース ファイルを表す <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt; that represents the source file.">ソース ファイルを表す <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
      <summary vsli:raw="Gets the end column of this &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;.">この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の最終列を取得します。</summary>
      <returns vsli:raw="The number of the end column of the code that was used to generate the wrapped expression.">ラップされた式の生成に使用されたコードの最終列の番号。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
      <summary vsli:raw="Gets the end line of this &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;.">この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の最終行を取得します。</summary>
      <returns vsli:raw="The number of the end line of the code that was used to generate the wrapped expression.">ラップされた式の生成に使用されたコードの最終行の番号。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
      <summary vsli:raw="Gets the value to indicate if the &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt; is for clearing a sequence point.">
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> がシーケンス ポイントをクリアするために使用されるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt; is for clearing a sequence point; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />がシーケンスポイントをクリアする場合は。それ以外<see langword="false" />の場合は。 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /></returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
      <summary vsli:raw="Gets the start column of this &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;.">この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の先頭列を取得します。</summary>
      <returns vsli:raw="The number of the start column of the code that was used to generate the wrapped expression.">ラップされた式の生成に使用されたコードの先頭列の番号。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
      <summary vsli:raw="Gets the start line of this &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;.">この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の先頭行を取得します。</summary>
      <returns vsli:raw="The number of the start line of the code that was used to generate the wrapped expression.">ラップされた式の生成に使用されたコードの先頭行の番号。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.DebugInfoExpression.Type&quot; /&gt; that represents the static type of the expression.">式の静的な型を表す <see cref="P:System.Linq.Expressions.DebugInfoExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.DefaultExpression">
      <summary vsli:raw="Represents the default value of a type or an empty expression.">型または空の式の既定値を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.NodeType">
      <summary vsli:raw="Returns the node type of this expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">この式のノード型を返します。 拡張ノードは、このメソッドをオーバーライドする際に <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.DefaultExpression.Type&quot; /&gt; that represents the static type of the expression.">式の静的な型を表す <see cref="P:System.Linq.Expressions.DefaultExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpression">
      <summary vsli:raw="Represents a dynamic operation.">動的操作を表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">このノード型の特定の Visit メソッドにデスパッチします。 たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">このノードを走査するビジター。</param>
      <returns vsli:raw="The result of visiting this node.">このノードの走査結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Arguments">
      <summary vsli:raw="Gets the arguments to the dynamic operation.">動的操作の引数を取得します。</summary>
      <returns vsli:raw="The read-only collections containing the arguments to the dynamic operation.">動的操作の引数を格納する読み取り専用コレクション。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Binder">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;, which determines the run-time behavior of the dynamic site.">動的サイトの実行時の動作を決定する <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;, which determines the run-time behavior of the dynamic site.">動的サイトの実行時の動作を決定する <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.DelegateType">
      <summary vsli:raw="Gets the type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Type" /> によって使用されるデリゲートの型を表す <see cref="T:System.Runtime.CompilerServices.CallSite" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動的操作の実行時バインダー。</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">動的な式の結果の型。</param>
      <param name="arguments" vsli:raw="The arguments to the dynamic operation.">動的操作の引数。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;,  and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動的操作の実行時バインダー。</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">動的な式の結果の型。</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">動的操作の 1 番目の引数。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;,  and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動的操作の実行時バインダー。</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">動的な式の結果の型。</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">動的操作の 1 番目の引数。</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">動的操作の 2 番目の引数。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> と等しい <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />、指定した値に設定された <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> を含む <see cref="T:System.Linq.Expressions.DynamicExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動的操作の実行時バインダー。</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">動的な式の結果の型。</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">動的操作の 1 番目の引数。</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">動的操作の 2 番目の引数。</param>
      <param name="arg2" vsli:raw="The third argument to the dynamic operation.">動的操作の 3 番目の引数。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> と等しい <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />、指定した値に設定された <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> を含む <see cref="T:System.Linq.Expressions.DynamicExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動的操作の実行時バインダー。</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">動的な式の結果の型。</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">動的操作の 1 番目の引数。</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">動的操作の 2 番目の引数。</param>
      <param name="arg2" vsli:raw="The third argument to the dynamic operation.">動的操作の 3 番目の引数。</param>
      <param name="arg3" vsli:raw="The fourth argument to the dynamic operation.">動的操作の 4 番目の引数。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> と等しい <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />、指定した値に設定された <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> を含む <see cref="T:System.Linq.Expressions.DynamicExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動的操作の実行時バインダー。</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">動的な式の結果の型。</param>
      <param name="arguments" vsli:raw="The arguments to the dynamic operation.">動的操作の引数。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> と等しい <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />、指定した値に設定された <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> を含む <see cref="T:System.Linq.Expressions.DynamicExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動的操作の実行時バインダー。</param>
      <param name="arguments" vsli:raw="The arguments to the dynamic operation.">動的操作の引数。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> が <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> に等しく、<see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> が指定した値に設定された、<see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; and one argument.">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動的操作の実行時バインダー。</param>
      <param name="arg0" vsli:raw="The argument to the dynamic operation.">動的操作の引数。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> が <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> に等しく、<see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> が指定した値に設定された、<see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; and two arguments.">指定された <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> および 2 つの引数によってバインドされる動的操作を表す <see cref="T:System.Linq.Expressions.DynamicExpression" /> を作成します。</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動的操作の実行時バインダー。</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">動的操作の 1 番目の引数。</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">動的操作の 2 番目の引数。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> が <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> に等しく、<see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> が指定した値に設定された、<see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; and three arguments.">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> および 3 つの引数によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動的操作の実行時バインダー。</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">動的操作の 1 番目の引数。</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">動的操作の 2 番目の引数。</param>
      <param name="arg2" vsli:raw="The third argument to the dynamic operation.">動的操作の 3 番目の引数。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> が <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> に等しく、<see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> が指定した値に設定された、<see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; and four arguments.">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> および 4 つの引数によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動的操作の実行時バインダー。</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">動的操作の 1 番目の引数。</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">動的操作の 2 番目の引数。</param>
      <param name="arg2" vsli:raw="The third argument to the dynamic operation.">動的操作の 3 番目の引数。</param>
      <param name="arg3" vsli:raw="The fourth argument to the dynamic operation.">動的操作の 4 番目の引数。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> が <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> に等しく、<see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> が指定した値に設定された、<see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動的操作の実行時バインダー。</param>
      <param name="arguments" vsli:raw="The arguments to the dynamic operation.">動的操作の引数。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt;, and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> が <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> に等しく、<see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> が指定した値に設定された、<see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.NodeType">
      <summary vsli:raw="Returns the node type of this expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">この式のノード型を返します。 拡張ノードは、このメソッドをオーバーライドする際に <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary vsli:raw="Returns the number of arguments to the expression tree node. You should not use this member. It is only public due to assembly refactoring, and it is used internally for performance optimizations.">式ツリー ノードに引数の数を返します。 このメンバーを使用しないでください。 これは、アセンブリ リファクタリングのためパブリックのみで、パフォーマンスの最適化のために内部で使用されます。</summary>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <see cref="T:System.Int32" /> を返します。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary vsli:raw="Returns the argument at index, throwing if index is out of bounds. You should not use this member. It is only public due to assembly refactoring, and it is used internally for performance optimizations.">インデックスの引数を返し、インデックスが範囲外にある場合にスローします。 このメンバーを使用しないでください。 これは、アセンブリ リファクタリングのためパブリックのみで、パフォーマンスの最適化のために内部で使用されます。</summary>
      <param name="index" vsli:raw="The index of the argument.">引数のインデックス。</param>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" /> を返します。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#CreateCallSite">
      <summary vsli:raw="Optionally creates the CallSite and returns the CallSite for the DynamicExpression's polymorphic inline cache. You should not use this member. It is only public due to assembly refactoring, and it is used internally for performance optimizations.">必要に応じて、CallSite を作成し、DynamicExpression のポリモーフィック インライン キャッシュの CallSite を返します。 このメンバーを使用しないでください。 これは、アセンブリ リファクタリングのためパブリックのみで、パフォーマンスの最適化のために内部で使用されます。</summary>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Object&quot; /&gt;.">
        <see cref="T:System.Object" /> を返します。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#Rewrite(System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Rewrite this node replacing the dynamic expression's arguments with the provided values. The number of &lt;paramref name=&quot;args&quot; /&gt; needs to match the number of the current expression. You should not use this type. It is only public due to assembly refactoring, and it is used internally for performance optimizations. This helper method allows re-writing of nodes to be independent of the specific implementation class deriving from DynamicExpression that is being used at the call site.">動的な式の引数を指定された値と置き換えて、このノードを書き換えます。 <paramref name="args" /> の数は現在の式の数に一致する必要があります。 この型は使用しないでください。 これは、アセンブリ リファクタリングのためパブリックのみで、パフォーマンスの最適化のために内部で使用されます。 このヘルパー メソッドでは、呼び出しサイトで使用されている DynamicExpression から派生する特定の実装クラスに依存しないように、ノードを書き換えることがでます。</summary>
      <param name="args" vsli:raw="The arguments.">引数。</param>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;, the rewritten expression.">書き換えられた式である、<see cref="T:System.Linq.Expressions.Expression" /> を返します。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Type&quot; /&gt; that represents the static type of the expression.">式の静的な型を表す <see cref="P:System.Linq.Expressions.DynamicExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Compares the value sent to the parameter, &lt;paramref name=&quot;arguments&quot; /&gt;, to the &lt;see langword=&quot;Arguments&quot; /&gt; property of the current instance of &lt;see langword=&quot;DynamicExpression&quot; /&gt;. If the values of the parameter and the property are equal, the current instance is returned. If they are not equal, a new &lt;see langword=&quot;DynamicExpression&quot; /&gt; instance is returned that is identical to the current instance except that the &lt;see langword=&quot;Arguments&quot; /&gt; property is set to the value of parameter &lt;paramref name=&quot;arguments&quot; /&gt;.">パラメーター <paramref name="arguments" /> に送信される値を、<see langword="Arguments" /> の現在のインスタンスの <see langword="DynamicExpression" /> プロパティと比較します。 パラメーターとプロパティの値が等しければ、現在のインスタンスが返されます。 それらが等しくない場合は、新しい <see langword="DynamicExpression" /> インスタンスが返されます。そのインスタンスは現在のインスタンスと同一ですが、<see langword="Arguments" /> プロパティがパラメーター <paramref name="arguments" /> の値に設定されている点が異なります。</summary>
      <param name="arguments" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> プロパティ。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">更新された子を使用した式。子が変更されていない場合はこの式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpressionVisitor">
      <summary vsli:raw="Represents a visitor or rewriter for dynamic expression trees.">動的式ツリーのビジターまたはリライターを表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpressionVisitor&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.DynamicExpressionVisitor" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;, the modified expression, if it or any subexpression is modified; otherwise, returns the original expression.">
        <see cref="T:System.Linq.Expressions.Expression" /> (式またはいずれかの部分式が変更された場合は変更された式、それ以外の場合は元の式) を返します。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ElementInit">
      <summary vsli:raw="Represents an initializer for a single element of an &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; collection.">
        <see cref="T:System.Collections.IEnumerable" /> コレクションの単一要素の初期化子を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.AddMethod">
      <summary vsli:raw="Gets the instance method that is used to add an element to an &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; collection.">
        <see cref="T:System.Collections.IEnumerable" /> コレクションへの要素の追加に使用されるインスタンス メソッドを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents an instance method that adds an element to a collection.">コレクションに要素を追加するインスタンス メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.Arguments">
      <summary vsli:raw="Gets the collection of arguments that are passed to a method that adds an element to an &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; collection.">
        <see cref="T:System.Collections.IEnumerable" /> コレクションに要素を追加するメソッドに渡される引数のコレクションを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects that represent the arguments for a method that adds an element to a collection.">コレクションに要素を追加するメソッドの引数を表す <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> オブジェクトの <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary vsli:raw="Returns the number of arguments to the expression tree node.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.">式ツリー ノードに引数の数を返します。  このメンバーを使用しないでください。  これは、アセンブリ リファクタリングのためパブリックのみで、パフォーマンスの最適化のために内部で使用されます。</summary>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <see cref="T:System.Int32" /> を返します。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary vsli:raw="Returns the argument at index, throwing if index is out of bounds.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.">インデックスの引数を返し、インデックスが範囲外にある場合にスローします。  このメンバーを使用しないでください。  これは、アセンブリ リファクタリングのためパブリックのみで、パフォーマンスの最適化のために内部で使用されます。</summary>
      <param name="index" vsli:raw="The index of the argument.">引数のインデックス。</param>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" /> を返します。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.ToString">
      <summary vsli:raw="Returns a textual representation of an &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; object.">
        <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトのテキスト表現を返します。</summary>
      <returns vsli:raw="A textual representation of the &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; object.">
        <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトのテキスト表現。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">この式に似た新しい式を作成しますが、指定された子を使用します。 すべての子が同じであれば、この式が返されます。</summary>
      <param name="arguments" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ElementInit.Arguments&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> プロパティ。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">更新された子を使用した式。子が変更されていない場合はこの式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.Expression">
      <summary vsli:raw="Provides the base class from which the classes that represent expression tree nodes are derived. It also contains &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) factory methods to create the various node types. This is an &lt;see langword=&quot;abstract&quot; /&gt; class.">式ツリー ノードを表すクラスの派生元の基底クラスを提供します。 さまざまなノード型を作成する <see langword="static" /> (Visual Basic では <see langword="Shared" />) ファクトリ メソッドも含まれています。 これは <see langword="abstract" /> クラスです。</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor">
      <summary vsli:raw="Constructs a new instance of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" /> の新しいインスタンスを作成します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; class.">
        <see cref="T:System.Linq.Expressions.Expression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="nodeType" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; to set as the node type.">ノード型として設定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">この <see cref="P:System.Linq.Expressions.Expression.Type" /> の <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">このノード型の特定の Visit メソッドにデスパッチします。 たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">このノードを走査するビジター。</param>
      <returns vsli:raw="The result of visiting this node.">このノードの走査結果。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic addition operation that does not have overflow checking.">オーバーフロー チェックを行わない算術加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Add&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The addition operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">加算演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic addition operation that does not have overflow checking. The implementing method can be specified.">オーバーフロー チェックを行わない算術加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。 実装メソッドを指定できます。</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Add&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Add" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the addition operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には加算演算子が定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an addition assignment operation that does not have overflow checking.">オーバーフロー チェックを行わない加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AddAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an addition assignment operation that does not have overflow checking.">オーバーフロー チェックを行わない加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AddAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an addition assignment operation that does not have overflow checking.">オーバーフロー チェックを行わない加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AddAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an addition assignment operation that has overflow checking.">オーバーフロー チェックを行う加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AddAssignChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an addition assignment operation that has overflow checking.">オーバーフロー チェックを行う加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AddAssignChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an addition assignment operation that has overflow checking.">オーバーフロー チェックを行う加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AddAssignChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic addition operation that has overflow checking.">オーバーフロー チェックを行う算術加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AddChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The addition operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">加算演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic addition operation that has overflow checking. The implementing method can be specified.">オーバーフロー チェックを行う算術加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。 実装メソッドを指定できます。</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AddChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the addition operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> は <see langword="null" /> で、 <paramref name="left" />.Type および <paramref name="right" />.Type には加算演算子が定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise &lt;see langword=&quot;AND&quot; /&gt; operation.">ビットごとの <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す <see langword="AND" /> を作成します。</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.And&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.And" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The bitwise &lt;see langword=&quot;AND&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">ビットごとの <see langword="AND" /> 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise &lt;see langword=&quot;AND&quot; /&gt; operation. The implementing method can be specified.">ビットごとの <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す <see langword="AND" /> を作成します。 実装メソッドを指定できます。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.And&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.And" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the bitwise &lt;see langword=&quot;AND&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type にはビット処理 <see langword="AND" /> 演算子が定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a conditional &lt;see langword=&quot;AND&quot; /&gt; operation that evaluates the second operand only if the first operand evaluates to &lt;see langword=&quot;true&quot; /&gt;.">1 番目のオペランドが <see cref="T:System.Linq.Expressions.BinaryExpression" /> に評価された場合にのみ 2 番目のオペランドを評価する条件付き <see langword="AND" /> 演算を表す <see langword="true" /> を作成します。</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AndAlso&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The bitwise &lt;see langword=&quot;AND&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type are not the same Boolean type.">ビットごとの <see langword="AND" /> 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。  

または - 
<paramref name="left" />.Type と <paramref name="right" />.Type は同じブール型ではありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a conditional &lt;see langword=&quot;AND&quot; /&gt; operation that evaluates the second operand only if the first operand is resolved to true. The implementing method can be specified.">1 番目のオペランドが true に解決された場合にのみ 2 番目のオペランドを評価する条件付き <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す <see langword="AND" /> を作成します。 実装メソッドを指定できます。</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AndAlso&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the bitwise &lt;see langword=&quot;AND&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type are not the same Boolean type.">
        <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type にはビット処理 <see langword="AND" /> 演算子が定義されていません。  

または - 
<paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type と <paramref name="right" />.Type は同じブール型ではありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise AND assignment operation.">ビットごとの AND 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AndAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise AND assignment operation.">ビットごとの AND 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AndAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise AND assignment operation.">ビットごとの AND 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.AndAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt; to access a multidimensional array.">多次元配列にアクセスするための <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</summary>
      <param name="array" vsli:raw="An expression that represents the multidimensional array.">多次元配列を表す式。</param>
      <param name="indexes" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; containing expressions used to index the array.">配列のインデックス化に使用する式を格納している <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt; to access an array.">配列にアクセスするための <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</summary>
      <param name="array" vsli:raw="An expression representing the array to index.">インデックス化する配列を表す式。</param>
      <param name="indexes" vsli:raw="An array that contains expressions used to index the array.">配列のインデックス化に使用する式を格納している配列。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents applying an array index operator to an array of rank more than one.">ランクが 1 より大きい配列への配列の添字演算子の適用を表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <param name="array" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />。</param>
      <param name="indexes" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; or &lt;paramref name=&quot;indexes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> または <paramref name="indexes" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt;.Type does not represent an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; The rank of &lt;paramref name=&quot;array&quot; /&gt;.Type does not match the number of elements in &lt;paramref name=&quot;indexes&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of one or more elements of &lt;paramref name=&quot;indexes&quot; /&gt; does not represent the &lt;see cref=&quot;T:System.Int32&quot; /&gt; type.">
        <paramref name="array" />.Type は配列型を表しません。  

または - 
<paramref name="array" />.Type のランクは、<paramref name="indexes" /> の要素の数と一致しません。  

または - 
<paramref name="indexes" /> の 1 つ以上の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<see cref="T:System.Int32" /> 型を表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents applying an array index operator to an array of rank one.">ランク 1 の配列への配列の添字演算子の適用を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="array" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="index" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ArrayIndex&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; or &lt;paramref name=&quot;index&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> または <paramref name="index" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt;.Type does not represent an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt;.Type represents an array type whose rank is not 1.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt;.Type does not represent the &lt;see cref=&quot;T:System.Int32&quot; /&gt; type.">
        <paramref name="array" />.Type は配列型を表しません。  

または - 
<paramref name="array" />.Type は、ランクが 1 ではない配列型を表します。  

または 
 <paramref name="index" />.Type は、<see cref="T:System.Int32" /> 型を表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents applying an array index operator to a multidimensional array.">多次元配列への配列の添字演算子の適用を表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <param name="array" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; instances - indexes for the array index operation.">
        <see cref="T:System.Linq.Expressions.Expression" /> のインスタンスの配列 (配列のインデックス操作のインデックス)。</param>
      <param name="indexes" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> オブジェクトの配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; or &lt;paramref name=&quot;indexes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> または <paramref name="indexes" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt;.Type does not represent an array type.  &#xA;  &#xA; -or-  &#xA;  &#xA; The rank of &lt;paramref name=&quot;array&quot; /&gt;.Type does not match the number of elements in &lt;paramref name=&quot;indexes&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of one or more elements of &lt;paramref name=&quot;indexes&quot; /&gt; does not represent the &lt;see cref=&quot;T:System.Int32&quot; /&gt; type.">
        <paramref name="array" />.Type は配列型を表しません。  

または - 
<paramref name="array" />.Type のランクは、<paramref name="indexes" /> の要素の数と一致しません。  

または - 
<paramref name="indexes" /> の 1 つ以上の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<see cref="T:System.Int32" /> 型を表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents an expression for obtaining the length of a one-dimensional array.">1 次元配列の長さを取得する式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <param name="array" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ArrayLength&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to &lt;paramref name=&quot;array&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /> と等しい <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <paramref name="array" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt;.Type does not represent an array type.">
        <paramref name="array" />.Type は配列型を表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an assignment operation.">代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Assign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Assign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberAssignment&quot; /&gt; that represents the initialization of a field or property.">フィールドまたはプロパティの初期化を表す <see cref="T:System.Linq.Expressions.MemberAssignment" /> を作成します。</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MemberInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</param>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberAssignment.Expression&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberAssignment&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.Assignment&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MemberAssignment.Expression&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberAssignment" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; or &lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="member" /> または <paramref name="expression" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; does not represent a field or property.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property represented by &lt;paramref name=&quot;member&quot; /&gt; does not have a &lt;see langword=&quot;set&quot; /&gt; accessor.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type is not assignable to the type of the field or property that &lt;paramref name=&quot;member&quot; /&gt; represents.">
        <paramref name="member" /> は、フィールドまたはプロパティを表しません。  
または 
<paramref name="member" /> によって表されるプロパティに <see langword="set" /> アクセサーが含まれません。  
または 
 <paramref name="expression" />.Type は、<paramref name="member" /> を表すフィールドまたはプロパティの型に割り当てることができません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberAssignment&quot; /&gt; that represents the initialization of a member by using a property accessor method.">プロパティ アクセサー メソッドを使用したメンバーの初期化を表す <see cref="T:System.Linq.Expressions.MemberAssignment" /> を作成します。</summary>
      <param name="propertyAccessor" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents a property accessor method.">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberAssignment.Expression&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberAssignment&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.Assignment&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; that represents the property accessed in &lt;paramref name=&quot;propertyAccessor&quot; /&gt;, and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberAssignment.Expression&quot; /&gt; property set to &lt;paramref name=&quot;expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberAssignment" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> に設定された <see cref="T:System.Reflection.PropertyInfo" /> プロパティ、<paramref name="propertyAccessor" /> に設定された <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> を含む <paramref name="expression" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; or &lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyAccessor" /> または <paramref name="expression" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; does not represent a property accessor method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property accessed by &lt;paramref name=&quot;propertyAccessor&quot; /&gt; does not have a &lt;see langword=&quot;set&quot; /&gt; accessor.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type is not assignable to the type of the field or property that &lt;paramref name=&quot;member&quot; /&gt; represents.">
        <paramref name="propertyAccessor" /> はプロパティ アクセサー メソッドを表していません。  

または - 
<paramref name="propertyAccessor" /> によってアクセスされるプロパティは <see langword="set" /> アクセサーを持っていません。  

または - 
<paramref name="expression" />.Type は、<paramref name="member" /> を表すフィールドまたはプロパティの型に割り当てることができません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains the given expressions and has no variables.">指定された式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <param name="expressions" vsli:raw="The expressions in the block.">ブロック内の式。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains the given variables and expressions.">指定された変数および式を含む <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <param name="variables" vsli:raw="The variables in the block.">ブロック内の変数。</param>
      <param name="expressions" vsli:raw="The expressions in the block.">ブロック内の式。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains the given variables and expressions.">指定された変数および式を含む <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <param name="variables" vsli:raw="The variables in the block.">ブロック内の変数。</param>
      <param name="expressions" vsli:raw="The expressions in the block.">ブロック内の式。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains two expressions and has no variables.">2 つの式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <param name="arg0" vsli:raw="The first expression in the block.">ブロック内の 1 つ目の式。</param>
      <param name="arg1" vsli:raw="The second expression in the block.">ブロック内の 2 つ目の式。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains three expressions and has no variables.">3 つの式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <param name="arg0" vsli:raw="The first expression in the block.">ブロック内の 1 つ目の式。</param>
      <param name="arg1" vsli:raw="The second expression in the block.">ブロック内の 2 つ目の式。</param>
      <param name="arg2" vsli:raw="The third expression in the block.">ブロック内の 3 つ目の式。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains four expressions and has no variables.">4 つの式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <param name="arg0" vsli:raw="The first expression in the block.">ブロック内の 1 つ目の式。</param>
      <param name="arg1" vsli:raw="The second expression in the block.">ブロック内の 2 つ目の式。</param>
      <param name="arg2" vsli:raw="The third expression in the block.">ブロック内の 3 つ目の式。</param>
      <param name="arg3" vsli:raw="The fourth expression in the block.">ブロック内の 4 つ目の式。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains five expressions and has no variables.">5 つの式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <param name="arg0" vsli:raw="The first expression in the block.">ブロック内の 1 つ目の式。</param>
      <param name="arg1" vsli:raw="The second expression in the block.">ブロック内の 2 つ目の式。</param>
      <param name="arg2" vsli:raw="The third expression in the block.">ブロック内の 3 つ目の式。</param>
      <param name="arg3" vsli:raw="The fourth expression in the block.">ブロック内の 4 つ目の式。</param>
      <param name="arg4" vsli:raw="The fifth expression in the block.">ブロック内の 5 つ目の式。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains the given expressions and has no variables.">指定された式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <param name="expressions" vsli:raw="The expressions in the block.">ブロック内の式。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains the given expressions, has no variables and has specific result type.">指定された式を含み、変数を含まず、特定の結果の型を持つ <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <param name="type" vsli:raw="The result type of the block.">ブロックの結果の型。</param>
      <param name="expressions" vsli:raw="The expressions in the block.">ブロック内の式。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains the given variables and expressions.">指定された変数および式を含む <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <param name="type" vsli:raw="The result type of the block.">ブロックの結果の型。</param>
      <param name="variables" vsli:raw="The variables in the block.">ブロック内の変数。</param>
      <param name="expressions" vsli:raw="The expressions in the block.">ブロック内の式。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains the given variables and expressions.">指定された変数および式を含む <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <param name="type" vsli:raw="The result type of the block.">ブロックの結果の型。</param>
      <param name="variables" vsli:raw="The variables in the block.">ブロック内の変数。</param>
      <param name="expressions" vsli:raw="The expressions in the block.">ブロック内の式。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt; that contains the given expressions, has no variables and has specific result type.">指定された式を含み、変数を含まず、特定の結果の型を持つ <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</summary>
      <param name="type" vsli:raw="The result type of the block.">ブロックの結果の型。</param>
      <param name="expressions" vsli:raw="The expressions in the block.">ブロック内の式。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a break statement.">break ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Break, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, and a null value to be passed to the target label upon jumping.">Break と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="target" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a break statement. The value passed to the label upon jumping can be specified.">break ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。 ジャンプ時にラベルに渡す値を指定できます。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value" vsli:raw="The value that will be passed to the associated label upon jumping.">ジャンプ時に関連付けられているラベルに渡される値。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Break, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; to be passed to the target label upon jumping.">Break と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="target" /> を含む <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a break statement with the specified type. The value passed to the label upon jumping can be specified.">型を指定して、break ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。 ジャンプ時にラベルに渡す値を指定できます。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value" vsli:raw="The value that will be passed to the associated label upon jumping.">ジャンプ時に関連付けられているラベルに渡される値。</param>
      <param name="type" vsli:raw="An &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Break, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to &lt;paramref name=&quot;type&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; to be passed to the target label upon jumping.">Break と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="type" /> を含む <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a break statement with the specified type.">型を指定して、break ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="type" vsli:raw="An &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Break, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, and the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to &lt;paramref name=&quot;type&quot; /&gt;.">Break と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、および <paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを含む <paramref name="type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a method that takes no arguments.">引数を受け取らないメソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <param name="instance" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that specifies the instance for an instance method call (pass &lt;see langword=&quot;null&quot; /&gt; for a &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) method).">インスタンス メソッドの呼び出しのインスタンスを指定する <see cref="T:System.Linq.Expressions.Expression" />。<see langword="null" /> (Visual Basic では <see langword="static" />) メソッドに <see langword="Shared" /> を渡します。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;method&quot; /&gt; represents an instance method.">
        <paramref name="method" /> が <see langword="null" /> です。  

または - 
<paramref name="instance" /> は <see langword="null" /> で、 <paramref name="method" /> はインスタンス メソッドを表します。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt;.Type is not assignable to the declaring type of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="instance" />.Type は、<paramref name="method" /> の表すメソッドの宣言型に割り当てることができません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a method that takes arguments.">引数を受け取るメソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <param name="instance" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; property equal to (pass &lt;see langword=&quot;null&quot; /&gt; for a &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) method).">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> (<see langword="null" /> (Visual Basic では <see langword="static" />) メソッドに <see langword="Shared" /> を渡します)。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />、および <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;method&quot; /&gt; represents an instance method.">
        <paramref name="method" /> が <see langword="null" /> です。  

または - 
<paramref name="instance" /> は <see langword="null" /> で、 <paramref name="method" /> はインスタンス メソッドを表します。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt;.Type is not assignable to the declaring type of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in &lt;paramref name=&quot;arguments&quot; /&gt; does not equal the number of parameters for the method represented by &lt;paramref name=&quot;method&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more of the elements of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the corresponding parameter for the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="instance" />.Type は、<paramref name="method" /> の表すメソッドの宣言型に割り当てることができません。  

または - 
<paramref name="arguments" /> の要素の数が、<paramref name="method" /> の表すメソッドのパラメーターの数と一致しません。  

または - 
<paramref name="arguments" /> の 1 つ以上の要素が、<paramref name="method" /> の表すメソッドの対応するパラメーターに割り当てることができません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a method that takes two arguments.">2 つの引数を受け取るメソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <param name="instance" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).">インスタンス呼び出しのインスタンスを指定する <see cref="T:System.Linq.Expressions.Expression" />。 static (Visual Basic では Shared) メソッドの場合は null を渡します。</param>
      <param name="method" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the target method.">呼び出し先のメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the first argument.">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the second argument.">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a method that takes three arguments.">3 つの引数を受け取るメソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <param name="instance" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).">インスタンス呼び出しのインスタンスを指定する <see cref="T:System.Linq.Expressions.Expression" />。 static (Visual Basic では Shared) メソッドの場合は null を渡します。</param>
      <param name="method" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the target method.">呼び出し先のメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the first argument.">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the second argument.">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the third argument.">3 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a method that takes arguments.">引数を受け取るメソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <param name="instance" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that specifies the instance for an instance method call (pass &lt;see langword=&quot;null&quot; /&gt; for a &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) method).">インスタンス メソッドの呼び出しのインスタンスを指定する <see cref="T:System.Linq.Expressions.Expression" />。<see langword="null" /> (Visual Basic では <see langword="static" />) メソッドに <see langword="Shared" /> を渡します。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> オブジェクトの配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />、および <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;method&quot; /&gt; represents an instance method.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;arguments&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and one or more of its elements is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="method" /> は <see langword="null" />です。  

または - 
<paramref name="instance" /> は <see langword="null" /> で、<paramref name="method" /> はインスタンス メソッドを表します。  

または - 
<paramref name="arguments" /> は <see langword="null" /> ではなく、その要素の 1 つ以上が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt;.Type is not assignable to the declaring type of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in &lt;paramref name=&quot;arguments&quot; /&gt; does not equal the number of parameters for the method represented by &lt;paramref name=&quot;method&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more of the elements of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the corresponding parameter for the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="instance" />.Type は、<paramref name="method" /> の表すメソッドの宣言型に割り当てることができません。  

または - 
<paramref name="arguments" /> の要素の数が、<paramref name="method" /> の表すメソッドのパラメーターの数と一致しません。  

または - 
<paramref name="arguments" /> の 1 つ以上の要素が、<paramref name="method" /> の表すメソッドの対応するパラメーターに割り当てることができません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a method by calling the appropriate factory method.">適切なファクトリ メソッドを呼び出すことにより、インスタンス メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <param name="instance" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; whose &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property value will be searched for a specific method.">特定のメソッドの <see cref="T:System.Linq.Expressions.Expression" /> プロパティ値が検索される <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="methodName" vsli:raw="The name of the method.">メソッドの名前。</param>
      <param name="typeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.">ジェネリック メソッドの型パラメーターを指定する <see cref="T:System.Type" /> オブジェクトの配列。 methodName が非ジェネリック メソッドを指定する場合、この引数は null にします。</param>
      <param name="arguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects that represents the arguments to the method.">メソッドへの引数を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; property equal to &lt;paramref name=&quot;instance&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; set to the &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the specified instance method, and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; set to the specified arguments.">
        <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<paramref name="instance" /> と等しい <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティ、指定したインスタンス メソッドを表す <see cref="T:System.Reflection.MethodInfo" /> に設定された <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />、および指定した引数に設定された <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> を含む <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; or &lt;paramref name=&quot;methodName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> または <paramref name="methodName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No method whose name is &lt;paramref name=&quot;methodName&quot; /&gt;, whose type parameters match &lt;paramref name=&quot;typeArguments&quot; /&gt;, and whose parameter types match &lt;paramref name=&quot;arguments&quot; /&gt; is found in &lt;paramref name=&quot;instance&quot; /&gt;.Type or its base types.  &#xA;  &#xA; -or-  &#xA;  &#xA; More than one method whose name is &lt;paramref name=&quot;methodName&quot; /&gt;, whose type parameters match &lt;paramref name=&quot;typeArguments&quot; /&gt;, and whose parameter types match &lt;paramref name=&quot;arguments&quot; /&gt; is found in &lt;paramref name=&quot;instance&quot; /&gt;.Type or its base types.">名前が <paramref name="methodName" /> で、型パラメーターが <paramref name="typeArguments" /> と一致し、パラメーターの型が <paramref name="arguments" /> と一致するメソッドが、<paramref name="instance" />.Type またはその基本型で見つかりません。  

または - 
名前が <paramref name="methodName" /> で、型パラメーターが <paramref name="typeArguments" /> と一致し、パラメーターの型が <paramref name="arguments" /> と一致する複数のメソッドが、<paramref name="instance" />.Type またはその基本型で見つかりました。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a static (Shared in Visual Basic) method.">static (Visual Basic では Shared) メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <param name="method" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the target method.">呼び出し先のメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arguments" vsli:raw="A collection of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the call arguments.">呼び出しの引数を表す <see cref="T:System.Linq.Expressions.Expression" /> のコレクション。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) method that takes one argument.">1 つの引数を受け取る <see cref="T:System.Linq.Expressions.MethodCallExpression" /> (Visual Basic では <see langword="static" />) メソッドへの呼び出しを表す <see langword="Shared" /> を作成します。</summary>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the first argument.">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is null.">
        <paramref name="method" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a static method that takes two arguments.">2 つの引数を受け取る静的メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the first argument.">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the second argument.">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is null.">
        <paramref name="method" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a static method that takes three arguments.">3 つの引数を受け取る静的メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the first argument.">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the second argument.">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the third argument.">3 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is null.">
        <paramref name="method" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a static method that takes four arguments.">4 つの引数を受け取る静的メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the first argument.">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the second argument.">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the third argument.">3 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg3" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the fourth argument.">4 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is null.">
        <paramref name="method" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a static method that takes five arguments.">5 つの引数を受け取る静的メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the first argument.">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the second argument.">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the third argument.">3 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg3" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the fourth argument.">4 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg4" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the fifth argument.">5 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is null.">
        <paramref name="method" /> が null です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) method that has arguments.">引数を持つ <see langword="static" /> (Visual Basic では <see langword="Shared" />) メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</summary>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents a &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) method to set the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see langword="static" /> (Visual Basic では <see langword="Shared" />) メソッドを表す <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> オブジェクトの配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="method" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in &lt;paramref name=&quot;arguments&quot; /&gt; does not equal the number of parameters for the method represented by &lt;paramref name=&quot;method&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more of the elements of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the corresponding parameter for the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="arguments" /> の要素の数が、<paramref name="method" /> の表すメソッドのパラメーターの数と一致しません。  
または 
<paramref name="arguments" /> の 1 つ以上の要素が、<paramref name="method" /> の表すメソッドの対応するパラメーターに割り当てることができません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that represents a call to a &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) method by calling the appropriate factory method.">適切なファクトリ メソッドを呼び出すことにより、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> (Visual Basic では <see langword="static" />) メソッドへの呼び出しを表す <see langword="Shared" /> を作成します。</summary>
      <param name="type" vsli:raw="The type that contains the specified &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) method.">指定した <see langword="static" /> (Visual Basic では <see langword="Shared" />) メソッドが格納された型です。</param>
      <param name="methodName" vsli:raw="The name of the method.">メソッドの名前。</param>
      <param name="typeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.">ジェネリック メソッドの型パラメーターを指定する <see cref="T:System.Type" /> オブジェクトの配列。 methodName が非ジェネリック メソッドを指定する場合、この引数は null にします。</param>
      <param name="arguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects that represent the arguments to the method.">メソッドへの引数を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Call&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Method&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the specified &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) method, and the &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; property set to the specified arguments.">
        <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、指定した <see langword="static" /> (Visual Basic では <see langword="Shared" />) メソッドを表す <see cref="T:System.Reflection.MethodInfo" /> に設定された <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> プロパティ、および指定した引数に設定された <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> プロパティを含む <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;methodName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> または <paramref name="methodName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No method whose name is &lt;paramref name=&quot;methodName&quot; /&gt;, whose type parameters match &lt;paramref name=&quot;typeArguments&quot; /&gt;, and whose parameter types match &lt;paramref name=&quot;arguments&quot; /&gt; is found in &lt;paramref name=&quot;type&quot; /&gt; or its base types.  &#xA;  &#xA; -or-  &#xA;  &#xA; More than one method whose name is &lt;paramref name=&quot;methodName&quot; /&gt;, whose type parameters match &lt;paramref name=&quot;typeArguments&quot; /&gt;, and whose parameter types match &lt;paramref name=&quot;arguments&quot; /&gt; is found in &lt;paramref name=&quot;type&quot; /&gt; or its base types.">名前が <paramref name="methodName" /> で、型パラメーターが <paramref name="typeArguments" /> と一致し、パラメーターの型が <paramref name="arguments" /> と一致するメソッドが、<paramref name="type" /> またはその基本型で見つかりません。  

または - 
名前が <paramref name="methodName" /> で、型パラメーターが <paramref name="typeArguments" /> と一致し、パラメーターの型が <paramref name="arguments" /> と一致する複数のメソッドが、<paramref name="type" /> またはその基本型で見つかりました。</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.CanReduce">
      <summary vsli:raw="Indicates that the node can be reduced to a simpler node. If this returns true, Reduce() can be called to produce the reduced form.">ノードをより単純なノードに変形できることを示します。 これが true を返す場合、Reduce() を呼び出して単純化された形式を生成できます。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node can be reduced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />ノードを減らすことができる場合は。それ以外<see langword="false" />の場合は。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; representing a catch statement with a reference to the caught &lt;see cref=&quot;T:System.Exception&quot; /&gt; object for use in the handler body.">ハンドラー本体で使用する、キャッチされた <see cref="T:System.Linq.Expressions.CatchBlock" /> オブジェクトへの参照を指定して、catch ステートメントを表す <see cref="T:System.Exception" /> を作成します。</summary>
      <param name="variable" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; representing a reference to the &lt;see cref=&quot;T:System.Exception&quot; /&gt; object caught by this handler.">このハンドラーによってキャッチされる <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトへの参照を表す <see cref="T:System.Exception" />。</param>
      <param name="body" vsli:raw="The body of the catch statement.">catch ステートメントの本体。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; representing a catch statement with an &lt;see cref=&quot;T:System.Exception&quot; /&gt; filter and a reference to the caught &lt;see cref=&quot;T:System.Exception&quot; /&gt; object.">
        <see cref="T:System.Linq.Expressions.CatchBlock" /> フィルターおよびキャッチされた <see cref="T:System.Exception" /> オブジェクトへの参照を指定して、catch ステートメントを表す <see cref="T:System.Exception" /> を作成します。</summary>
      <param name="variable" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; representing a reference to the &lt;see cref=&quot;T:System.Exception&quot; /&gt; object caught by this handler.">このハンドラーによってキャッチされる <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトへの参照を表す <see cref="T:System.Exception" />。</param>
      <param name="body" vsli:raw="The body of the catch statement.">catch ステートメントの本体。</param>
      <param name="filter" vsli:raw="The body of the &lt;see cref=&quot;T:System.Exception&quot; /&gt; filter.">
        <see cref="T:System.Exception" /> フィルターの本体。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; representing a catch statement.">catch ステートメントを表す <see cref="T:System.Linq.Expressions.CatchBlock" /> を作成します。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; of &lt;see cref=&quot;T:System.Exception&quot; /&gt; this &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; will handle.">この <see cref="P:System.Linq.Expressions.Expression.Type" /> によって処理される <see cref="T:System.Exception" /> の <see cref="T:System.Linq.Expressions.CatchBlock" />。</param>
      <param name="body" vsli:raw="The body of the catch statement.">catch ステートメントの本体。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; representing a catch statement with an &lt;see cref=&quot;T:System.Exception&quot; /&gt; filter but no reference to the caught &lt;see cref=&quot;T:System.Exception&quot; /&gt; object.">キャッチされた <see cref="T:System.Linq.Expressions.CatchBlock" /> オブジェクトへの参照は指定せずに、<see cref="T:System.Exception" /> フィルターを指定して、catch ステートメントを表す <see cref="T:System.Exception" /> を作成します。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; of &lt;see cref=&quot;T:System.Exception&quot; /&gt; this &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; will handle.">この <see cref="P:System.Linq.Expressions.Expression.Type" /> によって処理される <see cref="T:System.Exception" /> の <see cref="T:System.Linq.Expressions.CatchBlock" />。</param>
      <param name="body" vsli:raw="The body of the catch statement.">catch ステートメントの本体。</param>
      <param name="filter" vsli:raw="The body of the &lt;see cref=&quot;T:System.Exception&quot; /&gt; filter.">
        <see cref="T:System.Exception" /> フィルターの本体。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt; for clearing a sequence point.">シーケンス ポイントをクリアするための <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> を作成します。</summary>
      <param name="document" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt; that represents the source file.">ソース ファイルを表す <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt; for clearing a sequence point.">シーケンス ポイントをクリアするための <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> のインスタンス。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a coalescing operation.">合体演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Coalesce&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of &lt;paramref name=&quot;left&quot; /&gt; does not represent a reference type or a nullable value type.">
        <paramref name="left" /> の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、参照型または null 許容値型を表しません。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type are not convertible to each other.">
        <paramref name="left" />.Type と <paramref name="right" />.Type は、互いに変換できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a coalescing operation, given a conversion function.">変換関数を指定して合体演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Coalesce&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type are not convertible to each other.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;conversion&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;conversion&quot; /&gt;.Type is a delegate type that does not take exactly one argument.">
        <paramref name="left" />.Type と <paramref name="right" />.Type は、互いに変換できません。  

または - 
<paramref name="conversion" /> は <see langword="null" /> ではなく、<paramref name="conversion" />.Type は受け取る引数が 1 つだけではないデリゲート型です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of &lt;paramref name=&quot;left&quot; /&gt; does not represent a reference type or a nullable value type.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of &lt;paramref name=&quot;left&quot; /&gt; represents a type that is not assignable to the parameter type of the delegate type &lt;paramref name=&quot;conversion&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of &lt;paramref name=&quot;right&quot; /&gt; is not equal to the return type of the delegate type &lt;paramref name=&quot;conversion&quot; /&gt;.Type.">
        <paramref name="left" /> の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、参照型または null 許容値型を表しません。  

または - 
<paramref name="left" /> の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="conversion" />.Type デリゲート型のパラメーター型に代入できない型を表します。  

または - 
<paramref name="right" /> の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="conversion" />.Type デリゲート型の戻り値の型と等しくありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; that represents a conditional statement.">条件付きステートメントを表す <see cref="T:System.Linq.Expressions.ConditionalExpression" /> を作成します。</summary>
      <param name="test" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Test&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</param>
      <param name="ifTrue" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfTrue&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</param>
      <param name="ifFalse" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfFalse&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Conditional&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Test&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfTrue&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfFalse&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、および <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;test&quot; /&gt; or &lt;paramref name=&quot;ifTrue&quot; /&gt; or &lt;paramref name=&quot;ifFalse&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="test" />、<paramref name="ifTrue" />、または <paramref name="ifFalse" /> は、<see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;test&quot; /&gt;.Type is not &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;ifTrue&quot; /&gt;.Type is not equal to &lt;paramref name=&quot;ifFalse&quot; /&gt;.Type.">
        <paramref name="test" />.Type が <see cref="T:System.Boolean" /> ではありません。  
または 
 <paramref name="ifTrue" />.Type が、<paramref name="ifFalse" />.Type と等しくありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; that represents a conditional statement.">条件付きステートメントを表す <see cref="T:System.Linq.Expressions.ConditionalExpression" /> を作成します。</summary>
      <param name="test" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Test&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</param>
      <param name="ifTrue" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfTrue&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</param>
      <param name="ifFalse" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfFalse&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Conditional&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Test&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfTrue&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfFalse&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、および <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ConstantExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.ConstantExpression.Value&quot; /&gt; property set to the specified value.">指定した値に設定された <see cref="T:System.Linq.Expressions.ConstantExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> を作成します。</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConstantExpression.Value&quot; /&gt; property equal to.">
        <see cref="T:System.Object" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ConstantExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Constant&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ConstantExpression.Value&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.ConstantExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> プロパティを含む <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ConstantExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.ConstantExpression.Value&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; properties set to the specified values.">指定した値に設定された <see cref="T:System.Linq.Expressions.ConstantExpression" /> プロパティおよび <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" /> を作成します。</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConstantExpression.Value&quot; /&gt; property equal to.">
        <see cref="T:System.Object" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />。</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ConstantExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Constant&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ConstantExpression.Value&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.ConstantExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> プロパティおよび <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;type&quot; /&gt; is not assignable from the dynamic type of &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" /> ではなく、<paramref name="type" /> を <paramref name="value" /> の動的型から代入することができません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a continue statement.">continue ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Continue, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, and a null value to be passed to the target label upon jumping.">Continue と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="target" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a continue statement with the specified type.">型を指定して、continue ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="type" vsli:raw="An &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Continue, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to &lt;paramref name=&quot;type&quot; /&gt;, and a null value to be passed to the target label upon jumping.">Continue と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a type conversion operation.">型変換操作を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Convert&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; or &lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> または <paramref name="type" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No conversion operator is defined between &lt;paramref name=&quot;expression&quot; /&gt;.Type and &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="expression" />.Type と <paramref name="type" /> の間には変換演算子が定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a conversion operation for which the implementing method is specified.">実装メソッドが指定される変換演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Convert&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />、<see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />、および <see cref="P:System.Linq.Expressions.Expression.Type" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; or &lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> または <paramref name="type" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly one argument.">
        <paramref name="method" /> は <see langword="null" /> ではなく、それが表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではないか、受け取る引数が 1 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No conversion operator is defined between &lt;paramref name=&quot;expression&quot; /&gt;.Type and &lt;paramref name=&quot;type&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type is not assignable to the argument type of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The return type of the method represented by &lt;paramref name=&quot;method&quot; /&gt; is not assignable to &lt;paramref name=&quot;type&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type or &lt;paramref name=&quot;type&quot; /&gt; is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="expression" />.Type と <paramref name="type" /> の間には変換演算子が定義されていません。  

または - 
<paramref name="expression" />.Type は、<paramref name="method" /> によって表されるメソッドの引数型に代入できません。  

または - 
<paramref name="method" /> によって表されるメソッドの戻り値の型は、<paramref name="type" /> に代入できません。  


または 
 <paramref name="expression" />.Type または <paramref name="type" /> は null 許容値型で、対応する null 非許容値型は <paramref name="method" /> によって表されるメソッドそれぞれの、引数型または戻り値の型と等しくありません。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException" vsli:raw="More than one method that matches the &lt;paramref name=&quot;method&quot; /&gt; description was found.">
        <paramref name="method" /> 記述に一致する複数のメソッドが見つかりました。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a conversion operation that throws an exception if the target type is overflowed.">変換後の型がオーバーフローした場合に例外をスローする変換演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ConvertChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; or &lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> または <paramref name="type" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No conversion operator is defined between &lt;paramref name=&quot;expression&quot; /&gt;.Type and &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="expression" />.Type と <paramref name="type" /> の間には変換演算子が定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a conversion operation that throws an exception if the target type is overflowed and for which the implementing method is specified.">変換後の型がオーバーフローした場合に例外をスローし、実装メソッドが指定される変換演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ConvertChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />、<see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />、および <see cref="P:System.Linq.Expressions.Expression.Type" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; or &lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> または <paramref name="type" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly one argument.">
        <paramref name="method" /> は <see langword="null" /> ではなく、それが表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではないか、受け取る引数が 1 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No conversion operator is defined between &lt;paramref name=&quot;expression&quot; /&gt;.Type and &lt;paramref name=&quot;type&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type is not assignable to the argument type of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The return type of the method represented by &lt;paramref name=&quot;method&quot; /&gt; is not assignable to &lt;paramref name=&quot;type&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type or &lt;paramref name=&quot;type&quot; /&gt; is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="expression" />.Type と <paramref name="type" /> の間には変換演算子が定義されていません。  
または 
 <paramref name="expression" />.Type は、<paramref name="method" /> によって表されるメソッドの引数型に代入できません。  

または - 
<paramref name="method" /> によって表されるメソッドの戻り値の型は、<paramref name="type" /> に代入できません。  

または 
 <paramref name="expression" />.Type または <paramref name="type" /> は null 許容値型で、対応する null 非許容値型は <paramref name="method" /> によって表されるメソッドそれぞれの、引数型または戻り値の型と等しくありません。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException" vsli:raw="More than one method that matches the &lt;paramref name=&quot;method&quot; /&gt; description was found.">
        <paramref name="method" /> 記述に一致する複数のメソッドが見つかりました。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt; with the specified span.">指定したスパンを使用して、<see cref="T:System.Linq.Expressions.DebugInfoExpression" /> を作成します。</summary>
      <param name="document" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt; that represents the source file.">ソース ファイルを表す <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</param>
      <param name="startLine" vsli:raw="The start line of this &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;. Must be greater than 0.">この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 先頭行。 1 以上であることが必要です。</param>
      <param name="startColumn" vsli:raw="The start column of this &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;. Must be greater than 0.">この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の先頭列。 1 以上であることが必要です。</param>
      <param name="endLine" vsli:raw="The end line of this &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;. Must be greater or equal than the start line.">この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の最終行。 開始行の値以上である必要があります。</param>
      <param name="endColumn" vsli:raw="The end column of this &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;. If the end line is the same as the start line, it must be greater or equal than the start column. In any case, must be greater than 0.">この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の最終列。 最終行が先頭行と同じである場合、これは開始列の値以上である必要があります。 どのような場合でも、0 より大きい値である必要があります。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> のインスタンス。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the decrementing of the expression by 1.">式の値を 1 つ減らすデクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to decrement.">デクリメントする <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the decremented expression.">デクリメントされた式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the decrementing of the expression by 1.">式の値を 1 つ減らすデクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to decrement.">デクリメントする <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the decremented expression.">デクリメントされた式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Default(System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DefaultExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to the specified type.">指定した型に設定された <see cref="T:System.Linq.Expressions.DefaultExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" /> を作成します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DefaultExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Default&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to the specified type.">
        <see cref="T:System.Linq.Expressions.DefaultExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した型に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic division operation.">算術除算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Divide&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The division operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">除算演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic division operation. The implementing method can be specified.">算術除算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。 実装メソッドを指定できます。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Divide&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the division operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> は <see langword="null" /> で、 <paramref name="left" />.Type および <paramref name="right" />.Type には除算演算子が定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a division assignment operation that does not have overflow checking.">オーバーフロー チェックを行わない除算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.DivideAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a division assignment operation that does not have overflow checking.">オーバーフロー チェックを行わない除算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.DivideAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a division assignment operation that does not have overflow checking.">オーバーフロー チェックを行わない除算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.DivideAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動的操作の実行時バインダー。</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">動的な式の結果の型。</param>
      <param name="arguments" vsli:raw="The arguments to the dynamic operation.">動的操作の引数。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動的操作の実行時バインダー。</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">動的な式の結果の型。</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">動的操作の 1 番目の引数。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動的操作の実行時バインダー。</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">動的な式の結果の型。</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">動的操作の 1 番目の引数。</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">動的操作の 2 番目の引数。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動的操作の実行時バインダー。</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">動的な式の結果の型。</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">動的操作の 1 番目の引数。</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">動的操作の 2 番目の引数。</param>
      <param name="arg2" vsli:raw="The third argument to the dynamic operation.">動的操作の 3 番目の引数。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動的操作の実行時バインダー。</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">動的な式の結果の型。</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">動的操作の 1 番目の引数。</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">動的操作の 2 番目の引数。</param>
      <param name="arg2" vsli:raw="The third argument to the dynamic operation.">動的操作の 3 番目の引数。</param>
      <param name="arg3" vsli:raw="The fourth argument to the dynamic operation.">動的操作の 4 番目の引数。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動的操作の実行時バインダー。</param>
      <param name="returnType" vsli:raw="The result type of the dynamic expression.">動的な式の結果の型。</param>
      <param name="arguments" vsli:raw="The arguments to the dynamic operation.">動的操作の引数。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt;, given an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; as the second argument.">2 番目の引数として <see cref="T:System.Linq.Expressions.ElementInit" /> を指定して、<see cref="T:System.Collections.Generic.IEnumerable`1" /> を作成します。</summary>
      <param name="addMethod" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ElementInit.AddMethod&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to set the &lt;see cref=&quot;P:System.Linq.Expressions.ElementInit.Arguments&quot; /&gt; property equal to.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.ElementInit.AddMethod&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.ElementInit.Arguments&quot; /&gt; properties set to the specified values.">指定した値に設定された <see cref="T:System.Linq.Expressions.ElementInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> プロパティを含む <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;addMethod&quot; /&gt; or &lt;paramref name=&quot;arguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="addMethod" /> または <paramref name="arguments" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The method that &lt;paramref name=&quot;addMethod&quot; /&gt; represents is not named &quot;Add&quot; (case insensitive).  &#xA;  &#xA; -or-  &#xA;  &#xA; The method that &lt;paramref name=&quot;addMethod&quot; /&gt; represents is not an instance method.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;arguments&quot; /&gt; does not contain the same number of elements as the number of parameters for the method that &lt;paramref name=&quot;addMethod&quot; /&gt; represents.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of one or more elements of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the type of the corresponding parameter of the method that &lt;paramref name=&quot;addMethod&quot; /&gt; represents.">
        <paramref name="addMethod" /> が表すメソッドに、"Add" (大文字と小文字を区別しない) の名前が付いていません。  
または 
<paramref name="addMethod" /> が表すメソッドは、インスタンス メソッドではありません。  

または - 
<paramref name="arguments" /> には、<paramref name="addMethod" /> が表すメソッドのパラメーターの数と同じ数の要素が含まれていません。  

または - 
<paramref name="arguments" /> の 1 つ以上の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティが、<paramref name="addMethod" /> の表すメソッドの対応するパラメーターの型に割り当てることができません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt;, given an array of values as the second argument.">2 番目の引数として値の配列を指定して、<see cref="T:System.Linq.Expressions.ElementInit" /> を作成します。</summary>
      <param name="addMethod" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ElementInit.AddMethod&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />。</param>
      <param name="arguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to set the &lt;see cref=&quot;P:System.Linq.Expressions.ElementInit.Arguments&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> オブジェクトの配列。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.ElementInit.AddMethod&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.ElementInit.Arguments&quot; /&gt; properties set to the specified values.">指定した値に設定された <see cref="T:System.Linq.Expressions.ElementInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> プロパティを含む <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;addMethod&quot; /&gt; or &lt;paramref name=&quot;arguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="addMethod" /> または <paramref name="arguments" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The method that addMethod represents is not named &quot;Add&quot; (case insensitive).  &#xA;  &#xA; -or-  &#xA;  &#xA; The method that addMethod represents is not an instance method.  &#xA;  &#xA; -or-  &#xA;  &#xA; arguments does not contain the same number of elements as the number of parameters for the method that addMethod represents.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of one or more elements of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the type of the corresponding parameter of the method that &lt;paramref name=&quot;addMethod&quot; /&gt; represents.">addMethod が表すメソッドの名前が "Add" (大文字と小文字は区別されません) ではありません。  

または - 
addMethod が表すメソッドが、インスタンス メソッドではありません。  

または - 
arguments に、addMethod が表すメソッドのパラメーターの数と同じ数の要素が含まれていません。  

または - 
<paramref name="arguments" /> の 1 つ以上の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティが、<paramref name="addMethod" /> の表すメソッドの対応するパラメーターの型に割り当てることができません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Empty">
      <summary vsli:raw="Creates an empty expression that has &lt;see cref=&quot;T:System.Void&quot; /&gt; type.">
        <see cref="T:System.Void" /> 型の空の式を作成します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DefaultExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Default&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to &lt;see cref=&quot;T:System.Void&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.DefaultExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、<see cref="F:System.Linq.Expressions.ExpressionType.Default" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを含む <see cref="T:System.Void" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an equality comparison.">等価比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Equal&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The equality operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">等値演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an equality comparison. The implementing method can be specified.">等価比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。 実装メソッドを指定できます。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Equal&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the equality operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> は <see langword="null" /> で、等値演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise &lt;see langword=&quot;XOR&quot; /&gt; operation, using &lt;c&gt;op_ExclusiveOr&lt;/c&gt; for user-defined types.">ユーザー定義型の <c>op_ExclusiveOr</c> を使用して、ビットごとの <see langword="XOR" /> 演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ExclusiveOr&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see langword=&quot;XOR&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <see langword="XOR" /> 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise &lt;see langword=&quot;XOR&quot; /&gt; operation, using &lt;c&gt;op_ExclusiveOr&lt;/c&gt; for user-defined types. The implementing method can be specified.">ユーザー定義型の <c>op_ExclusiveOr</c> を使用して、ビットごとの <see langword="XOR" /> 演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。 実装メソッドを指定できます。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ExclusiveOr&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the &lt;see langword=&quot;XOR&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には <see langword="XOR" /> 演算子が定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise XOR assignment operation, using &lt;c&gt;op_ExclusiveOr&lt;/c&gt; for user-defined types.">ユーザー定義型の <c>op_ExclusiveOr</c> を使用して、ビットごとの XOR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise XOR assignment operation, using &lt;c&gt;op_ExclusiveOr&lt;/c&gt; for user-defined types.">ユーザー定義型の <c>op_ExclusiveOr</c> を使用して、ビットごとの XOR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise XOR assignment operation, using &lt;c&gt;op_ExclusiveOr&lt;/c&gt; for user-defined types.">ユーザー定義型の <c>op_ExclusiveOr</c> を使用して、ビットごとの XOR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that represents accessing a field.">フィールドへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; property equal to. For &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), &lt;paramref name=&quot;expression&quot; /&gt; must be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。 <see langword="static" /> (Visual Basic では <see langword="Shared" />) の場合、<paramref name="expression" /> は <see langword="null" /> にする必要があります。</param>
      <param name="field" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Member&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.FieldInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberExpression.Member" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MemberAccess&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Member&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberExpression.Member" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;field&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The field represented by &lt;paramref name=&quot;field&quot; /&gt; is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) and &lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="field" /> は <see langword="null" />です。  

または - 
<paramref name="field" /> によって表されるフィールドが <see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、<paramref name="expression" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt;.Type is not assignable to the declaring type of the field represented by &lt;paramref name=&quot;field&quot; /&gt;.">
        <paramref name="expression" />.Type は、<paramref name="field" /> によって表されるフィールドの宣言型に代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that represents accessing a field given the name of the field.">フィールドの名前を指定してフィールドへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; whose &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; contains a field named &lt;paramref name=&quot;fieldName&quot; /&gt;. This can be null for static fields.">
        <see cref="T:System.Linq.Expressions.Expression" /> に <see cref="P:System.Linq.Expressions.Expression.Type" /> という名前のフィールドが含まれている <paramref name="fieldName" />。 静的フィールドの場合は null を指定できます。</param>
      <param name="fieldName" vsli:raw="The name of a field to be accessed.">アクセスするフィールドの名前。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MemberAccess&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; property set to &lt;paramref name=&quot;expression&quot; /&gt;, and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Member&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; that represents the field denoted by &lt;paramref name=&quot;fieldName&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティ、および <paramref name="expression" /> により示されるフィールドを表す <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> に設定された <see cref="T:System.Reflection.FieldInfo" /> プロパティを含む <paramref name="fieldName" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; or &lt;paramref name=&quot;fieldName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> または <paramref name="fieldName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="No field named &lt;paramref name=&quot;fieldName&quot; /&gt; is defined in &lt;paramref name=&quot;expression&quot; /&gt;.Type or its base types.">
        <paramref name="fieldName" />.Type またはその基本型では <paramref name="expression" /> という名前のフィールドが定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that represents accessing a field.">フィールドへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="The containing object of the field. This can be null for static fields.">フィールドの格納オブジェクト。 静的フィールドの場合は null を指定できます。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; that contains the field.">フィールドを格納している <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="fieldName" vsli:raw="The field to be accessed.">アクセスされるフィールド。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a generic &lt;see cref=&quot;T:System.Action&quot; /&gt; delegate type that has specific type arguments.">特定の型引数を持つ汎用 <c>System.Action</c> デリゲート型を表す <see cref="T:System.Type" /> オブジェクトを作成します。</summary>
      <param name="typeArgs" vsli:raw="An array of up to sixteen &lt;see cref=&quot;T:System.Type&quot; /&gt; objects that specify the type arguments for the &lt;see cref=&quot;T:System.Action&quot; /&gt; delegate type.">
        <see cref="T:System.Type" /> デリゲート型の型引数を指定する最大 16 個の <see langword="System.Action" /> オブジェクトの配列。</param>
      <returns vsli:raw="The type of a &lt;see cref=&quot;T:System.Action&quot; /&gt; delegate that has the specified type arguments.">指定した型引数を持つ <c>System.Action</c> デリゲートの型。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;typeArgs&quot; /&gt; contains more than sixteen elements.">
        <paramref name="typeArgs" /> に、16 個を超える要素が格納されています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeArgs&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeArgs" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
      <summary vsli:raw="Gets a &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; object that represents a generic &lt;see cref=&quot;T:System.Func`1&quot; /&gt; or &lt;see cref=&quot;T:System.Action&quot; /&gt; delegate type that has specific type arguments.">特定の型引数を持つ汎用 <c>System.Func</c> または <c>System.Action</c> デリゲート型を表す <see cref="P:System.Linq.Expressions.Expression.Type" /> オブジェクトを取得します。</summary>
      <param name="typeArgs" vsli:raw="The type arguments of the delegate.">デリゲートの型引数。</param>
      <returns vsli:raw="The delegate type.">デリゲート型。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; object that represents a generic &lt;see cref=&quot;T:System.Func`1&quot; /&gt; delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.">特定の型引数を持つ汎用 <c>System.Func</c> デリゲート型を表す <see cref="P:System.Linq.Expressions.Expression.Type" /> オブジェクトを作成します。 最後の型引数で、作成するデリゲートの戻り値の型を指定します。</summary>
      <param name="typeArgs" vsli:raw="An array of one to seventeen &lt;see cref=&quot;T:System.Type&quot; /&gt; objects that specify the type arguments for the &lt;see langword=&quot;System.Func&quot; /&gt; delegate type.">
        <see langword="System.Func" /> デリゲート型の型引数を指定する 1 個から 17 個の <see cref="T:System.Type" /> オブジェクトの配列。</param>
      <returns vsli:raw="The type of a &lt;see cref=&quot;T:System.Func`1&quot; /&gt; delegate that has the specified type arguments.">指定した型引数を持つ <c>System.Func</c> デリゲートの型。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;typeArgs&quot; /&gt; contains fewer than one or more than seventeen elements.">
        <paramref name="typeArgs" /> には、1 個未満または 17 個を超える要素が格納されます。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeArgs&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeArgs" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a &quot;go to&quot; statement.">go to ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Goto, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to the specified value, and a null value to be passed to the target label upon jumping.">Goto と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、指定された値に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <see cref="P:System.Linq.Expressions.GotoExpression.Target" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a &quot;go to&quot; statement. The value passed to the label upon jumping can be specified.">go to ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。 ジャンプ時にラベルに渡す値を指定できます。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value" vsli:raw="The value that will be passed to the associated label upon jumping.">ジャンプ時に関連付けられているラベルに渡される値。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Goto, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; to be passed to the target label upon jumping.">Goto と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="target" /> を含む <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a &quot;go to&quot; statement with the specified type. The value passed to the label upon jumping can be specified.">型を指定して、go to ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。 ジャンプ時にラベルに渡す値を指定できます。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value" vsli:raw="The value that will be passed to the associated label upon jumping.">ジャンプ時に関連付けられているラベルに渡される値。</param>
      <param name="type" vsli:raw="An &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Goto, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to &lt;paramref name=&quot;type&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; to be passed to the target label upon jumping.">Goto と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="type" /> を含む <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a &quot;go to&quot; statement with the specified type.">型を指定して、go to ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="type" vsli:raw="An &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Goto, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to the specified value, the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to &lt;paramref name=&quot;type&quot; /&gt;, and a null value to be passed to the target label upon jumping.">Goto と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、指定された値に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> プロパティ、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a &quot;greater than&quot; numeric comparison.">"大なり" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.GreaterThan&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &quot;greater than&quot; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">"大なり" 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a &quot;greater than&quot; numeric comparison. The implementing method can be specified.">"大なり" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。 実装メソッドを指定できます。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.GreaterThan&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the &quot;greater than&quot; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> は <see langword="null" /> で、"大なり" 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a &quot;greater than or equal&quot; numeric comparison.">"以上" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &quot;greater than or equal&quot; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">"以上" 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a &quot;greater than or equal&quot; numeric comparison.">"以上" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the &quot;greater than or equal&quot; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> は <see langword="null" /> で、 <paramref name="left" />.Type および <paramref name="right" />.Type には "greater than or equal" 演算子が定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; that represents a conditional block with an &lt;see langword=&quot;if&quot; /&gt; statement.">
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> ステートメントを指定して、条件付きブロックを表す <see langword="if" /> を作成します。</summary>
      <param name="test" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Test&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</param>
      <param name="ifTrue" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfTrue&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Conditional&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Test&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfTrue&quot; /&gt;, properties set to the specified values. The &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfFalse&quot; /&gt; property is set to default expression and the type of the resulting &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; returned by this method is &lt;see cref=&quot;T:System.Void&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> プロパティおよび <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> プロパティを含む <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> プロパティは既定の式に設定されます。また、このメソッドによって返される結果の <see cref="T:System.Linq.Expressions.ConditionalExpression" /> の型は <see cref="T:System.Void" /> です。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; that represents a conditional block with &lt;see langword=&quot;if&quot; /&gt; and &lt;see langword=&quot;else&quot; /&gt; statements.">
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> ステートメントと <see langword="if" /> ステートメントを指定して、条件付きブロックを表す <see langword="else" /> を作成します。</summary>
      <param name="test" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Test&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</param>
      <param name="ifTrue" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfTrue&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</param>
      <param name="ifFalse" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfFalse&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Conditional&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.Test&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfTrue&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.ConditionalExpression.IfFalse&quot; /&gt; properties set to the specified values. The type of the resulting &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt; returned by this method is &lt;see cref=&quot;T:System.Void&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、および <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。 このメソッドによって返される結果の <see cref="T:System.Linq.Expressions.ConditionalExpression" /> の型は <see cref="T:System.Void" /> です。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the incrementing of the expression value by 1.">式の値を 1 つ増やすインクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to increment.">インクリメントする <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the incremented expression.">インクリメントされた式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the incrementing of the expression by 1.">式の値を 1 つ増やすインクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to increment.">インクリメントする <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the incremented expression.">インクリメントされた式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.InvocationExpression&quot; /&gt; that applies a delegate or lambda expression to a list of argument expressions.">引数式のリストにデリゲートまたはラムダ式を適用する <see cref="T:System.Linq.Expressions.InvocationExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the delegate or lambda expression to be applied to.">適用するデリゲートまたはラムダ式を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects that represent the arguments that the delegate or lambda expression is applied to.">デリゲートまたはラムダ式が適用される引数を表す <see cref="T:System.Collections.Generic.IEnumerable`1" /> オブジェクトを格納している <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.InvocationExpression&quot; /&gt; that applies the specified delegate or lambda expression to the provided arguments.">指定された引数に、指定されたデリゲートまたはラムダ式を適用する <see cref="T:System.Linq.Expressions.InvocationExpression" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt;.Type does not represent a delegate type or an &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the type of the corresponding parameter of the delegate represented by &lt;paramref name=&quot;expression&quot; /&gt;.">
        <paramref name="expression" />.Type はデリゲート型または <see cref="T:System.Linq.Expressions.Expression`1" /> を表しません。  

または - 
<paramref name="arguments" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="expression" /> によって表されるデリゲートの対応するパラメーターの型に代入できません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;arguments&quot; /&gt; does not contain the same number of elements as the list of parameters for the delegate represented by &lt;paramref name=&quot;expression&quot; /&gt;.">
        <paramref name="arguments" /> に、<paramref name="expression" /> により表されるデリゲートのパラメーターのリストと同じ数の要素が格納されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.InvocationExpression&quot; /&gt; that applies a delegate or lambda expression to a list of argument expressions.">引数式のリストにデリゲートまたはラムダ式を適用する <see cref="T:System.Linq.Expressions.InvocationExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the delegate or lambda expression to be applied.">適用するデリゲートまたはラムダ式を表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects that represent the arguments that the delegate or lambda expression is applied to.">デリゲートまたはラムダ式が適用される引数を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.InvocationExpression&quot; /&gt; that applies the specified delegate or lambda expression to the provided arguments.">指定された引数に、指定されたデリゲートまたはラムダ式を適用する <see cref="T:System.Linq.Expressions.InvocationExpression" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt;.Type does not represent a delegate type or an &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the type of the corresponding parameter of the delegate represented by &lt;paramref name=&quot;expression&quot; /&gt;.">
        <paramref name="expression" />.Type はデリゲート型または <see cref="T:System.Linq.Expressions.Expression`1" /> を表しません。  
または 
<paramref name="arguments" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="expression" /> によって表されるデリゲートの対応するパラメーターの型に代入できません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;arguments&quot; /&gt; does not contain the same number of elements as the list of parameters for the delegate represented by &lt;paramref name=&quot;expression&quot; /&gt;.">
        <paramref name="arguments" /> に、<paramref name="expression" /> により表されるデリゲートのパラメーターのリストと同じ数の要素が格納されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Returns whether the expression evaluates to false.">式が false に評価されるかどうかを返します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to evaluate.">評価する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Returns whether the expression evaluates to false.">式が false に評価されるかどうかを返します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to evaluate.">評価する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Returns whether the expression evaluates to true.">式が true に評価されるかどうかを返します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to evaluate.">評価する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Returns whether the expression evaluates to true.">式が true に評価されるかどうかを返します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to evaluate.">評価する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; representing a label with void type and no name.">void 型で名前なしのラベルを表す <see cref="T:System.Linq.Expressions.LabelTarget" /> を作成します。</summary>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt;.">新しい <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt; representing a label without a default value.">既定値のないラベルを表す <see cref="T:System.Linq.Expressions.LabelExpression" /> を作成します。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; which this &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt; will be associated with.">この <see cref="T:System.Linq.Expressions.LabelTarget" /> が関連付けられる <see cref="T:System.Linq.Expressions.LabelExpression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt; without a default value.">既定値のない <see cref="T:System.Linq.Expressions.LabelExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt; representing a label with the given default value.">指定された既定値を持つラベルを表す <see cref="T:System.Linq.Expressions.LabelExpression" /> を作成します。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; which this &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt; will be associated with.">この <see cref="T:System.Linq.Expressions.LabelTarget" /> が関連付けられる <see cref="T:System.Linq.Expressions.LabelExpression" />。</param>
      <param name="defaultValue" vsli:raw="The value of this &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt; when the label is reached through regular control flow.">通常の制御フローを経てラベルに到達した場合のこの <see cref="T:System.Linq.Expressions.LabelExpression" /> の値。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt; with the given default value.">指定された既定値を持つ <see cref="T:System.Linq.Expressions.LabelExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; representing a label with void type and the given name.">指定された名前を持つ void 型のラベルを表す <see cref="T:System.Linq.Expressions.LabelTarget" /> を作成します。</summary>
      <param name="name" vsli:raw="The name of the label.">ラベルの名前。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt;.">新しい <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; representing a label with the given type.">型を指定して、ラベルを表す <see cref="T:System.Linq.Expressions.LabelTarget" /> を作成します。</summary>
      <param name="type" vsli:raw="The type of value that is passed when jumping to the label.">ラベルにジャンプするときに渡す値の型。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt;.">新しい <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; representing a label with the given type and name.">指定した型および名前を使用して、ラベルを表す <see cref="T:System.Linq.Expressions.LabelTarget" /> を作成します。</summary>
      <param name="type" vsli:raw="The type of value that is passed when jumping to the label.">ラベルにジャンプするときに渡す値の型。</param>
      <param name="name" vsli:raw="The name of the label.">ラベルの名前。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt;.">新しい <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; by first constructing a delegate type from the expression body, a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions. It can be used when the delegate type is not known at compile time.">最初に式本体からデリゲート型を構築し、末尾呼び出し最適化が適用されるかどうかを示すパラメーターを構築し、パラメーター式の列挙可能なコレクションを構築することで <see cref="T:System.Linq.Expressions.LambdaExpression" /> を作成します。 これは、コンパイル時にデリゲート型が不明な場合に使用できます。</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; that indicates if tail call optimization will be applied when compiling the created expression.">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to Lambda and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; by first constructing a delegate type from the expression body, a parameter that indicates whether tail call optimization will be applied, and an array of parameter expressions. It can be used when the delegate type is not known at compile time.">最初に式本体からデリゲート型を構築し、末尾呼び出し最適化が適用されるかどうかを示すパラメーターを構築し、パラメーター式の配列を構築することで <see cref="T:System.Linq.Expressions.LambdaExpression" /> を作成します。 これは、コンパイル時にデリゲート型が不明な場合に使用できます。</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; that indicates if tail call optimization will be applied when compiling the created expression.">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
      <param name="parameters" vsli:raw="An array that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトを格納する配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to Lambda and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; by first constructing a delegate type from the expression body, and an enumerable collection of parameter expressions. It can be used when the delegate type is not known at compile time.">最初に式本体をデリゲート型を構築し、次にパラメーター式の列挙可能なコレクションを構築することで <see cref="T:System.Linq.Expressions.LambdaExpression" /> を作成します。 これは、コンパイル時にデリゲート型が不明な場合に使用できます。</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to Lambda and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; by first constructing a delegate type from the expression body, and an array of parameter expressions. It can be used when the delegate type is not known at compile time.">最初に式本体をデリゲート型を構築し、次にパラメーター式の配列を構築することで <see cref="T:System.Linq.Expressions.LambdaExpression" /> を作成します。 これは、コンパイル時にデリゲート型が不明な場合に使用できます。</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトの配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Lambda&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;body&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;parameters&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="body" /> が <see langword="null" /> です。  

または - 
<paramref name="parameters" /> の 1 つ以上の要素が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;parameters&quot; /&gt; contains more than sixteen elements.">
        <paramref name="parameters" /> に、16 個を超える要素が格納されています。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; by first constructing a delegate type from the expression body, the name for the lambda, a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions. It can be used when the delegate type is not known at compile time.">最初に式本体からデリゲート型を構築し、ラムダの名前、末尾呼び出し最適化が適用されるかどうかを示すパラメーター、パラメーター式の列挙可能なコレクションを構築することで <see cref="T:System.Linq.Expressions.LambdaExpression" /> を作成します。 これは、コンパイル時にデリゲート型が不明な場合に使用できます。</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name" vsli:raw="The name for the lambda. Used for emitting debug information.">ラムダの名前。 デバッグ情報を出力するために使用します。</param>
      <param name="tailCall" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; that indicates if tail call optimization will be applied when compiling the created expression.">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to Lambda and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; by first constructing a delegate type from the expression body, the name for the lambda, and an enumerable collection of parameter expressions. It can be used when the delegate type is not known at compile time.">最初に式本体をデリゲート型を構築し、ラムダの名前を構築し、パラメーター式の列挙可能なコレクションを構築することで <see cref="T:System.Linq.Expressions.LambdaExpression" /> を作成します。 これは、コンパイル時にデリゲート型が不明な場合に使用できます。</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name" vsli:raw="The name for the lambda. Used for emitting debug information.">ラムダの名前。 デバッグ情報を出力するために使用します。</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to Lambda and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; where the delegate type is known at compile time, with a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions.">末尾呼び出し最適化が適用されるかどうかを示すパラメーターとパラメーター式の列挙可能なコレクションを使用し、コンパイル時にデリゲート型が既知の <see cref="T:System.Linq.Expressions.LambdaExpression" /> を作成します。</summary>
      <param name="delegateType" vsli:raw="A &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; representing the delegate signature for the lambda.">ラムダのデリゲート シグネチャを表す <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; that indicates if tail call optimization will be applied when compiling the created expression.">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to Lambda and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; where the delegate type is known at compile time, with a parameter that indicates whether tail call optimization will be applied, and an array of parameter expressions.">末尾呼び出し最適化が適用されるかどうかを示すパラメーターとパラメーター式の配列を使用し、コンパイル時にデリゲート型が既知の <see cref="T:System.Linq.Expressions.LambdaExpression" /> を作成します。</summary>
      <param name="delegateType" vsli:raw="A &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; representing the delegate signature for the lambda.">ラムダのデリゲート シグネチャを表す <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; that indicates if tail call optimization will be applied when compiling the created expression.">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
      <param name="parameters" vsli:raw="An array that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトを格納する配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to Lambda and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; where the delegate type is known at compile time, with an enumerable collection of parameter expressions.">パラメーター式の列挙可能なコレクションを使用し、コンパイル時にデリゲート型が既知である <see cref="T:System.Linq.Expressions.LambdaExpression" /> を作成します。</summary>
      <param name="delegateType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents a delegate signature for the lambda.">ラムダのデリゲート シグネチャを表す <see cref="T:System.Type" />。</param>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
      <returns vsli:raw="An object that represents a lambda expression which has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Lambda&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と等しい <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> プロパティを含むラムダ式を表すオブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;delegateType&quot; /&gt; or &lt;paramref name=&quot;body&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements in &lt;paramref name=&quot;parameters&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="delegateType" /> または <paramref name="body" /> が <see langword="null" /> です。  
または 
<paramref name="parameters" /> の 1 つ以上の要素が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;delegateType&quot; /&gt; does not represent a delegate type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;body&quot; /&gt;.Type represents a type that is not assignable to the return type of the delegate type represented by &lt;paramref name=&quot;delegateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;parameters&quot; /&gt; does not contain the same number of elements as the list of parameters for the delegate type represented by &lt;paramref name=&quot;delegateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;parameters&quot; /&gt; is not assignable from the type of the corresponding parameter type of the delegate type represented by &lt;paramref name=&quot;delegateType&quot; /&gt;.">
        <paramref name="delegateType" /> がデリゲート型を表していません。  

または - 
<paramref name="body" />.Type は、<paramref name="delegateType" /> によって表されるデリゲート型の戻り値の型に代入できない型を表しています。  

または 
 <paramref name="parameters" /> に、<paramref name="delegateType" /> により表されるデリゲート型のパラメーターのリストと同じ数の要素が格納されていません。  

または - 
<paramref name="parameters" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="delegateType" /> によって表されるデリゲート型の対応するパラメーター型から代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; where the delegate type is known at compile time, with an array of parameter expressions.">パラメーター式の配列を使用し、コンパイル時にデリゲート型が既知である <see cref="T:System.Linq.Expressions.LambdaExpression" /> を作成します。</summary>
      <param name="delegateType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents a delegate signature for the lambda.">ラムダのデリゲート シグネチャを表す <see cref="T:System.Type" />。</param>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトの配列。</param>
      <returns vsli:raw="An object that represents a lambda expression which has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Lambda&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と等しい <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> プロパティを含むラムダ式を表すオブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;delegateType&quot; /&gt; or &lt;paramref name=&quot;body&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements in &lt;paramref name=&quot;parameters&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="delegateType" /> または <paramref name="body" /> が <see langword="null" /> です。  
または 
<paramref name="parameters" /> の 1 つ以上の要素が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;delegateType&quot; /&gt; does not represent a delegate type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;body&quot; /&gt;.Type represents a type that is not assignable to the return type of the delegate type represented by &lt;paramref name=&quot;delegateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;parameters&quot; /&gt; does not contain the same number of elements as the list of parameters for the delegate type represented by &lt;paramref name=&quot;delegateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;parameters&quot; /&gt; is not assignable from the type of the corresponding parameter type of the delegate type represented by &lt;paramref name=&quot;delegateType&quot; /&gt;.">
        <paramref name="delegateType" /> がデリゲート型を表していません。  
または 
 <paramref name="body" />.Type は、<paramref name="delegateType" /> によって表されるデリゲート型の戻り値の型に代入できない型を表しています。  
または 
 <paramref name="parameters" /> に、<paramref name="delegateType" /> により表されるデリゲート型のパラメーターのリストと同じ数の要素が格納されていません。  

または - 
<paramref name="parameters" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="delegateType" /> によって表されるデリゲート型の対応するパラメーター型から代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; where the delegate type is known at compile time, with the name for the lambda, a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions.">ラムダの名前、末尾呼び出し最適化が適用されるかどうかを示すパラメーター、パラメーター式の列挙可能なコレクションを使用し、コンパイル時にデリゲート型が既知の <see cref="T:System.Linq.Expressions.LambdaExpression" /> を作成します。</summary>
      <param name="delegateType" vsli:raw="A &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; representing the delegate signature for the lambda.">ラムダのデリゲート シグネチャを表す <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name" vsli:raw="The name for the lambda. Used for emitting debug information.">ラムダの名前。 デバッグ情報を出力するために使用します。</param>
      <param name="tailCall" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; that indicates if tail call optimization will be applied when compiling the created expression.">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to Lambda and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; where the delegate type is known at compile time, with the name for the lambda, and an enumerable collection of parameter expressions.">ラムダの名前とパラメーター式の列挙可能なコレクションを使用し、コンパイル時にデリゲート型が既知である <see cref="T:System.Linq.Expressions.LambdaExpression" /> を作成します。</summary>
      <param name="delegateType" vsli:raw="A &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; representing the delegate signature for the lambda.">ラムダのデリゲート シグネチャを表す <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name" vsli:raw="The name for the lambda. Used for emitting debug information.">ラムダの名前。 デバッグ情報を出力するために使用します。</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to Lambda and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; where the delegate type is known at compile time, with a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions.">末尾呼び出し最適化が適用されるかどうかを示すパラメーターとパラメーター式の列挙可能なコレクションを使用し、コンパイル時にデリゲート型が既知の <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; that indicates if tail call optimization will be applied when compiling the created expression.">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
      <typeparam name="TDelegate" vsli:raw="The delegate type.">デリゲート型。</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Lambda&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; where the delegate type is known at compile time, with a parameter that indicates whether tail call optimization will be applied, and an array of parameter expressions.">末尾呼び出し最適化が適用されるかどうかを示すパラメーターとパラメーター式の配列を使用し、コンパイル時にデリゲート型が既知の <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; that indicates if tail call optimization will be applied when compiling the created expression.">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
      <param name="parameters" vsli:raw="An array that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトを格納する配列。</param>
      <typeparam name="TDelegate" vsli:raw="The delegate type.">デリゲート型。</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Lambda&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; where the delegate type is known at compile time, with an enumerable collection of parameter expressions.">パラメーター式の列挙可能なコレクションを使用し、コンパイル時にデリゲート型が既知である <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
      <typeparam name="TDelegate" vsli:raw="A delegate type.">デリゲート型。</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Lambda&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;body&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements in &lt;paramref name=&quot;parameters&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="body" /> が <see langword="null" /> です。  

または - 
<paramref name="parameters" /> の 1 つ以上の要素が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;TDelegate&quot; /&gt; is not a delegate type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;body&quot; /&gt;.Type represents a type that is not assignable to the return type of &lt;paramref name=&quot;TDelegate&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;parameters&quot; /&gt; does not contain the same number of elements as the list of parameters for &lt;paramref name=&quot;TDelegate&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;parameters&quot; /&gt; is not assignable from the type of the corresponding parameter type of &lt;paramref name=&quot;TDelegate&quot; /&gt;.">
        <paramref name="TDelegate" /> がデリゲート型でありません。  

または - 
<paramref name="body" />.Type は、<paramref name="TDelegate" /> の戻り値の型に代入できない型を表します。  

または 
 <paramref name="parameters" /> に、<paramref name="TDelegate" /> のパラメーターのリストと同じ数の要素が格納されていません。  

または - 
<paramref name="parameters" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="TDelegate" /> の対応するパラメーター型から代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; where the delegate type is known at compile time, with an array of parameter expressions.">パラメーター式の配列を使用し、コンパイル時にデリゲート型が既知である <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトの配列。</param>
      <typeparam name="TDelegate" vsli:raw="A delegate type.">デリゲート型。</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Lambda&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;body&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements in &lt;paramref name=&quot;parameters&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="body" /> は <see langword="null" />です。  

または - 
<paramref name="parameters" /> の 1 つ以上の要素が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;TDelegate&quot; /&gt; is not a delegate type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;body&quot; /&gt;.Type represents a type that is not assignable to the return type of &lt;paramref name=&quot;TDelegate&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;parameters&quot; /&gt; does not contain the same number of elements as the list of parameters for &lt;paramref name=&quot;TDelegate&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;parameters&quot; /&gt; is not assignable from the type of the corresponding parameter type of &lt;paramref name=&quot;TDelegate&quot; /&gt;.">
        <paramref name="TDelegate" /> がデリゲート型でありません。  

または - 
<paramref name="body" />.Type は、<paramref name="TDelegate" /> の戻り値の型に代入できない型を表します。  

または - 
<paramref name="parameters" /> に、<paramref name="TDelegate" /> のパラメーターのリストと同じ数の要素が格納されていません。  

または - 
<paramref name="parameters" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="TDelegate" /> の対応するパラメーター型から代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; where the delegate type is known at compile time, with the name for the lambda, a parameter that indicates whether tail call optimization will be applied, and an enumerable collection of parameter expressions.">ラムダの名前、末尾呼び出し最適化が適用されるかどうかを示すパラメーター、パラメーター式の列挙可能なコレクションを使用し、コンパイル時にデリゲート型が既知の <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name" vsli:raw="The name of the lambda. Used for generating debugging info.">ラムダの名前。 デバッグ情報を生成するために使用します。</param>
      <param name="tailCall" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; that indicates if tail call optimization will be applied when compiling the created expression.">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
      <typeparam name="TDelegate" vsli:raw="The delegate type.">デリゲート型。</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Lambda&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; where the delegate type is known at compile time, with the name for the lambda, and an enumerable collection of parameter expressions.">ラムダの名前とパラメーター式の列挙可能なコレクションを使用し、コンパイル時にデリゲート型が既知である <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</summary>
      <param name="body" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name" vsli:raw="The name of the lambda. Used for generating debugging information.">ラムダの名前。 デバッグ情報を生成するために使用します。</param>
      <param name="parameters" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</param>
      <typeparam name="TDelegate" vsli:raw="The delegate type.">デリゲート型。</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Lambda&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise left-shift operation.">ビットごとの左シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.LeftShift&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The left-shift operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">左シフト演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise left-shift operation.">ビットごとの左シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.LeftShift&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the left-shift operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> は <see langword="null" /> で、左シフト演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise left-shift assignment operation.">ビットごとの左シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.LeftShiftAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise left-shift assignment operation.">ビットごとの左シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.LeftShiftAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise left-shift assignment operation.">ビットごとの左シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.LeftShiftAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a &quot;less than&quot; numeric comparison.">"小なり" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.LessThan&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &quot;less than&quot; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">"小なり" 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a &quot;less than&quot; numeric comparison.">"小なり" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.LessThan&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the &quot;less than&quot; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には "less than" 演算子が定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a &quot; less than or equal&quot; numeric comparison.">"以下" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.LessThanOrEqual&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &quot;less than or equal&quot; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">"以下" 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a &quot;less than or equal&quot; numeric comparison.">"以下" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.LessThanOrEqual&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the &quot;less than or equal&quot; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> は <see langword="null" /> で、"以下" 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberListBinding&quot; /&gt; where the member is a field or property.">メンバーがフィールドまたはプロパティである <see cref="T:System.Linq.Expressions.MemberListBinding" /> を作成します。</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that represents a field or property to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MemberInfo" /> プロパティを等しく設定するフィールドまたはプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</param>
      <param name="initializers" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberListBinding.Initializers&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberListBinding&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.ListBinding&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MemberListBinding.Initializers&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberListBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="member" /> は <see langword="null" />です。  

または - 
<paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; does not represent a field or property.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Reflection.FieldInfo.FieldType&quot; /&gt; or &lt;see cref=&quot;P:System.Reflection.PropertyInfo.PropertyType&quot; /&gt; of the field or property that &lt;paramref name=&quot;member&quot; /&gt; represents does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.">
        <paramref name="member" /> は、フィールドまたはプロパティを表しません。  
または 
<paramref name="member" /> が表すフィールドまたはプロパティの <see cref="P:System.Reflection.FieldInfo.FieldType" /> または <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> は、<see cref="T:System.Collections.IEnumerable" /> を実装していません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberListBinding&quot; /&gt; where the member is a field or property.">メンバーがフィールドまたはプロパティである <see cref="T:System.Linq.Expressions.MemberListBinding" /> を作成します。</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that represents a field or property to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MemberInfo" /> プロパティを等しく設定するフィールドまたはプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</param>
      <param name="initializers" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberListBinding.Initializers&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.ElementInit" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> オブジェクトの配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberListBinding&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.ListBinding&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MemberListBinding.Initializers&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberListBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="member" /> は <see langword="null" />です。  

または - 
<paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; does not represent a field or property.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Reflection.FieldInfo.FieldType&quot; /&gt; or &lt;see cref=&quot;P:System.Reflection.PropertyInfo.PropertyType&quot; /&gt; of the field or property that &lt;paramref name=&quot;member&quot; /&gt; represents does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.">
        <paramref name="member" /> は、フィールドまたはプロパティを表しません。  

または - 
<paramref name="member" /> が表すフィールドまたはプロパティの <see cref="P:System.Reflection.FieldInfo.FieldType" /> または <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> は、<see cref="T:System.Collections.IEnumerable" /> を実装していません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberListBinding&quot; /&gt; based on a specified property accessor method.">指定したプロパティ アクセサー メソッドに基づいて <see cref="T:System.Linq.Expressions.MemberListBinding" /> を作成します。</summary>
      <param name="propertyAccessor" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents a property accessor method.">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="initializers" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberListBinding.Initializers&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberListBinding&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.ListBinding&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that represents the property accessed in &lt;paramref name=&quot;propertyAccessor&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.MemberListBinding.Initializers&quot; /&gt; populated with the elements of &lt;paramref name=&quot;initializers&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberListBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> に設定された <see cref="T:System.Reflection.MemberInfo" /> プロパティ、および <paramref name="propertyAccessor" /> の要素が設定された <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> を持つ <paramref name="initializers" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyAccessor" /> は <see langword="null" />です。  

または - 
<paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; does not represent a property accessor method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Reflection.PropertyInfo.PropertyType&quot; /&gt; of the property that the method represented by &lt;paramref name=&quot;propertyAccessor&quot; /&gt; accesses does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.">
        <paramref name="propertyAccessor" /> はプロパティ アクセサー メソッドを表していません。  

または - 
<paramref name="propertyAccessor" /> により表されるメソッドがアクセスするプロパティの <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> は、<see cref="T:System.Collections.IEnumerable" /> を実装していません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberListBinding&quot; /&gt; object based on a specified property accessor method.">指定したプロパティ アクセサー メソッドに基づいて <see cref="T:System.Linq.Expressions.MemberListBinding" /> オブジェクトを作成します。</summary>
      <param name="propertyAccessor" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents a property accessor method.">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="initializers" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberListBinding.Initializers&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.ElementInit" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> オブジェクトの配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberListBinding&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.ListBinding&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that represents the property accessed in &lt;paramref name=&quot;propertyAccessor&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.MemberListBinding.Initializers&quot; /&gt; populated with the elements of &lt;paramref name=&quot;initializers&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberListBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> に設定された <see cref="T:System.Reflection.MemberInfo" /> プロパティ、および <paramref name="propertyAccessor" /> の要素が設定された <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> を持つ <paramref name="initializers" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyAccessor" /> が <see langword="null" /> です。  

または - 
<paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; does not represent a property accessor method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Reflection.PropertyInfo.PropertyType&quot; /&gt; of the property that the method represented by &lt;paramref name=&quot;propertyAccessor&quot; /&gt; accesses does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.">
        <paramref name="propertyAccessor" /> はプロパティ アクセサー メソッドを表していません。  

または - 
<paramref name="propertyAccessor" /> により表されるメソッドがアクセスするプロパティの <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> は、<see cref="T:System.Collections.IEnumerable" /> を実装していません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that uses specified &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects to initialize a collection.">指定した <see cref="T:System.Linq.Expressions.ListInitExpression" /> オブジェクトを使用してコレクションを初期化する <see cref="T:System.Linq.Expressions.ElementInit" /> を作成します。</summary>
      <param name="newExpression" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="initializers" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Initializers&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ListInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Initializers&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt; or &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="newExpression" /> または <paramref name="initializers" /> が <see langword="null" /> です。  

または - 
<paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt;.Type does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.">
        <paramref name="newExpression" />.Type は <see cref="T:System.Collections.IEnumerable" /> を実装していません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that uses a method named &quot;Add&quot; to add elements to a collection.">"Add" という名前のメソッドを使用してコレクションに要素を追加する <see cref="T:System.Linq.Expressions.ListInitExpression" /> を作成します。</summary>
      <param name="newExpression" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="initializers" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Initializers&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ListInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt; or &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="newExpression" /> または <paramref name="initializers" /> が <see langword="null" /> です。  

または - 
<paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt;.Type does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.">
        <paramref name="newExpression" />.Type は <see cref="T:System.Collections.IEnumerable" /> を実装していません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There is no instance method named &quot;Add&quot; (case insensitive) declared in &lt;paramref name=&quot;newExpression&quot; /&gt;.Type or its base type.  &#xA;  &#xA; -or-  &#xA;  &#xA; The add method on &lt;paramref name=&quot;newExpression&quot; /&gt;.Type or its base type does not take exactly one argument.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type represented by the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of the first element of &lt;paramref name=&quot;initializers&quot; /&gt; is not assignable to the argument type of the add method on &lt;paramref name=&quot;newExpression&quot; /&gt;.Type or its base type.  &#xA;  &#xA; -or-  &#xA;  &#xA; More than one argument-compatible method named &quot;Add&quot; (case-insensitive) exists on &lt;paramref name=&quot;newExpression&quot; /&gt;.Type and/or its base type.">
        <paramref name="newExpression" />.Type またはその基本型で、"Add" (大文字と小文字を区別しない) という名前のインスタンス メソッドは宣言されていません。  

または - 
<paramref name="newExpression" />.Type またはその基本型の Add メソッドは、ちょうど 1 つの引数を受け取りません。  

または - 
<paramref name="initializers" /> の最初の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティが表す型は、<paramref name="newExpression" />.Type またはその基本型の Add メソッドの引数の型に割り当てることができません。  


または 
"Add" (大文字と小文字を区別しない) という名前の、複数の引数と互換性のあるメソッドが、<paramref name="newExpression" />.Type および/またはその基本型に存在します。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that uses specified &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects to initialize a collection.">指定した <see cref="T:System.Linq.Expressions.ListInitExpression" /> オブジェクトを使用してコレクションを初期化する <see cref="T:System.Linq.Expressions.ElementInit" /> を作成します。</summary>
      <param name="newExpression" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="initializers" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Initializers&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.ElementInit" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> オブジェクトの配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ListInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Initializers&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt; or &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="newExpression" /> または <paramref name="initializers" /> が <see langword="null" /> です。  

または - 
<paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt;.Type does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.">
        <paramref name="newExpression" />.Type は <see cref="T:System.Collections.IEnumerable" /> を実装していません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that uses a method named &quot;Add&quot; to add elements to a collection.">"Add" という名前のメソッドを使用してコレクションに要素を追加する <see cref="T:System.Linq.Expressions.ListInitExpression" /> を作成します。</summary>
      <param name="newExpression" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="initializers" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Initializers&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> オブジェクトの配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ListInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt; or &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="newExpression" /> または <paramref name="initializers" /> が <see langword="null" /> です。  
または 
<paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt;.Type does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.">
        <paramref name="newExpression" />.Type は <see cref="T:System.Collections.IEnumerable" /> を実装していません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There is no instance method named &quot;Add&quot; (case insensitive) declared in &lt;paramref name=&quot;newExpression&quot; /&gt;.Type or its base type.  &#xA;  &#xA; -or-  &#xA;  &#xA; The add method on &lt;paramref name=&quot;newExpression&quot; /&gt;.Type or its base type does not take exactly one argument.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type represented by the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of the first element of &lt;paramref name=&quot;initializers&quot; /&gt; is not assignable to the argument type of the add method on &lt;paramref name=&quot;newExpression&quot; /&gt;.Type or its base type.  &#xA;  &#xA; -or-  &#xA;  &#xA; More than one argument-compatible method named &quot;Add&quot; (case-insensitive) exists on &lt;paramref name=&quot;newExpression&quot; /&gt;.Type and/or its base type.">
        <paramref name="newExpression" />.Type またはその基本型で、"Add" (大文字と小文字を区別しない) という名前のインスタンス メソッドは宣言されていません。  

または - 
<paramref name="newExpression" />.Type またはその基本型の Add メソッドは、ちょうど 1 つの引数を受け取りません。  

または - 
<paramref name="initializers" /> の最初の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティが表す型は、<paramref name="newExpression" />.Type またはその基本型の Add メソッドの引数の型に割り当てることができません。  

または - 
"Add" (大文字と小文字を区別しない) という名前の、複数の引数と互換性のあるメソッドが、<paramref name="newExpression" />.Type および/またはその基本型に存在します。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that uses a specified method to add elements to a collection.">指定したメソッドを使用してコレクションに要素を追加する <see cref="T:System.Linq.Expressions.ListInitExpression" /> を作成します。</summary>
      <param name="newExpression" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="addMethod" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents an instance method named &quot;Add&quot; (case insensitive), that adds an element to a collection.">コレクションに要素を追加する、"Add" (大文字と小文字は区別されません) という名前のインスタンス メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="initializers" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Initializers&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ListInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt; or &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="newExpression" /> または <paramref name="initializers" /> が <see langword="null" /> です。  
または 
<paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt;.Type does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;addMethod&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and it does not represent an instance method named &quot;Add&quot; (case insensitive) that takes exactly one argument.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;addMethod&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the type represented by the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of one or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; is not assignable to the argument type of the method that &lt;paramref name=&quot;addMethod&quot; /&gt; represents.">
        <paramref name="newExpression" />.Type は <see cref="T:System.Collections.IEnumerable" /> を実装していません。  

または - 
<paramref name="addMethod" /> は <see langword="null" /> ではなく、受け取る引数が 1 つだけの "Add" (大文字と小文字は区別されません) という名前のインスタンス メソッドを表しません。  

または - 
<paramref name="addMethod" /> は <see langword="null" /> ではなく、<paramref name="initializers" /> の 1 つ以上の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティによって表される型を <paramref name="addMethod" /> が表すメソッドの引数型に代入することはできません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;addMethod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and no instance method named &quot;Add&quot; that takes one type-compatible argument exists on &lt;paramref name=&quot;newExpression&quot; /&gt;.Type or its base type.">
        <paramref name="addMethod" /> は <see langword="null" /> で、1 つの型互換の引数を受け取る "Add" という名前のインスタンス メソッドが <paramref name="newExpression" />.Type またはその基本データ型に存在しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that uses a specified method to add elements to a collection.">指定したメソッドを使用してコレクションに要素を追加する <see cref="T:System.Linq.Expressions.ListInitExpression" /> を作成します。</summary>
      <param name="newExpression" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="addMethod" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents an instance method that takes one argument, that adds an element to a collection.">1 つの引数を受け取り、コレクションに要素を追加するインスタンス メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="initializers" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Initializers&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> オブジェクトの配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ListInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt; or &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; One or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="newExpression" /> または <paramref name="initializers" /> が <see langword="null" /> です。  

または - 
<paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt;.Type does not implement &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;addMethod&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and it does not represent an instance method named &quot;Add&quot; (case insensitive) that takes exactly one argument.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;addMethod&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the type represented by the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of one or more elements of &lt;paramref name=&quot;initializers&quot; /&gt; is not assignable to the argument type of the method that &lt;paramref name=&quot;addMethod&quot; /&gt; represents.">
        <paramref name="newExpression" />.Type は <see cref="T:System.Collections.IEnumerable" /> を実装していません。  

または - 
<paramref name="addMethod" /> は <see langword="null" /> ではなく、受け取る引数が 1 つだけの "Add" (大文字と小文字は区別されません) という名前のインスタンス メソッドを表しません。  

または - 
<paramref name="addMethod" /> は <see langword="null" /> ではなく、<paramref name="initializers" /> の 1 つ以上の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティによって表される型を <paramref name="addMethod" /> が表すメソッドの引数型に代入することはできません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;addMethod&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and no instance method named &quot;Add&quot; that takes one type-compatible argument exists on &lt;paramref name=&quot;newExpression&quot; /&gt;.Type or its base type.">
        <paramref name="addMethod" /> は <see langword="null" /> で、1 つの型互換の引数を受け取る "Add" という名前のインスタンス メソッドが <paramref name="newExpression" />.Type またはその基本データ型に存在しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LoopExpression&quot; /&gt; with the given body.">指定した本体を使用して、<see cref="T:System.Linq.Expressions.LoopExpression" /> を作成します。</summary>
      <param name="body" vsli:raw="The body of the loop.">ループの本体。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.LoopExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LoopExpression&quot; /&gt; with the given body and break target.">指定した本体および break の移動先を使用して、<see cref="T:System.Linq.Expressions.LoopExpression" /> を作成します。</summary>
      <param name="body" vsli:raw="The body of the loop.">ループの本体。</param>
      <param name="break" vsli:raw="The break target used by the loop body.">ループの本体によって使用される break の移動先。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.LoopExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.LoopExpression&quot; /&gt; with the given body.">指定した本体を使用して、<see cref="T:System.Linq.Expressions.LoopExpression" /> を作成します。</summary>
      <param name="body" vsli:raw="The body of the loop.">ループの本体。</param>
      <param name="break" vsli:raw="The break target used by the loop body.">ループの本体によって使用される break の移動先。</param>
      <param name="continue" vsli:raw="The continue target used by the loop body.">ループの本体によって使用される continue の移動先。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.LoopExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt;, given the left and right operands, by calling an appropriate factory method.">適切なファクトリ メソッドを呼び出すことにより、左オペランドと右オペランドを指定して、<see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="binaryType" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that specifies the type of binary operation.">二項演算の型を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the left operand.">左オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the right operand.">右オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that results from calling the appropriate factory method.">適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;binaryType&quot; /&gt; does not correspond to a binary expression node.">
        <paramref name="binaryType" /> は、二項式ノードには対応していません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt;, given the left operand, right operand and implementing method, by calling the appropriate factory method.">適切なファクトリ メソッドを呼び出すことにより、左オペランド、右オペランド、および実装メソッドを指定して、<see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="binaryType" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that specifies the type of binary operation.">二項演算の型を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the left operand.">左オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the right operand.">右オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that specifies the implementing method.">実装メソッドを指定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that results from calling the appropriate factory method.">適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;binaryType&quot; /&gt; does not correspond to a binary expression node.">
        <paramref name="binaryType" /> は、二項式ノードには対応していません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt;, given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method.">適切なファクトリ メソッドを呼び出すことにより、左オペランド、右オペランド、実装メソッド、および型変換関数を指定して、<see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="binaryType" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that specifies the type of binary operation.">二項演算の型を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the left operand.">左オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the right operand.">右オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that specifies the implementing method.">実装メソッドを指定する <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; that represents a type conversion function. This parameter is used only if &lt;paramref name=&quot;binaryType&quot; /&gt; is &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Coalesce&quot; /&gt; or compound assignment.">型変換関数を表す <see cref="T:System.Linq.Expressions.LambdaExpression" />。 このパラメーターは、<paramref name="binaryType" /> が <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> または複合割り当てである場合にのみ使用されます。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that results from calling the appropriate factory method.">適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;binaryType&quot; /&gt; does not correspond to a binary expression node.">
        <paramref name="binaryType" /> は、二項式ノードには対応していません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; representing a catch statement with the specified elements.">指定された要素を使用して、catch ステートメントを表す <see cref="T:System.Linq.Expressions.CatchBlock" /> を作成します。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; of &lt;see cref=&quot;T:System.Exception&quot; /&gt; this &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; will handle.">この <see cref="P:System.Linq.Expressions.Expression.Type" /> によって処理される <see cref="T:System.Exception" /> の <see cref="T:System.Linq.Expressions.CatchBlock" />。</param>
      <param name="variable" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; representing a reference to the &lt;see cref=&quot;T:System.Exception&quot; /&gt; object caught by this handler.">このハンドラーによってキャッチされる <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトへの参照を表す <see cref="T:System.Exception" />。</param>
      <param name="body" vsli:raw="The body of the catch statement.">catch ステートメントの本体。</param>
      <param name="filter" vsli:raw="The body of the &lt;see cref=&quot;T:System.Exception&quot; /&gt; filter.">
        <see cref="T:System.Exception" /> フィルターの本体。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動的操作の実行時バインダー。</param>
      <param name="arguments" vsli:raw="The arguments to the dynamic operation.">動的操作の引数。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" />、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; and one argument.">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動的操作の実行時バインダー。</param>
      <param name="arg0" vsli:raw="The argument to the dynamic operation.">動的操作の引数。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" />、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; and two arguments.">指定された <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> および 2 つの引数によってバインドされる動的操作を表す <see cref="T:System.Linq.Expressions.DynamicExpression" /> を作成します。</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動的操作の実行時バインダー。</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">動的操作の 1 番目の引数。</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">動的操作の 2 番目の引数。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" />、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; and three arguments.">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> および 3 つの引数によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動的操作の実行時バインダー。</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">動的操作の 1 番目の引数。</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">動的操作の 2 番目の引数。</param>
      <param name="arg2" vsli:raw="The third argument to the dynamic operation.">動的操作の 3 番目の引数。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" />、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; and four arguments.">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> および 4 つの引数によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動的操作の実行時バインダー。</param>
      <param name="arg0" vsli:raw="The first argument to the dynamic operation.">動的操作の 1 番目の引数。</param>
      <param name="arg1" vsli:raw="The second argument to the dynamic operation.">動的操作の 2 番目の引数。</param>
      <param name="arg2" vsli:raw="The third argument to the dynamic operation.">動的操作の 3 番目の引数。</param>
      <param name="arg3" vsli:raw="The fourth argument to the dynamic operation.">動的操作の 4 番目の引数。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" />、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that represents a dynamic operation bound by the provided &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt;.">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</summary>
      <param name="delegateType" vsli:raw="The type of the delegate used by the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSite&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</param>
      <param name="binder" vsli:raw="The runtime binder for the dynamic operation.">動的操作の実行時バインダー。</param>
      <param name="arguments" vsli:raw="The arguments to the dynamic operation.">動的操作の引数。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt; that has &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Dynamic&quot; /&gt; and has the &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.DelegateType&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Binder&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.DynamicExpression.Arguments&quot; /&gt; set to the specified values.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" />、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a jump of the specified &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpressionKind&quot; /&gt;. The value passed to the label upon jumping can also be specified.">指定した <see cref="T:System.Linq.Expressions.GotoExpression" /> のジャンプを表す <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> を作成します。 ジャンプ時にラベルに渡す値も指定できます。</summary>
      <param name="kind" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpressionKind&quot; /&gt; of the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> の <see cref="T:System.Linq.Expressions.GotoExpressionKind" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value" vsli:raw="The value that will be passed to the associated label upon jumping.">ジャンプ時に関連付けられているラベルに渡される値。</param>
      <param name="type" vsli:raw="An &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to &lt;paramref name=&quot;kind&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to &lt;paramref name=&quot;type&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; to be passed to the target label upon jumping.">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> と等しい <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />、<paramref name="kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="type" /> を含む <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt; that represents accessing an indexed property in an object.">オブジェクトのインデックス付きプロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</summary>
      <param name="instance" vsli:raw="The object to which the property belongs. It should be null if the property is &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;shared&quot; /&gt; in Visual Basic).">プロパティが属するオブジェクト。 プロパティが <see langword="static" /> (Visual Basic では <see langword="shared" />) の場合は、null にします。</param>
      <param name="indexer" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; representing the property to index.">インデックス化するプロパティを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arguments" vsli:raw="An &lt;c&gt;IEnumerable&amp;lt;Expression&amp;gt;&lt;/c&gt; (&lt;c&gt;IEnumerable (Of Expression)&lt;/c&gt; in Visual Basic) that contains the arguments that will be used to index the property.">プロパティのインデックス化に使用する引数を含む <c>IEnumerable&lt;Expression&gt;</c> (Visual Basic では <c>IEnumerable (Of Expression)</c>)。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that represents accessing either a field or a property.">フィールドまたはプロパティのいずれかへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the object that the member belongs to. This can be null for static members.">メンバーが属するオブジェクトを表す <see cref="T:System.Linq.Expressions.Expression" />。 静的メンバーの場合は null を指定できます。</param>
      <param name="member" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that describes the field or property to be accessed.">アクセス先のフィールドまたはプロパティを記述する <see cref="T:System.Reflection.MemberInfo" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that results from calling the appropriate factory method.">適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="member" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; does not represent a field or property.">
        <paramref name="member" /> は、フィールドまたはプロパティを表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt; representing a try block with the specified elements.">指定された要素を使用して、try ブロックを表す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</summary>
      <param name="type" vsli:raw="The result type of the try expression. If null, body and all handlers must have identical type.">try 式の結果の型。 null の場合は、本体およびすべてのハンドラーの型が同一である必要があります。</param>
      <param name="body" vsli:raw="The body of the try block.">try ブロックの本体。</param>
      <param name="finally" vsli:raw="The body of the finally block. Pass null if the try block has no finally block associated with it.">finally ブロックの本体。 try ブロックに関連付けられている finally ブロックがない場合は、null を渡します。</param>
      <param name="fault" vsli:raw="The body of the fault block. Pass null if the try block has no fault block associated with it.">fault ブロックの本体。 try ブロックに関連付けられている fault ブロックがない場合は、null を渡します。</param>
      <param name="handlers" vsli:raw="A collection of &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt;s representing the catch statements to be associated with the try block.">try ブロックに関連付ける catch ステートメントを表す <see cref="T:System.Linq.Expressions.CatchBlock" /> のコレクション。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;, given an operand, by calling the appropriate factory method.">適切なファクトリ メソッドを呼び出すことにより、オペランドを指定して、<see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <param name="unaryType" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that specifies the type of unary operation.">単項演算の型を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="operand" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the operand.">オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that specifies the type to be converted to (pass &lt;see langword=&quot;null&quot; /&gt; if not applicable).">変換後の型を指定する <see cref="T:System.Type" /> (該当しない場合は <see langword="null" /> を渡します)。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that results from calling the appropriate factory method.">適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;operand&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="operand" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;unaryType&quot; /&gt; does not correspond to a unary expression node.">
        <paramref name="unaryType" /> は、単項式ノードには対応していません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;, given an operand and implementing method, by calling the appropriate factory method.">適切なファクトリ メソッドを呼び出すことにより、オペランドおよび実装メソッドを指定して、<see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <param name="unaryType" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that specifies the type of unary operation.">単項演算の型を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="operand" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the operand.">オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that specifies the type to be converted to (pass &lt;see langword=&quot;null&quot; /&gt; if not applicable).">変換後の型を指定する <see cref="T:System.Type" /> (該当しない場合は <see langword="null" /> を渡します)。</param>
      <param name="method" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that results from calling the appropriate factory method.">適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;operand&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="operand" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;unaryType&quot; /&gt; does not correspond to a unary expression node.">
        <paramref name="unaryType" /> は、単項式ノードには対応していません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberMemberBinding&quot; /&gt; that represents the recursive initialization of members of a field or property.">フィールドまたはプロパティのメンバーの再帰的な初期化を表す <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> を作成します。</summary>
      <param name="member" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MemberInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</param>
      <param name="bindings" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberMemberBinding.Bindings&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.MemberBinding" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberMemberBinding&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.MemberBinding&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MemberMemberBinding.Bindings&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; or &lt;paramref name=&quot;bindings&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="member" /> または <paramref name="bindings" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; does not represent a field or property.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property of an element of &lt;paramref name=&quot;bindings&quot; /&gt; does not represent a member of the type of the field or property that &lt;paramref name=&quot;member&quot; /&gt; represents.">
        <paramref name="member" /> は、フィールドまたはプロパティを表しません。  

または - 
<paramref name="bindings" /> の要素の <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティは、<paramref name="member" /> が表すフィールドまたはプロパティの型のメンバーを表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberMemberBinding&quot; /&gt; that represents the recursive initialization of members of a field or property.">フィールドまたはプロパティのメンバーの再帰的な初期化を表す <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> を作成します。</summary>
      <param name="member" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MemberInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</param>
      <param name="bindings" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberMemberBinding.Bindings&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.MemberBinding" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> オブジェクトの配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberMemberBinding&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.MemberBinding&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MemberMemberBinding.Bindings&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; or &lt;paramref name=&quot;bindings&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="member" /> または <paramref name="bindings" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; does not represent a field or property.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property of an element of &lt;paramref name=&quot;bindings&quot; /&gt; does not represent a member of the type of the field or property that &lt;paramref name=&quot;member&quot; /&gt; represents.">
        <paramref name="member" /> は、フィールドまたはプロパティを表しません。  

または - 
<paramref name="bindings" /> の要素の <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティは、<paramref name="member" /> が表すフィールドまたはプロパティの型のメンバーを表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberMemberBinding&quot; /&gt; that represents the recursive initialization of members of a member that is accessed by using a property accessor method.">プロパティ アクセサー メソッドを使用してアクセスされるメンバーのメンバーの再帰的な初期化を表す <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> を作成します。</summary>
      <param name="propertyAccessor" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents a property accessor method.">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="bindings" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberMemberBinding.Bindings&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.MemberBinding" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberMemberBinding&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.MemberBinding&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; that represents the property accessed in &lt;paramref name=&quot;propertyAccessor&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.MemberMemberBinding.Bindings&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> に設定された <see cref="T:System.Reflection.PropertyInfo" /> プロパティ、および指定した値に設定された <paramref name="propertyAccessor" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; or &lt;paramref name=&quot;bindings&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyAccessor" /> または <paramref name="bindings" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; does not represent a property accessor method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property of an element of &lt;paramref name=&quot;bindings&quot; /&gt; does not represent a member of the type of the property accessed by the method that &lt;paramref name=&quot;propertyAccessor&quot; /&gt; represents.">
        <paramref name="propertyAccessor" /> はプロパティ アクセサー メソッドを表していません。  

または - 
<paramref name="bindings" /> の要素の <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティは、<paramref name="propertyAccessor" /> が表すメソッドによりアクセスされるプロパティの型のメンバーを表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberMemberBinding&quot; /&gt; that represents the recursive initialization of members of a member that is accessed by using a property accessor method.">プロパティ アクセサー メソッドを使用してアクセスされるメンバーのメンバーの再帰的な初期化を表す <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> を作成します。</summary>
      <param name="propertyAccessor" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents a property accessor method.">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="bindings" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberMemberBinding.Bindings&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.MemberBinding" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> オブジェクトの配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberMemberBinding&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.BindingType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.MemberBindingType.MemberBinding&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; that represents the property accessed in &lt;paramref name=&quot;propertyAccessor&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.MemberMemberBinding.Bindings&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> に設定された <see cref="T:System.Reflection.PropertyInfo" /> プロパティ、および指定した値に設定された <paramref name="propertyAccessor" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; or &lt;paramref name=&quot;bindings&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyAccessor" /> または <paramref name="bindings" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; does not represent a property accessor method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property of an element of &lt;paramref name=&quot;bindings&quot; /&gt; does not represent a member of the type of the property accessed by the method that &lt;paramref name=&quot;propertyAccessor&quot; /&gt; represents.">
        <paramref name="propertyAccessor" /> はプロパティ アクセサー メソッドを表していません。  

または - 
<paramref name="bindings" /> の要素の <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティは、<paramref name="propertyAccessor" /> が表すメソッドによりアクセスされるプロパティの型のメンバーを表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary vsli:raw="Represents an expression that creates a new object and initializes a property of the object.">新しいオブジェクトを作成し、そのオブジェクトのプロパティを初期化する式を表します。</summary>
      <param name="newExpression" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.NewExpression&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />。</param>
      <param name="bindings" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.Bindings&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.MemberBinding" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberInitExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MemberInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.NewExpression&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.Bindings&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt; or &lt;paramref name=&quot;bindings&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="newExpression" /> または <paramref name="bindings" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property of an element of &lt;paramref name=&quot;bindings&quot; /&gt; does not represent a member of the type that &lt;paramref name=&quot;newExpression&quot; /&gt;.Type represents.">
        <paramref name="bindings" /> の要素の <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティは、<paramref name="newExpression" />.Type が表す型のメンバーを表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberInitExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberInitExpression" /> を作成します。</summary>
      <param name="newExpression" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.NewExpression&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />。</param>
      <param name="bindings" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.Bindings&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.MemberBinding" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> オブジェクトの配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberInitExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MemberInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.NewExpression&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.Bindings&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;newExpression&quot; /&gt; or &lt;paramref name=&quot;bindings&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="newExpression" /> または <paramref name="bindings" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MemberBinding.Member&quot; /&gt; property of an element of &lt;paramref name=&quot;bindings&quot; /&gt; does not represent a member of the type that &lt;paramref name=&quot;newExpression&quot; /&gt;.Type represents.">
        <paramref name="bindings" /> の要素の <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティは、<paramref name="newExpression" />.Type が表す型のメンバーを表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic remainder operation.">算術剰余演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Modulo&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The modulus operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">剰余演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic remainder operation.">算術剰余演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Modulo&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the modulus operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には剰余演算子が定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a remainder assignment operation.">剰余代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ModuloAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a remainder assignment operation.">剰余代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ModuloAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a remainder assignment operation.">剰余代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.ModuloAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic multiplication operation that does not have overflow checking.">オーバーフロー チェックを行わない算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Multiply&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The multiplication operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">乗算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic multiplication operation that does not have overflow checking.">オーバーフロー チェックを行わない算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Multiply&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the multiplication operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> は <see langword="null" /> で、乗算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a multiplication assignment operation that does not have overflow checking.">オーバーフロー チェックを行わない乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MultiplyAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a multiplication assignment operation that does not have overflow checking.">オーバーフロー チェックを行わない乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MultiplyAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a multiplication assignment operation that does not have overflow checking.">オーバーフロー チェックを行わない乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MultiplyAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a multiplication assignment operation that has overflow checking.">オーバーフロー チェックを行う乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a multiplication assignment operation that has overflow checking.">オーバーフロー チェックを行う乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a multiplication assignment operation that has overflow checking.">オーバーフロー チェックを行う乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic multiplication operation that has overflow checking.">オーバーフロー チェックを行う算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MultiplyChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The multiplication operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">乗算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic multiplication operation that has overflow checking.">オーバーフロー チェックを行う算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MultiplyChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the multiplication operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> は <see langword="null" /> で、乗算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents an arithmetic negation operation.">算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Negate&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The unary minus operator is not defined for &lt;paramref name=&quot;expression&quot; /&gt;.Type.">単項マイナス演算子は、<paramref name="expression" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents an arithmetic negation operation.">算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Negate&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly one argument.">
        <paramref name="method" /> は <see langword="null" /> ではなく、それが表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではないか、受け取る引数が 1 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the unary minus operator is not defined for &lt;paramref name=&quot;expression&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="method" /> は <see langword="null" /> で、単項マイナス演算子は <paramref name="expression" />.Type に対して定義されていません。  
または 
 <paramref name="expression" />.Type (または null 許容値型の場合はその対応する null 非許容型) は、<paramref name="method" /> によって表されるメソッドの引数型に代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents an arithmetic negation operation that has overflow checking.">オーバーフロー チェックを行う算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NegateChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The unary minus operator is not defined for &lt;paramref name=&quot;expression&quot; /&gt;.Type.">単項マイナス演算子は、<paramref name="expression" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents an arithmetic negation operation that has overflow checking. The implementing method can be specified.">オーバーフロー チェックを行う算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。 実装メソッドを指定できます。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NegateChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly one argument.">
        <paramref name="method" /> は <see langword="null" /> ではなく、それが表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではないか、受け取る引数が 1 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the unary minus operator is not defined for &lt;paramref name=&quot;expression&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="method" /> は <see langword="null" /> で、単項マイナス演算子は <paramref name="expression" />.Type に対して定義されていません。  

または - 
<paramref name="expression" />.Type (または null 許容値型の場合はその対応する null 非許容型) は、<paramref name="method" /> によって表されるメソッドの引数型に代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that represents calling the specified constructor that takes no arguments.">引数を受け取らない指定したコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</summary>
      <param name="constructor" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.ConstructorInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.New&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.New" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;constructor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="constructor" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The constructor that &lt;paramref name=&quot;constructor&quot; /&gt; represents has at least one parameter.">
        <paramref name="constructor" /> が表すコンストラクターには、少なくとも 1 つのパラメーターがあります。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that represents calling the specified constructor with the specified arguments.">指定した引数を持つ指定したコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</summary>
      <param name="constructor" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.ConstructorInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Arguments&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.New&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Arguments&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.New" /> プロパティおよび <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;constructor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;arguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="constructor" /> は <see langword="null" />です。  

または - 
<paramref name="arguments" /> の要素は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;arguments&quot; /&gt; parameter does not contain the same number of elements as the number of parameters for the constructor that &lt;paramref name=&quot;constructor&quot; /&gt; represents.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the type of the corresponding parameter of the constructor that &lt;paramref name=&quot;constructor&quot; /&gt; represents.">
        <paramref name="arguments" /> パラメーターに、<paramref name="constructor" /> が表すコンストラクターのパラメーターの数と同じ数の要素が格納されていません。  
または 
<paramref name="arguments" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを、<paramref name="constructor" /> を表すコンストラクターの対応するパラメーターの型に割り当てることができません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified.">指定した引数を持つ指定したコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。 コンストラクターが初期化したフィールドにアクセスするメンバーが指定されます。</summary>
      <param name="constructor" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.ConstructorInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Arguments&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />。</param>
      <param name="members" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Members&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Reflection.MemberInfo" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewExpression.Members" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.New&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Arguments&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Members&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.New" />、<see cref="P:System.Linq.Expressions.NewExpression.Constructor" />、および <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.NewExpression.Members" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;constructor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;arguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;members&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="constructor" /> が <see langword="null" /> です。  

または - 
<paramref name="arguments" /> の要素は <see langword="null" /> です。  

または - 
<paramref name="members" /> の要素は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;arguments&quot; /&gt; parameter does not contain the same number of elements as the number of parameters for the constructor that &lt;paramref name=&quot;constructor&quot; /&gt; represents.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the type of the corresponding parameter of the constructor that &lt;paramref name=&quot;constructor&quot; /&gt; represents.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;members&quot; /&gt; parameter does not have the same number of elements as &lt;paramref name=&quot;arguments&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;arguments&quot; /&gt; has a &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of &lt;paramref name=&quot;members&quot; /&gt;.">
        <paramref name="arguments" /> パラメーターに、<paramref name="constructor" /> が表すコンストラクターのパラメーターの数と同じ数の要素が格納されていません。  

または - 
<paramref name="arguments" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを、<paramref name="constructor" /> を表すコンストラクターの対応するパラメーターの型に割り当てることができません。  

または - 
<paramref name="members" /> パラメーターに、<paramref name="arguments" /> と同じ数の要素がありません。  

または - 
<paramref name="arguments" /> の要素に、<paramref name="members" /> の対応する要素により表されるメンバーの型に代入可能な型を表す <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティがあります。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified as an array.">指定した引数を持つ指定したコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。 コンストラクターが初期化したフィールドにアクセスするメンバーが配列として指定されます。</summary>
      <param name="constructor" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.ConstructorInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Arguments&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />。</param>
      <param name="members" vsli:raw="An array of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Members&quot; /&gt; collection.">
        <see cref="T:System.Reflection.MemberInfo" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.NewExpression.Members" /> オブジェクトの配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.New&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Arguments&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Members&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.New" />、<see cref="P:System.Linq.Expressions.NewExpression.Constructor" />、および <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.NewExpression.Members" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;constructor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;arguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;members&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="constructor" /> が <see langword="null" /> です。  
または 
<paramref name="arguments" /> の要素は <see langword="null" /> です。  

または - 
<paramref name="members" /> の要素は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;arguments&quot; /&gt; parameter does not contain the same number of elements as the number of parameters for the constructor that &lt;paramref name=&quot;constructor&quot; /&gt; represents.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the type of the corresponding parameter of the constructor that &lt;paramref name=&quot;constructor&quot; /&gt; represents.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;members&quot; /&gt; parameter does not have the same number of elements as &lt;paramref name=&quot;arguments&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;arguments&quot; /&gt; has a &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of &lt;paramref name=&quot;members&quot; /&gt;.">
        <paramref name="arguments" /> パラメーターに、<paramref name="constructor" /> が表すコンストラクターのパラメーターの数と同じ数の要素が格納されていません。  
または 
<paramref name="arguments" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを、<paramref name="constructor" /> を表すコンストラクターの対応するパラメーターの型に割り当てることができません。  

または - 
<paramref name="members" /> パラメーターに、<paramref name="arguments" /> と同じ数の要素がありません。  

または 
<paramref name="arguments" /> の要素に、<paramref name="members" /> の対応する要素により表されるメンバーの型に代入可能な型を表す <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティがあります。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that represents calling the specified constructor with the specified arguments.">指定した引数を持つ指定したコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</summary>
      <param name="constructor" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.ConstructorInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
      <param name="arguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Arguments&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> オブジェクトの配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.New&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Arguments&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.New" /> プロパティおよび <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;constructor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;arguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="constructor" /> は <see langword="null" />です。  

または - 
<paramref name="arguments" /> の要素は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;arguments&quot; /&gt; does match the number of parameters for the constructor that &lt;paramref name=&quot;constructor&quot; /&gt; represents.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;arguments&quot; /&gt; is not assignable to the type of the corresponding parameter of the constructor that &lt;paramref name=&quot;constructor&quot; /&gt; represents.">
        <paramref name="arguments" /> の長さが、<paramref name="constructor" /> を表すコンストラクターのパラメーターの数と一致しません。  
または 
<paramref name="arguments" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを、<paramref name="constructor" /> を表すコンストラクターの対応するパラメーターの型に割り当てることができません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that represents calling the parameterless constructor of the specified type.">指定した型のパラメーターなしのコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that has a constructor that takes no arguments.">引数を受け取らないコンストラクターを持つ <see cref="T:System.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.New&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Constructor&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; that represents the constructor without parameters for the specified type.">
        <see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定された型のパラメーターなしのコンストラクターを表す <see cref="F:System.Linq.Expressions.ExpressionType.New" /> に設定された <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> プロパティを含む <see cref="T:System.Reflection.ConstructorInfo" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The type that &lt;paramref name=&quot;type&quot; /&gt; represents does not have a constructor without parameters.">
        <paramref name="type" /> が表す型には、パラメーターなしのコンストラクターがありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewArrayExpression&quot; /&gt; that represents creating an array that has a specified rank.">指定したランクを持つ配列の作成を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the element type of the array.">配列の要素の型を表す <see cref="T:System.Type" />。</param>
      <param name="bounds" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Expressions&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewArrayExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NewArrayBounds&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Expressions&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.NewArrayExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;bounds&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;bounds&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> または <paramref name="bounds" /> が <see langword="null" /> です。  

または - 
<paramref name="bounds" /> の要素は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;bounds&quot; /&gt; does not represent an integral type.">
        <paramref name="bounds" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、整数型を表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewArrayExpression&quot; /&gt; that represents creating an array that has a specified rank.">指定したランクを持つ配列の作成を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the element type of the array.">配列の要素の型を表す <see cref="T:System.Type" />。</param>
      <param name="bounds" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Expressions&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> オブジェクトの配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewArrayExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NewArrayBounds&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Expressions&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.NewArrayExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;bounds&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;bounds&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> または <paramref name="bounds" /> が <see langword="null" /> です。  

または - 
<paramref name="bounds" /> の要素は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;bounds&quot; /&gt; does not represent an integral type.">
        <paramref name="bounds" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、整数型を表しません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewArrayExpression&quot; /&gt; that represents creating a one-dimensional array and initializing it from a list of elements.">1 次元配列の作成と、要素のリストからの初期化を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the element type of the array.">配列の要素の型を表す <see cref="T:System.Type" />。</param>
      <param name="initializers" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Expressions&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewArrayExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NewArrayInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Expressions&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.NewArrayExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> または <paramref name="initializers" /> が <see langword="null" /> です。  
または 
<paramref name="initializers" /> の要素は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;initializers&quot; /&gt; represents a type that is not assignable to the type that &lt;paramref name=&quot;type&quot; /&gt; represents.">
        <paramref name="initializers" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="type" /> が表す型に代入できない型を表します。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.NewArrayExpression&quot; /&gt; that represents creating a one-dimensional array and initializing it from a list of elements.">1 次元配列の作成と、要素のリストからの初期化を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the element type of the array.">配列の要素の型を表す <see cref="T:System.Type" />。</param>
      <param name="initializers" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Expressions&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> オブジェクトの配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewArrayExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NewArrayInit&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Expressions&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.NewArrayExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;initializers&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> または <paramref name="initializers" /> が <see langword="null" /> です。  

または - 
<paramref name="initializers" /> の要素は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property of an element of &lt;paramref name=&quot;initializers&quot; /&gt; represents a type that is not assignable to the type &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="initializers" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="type" /> 型に代入可能な型を表します。</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.NodeType">
      <summary vsli:raw="Gets the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を取得します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; values.">
        <see cref="T:System.Linq.Expressions.ExpressionType" /> 値のいずれか。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a bitwise complement operation.">ビットごとの補数演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Not&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The unary not operator is not defined for &lt;paramref name=&quot;expression&quot; /&gt;.Type.">単項 NOT 演算子は、<paramref name="expression" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a bitwise complement operation. The implementing method can be specified.">ビットごとの補数演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。 実装メソッドを指定できます。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Not&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly one argument.">
        <paramref name="method" /> は <see langword="null" /> ではなく、それが表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではないか、受け取る引数が 1 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the unary not operator is not defined for &lt;paramref name=&quot;expression&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="method" /> は <see langword="null" /> で、単項 NOT 演算子は <paramref name="expression" />.Type に対して定義されていません。  
または 
 <paramref name="expression" />.Type (または null 許容値型の場合はその対応する null 非許容型) は、<paramref name="method" /> によって表されるメソッドの引数型に代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an inequality comparison.">非等価比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NotEqual&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The inequality operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">非等値演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an inequality comparison.">非等価比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to set &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NotEqual&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the inequality operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> は <see langword="null" /> で、非等値演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Returns the expression representing the ones complement.">1 の補数を表す式を返します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Returns the expression representing the ones complement.">1 の補数を表す式を返します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise &lt;see langword=&quot;OR&quot; /&gt; operation.">ビットごとの <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す <see langword="OR" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Or&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The bitwise &lt;see langword=&quot;OR&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">ビットごとの <see langword="OR" /> 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise &lt;see langword=&quot;OR&quot; /&gt; operation.">ビットごとの <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す <see langword="OR" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Or&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Or" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the bitwise &lt;see langword=&quot;OR&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type にはビット処理 <see langword="OR" /> 演算子が定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise OR assignment operation.">ビットごとの OR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.OrAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise OR assignment operation.">ビットごとの OR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.OrAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise OR assignment operation.">ビットごとの OR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.OrAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a conditional &lt;see langword=&quot;OR&quot; /&gt; operation that evaluates the second operand only if the first operand evaluates to &lt;see langword=&quot;false&quot; /&gt;.">1 番目のオペランドが <see cref="T:System.Linq.Expressions.BinaryExpression" /> に評価された場合にのみ 2 番目のオペランドを評価する条件付き <see langword="OR" /> 演算を表す <see langword="false" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.OrElse&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The bitwise &lt;see langword=&quot;OR&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type are not the same Boolean type.">ビットごとの <see langword="OR" /> 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。  

または - 
<paramref name="left" />.Type と <paramref name="right" />.Type は同じブール型ではありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a conditional &lt;see langword=&quot;OR&quot; /&gt; operation that evaluates the second operand only if the first operand evaluates to &lt;see langword=&quot;false&quot; /&gt;.">1 番目のオペランドが <see cref="T:System.Linq.Expressions.BinaryExpression" /> に評価された場合にのみ 2 番目のオペランドを評価する条件付き <see langword="OR" /> 演算を表す <see langword="false" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.OrElse&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the bitwise &lt;see langword=&quot;OR&quot; /&gt; operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type are not the same Boolean type.">
        <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type にはビット処理 <see langword="OR" /> 演算子が定義されていません。  

または - 
<paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type と <paramref name="right" />.Type は同じブール型ではありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; node that can be used to identify a parameter or a variable in an expression tree.">式ツリーでパラメーターまたは変数を識別するために使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</summary>
      <param name="type" vsli:raw="The type of the parameter or variable.">パラメーターまたは変数の型。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; node with the specified name and type.">指定した名前および型の <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノード。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; node that can be used to identify a parameter or a variable in an expression tree.">式ツリーでパラメーターまたは変数を識別するために使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</summary>
      <param name="type" vsli:raw="The type of the parameter or variable.">パラメーターまたは変数の型。</param>
      <param name="name" vsli:raw="The name of the parameter or variable, used for debugging or printing purpose only.">デバッグまたは印刷の目的でのみ使用されるパラメーターまたは変数の名前。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Parameter&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.ParameterExpression.Name&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" /> プロパティおよび <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを含む <see cref="P:System.Linq.Expressions.ParameterExpression.Name" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.">式の代入と、それに続く元の式の値を 1 つ減らすデクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to apply the operations on.">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the resultant expression.">結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.">式の代入と、それに続く元の式の値を 1 つ減らすデクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to apply the operations on.">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the resultant expression.">結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.">式の代入と、それに続く元の式の値を 1 つ増やすインクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to apply the operations on.">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the resultant expression.">結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.">式の代入と、それに続く元の式の値を 1 つ増やすインクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to apply the operations on.">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the resultant expression.">結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents raising a number to a power.">数値の累乗を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Power&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The exponentiation operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;left&quot; /&gt;.Type and/or &lt;paramref name=&quot;right&quot; /&gt;.Type are not &lt;see cref=&quot;T:System.Double&quot; /&gt;.">指数演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。  
または 
 <paramref name="left" />.Type や <paramref name="right" />.Type は <see cref="T:System.Double" /> ではありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents raising a number to a power.">数値の累乗を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Power&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Power" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the exponentiation operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;left&quot; /&gt;.Type and/or &lt;paramref name=&quot;right&quot; /&gt;.Type are not &lt;see cref=&quot;T:System.Double&quot; /&gt;.">
        <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には累乗演算子が定義されていません。  
または 
 <paramref name="method" /> は <see langword="null" /> であり、<paramref name="left" />.Type および/または <paramref name="right" />.Type は <see cref="T:System.Double" /> ではありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents raising an expression to a power and assigning the result back to the expression.">式を累乗し、結果を元の式に代入する操作を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.PowerAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents raising an expression to a power and assigning the result back to the expression.">式を累乗し、結果を元の式に代入する操作を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.PowerAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents raising an expression to a power and assigning the result back to the expression.">式を累乗し、結果を元の式に代入する操作を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.PowerAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that decrements the expression by 1 and assigns the result back to the expression.">式の値を 1 つデクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to apply the operations on.">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the resultant expression.">結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that decrements the expression by 1 and assigns the result back to the expression.">式の値を 1 つデクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to apply the operations on.">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the resultant expression.">結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that increments the expression by 1 and assigns the result back to the expression.">式の値を 1 つインクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to apply the operations on.">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the resultant expression.">結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that increments the expression by 1 and assigns the result back to the expression.">式の値を 1 つインクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to apply the operations on.">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the resultant expression.">結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that represents accessing a property by using a property accessor method.">プロパティ アクセサー メソッドを使用することによるプロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; property equal to. This can be null for static properties.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。 静的プロパティの場合は null を指定できます。</param>
      <param name="propertyAccessor" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents a property accessor method.">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MemberAccess&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; property set to &lt;paramref name=&quot;expression&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Member&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; that represents the property accessed in &lt;paramref name=&quot;propertyAccessor&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティ、<paramref name="expression" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> に設定された <see cref="T:System.Reflection.PropertyInfo" /> プロパティを含む <paramref name="propertyAccessor" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyAccessor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method that &lt;paramref name=&quot;propertyAccessor&quot; /&gt; represents is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) and &lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyAccessor" /> が <see langword="null" /> です。  

または - 
<paramref name="propertyAccessor" /> が表すメソッドは <see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、<paramref name="expression" /> は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt;.Type is not assignable to the declaring type of the method represented by &lt;paramref name=&quot;propertyAccessor&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method that &lt;paramref name=&quot;propertyAccessor&quot; /&gt; represents is not a property accessor method.">
        <paramref name="expression" />.Type は、<paramref name="propertyAccessor" /> の表すメソッドの宣言型に割り当てることができません。  

または - 
<paramref name="propertyAccessor" /> が表すメソッドは、プロパティ アクセサー メソッドではありません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that represents accessing a property.">プロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; property equal to. This can be null for static properties.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。 静的プロパティの場合は null を指定できます。</param>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Member&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.PropertyInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberExpression.Member" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MemberAccess&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Member&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberExpression.Member" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;property&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property that &lt;paramref name=&quot;property&quot; /&gt; represents is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) and &lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="property" /> は <see langword="null" />です。  

または - 
<paramref name="property" /> が表すプロパティは <see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、<paramref name="expression" /> は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt;.Type is not assignable to the declaring type of the property that &lt;paramref name=&quot;property&quot; /&gt; represents.">
        <paramref name="expression" />.Type は、<paramref name="property" /> が表すプロパティの宣言型に代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt; representing the access to an indexed property.">インデックス付きプロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</summary>
      <param name="instance" vsli:raw="The object to which the property belongs. If the property is static/shared, it must be null.">プロパティが属するオブジェクト。 プロパティが static (Visual Basic では Shared) の場合は、null にする必要があります。</param>
      <param name="indexer" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; that represents the property to index.">インデックス化するプロパティを表す <see cref="T:System.Reflection.PropertyInfo" />。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects that are used to index the property.">プロパティのインデックス化に使用する <see cref="T:System.Collections.Generic.IEnumerable`1" /> オブジェクトの <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt; representing the access to an indexed property.">インデックス付きプロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</summary>
      <param name="instance" vsli:raw="The object to which the property belongs. If the property is static/shared, it must be null.">プロパティが属するオブジェクト。 プロパティが static (Visual Basic では Shared) の場合は、null にする必要があります。</param>
      <param name="indexer" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; that represents the property to index.">インデックス化するプロパティを表す <see cref="T:System.Reflection.PropertyInfo" />。</param>
      <param name="arguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects that are used to index the property.">プロパティのインデックス化に使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that represents accessing a property.">プロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; whose &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; contains a property named &lt;paramref name=&quot;propertyName&quot; /&gt;. This can be &lt;see langword=&quot;null&quot; /&gt; for static properties.">
        <see cref="T:System.Linq.Expressions.Expression" /> に <see cref="P:System.Linq.Expressions.Expression.Type" /> という名前のプロパティが含まれている <paramref name="propertyName" />。 静的プロパティの場合は <see langword="null" /> を指定できます。</param>
      <param name="propertyName" vsli:raw="The name of a property to be accessed.">アクセスするプロパティの名前。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MemberAccess&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; property set to &lt;paramref name=&quot;expression&quot; /&gt;, and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Member&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; that represents the property denoted by &lt;paramref name=&quot;propertyName&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティ、および <paramref name="expression" /> により示されるプロパティを表す <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> に設定された <see cref="T:System.Reflection.PropertyInfo" /> プロパティを含む <paramref name="propertyName" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; or &lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> または <paramref name="propertyName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="No property named &lt;paramref name=&quot;propertyName&quot; /&gt; is defined in &lt;paramref name=&quot;expression&quot; /&gt;.Type or its base types.">
        <paramref name="propertyName" />.Type またはその基本型では <paramref name="expression" /> という名前のプロパティが定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt; representing the access to an indexed property.">インデックス付きプロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</summary>
      <param name="instance" vsli:raw="The object to which the property belongs. If the property is static/shared, it must be null.">プロパティが属するオブジェクト。 プロパティが static (Visual Basic では Shared) の場合は、null にする必要があります。</param>
      <param name="propertyName" vsli:raw="The name of the indexer.">インデクサーの名前。</param>
      <param name="arguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects that are used to index the property.">プロパティのインデックス化に使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; accessing a property.">プロパティにアクセスする <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="The containing object of the property. This can be null for static properties.">プロパティの格納オブジェクト。 静的プロパティの場合は null を指定できます。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; that contains the property.">プロパティを格納する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="propertyName" vsli:raw="The property to be accessed.">アクセスするプロパティ。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that represents accessing a property or field.">プロパティまたはフィールドへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; whose &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; contains a property or field named &lt;paramref name=&quot;propertyOrFieldName&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" /> に <see cref="P:System.Linq.Expressions.Expression.Type" /> という名前のプロパティまたはフィールドが含まれている <paramref name="propertyOrFieldName" />。 静的メンバーの場合は null を指定できます。</param>
      <param name="propertyOrFieldName" vsli:raw="The name of a property or field to be accessed.">アクセスするプロパティまたはフィールドの名前。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.MemberAccess&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; property set to &lt;paramref name=&quot;expression&quot; /&gt;, and the &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Member&quot; /&gt; property set to the &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; that represents the property or field denoted by &lt;paramref name=&quot;propertyOrFieldName&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティ、および <paramref name="expression" /> によって示されるプロパティまたはフィールドを表す <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> または <see cref="T:System.Reflection.PropertyInfo" /> に設定された <see cref="T:System.Reflection.FieldInfo" /> プロパティを含む <paramref name="propertyOrFieldName" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; or &lt;paramref name=&quot;propertyOrFieldName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> または <paramref name="propertyOrFieldName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="No property or field named &lt;paramref name=&quot;propertyOrFieldName&quot; /&gt; is defined in &lt;paramref name=&quot;expression&quot; /&gt;.Type or its base types.">
        <paramref name="propertyOrFieldName" />.Type またはその基本型では <paramref name="expression" /> という名前のプロパティまたはフィールドが定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents an expression that has a constant value of type &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 型の定数値を持つ式を表す <see cref="T:System.Linq.Expressions.Expression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Quote&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Reduce">
      <summary vsli:raw="Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.">このノードをより単純な式に変形します。 CanReduce が true を返す場合、これは有効な式を返します。 このメソッドは、それ自体も単純化する必要がある別のノードを返す場合があります。</summary>
      <returns vsli:raw="The reduced expression.">単純化された式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceAndCheck">
      <summary vsli:raw="Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.">このノードをより単純な式に変形します。 CanReduce が true を返す場合、これは有効な式を返します。 このメソッドは、それ自体も単純化する必要がある別のノードを返す場合があります。</summary>
      <returns vsli:raw="The reduced expression.">単純化された式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceExtensions">
      <summary vsli:raw="Reduces the expression to a known node type (that is not an Extension node) or just returns the expression if it is already a known type.">式を既知のノード型 (拡張ノードではない型) に単純化し、それが既に既知の型である場合は単に式を返します。</summary>
      <returns vsli:raw="The reduced expression.">単純化された式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a reference equality comparison.">参照が等値であるかどうかの比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Equal&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a reference inequality comparison.">参照が等値でないかどうかの比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NotEqual&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a rethrowing of an exception.">例外の再スローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a rethrowing of an exception.">例外の再スローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a rethrowing of an exception with a given type.">型を指定して、例外の再スローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <param name="type" vsli:raw="The new &lt;see cref=&quot;T:System.Type&quot; /&gt; of the expression.">式の新しい <see cref="T:System.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a rethrowing of an exception.">例外の再スローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a return statement.">return ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Return, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, and a null value to be passed to the target label upon jumping.">Return と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="target" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a return statement. The value passed to the label upon jumping can be specified.">return ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。 ジャンプ時にラベルに渡す値を指定できます。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value" vsli:raw="The value that will be passed to the associated label upon jumping.">ジャンプ時に関連付けられているラベルに渡される値。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Continue, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; to be passed to the target label upon jumping.">Continue と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="target" /> を含む <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a return statement with the specified type. The value passed to the label upon jumping can be specified.">型を指定して、return ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。 ジャンプ時にラベルに渡す値を指定できます。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value" vsli:raw="The value that will be passed to the associated label upon jumping.">ジャンプ時に関連付けられているラベルに渡される値。</param>
      <param name="type" vsli:raw="An &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Continue, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to &lt;paramref name=&quot;type&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; to be passed to the target label upon jumping.">Continue と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="type" /> を含む <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; representing a return statement with the specified type.">型を指定して、return ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; will jump to.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="type" vsli:raw="An &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; with &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Kind&quot; /&gt; equal to Return, the &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property set to &lt;paramref name=&quot;target&quot; /&gt;, the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property set to &lt;paramref name=&quot;type&quot; /&gt;, and a null value to be passed to the target label upon jumping.">Return と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise right-shift operation.">ビットごとの右シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.RightShift&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The right-shift operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">右シフト演算子は <paramref name="left" />.Type と <paramref name="right" />.Type には定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise right-shift operation.">ビットごとの右シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.RightShift&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the right-shift operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> は <see langword="null" /> で、右シフト演算子は <paramref name="left" />.Type と <paramref name="right" />.Type には定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise right-shift assignment operation.">ビットごとの右シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.RightShiftAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise right-shift assignment operation.">ビットごとの右シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.RightShiftAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a bitwise right-shift assignment operation.">ビットごとの右シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.RightShiftAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Linq.Expressions.RuntimeVariablesExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> のインスタンスを作成します。</summary>
      <param name="variables" vsli:raw="A collection of &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.RuntimeVariablesExpression.Variables&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> オブジェクトのコレクション。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.RuntimeVariablesExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.RuntimeVariables&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.RuntimeVariablesExpression.Variables&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> プロパティを含む <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> のインスタンス。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Linq.Expressions.RuntimeVariablesExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> のインスタンスを作成します。</summary>
      <param name="variables" vsli:raw="An array of &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects to use to populate the &lt;see cref=&quot;P:System.Linq.Expressions.RuntimeVariablesExpression.Variables&quot; /&gt; collection.">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> オブジェクトの配列。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.RuntimeVariablesExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.RuntimeVariables&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.RuntimeVariablesExpression.Variables&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> プロパティを含む <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> のインスタンス。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic subtraction operation that does not have overflow checking.">オーバーフロー チェックを行わない算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Subtract&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The subtraction operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">減算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic subtraction operation that does not have overflow checking.">オーバーフロー チェックを行わない算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Subtract&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" />を返し、 <see langword="static" /> (Visual Basic では<see langword="Shared" /> ) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the subtraction operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には減算演算子が定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a subtraction assignment operation that does not have overflow checking.">オーバーフロー チェックを行わない減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.SubtractAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a subtraction assignment operation that does not have overflow checking.">オーバーフロー チェックを行わない減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.SubtractAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a subtraction assignment operation that does not have overflow checking.">オーバーフロー チェックを行わない減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.SubtractAssign&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a subtraction assignment operation that has overflow checking.">オーバーフロー チェックを行う減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a subtraction assignment operation that has overflow checking.">オーバーフロー チェックを行う減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents a subtraction assignment operation that has overflow checking.">オーバーフロー チェックを行う減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Conversion&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic subtraction operation that has overflow checking.">オーバーフロー チェックを行う算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.SubtractChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The subtraction operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">減算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that represents an arithmetic subtraction operation that has overflow checking.">オーバーフロー チェックを行う算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</summary>
      <param name="left" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right" vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.SubtractChecked&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Left&quot; /&gt;, &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Right&quot; /&gt;, and &lt;see cref=&quot;P:System.Linq.Expressions.BinaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;left&quot; /&gt; or &lt;paramref name=&quot;right&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly two arguments.">
        <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" />を返し、 <see langword="static" /> (Visual Basic では<see langword="Shared" /> ) ではなく、またはちょうど 2 つの引数を受け取りません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the subtraction operator is not defined for &lt;paramref name=&quot;left&quot; /&gt;.Type and &lt;paramref name=&quot;right&quot; /&gt;.Type.">
        <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には減算演算子が定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt; that represents a &lt;see langword=&quot;switch&quot; /&gt; statement that has a default case.">既定のケースがある <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す <see langword="switch" /> を作成します。</summary>
      <param name="switchValue" vsli:raw="The value to be tested against each case.">各ケースに対してテストする値。</param>
      <param name="defaultBody" vsli:raw="The result of the switch if &lt;paramref name=&quot;switchValue&quot; /&gt; does not match any of the cases.">
        <paramref name="switchValue" /> がいずれのケースとも一致しない場合の switch の結果。</param>
      <param name="cases" vsli:raw="The set of cases for this switch expression.">この switch 式に対するケースのセット。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt; that represents a &lt;see langword=&quot;switch&quot; /&gt; statement that has a default case.">既定のケースがある <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す <see langword="switch" /> を作成します。</summary>
      <param name="switchValue" vsli:raw="The value to be tested against each case.">各ケースに対してテストする値。</param>
      <param name="defaultBody" vsli:raw="The result of the switch if &lt;paramref name=&quot;switchValue&quot; /&gt; does not match any of the cases.">
        <paramref name="switchValue" /> がいずれのケースとも一致しない場合の switch の結果。</param>
      <param name="comparison" vsli:raw="The equality comparison method to use.">使用する等値比較メソッド。</param>
      <param name="cases" vsli:raw="The set of cases for this switch expression.">この switch 式に対するケースのセット。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt; that represents a &lt;see langword=&quot;switch&quot; /&gt; statement that has a default case.">既定のケースがある <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す <see langword="switch" /> を作成します。</summary>
      <param name="switchValue" vsli:raw="The value to be tested against each case.">各ケースに対してテストする値。</param>
      <param name="defaultBody" vsli:raw="The result of the switch if &lt;paramref name=&quot;switchValue&quot; /&gt; does not match any of the cases.">
        <paramref name="switchValue" /> がいずれのケースとも一致しない場合の switch の結果。</param>
      <param name="comparison" vsli:raw="The equality comparison method to use.">使用する等値比較メソッド。</param>
      <param name="cases" vsli:raw="The set of cases for this switch expression.">この switch 式に対するケースのセット。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt; that represents a &lt;see langword=&quot;switch&quot; /&gt; statement without a default case.">既定のケースのない <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す <see langword="switch" /> を作成します。</summary>
      <param name="switchValue" vsli:raw="The value to be tested against each case.">各ケースに対してテストする値。</param>
      <param name="cases" vsli:raw="The set of cases for this switch expression.">この switch 式に対するケースのセット。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt; that represents a &lt;see langword=&quot;switch&quot; /&gt; statement that has a default case.">既定のケースがある <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す <see langword="switch" /> を作成します。</summary>
      <param name="type" vsli:raw="The result type of the switch.">switch の結果の型。</param>
      <param name="switchValue" vsli:raw="The value to be tested against each case.">各ケースに対してテストする値。</param>
      <param name="defaultBody" vsli:raw="The result of the switch if &lt;paramref name=&quot;switchValue&quot; /&gt; does not match any of the cases.">
        <paramref name="switchValue" /> がいずれのケースとも一致しない場合の switch の結果。</param>
      <param name="comparison" vsli:raw="The equality comparison method to use.">使用する等値比較メソッド。</param>
      <param name="cases" vsli:raw="The set of cases for this switch expression.">この switch 式に対するケースのセット。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt; that represents a &lt;see langword=&quot;switch&quot; /&gt; statement that has a default case.">既定のケースがある <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す <see langword="switch" /> を作成します。</summary>
      <param name="type" vsli:raw="The result type of the switch.">switch の結果の型。</param>
      <param name="switchValue" vsli:raw="The value to be tested against each case.">各ケースに対してテストする値。</param>
      <param name="defaultBody" vsli:raw="The result of the switch if &lt;paramref name=&quot;switchValue&quot; /&gt; does not match any of the cases.">
        <paramref name="switchValue" /> がいずれのケースとも一致しない場合の switch の結果。</param>
      <param name="comparison" vsli:raw="The equality comparison method to use.">使用する等値比較メソッド。</param>
      <param name="cases" vsli:raw="The set of cases for this switch expression.">この switch 式に対するケースのセット。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchCase&quot; /&gt; object to be used in a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt; object.">
        <see cref="T:System.Linq.Expressions.SwitchCase" /> オブジェクトで使用される <see cref="T:System.Linq.Expressions.SwitchExpression" /> オブジェクトを作成します。</summary>
      <param name="body" vsli:raw="The body of the case.">case の本体。</param>
      <param name="testValues" vsli:raw="The test values of the case.">case のテスト値。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.SwitchCase&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.SwitchCase" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchCase&quot; /&gt; for use in a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.SwitchCase" /> で使用する <see cref="T:System.Linq.Expressions.SwitchExpression" /> を作成します。</summary>
      <param name="body" vsli:raw="The body of the case.">case の本体。</param>
      <param name="testValues" vsli:raw="The test values of the case.">case のテスト値。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.SwitchCase&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.SwitchCase" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> のインスタンスを作成します。</summary>
      <param name="fileName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.FileName&quot; /&gt; equal to.">
        <see cref="T:System.String" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.FileName&quot; /&gt; property set to the specified value.">指定した値に設定された <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> プロパティを含む <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> のインスタンスを作成します。</summary>
      <param name="fileName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.FileName&quot; /&gt; equal to.">
        <see cref="T:System.String" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</param>
      <param name="language" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.Language&quot; /&gt; equal to.">
        <see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.FileName&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.Language&quot; /&gt; properties set to the specified value.">指定した値に設定された <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> プロパティおよび <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> プロパティを含む <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> のインスタンスを作成します。</summary>
      <param name="fileName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.FileName&quot; /&gt; equal to.">
        <see cref="T:System.String" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</param>
      <param name="language" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.Language&quot; /&gt; equal to.">
        <see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。</param>
      <param name="languageVendor" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor&quot; /&gt; equal to.">
        <see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.FileName&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.Language&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor&quot; /&gt; properties set to the specified value.">指定した値に設定された <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />、および <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> のインスタンスを作成します。</summary>
      <param name="fileName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.FileName&quot; /&gt; equal to.">
        <see cref="T:System.String" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</param>
      <param name="language" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.Language&quot; /&gt; equal to.">
        <see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。</param>
      <param name="languageVendor" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor&quot; /&gt; equal to.">
        <see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />。</param>
      <param name="documentType" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType&quot; /&gt; equal to.">
        <see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.SymbolDocumentInfo&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.FileName&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.Language&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType&quot; /&gt; properties set to the specified value.">指定した値に設定された <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />、および <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a throwing of an exception.">例外のスローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the exception.">例外を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a throwing of an exception with a given type.">型を指定して、例外のスローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type" vsli:raw="The new &lt;see cref=&quot;T:System.Type&quot; /&gt; of the expression.">式の新しい <see cref="T:System.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents the exception.">例外を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ToString">
      <summary vsli:raw="Returns a textual representation of the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" /> のテキスト表現を返します。</summary>
      <returns vsli:raw="A textual representation of the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" /> のテキスト表現。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt; representing a try block with any number of catch statements and neither a fault nor finally block.">任意の数の catch ステートメントを指定し、fault ブロックと finally ブロックを指定せずに、try ブロックを表す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</summary>
      <param name="body" vsli:raw="The body of the try block.">try ブロックの本体。</param>
      <param name="handlers" vsli:raw="The array of zero or more &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; expressions representing the catch statements to be associated with the try block.">try ブロックに関連付ける catch ステートメントを表す 0 個以上の <see cref="T:System.Linq.Expressions.CatchBlock" /> 式の配列。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt; representing a try block with any number of catch statements and a finally block.">任意の数の catch ステートメントおよび 1 つの finally ブロックを指定して、try ブロックを表す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</summary>
      <param name="body" vsli:raw="The body of the try block.">try ブロックの本体。</param>
      <param name="finally" vsli:raw="The body of the finally block.">finally ブロックの本体。</param>
      <param name="handlers" vsli:raw="The array of zero or more &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; expressions representing the catch statements to be associated with the try block.">try ブロックに関連付ける catch ステートメントを表す 0 個以上の <see cref="T:System.Linq.Expressions.CatchBlock" /> 式の配列。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt; representing a try block with a fault block and no catch statements.">fault ブロックを指定し、catch ステートメントを指定せずに、try ブロックを表す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</summary>
      <param name="body" vsli:raw="The body of the try block.">try ブロックの本体。</param>
      <param name="fault" vsli:raw="The body of the fault block.">fault ブロックの本体。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt; representing a try block with a finally block and no catch statements.">finally ブロックを指定し、catch ステートメントを指定せずに、try ブロックを表す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</summary>
      <param name="body" vsli:raw="The body of the try block.">try ブロックの本体。</param>
      <param name="finally" vsli:raw="The body of the finally block.">finally ブロックの本体。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt;.">作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; object that represents a generic System.Action delegate type that has specific type arguments.">特定の型引数を持つ汎用 System.Action デリゲート型を表す <see cref="P:System.Linq.Expressions.Expression.Type" /> オブジェクトを作成します。</summary>
      <param name="typeArgs" vsli:raw="An array of Type objects that specify the type arguments for the System.Action delegate type.">System.Action デリゲート型の型引数を指定する Type オブジェクトの配列。</param>
      <param name="actionType" vsli:raw="When this method returns, contains the generic System.Action delegate type that has specific type arguments. Contains null if there is no generic System.Action delegate that matches the &lt;paramref name=&quot;typeArgs&quot; /&gt;. This parameter is passed uninitialized.">このメソッドが返されるときに、特定の型引数を持つ汎用 System.Action デリゲート型を格納します。 <paramref name="typeArgs" /> に一致する汎用 System.Action デリゲートがない場合は、null を格納します。このパラメーターは初期化されていない状態で渡されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if generic System.Action delegate type was created for specific &lt;paramref name=&quot;typeArgs&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">特定の <paramref name="typeArgs" /> について汎用の System.Action デリゲート型が作成された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; object that represents a generic System.Func delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.">特定の型引数を持つ汎用 System.Func デリゲート型を表す <see cref="P:System.Linq.Expressions.Expression.Type" /> オブジェクトを作成します。 最後の型引数で、作成するデリゲートの戻り値の型を指定します。</summary>
      <param name="typeArgs" vsli:raw="An array of Type objects that specify the type arguments for the System.Func delegate type.">System.Func デリゲート型の型引数を指定する Type オブジェクトの配列。</param>
      <param name="funcType" vsli:raw="When this method returns, contains the generic System.Func delegate type that has specific type arguments. Contains null if there is no generic System.Func delegate that matches the &lt;paramref name=&quot;typeArgs&quot; /&gt;. This parameter is passed uninitialized.">このメソッドが返されるときに、特定の型引数を持つ汎用 System.Func デリゲート型を格納します。 <paramref name="typeArgs" /> に一致する汎用 System.Func デリゲートがない場合は、null を格納します。このパラメーターは初期化されていない状態で渡されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if generic System.Func delegate type was created for specific &lt;paramref name=&quot;typeArgs&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">特定の <paramref name="typeArgs" /> について汎用の System.Func デリゲート型が作成された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.Expression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the static type of the expression.">式の静的な型を表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents an explicit reference or boxing conversion where &lt;see langword=&quot;null&quot; /&gt; is supplied if the conversion fails.">変換が失敗した場合に <see cref="T:System.Linq.Expressions.UnaryExpression" /> が提供される明示的な参照変換またはボックス化変換を表す <see langword="null" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; property equal to.">
        <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.TypeAs&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; or &lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> または <paramref name="type" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.TypeBinaryExpression&quot; /&gt; that compares run-time type identity.">実行時の型 ID を比較する <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand&quot; /&gt; property equal to.">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.TypeBinaryExpression&quot; /&gt; for which the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property is equal to &lt;see cref=&quot;M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)&quot; /&gt; and for which the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand&quot; /&gt; properties are set to the specified values.">
        <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> プロパティおよび <see cref="T:System.Linq.Expressions.Expression" /> プロパティを含む <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.TypeBinaryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.TypeBinaryExpression.Expression&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />。</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;P:System.Linq.Expressions.Expression.Type&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand&quot; /&gt; property equal to.">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.TypeBinaryExpression&quot; /&gt; for which the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property is equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.TypeIs&quot; /&gt; and for which the &lt;see cref=&quot;P:System.Linq.Expressions.TypeBinaryExpression.Expression&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand&quot; /&gt; properties are set to the specified values.">
        <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> プロパティおよび <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> プロパティを含む <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; or &lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> または <paramref name="type" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a unary plus operation.">単項プラス演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.UnaryPlus&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property set to the specified value.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The unary plus operator is not defined for &lt;paramref name=&quot;expression&quot; /&gt;.Type.">単項プラス演算子は <paramref name="expression" />.Type に対して定義されていません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents a unary plus operation.">単項プラス演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property equal to.">
        <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; to set the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; property equal to.">
        <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that has the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.UnaryPlus&quot; /&gt; and the &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; and &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Method&quot; /&gt; properties set to the specified values.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;expression&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="expression" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and the method it represents returns &lt;see langword=&quot;void&quot; /&gt;, is not &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic), or does not take exactly one argument.">
        <paramref name="method" /> は <see langword="null" /> ではなく、それが表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではないか、受け取る引数が 1 つだけではありません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and the unary plus operator is not defined for &lt;paramref name=&quot;expression&quot; /&gt;.Type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;expression&quot; /&gt;.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by &lt;paramref name=&quot;method&quot; /&gt;.">
        <paramref name="method" /> は <see langword="null" /> で、単項プラス演算子は <paramref name="expression" />.Type に対して定義されていません。  
または 
 <paramref name="expression" />.Type (または null 許容値型の場合はその対応する null 非許容型) は、<paramref name="method" /> によって表されるメソッドの引数型に代入できません。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt; that represents an explicit unboxing.">明示的なボックス化解除を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; to unbox.">ボックス化解除する <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type" vsli:raw="The new &lt;see cref=&quot;T:System.Type&quot; /&gt; of the expression.">式の新しい <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; node that can be used to identify a parameter or a variable in an expression tree.">式ツリーでパラメーターまたは変数を識別するために使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</summary>
      <param name="type" vsli:raw="The type of the parameter or variable.">パラメーターまたは変数の型。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; node with the specified name and type.">指定した名前および型の <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノード。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; node that can be used to identify a parameter or a variable in an expression tree.">式ツリーでパラメーターまたは変数を識別するために使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</summary>
      <param name="type" vsli:raw="The type of the parameter or variable.">パラメーターまたは変数の型。</param>
      <param name="name" vsli:raw="The name of the parameter or variable. This name is used for debugging or printing purpose only.">パラメーターまたは変数の名前。 この名前はデバッグまたは印刷の目的でのみ使用されます。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; node with the specified name and type.">指定した名前および型の <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノード。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible.">ノードを単純化し、単純化された式の visitor デリゲートを呼び出します。 ノードを単純化できない場合、このメソッドは例外をスローします。</summary>
      <param name="visitor" vsli:raw="An instance of &lt;see cref=&quot;T:System.Func`2&quot; /&gt;.">
        <see cref="T:System.Func`2" /> のインスタンス。</param>
      <returns vsli:raw="The expression being visited, or an expression which should replace it in the tree.">走査中の式、またはツリー内で走査中の式と置き換える式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.Expression`1">
      <summary vsli:raw="Represents a strongly typed lambda expression as a data structure in the form of an expression tree. This class cannot be inherited.">厳密に型指定されたラムダ式を、式ツリー形式のデータ構造体として表します。 このクラスは継承できません。</summary>
      <typeparam name="TDelegate" vsli:raw="The type of the delegate that the &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt; represents.">
        <see cref="T:System.Linq.Expressions.Expression`1" /> を表すデリゲートの型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile">
      <summary vsli:raw="Compiles the lambda expression described by the expression tree into executable code and produces a delegate that represents the lambda expression.">式ツリーによって記述されたラムダ式を実行可能コードにコンパイルし、ラムダ式を表すデリゲートを生成します。</summary>
      <returns vsli:raw="A delegate of type &lt;paramref name=&quot;TDelegate&quot; /&gt; that represents the compiled lambda expression described by the &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression`1" /> によって記述されたコンパイル済みのラムダ式を表す <paramref name="TDelegate" /> 型のデリゲート。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)">
      <summary vsli:raw="Compiles the lambda expression described by the expression tree into interpreted or compiled code and produces a delegate that represents the lambda expression.">式ツリーで記述されたラムダ式を、解釈されたまたはコンパイル済みコードにコンパイルし、そのラムダ式を表すデリゲートを生成します。</summary>
      <param name="preferInterpretation" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the expression should be compiled to an interpreted form, if it is available; &lt;see langword=&quot;false&quot; /&gt; otherwise.">その式を解釈された形式にコンパイルすべきことを示す <see langword="true" /> (存在する場合)、それ以外の場合 <see langword="false" />。</param>
      <returns vsli:raw="A delegate that represents the compiled lambda expression described by the &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression`1" /> により記述されたコンパイル済みのラムダ式を表すデリゲート。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary vsli:raw="Produces a delegate that represents the lambda expression.">ラムダ式を表すデリゲートを作成します。</summary>
      <param name="debugInfoGenerator" vsli:raw="Debugging information generator used by the compiler to mark sequence points and annotate local variables.">シーケンス ポイントをマークしたりローカル変数に注釈を付けたりするためにコンパイラが使用するデバッグ情報ジェネレーター。</param>
      <returns vsli:raw="A delegate containing the compiled version of the lambda.">コンパイルされたバージョンのラムダを含んでいるデリゲート。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">この式に似た新しい式を作成しますが、指定された子を使用します。 すべての子が同じであれば、この式が返されます。</summary>
      <param name="body" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Body&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティ。</param>
      <param name="parameters" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Parameters&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> プロパティ。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">更新された子を使用した式。子が変更されていない場合はこの式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionType">
      <summary vsli:raw="Describes the node types for the nodes of an expression tree.">式ツリー ノードのノード型を記述します。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Add">
      <summary vsli:raw="An addition operation, such as &lt;c&gt;a + b&lt;/c&gt;, without overflow checking, for numeric operands.">オーバーフロー チェックを行わない、数値オペランドに対する加算演算 (<c>a + b</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssign">
      <summary vsli:raw="An addition compound assignment operation, such as &lt;c&gt;(a += b)&lt;/c&gt;, without overflow checking, for numeric operands.">オーバーフロー チェックを行わない、数値オペランドに対する加算の複合代入演算 (<c>(a += b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssignChecked">
      <summary vsli:raw="An addition compound assignment operation, such as &lt;c&gt;(a += b)&lt;/c&gt;, with overflow checking, for numeric operands.">オーバーフロー チェックを行う、数値オペランドに対する加算の複合代入演算 (<c>(a += b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddChecked">
      <summary vsli:raw="An addition operation, such as &lt;c&gt;(a + b)&lt;/c&gt;, with overflow checking, for numeric operands.">オーバーフロー チェックを行う、数値オペランドに対する加算演算 (<c>(a + b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.And">
      <summary vsli:raw="A bitwise or logical &lt;see langword=&quot;AND&quot; /&gt; operation, such as &lt;c&gt;(a &amp;amp; b)&lt;/c&gt; in C# and &lt;c&gt;(a And b)&lt;/c&gt; in Visual Basic.">論理またはビットごとの <see langword="AND" /> 演算 (C# の <c>(a &amp; b)</c>、Visual Basic の <c>(a And b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAlso">
      <summary vsli:raw="A conditional &lt;see langword=&quot;AND&quot; /&gt; operation that evaluates the second operand only if the first operand evaluates to &lt;see langword=&quot;true&quot; /&gt;. It corresponds to &lt;c&gt;(a &amp;amp;&amp;amp; b)&lt;/c&gt; in C# and &lt;c&gt;(a AndAlso b)&lt;/c&gt; in Visual Basic.">1 番目のオペランドが <see langword="AND" /> に評価された場合にのみ 2 番目のオペランドを評価する条件 <see langword="true" /> 演算。 C# の <c>(a &amp;&amp; b)</c>、Visual Basic の <c>(a AndAlso b)</c> に対応します。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAssign">
      <summary vsli:raw="A bitwise or logical &lt;see langword=&quot;AND&quot; /&gt; compound assignment operation, such as &lt;c&gt;(a &amp;amp;= b)&lt;/c&gt; in C#.">論理またはビットごとの <see langword="AND" /> 複合代入演算 (C# の <c>(a &amp;= b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
      <summary vsli:raw="An indexing operation in a one-dimensional array, such as &lt;c&gt;array[index]&lt;/c&gt; in C# or &lt;c&gt;array(index)&lt;/c&gt; in Visual Basic.">1 次元配列のインデックス演算 (C# の <c>array[index]</c>、Visual Basic の <c>array(index)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayLength">
      <summary vsli:raw="An operation that obtains the length of a one-dimensional array, such as &lt;c&gt;array.Length&lt;/c&gt;.">1 次元配列の長さを取得する演算 (<c>array.Length</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Assign">
      <summary vsli:raw="An assignment operation, such as &lt;c&gt;(a = b)&lt;/c&gt;.">
        <c>(a = b)</c> などの代入演算。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Block">
      <summary vsli:raw="A block of expressions.">式のブロック。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Call">
      <summary vsli:raw="A method call, such as in the &lt;c&gt;obj.sampleMethod()&lt;/c&gt; expression.">
        <c>obj.sampleMethod()</c> 式などでのメソッド呼び出し。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Coalesce">
      <summary vsli:raw="A node that represents a null coalescing operation, such as &lt;c&gt;(a ?? b)&lt;/c&gt; in C# or &lt;c&gt;If(a, b)&lt;/c&gt; in Visual Basic.">null 合体演算 (C# の <c>(a ?? b)</c>、Visual Basic の <c>If(a, b)</c> など) を表すノード。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Conditional">
      <summary vsli:raw="A conditional operation, such as &lt;c&gt;a &amp;gt; b ? a : b&lt;/c&gt; in C# or &lt;c&gt;If(a &amp;gt; b, a, b)&lt;/c&gt; in Visual Basic.">条件演算 (C# の <c>a &gt; b ? a : b</c>、Visual Basic の <c>If(a &gt; b, a, b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Constant">
      <summary vsli:raw="A constant value.">定数値。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Convert">
      <summary vsli:raw="A cast or conversion operation, such as &lt;c&gt;(SampleType)obj&lt;/c&gt; in C#or &lt;c&gt;CType(obj, SampleType)&lt;/c&gt; in Visual Basic. For a numeric conversion, if the converted value is too large for the destination type, no exception is thrown.">キャストまたは変換演算 (C# の <c>(SampleType)obj</c>、Visual Basic の <c>CType(obj, SampleType)</c> など)。 数値変換では、変換された値が変換先の型に対して大きすぎる場合でも、例外はスローされません。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
      <summary vsli:raw="A cast or conversion operation, such as &lt;c&gt;(SampleType)obj&lt;/c&gt; in C#or &lt;c&gt;CType(obj, SampleType)&lt;/c&gt; in Visual Basic. For a numeric conversion, if the converted value does not fit the destination type, an exception is thrown.">キャストまたは変換演算 (C# の <c>(SampleType)obj</c>、Visual Basic の <c>CType(obj, SampleType)</c> など)。 数値変換では、変換された値が変換先の型に合わない場合は、例外がスローされます。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DebugInfo">
      <summary vsli:raw="Debugging information.">デバッグ情報。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Decrement">
      <summary vsli:raw="A unary decrement operation, such as &lt;c&gt;(a - 1)&lt;/c&gt; in C# and Visual Basic. The object &lt;c&gt;a&lt;/c&gt; should not be modified in place.">単項デクリメント演算 (C# および Visual Basic での <c>(a - 1)</c> など)。 <c>a</c> オブジェクト自体は変更されません。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Default">
      <summary vsli:raw="A default value.">既定値。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Divide">
      <summary vsli:raw="A division operation, such as &lt;c&gt;(a / b)&lt;/c&gt;, for numeric operands.">数値オペランドに対する除算演算 (<c>(a / b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DivideAssign">
      <summary vsli:raw="An division compound assignment operation, such as &lt;c&gt;(a /= b)&lt;/c&gt;, for numeric operands.">数値オペランドに対する除算の複合代入演算 (<c>(a /= b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Dynamic">
      <summary vsli:raw="A dynamic operation.">動的演算。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Equal">
      <summary vsli:raw="A node that represents an equality comparison, such as &lt;c&gt;(a == b)&lt;/c&gt; in C# or &lt;c&gt;(a = b)&lt;/c&gt; in Visual Basic.">等価比較 (C# の <c>(a == b)</c>、Visual Basic の <c>(a = b)</c> など) を表すノード。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
      <summary vsli:raw="A bitwise or logical &lt;see langword=&quot;XOR&quot; /&gt; operation, such as &lt;c&gt;(a ^ b)&lt;/c&gt; in C# or &lt;c&gt;(a Xor b)&lt;/c&gt; in Visual Basic.">論理またはビットごとの <see langword="XOR" /> 演算 (C# の <c>(a ^ b)</c>、Visual Basic の <c>(a Xor b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign">
      <summary vsli:raw="A bitwise or logical &lt;see langword=&quot;XOR&quot; /&gt; compound assignment operation, such as &lt;c&gt;(a ^= b)&lt;/c&gt; in C#.">論理またはビットごとの <see langword="XOR" /> 複合代入演算 (C# の <c>(a ^= b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Extension">
      <summary vsli:raw="An extension expression.">拡張式。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Goto">
      <summary vsli:raw="A &quot;go to&quot; expression, such as &lt;c&gt;goto Label&lt;/c&gt; in C# or &lt;c&gt;GoTo Label&lt;/c&gt; in Visual Basic.">"go to" 式 (C# の <c>goto Label</c>、Visual Basic の <c>GoTo Label</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThan">
      <summary vsli:raw="A &quot;greater than&quot; comparison, such as &lt;c&gt;(a &amp;gt; b)&lt;/c&gt;.">"より大きい" 比較 (<c>(a &gt; b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
      <summary vsli:raw="A &quot;greater than or equal to&quot; comparison, such as &lt;c&gt;(a &amp;gt;= b)&lt;/c&gt;.">"以上" 比較 (<c>(a &gt;= b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Increment">
      <summary vsli:raw="A unary increment operation, such as &lt;c&gt;(a + 1)&lt;/c&gt; in C# and Visual Basic. The object &lt;c&gt;a&lt;/c&gt; should not be modified in place.">単項インクリメント演算 (C# および Visual Basic での <c>(a + 1)</c> など)。 <c>a</c> オブジェクト自体は変更されません。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Index">
      <summary vsli:raw="An index operation or an operation that accesses a property that takes arguments.">インデックス演算、または引数を受け取るプロパティにアクセスする演算。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Invoke">
      <summary vsli:raw="An operation that invokes a delegate or lambda expression, such as &lt;c&gt;sampleDelegate.Invoke()&lt;/c&gt;.">デリゲートまたはラムダ式を呼び出す演算 (<c>sampleDelegate.Invoke()</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsFalse">
      <summary vsli:raw="A &lt;see langword=&quot;false&quot; /&gt; condition value.">
        <see langword="false" /> 条件値。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsTrue">
      <summary vsli:raw="A &lt;see langword=&quot;true&quot; /&gt; condition value.">
        <see langword="true" /> 条件値。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Label">
      <summary vsli:raw="A label.">ラベル。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Lambda">
      <summary vsli:raw="A lambda expression, such as &lt;c&gt;a =&amp;gt; a + a&lt;/c&gt; in C# or &lt;c&gt;Function(a) a + a&lt;/c&gt; in Visual Basic.">ラムダ式 (C# の <c>a =&gt; a + a</c>、Visual Basic の <c>Function(a) a + a</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShift">
      <summary vsli:raw="A bitwise left-shift operation, such as &lt;c&gt;(a &amp;lt;&amp;lt; b)&lt;/c&gt;.">ビットごとの左シフト演算 (<c>(a &lt;&lt; b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign">
      <summary vsli:raw="A bitwise left-shift compound assignment, such as &lt;c&gt;(a &amp;lt;&amp;lt;= b)&lt;/c&gt;.">ビットごとの左シフトの複合代入 (<c>(a &lt;&lt;= b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThan">
      <summary vsli:raw="A &quot;less than&quot; comparison, such as &lt;c&gt;(a &amp;lt; b)&lt;/c&gt;.">"より小さい" 比較 (<c>(a &lt; b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
      <summary vsli:raw="A &quot;less than or equal to&quot; comparison, such as &lt;c&gt;(a &amp;lt;= b)&lt;/c&gt;.">"以下" 比較 (<c>(a &lt;= b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ListInit">
      <summary vsli:raw="An operation that creates a new &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; object and initializes it from a list of elements, such as &lt;c&gt;new List&amp;lt;SampleType&amp;gt;(){ a, b, c }&lt;/c&gt; in C# or &lt;c&gt;Dim sampleList = { a, b, c }&lt;/c&gt; in Visual Basic.">新しい <see cref="T:System.Collections.IEnumerable" /> オブジェクトを作成し、要素のリストから初期化する演算 (C# の <c>new List&lt;SampleType&gt;(){ a, b, c }</c>、Visual Basic の <c>Dim sampleList = { a, b, c }</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Loop">
      <summary vsli:raw="A loop, such as &lt;c&gt;for&lt;/c&gt; or &lt;c&gt;while&lt;/c&gt;.">ループ (<c>for</c> や <c>while</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberAccess">
      <summary vsli:raw="An operation that reads from a field or property, such as &lt;c&gt;obj.SampleProperty&lt;/c&gt;.">フィールドまたはプロパティから読み取る演算 (<c>obj.SampleProperty</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberInit">
      <summary vsli:raw="An operation that creates a new object and initializes one or more of its members, such as &lt;c&gt;new Point { X = 1, Y = 2 }&lt;/c&gt; in C# or &lt;c&gt;New Point With {.X = 1, .Y = 2}&lt;/c&gt; in Visual Basic.">新しいオブジェクトを作成し、その 1 つ以上のメンバーを初期化する演算 (C# の <c>new Point { X = 1, Y = 2 }</c>、Visual Basic の <c>New Point With {.X = 1, .Y = 2}</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Modulo">
      <summary vsli:raw="An arithmetic remainder operation, such as &lt;c&gt;(a % b)&lt;/c&gt; in C# or &lt;c&gt;(a Mod b)&lt;/c&gt; in Visual Basic.">算術剰余演算 (C# の <c>(a % b)</c>、Visual Basic の <c>(a Mod b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ModuloAssign">
      <summary vsli:raw="An arithmetic remainder compound assignment operation, such as &lt;c&gt;(a %= b)&lt;/c&gt; in C#.">算術剰余の複合代入演算 (C# の <c>(a %= b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Multiply">
      <summary vsli:raw="A multiplication operation, such as &lt;c&gt;(a * b)&lt;/c&gt;, without overflow checking, for numeric operands.">オーバーフロー チェックを行わない、数値オペランドに対する乗算演算 (<c>(a * b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssign">
      <summary vsli:raw="A multiplication compound assignment operation, such as &lt;c&gt;(a *= b)&lt;/c&gt;, without overflow checking, for numeric operands.">オーバーフロー チェックを行わない、数値オペランドに対する乗算の複合代入演算 (<c>(a *= b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked">
      <summary vsli:raw="A multiplication compound assignment operation, such as &lt;c&gt;(a *= b)&lt;/c&gt;, that has overflow checking, for numeric operands.">オーバーフロー チェックを行う、数値オペランドに対する乗算の複合代入演算 (<c>(a *= b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
      <summary vsli:raw="An multiplication operation, such as &lt;c&gt;(a * b)&lt;/c&gt;, that has overflow checking, for numeric operands.">オーバーフロー チェックを行う、数値オペランドに対する乗算演算 (<c>(a * b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Negate">
      <summary vsli:raw="An arithmetic negation operation, such as &lt;c&gt;(-a)&lt;/c&gt;. The object &lt;c&gt;a&lt;/c&gt; should not be modified in place.">算術否定演算 (<c>(-a)</c> など)。 <c>a</c> オブジェクト自体は変更されません。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NegateChecked">
      <summary vsli:raw="An arithmetic negation operation, such as &lt;c&gt;(-a)&lt;/c&gt;, that has overflow checking. The object &lt;c&gt;a&lt;/c&gt; should not be modified in place.">オーバーフロー チェックを行う算術否定演算 (<c>(-a)</c> など)。 <c>a</c> オブジェクト自体は変更されません。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.New">
      <summary vsli:raw="An operation that calls a constructor to create a new object, such as &lt;c&gt;new SampleType()&lt;/c&gt;.">新しいオブジェクトを作成するためにコンストラクターを呼び出す演算 (<c>new SampleType()</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
      <summary vsli:raw="An operation that creates a new array, in which the bounds for each dimension are specified, such as &lt;c&gt;new SampleType[dim1, dim2]&lt;/c&gt; in C# or &lt;c&gt;New SampleType(dim1, dim2)&lt;/c&gt; in Visual Basic.">各次元の境界が指定された新しい配列を作成する演算 (C# の <c>new SampleType[dim1, dim2]</c>、Visual Basic の <c>New SampleType(dim1, dim2)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
      <summary vsli:raw="An operation that creates a new one-dimensional array and initializes it from a list of elements, such as &lt;c&gt;new SampleType[]{a, b, c}&lt;/c&gt; in C# or &lt;c&gt;New SampleType(){a, b, c}&lt;/c&gt; in Visual Basic.">新しい 1 次元配列を作成し、要素のリストから初期化する演算 (C# の <c>new SampleType[]{a, b, c}</c>、Visual Basic の <c>New SampleType(){a, b, c}</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Not">
      <summary vsli:raw="A bitwise complement or logical negation operation. In C#, it is equivalent to &lt;c&gt;(~a)&lt;/c&gt; for integral types and to &lt;c&gt;(!a)&lt;/c&gt; for Boolean values. In Visual Basic, it is equivalent to &lt;c&gt;(Not a)&lt;/c&gt;. The object &lt;c&gt;a&lt;/c&gt; should not be modified in place.">ビットごとの補数演算または論理否定演算。 C# では、<c>(~a)</c> (整数型の場合) および <c>(!a)</c> (ブール値の場合) に相当します。 Visual Basic では <c>(Not a)</c> に相当します。 <c>a</c> オブジェクト自体は変更されません。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NotEqual">
      <summary vsli:raw="An inequality comparison, such as &lt;c&gt;(a != b)&lt;/c&gt; in C# or &lt;c&gt;(a &amp;lt;&amp;gt; b)&lt;/c&gt; in Visual Basic.">非等価比較 (C# の <c>(a != b)</c>、Visual Basic の <c>(a &lt;&gt; b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OnesComplement">
      <summary vsli:raw="A ones complement operation, such as &lt;c&gt;(~a)&lt;/c&gt; in C#.">1 の補数演算 (C# の <c>(~a)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Or">
      <summary vsli:raw="A bitwise or logical &lt;see langword=&quot;OR&quot; /&gt; operation, such as &lt;c&gt;(a | b)&lt;/c&gt; in C# or &lt;c&gt;(a Or b)&lt;/c&gt; in Visual Basic.">論理またはビットごとの <see langword="OR" /> 演算 (C# の <c>(a | b)</c>、Visual Basic の <c>(a Or b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrAssign">
      <summary vsli:raw="A bitwise or logical &lt;see langword=&quot;OR&quot; /&gt; compound assignment, such as &lt;c&gt;(a |= b)&lt;/c&gt; in C#.">論理またはビットごとの <see langword="OR" /> 複合代入 (C# の <c>(a |= b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrElse">
      <summary vsli:raw="A short-circuiting conditional &lt;see langword=&quot;OR&quot; /&gt; operation, such as &lt;c&gt;(a || b)&lt;/c&gt; in C# or &lt;c&gt;(a OrElse b)&lt;/c&gt; in Visual Basic.">ショートサーキットの条件付き <see langword="OR" /> 演算 (C# の <c>(a || b)</c>、Visual Basic の <c>(a OrElse b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Parameter">
      <summary vsli:raw="A reference to a parameter or variable that is defined in the context of the expression. For more information, see &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt;.">式のコンテキストで定義されているパラメーターまたは変数への参照。 詳細については、「<see cref="T:System.Linq.Expressions.ParameterExpression" />」を参照してください。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
      <summary vsli:raw="A unary postfix decrement, such as &lt;c&gt;(a--)&lt;/c&gt;. The object &lt;c&gt;a&lt;/c&gt; should be modified in place.">単項後置デクリメント (<c>(a--)</c> など)。 <c>a</c> オブジェクト自体が変更されます。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
      <summary vsli:raw="A unary postfix increment, such as &lt;c&gt;(a++)&lt;/c&gt;. The object &lt;c&gt;a&lt;/c&gt; should be modified in place.">単項後置インクリメント (<c>(a++)</c> など)。 <c>a</c> オブジェクト自体が変更されます。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Power">
      <summary vsli:raw="A mathematical operation that raises a number to a power, such as &lt;c&gt;(a ^ b)&lt;/c&gt; in Visual Basic.">数値の累乗を求める数値演算 (Visual Basic の <c>(a ^ b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PowerAssign">
      <summary vsli:raw="A compound assignment operation that raises a number to a power, such as &lt;c&gt;(a ^= b)&lt;/c&gt; in Visual Basic.">数値の累乗を求める複合代入演算 (Visual Basic の <c>(a ^= b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
      <summary vsli:raw="A unary prefix decrement, such as &lt;c&gt;(--a)&lt;/c&gt;. The object &lt;c&gt;a&lt;/c&gt; should be modified in place.">単項前置デクリメント (<c>(--a)</c> など)。 <c>a</c> オブジェクト自体が変更されます。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
      <summary vsli:raw="A unary prefix increment, such as &lt;c&gt;(++a)&lt;/c&gt;. The object &lt;c&gt;a&lt;/c&gt; should be modified in place.">単項前置インクリメント (<c>(++a)</c> など)。 <c>a</c> オブジェクト自体が変更されます。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Quote">
      <summary vsli:raw="An expression that has a constant value of type &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;. A &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Quote&quot; /&gt; node can contain references to parameters that are defined in the context of the expression it represents.">
        <see cref="T:System.Linq.Expressions.Expression" /> 型の定数値を持つ式。 <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> ノードには、それが表す式のコンテキストで定義されたパラメーターへの参照を格納できます。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShift">
      <summary vsli:raw="A bitwise right-shift operation, such as &lt;c&gt;(a &amp;gt;&amp;gt; b)&lt;/c&gt;.">ビットごとの右シフト演算 (<c>(a &gt;&gt; b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShiftAssign">
      <summary vsli:raw="A bitwise right-shift compound assignment operation, such as &lt;c&gt;(a &amp;gt;&amp;gt;= b)&lt;/c&gt;.">ビットごとの右シフトの複合代入演算 (<c>(a &gt;&gt;= b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
      <summary vsli:raw="A list of run-time variables. For more information, see &lt;see cref=&quot;T:System.Linq.Expressions.RuntimeVariablesExpression&quot; /&gt;.">ランタイム変数のリストです。 詳細については、「<see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />」を参照してください。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Subtract">
      <summary vsli:raw="A subtraction operation, such as &lt;c&gt;(a - b)&lt;/c&gt;, without overflow checking, for numeric operands.">オーバーフロー チェックを行わない、数値オペランドに対する減算演算 (<c>(a - b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssign">
      <summary vsli:raw="A subtraction compound assignment operation, such as &lt;c&gt;(a -= b)&lt;/c&gt;, without overflow checking, for numeric operands.">オーバーフロー チェックを行わない、数値オペランドに対する減算の複合代入演算 (<c>(a -= b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked">
      <summary vsli:raw="A subtraction compound assignment operation, such as &lt;c&gt;(a -= b)&lt;/c&gt;, that has overflow checking, for numeric operands.">オーバーフロー チェックを行う、数値オペランドに対する減算の複合代入演算 (<c>(a -= b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
      <summary vsli:raw="An arithmetic subtraction operation, such as &lt;c&gt;(a - b)&lt;/c&gt;, that has overflow checking, for numeric operands.">オーバーフロー チェックを行う、数値オペランドに対する算術減算演算 (<c>(a - b)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Switch">
      <summary vsli:raw="A switch operation, such as &lt;see langword=&quot;switch&quot; /&gt; in C# or &lt;see langword=&quot;Select Case&quot; /&gt; in Visual Basic.">スイッチ演算 (C# の <see langword="switch" />、Visual Basic の <see langword="Select Case" /> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Throw">
      <summary vsli:raw="An operation that throws an exception, such as &lt;c&gt;throw new Exception()&lt;/c&gt;.">例外をスローする演算 (<c>throw new Exception()</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Try">
      <summary vsli:raw="A &lt;see langword=&quot;try-catch&quot; /&gt; expression.">
        <see langword="try-catch" /> 式。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeAs">
      <summary vsli:raw="An explicit reference or boxing conversion in which &lt;see langword=&quot;null&quot; /&gt; is supplied if the conversion fails, such as &lt;c&gt;(obj as SampleType)&lt;/c&gt; in C# or &lt;c&gt;TryCast(obj, SampleType)&lt;/c&gt; in Visual Basic.">変換が失敗した場合に <see langword="null" /> が提供される明示的な参照変換またはボックス化変換 (C# の <c>(obj as SampleType)</c>、Visual Basic の <c>TryCast(obj, SampleType)</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeEqual">
      <summary vsli:raw="An exact type test.">正確な型テスト。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeIs">
      <summary vsli:raw="A type test, such as &lt;c&gt;obj is SampleType&lt;/c&gt; in C# or &lt;c&gt;TypeOf obj is SampleType&lt;/c&gt; in Visual Basic.">型テスト (C# の <c>obj is SampleType</c>、Visual Basic の <c>TypeOf obj is SampleType</c> など)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
      <summary vsli:raw="A unary plus operation, such as &lt;c&gt;(+a)&lt;/c&gt;. The result of a predefined unary plus operation is the value of the operand, but user-defined implementations might have unusual results.">単項プラス演算 (<c>(+a)</c> など)。 定義済みの単項プラス演算の結果はオペランドの値ですが、ユーザー定義の実装では予期しない結果となる場合があります。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Unbox">
      <summary vsli:raw="An unbox value type operation, such as &lt;see langword=&quot;unbox&quot; /&gt; and &lt;see langword=&quot;unbox.any&quot; /&gt; instructions in MSIL.">値型のアンボックス化演算 (MSIL の <see langword="unbox" /> 命令、<see langword="unbox.any" /> 命令など)。</summary>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionVisitor">
      <summary vsli:raw="Represents a visitor or rewriter for expression trees.">式ツリーのビジターまたはリライターを表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionVisitor&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.ExpressionVisitor" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Dispatches the list of expressions to one of the more specialized visit methods in this class.">このクラス内の、より特化された走査メソッドの 1 つに式のリストをディスパッチします。</summary>
      <param name="nodes" vsli:raw="The expressions to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression list, if any one of the elements were modified; otherwise, returns the original expression list.">いずれかの要素が変更された場合は変更された式リストを返します。それ以外の場合は元の式リストを返します。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Dispatches the expression to one of the more specialized visit methods in this class.">このクラス内の、より特化された走査メソッドの 1 つに式をディスパッチします。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
      <summary vsli:raw="Visits all nodes in the collection using a specified element visitor.">指定された要素ビジターを使用して、コレクション内のすべてのノードを走査します。</summary>
      <param name="nodes" vsli:raw="The nodes to visit.">走査するノード。</param>
      <param name="elementVisitor" vsli:raw="A delegate that visits a single element, optionally replacing it with a new element.">単一の要素を走査し、オプションでそれを新しい要素に置き換えるデリゲート。</param>
      <typeparam name="T" vsli:raw="The type of the nodes.">ノードの型。</typeparam>
      <returns vsli:raw="The modified node list, if any of the elements were modified; otherwise, returns the original node list.">いずれかの要素が変更された場合は変更されたノード リストを返します。それ以外の場合は元のノード リストを返します。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
      <summary vsli:raw="Visits an expression, casting the result back to the original expression type.">式を走査し、結果を元の式の型にキャストします。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <param name="callerName" vsli:raw="The name of the calling method; used to report to report a better error message.">呼び出し元のメソッドの名前。より正確なエラー メッセージを報告するために使用します。</param>
      <typeparam name="T" vsli:raw="The type of the expression.">式の型。</typeparam>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The visit method for this node returned a different type.">このノードの走査メソッドから、異なる型が返されました。</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
      <summary vsli:raw="Visits all expressions in the collection, casting the results back to the original expression type.">コレクション内のすべての式を走査し、結果を元の式の型にキャストします。</summary>
      <param name="nodes" vsli:raw="The expressions to visit.">走査する式。</param>
      <param name="callerName" vsli:raw="The name of the calling method; used to report a better error message.">呼び出し元のメソッドの名前。より正確なエラー メッセージを報告するために使用します。</param>
      <typeparam name="T" vsli:raw="The type of the expressions.">式の型。</typeparam>
      <returns vsli:raw="The modified expression collection, if any expression was modified; otherwise, returns the original expression collection.">いずれかの式が変更された場合は変更された式のコレクション、それ以外の場合は元の式のコレクションを返します。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The visit method for one of the expressions returned a different type.">いずれかの式の走査メソッドから異なる型が返されました。</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.BinaryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.BlockExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.BlockExpression" /> の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.CatchBlock" /> の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.ConditionalExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
      <summary vsli:raw="Visits the &lt;see cref=&quot;T:System.Linq.Expressions.ConstantExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.ConstantExpression" /> を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
      <summary vsli:raw="Visits the &lt;see cref=&quot;T:System.Linq.Expressions.DebugInfoExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
      <summary vsli:raw="Visits the &lt;see cref=&quot;T:System.Linq.Expressions.DefaultExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.DefaultExpression" /> を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.DynamicExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.DynamicExpression" /> の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.ElementInit" /> の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Visits the children of the extension expression.">拡張式の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.IndexExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.IndexExpression" /> の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.InvocationExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.InvocationExpression" /> の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.LabelExpression" /> の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Visits the &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.Expression`1&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression`1" /> の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <typeparam name="T" vsli:raw="The type of the delegate.">デリゲートの型です。</typeparam>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.ListInitExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.LoopExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.LoopExpression" /> の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberExpression" /> の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberAssignment&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberAssignment" /> の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberBinding" /> の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberInitExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberInitExpression" /> の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberListBinding&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberListBinding" /> の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberMemberBinding&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.NewExpression" /> の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.NewArrayExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.NewArrayExpression" /> の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
      <summary vsli:raw="Visits the &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.RuntimeVariablesExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.SwitchExpression" /> の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.SwitchCase&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.SwitchCase" /> の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.TryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.TryExpression" /> の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.TypeBinaryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
      <summary vsli:raw="Visits the children of the &lt;see cref=&quot;T:System.Linq.Expressions.UnaryExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> の子を走査します。</summary>
      <param name="node" vsli:raw="The expression to visit.">走査する式。</param>
      <returns vsli:raw="The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.">式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpression">
      <summary vsli:raw="Represents an unconditional jump. This includes return statements, break and continue statements, and other jumps.">無条件ジャンプを表します。 return ステートメント、break と continue ステートメントなど、各種のジャンプがこれに該当します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Kind">
      <summary vsli:raw="The kind of the &quot;go to&quot; expression. Serves information purposes only.">"go to" 式の種類。 情報提供のみを目的とします。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpressionKind&quot; /&gt; object representing the kind of the &quot;go to&quot; expression.">"go to" 式の種類を表す <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Target">
      <summary vsli:raw="The target label where this node jumps to.">このノードの移動先のラベル。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; object representing the target label for this node.">このノードの移動先のラベルを表す <see cref="T:System.Linq.Expressions.LabelTarget" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Type&quot; /&gt; that represents the static type of the expression.">式の静的な型を表す <see cref="P:System.Linq.Expressions.GotoExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">この式に似た新しい式を作成しますが、指定された子を使用します。 すべての子が同じであれば、この式が返されます。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Target&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.GotoExpression.Value&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.GotoExpression.Value" /> プロパティ。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">更新された子を使用した式。子が変更されていない場合はこの式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Value">
      <summary vsli:raw="The value passed to the target, or null if the target is of type System.Void.">移動先に渡される値。ターゲットの型が System.Void である場合は null。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; object representing the value passed to the target or null.">移動先に渡される値を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクト、または null。</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpressionKind">
      <summary vsli:raw="Specifies what kind of jump this &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; represents.">この <see cref="T:System.Linq.Expressions.GotoExpression" /> が表すジャンプの種類を指定します。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Break">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; that represents a break statement.">break ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Continue">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; that represents a continue statement.">continue ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Goto">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; that represents a jump to some location.">特定の位置へのジャンプを表す <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Return">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt; that represents a return statement.">return ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="T:System.Linq.Expressions.IArgumentProvider">
      <summary vsli:raw="Provides an internal interface for accessing the arguments of multiple tree nodes (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression, and IndexExpression).  This API is for internal use only.">複数のツリー ノード (DynamicExpression、ElementInit、MethodCallExpression、InvocationExpression、NewExpression および IndexExpression) の引数にアクセスするための内部インターフェイスを提供します。  この API は、内部でだけ使用します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
      <summary vsli:raw="Returns the number of arguments to the expression tree node. This API is for internal use only.">式ツリー ノードに引数の数を返します。 この API は、内部でだけ使用します。</summary>
      <returns vsli:raw="The number of arguments to the expression tree node as &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <see cref="T:System.Int32" /> として式ツリー ノードに引数の数を返します。</returns>
    </member>
    <member name="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
      <summary vsli:raw="Returns the argument at &lt;paramref name=&quot;index&quot; /&gt;, throwing if &lt;paramref name=&quot;index&quot; /&gt; is out of bounds. This API is for internal use only.">
        <paramref name="index" /> の引数を返し、<paramref name="index" /> が範囲外にある場合にスローします。 この API は、内部でだけ使用します。</summary>
      <param name="index" vsli:raw="The index of the argument.">引数のインデックス。</param>
      <returns vsli:raw="The argument at index.">インデックスの引数。</returns>
    </member>
    <member name="T:System.Linq.Expressions.IDynamicExpression">
      <summary vsli:raw="Provides an internal interface for accessing the arguments of DynamicExpression tree nodes as well as CallSite and Rewriting functionality.  You should not use this API.  It is only public due to DLL refactoring and exists only for internal performance optimizations.">DynamicExpression ツリー ノードの引数にアクセスするための内部のインターフェイスに加え、CallSite および再書き込み機能も提供します。  この API を使用しないでください。  これは、DLL リファクタリングのためパブリックのみで、内部パフォーマンスの最適化のためだけに存在します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.IDynamicExpression.CreateCallSite">
      <summary vsli:raw="Optionally creates the CallSite and returns the CallSite for the DynamicExpression's polymorphic inline cache.  You should not use this type.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.">必要に応じて、CallSite を作成し、DynamicExpression のポリモーフィック インライン キャッシュの CallSite を返します。  この型は使用しないでください。  これは、アセンブリ リファクタリングのためパブリックのみで、パフォーマンスの最適化のために内部で使用されます。</summary>
      <returns vsli:raw="The CallSite for the DynamicExpression's polymorphic inline cache.">DynamicExpression のポリモーフィック インライン キャッシュの CallSite。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IDynamicExpression.DelegateType">
      <summary vsli:raw="Gets the delegate type used by the CallSite, which is the type of the rules used in the dynamic expression's polymorphic inline cache.">動的な式のポリモーフィック インライン キャッシュに使用される規則の種類である、CallSite で使用されるデリゲート型を取得します。</summary>
      <returns vsli:raw="The delegate type used by the CallSite.">CallSite で使用されるデリゲート型。</returns>
    </member>
    <member name="M:System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression[])">
      <summary vsli:raw="Rewrites this node replacing the dynamic expression's arguments with the provided values.  The number of &lt;paramref name=&quot;args&quot; /&gt; needs to match the number of the current expression.  You should not use this type.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.  This helper method allows re-writing of nodes to be independent of the specific implementation class deriving from DynamicExpression that is being used at the call site.">動的な式の引数を指定された値と置き換えて、このノードを書き換えます。  <paramref name="args" /> の数は現在の式の数に一致する必要があります。  この型は使用しないでください。  これは、アセンブリ リファクタリングのためパブリックのみで、パフォーマンスの最適化のために内部で使用されます。  このヘルパー メソッドでは、呼び出しサイトで使用されている DynamicExpression から派生する特定の実装クラスに依存しないように、ノードを書き換えることがでます。</summary>
      <param name="args" vsli:raw="The arguments used to replace this node.">このノードを置き換えるために使用する引数。</param>
      <returns vsli:raw="The rewritten node, but if no changes were made, then returns the same node.">書き換えられたノードを返しますが、変更が行われていない場合は、同じノードを返します。</returns>
    </member>
    <member name="T:System.Linq.Expressions.IndexExpression">
      <summary vsli:raw="Represents indexing a property or array.">プロパティまたは配列のインデックス化を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Arguments">
      <summary vsli:raw="Gets the arguments that will be used to index the property or array.">プロパティまたは配列をインデックス化する際に使用される引数を取得します。</summary>
      <returns vsli:raw="The read-only collection containing the arguments that will be used to index the property or array.">プロパティまたは配列をインデックス化する際に使用される引数を格納する読み取り専用コレクション。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Indexer">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; for the property if the expression represents an indexed property, returns null otherwise.">式がインデックス付きのプロパティを表す場合は、<see cref="T:System.Reflection.PropertyInfo" /> を取得します。それ以外の場合は、null を返します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; for the property if the expression represents an indexed property, otherwise null.">式がインデックス付きプロパティを表している場合は、プロパティの <see cref="T:System.Reflection.PropertyInfo" />。それ以外の場合は、null。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Object">
      <summary vsli:raw="An object to index.">インデックス化するオブジェクト。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; representing the object to index.">インデックス化するオブジェクトを表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary vsli:raw="Returns the number of arguments to the expression tree node.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.">式ツリー ノードに引数の数を返します。  このメンバーを使用しないでください。  これは、アセンブリ リファクタリングのためパブリックのみで、パフォーマンスの最適化のために内部で使用されます。</summary>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <see cref="T:System.Int32" /> を返します。</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary vsli:raw="Returns the argument at index, throwing if index is out of bounds.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.">インデックスの引数を返し、インデックスが範囲外にある場合にスローします。  このメンバーを使用しないでください。  これは、アセンブリ リファクタリングのためパブリックのみで、パフォーマンスの最適化のために内部で使用されます。</summary>
      <param name="index" vsli:raw="The index of the argument.">引数のインデックス。</param>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" /> を返します。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.IndexExpression.Type&quot; /&gt; that represents the static type of the expression.">式の静的な型を表す <see cref="P:System.Linq.Expressions.IndexExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">この式に似た新しい式を作成しますが、指定された子を使用します。 すべての子が同じであれば、この式が返されます。</summary>
      <param name="object" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.IndexExpression.Object&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.IndexExpression.Object" /> プロパティ。</param>
      <param name="arguments" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.IndexExpression.Arguments&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.IndexExpression.Arguments" /> プロパティ。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">更新された子を使用した式。子が変更されていない場合はこの式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.InvocationExpression">
      <summary vsli:raw="Represents an expression that applies a delegate or lambda expression to a list of argument expressions.">引数リストの式にデリゲートまたはラムダ式を適用する式を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Arguments">
      <summary vsli:raw="Gets the arguments that the delegate or lambda expression is applied to.">デリゲートまたはラムダ式が適用される引数を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects which represent the arguments that the delegate is applied to.">デリゲートが適用される引数を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> です。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Expression">
      <summary vsli:raw="Gets the delegate or lambda expression to be applied.">適用するデリゲートまたはラムダ式を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the delegate to be applied.">適用するデリゲートを表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.NodeType">
      <summary vsli:raw="Returns the node type of this expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">この式のノード型を返します。 拡張ノードは、このメソッドをオーバーライドする際に <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary vsli:raw="Returns the number of arguments to the expression tree node.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.">式ツリー ノードに引数の数を返します。  このメンバーを使用しないでください。  これは、アセンブリ リファクタリングのためパブリックのみで、パフォーマンスの最適化のために内部で使用されます。</summary>
      <returns vsli:raw="The number of arguments to the expression tree node as &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <see cref="T:System.Int32" /> として式ツリー ノードに引数の数を返します。</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary vsli:raw="Returns the argument at index, throwing if index is out of bounds.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.">インデックスの引数を返し、インデックスが範囲外にある場合にスローします。  このメンバーを使用しないでください。  これは、アセンブリ リファクタリングのためパブリックのみで、パフォーマンスの最適化のために内部で使用されます。</summary>
      <param name="index" vsli:raw="The index of the argument.">引数のインデックス。</param>
      <returns vsli:raw="The argument at index, throwing if index is out of bounds, as &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" /> としてインデックスが範囲外にある場合にスローする、インデックスの引数。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;P:System.Linq.Expressions.InvocationExpression.Expression&quot; /&gt; represents.">この <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.InvocationExpression.Type&quot; /&gt; that represents the static type of the expression.">式の静的な型を表す <see cref="P:System.Linq.Expressions.InvocationExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">この式に似た新しい式を作成しますが、指定された子を使用します。 すべての子が同じであれば、この式が返されます。</summary>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.InvocationExpression.Expression&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> プロパティ。</param>
      <param name="arguments" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.InvocationExpression.Arguments&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" /> プロパティ。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">更新された子を使用した式。子が変更されていない場合はこの式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.LabelExpression">
      <summary vsli:raw="Represents a label, which can be put in any &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; context. If it is jumped to, it will get the value provided by the corresponding &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt;. Otherwise, it receives the value in &lt;see cref=&quot;P:System.Linq.Expressions.LabelExpression.DefaultValue&quot; /&gt;. If the &lt;see cref=&quot;T:System.Type&quot; /&gt; equals System.Void, no value should be provided.">
        <see cref="T:System.Linq.Expressions.Expression" /> の任意のコンテキストに置くことができるラベルを表します。 ジャンプ ステートメントの結果として、このラベルに制御が到達した場合、このラベルは、対応する <see cref="T:System.Linq.Expressions.GotoExpression" /> の値を受け取ります。 それ以外の場合は、<see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> の値が渡されます。 <see cref="T:System.Type" /> が System.Void と等しい場合は、いずれの値も渡されません。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.DefaultValue">
      <summary vsli:raw="The value of the &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt; when the label is reached through regular control flow (for example, is not jumped to).">ジャンプ ステートメントではなく通常の制御フローを経てラベルに到達した場合の <see cref="T:System.Linq.Expressions.LabelExpression" /> の値。</summary>
      <returns vsli:raw="The Expression object representing the value of the &lt;see cref=&quot;T:System.Linq.Expressions.LabelExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.LabelExpression" /> オブジェクトの値を表す式オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Target">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; which this label is associated with.">このラベルが関連付けられている <see cref="T:System.Linq.Expressions.LabelTarget" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; which this label is associated with.">このラベルが関連付けられている <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LabelExpression.Type&quot; /&gt; that represents the static type of the expression.">式の静的な型を表す <see cref="P:System.Linq.Expressions.LabelExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">この式に似た新しい式を作成しますが、指定された子を使用します。 すべての子が同じであれば、この式が返されます。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LabelExpression.Target&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.LabelExpression.Target" /> プロパティ。</param>
      <param name="defaultValue" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LabelExpression.DefaultValue&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> プロパティ。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">更新された子を使用した式。子が変更されていない場合はこの式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.LabelTarget">
      <summary vsli:raw="Used to represent the target of a &lt;see cref=&quot;T:System.Linq.Expressions.GotoExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> の移動先を表す目的で使用されます。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Name">
      <summary vsli:raw="Gets the name of the label.">ラベルの名前を取得します。</summary>
      <returns vsli:raw="The name of the label.">ラベルの名前。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelTarget.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current &lt;see cref=&quot;T:System.Object&quot; /&gt;.">現在の <see cref="T:System.String" /> を表す <see cref="T:System.Object" /> を返します</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current &lt;see cref=&quot;T:System.Object&quot; /&gt;.">現在の <see cref="T:System.Object" /> を表す <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Type">
      <summary vsli:raw="The type of value that is passed when jumping to the label (or &lt;see cref=&quot;T:System.Void&quot; /&gt; if no value should be passed).">ラベルにジャンプしたときに渡される値の型 (値を渡さない場合は <see cref="T:System.Void" />)。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the type of the value that is passed when jumping to the label or &lt;see cref=&quot;T:System.Void&quot; /&gt; if no value should be passed.">ラベルにジャンプしたときに渡される値の型を表す <see cref="T:System.Type" /> オブジェクト (値を渡さない場合は <see cref="T:System.Void" />)。</returns>
    </member>
    <member name="T:System.Linq.Expressions.LambdaExpression">
      <summary vsli:raw="Describes a lambda expression. This captures a block of code that is similar to a .NET method body.">ラムダ式を記述します。 .NET メソッド本体に似たコードのブロックをキャプチャします。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Body">
      <summary vsli:raw="Gets the body of the lambda expression.">ラムダ式の本体を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the body of the lambda expression.">ラムダ式の本体を表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile">
      <summary vsli:raw="Produces a delegate that represents the lambda expression.">ラムダ式を表すデリゲートを作成します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Delegate&quot; /&gt; that contains the compiled version of the lambda expression.">コンパイルされたバージョンのラムダ式を格納する <see cref="T:System.Delegate" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Boolean)">
      <summary vsli:raw="Produces an interpreted or compiled delegate that represents the lambda expression.">ラムダ式を表す、解釈されたまたはコンパイル済みのデリゲートを作成します。</summary>
      <param name="preferInterpretation" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the expression should be compiled to an interpreted form, if it's available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">その式を解釈された形式にコンパイルすべきことを示す <see langword="true" /> (存在する場合)、それ以外の場合 <see langword="false" />。</param>
      <returns vsli:raw="A delegate that represents the compiled lambda expression described by the &lt;see cref=&quot;T:System.Linq.Expressions.LambdaExpression&quot; /&gt; object.">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> オブジェクトにより記述されたコンパイル済みのラムダ式を表すデリゲート。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary vsli:raw="Produces a delegate that represents the lambda expression.">ラムダ式を表すデリゲートを作成します。</summary>
      <param name="debugInfoGenerator" vsli:raw="Debugging information generator used by the compiler to mark sequence points and annotate local variables.">シーケンス ポイントをマークしたりローカル変数に注釈を付けたりするためにコンパイラが使用するデバッグ情報ジェネレーター。</param>
      <returns vsli:raw="A delegate containing the compiled version of the lambda.">コンパイルされたバージョンのラムダを含んでいるデリゲート。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Name">
      <summary vsli:raw="Gets the name of the lambda expression.">ラムダ式の名前を取得します。</summary>
      <returns vsli:raw="The name of the lambda expression.">ラムダ式の名前。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Parameters">
      <summary vsli:raw="Gets the parameters of the lambda expression.">ラムダ式のパラメーターを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; objects that represent the parameters of the lambda expression.">ラムダ式のパラメーターを表す <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> オブジェクトの <see cref="T:System.Linq.Expressions.ParameterExpression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.ReturnType">
      <summary vsli:raw="Gets the return type of the lambda expression.">ラムダ式の戻り値の型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the type of the lambda expression.">ラムダ式の型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.TailCall">
      <summary vsli:raw="Gets the value that indicates if the lambda expression will be compiled with the tail call optimization.">ラムダ式が tail 呼び出し最適化を使用してコンパイルされるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the lambda expression will be compiled with the tail call optimization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />ラムダ式が末尾呼び出しの最適化でコンパイルされる場合は。それ以外<see langword="false" />の場合は。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LambdaExpression.Type&quot; /&gt; that represents the static type of the expression.">式の静的な型を表す <see cref="P:System.Linq.Expressions.LambdaExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ListInitExpression">
      <summary vsli:raw="Represents a constructor call that has a collection initializer.">コレクション初期化子を持つコンストラクター呼び出しを表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.CanReduce">
      <summary vsli:raw="Gets a value that indicates whether the expression tree node can be reduced.">式ツリー ノードを縮小できるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node can be reduced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />ノードを減らすことができる場合は。それ以外<see langword="false" />の場合は。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Initializers">
      <summary vsli:raw="Gets the element initializers that are used to initialize a collection.">コレクションの初期化に使用される要素初期化子を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects which represent the elements that are used to initialize the collection.">コレクションの初期化に使用される要素を表す <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> オブジェクトの <see cref="T:System.Linq.Expressions.ElementInit" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NewExpression">
      <summary vsli:raw="Gets the expression that contains a call to the constructor of a collection type.">コレクション型のコンストラクターへの呼び出しを含む式を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that represents the call to the constructor of a collection type.">コレクション型のコンストラクターへの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Reduce">
      <summary vsli:raw="Reduces the binary expression node to a simpler expression.">二項式ノードをより単純な式へと変形します。</summary>
      <returns vsli:raw="The reduced expression.">単純化された式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Type&quot; /&gt; that represents the static type of the expression.">式の静的な型を表す <see cref="P:System.Linq.Expressions.ListInitExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">この式に似た新しい式を作成しますが、指定された子を使用します。 すべての子が同じであれば、この式が返されます。</summary>
      <param name="newExpression" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.NewExpression&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> プロパティ。</param>
      <param name="initializers" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ListInitExpression.Initializers&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> プロパティ。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">更新された子を使用した式。子が変更されていない場合はこの式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.LoopExpression">
      <summary vsli:raw="Represents an infinite loop. It can be exited with &quot;break&quot;.">無限ループを表します。 これは "break" を使用して抜けることができます。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Body">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that is the body of the loop.">ループの本体である <see cref="T:System.Linq.Expressions.Expression" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that is the body of the loop.">ループの本体である <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.BreakLabel">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that is used by the loop body as a break statement target.">ループの本体で break ステートメントの移動先として使用されている <see cref="T:System.Linq.Expressions.LabelTarget" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that is used by the loop body as a break statement target.">ループの本体で break ステートメントの移動先として使用されている <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.ContinueLabel">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that is used by the loop body as a continue statement target.">ループの本体で continue ステートメントの移動先として使用されている <see cref="T:System.Linq.Expressions.LabelTarget" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; that is used by the loop body as a continue statement target.">ループの本体で continue ステートメントの移動先として使用されている <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.NodeType">
      <summary vsli:raw="Returns the node type of this expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">この式のノード型を返します。 拡張ノードは、このメソッドをオーバーライドする際に <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LoopExpression.Type&quot; /&gt; that represents the static type of the expression.">式の静的な型を表す <see cref="P:System.Linq.Expressions.LoopExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">この式に似た新しい式を作成しますが、指定された子を使用します。 すべての子が同じであれば、この式が返されます。</summary>
      <param name="breakLabel" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LoopExpression.BreakLabel&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.LoopExpression.BreakLabel" /> プロパティ。</param>
      <param name="continueLabel" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LoopExpression.ContinueLabel&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.LoopExpression.ContinueLabel" /> プロパティ。</param>
      <param name="body" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.LoopExpression.Body&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.LoopExpression.Body" /> プロパティ。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">更新された子を使用した式。子が変更されていない場合はこの式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberAssignment">
      <summary vsli:raw="Represents assignment operation for a field or property of an object.">オブジェクトのフィールドまたはプロパティの代入演算を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberAssignment.Expression">
      <summary vsli:raw="Gets the expression to assign to the field or property.">フィールドまたはプロパティに割り当てる式を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the value to assign to the field or property.">フィールドまたはプロパティに割り当てる値を表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">この式に似た新しい式を作成しますが、指定された子を使用します。 すべての子が同じであれば、この式が返されます。</summary>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MemberAssignment.Expression&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> プロパティ。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">更新された子を使用した式。子が変更されていない場合はこの式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBinding">
      <summary vsli:raw="Provides the base class from which the classes that represent bindings that are used to initialize members of a newly created object derive.">新しく作成されたオブジェクトのメンバーの初期化に使用されるバインディングを表すクラスが派生する基本クラスを提供します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.#ctor(System.Linq.Expressions.MemberBindingType,System.Reflection.MemberInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt; class.">
        <see cref="T:System.Linq.Expressions.MemberBinding" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.MemberBindingType&quot; /&gt; that discriminates the type of binding that is represented.">表されるバインディングの型を判別する <see cref="T:System.Linq.Expressions.MemberBindingType" />。</param>
      <param name="member" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that represents a field or property to be initialized.">初期化されるフィールドまたはプロパティを表す <see cref="T:System.Reflection.MemberInfo" />。</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.BindingType">
      <summary vsli:raw="Gets the type of binding that is represented.">表されるバインディングの型を取得します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberBindingType&quot; /&gt; values.">
        <see cref="T:System.Linq.Expressions.MemberBindingType" /> 値のいずれか 1 つ。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.Member">
      <summary vsli:raw="Gets the field or property to be initialized.">初期化されるフィールドまたはプロパティを取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that represents the field or property to be initialized.">初期化されるフィールドまたはプロパティを表す <see cref="T:System.Reflection.MemberInfo" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.ToString">
      <summary vsli:raw="Returns a textual representation of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberBinding" /> のテキスト表現を返します。</summary>
      <returns vsli:raw="A textual representation of the &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.MemberBinding" /> のテキスト表現。</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBindingType">
      <summary vsli:raw="Describes the binding types that are used in &lt;see cref=&quot;T:System.Linq.Expressions.MemberInitExpression&quot; /&gt; objects.">
        <see cref="T:System.Linq.Expressions.MemberInitExpression" /> オブジェクトで使用されるバインディングの型を記述します。</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.Assignment">
      <summary vsli:raw="A binding that represents initializing a member with the value of an expression.">式の値を持つメンバーの初期化を表すバインディング。</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.ListBinding">
      <summary vsli:raw="A binding that represents initializing a member of type &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; or &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; from a list of elements.">要素のリストからの型が <see cref="T:System.Collections.IList" /> または <see cref="T:System.Collections.Generic.ICollection`1" /> のメンバーの初期化を表すバインディング。</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.MemberBinding">
      <summary vsli:raw="A binding that represents recursively initializing members of a member.">メンバーのメンバーの初期化を再帰的に表すバインディング。</summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberExpression">
      <summary vsli:raw="Represents accessing a field or property.">フィールドまたはプロパティへのアクセスを表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">このノード型の特定の Visit メソッドにデスパッチします。 たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">このノードを走査するビジター。</param>
      <returns vsli:raw="The result of visiting this node.">このノードの走査結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Expression">
      <summary vsli:raw="Gets the containing object of the field or property.">フィールドまたはプロパティのコンテナー オブジェクトを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the containing object of the field or property.">フィールドまたはプロパティのコンテナー オブジェクトを表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Member">
      <summary vsli:raw="Gets the field or property to be accessed.">アクセスするフィールドまたはプロパティを取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that represents the field or property to be accessed.">アクセス先のフィールドまたはプロパティを表す <see cref="T:System.Reflection.MemberInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt;.">この <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> のノード型を返します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">この式に似た新しい式を作成しますが、指定された子を使用します。 すべての子が同じであれば、この式が返されます。</summary>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MemberExpression.Expression&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティ。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">更新された子を使用した式。子が変更されていない場合はこの式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberInitExpression">
      <summary vsli:raw="Represents calling a constructor and initializing one or more members of the new object.">コンストラクターの呼び出しと、新しいオブジェクトの 1 つまたは複数のメンバーの初期化を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Bindings">
      <summary vsli:raw="Gets the bindings that describe how to initialize the members of the newly created object.">新しく作成されたオブジェクトのメンバーを初期化する方法を記述するバインディングを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt; objects which describe how to initialize the members.">メンバーを初期化する方法を記述する <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> オブジェクトの <see cref="T:System.Linq.Expressions.MemberBinding" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.CanReduce">
      <summary vsli:raw="Gets a value that indicates whether the expression tree node can be reduced.">式ツリー ノードを縮小できるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node can be reduced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />ノードを減らすことができる場合は。それ以外<see langword="false" />の場合は。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NewExpression">
      <summary vsli:raw="Gets the expression that represents the constructor call.">コンストラクター呼び出しを表す式を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Linq.Expressions.NewExpression&quot; /&gt; that represents the constructor call.">コンストラクター呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NodeType">
      <summary vsli:raw="Returns the node type of this Expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">この式のノード型を返します。 拡張ノードは、このメソッドをオーバーライドする際に <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Reduce">
      <summary vsli:raw="Reduces the &lt;see cref=&quot;T:System.Linq.Expressions.MemberInitExpression&quot; /&gt; to a simpler expression.">
        <see cref="T:System.Linq.Expressions.MemberInitExpression" /> をより単純な式へと変形します。</summary>
      <returns vsli:raw="The reduced expression.">単純化された式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.Type&quot; /&gt; that represents the static type of the expression.">式の静的な型を表す <see cref="P:System.Linq.Expressions.MemberInitExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">この式に似た新しい式を作成しますが、指定された子を使用します。 すべての子が同じであれば、この式が返されます。</summary>
      <param name="newExpression" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.NewExpression&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> プロパティ。</param>
      <param name="bindings" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MemberInitExpression.Bindings&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> プロパティ。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">更新された子を使用した式。子が変更されていない場合はこの式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberListBinding">
      <summary vsli:raw="Represents initializing the elements of a collection member of a newly created object.">新しく作成されたオブジェクトのコレクション メンバーの要素の初期化を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberListBinding.Initializers">
      <summary vsli:raw="Gets the element initializers for initializing a collection member of a newly created object.">新しく作成されたオブジェクトのコレクション メンバーを初期化する要素初期化子を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.ElementInit&quot; /&gt; objects to initialize a collection member with.">コレクション メンバーと共に初期化する <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> オブジェクトの <see cref="T:System.Linq.Expressions.ElementInit" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">この式に似た新しい式を作成しますが、指定された子を使用します。 すべての子が同じであれば、この式が返されます。</summary>
      <param name="initializers" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MemberListBinding.Initializers&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> プロパティ。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">更新された子を使用した式。子が変更されていない場合はこの式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberMemberBinding">
      <summary vsli:raw="Represents initializing members of a member of a newly created object.">新しく作成されたオブジェクトのメンバーの初期化メンバーを表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberMemberBinding.Bindings">
      <summary vsli:raw="Gets the bindings that describe how to initialize the members of a member.">メンバーのメンバーを初期化する方法を記述するバインディングを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.MemberBinding&quot; /&gt; objects that describe how to initialize the members of the member.">メンバーのメンバーを初期化する方法を記述する <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> オブジェクトの <see cref="T:System.Linq.Expressions.MemberBinding" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">この式に似た新しい式を作成しますが、指定された子を使用します。 すべての子が同じであれば、この式が返されます。</summary>
      <param name="bindings" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MemberMemberBinding.Bindings&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> プロパティ。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">更新された子を使用した式。子が変更されていない場合はこの式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.MethodCallExpression">
      <summary vsli:raw="Represents a call to either static or an instance method.">静的メソッドまたはインスタンス メソッドへの呼び出しを表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">このノード型の特定の Visit メソッドにデスパッチします。 たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">このノードを走査するビジター。</param>
      <returns vsli:raw="The result of visiting this node.">このノードの走査結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Arguments">
      <summary vsli:raw="Gets a collection of expressions that represent arguments of the called method.">呼び出されたメソッドの引数を表す式のコレクションを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects which represent the arguments to the called method.">呼び出されたメソッドへの引数を表す <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> オブジェクトの <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Method">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the method to be called.">呼び出されるメソッドの <see cref="T:System.Reflection.MethodInfo" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the called method.">呼び出されたメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Object">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the instance for instance method calls or null for static method calls.">インスタンス (インスタンス メソッド呼び出しの場合) または null (静的メソッド呼び出しの場合) を表す <see cref="T:System.Linq.Expressions.Expression" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the receiving object of the method.">メソッドの受け取り側のオブジェクトを表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary vsli:raw="Returns the number of arguments to the expression tree node.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.">式ツリー ノードに引数の数を返します。  このメンバーを使用しないでください。  これは、アセンブリ リファクタリングのためパブリックのみで、パフォーマンスの最適化のために内部で使用されます。</summary>
      <returns vsli:raw="The number of arguments to the expression tree node as  &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">として<see cref="T:System.Int32" />の式ツリーノードへの引数の数。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary vsli:raw="Returns the argument at index, throwing if index is out of bounds.  You should not use this member.  It is only public due to assembly refactoring, and it is used internally for performance optimizations.">インデックスの引数を返し、インデックスが範囲外にある場合にスローします。  このメンバーを使用しないでください。  これは、アセンブリ リファクタリングのためパブリックのみで、パフォーマンスの最適化のために内部で使用されます。</summary>
      <param name="index" vsli:raw="The index of the argument.">引数のインデックス。</param>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" /> を返します。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Type&quot; /&gt; that represents the static type of the expression.">式の静的な型を表す <see cref="P:System.Linq.Expressions.MethodCallExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">この式に似た新しい式を作成しますが、指定された子を使用します。 すべての子が同じであれば、この式が返されます。</summary>
      <param name="object" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Object&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティ。</param>
      <param name="arguments" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.MethodCallExpression.Arguments&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> プロパティ。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">更新された子を使用した式。子が変更されていない場合はこの式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.NewArrayExpression">
      <summary vsli:raw="Represents creating a new array and possibly initializing the elements of the new array.">新しい配列の作成と、場合によっては新しい配列の要素の初期化を表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">このノード型の特定の Visit メソッドにデスパッチします。 たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">このノードを走査するビジター。</param>
      <returns vsli:raw="The result of visiting this node.">このノードの走査結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Expressions">
      <summary vsli:raw="Gets the bounds of the array if the value of the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property is &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NewArrayBounds&quot; /&gt;, or the values to initialize the elements of the new array if the value of the &lt;see cref=&quot;P:System.Linq.Expressions.Expression.NodeType&quot; /&gt; property is &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.NewArrayInit&quot; /&gt;.">
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティの値が <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> の場合は配列の境界を取得し、<see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティの値が <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> の場合は新しい配列の要素を初期化する値を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects which represent either the bounds of the array or the initialization values.">配列の境界または初期化値のどちらかを表す <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> オブジェクトの <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Type&quot; /&gt; that represents the static type of the expression.">式の静的な型を表す <see cref="P:System.Linq.Expressions.NewArrayExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">この式に似た新しい式を作成しますが、指定された子を使用します。 すべての子が同じであれば、この式が返されます。</summary>
      <param name="expressions" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.NewArrayExpression.Expressions&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> プロパティ。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">更新された子を使用した式。子が変更されていない場合はこの式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.NewExpression">
      <summary vsli:raw="Represents a constructor call.">コンストラクター呼び出しを表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">このノード型の特定の Visit メソッドにデスパッチします。 たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">このノードを走査するビジター。</param>
      <returns vsli:raw="The result of visiting this node.">このノードの走査結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Arguments">
      <summary vsli:raw="Gets the arguments to the constructor.">コンストラクターへの引数を取得します。</summary>
      <returns vsli:raw="A collection of &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; objects that represent the arguments to the constructor.">コンストラクターへの引数を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトのコレクション。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Constructor">
      <summary vsli:raw="Gets the called constructor.">呼び出されたコンストラクターを取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; that represents the called constructor.">呼び出されたコンストラクターを表す <see cref="T:System.Reflection.ConstructorInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Members">
      <summary vsli:raw="Gets the members that can retrieve the values of the fields that were initialized with constructor arguments.">コンストラクター引数を使用して初期化されたフィールド値の取得が可能なメンバーを取得します。</summary>
      <returns vsli:raw="A collection of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects that represent the members that can retrieve the values of the fields that were initialized with constructor arguments.">コンストラクター引数を使用して初期化されたフィールド値の取得が可能なメンバーを表す <see cref="T:System.Reflection.MemberInfo" /> オブジェクトのコレクション。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary vsli:raw="Gets the number of arguments to the expression tree node.">式ツリー ノードへの引数の数を取得します。</summary>
      <returns vsli:raw="The number of arguments to the expression tree node.">式ツリー ノードへの引数の数。</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary vsli:raw="Returns the argument at index, throwing if index is out of bounds.">インデックスの引数を返し、インデックスが範囲外にある場合にスローします。</summary>
      <param name="index" vsli:raw="The index of the argument.">引数のインデックス。</param>
      <returns vsli:raw="The argument at index, throwing if index is out of bounds.">インデックスが範囲外にある場合にスローする、インデックスの引数。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Type&quot; /&gt; that represents the static type of the expression.">式の静的な型を表す <see cref="P:System.Linq.Expressions.NewExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">この式に似た新しい式を作成しますが、指定された子を使用します。 すべての子が同じであれば、この式が返されます。</summary>
      <param name="arguments" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.NewExpression.Arguments&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> プロパティ。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">更新された子を使用した式。子が変更されていない場合はこの式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ParameterExpression">
      <summary vsli:raw="Represents a named parameter expression.">名前付きパラメーター式を表します。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary vsli:raw="Dispatches to the specific visit method for this node type. For example, &lt;see cref=&quot;T:System.Linq.Expressions.MethodCallExpression&quot; /&gt; calls the &lt;see cref=&quot;M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)&quot; /&gt;.">このノード型の特定の Visit メソッドにデスパッチします。 たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</summary>
      <param name="visitor" vsli:raw="The visitor to visit this node with.">このノードを走査するビジター。</param>
      <returns vsli:raw="The result of visiting this node.">このノードの走査結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.IsByRef">
      <summary vsli:raw="Indicates that this &lt;c&gt;ParameterExpression&lt;/c&gt; is to be treated as a &lt;see langword=&quot;ByRef&quot; /&gt; parameter.">この <c>ParameterExpression</c> が <see langword="ByRef" /> パラメーターとして扱われることを示します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;c&gt;ParameterExpression&lt;/c&gt; is a &lt;see langword=&quot;ByRef&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />この<c>parameterexpression</c>がパラメーターで<see langword="ByRef" />ある場合は。 <see langword="false" />それ以外の場合は。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Name">
      <summary vsli:raw="Gets the name of the parameter or variable.">パラメーターまたは変数の名前を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the name of the parameter.">パラメーターの名前を格納する <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.ParameterExpression.Type&quot; /&gt; that represents the static type of the expression.">式の静的な型を表す <see cref="P:System.Linq.Expressions.ParameterExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.RuntimeVariablesExpression">
      <summary vsli:raw="An expression that provides runtime read/write permission for variables.">変数に対する実行時の読み取り/書き込みアクセス許可を提供する式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.NodeType">
      <summary vsli:raw="Returns the node type of this Expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">この式のノード型を返します。 拡張ノードは、このメソッドをオーバーライドする際に <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.RuntimeVariablesExpression.Type&quot; /&gt; that represents the static type of the expression.">式の静的な型を表す <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">この式に似た新しい式を作成しますが、指定された子を使用します。 すべての子が同じであれば、この式が返されます。</summary>
      <param name="variables" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.RuntimeVariablesExpression.Variables&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> プロパティ。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">更新された子を使用した式。子が変更されていない場合はこの式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables">
      <summary vsli:raw="The variables or parameters to which to provide runtime access.">実行時アクセスを提供する変数またはパラメーター。</summary>
      <returns vsli:raw="The read-only collection containing parameters that will be provided the runtime access.">実行時アクセスが提供されるパラメーターを格納している読み取り専用コレクション。</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchCase">
      <summary vsli:raw="Represents one case of a &lt;see cref=&quot;T:System.Linq.Expressions.SwitchExpression&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.SwitchExpression" /> の 1 つのケース (case) を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.Body">
      <summary vsli:raw="Gets the body of this case.">このケースの本体を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; object that represents the body of the case block.">case ブロックの本体を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.TestValues">
      <summary vsli:raw="Gets the values of this case. This case is selected for execution when the &lt;see cref=&quot;P:System.Linq.Expressions.SwitchExpression.SwitchValue&quot; /&gt; matches any of these values.">このケースの値を取得します。 <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> がこれらの値のいずれかと一致した場合、実行にはこのケースが選択されます。</summary>
      <returns vsli:raw="The read-only collection of the values for this case block.">この case ブロックの値の読み取り専用コレクション。</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current &lt;see cref=&quot;T:System.Object&quot; /&gt;.">現在の <see cref="T:System.String" /> を表す <see cref="T:System.Object" /> を返します</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current &lt;see cref=&quot;T:System.Object&quot; /&gt;.">現在の <see cref="T:System.Object" /> を表す <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">この式に似た新しい式を作成しますが、指定された子を使用します。 すべての子が同じであれば、この式が返されます。</summary>
      <param name="testValues" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.SwitchCase.TestValues&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.SwitchCase.TestValues" /> プロパティ。</param>
      <param name="body" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.SwitchCase.Body&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.SwitchCase.Body" /> プロパティ。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">更新された子を使用した式。子が変更されていない場合はこの式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchExpression">
      <summary vsli:raw="Represents a control expression that handles multiple selections by passing control to &lt;see cref=&quot;T:System.Linq.Expressions.SwitchCase&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.SwitchCase" /> に制御を渡すことによって複数の選択内容を処理する制御式を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Cases">
      <summary vsli:raw="Gets the collection of &lt;see cref=&quot;T:System.Linq.Expressions.SwitchCase&quot; /&gt; objects for the switch.">switch に対応する <see cref="T:System.Linq.Expressions.SwitchCase" /> オブジェクトのコレクションを取得します。</summary>
      <returns vsli:raw="The collection of &lt;see cref=&quot;T:System.Linq.Expressions.SwitchCase&quot; /&gt; objects.">
        <see cref="T:System.Linq.Expressions.SwitchCase" /> オブジェクトのコレクション。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Comparison">
      <summary vsli:raw="Gets the equality comparison method, if any.">等価比較メソッドを取得します (存在する場合)。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object representing the equality comparison method.">等価比較メソッドを表す <see cref="T:System.Reflection.MethodInfo" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.DefaultBody">
      <summary vsli:raw="Gets the test for the switch.">switch のテストを取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; object representing the test for the switch.">switch のテストを表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.NodeType">
      <summary vsli:raw="Returns the node type of this Expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">この式のノード型を返します。 拡張ノードは、このメソッドをオーバーライドする際に <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.SwitchValue">
      <summary vsli:raw="Gets the test for the switch.">switch のテストを取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; object representing the test for the switch.">switch のテストを表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.SwitchExpression.Type&quot; /&gt; that represents the static type of the expression.">式の静的な型を表す <see cref="P:System.Linq.Expressions.SwitchExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">この式に似た新しい式を作成しますが、指定された子を使用します。 すべての子が同じであれば、この式が返されます。</summary>
      <param name="switchValue" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.SwitchExpression.SwitchValue&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> プロパティ。</param>
      <param name="cases" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.SwitchExpression.Cases&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.SwitchExpression.Cases" /> プロパティ。</param>
      <param name="defaultBody" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.SwitchExpression.DefaultBody&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.SwitchExpression.DefaultBody" /> プロパティ。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">更新された子を使用した式。子が変更されていない場合はこの式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.SymbolDocumentInfo">
      <summary vsli:raw="Stores information necessary to emit debugging symbol information for a source file, in particular the file name and unique language identifier.">ソース ファイルのデバッグ シンボル情報を生成するのに必要な情報を格納します (特にファイル名や一意の言語識別子)。</summary>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType">
      <summary vsli:raw="Returns the document type's unique identifier, if any.">ドキュメントの種類の一意の識別子を返します (存在する場合)。 既定値はテキスト ファイルの GUID です。</summary>
      <returns vsli:raw="The document type's unique identifier. The default is the GUID for a text file.">ドキュメントの種類の一意の識別子。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.FileName">
      <summary vsli:raw="The source file name.">ソース ファイル名。</summary>
      <returns vsli:raw="The string representing the source file name.">ソース ファイル名を表す文字列。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.Language">
      <summary vsli:raw="Returns the language's unique identifier, if any.">言語の一意の識別子を返します (存在する場合)。</summary>
      <returns vsli:raw="The language's unique identifier.">言語の一意の識別子。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor">
      <summary vsli:raw="Returns the language vendor's unique identifier, if any.">言語の販売元の一意の識別子を返します (存在する場合)。</summary>
      <returns vsli:raw="The language vendor's unique identifier.">言語の販売元の一意の識別子。</returns>
    </member>
    <member name="T:System.Linq.Expressions.TryExpression">
      <summary vsli:raw="Represents a try/catch/finally/fault block.">try/catch/finally/fault ブロックを表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Body">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; representing the body of the try block.">try ブロックの本体を表す <see cref="T:System.Linq.Expressions.Expression" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; representing the body of the try block.">try ブロックの本体を表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Fault">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; representing the fault block.">fault ブロックを表す <see cref="T:System.Linq.Expressions.Expression" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; representing the fault block.">fault ブロックを表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Finally">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; representing the finally block.">finally ブロックを表す <see cref="T:System.Linq.Expressions.Expression" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; representing the finally block.">finally ブロックを表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Handlers">
      <summary vsli:raw="Gets the collection of &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; expressions associated with the try block.">try ブロックに関連付けられている <see cref="T:System.Linq.Expressions.CatchBlock" /> 式のコレクションを取得します。</summary>
      <returns vsli:raw="The collection of &lt;see cref=&quot;T:System.Linq.Expressions.CatchBlock&quot; /&gt; expressions associated with the try block.">try ブロックに関連付けられている <see cref="T:System.Linq.Expressions.CatchBlock" /> 式のコレクション。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.TryExpression.Type&quot; /&gt; that represents the static type of the expression.">式の静的な型を表す <see cref="P:System.Linq.Expressions.TryExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">この式に似た新しい式を作成しますが、指定された子を使用します。 すべての子が同じであれば、この式が返されます。</summary>
      <param name="body" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.TryExpression.Body&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.TryExpression.Body" /> プロパティ。</param>
      <param name="handlers" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.TryExpression.Handlers&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.TryExpression.Handlers" /> プロパティ。</param>
      <param name="finally" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.TryExpression.Finally&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.TryExpression.Finally" /> プロパティ。</param>
      <param name="fault" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.TryExpression.Fault&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.TryExpression.Fault" /> プロパティ。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">更新された子を使用した式。子が変更されていない場合はこの式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.TypeBinaryExpression">
      <summary vsli:raw="Represents an operation between an expression and a type.">式と型の間の演算を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Expression">
      <summary vsli:raw="Gets the expression operand of a type test operation.">型テスト演算の式オペランドを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the expression operand of a type test operation.">型テスト演算の式オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.NodeType">
      <summary vsli:raw="Returns the node type of this Expression. Extension nodes should return &lt;see cref=&quot;F:System.Linq.Expressions.ExpressionType.Extension&quot; /&gt; when overriding this method.">この式のノード型を返します。 拡張ノードは、このメソッドをオーバーライドする際に <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> を返す必要があります。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; of the expression.">式の <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;P:System.Linq.Expressions.TypeBinaryExpression.Expression&quot; /&gt; represents.">この <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.TypeBinaryExpression.Type&quot; /&gt; that represents the static type of the expression.">式の静的な型を表す <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand">
      <summary vsli:raw="Gets the type operand of a type test operation.">型テスト演算の型オペランドを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type operand of a type test operation.">型テスト演算の型オペランドを表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">この式に似た新しい式を作成しますが、指定された子を使用します。 すべての子が同じであれば、この式が返されます。</summary>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.TypeBinaryExpression.Expression&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> プロパティ。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">更新された子を使用した式。子が変更されていない場合はこの式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.UnaryExpression">
      <summary vsli:raw="Represents an expression that has a unary operator.">単項演算子を持つ式を表します。</summary>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.CanReduce">
      <summary vsli:raw="Gets a value that indicates whether the expression tree node can be reduced.">式ツリー ノードを縮小できるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a node can be reduced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />ノードを減らすことができる場合は。それ以外<see langword="false" />の場合は。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLifted">
      <summary vsli:raw="Gets a value that indicates whether the expression tree node represents a lifted call to an operator.">式ツリー ノードが、演算子へのリフトされた呼び出しを表すかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node represents a lifted call; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">ノードがリフトされた呼び出しを表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
      <summary vsli:raw="Gets a value that indicates whether the expression tree node represents a lifted call to an operator whose return type is lifted to a nullable type.">式ツリー ノードが、戻り値の型が null 許容型にリフトされた演算子への、リフトされた呼び出しを表すかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operator's return type is lifted to a nullable type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">演算子の戻り値の型が null 許容型にリフトされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Method">
      <summary vsli:raw="Gets the implementing method for the unary operation.">単項演算の実装メソッドを取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the implementing method.">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.NodeType">
      <summary vsli:raw="Returns the node type of this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt;.">この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を返します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.ExpressionType&quot; /&gt; that represents this expression.">この式を表す <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Operand">
      <summary vsli:raw="Gets the operand of the unary operation.">単項演算のオペランドを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that represents the operand of the unary operation.">単項演算のオペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Reduce">
      <summary vsli:raw="Reduces the expression node to a simpler expression.">式ノードをより単純な式へと変形します。</summary>
      <returns vsli:raw="The reduced expression.">単純化された式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Type">
      <summary vsli:raw="Gets the static type of the expression that this &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; represents.">この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Type&quot; /&gt; that represents the static type of the expression.">式の静的な型を表す <see cref="P:System.Linq.Expressions.UnaryExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.">この式に似た新しい式を作成しますが、指定された子を使用します。 すべての子が同じであれば、この式が返されます。</summary>
      <param name="operand" vsli:raw="The &lt;see cref=&quot;P:System.Linq.Expressions.UnaryExpression.Operand&quot; /&gt; property of the result.">結果の <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティ。</param>
      <returns vsli:raw="This expression if no children are changed or an expression with the updated children.">更新された子を使用した式。子が変更されていない場合はこの式。</returns>
    </member>
    <member name="T:System.Linq.IOrderedQueryable">
      <summary vsli:raw="Represents the result of a sorting operation.">並べ替え操作の結果を表します。</summary>
    </member>
    <member name="T:System.Linq.IOrderedQueryable`1">
      <summary vsli:raw="Represents the result of a sorting operation.">並べ替え操作の結果を表します。</summary>
      <typeparam name="T" vsli:raw="The type of the content of the data source.">データ ソースのコンテンツの種類。</typeparam>
    </member>
    <member name="T:System.Linq.IQueryable">
      <summary vsli:raw="Provides functionality to evaluate queries against a specific data source wherein the type of the data is not specified.">データの型が指定されていない場合に特定のデータ ソースに対するクエリを評価する機能を提供します。</summary>
    </member>
    <member name="P:System.Linq.IQueryable.ElementType">
      <summary vsli:raw="Gets the type of the element(s) that are returned when the expression tree associated with this instance of &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; is executed.">
        <see cref="T:System.Linq.IQueryable" /> のこのインスタンスに関連付けられた式ツリーが実行されたときに返される要素の型を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.">このオブジェクトに関連付けられた式ツリーが実行されたときに返される要素の型を表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Expression">
      <summary vsli:raw="Gets the expression tree that is associated with the instance of &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt;.">
        <see cref="T:System.Linq.IQueryable" /> のインスタンスに関連付けられている式ツリーを取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; that is associated with this instance of &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt;.">
        <see cref="T:System.Linq.Expressions.Expression" /> のこのインスタンスに関連付けられている <see cref="T:System.Linq.IQueryable" />。</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Provider">
      <summary vsli:raw="Gets the query provider that is associated with this data source.">このデータ ソースに関連付けられたクエリ プロバイダーを取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryProvider&quot; /&gt; that is associated with this data source.">このデータ ソースに関連付けられた <see cref="T:System.Linq.IQueryProvider" />。</returns>
    </member>
    <member name="T:System.Linq.IQueryable`1">
      <summary vsli:raw="Provides functionality to evaluate queries against a specific data source wherein the type of the data is known.">データの型がわかっている場合に特定のデータ ソースに対するクエリを評価する機能を提供します。</summary>
      <typeparam name="T" vsli:raw="The type of the data in the data source.">データ ソース内のデータの型。</typeparam>
    </member>
    <member name="T:System.Linq.IQueryProvider">
      <summary vsli:raw="Defines methods to create and execute queries that are described by an &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; object.">
        <see cref="T:System.Linq.IQueryable" /> オブジェクトによって記述されるクエリを作成および実行するメソッドを定義します。</summary>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Constructs an &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; object that can evaluate the query represented by a specified expression tree.">指定した式ツリーによって表されるクエリを評価できる <see cref="T:System.Linq.IQueryable" /> オブジェクトを構築します。</summary>
      <param name="expression" vsli:raw="An expression tree that represents a LINQ query.">LINQ クエリを表す式ツリー。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; that can evaluate the query represented by the specified expression tree.">指定した式ツリーによって表されるクエリを評価できる <see cref="T:System.Linq.IQueryable" />。</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Constructs an &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; object that can evaluate the query represented by a specified expression tree.">指定した式ツリーによって表されるクエリを評価できる <see cref="T:System.Linq.IQueryable`1" /> オブジェクトを構築します。</summary>
      <param name="expression" vsli:raw="An expression tree that represents a LINQ query.">LINQ クエリを表す式ツリー。</param>
      <typeparam name="TElement" vsli:raw="The type of the elements of the &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that is returned.">返される <see cref="T:System.Linq.IQueryable`1" /> の要素の型。</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that can evaluate the query represented by the specified expression tree.">指定した式ツリーによって表されるクエリを評価できる <see cref="T:System.Linq.IQueryable`1" />。</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Executes the query represented by a specified expression tree.">指定した式ツリーによって表されるクエリを実行します。</summary>
      <param name="expression" vsli:raw="An expression tree that represents a LINQ query.">LINQ クエリを表す式ツリー。</param>
      <returns vsli:raw="The value that results from executing the specified query.">指定したクエリの実行結果の値。</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Executes the strongly-typed query represented by a specified expression tree.">指定した式ツリーによって表される、厳密に型指定されたクエリを実行します。</summary>
      <param name="expression" vsli:raw="An expression tree that represents a LINQ query.">LINQ クエリを表す式ツリー。</param>
      <typeparam name="TResult" vsli:raw="The type of the value that results from executing the query.">クエリの実行結果の値の型。</typeparam>
      <returns vsli:raw="The value that results from executing the specified query.">指定したクエリの実行結果の値。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite">
      <summary vsli:raw="A dynamic call site base class. This type is used as a parameter type to the dynamic site targets.">動的呼び出しサイトの基本クラス。 この型は、動的呼び出しサイトのターゲットのパラメーター型として使用されます。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite.Binder">
      <summary vsli:raw="Class responsible for binding dynamic operations on the dynamic site.">動的サイトで動的操作のバインディングを行うクラス。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; object responsible for binding dynamic operations.">動的操作のバインディングを行う <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite.Create(System.Type,System.Runtime.CompilerServices.CallSiteBinder)">
      <summary vsli:raw="Creates a call site with the given delegate type and binder.">指定したデリゲート型とバインダーを使用して呼び出しサイトを作成します。</summary>
      <param name="delegateType" vsli:raw="The call site delegate type.">呼び出しサイトのデリゲート型。</param>
      <param name="binder" vsli:raw="The call site binder.">呼び出しサイトのバインダー。</param>
      <returns vsli:raw="The new call site.">新しい呼び出しサイト。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite`1">
      <summary vsli:raw="Dynamic site type.">動的サイト型。</summary>
      <typeparam name="T" vsli:raw="The delegate type.">デリゲート型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite`1.Create(System.Runtime.CompilerServices.CallSiteBinder)">
      <summary vsli:raw="Creates an instance of the dynamic call site, initialized with the binder responsible for the runtime binding of the dynamic operations at this call site.">この呼び出しサイトでの動的操作の実行時バインディングを行うバインダーによって初期化される、動的呼び出しサイトのインスタンスを作成します。</summary>
      <param name="binder" vsli:raw="The binder responsible for the runtime binding of the dynamic operations at this call site.">この呼び出しサイトでの動的操作の実行時バインディングを行うバインダー。</param>
      <returns vsli:raw="The new instance of dynamic call site.">動的呼び出しサイトの新しいインスタンス。</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.CallSite`1.Target">
      <summary vsli:raw="The Level 0 cache - a delegate specialized based on the site history.">レベル 0 キャッシュ。サイト履歴に基づいて特化されたデリゲートです。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite`1.Update">
      <summary vsli:raw="The update delegate. Called when the dynamic site experiences cache miss.">更新デリゲート。 動的サイトでキャッシュ ミスが発生したときに呼び出されます。</summary>
      <returns vsli:raw="The update delegate.">更新デリゲート。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteBinder">
      <summary vsli:raw="Class responsible for runtime binding of the dynamic operations on the dynamic call site.">動的呼び出しサイトで動的操作の実行時バインディングを行うクラス。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.CallSiteBinder&quot; /&gt; class.">
        <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary vsli:raw="Performs the runtime binding of the dynamic operation on a set of arguments.">引数のセットに対して動的操作の実行時バインディングを実行します。</summary>
      <param name="args" vsli:raw="An array of arguments to the dynamic operation.">動的操作の引数の配列。</param>
      <param name="parameters" vsli:raw="The array of &lt;see cref=&quot;T:System.Linq.Expressions.ParameterExpression&quot; /&gt; instances that represent the parameters of the call site in the binding process.">バインディング プロセスでの呼び出しサイトのパラメーターを表す <see cref="T:System.Linq.Expressions.ParameterExpression" /> インスタンスの配列。</param>
      <param name="returnLabel" vsli:raw="A LabelTarget used to return the result of the dynamic binding.">動的バインディングの結果を返すために使用される LabelTarget。</param>
      <returns vsli:raw="An Expression that performs tests on the dynamic operation arguments, and performs the dynamic operation if the tests are valid. If the tests fail on subsequent occurrences of the dynamic operation, Bind will be called again to produce a new &lt;see cref=&quot;T:System.Linq.Expressions.Expression&quot; /&gt; for the new argument types.">動的操作の引数に対してテストを実行し、テストが有効な場合に動的操作を実行する Expression。 後続の動的操作でテストが失敗すると、Bind が再び呼び出され、新しい引数の型に対する新しい <see cref="T:System.Linq.Expressions.Expression" /> が生成されます。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.BindDelegate``1(System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary vsli:raw="Provides low-level runtime binding support. Classes can override this and provide a direct delegate for the implementation of rule. This can enable saving rules to disk, having specialized rules available at runtime, or providing a different caching policy.">低水準の実行時バインディング サポートを提供します。 クラスでこれをオーバーライドし、規則の実装に対する直接のデリゲートを提供できます。 これにより、規則をディスクに保存したり、実行時に特別な規則を使用できるようになります。また、異なるキャッシュ ポリシーを提供することもできます。</summary>
      <param name="site" vsli:raw="The CallSite the bind is being performed for.">バインドの対象の CallSite。</param>
      <param name="args" vsli:raw="The arguments for the binder.">バインダーの引数。</param>
      <typeparam name="T" vsli:raw="The target type of the CallSite.">CallSite のターゲットの型。</typeparam>
      <returns vsli:raw="A new delegate which replaces the CallSite Target.">CallSite のターゲットを置き換える新しいデリゲート。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.CacheTarget``1(``0)">
      <summary vsli:raw="Adds a target to the cache of known targets. The cached targets will be scanned before calling BindDelegate to produce the new rule.">既知のターゲットのキャッシュにターゲットを追加します。 BindDelegate を呼び出して新しい規則を生成する前に、キャッシュされたターゲットのスキャンが行われます。</summary>
      <param name="target" vsli:raw="The target delegate to be added to the cache.">キャッシュに追加されるターゲット デリゲート。</param>
      <typeparam name="T" vsli:raw="The type of target being added.">追加されるターゲットの型。</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSiteBinder.UpdateLabel">
      <summary vsli:raw="Gets a label that can be used to cause the binding to be updated. It indicates that the expression's binding is no longer valid. This is typically used when the &quot;version&quot; of a dynamic object has changed.">バインディングを更新するために使用できるラベルを取得します。 これは、式のバインディングが有効でなくなったことを示します。 通常は、動的オブジェクトの "バージョン" が変更された場合に使用します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Linq.Expressions.LabelTarget&quot; /&gt; object representing a label that can be used to trigger the binding update.">バインディングの更新を発生させるために使用できるラベルを表す <see cref="T:System.Linq.Expressions.LabelTarget" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteHelpers">
      <summary vsli:raw="Class that contains helper methods for DLR CallSites.">DLR CallSite のためのヘルパー メソッドを格納するクラス。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteHelpers.IsInternalFrame(System.Reflection.MethodBase)">
      <summary vsli:raw="Checks if a &lt;see cref=&quot;T:System.Reflection.MethodBase&quot; /&gt; is internally used by DLR and should not be displayed on the language code's stack.">
        <see cref="T:System.Reflection.MethodBase" /> が DLR によって内部的に使用され、言語コードのスタックに表示されないかどうかを調べます。</summary>
      <param name="mb" vsli:raw="The input &lt;see cref=&quot;T:System.Reflection.MethodBase&quot; /&gt;.">入力 <see cref="T:System.Reflection.MethodBase" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input &lt;see cref=&quot;T:System.Reflection.MethodBase&quot; /&gt; is internally used by DLR and should not be displayed on the language code's stack. Otherwise, &lt;see langword=&quot;false&quot; /&gt;.">入力 <see cref="T:System.Reflection.MethodBase" /> が DLR によって内部的に使用され、言語コードのスタックに表示されない場合は true。 それ以外の場合は false を返します。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DebugInfoGenerator">
      <summary vsli:raw="Generates debug information for lambda expressions in an expression tree.">式ツリーのラムダ式のデバッグ情報を生成します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.DebugInfoGenerator&quot; /&gt; class.">
        <see cref="T:System.Runtime.CompilerServices.DebugInfoGenerator" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.CreatePdbGenerator">
      <summary vsli:raw="Creates a program database (PDB) symbol generator.">プログラム データベース (PDB) シンボル ジェネレーターを作成します。</summary>
      <returns vsli:raw="A PDB symbol generator.">PDB シンボル ジェネレーター。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.MarkSequencePoint(System.Linq.Expressions.LambdaExpression,System.Int32,System.Linq.Expressions.DebugInfoExpression)">
      <summary vsli:raw="Marks a sequence point in Microsoft intermediate language (MSIL) code.">MSIL (Microsoft Intermediate Language) コード内のシーケンス ポイントをマークします。</summary>
      <param name="method" vsli:raw="The lambda expression that is generated.">生成されるラムダ式。</param>
      <param name="ilOffset" vsli:raw="The offset within MSIL code at which to mark the sequence point.">シーケンス ポイントをマークする MSIL コード内のオフセット。</param>
      <param name="sequencePoint" vsli:raw="Debug information that corresponds to the sequence point.">シーケンス ポイントに対応するデバッグ情報。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.DynamicAttribute">
      <summary vsli:raw="Indicates that the use of &lt;see cref=&quot;T:System.Object&quot; /&gt; on a member is meant to be treated as a dynamically dispatched type.">メンバーでの <see cref="T:System.Object" /> の使用を動的ディスパッチ型として処理することを示します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.DynamicAttribute&quot; /&gt; class.">
        <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor(System.Boolean[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.DynamicAttribute&quot; /&gt; class.">
        <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="transformFlags" vsli:raw="Specifies, in a prefix traversal of a type's construction, which &lt;see cref=&quot;T:System.Object&quot; /&gt; occurrences are meant to be treated as a dynamically dispatched type.">型の構築のプレフィックス走査において、どの <see cref="T:System.Object" /> のオカレンスを動的ディスパッチ型として処理するかを指定します。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DynamicAttribute.TransformFlags">
      <summary vsli:raw="Specifies, in a prefix traversal of a type's construction, which &lt;see cref=&quot;T:System.Object&quot; /&gt; occurrences are meant to be treated as a dynamically dispatched type.">型の構築のプレフィックス走査において、どの <see cref="T:System.Object" /> のオカレンスを動的ディスパッチ型として処理するかを指定します。</summary>
      <returns vsli:raw="The list of &lt;see cref=&quot;T:System.Object&quot; /&gt; occurrences that are meant to be treated as a dynamically dispatched type.">動的ディスパッチ型として処理する <see cref="T:System.Object" /> のオカレンスのリスト。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IRuntimeVariables">
      <summary vsli:raw="Represents the values of run-time variables.">ランタイム変数の値を表します。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Count">
      <summary vsli:raw="Gets a count of the run-time variables.">ランタイム変数の数を取得します。</summary>
      <returns vsli:raw="The number of run-time variables.">ランタイム変数の数。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Item(System.Int32)">
      <summary vsli:raw="Gets the value of the run-time variable at the specified index.">指定されたインデックスにあるランタイム変数の値を取得します。</summary>
      <param name="index" vsli:raw="The zero-based index of the run-time variable whose value is to be returned.">値を取得するランタイム変数の 0 から始まるインデックス。</param>
      <returns vsli:raw="The value of the run-time variable.">ランタイム変数の値。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1">
      <summary vsli:raw="The builder for read only collection.">読み取り専用のコレクションのビルダー。</summary>
      <typeparam name="T" vsli:raw="The type of the collection element.">コレクション要素の型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor">
      <summary vsli:raw="Constructs a &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> を構築します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Constructs a &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;, copying the contents of the given collection.">指定されたコレクションの内容をコピーして、<see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> を構築します。</summary>
      <param name="collection" vsli:raw="Collection to copy elements from.">要素のコピー元のコレクション。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Int32)">
      <summary vsli:raw="Constructs a &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt; with a given initial capacity. The contents are empty but builder will have reserved room for the given number of elements before any reallocations are required.">初期量を指定して <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> を構築します。 内容は空ですが、再割り当てが必要になるまでに指定の要素数を格納できる領域がビルダーに予約されます。</summary>
      <param name="capacity" vsli:raw="Initial capacity.">初期量。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Add(`0)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> に項目を追加します。</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> に追加するオブジェクト。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Capacity">
      <summary vsli:raw="Gets or sets the capacity of this &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">この <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> の容量を取得または設定します。</summary>
      <returns vsli:raw="The capacity of this &lt;c&gt;ReadOnlyCollectionBuilder.&lt;/c&gt;">この ReadOnlyCollectionBuilder の容量<c>。</c></returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Clear">
      <summary vsli:raw="Removes all items from the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> からすべての項目を削除します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Contains(`0)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt; contains a specific value.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> に特定の値が格納されているかどうかを判断します。</summary>
      <param name="item" vsli:raw="the object to locate in the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 内で検索するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item is found in the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">項目が <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> で見つかった場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> の要素のコピー先となる 1 次元の <see cref="T:System.Array" />。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in array at which copying begins.">コピーの開始位置となる、配列の 0 から始まるインデックス。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Count">
      <summary vsli:raw="Gets the number of elements in the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> にある要素の数を取得します。</summary>
      <returns vsli:raw="The number of elements in the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> にある要素の数。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.IndexOf(`0)">
      <summary vsli:raw="Returns the index of the first occurrence of a given value in the builder.">指定した値がビルダーで最初に見つかった位置のインデックスを返します。</summary>
      <param name="item" vsli:raw="An item to search for.">検索対象の項目。</param>
      <returns vsli:raw="The index of the first occurrence of an item.">最初に見つかった項目のインデックス。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item to the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt; at the specified index.">指定したインデックスの <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> に項目を挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index at which item should be inserted.">項目を挿入する位置の 0 から始まるインデックス。</param>
      <param name="item" vsli:raw="The object to insert into the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> に挿入するオブジェクト。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">指定したインデックスにある要素を取得または設定します。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">取得または設定する要素の、0 から始まるインデックス番号。</param>
      <returns vsli:raw="The element at the specified index.">指定したインデックス位置にある要素。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">特定のオブジェクトが <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 内にあるときに、最初に出現したものを削除します。</summary>
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> から削除するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item was successfully removed from the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;; otherwise, false. This method also returns false if item is not found in the original &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> から項目が正常に削除された場合は true。それ以外の場合は false。 このメソッドは、元の <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> で項目が見つからなかった場合にも false を返します。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt; item at the specified index.">指定したインデックスにある <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 項目を削除します。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">削除する項目の 0 から始まるインデックス。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse">
      <summary vsli:raw="Reverses the order of the elements in the entire &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 全体の要素の順序を反転させます。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse(System.Int32,System.Int32)">
      <summary vsli:raw="Reverses the order of the elements in the specified range.">指定した範囲の要素の順序を反転させます。</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to reverse.">反転させる範囲の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count" vsli:raw="The number of elements in the range to reverse.">反転させる範囲内にある要素の数。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; to an array, starting at the specified array index.">指定した配列インデックスを開始位置として、配列に <see cref="T:System.Collections.Generic.ICollection`1" /> の要素をコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The array must have zero-based indexing.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> から要素がコピーされる 1 次元の配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" /> に項目を追加します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Object" /> に追加する <see cref="T:System.Collections.IList" />。</param>
      <returns vsli:raw="The position into which the new element was inserted.">新しい要素が挿入された位置。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; contains a specific value.">
        <see cref="T:System.Collections.IList" /> に特定の値が格納されているかどうかを判断します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" /> 内で検索される <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" /> 内の特定の項目のインデックスを確認します。</summary>
      <param name="value" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" /> 内で検索するオブジェクト。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if found in the list; otherwise, -1.">リストに存在する場合は <paramref name="item" /> のインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; at the specified index.">指定したインデックスの <see cref="T:System.Collections.IList" /> に項目を挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">
        <paramref name="item" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="value" vsli:raw="The object to insert into the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" /> に挿入するオブジェクト。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">
        <see cref="T:System.Collections.IList" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.IList" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">指定したインデックスにある要素を取得または設定します。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">取得または設定する要素の、0 から始まるインデックス番号。</param>
      <returns vsli:raw="The element at the specified index.">指定したインデックス位置にある要素。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">特定のオブジェクトが <see cref="T:System.Collections.IList" /> 内にあるときに、最初に出現したものを削除します。</summary>
      <param name="value" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" /> から削除するオブジェクト。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToArray">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt; to a new array.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> の要素を新しい配列にコピーします。</summary>
      <returns vsli:raw="An array containing copies of the elements of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;.">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> の要素のコピーを格納する配列。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToReadOnlyCollection">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; containing all of the elements of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt;, avoiding copying the elements to the new array if possible. Resets the &lt;see cref=&quot;T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1&quot; /&gt; after the &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; has been created.">
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> のすべての要素を含む <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> を作成します。このとき、可能であれば新しい配列に要素をコピーしないようにします。 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> が作成された後、<see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> はリセットされます。</summary>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> の新しいインスタンス。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuleCache`1">
      <summary vsli:raw="Represents a cache of runtime binding rules.">実行時バインディング規則のキャッシュを表します。</summary>
      <typeparam name="T" vsli:raw="The delegate type.">デリゲート型。</typeparam>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Diagnostics.StackTrace</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.StackFrame">
      <summary vsli:raw="Provides information about a &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt;, which represents a function call on the call stack for the current thread.">現在のスレッドのコール スタック上での関数呼び出しを表す、<see cref="T:System.Diagnostics.StackFrame" /> に関する情報を提供します。</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class.">
        <see cref="T:System.Diagnostics.StackFrame" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class, optionally capturing source information.">
        <see cref="T:System.Diagnostics.StackFrame" /> クラスの新しいインスタンスを初期化し、オプションでソース情報をキャプチャします。</summary>
      <param name="fNeedFileInfo">スタック フレームのファイル名、行番号、および列番号をキャプチャする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class that corresponds to a frame above the current stack frame.">現在のスタック フレーム上のフレームに対応する <see cref="T:System.Diagnostics.StackFrame" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="skipFrames" vsli:raw="The number of frames up the stack to skip.">スキップするスタック上のフレーム数。</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class that corresponds to a frame above the current stack frame, optionally capturing source information.">現在のスタック フレーム上のフレームに対応する <see cref="T:System.Diagnostics.StackFrame" /> クラスの新しいインスタンスを初期化し、オプションでソース情報をキャプチャします。</summary>
      <param name="skipFrames" vsli:raw="The number of frames up the stack to skip.">スキップするスタック上のフレーム数。</param>
      <param name="fNeedFileInfo">スタック フレームのファイル名、行番号、および列番号をキャプチャする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class that contains only the given file name and line number.">指定されたファイル名および行番号だけを含む <see cref="T:System.Diagnostics.StackFrame" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="fileName" vsli:raw="The file name.">ファイル名。</param>
      <param name="lineNumber" vsli:raw="The line number in the specified file.">指定したファイルの行番号。</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class that contains only the given file name, line number, and column number.">指定されたファイル名、行番号、および列番号だけを含む <see cref="T:System.Diagnostics.StackFrame" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="fileName" vsli:raw="The file name.">ファイル名。</param>
      <param name="lineNumber" vsli:raw="The line number in the specified file.">指定したファイルの行番号。</param>
      <param name="colNumber" vsli:raw="The column number in the specified file.">指定したファイルの列番号。</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileColumnNumber">
      <summary vsli:raw="Gets the column number in the file that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.">実行しているコードを格納しているファイルの列番号を取得します。 通常、この情報は実行可能ファイルのデバッグ シンボルから抽出されます。</summary>
      <returns vsli:raw="The file column number, or 0 (zero) if the file column number cannot be determined.">ファイルの列番号。ファイルの列番号を特定できない場合は 0 (ゼロ)。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileLineNumber">
      <summary vsli:raw="Gets the line number in the file that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.">実行しているコードを格納しているファイルの行番号を取得します。 通常、この情報は実行可能ファイルのデバッグ シンボルから抽出されます。</summary>
      <returns vsli:raw="The file line number, or 0 (zero) if the file line number cannot be determined.">ファイルの行番号。ファイルの行番号を特定できない場合は 0 (ゼロ)。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileName">
      <summary vsli:raw="Gets the file name that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.">実行中のコードを格納しているファイル名を取得します。 通常、この情報は実行可能ファイルのデバッグ シンボルから抽出されます。</summary>
      <returns vsli:raw="The file name, or &lt;see langword=&quot;null&quot; /&gt; if the file name cannot be determined.">ファイル名。ファイル名を特定できない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetILOffset">
      <summary vsli:raw="Gets the offset from the start of the Microsoft intermediate language (MSIL) code for the method that is executing. This offset might be an approximation depending on whether or not the just-in-time (JIT) compiler is generating debugging code. The generation of this debugging information is controlled by the &lt;see cref=&quot;T:System.Diagnostics.DebuggableAttribute&quot; /&gt;.">実行中のメソッドの MSIL (Microsoft Intermediate Language) コードの先頭からのオフセットを取得します。 このオフセットは Just-In-Time (JIT) コンパイラがデバッグするコードを生成しているかどうかに依存する近似値になることがあります。 このデバッグ情報の生成は、<see cref="T:System.Diagnostics.DebuggableAttribute" /> により制御されます。</summary>
      <returns vsli:raw="The offset from the start of the MSIL code for the method that is executing.">実行中のメソッドのための MSIL コードの先頭からのオフセット。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetMethod">
      <summary vsli:raw="Gets the method in which the frame is executing.">フレームを実行しているメソッドを取得します。</summary>
      <returns vsli:raw="The method in which the frame is executing.">フレームを実行しているメソッド。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetNativeOffset">
      <summary vsli:raw="Gets the offset from the start of the native just-in-time (JIT)-compiled code for the method that is being executed. The generation of this debugging information is controlled by the &lt;see cref=&quot;T:System.Diagnostics.DebuggableAttribute&quot; /&gt; class.">実行中のメソッドのネイティブ JIT コンパイル コードの先頭からのオフセットを取得します。 このデバッグ情報の生成は、<see cref="T:System.Diagnostics.DebuggableAttribute" /> クラスにより制御されます。</summary>
      <returns vsli:raw="The offset from the start of the JIT-compiled code for the method that is being executed.">実行中のメソッドの JIT コンパイル コードの先頭からのオフセット。</returns>
    </member>
    <member name="F:System.Diagnostics.StackFrame.OFFSET_UNKNOWN">
      <summary vsli:raw="Defines the value that is returned from the &lt;see cref=&quot;M:System.Diagnostics.StackFrame.GetNativeOffset&quot; /&gt; or &lt;see cref=&quot;M:System.Diagnostics.StackFrame.GetILOffset&quot; /&gt; method when the native or Microsoft intermediate language (MSIL) offset is unknown. This field is constant.">ネイティブまたは MSIL (Microsoft Intermediate Language) オフセットが不明の場合に、<see cref="M:System.Diagnostics.StackFrame.GetNativeOffset" /> メソッドまたは <see cref="M:System.Diagnostics.StackFrame.GetILOffset" /> メソッドから返される値を定義します。 このフィールドは定数です。</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.ToString">
      <summary vsli:raw="Builds a readable representation of the stack trace.">スタック トレースの読み取り可能な形式を構築します。</summary>
      <returns vsli:raw="A readable representation of the stack trace.">スタック トレースの読み取り可能な形式。</returns>
    </member>
    <member name="T:System.Diagnostics.StackFrameExtensions">
      <summary vsli:raw="Provides extension methods for the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class, which represents a function call on the call stack for the current thread.">現在のスレッドのコール スタック上での関数呼び出しを表す、<see cref="T:System.Diagnostics.StackFrame" /> クラスの拡張メソッドを提供します。</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeImageBase(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Returns a pointer to the base address of the native image that this stack frame is executing.">このスタック フレームが実行しているネイティブ イメージのベース アドレスへのポインターを返します。</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">スタック フレーム。</param>
      <returns vsli:raw="A pointer to the base address of the native image or &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; if you're targeting the .NET Framework.">ネイティブ イメージのベース アドレスへのポインター、または .NET Framework を対象としている場合は <see cref="F:System.IntPtr.Zero" />。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeIP(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Gets an interface pointer to the start of the native code for the method that is being executed.">実行されているメソッドのネイティブ コードの先頭へのインターフェイス ポインターを取得します。</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">スタック フレーム。</param>
      <returns vsli:raw="An interface pointer to the start of the native code for the method that is being executed or &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; if you're targeting the .NET Framework.">実行されているメソッドのネイティブ コードの先頭へのインターフェイス ポインター、または .NET Framework を対象としている場合は <see cref="F:System.IntPtr.Zero" />。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasILOffset(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Indicates whether an offset from the start of the IL code for the method that is executing is available.">実行中のメソッドのための IL コードの先頭からのオフセットを使用できるどうかを示します。</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">スタック フレーム。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the offset is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">オフセットを使用できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasMethod(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Indicates whether information about the method in which the specified frame is executing is available.">指定したフレームを実行しているメソッドに関する情報があるかどうかを示します。</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">スタック フレーム。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if information about the method in which the current frame is executing is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のフレームを実行しているメソッドに関する情報がある場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasNativeImage(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Indicates whether the native image is available for the specified stack frame.">指定したスタック フレームでネイティブ イメージが使用可能かどうかを示します。</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">スタック フレーム。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a native image is available for this stack frame; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このスタック フレームのネイティブ イメージが使用できる場合は <see langword="true" />、それ以外は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasSource(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Indicates whether the file that contains the code that the specified stack frame is executing is available.">指定したスタック フレームが実行されているコードを格納しているファイルを使用できるかどうかを示します。</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">スタック フレーム。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code that the specified stack frame is executing is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したスタック フレームが実行されているコードがある場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="T:System.Diagnostics.StackTrace">
      <summary vsli:raw="Represents a stack trace, which is an ordered collection of one or more stack frames.">スタック トレースを表します。スタック トレースは、順番に並べられた 1 つまたは複数のスタック フレームのコレクションです。</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class from the caller's frame.">
        <see cref="T:System.Diagnostics.StackTrace" /> クラスの新しいインスタンスを呼び出し元のフレームから初期化します。</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class from the caller's frame, optionally capturing source information.">
        <see cref="T:System.Diagnostics.StackTrace" /> クラスの新しいインスタンスを呼び出し元のフレームから初期化し、オプションでソース情報をキャプチャします。</summary>
      <param name="fNeedFileInfo" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to capture the file name, line number, and column number; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">ファイル名、行番号、および列番号をキャプチャする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class that contains a single frame.">単一フレームを格納している <see cref="T:System.Diagnostics.StackTrace" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="frame" vsli:raw="The frame that the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; object should contain.">
        <see cref="T:System.Diagnostics.StackTrace" /> オブジェクトに格納するフレーム。</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class using the provided exception object.">指定した例外オブジェクトを使用して、<see cref="T:System.Diagnostics.StackTrace" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="e" vsli:raw="The exception object from which to construct the stack trace.">スタック トレースを構築する基となる例外オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The parameter &lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="e" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class, using the provided exception object and optionally capturing source information.">指定した例外オブジェクトを使用して <see cref="T:System.Diagnostics.StackTrace" /> クラスの新しいインスタンスを初期化し、オプションでソース情報をキャプチャします。</summary>
      <param name="exception">スタック トレースを構築する基となる例外オブジェクト。</param>
      <param name="needFileInfo">ファイル名、行番号、および列番号をキャプチャする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The parameter &lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="e" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class using the provided exception object and skipping the specified number of frames.">指定した例外オブジェクトを使用して <see cref="T:System.Diagnostics.StackTrace" /> クラスの新しいインスタンスを初期化し、指定した数のフレームをスキップします。</summary>
      <param name="e" vsli:raw="The exception object from which to construct the stack trace.">スタック トレースを構築する基となる例外オブジェクト。</param>
      <param name="skipFrames" vsli:raw="The number of frames up the stack from which to start the trace.">トレースを開始するスタックまでのフレーム数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The parameter &lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="e" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;skipFrames&quot; /&gt; parameter is negative.">
        <paramref name="skipFrames" /> パラメーターが負の値です。</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class using the provided exception object, skipping the specified number of frames and optionally capturing source information.">指定した例外オブジェクトを使用して、<see cref="T:System.Diagnostics.StackTrace" /> クラスの新しいインスタンスを初期化し、指定したフレーム数をスキップしたり、必要に応じてソース情報を取得したりできます。</summary>
      <param name="e" vsli:raw="The exception object from which to construct the stack trace.">スタック トレースを構築する基となる例外オブジェクト。</param>
      <param name="skipFrames" vsli:raw="The number of frames up the stack from which to start the trace.">トレースを開始するスタックまでのフレーム数。</param>
      <param name="fNeedFileInfo" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to capture the file name, line number, and column number; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">ファイル名、行番号、および列番号をキャプチャする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The parameter &lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="e" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;skipFrames&quot; /&gt; parameter is negative.">
        <paramref name="skipFrames" /> パラメーターが負の値です。</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class from the caller's frame, skipping the specified number of frames.">呼び出し元のフレームから <see cref="T:System.Diagnostics.StackTrace" /> クラスの新しいインスタンスを初期化し、指定した数のフレームをスキップします。</summary>
      <param name="skipFrames" vsli:raw="The number of frames up the stack from which to start the trace.">トレースを開始するスタックまでのフレーム数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;skipFrames&quot; /&gt; parameter is negative.">
        <paramref name="skipFrames" /> パラメーターが負の値です。</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class from the caller's frame, skipping the specified number of frames and optionally capturing source information.">呼び出し元のフレームから <see cref="T:System.Diagnostics.StackTrace" /> クラスの新しいインスタンスを初期化し、指定した数のフレームをスキップしたり、必要に応じてソース情報を取得したりできます。</summary>
      <param name="skipFrames" vsli:raw="The number of frames up the stack from which to start the trace.">トレースを開始するスタックまでのフレーム数。</param>
      <param name="fNeedFileInfo" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to capture the file name, line number, and column number; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">ファイル名、行番号、および列番号をキャプチャする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;skipFrames&quot; /&gt; parameter is negative.">
        <paramref name="skipFrames" /> パラメーターが負の値です。</exception>
    </member>
    <member name="P:System.Diagnostics.StackTrace.FrameCount">
      <summary vsli:raw="Gets the number of frames in the stack trace.">スタック トレース内のフレーム数を取得します。</summary>
      <returns vsli:raw="The number of frames in the stack trace.">スタック トレースのフレーム数。</returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrame(System.Int32)">
      <summary vsli:raw="Gets the specified stack frame.">指定したスタック フレームを取得します。</summary>
      <param name="index" vsli:raw="The index of the stack frame requested.">要求されるスタック フレームのインデックス。</param>
      <returns vsli:raw="The specified stack frame.">指定したスタック フレーム。</returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrames">
      <summary vsli:raw="Returns a copy of all stack frames in the current stack trace.">現在のスタック トレース内のすべてのスタック フレームのコピーを返します。</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; representing the function calls in the stack trace.">スタック トレース内の関数呼び出しを表す型 <see cref="T:System.Diagnostics.StackFrame" /> の配列。</returns>
    </member>
    <member name="F:System.Diagnostics.StackTrace.METHODS_TO_SKIP">
      <summary vsli:raw="Defines the default for the number of methods to omit from the stack trace. This field is constant.">スタック トレースから省略する既定のメソッド数を定義します。 このフィールドは定数です。</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.ToString">
      <summary vsli:raw="Builds a readable representation of the stack trace.">スタック トレースの読み取り可能な形式を構築します。</summary>
      <returns vsli:raw="A readable representation of the stack trace.">スタック トレースの読み取り可能な形式。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolBinder">
      <summary vsli:raw="Represents a symbol binder for managed code.">マネージド コードのシンボル バインダーを表します。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolBinder.GetReader(System.Int32,System.String,System.String)">
      <summary vsli:raw="Gets the interface of the symbol reader for the current file.">現在のファイルのシンボル リーダーのインターフェイスを取得します。</summary>
      <param name="importer" vsli:raw="The metadata import interface.">メタデータ インポート インターフェイス。</param>
      <param name="filename" vsli:raw="The name of the file for which the reader interface is required.">リーダー インターフェイスが必要なファイルの名前。</param>
      <param name="searchPath" vsli:raw="The search path used to locate the symbol file.">シンボル ファイルを見つける場合に使用する検索パス。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolReader&quot; /&gt; interface that reads the debugging symbols.">デバッグ シンボルを読み取る <see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" /> インターフェイス。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolBinder1">
      <summary vsli:raw="Represents a symbol binder for managed code.">マネージド コードのシンボル バインダーを表します。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolBinder1.GetReader(System.IntPtr,System.String,System.String)">
      <summary vsli:raw="Gets the interface of the symbol reader for the current file.">現在のファイルのシンボル リーダーのインターフェイスを取得します。</summary>
      <param name="importer" vsli:raw="An &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; that refers to the metadata import interface.">メタデータ インポート インターフェイスを参照する <see cref="T:System.IntPtr" />。</param>
      <param name="filename" vsli:raw="The name of the file for which the reader interface is required.">リーダー インターフェイスが必要なファイルの名前。</param>
      <param name="searchPath" vsli:raw="The search path used to locate the symbol file.">シンボル ファイルを見つける場合に使用する検索パス。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolReader&quot; /&gt; interface that reads the debugging symbols.">デバッグ シンボルを読み取る <see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" /> インターフェイス。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocument">
      <summary vsli:raw="Represents a document referenced by a symbol store.">シンボル ストアによって参照されるドキュメントを表します。</summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.CheckSumAlgorithmId">
      <summary vsli:raw="Gets the checksum algorithm identifier.">チェックサム アルゴリズム識別子を取得します。</summary>
      <returns vsli:raw="A GUID identifying the checksum algorithm. The value is all zeros, if there is no checksum.">チェックサム アルゴリズムを識別する GUID。 チェックサムが存在しない場合、この値はすべて 0 になります。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.DocumentType">
      <summary vsli:raw="Gets the type of the current document.">現在のドキュメントの種類を取得します。</summary>
      <returns vsli:raw="The type of the current document.">現在のドキュメントの種類。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.FindClosestLine(System.Int32)">
      <summary vsli:raw="Returns the closest line that is a sequence point, given a line in the current document that might or might not be a sequence point.">現在のドキュメント内でシーケンス ポイントかどうかが明らかではない行を指定した場合は、シーケンス ポイントである行のうち最も近い行が返されます。</summary>
      <param name="line" vsli:raw="The specified line in the document.">ドキュメント内で指定された行。</param>
      <returns vsli:raw="The closest line that is a sequence point.">指定した行に最も近いシーケンス ポイントである行。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.GetCheckSum">
      <summary vsli:raw="Gets the checksum.">チェックサムを取得します。</summary>
      <returns vsli:raw="The checksum.">チェックサム。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.GetSourceRange(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Gets the embedded document source for the specified range.">指定した範囲の埋め込みドキュメント ソースを取得します。</summary>
      <param name="startLine" vsli:raw="The starting line in the current document.">現在のドキュメントの開始行。</param>
      <param name="startColumn" vsli:raw="The starting column in the current document.">現在のドキュメントの開始列。</param>
      <param name="endLine" vsli:raw="The ending line in the current document.">現在のドキュメント内の最終行。</param>
      <param name="endColumn" vsli:raw="The ending column in the current document.">現在のドキュメントの最終列。</param>
      <returns vsli:raw="The document source for the specified range.">指定した範囲のドキュメント ソース。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.HasEmbeddedSource">
      <summary vsli:raw="Checks whether the current document is stored in the symbol store.">現在のドキュメントがシンボル ストアに格納されているかどうかをチェックします。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current document is stored in the symbol store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のドキュメントがシンボル ストアに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.Language">
      <summary vsli:raw="Gets the language of the current document.">現在のドキュメントの言語を取得します。</summary>
      <returns vsli:raw="The language of the current document.">現在のドキュメントの言語。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.LanguageVendor">
      <summary vsli:raw="Gets the language vendor of the current document.">現在のドキュメントの言語販売元を取得します。</summary>
      <returns vsli:raw="The language vendor of the current document.">現在のドキュメントの言語販売元。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.SourceLength">
      <summary vsli:raw="Gets the length, in bytes, of the embedded source.">埋め込まれたソースの長さをバイト数で取得します。</summary>
      <returns vsli:raw="The source length of the current document.">現在のドキュメントのソース長。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.URL">
      <summary vsli:raw="Gets the URL of the current document.">現在のドキュメントの URL を取得します。</summary>
      <returns vsli:raw="The URL of the current document.">現在のドキュメントの URL。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocumentWriter">
      <summary vsli:raw="Represents a document referenced by a symbol store.">シンボル ストアによって参照されるドキュメントを表します。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetCheckSum(System.Guid,System.Byte[])">
      <summary vsli:raw="Sets checksum information.">チェックサム情報を設定します。</summary>
      <param name="algorithmId" vsli:raw="The GUID representing the algorithm ID.">アルゴリズム ID を表す GUID。</param>
      <param name="checkSum" vsli:raw="The checksum.">チェックサム。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetSource(System.Byte[])">
      <summary vsli:raw="Stores the raw source for a document in the symbol store.">ドキュメントの生ソースをシンボル ストアに格納します。</summary>
      <param name="source" vsli:raw="The document source represented as unsigned bytes.">符号なしバイトで表したドキュメント ソース。</param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolMethod">
      <summary vsli:raw="Represents a method within a symbol store.">シンボル ストア内のメソッドを表します。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetNamespace">
      <summary vsli:raw="Gets the namespace that the current method is defined within.">現在のメソッドの定義先となる名前空間を取得します。</summary>
      <returns vsli:raw="The namespace that the current method is defined within.">現在のメソッドの定義先となる名前空間。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary vsli:raw="Gets the Microsoft intermediate language (MSIL) offset within the method that corresponds to the specified position.">指定された位置に対応するメソッド内の MSIL (Microsoft Intermediate Language) オフセットを取得します。</summary>
      <param name="document" vsli:raw="The document for which the offset is requested.">オフセットの要求対象となるドキュメント。</param>
      <param name="line" vsli:raw="The document line corresponding to the offset.">オフセットに対応するドキュメント行。</param>
      <param name="column" vsli:raw="The document column corresponding to the offset.">オフセットに対応するドキュメント列。</param>
      <returns vsli:raw="The offset within the specified document.">指定されたドキュメント内のオフセット。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetParameters">
      <summary vsli:raw="Gets the parameters for the current method.">現在のメソッドのパラメーターを取得します。</summary>
      <returns vsli:raw="The array of parameters for the current method.">現在のメソッドのパラメーターの配列。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary vsli:raw="Gets an array of start and end offset pairs that correspond to the ranges of Microsoft intermediate language (MSIL) that a given position covers within this method.">指定した位置がこのメソッド内に含まれる場合、MSIL (Microsoft Intermediate Language) の範囲に対応する先頭オフセットと末尾オフセットのペアの配列を取得します。</summary>
      <param name="document" vsli:raw="The document for which the offset is requested.">オフセットの要求対象となるドキュメント。</param>
      <param name="line" vsli:raw="The document line corresponding to the ranges.">範囲に対応するドキュメント行。</param>
      <param name="column" vsli:raw="The document column corresponding to the ranges.">範囲に対応するドキュメント列。</param>
      <returns vsli:raw="An array of start and end offset pairs.">先頭オフセットと末尾オフセットのペアの配列。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetScope(System.Int32)">
      <summary vsli:raw="Returns the most enclosing lexical scope when given an offset within a method.">メソッド内のオフセットが指定された場合は、(そのオフセットに対する) 最も外側の構文スコープを返します。</summary>
      <param name="offset" vsli:raw="The byte offset within the method of the lexical scope.">構文のスコープのメソッド内のバイト オフセット。</param>
      <returns vsli:raw="The most enclosing lexical scope for the given byte offset within the method.">メソッド内で指定したバイト オフセットの構文スコープのうち、最も外側のスコープ。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary vsli:raw="Gets the sequence points for the current method.">現在のメソッドのシーケンス ポイントを取得します。</summary>
      <param name="offsets" vsli:raw="The array of byte offsets from the beginning of the method for the sequence points.">メソッドの開始位置からシーケンス ポイントまでの、バイトオフセット配列。</param>
      <param name="documents" vsli:raw="The array of documents in which the sequence points are located.">シーケンス ポイントが存在するドキュメントの配列。</param>
      <param name="lines" vsli:raw="The array of lines in the documents at which the sequence points are located.">シーケンス ポイントが存在するドキュメントの行の配列。</param>
      <param name="columns" vsli:raw="The array of columns in the documents at which the sequence points are located.">シーケンス ポイントが存在するドキュメントの列の配列。</param>
      <param name="endLines" vsli:raw="The array of lines in the documents at which the sequence points end.">シーケンス ポイントの末尾位置を示す、ドキュメント内の行の配列。</param>
      <param name="endColumns" vsli:raw="The array of columns in the documents at which the sequence points end.">シーケンス ポイントの末尾位置を示す、ドキュメント内の列の配列。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])">
      <summary vsli:raw="Gets the start and end positions for the source of the current method.">現在のメソッドのソースの先頭位置と末尾位置を取得します。</summary>
      <param name="docs" vsli:raw="The starting and ending source documents.">先頭ソース ドキュメントと末尾ソース ドキュメント。</param>
      <param name="lines" vsli:raw="The starting and ending lines in the corresponding source documents.">対応するソース ドキュメントの開始行と最終行。</param>
      <param name="columns" vsli:raw="The starting and ending columns in the corresponding source documents.">対応するソース ドキュメントの開始列と最終列。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the positions were defined; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">位置が定義されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.RootScope">
      <summary vsli:raw="Gets the root lexical scope for the current method. This scope encloses the entire method.">現在のメソッドの構文のルート スコープを取得します。 このスコープはメソッド全体を囲みます。</summary>
      <returns vsli:raw="The root lexical scope that encloses the entire method.">メソッド全体を囲む構文のルート スコープ。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount">
      <summary vsli:raw="Gets a count of the sequence points in the method.">メソッド内のシーケンス ポイントの数を取得します。</summary>
      <returns vsli:raw="The count of the sequence points in the method.">メソッド内のシーケンス ポイントの数。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.Token">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; containing the metadata for the current method.">現在のメソッドのメタデータが格納されている <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> を取得します。</summary>
      <returns vsli:raw="The metadata token for the current method.">現在のメソッドのメタデータ トークン。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolNamespace">
      <summary vsli:raw="Represents a namespace within a symbol store.">シンボル ストア内の名前空間を表します。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolNamespace.GetNamespaces">
      <summary vsli:raw="Gets the child members of the current namespace.">現在の名前空間の子メンバーを取得します。</summary>
      <returns vsli:raw="The child members of the current namespace.">現在の名前空間の子メンバー。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolNamespace.GetVariables">
      <summary vsli:raw="Gets all the variables defined at global scope within the current namespace.">現在の名前空間のグローバル スコープで定義されたすべての変数を取得します。</summary>
      <returns vsli:raw="The variables defined at global scope within the current namespace.">現在の名前空間のグローバル スコープで定義された変数。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolNamespace.Name">
      <summary vsli:raw="Gets the current namespace.">現在の名前空間を取得します。</summary>
      <returns vsli:raw="The current namespace.">現在の名前空間。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolReader">
      <summary vsli:raw="Represents a symbol reader for managed code.">マネージド コードのシンボル リーダーを表します。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary vsli:raw="Gets a document specified by the language, vendor, and type.">言語、販売元、および種類で指定したドキュメントを取得します。</summary>
      <param name="url" vsli:raw="The URL that identifies the document.">ドキュメントを識別する URL。</param>
      <param name="language" vsli:raw="The document language. You can specify this parameter as &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">ドキュメントの言語。 このドキュメントは <see cref="F:System.Guid.Empty" /> として指定できます。</param>
      <param name="languageVendor" vsli:raw="The identity of the vendor for the document language. You can specify this parameter as &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">ドキュメントの言語の販売元の ID。 このドキュメントは <see cref="F:System.Guid.Empty" /> として指定できます。</param>
      <param name="documentType" vsli:raw="The type of the document. You can specify this parameter as &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">ドキュメントの種類。 このドキュメントは <see cref="F:System.Guid.Empty" /> として指定できます。</param>
      <returns vsli:raw="The specified document.">指定されたドキュメント。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetDocuments">
      <summary vsli:raw="Gets an array of all documents defined in the symbol store.">シンボル ストアに定義されたすべてのドキュメントの配列を取得します。</summary>
      <returns vsli:raw="An array of all documents defined in the symbol store.">シンボル ストアに定義されたすべてのドキュメントの配列。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetGlobalVariables">
      <summary vsli:raw="Gets all global variables in the module.">モジュール内のグローバル変数をすべて取得します。</summary>
      <returns vsli:raw="An array of all variables in the module.">モジュール内のすべての変数の配列。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Gets a symbol reader method object when given the identifier of a method.">メソッドの識別子が指定されると、シンボル リーダー メソッド オブジェクトを取得します。</summary>
      <param name="method" vsli:raw="The metadata token of the method.">メソッドのメタデータ トークン。</param>
      <returns vsli:raw="The symbol reader method object for the specified method identifier.">指定したメソッド識別子のシンボル リーダー メソッド オブジェクト。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken,System.Int32)">
      <summary vsli:raw="Gets a symbol reader method object when given the identifier of a method and its edit and continue version.">メソッドの識別子と、そのエディット コンティニュ バージョンが指定されると、シンボル リーダー メソッド オブジェクトを取得します。</summary>
      <param name="method" vsli:raw="The metadata token of the method.">メソッドのメタデータ トークン。</param>
      <param name="version" vsli:raw="The edit and continue version of the method.">メソッドのエディット コンティニュ バージョン。</param>
      <returns vsli:raw="The symbol reader method object for the specified method identifier.">指定したメソッド識別子のシンボル リーダー メソッド オブジェクト。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethodFromDocumentPosition(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary vsli:raw="Gets a symbol reader method object that contains a specified position in a document.">ドキュメント内で指定した位置が格納されているシンボル リーダー メソッド オブジェクトを取得します。</summary>
      <param name="document" vsli:raw="The document in which the method is located.">メソッドが存在するドキュメント。</param>
      <param name="line" vsli:raw="The position of the line within the document. The lines are numbered, beginning with 1.">ドキュメント内の行の位置。 行は 1 から番号が付けられます。</param>
      <param name="column" vsli:raw="The position of column within the document. The columns are numbered, beginning with 1.">ドキュメント内の列の位置。 列は 1 から番号が付けられます。</param>
      <returns vsli:raw="The reader method object for the specified position in the document.">ドキュメント内で指定した位置のリーダー メソッド オブジェクト。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetNamespaces">
      <summary vsli:raw="Gets the namespaces that are defined in the global scope within the current symbol store.">現在のシンボル ストア内のグローバル スコープに定義された名前空間を取得します。</summary>
      <returns vsli:raw="The namespaces defined in the global scope within the current symbol store.">現在のシンボル ストア内のグローバル スコープに定義された名前空間。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String)">
      <summary vsli:raw="Gets an attribute value when given the attribute name.">属性名が指定されると、属性値を取得します。</summary>
      <param name="parent" vsli:raw="The metadata token for the object for which the attribute is requested.">属性の要求対象となるオブジェクトのメタデータ トークン。</param>
      <param name="name" vsli:raw="The attribute name.">属性名。</param>
      <returns vsli:raw="The value of the attribute.">属性の値。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetVariables(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Gets the variables that are not local when given the parent.">親が指定されると、ローカル変数以外の変数を取得します。</summary>
      <param name="parent" vsli:raw="The metadata token for the type for which the variables are requested.">変数の要求対象となる型のメタデータ トークン。</param>
      <returns vsli:raw="An array of variables for the parent.">親の変数の配列。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolReader.UserEntryPoint">
      <summary vsli:raw="Gets the metadata token for the method that was specified as the user entry point for the module, if any.">モジュールのためのユーザー エントリ ポイントとして指定されたメソッドのために、メタデータ トークンがある場合はこれを取得します。</summary>
      <returns vsli:raw="The metadata token for the method that is the user entry point for the module.">モジュールのためのユーザー エントリ ポイントであるメソッド用のメタデータ トークン。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolScope">
      <summary vsli:raw="Represents a lexical scope within &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolMethod&quot; /&gt;, providing access to the start and end offsets of the scope, as well as its child and parent scopes.">
        <see cref="T:System.Diagnostics.SymbolStore.ISymbolMethod" /> 内の構文のスコープを表し、該当するスコープの先頭オフセットおよび末尾オフセットと、そのスコープの子スコープと親スコープへのアクセスを実現します。</summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.EndOffset">
      <summary vsli:raw="Gets the end offset of the current lexical scope.">現在の構文のスコープの終了オフセットを取得します。</summary>
      <returns vsli:raw="The end offset of the current lexical scope.">現在の構文のスコープの末尾オフセット。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetChildren">
      <summary vsli:raw="Gets the child lexical scopes of the current lexical scope.">現在の構文のスコープの子構文スコープを取得します。</summary>
      <returns vsli:raw="The child lexical scopes that of the current lexical scope.">現在の構文のスコープの子構文スコープ。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetLocals">
      <summary vsli:raw="Gets the local variables within the current lexical scope.">現在の構文のスコープのローカル変数を取得します。</summary>
      <returns vsli:raw="The local variables within the current lexical scope.">現在の構文のスコープのローカル変数。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetNamespaces">
      <summary vsli:raw="Gets the namespaces that are used within the current scope.">現在のスコープ内で使用される名前空間を取得します。</summary>
      <returns vsli:raw="The namespaces that are used within the current scope.">現在のスコープ内で使用される名前空間。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.Method">
      <summary vsli:raw="Gets the method that contains the current lexical scope.">現在の構文のスコープが格納されているメソッドを取得します。</summary>
      <returns vsli:raw="The method that contains the current lexical scope.">現在の構文のスコープが格納されているメソッド。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.Parent">
      <summary vsli:raw="Gets the parent lexical scope of the current scope.">現在のスコープの親構文スコープを取得します。</summary>
      <returns vsli:raw="The parent lexical scope of the current scope.">現在のスコープの親構文スコープ。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.StartOffset">
      <summary vsli:raw="Gets the start offset of the current lexical scope.">現在の構文のスコープの開始オフセットを取得します。</summary>
      <returns vsli:raw="The start offset of the current lexical scope.">現在の構文のスコープの先頭オフセット。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolVariable">
      <summary vsli:raw="Represents a variable within a symbol store.">シンボル ストア内の変数を表します。</summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField1">
      <summary vsli:raw="Gets the first address of a variable.">変数の最初のアドレスを取得します。</summary>
      <returns vsli:raw="The first address of the variable.">変数の最初のアドレス。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField2">
      <summary vsli:raw="Gets the second address of a variable.">変数の 2 番目のアドレスを取得します。</summary>
      <returns vsli:raw="The second address of the variable.">変数の 2 番目のアドレス。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField3">
      <summary vsli:raw="Gets the third address of a variable.">変数の 3 番目のアドレスを取得します。</summary>
      <returns vsli:raw="The third address of the variable.">変数の 3 番目のアドレス。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressKind">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymAddressKind&quot; /&gt; value describing the type of the address.">アドレスの型を記述する <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" /> 値を取得します。</summary>
      <returns vsli:raw="The type of the address. One of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymAddressKind&quot; /&gt; values.">アドレスの型。 <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" /> 値のいずれか。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.Attributes">
      <summary vsli:raw="Gets the attributes of the variable.">変数の属性を取得します。</summary>
      <returns vsli:raw="The variable attributes.">変数の属性。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.EndOffset">
      <summary vsli:raw="Gets the end offset of a variable within the scope of the variable.">変数の終了オフセットをその変数のスコープ内から取得します。</summary>
      <returns vsli:raw="The end offset of the variable.">変数の終了オフセット。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolVariable.GetSignature">
      <summary vsli:raw="Gets the variable signature.">変数シグネチャを取得します。</summary>
      <returns vsli:raw="The variable signature as an opaque blob.">非透過 BLOB としての変数シグネチャ。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.Name">
      <summary vsli:raw="Gets the name of the variable.">変数の名前を取得します。</summary>
      <returns vsli:raw="The name of the variable.">変数の名前。</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.StartOffset">
      <summary vsli:raw="Gets the start offset of the variable within the scope of the variable.">変数の開始オフセットをその変数のスコープ内から取得します。</summary>
      <returns vsli:raw="The start offset of the variable.">変数の開始オフセット。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolWriter">
      <summary vsli:raw="Represents a symbol writer for managed code.">マネージド コードのシンボル ライターを表します。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.Close">
      <summary vsli:raw="Closes &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolWriter&quot; /&gt; and commits the symbols to the symbol store.">
        <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /> を閉じ、シンボルをシンボル ストアにコミットします。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseMethod">
      <summary vsli:raw="Closes the current method.">現在のメソッドを閉じます。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseNamespace">
      <summary vsli:raw="Closes the most recent namespace.">最後に使用した名前空間を閉じます。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)">
      <summary vsli:raw="Closes the current lexical scope.">現在の構文のスコープを閉じます。</summary>
      <param name="endOffset" vsli:raw="The points past the last instruction in the scope.">スコープ内の最後の命令以降のポイント。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary vsli:raw="Defines a source document.">ソース ドキュメントを定義します。</summary>
      <param name="url" vsli:raw="The URL that identifies the document.">ドキュメントを識別する URL。</param>
      <param name="language" vsli:raw="The document language. This parameter can be &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">ドキュメントの言語。 このパラメーターは、<see cref="F:System.Guid.Empty" /> に設定できます。</param>
      <param name="languageVendor" vsli:raw="The identity of the vendor for the document language. This parameter can be &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">ドキュメントの言語の販売元の ID。 このパラメーターは、<see cref="F:System.Guid.Empty" /> に設定できます。</param>
      <param name="documentType" vsli:raw="The type of the document. This parameter can be &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">ドキュメントの種類。 このパラメーターは、<see cref="F:System.Guid.Empty" /> に設定できます。</param>
      <returns vsli:raw="The object that represents the document.">ドキュメントを表すオブジェクト。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines a field in a type or a global field.">型フィールドまたはグローバル フィールドにフィールドを定義します。</summary>
      <param name="parent" vsli:raw="The metadata type or method token.">メタデータ型またはメソッド トークン。</param>
      <param name="name" vsli:raw="The field name.">フィールド名。</param>
      <param name="attributes" vsli:raw="A bitwise combination of the field attributes.">フィールド属性のビットごとの組み合わせ。</param>
      <param name="signature" vsli:raw="The field signature.">フィールド シグネチャ。</param>
      <param name="addrKind" vsli:raw="The address types for &lt;paramref name=&quot;addr1&quot; /&gt; and &lt;paramref name=&quot;addr2&quot; /&gt;.">
        <paramref name="addr1" /> および <paramref name="addr2" /> のアドレス型。</param>
      <param name="addr1" vsli:raw="The first address for the field specification.">フィールド指定の最初のアドレス。</param>
      <param name="addr2" vsli:raw="The second address for the field specification.">フィールド指定の 2 番目のアドレス。</param>
      <param name="addr3" vsli:raw="The third address for the field specification.">フィールド指定の 3 番目のアドレス。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines a single global variable.">グローバル変数を 1 つ定義します。</summary>
      <param name="name" vsli:raw="The global variable name.">グローバル変数名。</param>
      <param name="attributes" vsli:raw="A bitwise combination of the global variable attributes.">グローバル変数属性のビットごとの組み合わせ。</param>
      <param name="signature" vsli:raw="The global variable signature.">グローバル変数シグネチャ。</param>
      <param name="addrKind" vsli:raw="The address types for &lt;paramref name=&quot;addr1&quot; /&gt;, &lt;paramref name=&quot;addr2&quot; /&gt;, and &lt;paramref name=&quot;addr3&quot; /&gt;.">
        <paramref name="addr1" />、<paramref name="addr2" />、および <paramref name="addr3" /> のアドレス型。</param>
      <param name="addr1" vsli:raw="The first address for the global variable specification.">グローバル変数指定の最初のアドレス。</param>
      <param name="addr2" vsli:raw="The second address for the global variable specification.">グローバル変数指定の 2 番目のアドレス。</param>
      <param name="addr3" vsli:raw="The third address for the global variable specification.">グローバル変数指定の 3 番目のアドレス。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines a single variable in the current lexical scope.">現在の構文のスコープの変数を 1 つ定義します。</summary>
      <param name="name" vsli:raw="The local variable name.">ローカル変数名。</param>
      <param name="attributes" vsli:raw="A bitwise combination of the local variable attributes.">ローカル変数属性のビットごとの組み合わせ。</param>
      <param name="signature" vsli:raw="The local variable signature.">ローカル変数シグネチャ。</param>
      <param name="addrKind" vsli:raw="The address types for &lt;paramref name=&quot;addr1&quot; /&gt;, &lt;paramref name=&quot;addr2&quot; /&gt;, and &lt;paramref name=&quot;addr3&quot; /&gt;.">
        <paramref name="addr1" />、<paramref name="addr2" />、および <paramref name="addr3" /> のアドレス型。</param>
      <param name="addr1" vsli:raw="The first address for the local variable specification.">ローカル変数指定の最初のアドレス。</param>
      <param name="addr2" vsli:raw="The second address for the local variable specification.">ローカル変数指定の 2 番目のアドレス。</param>
      <param name="addr3" vsli:raw="The third address for the local variable specification.">ローカル変数指定の 3 番目のアドレス。</param>
      <param name="startOffset" vsli:raw="The start offset for the variable. If this parameter is zero, it is ignored and the variable is defined throughout the entire scope. If the parameter is nonzero, the variable falls within the offsets of the current scope.">変数の先頭オフセット。 このパラメーターが 0 の場合、パラメーターは無視され、変数はスコープ全体で定義されます。 パラメーターが 0 以外の場合、変数は現在のスコープのオフセット内となります。</param>
      <param name="endOffset" vsli:raw="The end offset for the variable. If this parameter is zero, it is ignored and the variable is defined throughout the entire scope. If the parameter is nonzero, the variable falls within the offsets of the current scope.">変数の末尾オフセット。 このパラメーターが 0 の場合、パラメーターは無視され、変数はスコープ全体で定義されます。 パラメーターが 0 以外の場合、変数は現在のスコープのオフセット内となります。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines a single parameter in the current method. The type of each parameter is taken from its position within the signature of the method.">現在のメソッドのパラメーターを 1 つ定義します。 各パラメーターの型は、メソッドのシグネチャ内におけるその位置から取得されます。</summary>
      <param name="name" vsli:raw="The parameter name.">パラメーターの名前。</param>
      <param name="attributes" vsli:raw="A bitwise combination of the parameter attributes.">パラメーター属性のビットごとの組み合わせ。</param>
      <param name="sequence" vsli:raw="The parameter signature.">パラメーター シグネチャ。</param>
      <param name="addrKind" vsli:raw="The address types for &lt;paramref name=&quot;addr1&quot; /&gt;, &lt;paramref name=&quot;addr2&quot; /&gt;, and &lt;paramref name=&quot;addr3&quot; /&gt;.">
        <paramref name="addr1" />、<paramref name="addr2" />、および <paramref name="addr3" /> のアドレス型。</param>
      <param name="addr1" vsli:raw="The first address for the parameter specification.">パラメーター指定の最初のアドレス。</param>
      <param name="addr2" vsli:raw="The second address for the parameter specification.">パラメーター指定の 2 番目のアドレス。</param>
      <param name="addr3" vsli:raw="The third address for the parameter specification.">パラメーター指定の 3 番目のアドレス。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary vsli:raw="Defines a group of sequence points within the current method.">現在のメソッド内のシーケンス ポイントのグループを定義します。</summary>
      <param name="document" vsli:raw="The document object for which the sequence points are being defined.">シーケンス ポイントを定義するドキュメント。</param>
      <param name="offsets" vsli:raw="The sequence point offsets measured from the beginning of methods.">メソッドの先頭から計測したシーケンス ポイントのオフセット。</param>
      <param name="lines" vsli:raw="The document lines for the sequence points.">シーケンス ポイントのドキュメント行。</param>
      <param name="columns" vsli:raw="The document positions for the sequence points.">シーケンス ポイントのドキュメント位置。</param>
      <param name="endLines" vsli:raw="The document end lines for the sequence points.">シーケンス ポイントに対するドキュメント内の末尾行。</param>
      <param name="endColumns" vsli:raw="The document end positions for the sequence points.">シーケンス ポイントに対するドキュメント内の末尾位置。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
      <summary vsli:raw="Sets the metadata emitter interface to associate with a writer.">ライターに関連付けるメタデータ エミッタ インターフェイスを設定します。</summary>
      <param name="emitter" vsli:raw="The metadata emitter interface.">メタデータ エミッタ インターフェイス。</param>
      <param name="filename" vsli:raw="The file name for which the debugging symbols are written. Some writers require a file name, and others do not. If a file name is specified for a writer that does not use file names, this parameter is ignored.">デバッグ シンボルが書き込まれるファイル名。 ライターによって、ファイル名が必要なものと必要でないものがあります。 ファイル名を使用しないライターに対してファイル名を指定した場合、このパラメーターは無視されます。</param>
      <param name="fFullBuild" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; indicates that this is a full rebuild; &lt;see langword=&quot;false&quot; /&gt; indicates that this is an incremental compilation.">
        <see langword="true" /> はこれがフル リビルドであることを示し、<see langword="false" /> はこれがインクリメンタル コンパイルであることを示します。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Opens a method to place symbol information into.">シンボル情報を配置する対象のメソッドを開きます。</summary>
      <param name="method" vsli:raw="The metadata token for the method to be opened.">開くメソッドのメタデータ トークン。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace(System.String)">
      <summary vsli:raw="Opens a new namespace.">新しい名前空間を開きます。</summary>
      <param name="name" vsli:raw="The name of the new namespace.">新しい名前空間の名前。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
      <summary vsli:raw="Opens a new lexical scope in the current method.">現在のメソッドの構文の新しいスコープを開きます。</summary>
      <param name="startOffset" vsli:raw="The offset, in bytes, from the beginning of the method to the first instruction in the lexical scope.">メソッドの先頭から構文のスコープの最初の命令までのオフセット (バイト単位)。</param>
      <returns vsli:raw="An opaque scope identifier that can be used with &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)&quot; /&gt; to define the start and end offsets of a scope at a later time. In this case, the offsets passed to &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)&quot; /&gt; and &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)&quot; /&gt; are ignored. A scope identifier is valid only in the current method.">スコープの先頭オフセットおよび末尾オフセットを後で定義するために、<see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)" /> で使用できる非透過スコープ識別子。 この場合、<see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)" /> と <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)" /> に渡したオフセットは無視されます。 スコープ識別子は現在のメソッド内に限り有効です。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
      <summary vsli:raw="Specifies the true start and end of a method within a source file. Use &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)&quot; /&gt; to specify the extent of a method, independent of the sequence points that exist within the method.">ソース ファイル内にメソッドの実際の先頭と末尾を指定します。 メソッドのエクステントを、そのメソッド内に存在するシーケンス ポイントに関係なく指定するには <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)" /> を使用します。</summary>
      <param name="startDoc" vsli:raw="The document that contains the starting position.">開始位置を含むドキュメント。</param>
      <param name="startLine" vsli:raw="The starting line number.">先頭行番号。</param>
      <param name="startColumn" vsli:raw="The starting column.">先頭列。</param>
      <param name="endDoc" vsli:raw="The document that contains the ending position.">終了位置を含むドキュメント。</param>
      <param name="endLine" vsli:raw="The ending line number.">末尾行番号。</param>
      <param name="endColumn" vsli:raw="The ending column number.">末尾列番号。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines the offset range for the specified lexical scope.">指定した構文のスコープのオフセット範囲を定義します。</summary>
      <param name="scopeID" vsli:raw="The identifier of the lexical scope.">構文のスコープの識別子。</param>
      <param name="startOffset" vsli:raw="The byte offset of the beginning of the lexical scope.">構文のスコープの先頭のバイト オフセット。</param>
      <param name="endOffset" vsli:raw="The byte offset of the end of the lexical scope.">構文のスコープの末尾のバイト オフセット。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Byte[])">
      <summary vsli:raw="Defines an attribute when given the attribute name and the attribute value.">属性名と属性値が指定されると、属性を定義します。</summary>
      <param name="parent" vsli:raw="The metadata token for which the attribute is being defined.">属性を定義するメタデータ トークン。</param>
      <param name="name" vsli:raw="The attribute name.">属性名。</param>
      <param name="data" vsli:raw="The attribute value.">属性値。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter(System.IntPtr)">
      <summary vsli:raw="Sets the underlying &lt;see langword=&quot;ISymUnmanagedWriter&quot; /&gt; (the corresponding unmanaged interface) that a managed &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolWriter&quot; /&gt; uses to emit symbols.">マネージド <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /> がシンボルを出力するときに使用する、基になる <see langword="ISymUnmanagedWriter" /> (対応するアンマネージド インターフェイス) を設定します。</summary>
      <param name="underlyingWriter" vsli:raw="A pointer to code that represents the underlying writer.">基になるライターを表すコードのポインター。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUserEntryPoint(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Identifies the user-defined method as the entry point for the current module.">ユーザー定義のメソッドを、現在のモジュールのエントリ ポイントとして識別します。</summary>
      <param name="entryMethod" vsli:raw="The metadata token for the method that is the user entry point.">ユーザー エントリ ポイントであるメソッドのメタデータ トークン。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace(System.String)">
      <summary vsli:raw="Specifies that the given, fully qualified namespace name is used within the open lexical scope.">指定した完全修飾名前空間名を、開かれている構文スコープ内で使用することを指定します。</summary>
      <param name="fullName" vsli:raw="The fully qualified name of the namespace.">名前空間の完全修飾名。</param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymAddressKind">
      <summary vsli:raw="Specifies address types for local variables, parameters, and fields in the methods &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)&quot; /&gt;, &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)&quot; /&gt;, and &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)&quot; /&gt; of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolWriter&quot; /&gt; interface.">ローカル変数、パラメーター、およびフィールドのアドレス型を <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /> インターフェイスの <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)" />、<see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)" />、および <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /> の各メソッドに指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.BitField">
      <summary vsli:raw="A bit field. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the position where the field starts, and the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the field length.">ビット フィールド。 <paramref name="addr1" /> パラメーターはフィールドが開始する位置、<paramref name="addr2" /> パラメーターはフィールド長を示します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.ILOffset">
      <summary vsli:raw="A Microsoft intermediate language (MSIL) offset. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the MSIL local variable or parameter index.">MSIL (Microsoft Intermediate Language) オフセット。 <paramref name="addr1" /> パラメーターは MSIL ローカル変数またはパラメーター インデックスを示します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeOffset">
      <summary vsli:raw="A native offset. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the offset from the start of the parent.">ネイティブ オフセット。 <paramref name="addr1" /> パラメーターは、親の先頭からのオフセットを示します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegister">
      <summary vsli:raw="A native register address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the register in which the variable is stored.">ネイティブ レジスタ アドレス。 <paramref name="addr1" /> パラメーターは変数が格納されるレジスタを示します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterRegister">
      <summary vsli:raw="A register-relative address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the low-order register, and the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the high-order register.">レジスタの相対アドレス。 <paramref name="addr1" /> パラメーターは下位レジスタを、<paramref name="addr2" /> パラメーターは上位レジスタを示します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterRelative">
      <summary vsli:raw="A register-relative address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the register, and the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the offset.">レジスタの相対アドレス。 <paramref name="addr1" /> パラメーターはレジスタを、<paramref name="addr2" /> パラメーターはオフセットを示します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterStack">
      <summary vsli:raw="A register-relative address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the low-order register, the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the stack register, and the &lt;paramref name=&quot;addr3&quot; /&gt; parameter is the offset from the stack pointer to the high-order part of the value.">レジスタの相対アドレス。 <paramref name="addr1" /> パラメーターは下位レジスタを、<paramref name="addr2" /> パラメーターはスタック レジスタを、<paramref name="addr3" /> パラメーターはスタック ポインターから値の上位へのオフセットを示します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRVA">
      <summary vsli:raw="A native Relevant Virtual Address (RVA). The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the RVA in the module.">ネイティブ RVA (Relative Virtual Address)。 <paramref name="addr1" /> パラメーターはモジュール内の RVA を示します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeSectionOffset">
      <summary vsli:raw="A native section offset. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the section, and the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the offset.">ネイティブ セクション オフセット。 <paramref name="addr1" /> パラメーターはセクションを、<paramref name="addr2" /> パラメーターはオフセットを示します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeStackRegister">
      <summary vsli:raw="A register-relative address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the stack register, the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the offset from the stack pointer to the low-order part of the value, and the &lt;paramref name=&quot;addr3&quot; /&gt; parameter is the high-order register.">レジスタの相対アドレス。 <paramref name="addr1" /> パラメーターはスタック レジスタを、<paramref name="addr2" /> パラメーターはスタック ポインターから値の下位へのオフセットを、<paramref name="addr3" /> パラメーターは上位レジスタを示します。</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymbolToken">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure is an object representation of a token that represents symbolic information.">
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 構造体は、シンボル情報を表すトークンのオブジェクト表現です。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure when given a value.">値が指定されると、<see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="val" vsli:raw="The value to be used for the token.">トークンで使用される値。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Determines whether &lt;paramref name=&quot;obj&quot; /&gt; is equal to this instance.">
        <paramref name="obj" /> がこのインスタンスと等しいかどうかを判断します。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; to check.">確認対象の <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> がこのインスタンスと等しい場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Object)">
      <summary vsli:raw="Determines whether &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; and is equal to this instance.">
        <paramref name="obj" /> が <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> のインスタンスで、このインスタンスと等しいかどうかを判断します。</summary>
      <param name="obj" vsli:raw="The object to check.">確認する対象のオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; and is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="obj" /> が <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> のインスタンスで、このインスタンスと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.GetHashCode">
      <summary vsli:raw="Generates the hash code for the current token.">現在のトークンのハッシュ コードを生成します。</summary>
      <returns vsli:raw="The hash code for the current token.">現在のトークンのハッシュ コード。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.GetToken">
      <summary vsli:raw="Gets the value of the current token.">現在のトークンの値を取得します。</summary>
      <returns vsli:raw="The value of the current token.">現在のトークンの値。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.op_Equality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Returns a value indicating whether two &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; objects are equal.">
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> の 2 つのオブジェクトが等しいかどうかを示す値を返します。</summary>
      <param name="a" vsli:raw="A &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure.">
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 構造体。</param>
      <param name="b" vsli:raw="A &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure.">
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 構造体。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; and &lt;paramref name=&quot;b&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> と <paramref name="a" /> が等しい場合は <paramref name="b" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.op_Inequality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Returns a value indicating whether two &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; objects are not equal.">
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> の 2 つのオブジェクトが等しくないかどうかを示す値を返します。</summary>
      <param name="a" vsli:raw="A &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure.">
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 構造体。</param>
      <param name="b" vsli:raw="A &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure.">
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 構造体。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; and &lt;paramref name=&quot;b&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="a" /> と <paramref name="b" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymDocumentType">
      <summary vsli:raw="Holds the public GUIDs for document types to be used with the symbol store.">シンボル ストアで使用するドキュメントの種類のパブリック GUID を格納します。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymDocumentType.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymDocumentType&quot; /&gt; class.">
        <see cref="T:System.Diagnostics.SymbolStore.SymDocumentType" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymDocumentType.Text">
      <summary vsli:raw="Specifies the GUID of the document type to be used with the symbol store.">シンボル ストアで使用するドキュメントの種類の GUID を指定します。</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymLanguageType">
      <summary vsli:raw="Holds the public GUIDs for language types to be used with the symbol store.">シンボル ストアで使用する言語タイプのパブリック GUID を格納します。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymLanguageType.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymLanguageType&quot; /&gt; class.">
        <see cref="T:System.Diagnostics.SymbolStore.SymLanguageType" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Basic">
      <summary vsli:raw="Specifies the GUID of the Basic language type to be used with the symbol store.">シンボル ストアで使用する Basic 言語タイプの GUID を指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.C">
      <summary vsli:raw="Specifies the GUID of the C language type to be used with the symbol store.">シンボル ストアで使用する C 言語タイプの GUID を指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Cobol">
      <summary vsli:raw="Specifies the GUID of the Cobol language type to be used with the symbol store.">シンボル ストアで使用する Cobol 言語タイプの GUID を指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.CPlusPlus">
      <summary vsli:raw="Specifies the GUID of the C++ language type to be used with the symbol store.">シンボル ストアで使用する C++ 言語タイプの GUID を指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.CSharp">
      <summary vsli:raw="Specifies the GUID of the C# language type to be used with the symbol store.">シンボル ストアで使用する C# 言語タイプの GUID を指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.ILAssembly">
      <summary vsli:raw="Specifies the GUID of the ILAssembly language type to be used with the symbol store.">シンボル ストアで使用する ILAssembly 言語タイプの GUID を指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Java">
      <summary vsli:raw="Specifies the GUID of the Java language type to be used with the symbol store.">シンボル ストアで使用する Java 言語タイプの GUID を指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.JScript">
      <summary vsli:raw="Specifies the GUID of the JScript language type to be used with the symbol store.">シンボル ストアで使用する JScript 言語タイプの GUID を指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.MCPlusPlus">
      <summary vsli:raw="Specifies the GUID of the C++ language type to be used with the symbol store.">シンボル ストアで使用する C++ 言語タイプの GUID を指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Pascal">
      <summary vsli:raw="Specifies the GUID of the Pascal language type to be used with the symbol store.">シンボル ストアで使用する Pascal 言語タイプの GUID を指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.SMC">
      <summary vsli:raw="Specifies the GUID of the SMC language type to be used with the symbol store.">シンボル ストアで使用する SMC 言語タイプの GUID を指定します。</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymLanguageVendor">
      <summary vsli:raw="Holds the public GUIDs for language vendors to be used with the symbol store.">シンボル ストアで使用する言語販売元のパブリック GUID を格納します。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymLanguageVendor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymLanguageVendor&quot; /&gt; class.">
        <see cref="T:System.Diagnostics.SymbolStore.SymLanguageVendor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageVendor.Microsoft">
      <summary vsli:raw="Specifies the GUID of the Microsoft language vendor.">Microsoft 言語販売元の GUID を指定します。</summary>
    </member>
  </members>
</doc>
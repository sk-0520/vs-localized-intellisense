<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Text.RegularExpressions</name>
  </assembly>
  <members>
    <member name="T:System.Text.RegularExpressions.Capture">
      <summary>Stellt die Ergebnisse einer einzelnen erfolgreichen Teilausdruckerfassung dar.</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Index">
      <summary>Die Position in der ursprünglichen Zeichenfolge, an der das erste Zeichen der aufgezeichneten Teilzeichenfolge gefunden wurde.</summary>
      <returns>Die nullbasierte Anfangsposition in der ursprünglichen Zeichenfolge, an der die aufgezeichnete Teilzeichenfolge gefunden wurde.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Length">
      <summary>Ruft die Länge der aufgezeichneten Teilzeichenfolge ab.</summary>
      <returns>Die Länge der aufgezeichneten Teilzeichenfolge.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Capture.ToString">
      <summary>Ruft die erfasste Teilzeichenfolge von der Eingabezeichenfolge durch Aufrufen der <see cref="P:System.Text.RegularExpressions.Capture.Value" />-Eigenschaft ab.</summary>
      <returns>Die Teilzeichenfolge, die von der Übereinstimmung aufgezeichnet wurde.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Value">
      <summary>Ruft die aufgezeichnete Teilzeichenfolge aus der Eingabezeichenfolge ab.</summary>
      <returns>Die Teilzeichenfolge, die von der Übereinstimmung aufgezeichnet wird.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.CaptureCollection">
      <summary>Stellt den Satz von Erfassungen einer einzelnen Erfassungsgruppe dar.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.CopyTo(System.Array,System.Int32)">
      <summary>Kopiert alle Elemente der Auflistung ab dem angegebenen Index in das angegebene Array.</summary>
      <param name="array">Das Array, in das die Auflistung kopiert werden soll.</param>
      <param name="arrayIndex">Die Position im Zielarray, an der mit dem Kopieren begonnen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> liegt außerhalb der Grenzen von <paramref name="array" />.  

oder - 
<paramref name="arrayIndex" /> und <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" /> liegen außerhalb der Grenzen von <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.CopyTo(System.Text.RegularExpressions.Capture[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Count">
      <summary>Ruft die Anzahl der Teilzeichenfolgen ab, die von der Gruppe erfasst wurden.</summary>
      <returns>Die Anzahl der Elemente in der <see cref="T:System.Text.RegularExpressions.CaptureCollection" />.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.GetEnumerator">
      <summary>Stellt einen Enumerator bereit, der die Auflistung durchläuft.</summary>
      <returns>Ein Objekt, das alle <see cref="T:System.Text.RegularExpressions.Capture" />-Objekte innerhalb von <see cref="T:System.Text.RegularExpressions.CaptureCollection" /> enthält.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsReadOnly">
      <summary>Ruft einen Wert ab, der angibt, ob die Auflistung schreibgeschützt ist.</summary>
      <returns>
        <see langword="true" /> in allen Fällen.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsSynchronized">
      <summary>Ruft einen Wert ab, der angibt, ob der Zugriff auf die Auflistung synchronisiert (threadsicher) ist.</summary>
      <returns>
        <see langword="false" /> in allen Fällen.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Item(System.Int32)">
      <summary>Ruft einen einzelnen Member der Auflistung ab.</summary>
      <param name="i">Index in der Erfassungsauflistung.</param>
      <returns>Die aufgezeichnete Teilzeichenfolge an Position <paramref name="i" /> der Auflistung.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> ist kleiner als 0 oder größer als <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" />.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.SyncRoot">
      <summary>Ruft ein Objekt ab, mit dem der Zugriff auf die Auflistung synchronisiert werden kann.</summary>
      <returns>Ein Objekt, mit dem der Zugriff auf die Auflistung synchronisiert werden kann.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Capture}#Add(System.Text.RegularExpressions.Capture)">
      <param name="item" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Capture}#Clear" />
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Capture}#Contains(System.Text.RegularExpressions.Capture)">
      <param name="item" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Capture}#Remove(System.Text.RegularExpressions.Capture)">
      <param name="item" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Capture}#GetEnumerator" />
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Capture}#IndexOf(System.Text.RegularExpressions.Capture)">
      <param name="item" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Capture}#Insert(System.Int32,System.Text.RegularExpressions.Capture)">
      <param name="index" />
      <param name="item" />
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Capture}#Item(System.Int32)">
      <param name="index" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Capture}#RemoveAt(System.Int32)">
      <param name="index" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Add(System.Object)">
      <param name="value" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Clear" />
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Contains(System.Object)">
      <param name="value" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#IndexOf(System.Object)">
      <param name="value" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <param name="index" />
      <param name="value" />
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#IsFixedSize" />
    <member name="P:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Item(System.Int32)">
      <param name="index" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Remove(System.Object)">
      <param name="value" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <param name="index" />
    </member>
    <member name="T:System.Text.RegularExpressions.Group">
      <summary>Stellt die Ergebnisse einer einzelnen Erfassungsgruppe dar.</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Captures">
      <summary>Ruft eine Auflistung aller der Erfassungsgruppe entsprechenden Erfassungsübereinstimmungen in der Reihenfolge von innen nach außen und von links nach rechts ab (oder in der Reihenfolge von innen nach außen und von rechts nach links bei einer Änderung des regulären Ausdrucks mit der <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" />-Option). Die Auflistung kann 0 (null) oder mehr Elemente enthalten.</summary>
      <returns>Die Auflistung der Teilzeichenfolge, die mit der Gruppe übereinstimmen.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Name">
      <summary>Gibt der Name der Erfassungsgruppe, die die aktuelle Instanz darstellt.</summary>
      <returns>Der Name der Erfassungsgruppe, die die aktuelle Instanz darstellt.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Success">
      <summary>Ruft einen Wert ab, der angibt, ob die Übereinstimmung erfolgreich ist.</summary>
      <returns>
        <see langword="true" />, wenn die Übereinstimmung erfolgreich ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Group.Synchronized(System.Text.RegularExpressions.Group)">
      <summary>Gibt ein dem bereitgestellten Objekt entsprechendes <see langword="Group" />-Objekt zurück, das auf sichere Weise von mehreren Threads gemeinsam verwendet werden kann.</summary>
      <param name="inner">Das <see cref="T:System.Text.RegularExpressions.Group" />-Eingabeobjekt.</param>
      <returns>Das <see langword="Group" />-Objekt eines regulären Ausdrucks.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inner" /> ist <see langword="null" />.</exception>
    </member>
    <member name="T:System.Text.RegularExpressions.GroupCollection">
      <summary>Gibt die Menge der Erfassungsgruppen in einer einzelnen Übereinstimmung zurück.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.ContainsKey(System.String)">
      <summary>Bestimmt, ob die Gruppenauflistung eine erfasste Gruppe enthält, die durch den angegebenen Namen identifiziert wird.</summary>
      <param name="key">Eine Zeichenfolge mit dem Namen der erfassten Gruppe, die gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn die Gruppenauflistung eine erfasste Gruppe enthält, die durch <paramref name="key" /> identifiziert wird; anderenfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)">
      <summary>Kopiert alle Elemente der Auflistung ab dem angegebenen Index in das angegebene Array.</summary>
      <param name="array">Das Array, in das die Auflistung kopiert werden soll.</param>
      <param name="arrayIndex">Die Position im Zielarray, an der mit dem Kopieren begonnen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" /> liegt außerhalb der Grenzen von <paramref name="array" />.

oder -

<paramref name="arrayIndex" /> und <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> liegen außerhalb der Grenzen von <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Text.RegularExpressions.Group[],System.Int32)">
      <summary>Kopiert die Elemente der Gruppenauflistung in ein <see cref="System.Text.RegularExpressions.Group[]" />-Array, wobei an einem bestimmten Arrayindex begonnen wird.</summary>
      <param name="array">Das eindimensionales Array, bei dem es sich um das Ziel der aus der Gruppenauflistung kopierten Elemente handelt. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> ist NULL.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> ist kleiner als Null.

oder -

<paramref name="arrayIndex" /> ist größer als die Länge von <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentException">Die Länge von <paramref name="array" /> - <paramref name="arrayIndex" /> ist kleiner als die Anzahl der Gruppen in der Auflistung.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Count">
      <summary>Gibt die Anzahl der Gruppen in der Auflistung zurück.</summary>
      <returns>Die Anzahl der Gruppen in der Auflistung.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator">
      <summary>Stellt einen Enumerator bereit, der die Auflistung durchläuft.</summary>
      <returns>Ein Enumerator, der alle <see cref="T:System.Text.RegularExpressions.Group" />-Objekte in der <see cref="T:System.Text.RegularExpressions.GroupCollection" /> enthält.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsReadOnly">
      <summary>Ruft einen Wert ab, der angibt, ob die Auflistung schreibgeschützt ist.</summary>
      <returns>
        <see langword="true" /> in allen Fällen.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized">
      <summary>Ruft einen Wert ab, der angibt, ob der Zugriff auf <see cref="T:System.Text.RegularExpressions.GroupCollection" /> synchronisiert (threadsicher) ist.</summary>
      <returns>
        <see langword="false" /> in allen Fällen.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)">
      <summary>Ermöglicht den Zugriff auf einen Member der Auflistung über einen Ganzzahlenindex.</summary>
      <param name="groupnum">Der nullbasierte Index des Auflistungsmembers, der abgerufen werden soll.</param>
      <returns>Der Member der Auflistung, die durch <paramref name="groupnum" /> angegeben wird.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)">
      <summary>Ermöglicht den Zugriff auf einen Member der Auflistung über einen Zeichenfolgenindex.</summary>
      <param name="groupname">Der Name der Erfassungsgruppe.</param>
      <returns>Der Member der Auflistung, die durch <paramref name="groupname" /> angegeben wird.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Keys">
      <summary>Ruft eine Zeichenfolgenenumeration ab, die die Namensschlüssel der Gruppenauflistung enthält.</summary>
      <returns>Die namens Schlüssel der Gruppen Auflistung.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.SyncRoot">
      <summary>Ruft ein Objekt ab, mit dem der Zugriff auf <see cref="T:System.Text.RegularExpressions.GroupCollection" /> synchronisiert werden kann.</summary>
      <returns>Eine Kopie des zu synchronisierenden <see cref="T:System.Text.RegularExpressions.Match" />-Objekts.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Add(System.Text.RegularExpressions.Group)">
      <summary>Fügt der Auflistung eine <see cref="T:System.Text.RegularExpressions.Group" /> hinzu. Beim Aufrufen dieser Methode wird immer eine <see cref="T:System.NotSupportedException" /> ausgelöst.</summary>
      <param name="item">Die zur Auflistung hinzuzufügende Gruppe.</param>
      <exception cref="T:System.NotSupportedException">Diese Methode wird nicht unterstützt. Dies ist eine schreibgeschützte Auflistung.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Clear">
      <summary>Löscht die Auflistung. Beim Aufrufen dieser Methode wird immer eine <see cref="T:System.NotSupportedException" /> ausgelöst.</summary>
      <exception cref="T:System.NotSupportedException">Diese Methode wird nicht unterstützt. Dies ist eine schreibgeschützte Auflistung.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Contains(System.Text.RegularExpressions.Group)">
      <summary>Bestimmt, ob die Gruppenauflistung eine bestimmtes Gruppenelement enthält.</summary>
      <param name="item">Die Gruppe, die in der Gruppenauflistung gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn das Gruppenelement in der Gruppenauflistung gefunden wurde; anderenfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Remove(System.Text.RegularExpressions.Group)">
      <summary>Entfernt ein <see cref="T:System.Text.RegularExpressions.Group" /> aus der Auflistung. Beim Aufrufen dieser Methode wird immer eine <see cref="T:System.NotSupportedException" /> ausgelöst.</summary>
      <param name="item">Die zu entfernende Gruppe.</param>
      <returns>Diese Methode wird nicht unterstützt. Es wird kein Wert zurückgegeben.</returns>
      <exception cref="T:System.NotSupportedException">Diese Methode wird nicht unterstützt. Dies ist eine schreibgeschützte Auflistung.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#Text#RegularExpressions#Group}}#GetEnumerator">
      <summary>Stellt einen Enumerator bereit, der die Gruppenauflistung durchläuft.</summary>
      <returns>Ein Enumerator, der alle Namen und Objekte der <see cref="T:System.Text.RegularExpressions.Group" />-Auflistung enthält.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Group}#GetEnumerator">
      <summary>Stellt einen Enumerator bereit, der die Gruppenauflistung durchläuft.</summary>
      <returns>Ein Enumerator, der alle <see cref="T:System.Text.RegularExpressions.Group" />-Objekte der Gruppenauflistung enthält.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#IndexOf(System.Text.RegularExpressions.Group)">
      <summary>Bestimmt den Index einer bestimmten Gruppe in der Gruppenauflistung.</summary>
      <param name="item">Die Gruppe, die in der Gruppenauflistung gesucht werden soll.</param>
      <returns>Der Index von &lt;paramref. name="item"&gt;&lt;/paramref.&gt;, sofern gefunden; andernfalls -1.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Insert(System.Int32,System.Text.RegularExpressions.Group)">
      <summary>Fügt ein <see cref="T:System.Text.RegularExpressions.Group" />-Element in die Auflistung ein. Beim Aufrufen dieser Methode wird immer eine <see cref="T:System.NotSupportedException" /> ausgelöst.</summary>
      <param name="index">Die Position, an der die Gruppe eingefügt werden soll.</param>
      <param name="item">Die einzufügende Gruppe.</param>
      <exception cref="T:System.NotSupportedException">Diese Methode wird nicht unterstützt. Dies ist eine schreibgeschützte Auflistung.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Item(System.Int32)">
      <summary>Ruft die Gruppe an der angegebenen Position in der Auflistung ab.</summary>
      <param name="index">Der nullbasierte Index der Gruppe in der Gruppenauflistung.</param>
      <returns>Die Gruppe an der gewünschten Position.</returns>
      <exception cref="T:System.NotSupportedException">Ein Element kann nicht festgelegt werden. Dies ist eine schreibgeschützte Auflistung.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#RemoveAt(System.Int32)">
      <summary>Entfernt die <see cref="T:System.Text.RegularExpressions.Group" />-Klasse aus der Auflistung am angegebenen Index. Beim Aufrufen dieser Methode wird immer eine <see cref="T:System.NotSupportedException" /> ausgelöst.</summary>
      <param name="index">Der nullbasierte Index der zu entfernenden Gruppe.</param>
      <exception cref="T:System.NotSupportedException">Diese Methode wird nicht unterstützt. Dies ist eine schreibgeschützte Auflistung.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Add(System.Object)">
      <summary>Fügt der Gruppenauflistung ein Objekt hinzu. Beim Aufrufen dieser Methode wird immer eine <see cref="T:System.NotSupportedException" /> ausgelöst.</summary>
      <param name="value">Das Objekt, das der Gruppenauflistung hinzugefügt werden soll.</param>
      <exception cref="T:System.NotSupportedException">Diese Methode wird nicht unterstützt. Dies ist eine schreibgeschützte Auflistung.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Clear">
      <summary>Löscht die Auflistung. Beim Aufrufen dieser Methode wird immer eine <see cref="T:System.NotSupportedException" /> ausgelöst.</summary>
      <exception cref="T:System.NotSupportedException">Diese Methode wird nicht unterstützt. Dies ist eine schreibgeschützte Auflistung.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Bestimmt, ob die Gruppenauflistung eine bestimmtes Gruppenelement enthält.</summary>
      <param name="value">Die Gruppe, die in der Gruppenauflistung gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn das Gruppenelement in der Gruppenauflistung gefunden wurde; anderenfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Bestimmt den Index einer bestimmten Gruppe in der Gruppenauflistung.</summary>
      <param name="value">Die Gruppe, die in der Gruppenauflistung gesucht werden soll.</param>
      <returns>Der Index von &lt;paramref. name="item"&gt;&lt;/paramref.&gt;, sofern gefunden; andernfalls -1.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Fügt ein <see cref="T:System.Text.RegularExpressions.Group" />-Element in die Auflistung ein. Beim Aufrufen dieser Methode wird immer eine <see cref="T:System.NotSupportedException" /> ausgelöst.</summary>
      <param name="index">Die Position, an der die Gruppe eingefügt werden soll.</param>
      <param name="value">Die einzufügende Gruppe.</param>
      <exception cref="T:System.NotSupportedException">Diese Methode wird nicht unterstützt. Dies ist eine schreibgeschützte Auflistung.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IsFixedSize">
      <summary>Ruft einen Wert ab, der angibt, ob die Gruppenauflistung eine feste Größe aufweist.</summary>
      <returns>Immer <see langword="true" />.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Ruft die Gruppe an der gewünschten Position ab.</summary>
      <param name="index">Die nullbasierte Indexposition der Gruppe in der Gruppenauflistung.</param>
      <returns>Die Gruppe an der gewünschten Position.</returns>
      <exception cref="T:System.NotSupportedException">Ein Element kann nicht festgelegt werden. Dies ist eine schreibgeschützte Auflistung.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Entfernt ein <see cref="T:System.Text.RegularExpressions.Group" /> aus der Auflistung. Beim Aufrufen dieser Methode wird immer eine <see cref="T:System.NotSupportedException" /> ausgelöst.</summary>
      <param name="value">Die zu entfernende Gruppe.</param>
      <exception cref="T:System.NotSupportedException">Diese Methode wird nicht unterstützt. Dies ist eine schreibgeschützte Auflistung.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Entfernt die <see cref="T:System.Text.RegularExpressions.Group" />-Klasse aus der Auflistung am angegebenen Index. Beim Aufrufen dieser Methode wird immer eine <see cref="T:System.NotSupportedException" /> ausgelöst.</summary>
      <param name="index">Der nullbasierte Index der zu entfernenden Gruppe.</param>
      <exception cref="T:System.NotSupportedException">Diese Methode wird nicht unterstützt. Dies ist eine schreibgeschützte Auflistung.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.TryGetValue(System.String,System.Text.RegularExpressions.Group@)">
      <summary>Versucht, eine durch den angegebenen Namensschlüssel identifizierte Gruppe abzurufen, wenn diese in der Gruppenauflistung vorhanden ist.</summary>
      <param name="key">Eine Zeichenfolge mit dem zu suchenden Gruppennamenschlüssel.</param>
      <param name="value">Wenn die Methode zurückgegeben wird, die Gruppe, deren Name <paramref name="key" /> ist, falls gefunden; anderenfalls <see langword="null" />.</param>
      <returns>
        <see langword="true" />, wenn eine anhand des angegebenen Namensschlüssel identifizierte Gruppe vor ist; anderenfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Values">
      <summary>Ruft eine Gruppenenumeration mit allen Gruppen in der Gruppenauflistung ab.</summary>
      <returns>Eine gruppenenumeration.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Match">
      <summary>Stellt die Ergebnisse aus einer einzelnen Übereinstimmung eines regulären Ausdrucks dar.</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Empty">
      <summary>Ruft die leere Gruppe ab. Alle fehlgeschlagenen Übereinstimmungen geben diese leere Übereinstimmung zurück.</summary>
      <returns>Eine leere Übereinstimmung.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Groups">
      <summary>Ruft eine Auflistung der mit dem regulären Ausdruck übereinstimmenden Gruppen ab.</summary>
      <returns>Die Zeichengruppen, die mit dem Muster übereinstimmen.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.NextMatch">
      <summary>Gibt ein neues <see cref="T:System.Text.RegularExpressions.Match" />-Objekt mit den Ergebnissen für die nächste Übereinstimmung zurück und beginnt dabei an der Endposition der vorherigen Übereinstimmung (mit dem Zeichen, das dem letzten übereinstimmenden Zeichen folgt).</summary>
      <returns>Die folgende Übereinstimmung für einen regulären Ausdruck.</returns>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Result(System.String)">
      <summary>Gibt die Erweiterung des angegebenen Ersetzungsmusters zurück.</summary>
      <param name="replacement">Das zu verwendende Ersetzungsmuster.</param>
      <returns>Die erweiterte Version des <paramref name="replacement" />-Parameters.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="replacement" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Erweiterung ist für dieses Muster nicht zulässig.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)">
      <summary>Gibt eine der bereitgestellten Instanz entsprechende <see cref="T:System.Text.RegularExpressions.Match" />-Instanz zurück, die von mehreren Threads gemeinsam verwendet werden kann.</summary>
      <param name="inner">Eine der erwarteten Übereinstimmung entsprechende Übereinstimmung mit einem regulären Ausdruck.</param>
      <returns>Eine Übereinstimmung für einen regulären Ausdruck, die für mehrere Threads freigegeben werden kann.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inner" /> ist <see langword="null" />.</exception>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchCollection">
      <summary>Stellt alle gefundenen Übereinstimmungen dar, die durch iteratives Anwenden eines Musters für reguläre Ausdrücke auf die Eingabezeichenfolge gefunden wurden.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
      <summary>Kopiert alle Elemente der Auflistung ab dem angegebenen Index in das angegebene Array.</summary>
      <param name="array">Das Array, in das die Auflistung kopiert werden soll.</param>
      <param name="arrayIndex">Die Position im Array, an der mit dem Kopieren begonnen werden soll.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> ist ein mehrdimensionales Array.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" /> liegt außerhalb der Grenzen von <paramref name="array" />.  

oder - 
<paramref name="arrayIndex" /> und <see cref="P:System.Text.RegularExpressions.MatchCollection.Count" /> liegen außerhalb der Grenzen von <paramref name="array" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Text.RegularExpressions.Match[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Count">
      <summary>Ruft die Anzahl der Übereinstimmungen ab.</summary>
      <returns>Die Anzahl der Übereinstimmungen.</returns>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
      <summary>Stellt einen Enumerator bereit, der die Auflistung durchläuft.</summary>
      <returns>Ein Objekt, das alle <see cref="T:System.Text.RegularExpressions.Match" />-Objekte innerhalb von <see cref="T:System.Text.RegularExpressions.MatchCollection" /> enthält.</returns>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsReadOnly">
      <summary>Ruft einen Wert ab, der angibt, ob die Auflistung schreibgeschützt ist.</summary>
      <returns>
        <see langword="true" /> in allen Fällen.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsSynchronized">
      <summary>Ruft einen Wert ab, der angibt, ob der Zugriff auf die Auflistung synchronisiert (threadsicher) ist.</summary>
      <returns>
        <see langword="false" /> in allen Fällen.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
      <summary>Ruft einen einzelnen Member der Auflistung ab.</summary>
      <param name="i">Index in der <see cref="T:System.Text.RegularExpressions.Match" />-Auflistung.</param>
      <returns>Die aufgezeichnete Teilzeichenfolge an Position <paramref name="i" /> der Auflistung.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> ist kleiner als 0 (null) oder größer oder gleich <see cref="P:System.Text.RegularExpressions.MatchCollection.Count" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
      <summary>Ruft ein Objekt ab, mit dem der Zugriff auf die Auflistung synchronisiert werden kann.</summary>
      <returns>Ein Objekt, mit dem der Zugriff auf die Auflistung synchronisiert werden kann. Diese Eigenschaft gibt immer das Objekt selbst zurück.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Add(System.Text.RegularExpressions.Match)">
      <param name="item" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Clear" />
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Contains(System.Text.RegularExpressions.Match)">
      <param name="item" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Remove(System.Text.RegularExpressions.Match)">
      <param name="item" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Match}#GetEnumerator" />
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#IndexOf(System.Text.RegularExpressions.Match)">
      <param name="item" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#Insert(System.Int32,System.Text.RegularExpressions.Match)">
      <param name="index" />
      <param name="item" />
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#Item(System.Int32)">
      <param name="index" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#RemoveAt(System.Int32)">
      <param name="index" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Add(System.Object)">
      <param name="value" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Clear" />
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Contains(System.Object)">
      <param name="value" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#IndexOf(System.Object)">
      <param name="value" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <param name="index" />
      <param name="value" />
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#IsFixedSize" />
    <member name="P:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Item(System.Int32)">
      <param name="index" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Remove(System.Object)">
      <param name="value" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <param name="index" />
    </member>
    <member name="T:System.Text.RegularExpressions.MatchEvaluator">
      <summary>Stellt die Methode dar, die immer dann aufgerufen wird, wenn während eines <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" />-Methodenvorgangs eine Übereinstimmung für einen regulären Ausdruck gefunden wird.</summary>
      <param name="match">Das <see cref="T:System.Text.RegularExpressions.Match" />-Objekt, das eine einzelne Übereinstimmung mit einem regulären Ausdruck während eines <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" />-Methodenvorgangs darstellt.</param>
      <returns>Eine Zeichenfolge, die von der durch den <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />-Delegaten dargestellten Methode zurückgegeben wird.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Regex">
      <summary>Stellt einen unveränderlichen regulären Ausdruck dar.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.RegularExpressions.Regex" />-Klasse.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.RegularExpressions.Regex" />-Klasse mithilfe von serialisierten Daten.</summary>
      <param name="info">Das Objekt, das ein serialisiertes Muster und <see cref="T:System.Text.RegularExpressions.RegexOptions" />-Informationen enthält.</param>
      <param name="context">Das Ziel dieser Serialisierung. (Dieser Parameter wird nicht verwendet, geben Sie <see langword="null" /> an.)</param>
      <exception cref="T:System.ArgumentException">Ein Analysefehler für reguläre Ausdrücke ist aufgetreten.</exception>
      <exception cref="T:System.ArgumentNullException">Das Muster, das diese <paramref name="info" /> enthält, ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="info" /> enthält ein ungültiges <see cref="T:System.Text.RegularExpressions.RegexOptions" />-Flag.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.RegularExpressions.Regex" />-Klasse für den angegebenen regulären Ausdruck.</summary>
      <param name="pattern">Das Muster eines regulären Ausdrucks, mit dem Übereinstimmungen gefunden werden sollen.</param>
      <exception cref="T:System.ArgumentException">Ein Analysefehler für reguläre Ausdrücke ist aufgetreten.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.RegularExpressions.Regex" />-Klasse für den angegebenen regulären Ausdruck mit Optionen zum Verändern des Musters.</summary>
      <param name="pattern">Das Muster eines regulären Ausdrucks, mit dem Übereinstimmungen gefunden werden sollen.</param>
      <param name="options">Eine bitweise Kombination der Enumerationswerte, die den regulären Ausdruck ändern.</param>
      <exception cref="T:System.ArgumentException">Ein Analysefehler für reguläre Ausdrücke ist aufgetreten.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> enthält ein ungültiges Flag.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.RegularExpressions.Regex" />-Klasse für den angegebenen regulären Ausdruck mit Optionen, die das Muster und einen Wert ändern, der angibt, wie lange eine Mustervergleichsmethode versuchen sollte, eine Übereinstimmung zu finden, bevor ein Timeout eintritt.</summary>
      <param name="pattern">Das Muster eines regulären Ausdrucks, mit dem Übereinstimmungen gefunden werden sollen.</param>
      <param name="options">Eine bitweise Kombination der Enumerationswerte, die den regulären Ausdruck ändern.</param>
      <param name="matchTimeout">Ein Timeoutintervall oder <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, das angibt, dass die Methode kein Timeout haben sollte.</param>
      <exception cref="T:System.ArgumentException">Ein Analysefehler für reguläre Ausdrücke ist aufgetreten.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> ist kein gültiger <see cref="T:System.Text.RegularExpressions.RegexOptions" />-Wert.  

oder - 
<paramref name="matchTimeout" /> ist negativ, null oder größer als ca. 24 Tage.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.CacheSize">
      <summary>Ruft die maximale Anzahl von Einträgen im aktuellen statischen Cache für die kompilierten regulären Ausdrücke ab oder legt diese fest.</summary>
      <returns>Die maximale Anzahl von Einträgen im statischen Cache.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Der Wert in einem Set-Vorgang ist kleiner als 0 (null).</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capnames">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.CapNames">
      <summary>Ruft ein Wörterbuch ab, das Erfassungsgruppen ihren Indexwerten zuordnet, oder legt es fest.</summary>
      <returns>Ein Wörterbuch, das Erfassungsgruppen ihren Indexwerten zuordnet.</returns>
      <exception cref="T:System.ArgumentNullException">Der einer <see cref="P:System.Text.RegularExpressions.Regex.CapNames" />-Eigenschaft zugeordnete Wert in einer festgelegten Operation ist <see langword="null" />.</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.caps">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.Caps">
      <summary>Ruft ein Wörterbuch ab oder legt es fest, das nummerierte Erfassungsgruppen ihren Indexwerten zuordnet.</summary>
      <returns>Ein Wörterbuch, das nummerierte Erfassungsgruppen ihren Indexwerten zuordnet.</returns>
      <exception cref="T:System.ArgumentNullException">Der einer <see cref="P:System.Text.RegularExpressions.Regex.Caps" />-Eigenschaft zugeordnete Wert in einer festgelegten Operation ist <see langword="null" />.</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capsize">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capslist">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)">
      <summary>Kompiliert ein oder mehrere angegebene <see cref="T:System.Text.RegularExpressions.Regex" />-Objekte in eine benannte Assembly.</summary>
      <param name="regexinfos">Ein Array, das die zu kompilierenden regulären Ausdrücke beschreibt.</param>
      <param name="assemblyname">Der Dateiname der Assembly.</param>
      <exception cref="T:System.ArgumentException">Der Wert der <see cref="P:System.Reflection.AssemblyName.Name" />-Eigenschaft des <paramref name="assemblyname" />-Parameters ist eine leere oder eine NULL-Zeichenfolge.  

oder - 
Das Muster des regulären Ausdrucks eines oder mehrerer Objekte in <paramref name="regexinfos" /> enthält eine ungültige Syntax.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyname" /> oder <paramref name="regexinfos" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Nur .NET Core: Das Erstellen einer Assembly aus kompilierten regulären Ausdrücken wird nicht unterstützt.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[])">
      <summary>Kompiliert ein oder mehrere angegebene <see cref="T:System.Text.RegularExpressions.Regex" />-Objekte in eine benannte Assembly mit den angegebenen Attributen.</summary>
      <param name="regexinfos">Ein Array, das die zu kompilierenden regulären Ausdrücke beschreibt.</param>
      <param name="assemblyname">Der Dateiname der Assembly.</param>
      <param name="attributes">Ein Array, das die auf die Assembly anzuwendenden Attribute definiert.</param>
      <exception cref="T:System.ArgumentException">Der Wert der <see cref="P:System.Reflection.AssemblyName.Name" />-Eigenschaft des <paramref name="assemblyname" />-Parameters ist eine leere oder eine NULL-Zeichenfolge.  

oder - 
Das Muster des regulären Ausdrucks eines oder mehrerer Objekte in <paramref name="regexinfos" /> enthält eine ungültige Syntax.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyname" /> oder <paramref name="regexinfos" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Nur .NET Core: Das Erstellen einer Assembly aus kompilierten regulären Ausdrücken wird nicht unterstützt.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[],System.String)">
      <summary>Kompiliert ein oder mehrere angegebene <see cref="T:System.Text.RegularExpressions.Regex" />-Objekte und eine angegebene Ressourcendatei in eine benannte Assembly mit den angegebenen Attributen.</summary>
      <param name="regexinfos">Ein Array, das die zu kompilierenden regulären Ausdrücke beschreibt.</param>
      <param name="assemblyname">Der Dateiname der Assembly.</param>
      <param name="attributes">Ein Array, das die auf die Assembly anzuwendenden Attribute definiert.</param>
      <param name="resourceFile">Der Name der in die Assembly einzufügenden Win32-Ressourcendatei.</param>
      <exception cref="T:System.ArgumentException">Der Wert der <see cref="P:System.Reflection.AssemblyName.Name" />-Eigenschaft des <paramref name="assemblyname" />-Parameters ist eine leere oder eine NULL-Zeichenfolge.  

oder - 
Das Muster des regulären Ausdrucks eines oder mehrerer Objekte in <paramref name="regexinfos" /> enthält eine ungültige Syntax.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyname" /> oder <paramref name="regexinfos" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">Der <paramref name="resourceFile" />-Parameter legt eine ungültige Win32-Ressourcendatei fest.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Die vom <paramref name="resourceFile" />-Parameter angegebene Datei kann nicht gefunden werden.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Nur .NET Core: Das Erstellen einer Assembly aus kompilierten regulären Ausdrücken wird nicht unterstützt.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Escape(System.String)">
      <summary>Versieht einen minimalen Satz an Zeichen (\, *, +, ?, |, {, [, (,), ^, $,., # und Leerzeichen) mit Escapezeichen, indem diese durch die jeweils entsprechende Escapesequenz ersetzt werden. Damit wird die Engine für reguläre Ausdrücke angewiesen, diese Zeichen als Literale statt als Metazeichen zu interpretieren.</summary>
      <param name="str">Die Eingabezeichenfolge mit dem zu konvertierenden Text.</param>
      <returns>Eine Zeichenfolge, in der Metazeichen in die entsprechenden Escapecodes konvertiert wurden.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> ist <see langword="null" />.</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.factory">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNames">
      <summary>Gibt ein Array der Namen von Erfassungsgruppen für den regulären Ausdruck zurück.</summary>
      <returns>Ein Zeichenfolgenarray von Gruppennamen.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNumbers">
      <summary>Gibt ein Array der Nummern von Erfassungsgruppen zurück, die den Gruppennamen in einem Array entsprechen.</summary>
      <returns>Ein Ganzzahlarray der Gruppennummern.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)">
      <summary>Ruft den Gruppennamen ab, der der angegebenen Gruppennummer entspricht.</summary>
      <param name="i">Die Gruppennummer, die in den entsprechenden Gruppennamen konvertiert werden soll.</param>
      <returns>Eine Zeichenfolge, die den Gruppennamen enthält, der der angegebenen Gruppennummer zugeordnet ist. Wenn kein Gruppenname vorhanden ist, der <paramref name="i" /> entspricht, gibt die Methode <see cref="F:System.String.Empty" /> zurück.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)">
      <summary>Gibt die Gruppennummer zurück, die dem angegebenen Gruppennamen entspricht.</summary>
      <param name="name">Der Gruppenname, der in die entsprechende Gruppennummer konvertiert werden soll.</param>
      <returns>Die Gruppennummer, die dem angegebenen Gruppennamen entspricht, oder -1, wenn <paramref name="name" /> kein gültiger Gruppenname ist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> ist <see langword="null" />.</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout">
      <summary>Gibt an, dass bei einem Mustervergleichsvorgang kein Timeout angewendet werden sollte.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.InitializeReferences">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
      <exception cref="T:System.NotSupportedException">Verweise wurden bereits initialisiert.</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.internalMatchTimeout">
      <summary>Die maximale Zeit, die ein Mustervergleichsvorgang ausgeführt werden kann, bevor des Timeout eintritt.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)">
      <summary>Gibt an, ob der im <see cref="T:System.Text.RegularExpressions.Regex" />-Konstruktor angegebene reguläre Ausdruck eine Übereinstimmung in einer angegebenen Eingabezeichenfolge findet.</summary>
      <param name="input">Die nach einer Übereinstimmung zu durchsuchende Zeichenfolge.</param>
      <returns>
        <see langword="true" />, wenn der reguläre Ausdruck eine Übereinstimmung findet, andernfalls <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten. Weitere Informationen zu Timeouts finden Sie im Abschnitt „Hinweise“.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)">
      <summary>Gibt an, ob der im <see cref="T:System.Text.RegularExpressions.Regex" />-Konstruktor angegebene reguläre Ausdruck ab der angegebenen Anfangsposition eine Übereinstimmung in der angegebenen Eingabezeichenfolge findet.</summary>
      <param name="input">Die nach einer Übereinstimmung zu durchsuchende Zeichenfolge.</param>
      <param name="startat">Die Zeichenposition, an der mit der Suche begonnen werden soll.</param>
      <returns>
        <see langword="true" />, wenn der reguläre Ausdruck eine Übereinstimmung findet, andernfalls <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> ist kleiner als 0 (null) oder größer als die Länge von <paramref name="input" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten. Weitere Informationen zu Timeouts finden Sie im Abschnitt „Hinweise“.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)">
      <summary>Gibt an, ob der reguläre Ausdruck eine Übereinstimmung in der angegebenen Eingabezeichenfolge findet.</summary>
      <param name="input">Die nach einer Übereinstimmung zu durchsuchende Zeichenfolge.</param>
      <param name="pattern">Das Muster eines regulären Ausdrucks, mit dem Übereinstimmungen gefunden werden sollen.</param>
      <returns>
        <see langword="true" />, wenn der reguläre Ausdruck eine Übereinstimmung findet, andernfalls <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">Ein Analysefehler für reguläre Ausdrücke ist aufgetreten.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> oder <paramref name="pattern" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten. Weitere Informationen zu Timeouts finden Sie im Abschnitt „Hinweise“.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Gibt an, ob der angegebene reguläre Ausdruck unter Verwendung der angegebenen Übereinstimmungsoptionen eine Übereinstimmung in der angegebenen Eingabezeichenfolge findet.</summary>
      <param name="input">Die nach einer Übereinstimmung zu durchsuchende Zeichenfolge.</param>
      <param name="pattern">Das Muster eines regulären Ausdrucks, mit dem Übereinstimmungen gefunden werden sollen.</param>
      <param name="options">Eine bitweise Kombination der Enumerationswerte, die Optionen für Vergleiche angeben.</param>
      <returns>
        <see langword="true" />, wenn der reguläre Ausdruck eine Übereinstimmung findet, andernfalls <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">Ein Analysefehler für reguläre Ausdrücke ist aufgetreten.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> oder <paramref name="pattern" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> ist kein gültiger <see cref="T:System.Text.RegularExpressions.RegexOptions" />-Wert.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten. Weitere Informationen zu Timeouts finden Sie im Abschnitt „Hinweise“.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Gibt an, ob der angegebene reguläre Ausdruck unter Verwendung der angegebenen Übereinstimmungsoptionen und des angegebenen Timeoutintervalls eine Übereinstimmung in der angegebenen Eingabezeichenfolge findet.</summary>
      <param name="input">Die nach einer Übereinstimmung zu durchsuchende Zeichenfolge.</param>
      <param name="pattern">Das Muster eines regulären Ausdrucks, mit dem Übereinstimmungen gefunden werden sollen.</param>
      <param name="options">Eine bitweise Kombination der Enumerationswerte, die Optionen für Vergleiche angeben.</param>
      <param name="matchTimeout">Ein Timeoutintervall oder <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, das angibt, dass die Methode kein Timeout haben sollte.</param>
      <returns>
        <see langword="true" />, wenn der reguläre Ausdruck eine Übereinstimmung findet, andernfalls <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">Ein Analysefehler für reguläre Ausdrücke ist aufgetreten.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> oder <paramref name="pattern" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> ist kein gültiger <see cref="T:System.Text.RegularExpressions.RegexOptions" />-Wert.  

oder - 
<paramref name="matchTimeout" /> ist negativ, null oder größer als ca. 24 Tage.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String)">
      <summary>Durchsucht die angegebene Eingabezeichenfolge nach dem ersten Vorkommen des im <see cref="T:System.Text.RegularExpressions.Regex" />-Konstruktor angegebenen regulären Ausdrucks.</summary>
      <param name="input">Die nach einer Übereinstimmung zu durchsuchende Zeichenfolge.</param>
      <returns>Ein Objekt, das Informationen zur Übereinstimmung enthält.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten. Weitere Informationen zu Timeouts finden Sie im Abschnitt „Hinweise“.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)">
      <summary>Durchsucht die Eingabezeichenfolge nach dem ersten Vorkommen eines regulären Ausdrucks ab der angegebenen Anfangsposition in der Zeichenfolge.</summary>
      <param name="input">Die nach einer Übereinstimmung zu durchsuchende Zeichenfolge.</param>
      <param name="startat">Die nullbasierte Zeichenposition, an der mit der Suche begonnen werden soll.</param>
      <returns>Ein Objekt, das Informationen zur Übereinstimmung enthält.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> ist kleiner als 0 (null) oder größer als die Länge von <paramref name="input" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten. Weitere Informationen zu Timeouts finden Sie im Abschnitt „Hinweise“.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)">
      <summary>Sucht beginnend an der angegebenen Anfangsposition in der Eingabezeichenfolge nach dem ersten Vorkommen eines regulären Ausdrucks und sucht nur nach der angegebenen Anzahl von Zeichen.</summary>
      <param name="input">Die nach einer Übereinstimmung zu durchsuchende Zeichenfolge.</param>
      <param name="beginning">Die nullbasierte Zeichenposition in der Eingabezeichenfolge, die die am weitesten links stehende Position definiert, die gesucht werden soll.</param>
      <param name="length">Die Anzahl der Zeichen der Teilzeichenfolge, die in die Suche einbezogen werden soll.</param>
      <returns>Ein Objekt, das Informationen zur Übereinstimmung enthält.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="beginning" /> ist kleiner als 0 (null) oder größer als die Länge von <paramref name="input" />.  

oder - 
<paramref name="length" /> ist kleiner als 0 (null) oder größer als die Länge von <paramref name="input" />.  

oder - 
<paramref name="beginning" /><see langword="+" /><paramref name="length" /><see langword="-1" /> gibt eine Position außerhalb des Bereichs von <paramref name="input" /> an.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten. Weitere Informationen zu Timeouts finden Sie im Abschnitt „Hinweise“.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)">
      <summary>Durchsucht die angegebene Eingabezeichenfolge nach dem ersten Vorkommen des angegebenen regulären Ausdrucks.</summary>
      <param name="input">Die nach einer Übereinstimmung zu durchsuchende Zeichenfolge.</param>
      <param name="pattern">Das Muster eines regulären Ausdrucks, mit dem Übereinstimmungen gefunden werden sollen.</param>
      <returns>Ein Objekt, das Informationen zur Übereinstimmung enthält.</returns>
      <exception cref="T:System.ArgumentException">Ein Analysefehler für reguläre Ausdrücke ist aufgetreten.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> oder <paramref name="pattern" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten. Weitere Informationen zu Timeouts finden Sie im Abschnitt „Hinweise“.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Durchsucht die angegebene Eingabezeichenfolge unter Verwendung der angegebenen Übereinstimmungsoptionen nach dem ersten Vorkommen des angegebenen regulären Ausdrucks.</summary>
      <param name="input">Die nach einer Übereinstimmung zu durchsuchende Zeichenfolge.</param>
      <param name="pattern">Das Muster eines regulären Ausdrucks, mit dem Übereinstimmungen gefunden werden sollen.</param>
      <param name="options">Eine bitweise Kombination der Enumerationswerte, die Optionen für Vergleiche angeben.</param>
      <returns>Ein Objekt, das Informationen zur Übereinstimmung enthält.</returns>
      <exception cref="T:System.ArgumentException">Ein Analysefehler für reguläre Ausdrücke ist aufgetreten.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> oder <paramref name="pattern" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> ist keine gültige bitweise Kombination von <see cref="T:System.Text.RegularExpressions.RegexOptions" />-Werten.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten. Weitere Informationen zu Timeouts finden Sie im Abschnitt „Hinweise“.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Durchsucht die Eingabezeichenfolge unter Verwendung der angegebenen Übereinstimmungsoptionen und des angegebenen Timeoutintervalls nach dem ersten Vorkommen des angegebenen regulären Ausdrucks.</summary>
      <param name="input">Die nach einer Übereinstimmung zu durchsuchende Zeichenfolge.</param>
      <param name="pattern">Das Muster eines regulären Ausdrucks, mit dem Übereinstimmungen gefunden werden sollen.</param>
      <param name="options">Eine bitweise Kombination der Enumerationswerte, die Optionen für Vergleiche angeben.</param>
      <param name="matchTimeout">Ein Timeoutintervall oder <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, das angibt, dass die Methode kein Timeout haben sollte.</param>
      <returns>Ein Objekt, das Informationen zur Übereinstimmung enthält.</returns>
      <exception cref="T:System.ArgumentException">Ein Analysefehler für reguläre Ausdrücke ist aufgetreten.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> oder <paramref name="pattern" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> ist keine gültige bitweise Kombination von <see cref="T:System.Text.RegularExpressions.RegexOptions" />-Werten.  

oder - 
<paramref name="matchTimeout" /> ist negativ, null oder größer als ca. 24 Tage.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten. Weitere Informationen zu Timeouts finden Sie im Abschnitt „Hinweise“.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String)">
      <summary>Durchsucht die angegebene Eingabezeichenfolge nach allen Vorkommen eines regulären Ausdrucks.</summary>
      <param name="input">Die nach einer Übereinstimmung zu durchsuchende Zeichenfolge.</param>
      <returns>Eine Auflistung der im Suchvorgang gefundenen <see cref="T:System.Text.RegularExpressions.Match" />-Objekte. Wenn keine Übereinstimmungen gefunden werden, gibt die Methode ein leeres Auflistungsobjekt zurück.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)">
      <summary>Durchsucht die angegebene Eingabezeichenfolge nach allen Vorkommen eines regulären Ausdrucks ab der angegebenen Anfangsposition in der Zeichenfolge.</summary>
      <param name="input">Die nach einer Übereinstimmung zu durchsuchende Zeichenfolge.</param>
      <param name="startat">Die Zeichenposition in der Eingabezeichenfolge, an der mit der Suche begonnen werden soll.</param>
      <returns>Eine Auflistung der im Suchvorgang gefundenen <see cref="T:System.Text.RegularExpressions.Match" />-Objekte. Wenn keine Übereinstimmungen gefunden werden, gibt die Methode ein leeres Auflistungsobjekt zurück.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> ist kleiner als 0 (null) oder größer als die Länge von <paramref name="input" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)">
      <summary>Durchsucht die angegebene Eingabezeichenfolge nach allen Vorkommen eines angegebenen regulären Ausdrucks.</summary>
      <param name="input">Die nach einer Übereinstimmung zu durchsuchende Zeichenfolge.</param>
      <param name="pattern">Das Muster eines regulären Ausdrucks, mit dem Übereinstimmungen gefunden werden sollen.</param>
      <returns>Eine Auflistung der im Suchvorgang gefundenen <see cref="T:System.Text.RegularExpressions.Match" />-Objekte. Wenn keine Übereinstimmungen gefunden werden, gibt die Methode ein leeres Auflistungsobjekt zurück.</returns>
      <exception cref="T:System.ArgumentException">Ein Analysefehler für reguläre Ausdrücke ist aufgetreten.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> oder <paramref name="pattern" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Durchsucht die angegebene Eingabezeichenfolge unter Verwendung der angegebenen Übereinstimmungsoptionen nach allen Vorkommen des angegebenen regulären Ausdrucks.</summary>
      <param name="input">Die nach einer Übereinstimmung zu durchsuchende Zeichenfolge.</param>
      <param name="pattern">Das Muster eines regulären Ausdrucks, mit dem Übereinstimmungen gefunden werden sollen.</param>
      <param name="options">Eine bitweise Kombination der Enumerationswerte, die Optionen für Vergleiche angeben.</param>
      <returns>Eine Auflistung der im Suchvorgang gefundenen <see cref="T:System.Text.RegularExpressions.Match" />-Objekte. Wenn keine Übereinstimmungen gefunden werden, gibt die Methode ein leeres Auflistungsobjekt zurück.</returns>
      <exception cref="T:System.ArgumentException">Ein Analysefehler für reguläre Ausdrücke ist aufgetreten.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> oder <paramref name="pattern" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> ist keine gültige bitweise Kombination von <see cref="T:System.Text.RegularExpressions.RegexOptions" />-Werten.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Durchsucht die angegebene Eingabezeichenfolge unter Verwendung der angegebenen Übereinstimmungsoptionen und des angegebenen Timeoutintervalls nach allen Vorkommen des angegebenen regulären Ausdrucks.</summary>
      <param name="input">Die nach einer Übereinstimmung zu durchsuchende Zeichenfolge.</param>
      <param name="pattern">Das Muster eines regulären Ausdrucks, mit dem Übereinstimmungen gefunden werden sollen.</param>
      <param name="options">Eine bitweise Kombination der Enumerationswerte, die Optionen für Vergleiche angeben.</param>
      <param name="matchTimeout">Ein Timeoutintervall oder <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, das angibt, dass die Methode kein Timeout haben sollte.</param>
      <returns>Eine Auflistung der im Suchvorgang gefundenen <see cref="T:System.Text.RegularExpressions.Match" />-Objekte. Wenn keine Übereinstimmungen gefunden werden, gibt die Methode ein leeres Auflistungsobjekt zurück.</returns>
      <exception cref="T:System.ArgumentException">Ein Analysefehler für reguläre Ausdrücke ist aufgetreten.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> oder <paramref name="pattern" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> ist keine gültige bitweise Kombination von <see cref="T:System.Text.RegularExpressions.RegexOptions" />-Werten.  

oder - 
<paramref name="matchTimeout" /> ist negativ, null oder größer als ca. 24 Tage.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.MatchTimeout">
      <summary>Ruft das Laufzeitintervall der aktuellen Instanz ab.</summary>
      <returns>Das maximale Zeitintervall, das in einem Mustervergleichsvorgang verstreichen kann, bevor eine <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" />-Ausnahme ausgelöst wird, oder <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, wenn Timeouts deaktiviert sind.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.Options">
      <summary>Ruft die Optionen ab, die an den <see cref="T:System.Text.RegularExpressions.Regex" />-Konstruktor übergeben wurden.</summary>
      <returns>Mindestens ein Member der <see cref="T:System.Text.RegularExpressions.RegexOptions" />-Enumeration, der Optionen darstellt, die dem <see cref="T:System.Text.RegularExpressions.Regex" />-Konstruktor übergeben wurden</returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.pattern">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)">
      <summary>Ersetzt in einer angegebenen Eingabezeichenfolge alle mit dem Muster für den regulären Ausdruck übereinstimmenden Zeichenfolgen durch eine angegebene Ersetzungszeichenfolge.</summary>
      <param name="input">Die nach einer Übereinstimmung zu durchsuchende Zeichenfolge.</param>
      <param name="replacement">Die Ersatzzeichenfolge.</param>
      <returns>Eine neue, mit der Eingabezeichenfolge identische Zeichenfolge. Die Ersetzungszeichenfolge ersetzt jedoch alle übereinstimmenden Zeichenfolgen. Wenn keine Entsprechung für das reguläre Ausdrucksmuster in der aktuellen Instanz gefunden wird, gibt die Methode die aktuelle Instanz unverändert zurück.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> oder <paramref name="replacement" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten. Weitere Informationen zu Timeouts finden Sie im Abschnitt „Hinweise“.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)">
      <summary>Ersetzt in einer angegebenen Eingabezeichenfolge eine angegebene Höchstanzahl von Zeichenfolgen, die mit dem Muster eines regulären Ausdrucks übereinstimmen, durch eine angegebene Ersetzungszeichenfolge.</summary>
      <param name="input">Die nach einer Übereinstimmung zu durchsuchende Zeichenfolge.</param>
      <param name="replacement">Die Ersatzzeichenfolge.</param>
      <param name="count">Die maximale Anzahl der Ersetzungen.</param>
      <returns>Eine neue, mit der Eingabezeichenfolge identische Zeichenfolge. Die Ersetzungszeichenfolge ersetzt jedoch alle übereinstimmenden Zeichenfolgen. Wenn keine Entsprechung für das reguläre Ausdrucksmuster in der aktuellen Instanz gefunden wird, gibt die Methode die aktuelle Instanz unverändert zurück.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> oder <paramref name="replacement" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten. Weitere Informationen zu Timeouts finden Sie im Abschnitt „Hinweise“.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>Ersetzt in einer angegebenen Eingabeteilzeichenfolge eine angegebene Höchstanzahl von Zeichenfolgen, die mit dem Muster eines regulären Ausdrucks übereinstimmen, durch eine angegebene Ersetzungszeichenfolge.</summary>
      <param name="input">Die nach einer Übereinstimmung zu durchsuchende Zeichenfolge.</param>
      <param name="replacement">Die Ersatzzeichenfolge.</param>
      <param name="count">Die maximale Anzahl der Ersetzungen.</param>
      <param name="startat">Die Zeichenposition in der Eingabezeichenfolge, an der mit der Suche begonnen wird.</param>
      <returns>Eine neue, mit der Eingabezeichenfolge identische Zeichenfolge. Die Ersetzungszeichenfolge ersetzt jedoch alle übereinstimmenden Zeichenfolgen. Wenn keine Entsprechung für das reguläre Ausdrucksmuster in der aktuellen Instanz gefunden wird, gibt die Methode die aktuelle Instanz unverändert zurück.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> oder <paramref name="replacement" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> ist kleiner als 0 (null) oder größer als die Länge von <paramref name="input" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten. Weitere Informationen zu Timeouts finden Sie im Abschnitt „Hinweise“.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">
      <summary>Ersetzt in einer angegebenen Eingabezeichenfolge alle mit einem angegebenen regulären Ausdruck übereinstimmenden Zeichenfolgen durch eine angegebene Ersetzungszeichenfolge.</summary>
      <param name="input">Die nach einer Übereinstimmung zu durchsuchende Zeichenfolge.</param>
      <param name="pattern">Das Muster eines regulären Ausdrucks, mit dem Übereinstimmungen gefunden werden sollen.</param>
      <param name="replacement">Die Ersatzzeichenfolge.</param>
      <returns>Eine neue, mit der Eingabezeichenfolge identische Zeichenfolge. Die Ersetzungszeichenfolge ersetzt jedoch alle übereinstimmenden Zeichenfolgen. Wenn für <paramref name="pattern" /> keine Übereinstimmung in der aktuellen Instanz gefunden wird, gibt die Methode die aktuelle Instanz unverändert zurück.</returns>
      <exception cref="T:System.ArgumentException">Ein Analysefehler für reguläre Ausdrücke ist aufgetreten.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="pattern" /> oder <paramref name="replacement" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten. Weitere Informationen zu Timeouts finden Sie im Abschnitt „Hinweise“.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Ersetzt in einer angegebenen Eingabezeichenfolge alle mit einem angegebenen regulären Ausdruck übereinstimmenden Zeichenfolgen durch eine angegebene Ersetzungszeichenfolge. Durch angegebene Optionen wird die Suche nach Übereinstimmungen geändert.</summary>
      <param name="input">Die nach einer Übereinstimmung zu durchsuchende Zeichenfolge.</param>
      <param name="pattern">Das Muster eines regulären Ausdrucks, mit dem Übereinstimmungen gefunden werden sollen.</param>
      <param name="replacement">Die Ersatzzeichenfolge.</param>
      <param name="options">Eine bitweise Kombination der Enumerationswerte, die Optionen für Vergleiche angeben.</param>
      <returns>Eine neue, mit der Eingabezeichenfolge identische Zeichenfolge. Die Ersetzungszeichenfolge ersetzt jedoch alle übereinstimmenden Zeichenfolgen. Wenn für <paramref name="pattern" /> keine Übereinstimmung in der aktuellen Instanz gefunden wird, gibt die Methode die aktuelle Instanz unverändert zurück.</returns>
      <exception cref="T:System.ArgumentException">Ein Analysefehler für reguläre Ausdrücke ist aufgetreten.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="pattern" /> oder <paramref name="replacement" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> ist keine gültige bitweise Kombination von <see cref="T:System.Text.RegularExpressions.RegexOptions" />-Werten.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten. Weitere Informationen zu Timeouts finden Sie im Abschnitt „Hinweise“.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Ersetzt in einer angegebenen Eingabezeichenfolge alle mit einem angegebenen regulären Ausdruck übereinstimmenden Zeichenfolgen durch eine angegebene Ersetzungszeichenfolge. Zusätzliche Parameter geben die Optionen an, die den entsprechenden Vorgang und ein Timeoutintervall ändern, wenn keine Übereinstimmung gefunden wird.</summary>
      <param name="input">Die nach einer Übereinstimmung zu durchsuchende Zeichenfolge.</param>
      <param name="pattern">Das Muster eines regulären Ausdrucks, mit dem Übereinstimmungen gefunden werden sollen.</param>
      <param name="replacement">Die Ersatzzeichenfolge.</param>
      <param name="options">Eine bitweise Kombination der Enumerationswerte, die Optionen für Vergleiche angeben.</param>
      <param name="matchTimeout">Ein Timeoutintervall oder <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, das angibt, dass die Methode kein Timeout haben sollte.</param>
      <returns>Eine neue, mit der Eingabezeichenfolge identische Zeichenfolge. Die Ersetzungszeichenfolge ersetzt jedoch alle übereinstimmenden Zeichenfolgen. Wenn für <paramref name="pattern" /> keine Übereinstimmung in der aktuellen Instanz gefunden wird, gibt die Methode die aktuelle Instanz unverändert zurück.</returns>
      <exception cref="T:System.ArgumentException">Ein Analysefehler für reguläre Ausdrücke ist aufgetreten.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="pattern" /> oder <paramref name="replacement" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> ist keine gültige bitweise Kombination von <see cref="T:System.Text.RegularExpressions.RegexOptions" /> -Werten.  

oder - 
<paramref name="matchTimeout" /> ist negativ, null oder größer als ca. 24 Tage.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten. Weitere Informationen zu Timeouts finden Sie im Abschnitt „Hinweise“.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>Ersetzt in einer angegebenen Eingabezeichenfolge alle mit einem angegebenen regulären Ausdruck übereinstimmenden Zeichenfolgen durch eine von einem <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />-Delegaten zurückgegebene Zeichenfolge.</summary>
      <param name="input">Die nach einer Übereinstimmung zu durchsuchende Zeichenfolge.</param>
      <param name="pattern">Das Muster eines regulären Ausdrucks, mit dem Übereinstimmungen gefunden werden sollen.</param>
      <param name="evaluator">Eine benutzerdefinierte Methode, die jede Übereinstimmung überprüft und entweder die ursprüngliche entsprechende Zeichenfolge oder eine Ersatzzeichenfolge zurückgibt.</param>
      <returns>Eine neue, mit der Eingabezeichenfolge identische Zeichenfolge. Eine Ersetzungszeichenfolge ersetzt jedoch alle übereinstimmenden Zeichenfolgen. Wenn für <paramref name="pattern" /> keine Übereinstimmung in der aktuellen Instanz gefunden wird, gibt die Methode die aktuelle Instanz unverändert zurück.</returns>
      <exception cref="T:System.ArgumentException">Ein Analysefehler für reguläre Ausdrücke ist aufgetreten.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="pattern" /> oder <paramref name="evaluator" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten. Weitere Informationen zu Timeouts finden Sie im Abschnitt „Hinweise“.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)">
      <summary>Ersetzt in einer angegebenen Eingabezeichenfolge alle mit einem angegebenen regulären Ausdruck übereinstimmenden Zeichenfolgen durch eine von einem <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />-Delegaten zurückgegebene Zeichenfolge. Durch angegebene Optionen wird die Suche nach Übereinstimmungen geändert.</summary>
      <param name="input">Die nach einer Übereinstimmung zu durchsuchende Zeichenfolge.</param>
      <param name="pattern">Das Muster eines regulären Ausdrucks, mit dem Übereinstimmungen gefunden werden sollen.</param>
      <param name="evaluator">Eine benutzerdefinierte Methode, die jede Übereinstimmung überprüft und entweder die ursprüngliche entsprechende Zeichenfolge oder eine Ersatzzeichenfolge zurückgibt.</param>
      <param name="options">Eine bitweise Kombination der Enumerationswerte, die Optionen für Vergleiche angeben.</param>
      <returns>Eine neue, mit der Eingabezeichenfolge identische Zeichenfolge. Eine Ersetzungszeichenfolge ersetzt jedoch alle übereinstimmenden Zeichenfolgen. Wenn für <paramref name="pattern" /> keine Übereinstimmung in der aktuellen Instanz gefunden wird, gibt die Methode die aktuelle Instanz unverändert zurück.</returns>
      <exception cref="T:System.ArgumentException">Ein Analysefehler für reguläre Ausdrücke ist aufgetreten.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="pattern" /> oder <paramref name="evaluator" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> ist keine gültige bitweise Kombination von <see cref="T:System.Text.RegularExpressions.RegexOptions" />-Werten.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten. Weitere Informationen zu Timeouts finden Sie im Abschnitt „Hinweise“.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Ersetzt in einer angegebenen Eingabezeichenfolge alle mit einem angegebenen regulären Ausdruck übereinstimmenden Teilzeichenfolgen durch eine von einem <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />-Delegaten zurückgegebene Zeichenfolge. Zusätzliche Parameter geben die Optionen an, die den entsprechenden Vorgang und ein Timeoutintervall ändern, wenn keine Übereinstimmung gefunden wird.</summary>
      <param name="input">Die nach einer Übereinstimmung zu durchsuchende Zeichenfolge.</param>
      <param name="pattern">Das Muster eines regulären Ausdrucks, mit dem Übereinstimmungen gefunden werden sollen.</param>
      <param name="evaluator">Eine benutzerdefinierte Methode, die jede Übereinstimmung überprüft und entweder die ursprüngliche entsprechende Zeichenfolge oder eine Ersatzzeichenfolge zurückgibt.</param>
      <param name="options">Eine bitweise Kombination von Enumerationswerten, die Optionen für Vergleiche angeben.</param>
      <param name="matchTimeout">Ein Timeoutintervall oder <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, das angibt, dass die Methode kein Timeout haben sollte.</param>
      <returns>Eine neue, mit der Eingabezeichenfolge identische Zeichenfolge. Die Ersetzungszeichenfolge ersetzt jedoch alle übereinstimmenden Zeichenfolgen. Wenn für <paramref name="pattern" /> keine Übereinstimmung in der aktuellen Instanz gefunden wird, gibt die Methode die aktuelle Instanz unverändert zurück.</returns>
      <exception cref="T:System.ArgumentException">Ein Analysefehler für reguläre Ausdrücke ist aufgetreten.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="pattern" /> oder <paramref name="evaluator" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> ist keine gültige bitweise Kombination von <see cref="T:System.Text.RegularExpressions.RegexOptions" /> -Werten.  

oder - 
<paramref name="matchTimeout" /> ist negativ, null oder größer als ca. 24 Tage.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten. Weitere Informationen zu Timeouts finden Sie im Abschnitt „Hinweise“.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>Ersetzt in einer angegebenen Eingabezeichenfolge alle mit einem angegebenen regulären Ausdruck übereinstimmenden Zeichenfolgen durch eine von einem <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />-Delegaten zurückgegebene Zeichenfolge.</summary>
      <param name="input">Die nach einer Übereinstimmung zu durchsuchende Zeichenfolge.</param>
      <param name="evaluator">Eine benutzerdefinierte Methode, die jede Übereinstimmung überprüft und entweder die ursprüngliche entsprechende Zeichenfolge oder eine Ersatzzeichenfolge zurückgibt.</param>
      <returns>Eine neue, mit der Eingabezeichenfolge identische Zeichenfolge. Eine Ersetzungszeichenfolge ersetzt jedoch alle übereinstimmenden Zeichenfolgen. Wenn keine Entsprechung für das reguläre Ausdrucksmuster in der aktuellen Instanz gefunden wird, gibt die Methode die aktuelle Instanz unverändert zurück.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> oder <paramref name="evaluator" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten. Weitere Informationen zu Timeouts finden Sie im Abschnitt „Hinweise“.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)">
      <summary>Ersetzt in einer angegebenen Eingabezeichenfolge eine angegebene Höchstanzahl von Zeichenfolgen, die mit dem Muster eines regulären Ausdrucks übereinstimmen, durch eine von einem <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />-Delegaten zurückgegebene Zeichenfolge.</summary>
      <param name="input">Die nach einer Übereinstimmung zu durchsuchende Zeichenfolge.</param>
      <param name="evaluator">Eine benutzerdefinierte Methode, die jede Übereinstimmung überprüft und entweder die ursprüngliche entsprechende Zeichenfolge oder eine Ersatzzeichenfolge zurückgibt.</param>
      <param name="count">Die maximale Anzahl der Ersetzungen.</param>
      <returns>Eine neue, mit der Eingabezeichenfolge identische Zeichenfolge. Eine Ersetzungszeichenfolge ersetzt jedoch alle übereinstimmenden Zeichenfolgen. Wenn keine Entsprechung für das reguläre Ausdrucksmuster in der aktuellen Instanz gefunden wird, gibt die Methode die aktuelle Instanz unverändert zurück.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> oder <paramref name="evaluator" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten. Weitere Informationen zu Timeouts finden Sie im Abschnitt „Hinweise“.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)">
      <summary>Ersetzt in einer angegebenen Eingabeteilzeichenfolge eine angegebene Höchstanzahl von Zeichenfolgen, die mit dem Muster eines regulären Ausdrucks übereinstimmen, durch eine von einem <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />-Delegaten zurückgegebene Zeichenfolge.</summary>
      <param name="input">Die nach einer Übereinstimmung zu durchsuchende Zeichenfolge.</param>
      <param name="evaluator">Eine benutzerdefinierte Methode, die jede Übereinstimmung überprüft und entweder die ursprüngliche entsprechende Zeichenfolge oder eine Ersatzzeichenfolge zurückgibt.</param>
      <param name="count">Die maximale Anzahl der Ersetzungen.</param>
      <param name="startat">Die Zeichenposition in der Eingabezeichenfolge, an der mit der Suche begonnen wird.</param>
      <returns>Eine neue, mit der Eingabezeichenfolge identische Zeichenfolge. Eine Ersetzungszeichenfolge ersetzt jedoch alle übereinstimmenden Zeichenfolgen. Wenn keine Entsprechung für das reguläre Ausdrucksmuster in der aktuellen Instanz gefunden wird, gibt die Methode die aktuelle Instanz unverändert zurück.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> oder <paramref name="evaluator" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> ist kleiner als 0 (null) oder größer als die Länge von <paramref name="input" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten. Weitere Informationen zu Timeouts finden Sie im Abschnitt „Hinweise“.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.RightToLeft">
      <summary>Ruft einen Wert ab, der angibt, ob der reguläre Ausdruck von rechts nach links sucht.</summary>
      <returns>
        <see langword="true" />, wenn der reguläre Ausdruck von rechts nach links sucht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.roptions">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String)">
      <summary>Teilt die angegebene Eingabezeichenfolge an den Positionen in ein Array von Teilzeichenfolgen auf, die durch ein im <see cref="T:System.Text.RegularExpressions.Regex" />-Konstruktor angegebenes Muster für einen regulären Ausdruck definiert werden.</summary>
      <param name="input">Die aufzuteilende Zeichenfolge.</param>
      <returns>Ein Array von Zeichenfolgen.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten. Weitere Informationen zu Timeouts finden Sie im Abschnitt „Hinweise“.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)">
      <summary>Teilt die angegebene Eingabezeichenfolge höchstens die angegebene Anzahl von Malen an den Positionen in ein Array von Teilzeichenfolgenketten auf, die durch einen im <see cref="T:System.Text.RegularExpressions.Regex" />-Konstruktor angegebenen regulären Ausdruck definiert werden.</summary>
      <param name="input">Die aufzuteilende Zeichenfolge.</param>
      <param name="count">Die maximale Anzahl der Teilungen.</param>
      <returns>Ein Array von Zeichenfolgen.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten. Weitere Informationen zu Timeouts finden Sie im Abschnitt „Hinweise“.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)">
      <summary>Teilt die angegebene Eingabezeichenfolge höchstens die angegebene Anzahl von Malen an den Positionen in ein Array von Teilzeichenfolgenketten auf, die durch einen im <see cref="T:System.Text.RegularExpressions.Regex" />-Konstruktor angegebenen regulären Ausdruck definiert werden. Die Suche nach dem Muster des regulären Ausdrucks beginnt bei einer angegebenen Zeichenposition in der Eingabezeichenfolge.</summary>
      <param name="input">Die aufzuteilende Zeichenfolge.</param>
      <param name="count">Die maximale Anzahl der Teilungen.</param>
      <param name="startat">Die Zeichenposition in der Eingabezeichenfolge, an der mit der Suche begonnen wird.</param>
      <returns>Ein Array von Zeichenfolgen.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> ist kleiner als 0 (null) oder größer als die Länge von <paramref name="input" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten. Weitere Informationen zu Timeouts finden Sie im Abschnitt „Hinweise“.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)">
      <summary>Teilt eine Eingabezeichenfolge an den durch ein reguläres Ausdrucksmuster definierten Positionen in ein Array von Teilzeichenfolgen auf.</summary>
      <param name="input">Die aufzuteilende Zeichenfolge.</param>
      <param name="pattern">Das Muster eines regulären Ausdrucks, mit dem Übereinstimmungen gefunden werden sollen.</param>
      <returns>Ein Array von Zeichenfolgen.</returns>
      <exception cref="T:System.ArgumentException">Ein Analysefehler für reguläre Ausdrücke ist aufgetreten.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> oder <paramref name="pattern" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten. Weitere Informationen zu Timeouts finden Sie im Abschnitt „Hinweise“.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Teilt eine Eingabezeichenfolge an den durch ein angegebenes reguläres Ausdrucksmuster definierten Positionen in ein Array von Teilzeichenfolgen auf. Durch angegebene Optionen wird die Suche nach Übereinstimmungen geändert.</summary>
      <param name="input">Die aufzuteilende Zeichenfolge.</param>
      <param name="pattern">Das Muster eines regulären Ausdrucks, mit dem Übereinstimmungen gefunden werden sollen.</param>
      <param name="options">Eine bitweise Kombination der Enumerationswerte, die Optionen für Vergleiche angeben.</param>
      <returns>Ein Array von Zeichenfolgen.</returns>
      <exception cref="T:System.ArgumentException">Ein Analysefehler für reguläre Ausdrücke ist aufgetreten.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> oder <paramref name="pattern" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> ist keine gültige bitweise Kombination von <see cref="T:System.Text.RegularExpressions.RegexOptions" />-Werten.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten. Weitere Informationen zu Timeouts finden Sie im Abschnitt „Hinweise“.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Teilt eine Eingabezeichenfolge an den durch ein angegebenes reguläres Ausdrucksmuster definierten Positionen in ein Array von Teilzeichenfolgen auf. Zusätzliche Parameter geben die Optionen an, die den entsprechenden Vorgang und ein Timeoutintervall ändern, wenn keine Übereinstimmung gefunden wird.</summary>
      <param name="input">Die aufzuteilende Zeichenfolge.</param>
      <param name="pattern">Das Muster eines regulären Ausdrucks, mit dem Übereinstimmungen gefunden werden sollen.</param>
      <param name="options">Eine bitweise Kombination der Enumerationswerte, die Optionen für Vergleiche angeben.</param>
      <param name="matchTimeout">Ein Timeoutintervall oder <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, das angibt, dass die Methode kein Timeout haben sollte.</param>
      <returns>Ein Zeichenfolgenarray.</returns>
      <exception cref="T:System.ArgumentException">Ein Analysefehler für reguläre Ausdrücke ist aufgetreten.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> oder <paramref name="pattern" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> ist keine gültige bitweise Kombination von <see cref="T:System.Text.RegularExpressions.RegexOptions" />-Werten.  

oder - 
<paramref name="matchTimeout" /> ist negativ, null oder größer als ca. 24 Tage.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Es ist ein Timeout aufgetreten. Weitere Informationen zu Timeouts finden Sie im Abschnitt „Hinweise“.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Füllt ein <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Objekt mit den Daten, die erforderlich sind, um das aktuelle <see cref="T:System.Text.RegularExpressions.Regex" />-Objekt zu deserialisieren.</summary>
      <param name="si">Das Objekt, das mit Serialisierungsinformationen aufgefüllt werden soll.</param>
      <param name="context">Der Ort zum Speichern und Abrufen von serialisierten Daten. Dieser Parameter ist für die zukünftige Verwendung reserviert.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.ToString">
      <summary>Gibt das Muster eines regulären Ausdrucks zurück, das an den <see langword="Regex" />-Konstruktor übergeben wurde.</summary>
      <returns>Der an den <paramref name="pattern" />-Konstruktor übergebene <see langword="Regex" />-Parameter.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Unescape(System.String)">
      <summary>Konvertiert alle Escapezeichen in der Eingabezeichenfolge.</summary>
      <param name="str">Die Eingabezeichenfolge mit dem zu konvertierenden Text.</param>
      <returns>Eine Zeichenfolge, in der alle Escapezeichen in die entsprechende Form ohne Escapezeichen konvertiert wurden.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="str" /> schließt eine nicht erkannte Escapesequenz ein.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.UseOptionC">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
      <returns>
        <see langword="true" />, wenn die <see cref="P:System.Text.RegularExpressions.Regex.Options" />-Eigenschaft die <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" />-Option enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.UseOptionR">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
      <returns>
        <see langword="true" />, wenn die <see cref="P:System.Text.RegularExpressions.Regex.Options" />-Eigenschaft die <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" />-Option enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.ValidateMatchTimeout(System.TimeSpan)">
      <summary>Überprüft, ob ein Timeoutintervall innerhalb eines akzeptablen Bereichs liegt.</summary>
      <param name="matchTimeout">Das zu überprüfende Timeoutintervall.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Das angegebene Timeout liegt nicht in einem gültigen Bereich.</exception>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexCompilationInfo">
      <summary>Stellt die Informationen zu einem regulären Ausdruck bereit, die zum Kompilieren eines regulären Ausdrucks zu einer eigenständigen Assembly verwendet werden.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" />-Klasse, die Informationen zu einem regulären Ausdruck enthält, der in eine Assembly eingeschlossen werden soll.</summary>
      <param name="pattern">Der reguläre Ausdruck, der kompiliert werden soll.</param>
      <param name="options">Die bei der Kompilierung des regulären Ausdrucks zu verwendenden Optionen für reguläre Ausdrücke.</param>
      <param name="name">Der Name des Typs, der den kompilierten regulären Ausdruck darstellt.</param>
      <param name="fullnamespace">Der Namespace, zu dem der neue Typ gehört.</param>
      <param name="ispublic">
        <see langword="true" />, um den kompilierten regulären Ausdruck öffentlich sichtbar zu machen, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> ist <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> ist <see langword="null" />.  

oder - 
<paramref name="name" /> ist <see langword="null" />.  

oder - 
<paramref name="fullnamespace" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" />-Klasse, die Informationen zu einem regulären Ausdruck mit einem angegebenen Timeoutwert enthält, der in eine Assembly eingeschlossen werden soll.</summary>
      <param name="pattern">Der reguläre Ausdruck, der kompiliert werden soll.</param>
      <param name="options">Die bei der Kompilierung des regulären Ausdrucks zu verwendenden Optionen für reguläre Ausdrücke.</param>
      <param name="name">Der Name des Typs, der den kompilierten regulären Ausdruck darstellt.</param>
      <param name="fullnamespace">Der Namespace, zu dem der neue Typ gehört.</param>
      <param name="ispublic">
        <see langword="true" />, um den kompilierten regulären Ausdruck öffentlich sichtbar zu machen, andernfalls <see langword="false" />.</param>
      <param name="matchTimeout">Das standardmäßige Timeoutintervall für den regulären Ausdruck.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> ist <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> ist <see langword="null" />.  

oder - 
<paramref name="name" /> ist <see langword="null" />.  

oder - 
<paramref name="fullnamespace" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="matchTimeout" /> ist negativ, null oder größer als ca. 24 Tage.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic">
      <summary>Ruft einen Wert ab, der angibt, ob der kompilierte reguläre Ausdruck öffentlich sichtbar ist, oder legt diesen fest.</summary>
      <returns>
        <see langword="true" />, wenn der reguläre Ausdruck öffentlich sichtbar ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout">
      <summary>Ruft das das standardmäßige Timeoutintervall für reguläre Ausdrücke ab oder legt dieses fest.</summary>
      <returns>Das standardmäßige maximale Zeitintervall, das in einem Mustervergleichsvorgang verstreichen kann, bevor eine <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" />-Ausnahme ausgelöst wird, oder <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, wenn Timeouts deaktiviert sind.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Name">
      <summary>Ruft den Namen des Typs ab, der den kompilierten regulären Ausdruck darstellt, oder legt diesen fest.</summary>
      <returns>Der Name des neuen Typs.</returns>
      <exception cref="T:System.ArgumentNullException">Der Wert für diese Eigenschaft ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Der Wert für diese Eigenschaft ist eine leere Zeichenfolge.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Namespace">
      <summary>Ruft den Namespace ab, zu dem der neue Typ gehört, oder legt diesen fest.</summary>
      <returns>Der Namespace des neuen Typs.</returns>
      <exception cref="T:System.ArgumentNullException">Der Wert für diese Eigenschaft ist <see langword="null" />.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Options">
      <summary>Ruft die beim Kompilieren des regulären Ausdrucks zu verwendenden Optionen ab oder legt diese fest.</summary>
      <returns>Eine bitweise Kombination der Enumerationswerte.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Pattern">
      <summary>Ruft den zu kompilierenden regulären Ausdruck ab oder legt diesen fest.</summary>
      <returns>Der reguläre Ausdruck, der kompiliert werden soll.</returns>
      <exception cref="T:System.ArgumentNullException">Der Wert für diese Eigenschaft ist <see langword="null" />.</exception>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
      <summary>Die Ausnahme, die ausgelöst wird, wenn die Ausführungszeit eines Mustervergleichs für einen regulären Ausdruck das Timeoutintervall überschreitet.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" />-Klasse mit einer vom System bereitgestellten Meldung.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" />-Klasse mit serialisierten Daten.</summary>
      <param name="info">Das Objekt, das die serialisierten Daten enthält.</param>
      <param name="context">Der Stream, der die serialisierten Daten enthält.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" />-Klasse mit der angegebenen Meldungszeichenfolge.</summary>
      <param name="message">Eine Zeichenfolge, die die Ausnahme beschreibt.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" />-Klasse mit einer angegebenen Fehlermeldung und einem Verweis auf die innere Ausnahme, die diese Ausnahme ausgelöst hat.</summary>
      <param name="message">Eine Zeichenfolge, die die Ausnahme beschreibt.</param>
      <param name="inner">Die Ausnahme, die die Ursache der aktuellen Ausnahme ist.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.String,System.TimeSpan)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" />-Klasse mit Informationen über das Muster eines regulären Ausdrucks, den Eingabetext und das Timeoutintervall.</summary>
      <param name="regexInput">Der Eingabetext, der durch die Engine für reguläre Ausdrücke verarbeitet wurde, als das Timeout auftrat.</param>
      <param name="regexPattern">Das Muster, das von der Engine für reguläre Ausdrücke verwendet wurde, als das Timeout auftrat.</param>
      <param name="matchTimeout">Das Timeoutintervall.</param>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Input">
      <summary>Ruft den Eingabetext ab, den die Engine für reguläre Ausdrücke verarbeitet hat, als der Timeout aufgetreten ist.</summary>
      <returns>Der Eingabetext für den regulären Ausdruck.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout">
      <summary>Ruft das Timeoutintervall für eine Übereinstimmung für einen regulären Ausdruck ab.</summary>
      <returns>Das Timeoutintervall.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Pattern">
      <summary>Ruft das Muster eines regulären Ausdrucks ab, das im entsprechenden Vorgang verwendet wurde, als das Timeout auftrat.</summary>
      <returns>Das Muster des regulären Ausdrucks.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Füllt ein <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Objekt mit den Daten, die zum Serialisieren eines <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" />-Objekts erforderlich sind.</summary>
      <param name="si">Das mit Daten zu füllende Objekt.</param>
      <param name="context">Das Ziel dieser Serialisierung.</param>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexOptions">
      <summary>Stellt Enumerationswerte bereit, mit deren Hilfe Optionen für reguläre Ausdrücke festgelegt werden können.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Compiled">
      <summary>Gibt an, dass der reguläre Ausdruck in eine Assembly kompiliert wird. Dies beschleunigt zwar die Ausführung, verlängert jedoch die Ladezeit. Dieser Wert sollte der <see cref="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" />-Eigenschaft nicht zugewiesen werden, wenn die <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />-Methode aufgerufen wird. Weitere Informationen finden Sie im Thema Optionen für reguläre Ausdrücke im Abschnitt „Kompilierte reguläre Ausdrücke“.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.CultureInvariant">
      <summary>Gibt an, dass Unterschiede der Kultur bei der Sprache ignoriert werden. Weitere Informationen finden Sie im Thema Optionen für reguläre Ausdrücke im Abschnitt „Vergleiche mit der invarianten Kultur“.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ECMAScript">
      <summary>Aktiviert ECMAScript-kompatibles Verhalten für den Ausdruck. Dieser Wert kann nur in Verbindung mit den Werten <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase" />, <see cref="F:System.Text.RegularExpressions.RegexOptions.Multiline" /> und <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> verwendet werden. Bei Verwendung dieses Werts mit allen anderen Werten wird eine Ausnahme ausgelöst.  
Weitere Informationen zur <see cref="F:System.Text.RegularExpressions.RegexOptions.ECMAScript" />-Option finden Sie im Thema Optionen für reguläre Ausdrücke im Abschnitt „ECMAScript-Vergleichsverhalten“.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ExplicitCapture">
      <summary>Gibt an, dass die einzigen gültigen Erfassungen ausdrücklich benannte oder nummerierte Gruppen in der Form (?&lt;name&gt;...) sind. Dadurch können unbenannte Klammern wie Nicht-Erfassungsgruppen eingesetzt werden, ohne die komplexe Syntax des Ausdrucks (?:...) zu verwenden. Weitere Informationen finden Sie im Thema Optionen für reguläre Ausdrücke im Abschnitt „Nur explizite Erfassungen“.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase">
      <summary>Gibt an, dass bei Übereinstimmungen die Groß- und Kleinschreibung berücksichtigt werden soll. Weitere Informationen finden Sie im Thema Optionen für reguläre Ausdrücke im Abschnitt „Übereinstimmung ohne Berücksichtigung der Groß-/Kleinschreibung“.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace">
      <summary>Entfernt Leerraum ohne Escapezeichen aus dem Muster und aktiviert die mit # markierten Kommentare. Dieser Wert beeinflusst oder entfernt jedoch keinen Leerraum in Zeichenklassen, numerischen Quantifizierern oder Token, die den Anfang von einzelnen Sprachenelementen für reguläre Ausdrücke markieren. Weitere Informationen finden Sie im Thema Optionen für reguläre Ausdrücke im Abschnitt „Leerstellen ignorieren“.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Multiline">
      <summary>Mehrzeilenmodus. Ändert die Bedeutung von ^ und $, sodass sie jeweils dem Anfang und Ende einer beliebigen Zeile und nicht nur dem Anfang und Ende der gesamten Zeichenfolge entsprechen. Weitere Informationen finden Sie im Thema Optionen für reguläre Ausdrücke im Abschnitt „Mehrzeilenmodus“.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.None">
      <summary>Gibt an, dass keine Optionen festgelegt wurden. Weitere Informationen zum Standardverhalten der Engine für reguläre Ausdrücke finden Sie im Thema Optionen für reguläre Ausdrücke im Abschnitt „Standardoptionen“.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.RightToLeft">
      <summary>Gibt an, dass die Suche von rechts nach links und nicht von links nach rechts durchgeführt wird. Weitere Informationen finden Sie im Thema Optionen für reguläre Ausdrücke im Abschnitt „Modus ‚von rechts nach links‘“.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Singleline">
      <summary>Gibt den Einzeilenmodus an. Ändert die Bedeutung des Punkts (.), sodass dieser jedem Zeichen entspricht (und nicht jedem Zeichen mit Ausnahme von \n). Weitere Informationen finden Sie im Thema Optionen für reguläre Ausdrücke im Abschnitt „Einzeilenmodus“.</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexRunner">
      <summary>Die <see cref="T:System.Text.RegularExpressions.RegexRunner" />-Klasse ist die Basisklasse für kompilierte reguläre Ausdrücke.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.RegularExpressions.RegexRunner" />-Klasse.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Capture(System.Int32,System.Int32,System.Int32)">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
      <param name="capnum">Eine Erfassungszahl.</param>
      <param name="start">Die Anfangsposition der Erfassung.</param>
      <param name="end">Die Endposition der Erfassung.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CharInClass(System.Char,System.String)">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet. Bestimmt, ob ein Zeichen in einer Zeichenklasse enthalten ist.</summary>
      <param name="ch">Ein zu überprüfendes Zeichen.</param>
      <param name="charClass">Der interne Name einer Zeichenklasse.</param>
      <returns>
        <see langword="true" />, wenn der <paramref name="ch" />-Parameter in der vom <paramref name="charClass" />-Parameter angegebenen Zeichenklasse enthalten ist.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CharInSet(System.Char,System.String,System.String)">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
      <param name="ch">Ein Zeichen.</param>
      <param name="set">Der Zeichensatz.</param>
      <param name="category">Die Zeichenkategorie.</param>
      <returns>Gibt <see cref="T:System.Boolean" /> zurück.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CheckTimeout">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Crawl(System.Int32)">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
      <param name="i">Eine zu speichernde Zahl.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Crawlpos">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
      <returns>Gibt <see cref="T:System.Int32" /> zurück.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleCrawl">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" /> -Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> -Objekt verwendet.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleStack">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleTrack">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.EnsureStorage">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.FindFirstChar">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
      <returns>Gibt <see cref="T:System.Boolean" /> zurück.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Go">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" /> -Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> -Objekt verwendet.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.InitTrackCount">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsBoundary(System.Int32,System.Int32,System.Int32)">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
      <param name="index">Die mögliche Begrenzungsposition.</param>
      <param name="startpos">Die Anfangsposition.</param>
      <param name="endpos">Die Endposition.</param>
      <returns>Gibt <see cref="T:System.Boolean" /> zurück.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsECMABoundary(System.Int32,System.Int32,System.Int32)">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
      <param name="index">Die mögliche ECMA-Begrenzungsposition.</param>
      <param name="startpos">Die Anfangsposition.</param>
      <param name="endpos">Die Endposition.</param>
      <returns>Gibt <see cref="T:System.Boolean" /> zurück.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsMatched(System.Int32)">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
      <param name="cap">Die Erfassungszahl.</param>
      <returns>Gibt <see cref="T:System.Boolean" /> zurück.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.MatchIndex(System.Int32)">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
      <param name="cap">Die Erfassungszahl.</param>
      <returns>Gibt <see cref="T:System.Int32" /> zurück.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.MatchLength(System.Int32)">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
      <param name="cap">Die Erfassungszahl.</param>
      <returns>Gibt <see cref="T:System.Int32" /> zurück.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Popcrawl">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
      <returns>Gibt <see cref="T:System.Int32" /> zurück.</returns>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runcrawl">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" /> -Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> -Objekt verwendet.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runcrawlpos">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runmatch">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runregex">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runstack">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runstackpos">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtext">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextbeg">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextend">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextpos">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextstart">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrack">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrackcount">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrackpos">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Scan(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
      <param name="regex">Eine Instanz der Engine für reguläre Ausdrücke.</param>
      <param name="text">Der auf eine Musterübereinstimmung zu überprüfende Text.</param>
      <param name="textbeg">Die nullbasierte Anfangsposition in <paramref name="text" />, an der die Engine für reguläre Ausdrücke überprüft, ob eine Übereinstimmung vorliegt.</param>
      <param name="textend">Die nullbasierte Endposition in <paramref name="text" />, an der die Engine für reguläre Ausdrücke überprüft, ob eine Übereinstimmung vorliegt.</param>
      <param name="textstart">Die nullbasierte Anfangsposition, an der überprüft wird, ob diese Übereinstimmung vorliegt.</param>
      <param name="prevlen">Die Anzahl der Zeichen in der vorherigen Übereinstimmung.</param>
      <param name="quick">
        <see langword="true" /> für die Suche nach einer Übereinstimmung im Schnellmodus; andernfalls <see langword="false" />.</param>
      <returns>Eine Übereinstimmung.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Scan(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.TimeSpan)">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
      <param name="regex">Eine Instanz der Engine für reguläre Ausdrücke.</param>
      <param name="text">Der auf eine Musterübereinstimmung zu überprüfende Text.</param>
      <param name="textbeg">Die nullbasierte Anfangsposition in <paramref name="text" />, an der die Engine für reguläre Ausdrücke überprüft, ob eine Übereinstimmung vorliegt.</param>
      <param name="textend">Die nullbasierte Endposition in <paramref name="text" />, an der die Engine für reguläre Ausdrücke überprüft, ob eine Übereinstimmung vorliegt.</param>
      <param name="textstart">Die nullbasierte Anfangsposition, an der überprüft wird, ob diese Übereinstimmung vorliegt.</param>
      <param name="prevlen">Die Anzahl der Zeichen in der vorherigen Übereinstimmung.</param>
      <param name="quick">
        <see langword="true" /> für die Suche nach einer Übereinstimmung im Schnellmodus; andernfalls <see langword="false" />.</param>
      <param name="timeout">Das Timeoutintervall.</param>
      <returns>Eine Übereinstimmung.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.TransferCapture(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
      <param name="capnum">Eine Erfassungszahl.</param>
      <param name="uncapnum">Eine gespeicherte Erfassungszahl.</param>
      <param name="start">Die Anfangsposition.</param>
      <param name="end">Die Endposition.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Uncapture">
      <summary>Wird von einem durch die <see cref="T:System.Text.RegularExpressions.Regex" />-Methode generierten <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />-Objekt verwendet.</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexRunnerFactory">
      <summary>Erstellt eine <see cref="T:System.Text.RegularExpressions.RegexRunner" />-Klasse für einen kompilierten regulären Ausdruck.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunnerFactory.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.RegularExpressions.RegexRunnerFactory" />-Klasse.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunnerFactory.CreateInstance">
      <summary>Erstellt beim Überschreiben in einer abgeleiteten Klasse ein <see cref="T:System.Text.RegularExpressions.RegexRunner" />-Objekt für einen bestimmten kompilierten regulären Ausdruck.</summary>
      <returns>Ein <see cref="T:System.Text.RegularExpressions.RegexRunner" />-Objekt, das zum Ausführen eines bestimmten kompilierten regulären Ausdrucks vorgesehen ist.</returns>
    </member>
  </members>
</doc>
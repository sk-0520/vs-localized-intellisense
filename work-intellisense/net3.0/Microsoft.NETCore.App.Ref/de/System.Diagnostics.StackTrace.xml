<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Diagnostics.StackTrace</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.StackFrame">
      <summary>Stellt Informationen zu einem <see cref="T:System.Diagnostics.StackFrame" /> bereit, der einen Funktionsaufruf in der Aufrufliste für den aktuellen Thread darstellt.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackFrame" />-Klasse.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Boolean)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackFrame" />-Klasse und zeichnet optional Quellinformationen auf.</summary>
      <param name="fNeedFileInfo">
        <see langword="true" />, wenn Dateiname, Zeilennummer und Spaltennummer des Stapelrahmens aufgezeichnet werden sollen, andernfalls <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackFrame" />-Klasse, die einem Rahmen über dem aktuellen Stapelrahmen entspricht.</summary>
      <param name="skipFrames">Die Anzahl der zu überspringenden Stapelrahmen.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32,System.Boolean)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackFrame" />-Klasse, die einem Rahmen über dem aktuellen Stapelrahmen entspricht, und zeichnet optional Quellinformationen auf.</summary>
      <param name="skipFrames">Die Anzahl der zu überspringenden Stapelrahmen.</param>
      <param name="fNeedFileInfo">
        <see langword="true" />, wenn Dateiname, Zeilennummer und Spaltennummer des Stapelrahmens aufgezeichnet werden sollen, andernfalls <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackFrame" />-Klasse, die nur den angegebenen Dateinamen und die angegebene Zeilennummer enthält.</summary>
      <param name="fileName">Der Dateiname.</param>
      <param name="lineNumber">Die Zeilennummer in der angegebenen Datei.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32,System.Int32)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackFrame" />-Klasse, die nur den angegebenen Dateinamen, die angegebene Zeilennummer und die angegebene Spaltennummer enthält.</summary>
      <param name="fileName">Der Dateiname.</param>
      <param name="lineNumber">Die Zeilennummer in der angegebenen Datei.</param>
      <param name="colNumber">Die Spaltennummer in der angegebenen Datei.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileColumnNumber">
      <summary>Ruft die Spaltennummer in der Datei mit dem ausgeführten Code ab. Diese Informationen werden i. d. R. aus den Debugsymbolen für das ausführbare Programm extrahiert.</summary>
      <returns>Die Dateispaltennummer oder 0 (null), wenn die Dateispaltennummer nicht bestimmt werden kann.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileLineNumber">
      <summary>Ruft die Zeilennummer in der Datei mit dem ausgeführten Code ab. Diese Informationen werden i. d. R. aus den Debugsymbolen für das ausführbare Programm extrahiert.</summary>
      <returns>Die Dateizeilennummer oder 0 (null), wenn die Dateizeilennummer nicht bestimmt werden kann.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileName">
      <summary>Ruft den Dateinamen mit dem ausgeführten Code ab. Diese Informationen werden i. d. R. aus den Debugsymbolen für das ausführbare Programm extrahiert.</summary>
      <returns>Der Dateiname oder <see langword="null" />, wenn der Dateiname nicht bestimmt werden kann.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetILOffset">
      <summary>Ruft den Offset vom Beginn des MSIL-Codes (Microsoft Intermediate Language) für die ausgeführte Methode ab. Dabei kann es sich um einen Näherungswert handeln. Das hängt davon ab, ob der JIT-Compiler (Just-In-Time) den Debuggingcode erzeugt. Die Generierung dieser Debuginformation wird vom <see cref="T:System.Diagnostics.DebuggableAttribute" /> kontrolliert.</summary>
      <returns>Der Offset vom Beginn des MSIL-Codes für die ausgeführte Methode.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetMethod">
      <summary>Ruft die Methode ab, in der der Rahmen ausgeführt wird.</summary>
      <returns>Die Methode, in der der Rahmen ausgeführt wird.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetNativeOffset">
      <summary>Ruft den Offset vom Beginn des programmeigenen JIT (Just-In-Time)-kompilierten Codes für die ausgeführte Methode ab. Die Generierung dieser Debuginformation wird von der <see cref="T:System.Diagnostics.DebuggableAttribute" />-Klasse gesteuert.</summary>
      <returns>Der Offset vom Beginn des JIT-kompilierten Codes für die ausgeführte Methode.</returns>
    </member>
    <member name="F:System.Diagnostics.StackFrame.OFFSET_UNKNOWN">
      <summary>Definiert den Wert, der von der <see cref="M:System.Diagnostics.StackFrame.GetNativeOffset" />-Methode oder der <see cref="M:System.Diagnostics.StackFrame.GetILOffset" />-Methode zurückgegeben wird, wenn der Offset in MSIL (Microsoft Intermediate Language) oder der systemeigenen Sprache nicht bekannt ist. Dieses Feld ist konstant.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.ToString">
      <summary>Erstellt eine lesbare Darstellung der Stapelüberwachung.</summary>
      <returns>Eine lesbare Darstellung der Stapelüberwachung.</returns>
    </member>
    <member name="T:System.Diagnostics.StackFrameExtensions">
      <summary>Bietet Erweiterungsmethoden für die Klasse <see cref="T:System.Diagnostics.StackFrame" />, die eine Funktionsaufruf der Aufrufliste für den aktuellen Thread darstellt.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeImageBase(System.Diagnostics.StackFrame)">
      <summary>Gibt einen Zeiger auf die Basisadresse des mit dem nativen Image zurück, das vom Stapelrahmen ausgeführt wird.</summary>
      <param name="stackFrame">Ein Stapelrahmen.</param>
      <returns>Ein Zeiger auf die Basisadresse des nativen Images oder <see cref="F:System.IntPtr.Zero" />, wenn Sie auf das .NET Framework abzielen.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeIP(System.Diagnostics.StackFrame)">
      <summary>Ruft einen Schnittstellenzeiger auf den Anfang des nativen Codes für die Methode ab, die ausgeführt wird.</summary>
      <param name="stackFrame">Ein Stapelrahmen.</param>
      <returns>Ruft einen Schnittstellenzeiger auf den Anfang des nativen Codes für die Methode ab, die ausgeführt wird, oder <see cref="F:System.IntPtr.Zero" />, wenn Sie auf das .NET Framework abzielen.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasILOffset(System.Diagnostics.StackFrame)">
      <summary>Zeigt an, ob ein Offset vom Beginn des IL-Codes für die ausgeführte Methode verfügbar ist.</summary>
      <param name="stackFrame">Ein Stapelrahmen.</param>
      <returns>
        <see langword="true" />, wenn der Offset verfügbar ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasMethod(System.Diagnostics.StackFrame)">
      <summary>Gibt an, ob Informationen über die Methode vorliegen, in der der angegebene Frame ausgeführt wird.</summary>
      <param name="stackFrame">Ein Stapelrahmen.</param>
      <returns>
        <see langword="true" />, wenn Informationen zu der Methode vorliegen, in der der aktuelle Frame ausgeführt wird; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasNativeImage(System.Diagnostics.StackFrame)">
      <summary>Gibt an, ob das native Image für den angegebenen Stapelrahmen verfügbar ist.</summary>
      <param name="stackFrame">Ein Stapelrahmen.</param>
      <returns>
        <see langword="true" />, wenn ein natives Image für diesen Stapelrahmen verfügbar ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasSource(System.Diagnostics.StackFrame)">
      <summary>Gibt an, ob die Datei verfügbar ist, die den Code enthält, den der angegebene Stapelrahmen ausführt.</summary>
      <param name="stackFrame">Ein Stapelrahmen.</param>
      <returns>
        <see langword="true" />, wenn der Code verfügbar ist, den der angegebene Stapelrahmen ausführt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.StackTrace">
      <summary>Stellt eine Stapelüberwachung dar, d. h. eine geordnete Auflistung mindestens eines Stapelrahmens.</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackTrace" />-Klasse aus dem Rahmen des Aufrufers.</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Boolean)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackTrace" />-Klasse aus dem Rahmen des Aufrufers und zeichnet bei Bedarf Quellinformationen auf.</summary>
      <param name="fNeedFileInfo">
        <see langword="true" />, wenn Dateiname, Zeilennummer und Spaltennummer aufgezeichnet werden sollen, andernfalls <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Diagnostics.StackFrame)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackTrace" />-Klasse, die einen einzelnen Rahmen enthält.</summary>
      <param name="frame">Der Rahmen, den das <see cref="T:System.Diagnostics.StackTrace" />-Objekt enthalten soll.</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackTrace" />-Klasse unter Verwendung des bereitgestellten Ausnahmeobjekts.</summary>
      <param name="e">Das Ausnahmeobjekt, von dem aus die Stapelüberwachung erstellt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">Der Parameter <paramref name="e" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackTrace" />-Klasse unter Verwendung des bereitgestellten Ausnahmeobjekts und zeichnet optional Quellinformationen auf.</summary>
      <param name="exception">Das Ausnahmeobjekt, von dem aus die Stapelüberwachung erstellt werden soll.</param>
      <param name="needFileInfo">
        <see langword="true" />, wenn Dateiname, Zeilennummer und Spaltennummer aufgezeichnet werden sollen, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">Der Parameter <paramref name="e" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackTrace" />-Klasse unter Verwendung des bereitgestellten Ausnahmeobjekts, wobei die angegebene Anzahl von Rahmen übersprungen wird.</summary>
      <param name="e">Das Ausnahmeobjekt, von dem aus die Stapelüberwachung erstellt werden soll.</param>
      <param name="skipFrames">Die Anzahl der Stapelrahmen, ab der die Überwachung begonnen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">Der Parameter <paramref name="e" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="skipFrames" />-Parameter ist negativ.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32,System.Boolean)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackTrace" />-Klasse unter Verwendung des bereitgestellten Ausnahmeobjekts. Dabei wird die angegebene Anzahl von Rahmen übersprungen, und Quellinformationen können wahlweise aufgezeichnet werden.</summary>
      <param name="e">Das Ausnahmeobjekt, von dem aus die Stapelüberwachung erstellt werden soll.</param>
      <param name="skipFrames">Die Anzahl der Stapelrahmen, ab der die Überwachung begonnen werden soll.</param>
      <param name="fNeedFileInfo">
        <see langword="true" />, wenn Dateiname, Zeilennummer und Spaltennummer aufgezeichnet werden sollen, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">Der Parameter <paramref name="e" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="skipFrames" />-Parameter ist negativ.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackTrace" />-Klasse aus dem Rahmen des Aufrufers, wobei die angegebene Anzahl von Rahmen übersprungen wird.</summary>
      <param name="skipFrames">Die Anzahl der Stapelrahmen, ab der die Überwachung begonnen werden soll.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="skipFrames" />-Parameter ist negativ.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32,System.Boolean)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackTrace" />-Klasse aus dem Rahmen des Aufrufers. Dabei wird die angegebene Anzahl von Rahmen übersprungen, und Quellinformationen können wahlweise aufgezeichnet werden.</summary>
      <param name="skipFrames">Die Anzahl der Stapelrahmen, ab der die Überwachung begonnen werden soll.</param>
      <param name="fNeedFileInfo">
        <see langword="true" />, wenn Dateiname, Zeilennummer und Spaltennummer aufgezeichnet werden sollen, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="skipFrames" />-Parameter ist negativ.</exception>
    </member>
    <member name="P:System.Diagnostics.StackTrace.FrameCount">
      <summary>Ruft die Anzahl von Rahmen in der Stapelüberwachung ab.</summary>
      <returns>Die Anzahl von Frames in der Stapelüberwachung.</returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrame(System.Int32)">
      <summary>Ruft den angegebenen Stapelrahmen ab.</summary>
      <param name="index">Der Index des angeforderten Stapelrahmens.</param>
      <returns>Der angegebene Stapelrahmen.</returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrames">
      <summary>Gibt eine Kopie aller Stapelrahmen in der aktuellen Stapelüberwachung zurück.</summary>
      <returns>Ein Array vom Typ <see cref="T:System.Diagnostics.StackFrame" />, das die Funktionsaufrufe im Stapelrahmen darstellt.</returns>
    </member>
    <member name="F:System.Diagnostics.StackTrace.METHODS_TO_SKIP">
      <summary>Definiert den Standardwert für die Anzahl von Methoden, die von der Stapelüberwachung ausgeschlossen werden sollen. Dieses Feld ist konstant.</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.ToString">
      <summary>Erstellt eine lesbare Darstellung der Stapelüberwachung.</summary>
      <returns>Eine lesbare Darstellung der Stapelüberwachung.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolBinder">
      <summary>Stellt einen Symbolbinder für verwalteten Code dar.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolBinder.GetReader(System.Int32,System.String,System.String)">
      <summary>Ruft die Schnittstelle des Symbolreaders für die aktuelle Datei ab.</summary>
      <param name="importer">Die Metadatenimport-Schnittstelle.</param>
      <param name="filename">Der Name der Datei, für die die Readerschnittstelle erforderlich ist.</param>
      <param name="searchPath">Der Suchpfad zum Suchen der Symboldatei.</param>
      <returns>Die <see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" />-Schnittstelle, die die Debugsymbole liest.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolBinder1">
      <summary>Stellt einen Symbolbinder für verwalteten Code dar.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolBinder1.GetReader(System.IntPtr,System.String,System.String)">
      <summary>Ruft die Schnittstelle des Symbolreaders für die aktuelle Datei ab.</summary>
      <param name="importer">Ein <see cref="T:System.IntPtr" />, der auf die Schnittstelle für den Metadatenimport verweist.</param>
      <param name="filename">Der Name der Datei, für die die Readerschnittstelle erforderlich ist.</param>
      <param name="searchPath">Der Suchpfad zum Suchen der Symboldatei.</param>
      <returns>Die <see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" />-Schnittstelle, die die Debugsymbole liest.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocument">
      <summary>Stellt ein Dokument dar, auf das von einem Symbolspeicher verwiesen wird.</summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.CheckSumAlgorithmId">
      <summary>Ruft den Bezeichner für den Prüfsummenalgorithmus ab.</summary>
      <returns>Eine GUID zur Kennzeichnung des Prüfsummenalgorithmus. Wenn keine Prüfsumme vorhanden ist, besteht der Wert ausschließlich aus Nullen.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.DocumentType">
      <summary>Ruft den Typ des aktuellen Dokuments ab.</summary>
      <returns>Der Typ des aktuellen Dokuments.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.FindClosestLine(System.Int32)">
      <summary>Gibt die nächste Zeile zurück, die ein Sequenzpunkt ist, wobei eine angegebene Zeile im aktuellen Dokument ein Sequenzpunkt sein kann.</summary>
      <param name="line">Die angegebene Zeile im Dokument.</param>
      <returns>Die nächste Zeile, die ein Sequenzpunkt ist.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.GetCheckSum">
      <summary>Ruft die Prüfsumme ab.</summary>
      <returns>Die Prüfsumme.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.GetSourceRange(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Ruft die Quelle des eingebetteten Dokuments für den angegebenen Bereich ab.</summary>
      <param name="startLine">Die Anfangszeile im aktuellen Dokument.</param>
      <param name="startColumn">Die Anfangsspalte im aktuellen Dokument.</param>
      <param name="endLine">Die Endzeile im aktuellen Dokument.</param>
      <param name="endColumn">Die Endspalte im aktuellen Dokument.</param>
      <returns>Die Quelle des Dokuments für den angegebenen Bereich.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.HasEmbeddedSource">
      <summary>Überprüft, ob das aktuelle Dokument im Symbolspeicher gespeichert ist.</summary>
      <returns>
        <see langword="true" />, wenn das aktuelle Dokument im Symbolspeicher gespeichert ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.Language">
      <summary>Ruft die Sprache des aktuellen Dokuments ab.</summary>
      <returns>Die Sprache des aktuellen Dokuments.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.LanguageVendor">
      <summary>Ruft den Compilerhersteller des aktuellen Dokuments ab.</summary>
      <returns>Der Compilerhersteller des aktuellen Dokuments.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.SourceLength">
      <summary>Ruft die Länge der eingebetteten Quelle in Bytes ab.</summary>
      <returns>Die Länge der Quelle des aktuellen Dokuments.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.URL">
      <summary>Ruft die URL des aktuellen Dokuments ab.</summary>
      <returns>Die URL des aktuellen Dokuments.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocumentWriter">
      <summary>Stellt ein Dokument dar, auf das von einem Symbolspeicher verwiesen wird.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetCheckSum(System.Guid,System.Byte[])">
      <summary>Legt Prüfsummeninformationen fest.</summary>
      <param name="algorithmId">Die GUID, die die Algorithmus-ID darstellt.</param>
      <param name="checkSum">Die Prüfsumme.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetSource(System.Byte[])">
      <summary>Speichert die unformatierte Quelle eines Dokuments im Symbolspeicher.</summary>
      <param name="source">Die Quelle des Dokuments, als Bytes ohne Vorzeichen dargestellt.</param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolMethod">
      <summary>Stellt eine Methode in einem Symbolspeicher dar.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetNamespace">
      <summary>Ruft den Namespace ab, in dem die aktuelle Methode definiert ist.</summary>
      <returns>Der Namespace, in dem die aktuelle Methode definiert ist.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary>Ruft den MSIL-Offset (Microsoft Intermediate Language) innerhalb der Methode ab, der der angegebenen Position entspricht.</summary>
      <param name="document">Das Dokument, für das der Offset angefordert wird.</param>
      <param name="line">Die Dokumentzeile, die dem Offset entspricht.</param>
      <param name="column">Die Dokumentspalte, die dem Offset entspricht.</param>
      <returns>Der Offset im angegebenen Dokument.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetParameters">
      <summary>Ruft die Parameter für die aktuelle Methode ab.</summary>
      <returns>Das Array von Parametern für die aktuelle Methode.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary>Ruft ein Array von Start-/Endoffsetpaaren ab, die den Bereichen der MSIL (Microsoft Intermediate Language) entsprechen, die von einer angegebenen Position innerhalb dieser Methode abgedeckt werden.</summary>
      <param name="document">Das Dokument, für das der Offset angefordert wird.</param>
      <param name="line">Die Dokumentzeile, die den Bereichen entspricht.</param>
      <param name="column">Die Dokumentspalte, die den Bereichen entspricht.</param>
      <returns>Ein Array von Start-/Endoffsetpaaren.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetScope(System.Int32)">
      <summary>Gibt den umfassendsten lexikalischen Gültigkeitsbereich zurück, wenn ein Offset innerhalb einer Methode angegeben ist.</summary>
      <param name="offset">Der Byteoffset innerhalb der Methode des lexikalischen Gültigkeitsbereichs.</param>
      <returns>Der umfassendste lexikalische Gültigkeitsbereich, wenn ein Offset innerhalb einer Methode angegeben ist.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary>Ruft die Sequenzpunkte für die aktuelle Methode ab.</summary>
      <param name="offsets">Das Array von Byteoffsets ab dem Anfang der Methode für die Sequenzpunkte.</param>
      <param name="documents">Das Array von Dokumenten, in denen sich die Sequenzpunkte befinden.</param>
      <param name="lines">Das Array von Zeilen in den Dokumenten, in denen sich die Sequenzpunkte befinden.</param>
      <param name="columns">Das Array von Spalten in den Dokumenten, in denen sich die Sequenzpunkte befinden.</param>
      <param name="endLines">Das Array von Zeilen in den Dokumenten, in denen die Sequenzpunkte enden.</param>
      <param name="endColumns">Das Array von Spalten in den Dokumenten, in denen die Sequenzpunkte enden.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])">
      <summary>Ruft die Anfangs- und Endpositionen für die Quelle der aktuellen Methode ab.</summary>
      <param name="docs">Die Anfangs- und Endquelldokumente.</param>
      <param name="lines">Die Anfangs- und Endzeilen in den entsprechenden Quelldokumenten.</param>
      <param name="columns">Die Anfangs- und Endspalten in den entsprechenden Quelldokumenten.</param>
      <returns>
        <see langword="true" />, wenn die Positionen definiert wurden, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.RootScope">
      <summary>Ruft den lexikalischen Stammgültigkeitsbereich für die aktuelle Methode ab. Dieser Gültigkeitsbereich umfasst die gesamte Methode.</summary>
      <returns>Der lexikalische Stammgültigkeitsbereich schließt die gesamte Methode ein.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount">
      <summary>Ruft die Anzahl der Sequenzpunkte in der Methode ab.</summary>
      <returns>Die Anzahl der Sequenzpunkte in der Methode.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.Token">
      <summary>Ruft das <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> mit den Metadaten für die aktuelle Methode ab.</summary>
      <returns>Das Metadatentoken für die aktuelle Methode.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolNamespace">
      <summary>Stellt einen Namespace in einem Symbolspeicher dar.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolNamespace.GetNamespaces">
      <summary>Ruft die untergeordneten Member des aktuellen Namespaces ab.</summary>
      <returns>Die untergeordneten Member des aktuellen Namespaces.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolNamespace.GetVariables">
      <summary>Ruft alle Variablen ab, die im globalen Gültigkeitsbereich innerhalb des aktuellen Namespaces definiert sind.</summary>
      <returns>Die Variablen, die im globalen Gültigkeitsbereich innerhalb des aktuellen Namespaces definiert sind.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolNamespace.Name">
      <summary>Ruft den aktuellen Namespace ab.</summary>
      <returns>Der aktuelle Namespace.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolReader">
      <summary>Stellt einen Symbolreader für verwalteten Code dar.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>Ruft ein Dokument ab, das durch Sprache, Hersteller und Typ angegeben ist.</summary>
      <param name="url">Die URL, die das Dokument kennzeichnet.</param>
      <param name="language">Die Dokumentsprache. Sie können für diesen Parameter <see cref="F:System.Guid.Empty" /> angeben.</param>
      <param name="languageVendor">Die Identität des Herstellers für die Dokumentsprache. Sie können für diesen Parameter <see cref="F:System.Guid.Empty" /> angeben.</param>
      <param name="documentType">Der Typ des Dokuments. Sie können für diesen Parameter <see cref="F:System.Guid.Empty" /> angeben.</param>
      <returns>Das angegebene Dokument.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetDocuments">
      <summary>Ruft ein Array aller im Symbolspeicher definierten Dokumente ab.</summary>
      <returns>Ein Array aller im Symbolspeicher definierten Dokumente.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetGlobalVariables">
      <summary>Ruft alle globalen Variablen im Modul ab.</summary>
      <returns>Ein Array aller Variablen im Modul.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>Ruft ein Methodenobjekt des Symbolreaders ab, wenn der Bezeichner einer Methode angegeben ist.</summary>
      <param name="method">Das Metadatentoken der Methode.</param>
      <returns>Das Methodenobjekt des Symbolreaders für den angegebenen Methodenbezeichner.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken,System.Int32)">
      <summary>Ruft ein Methodenobjekt des Symbolreaders ab, wenn der Bezeichner einer Methode sowie deren Version für Bearbeiten und Fortfahren angegeben ist.</summary>
      <param name="method">Das Metadatentoken der Methode.</param>
      <param name="version">Die Version für Bearbeiten und Fortfahren der Methode.</param>
      <returns>Das Methodenobjekt des Symbolreaders für den angegebenen Methodenbezeichner.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethodFromDocumentPosition(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary>Ruft das Methodenobjekt des Symbolreaders ab, das eine angegebene Position in einem Dokument enthält.</summary>
      <param name="document">Das Dokument, in dem sich die Methode befindet.</param>
      <param name="line">Die Position der Zeile im Dokument. Die Zeilen sind fortlaufend nummeriert, beginnend mit 1.</param>
      <param name="column">Die Position der Spalte im Dokument. Die Spalten sind fortlaufend nummeriert, beginnend mit 1.</param>
      <returns>Das Methodenobjekt des Symbolreaders für die angegebene Position im Dokument.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetNamespaces">
      <summary>Ruft die Namespaces ab, die im aktuellen Symbolspeicher mit globalem Gültigkeitsbereich definiert sind.</summary>
      <returns>Die Namespaces, die im aktuellen Symbolspeicher mit globalem Gültigkeitsbereich definiert sind.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String)">
      <summary>Ruft einen Attributwert ab, wenn der Attributname angegeben ist.</summary>
      <param name="parent">Das Metadatentoken für das Objekt, für das das Attribut angefordert wird.</param>
      <param name="name">Der Attributname.</param>
      <returns>Der Wert des Attributs.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetVariables(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>Ruft die nicht lokalen Variablen ab, wenn das übergeordnete Element angegeben ist.</summary>
      <param name="parent">Das Metadatentoken für den Typ, für den die Variablen angefordert werden.</param>
      <returns>Ein Array von Variablen für das übergeordnete Element.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolReader.UserEntryPoint">
      <summary>Ruft das Metadatentoken für die Methode ab, die als benutzerdefinierter Einstiegspunkt für das ggf. vorhandene Modul angegeben wurde.</summary>
      <returns>Das Metadatentoken für die Methode, die der benutzerdefinierte Einstiegspunkt für das Modul ist.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolScope">
      <summary>Stellt einen lexikalischen Gültigkeitsbereich in <see cref="T:System.Diagnostics.SymbolStore.ISymbolMethod" /> dar, der Zugriff auf den Anfangs- und den Endoffset des Gültigkeitsbereichs sowie auf die zugehörigen untergeordneten und übergeordneten Gültigkeitsbereiche bietet.</summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.EndOffset">
      <summary>Ruft den Endoffset des aktuellen lexikalischen Gültigkeitsbereichs ab.</summary>
      <returns>Der Endoffset des aktuellen lexikalischen Gültigkeitsbereichs.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetChildren">
      <summary>Ruft die untergeordneten lexikalischen Gültigkeitsbereiche des aktuellen lexikalischen Gültigkeitsbereichs ab.</summary>
      <returns>Die untergeordneten lexikalischen Gültigkeitsbereiche des aktuellen lexikalischen Gültigkeitsbereichs.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetLocals">
      <summary>Ruft die lokalen Variablen im aktuellen lexikalischen Gültigkeitsbereich ab.</summary>
      <returns>Die lokalen Variablen im aktuellen lexikalischen Gültigkeitsbereich.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetNamespaces">
      <summary>Ruft die Namespaces ab, die im aktuellen Gültigkeitsbereich verwendet werden.</summary>
      <returns>Die Namespaces, die im aktuellen Gültigkeitsbereich verwendet werden.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.Method">
      <summary>Ruft die Methode ab, die den aktuellen lexikalischen Gültigkeitsbereich enthält.</summary>
      <returns>Die Methode, die den aktuellen lexikalischen Gültigkeitsbereich enthält.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.Parent">
      <summary>Ruft den übergeordneten lexikalischen Gültigkeitsbereich des aktuellen Gültigkeitsbereichs ab.</summary>
      <returns>Der übergeordnete lexikalische Gültigkeitsbereich des aktuellen Gültigkeitsbereichs.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.StartOffset">
      <summary>Ruft den Anfangsoffset des aktuellen lexikalischen Gültigkeitsbereichs ab.</summary>
      <returns>Der Anfangsoffset des aktuellen lexikalischen Gültigkeitsbereichs.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolVariable">
      <summary>Stellt eine Variable in einem Symbolspeicher dar.</summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField1">
      <summary>Ruft die erste Adresse einer Variablen ab.</summary>
      <returns>Die erste Adresse der Variablen.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField2">
      <summary>Ruft die zweite Adresse einer Variablen ab.</summary>
      <returns>Die zweite Adresse der Variablen.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField3">
      <summary>Ruft die dritte Adresse einer Variablen ab.</summary>
      <returns>Die dritte Adresse der Variablen.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressKind">
      <summary>Ruft den <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" />-Wert ab, der den Typ der Adresse beschreibt.</summary>
      <returns>Der Typ der Adresse. Einer der <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" />-Werte.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.Attributes">
      <summary>Ruft die Attribute der Variablen ab.</summary>
      <returns>Die Attribute der Variablen.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.EndOffset">
      <summary>Ruft den Endoffset einer Variablen im Gültigkeitsbereich der Variablen ab.</summary>
      <returns>Der Endoffset der Variablen.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolVariable.GetSignature">
      <summary>Ruft die Variablensignatur ab.</summary>
      <returns>Die Variablensignatur als nicht transparenter BLOB.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.Name">
      <summary>Ruft den Namen der Variablen ab.</summary>
      <returns>Der Name der Variablen.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.StartOffset">
      <summary>Ruft den Anfangsoffset der Variablen im Gültigkeitsbereich der Variablen ab.</summary>
      <returns>Der Anfangsoffset der Variablen.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolWriter">
      <summary>Stellt einen Symbolwriter für verwalteten Code dar.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.Close">
      <summary>Schließt <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /> und übergibt die Symbole an den Symbolspeicher.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseMethod">
      <summary>Schließt die aktuelle Methode.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseNamespace">
      <summary>Schließt den zuletzt verwendeten Namespace.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)">
      <summary>Schließt den aktuellen lexikalischen Gültigkeitsbereich.</summary>
      <param name="endOffset">Die Punkte nach der letzten Anweisung im Gültigkeitsbereich.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>Definiert ein Quelldokument.</summary>
      <param name="url">Die URL, die das Dokument kennzeichnet.</param>
      <param name="language">Die Dokumentsprache. Dieser Parameter kann <see cref="F:System.Guid.Empty" /> sein.</param>
      <param name="languageVendor">Die Identität des Herstellers für die Dokumentsprache. Dieser Parameter kann <see cref="F:System.Guid.Empty" /> sein.</param>
      <param name="documentType">Der Typ des Dokuments. Dieser Parameter kann <see cref="F:System.Guid.Empty" /> sein.</param>
      <returns>Das Objekt, das das Dokument darstellt.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary>Definiert ein Feld in einem Typ oder einem globalen Feld.</summary>
      <param name="parent">Der Metadatentyp oder das Methodentoken.</param>
      <param name="name">Der Feldname.</param>
      <param name="attributes">Eine bitweise Kombination der Feldattribute.</param>
      <param name="signature">Die Feldsignatur.</param>
      <param name="addrKind">Die Adresstypen für <paramref name="addr1" /> und <paramref name="addr2" />.</param>
      <param name="addr1">Die erste Adresse für die Feldangabe.</param>
      <param name="addr2">Die zweite Adresse für die Feldangabe.</param>
      <param name="addr3">Die dritte Adresse für die Feldangabe.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary>Definiert eine einzelne globale Variable.</summary>
      <param name="name">Der Name der globalen Variablen.</param>
      <param name="attributes">Eine bitweise Kombination der globalen Variablenattribute.</param>
      <param name="signature">Die Signatur der globalen Variablen.</param>
      <param name="addrKind">Die Adresstypen für <paramref name="addr1" />, <paramref name="addr2" /> und <paramref name="addr3" />.</param>
      <param name="addr1">Die erste Adresse für die Angabe der globalen Variablen.</param>
      <param name="addr2">Die zweite Adresse für die Angabe der globalen Variablen.</param>
      <param name="addr3">Die dritte Adresse für die Angabe der globalen Variablen.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Definiert eine einzelne Variable im aktuellen lexikalischen Gültigkeitsbereich.</summary>
      <param name="name">Der Name der lokalen Variablen.</param>
      <param name="attributes">Eine bitweise Kombination der lokalen Variablenattribute.</param>
      <param name="signature">Die Signatur der lokalen Variablen.</param>
      <param name="addrKind">Die Adresstypen für <paramref name="addr1" />, <paramref name="addr2" /> und <paramref name="addr3" />.</param>
      <param name="addr1">Die erste Adresse für die Angabe der lokalen Variablen.</param>
      <param name="addr2">Die zweite Adresse für die Angabe der lokalen Variablen.</param>
      <param name="addr3">Die dritte Adresse für die Angabe der lokalen Variablen.</param>
      <param name="startOffset">Der Anfangsoffset für die Variable. Wenn der Parameter 0 (null) ist, wird er ignoriert, und die Variable ist im gesamten Gültigkeitsbereich definiert. Wenn der Parameter ungleich 0 (null) ist, fällt die Variable in die Offsets des aktuellen Gültigkeitsbereichs.</param>
      <param name="endOffset">Der Endoffset für die Variable. Wenn der Parameter 0 (null) ist, wird er ignoriert, und die Variable ist im gesamten Gültigkeitsbereich definiert. Wenn der Parameter ungleich 0 (null) ist, fällt die Variable in die Offsets des aktuellen Gültigkeitsbereichs.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary>Definiert einen einzelnen Parameter in der aktuellen Methode. Der Typ jedes Parameters wird anhand der Position in der Signatur der Methode bestimmt.</summary>
      <param name="name">Der Name des Parameters.</param>
      <param name="attributes">Eine bitweise Kombination der Parameterattribute.</param>
      <param name="sequence">Die Parametersignatur.</param>
      <param name="addrKind">Die Adresstypen für <paramref name="addr1" />, <paramref name="addr2" /> und <paramref name="addr3" />.</param>
      <param name="addr1">Die erste Adresse für die Parameterangabe.</param>
      <param name="addr2">Die zweite Adresse für die Parameterangabe.</param>
      <param name="addr3">Die dritte Adresse für die Parameterangabe.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary>Definiert eine Gruppe von Sequenzpunkten in der aktuellen Methode.</summary>
      <param name="document">Das Dokumentobjekt, für das die Sequenzpunkte definiert werden.</param>
      <param name="offsets">Die Offsets der Sequenzpunkte, gemessen vom Methodenanfang.</param>
      <param name="lines">Die Dokumentzeilen für die Sequenzpunkte.</param>
      <param name="columns">Die Dokumentpositionen für die Sequenzpunkte.</param>
      <param name="endLines">Die Dokumentendzeilen für die Sequenzpunkte.</param>
      <param name="endColumns">Die Dokumentendpositionen für die Sequenzpunkte.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
      <summary>Legt die Metadatenemitter-Schnittstelle fest, die einem Writer zugeordnet werden soll.</summary>
      <param name="emitter">Die Metadatenemitter-Schnittstelle.</param>
      <param name="filename">Der Name der Datei, für die Debugsymbole geschrieben werden. Nicht alle Writer verlangen einen Dateinamen. Wenn für einen Writer, der keine Dateinamen verwendet, ein Dateiname angegeben ist, wird dieser Parameter ignoriert.</param>
      <param name="fFullBuild">
        <see langword="true" /> gibt eine vollständige Neuerstellung, <see langword="false" /> eine inkrementelle Kompilierung an.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>Öffnet eine Methode, um in dieser Symbolinformationen zu platzieren.</summary>
      <param name="method">Das Metadatentoken für die zu öffnende Methode.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace(System.String)">
      <summary>Öffnet einen neuen Namespace.</summary>
      <param name="name">Der Name des neuen Namespaces.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
      <summary>Öffnet einen neuen lexikalischen Gültigkeitsbereich in der aktuellen Methode.</summary>
      <param name="startOffset">Der Offset in Bytes vom Anfang der Methode zur ersten Anweisung im lexikalischen Gültigkeitsbereich.</param>
      <returns>Ein nicht transparenter Bezeichner für einen Gültigkeitsbereich zur Verwendung mit <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)" />, um die Anfangs- und Endoffsets eines Gültigkeitsbereichs zu einem späteren Zeitpunkt zu definieren. In diesem Fall werden die an <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)" /> und <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)" /> übergebenen Offsets ignoriert. Ein Bezeichner für einen Gültigkeitsbereich ist nur innerhalb der aktuellen Methode gültig.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
      <summary>Gibt den tatsächlichen Anfang und das tatsächliche Ende einer Methode in einer Quelldatei an. Geben Sie die Reichweite einer Methode mit <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)" /> und unabhängig von den in dieser Methode vorhandenen Sequenzpunkten an.</summary>
      <param name="startDoc">Das Dokument, das die Anfangsposition enthält.</param>
      <param name="startLine">Die Nummer der Anfangszeile.</param>
      <param name="startColumn">Die Anfangsspalte.</param>
      <param name="endDoc">Das Dokument, das die Endposition enthält.</param>
      <param name="endLine">Die Nummer der Endzeile.</param>
      <param name="endColumn">Die Nummer der Endspalte.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)">
      <summary>Definiert den Offsetbereich für den angegebenen lexikalischen Gültigkeitsbereich.</summary>
      <param name="scopeID">Der Bezeichner des lexikalischen Gültigkeitsbereichs.</param>
      <param name="startOffset">Der Byteoffset des Anfangs des lexikalischen Gültigkeitsbereichs.</param>
      <param name="endOffset">Der Byteoffset des Endes des lexikalischen Gültigkeitsbereichs.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Byte[])">
      <summary>Definiert ein Attribut, wenn Attributname und Attributwert angegeben sind.</summary>
      <param name="parent">Das Metadatentoken, für das das Attribut definiert wird.</param>
      <param name="name">Der Attributname.</param>
      <param name="data">Der Attributwert.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter(System.IntPtr)">
      <summary>Legt den zugrunde liegenden <see langword="ISymUnmanagedWriter" /> (die entsprechende nicht verwaltete Schnittstelle) fest, der von einem verwalteten <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /> für die Ausgabe von Symbolen verwendet wird.</summary>
      <param name="underlyingWriter">Ein Zeiger für Code, der den zugrunde liegenden Writer darstellt.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUserEntryPoint(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>Kennzeichnet die benutzerdefinierte Methode als Einstiegspunkt für das aktuelle Modul.</summary>
      <param name="entryMethod">Das Metadatentoken für die Methode, die der benutzerdefinierte Einstiegspunkt ist.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace(System.String)">
      <summary>Gibt an, dass der angegebene voll gekennzeichnete Name des Namespaces im geöffneten lexikalischen Gültigkeitsbereich verwendet wird.</summary>
      <param name="fullName">Der voll gekennzeichnete Name des Namespaces.</param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymAddressKind">
      <summary>Gibt Adresstypen für lokale Variablen, Parameter und Felder in den Methoden <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />, <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)" /> und <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)" /> der <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" />-Schnittstelle an.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.BitField">
      <summary>Ein Bitfeld. Der <paramref name="addr1" />-Parameter stellt die Position dar, an der das Feld beginnt, und der <paramref name="addr2" />-Parameter stellt die Feldlänge dar.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.ILOffset">
      <summary>Ein MSIL-Offset (Microsoft Intermediate Language). Der <paramref name="addr1" />-Parameter ist der Index der lokalen MSIL-Variablen oder des entsprechenden Parameters.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeOffset">
      <summary>Ein systemeigener Offset. Der <paramref name="addr1" />-Parameter ist der Offset vom Beginn des übergeordneten Elements.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegister">
      <summary>Eine systemeigene Registeradresse. Der <paramref name="addr1" />-Parameter ist das Register, in dem die Variable gespeichert wird.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterRegister">
      <summary>Eine auf das Register bezogene Adresse. Der <paramref name="addr1" />-Parameter ist das niederwertige Register, und der <paramref name="addr2" />-Parameter ist das höherwertige Register.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterRelative">
      <summary>Eine auf das Register bezogene Adresse. Der <paramref name="addr1" />-Parameter ist das Register, und der <paramref name="addr2" />-Parameter ist der Offset.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterStack">
      <summary>Eine auf das Register bezogene Adresse. Der <paramref name="addr1" />-Parameter ist das niederwertige Register, der <paramref name="addr2" />-Parameter ist das Stapelregister, und der <paramref name="addr3" />-Parameter ist der Offset vom Stapelzeiger zum höherwertigen Teil des Werts.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRVA">
      <summary>Eine systemeigene RVA (Relative Virtual Address). Der <paramref name="addr1" />-Parameter ist die RVA im Modul.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeSectionOffset">
      <summary>Ein systemeigener Bereichsoffset. Der <paramref name="addr1" />-Parameter ist der Bereich, und der <paramref name="addr2" />-Parameter ist der Offset.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeStackRegister">
      <summary>Eine auf das Register bezogene Adresse. Der <paramref name="addr1" />-Parameter ist das Stapelregister, der <paramref name="addr2" />-Parameter ist der Offset vom Stapelzeiger zum niederwertigen Teil des Werts, und der <paramref name="addr3" />-Parameter ist das höherwertige Register.</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymbolToken">
      <summary>Die <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />-Struktur ist eine Objektdarstellung eines Tokens, das Symbolinformationen darstellt.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.#ctor(System.Int32)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />-Struktur, wenn ein Wert angegeben ist.</summary>
      <param name="val">Der für das Token zu verwendende Wert.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>Bestimmt, ob <paramref name="obj" /> gleich dieser Instanz ist.</summary>
      <param name="obj">Der zu überprüfende <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="obj" /> gleich dieser Instanz ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Object)">
      <summary>Bestimmt, ob <paramref name="obj" /> eine Instanz von <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> und gleich dieser Instanz ist.</summary>
      <param name="obj">Das zu überprüfende Objekt.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="obj" /> eine Instanz von <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> und gleich dieser Instanz ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.GetHashCode">
      <summary>Generiert den Hashcode für das aktuelle Token.</summary>
      <returns>Der Hashcode für das aktuelle Token.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.GetToken">
      <summary>Ruft den Wert des aktuellen Tokens ab.</summary>
      <returns>Der Wert des aktuellen Tokens.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.op_Equality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>Gibt einen Wert zurück, der angibt, ob zwei <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />-Objekte gleich sind.</summary>
      <param name="a">Eine <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />-Struktur.</param>
      <param name="b">Eine <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />-Struktur.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="a" /> und <paramref name="b" /> gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.op_Inequality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>Gibt einen Wert zurück, der angibt, ob zwei <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />-Objekte ungleich sind.</summary>
      <param name="a">Eine <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />-Struktur.</param>
      <param name="b">Eine <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />-Struktur.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="a" /> und <paramref name="b" /> ungleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymDocumentType">
      <summary>Enthält die öffentlichen GUIDs für Dokumenttypen, die mit dem Symbolspeicher verwendet werden sollen.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymDocumentType.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.SymbolStore.SymDocumentType" />-Klasse.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymDocumentType.Text">
      <summary>Gibt die GUID des Dokumenttyps an, der mit dem Symbolspeicher verwendet werden soll.</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymLanguageType">
      <summary>Enthält die öffentlichen GUIDs für Sprachtypen, die mit dem Symbolspeicher verwendet werden sollen.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymLanguageType.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.SymbolStore.SymLanguageType" />-Klasse.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Basic">
      <summary>Gibt die GUID des Basic-Sprachtyps an, der mit dem Symbolspeicher verwendet werden soll.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.C">
      <summary>Gibt die GUID des C-Sprachtyps an, der mit dem Symbolspeicher verwendet werden soll.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Cobol">
      <summary>Gibt die GUID des COBOL-Sprachtyps an, der mit dem Symbolspeicher verwendet werden soll.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.CPlusPlus">
      <summary>Gibt die GUID des C++-Sprachtyps an, der mit dem Symbolspeicher verwendet werden soll.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.CSharp">
      <summary>Gibt die GUID des C#-Sprachtyps an, der mit dem Symbolspeicher verwendet werden soll.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.ILAssembly">
      <summary>Gibt die GUID des ILAssembly-Sprachtyps an, der mit dem Symbolspeicher verwendet werden soll.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Java">
      <summary>Gibt die GUID des Java-Sprachtyps an, der mit dem Symbolspeicher verwendet werden soll.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.JScript">
      <summary>Gibt die GUID des JScript-Sprachtyps an, der mit dem Symbolspeicher verwendet werden soll.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.MCPlusPlus">
      <summary>Gibt die GUID des C++-Sprachtyps an, der mit dem Symbolspeicher verwendet werden soll.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Pascal">
      <summary>Gibt die GUID des Pascal-Sprachtyps an, der mit dem Symbolspeicher verwendet werden soll.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.SMC">
      <summary>Gibt die GUID des SMC-Sprachtyps an, der mit dem Symbolspeicher verwendet werden soll.</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymLanguageVendor">
      <summary>Enthält die öffentlichen GUIDs für Compilerhersteller, die mit dem Symbolspeicher verwendet werden sollen.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymLanguageVendor.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.SymbolStore.SymLanguageVendor" />-Klasse.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageVendor.Microsoft">
      <summary>Gibt die GUID des Microsoft-Compilerherstellers an.</summary>
    </member>
  </members>
</doc>
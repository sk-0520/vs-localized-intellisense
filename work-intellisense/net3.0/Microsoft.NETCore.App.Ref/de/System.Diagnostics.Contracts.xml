<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Diagnostics.Contracts</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.Contracts.Contract">
      <summary vsli:raw="Contains static methods for representing program contracts such as preconditions, postconditions, and object invariants.">Enthält statische Methoden zum Darstellen von Programmverträgen, z. B. Vorbedingungen, Nachbedingungen und Objektinvarianten.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
      <summary vsli:raw="Checks for a condition; if the condition is &lt;see langword=&quot;false&quot; /&gt;, follows the escalation policy set for the analyzer.">Überprüft eine Bedingung. Wenn die Bedingung <see langword="false" /> ist, wird die festgelegte Ausweitungsrichtlinie für den Analyzer angewendet.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Der bedingte Ausdruck, der getestet werden soll.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
      <summary vsli:raw="Checks for a condition; if the condition is &lt;see langword=&quot;false&quot; /&gt;, follows the escalation policy set by the analyzer and displays the specified message.">Überprüft eine Bedingung. Wenn die Bedingung <see langword="false" /> ist, wird die vom Analyzer festgelegte Ausweitungsrichtlinie angewendet und die angegebene Meldung angezeigt.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Der bedingte Ausdruck, der getestet werden soll.</param>
      <param name="userMessage" vsli:raw="A message to display if the condition is not met.">Eine Meldung, die angezeigt wird, wenn die Bedingung nicht erfüllt wird.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)">
      <summary vsli:raw="Instructs code analysis tools to assume that the specified condition is &lt;see langword=&quot;true&quot; /&gt;, even if it cannot be statically proven to always be &lt;see langword=&quot;true&quot; /&gt;.">Weist Codeanalysetools an, für die angegebene Bedingung das Ergebnis <see langword="true" /> anzunehmen, auch wenn nicht statisch belegt werden kann, dass sie immer <see langword="true" /> ist.</summary>
      <param name="condition" vsli:raw="The conditional expression to assume &lt;see langword=&quot;true&quot; /&gt;.">Der auszuwertende bedingte Ausdruck, für den <see langword="true" /> angenommen werden soll.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
      <summary vsli:raw="Instructs code analysis tools to assume that a condition is &lt;see langword=&quot;true&quot; /&gt;, even if it cannot be statically proven to always be &lt;see langword=&quot;true&quot; /&gt;, and displays a message if the assumption fails.">Weist Codeanalysetools an, für eine Bedingung das Ergebnis <see langword="true" /> anzunehmen, auch wenn nicht statisch belegt werden kann, dass sie immer <see langword="true" /> ist, und zeigt eine Meldung an, wenn die Annahme fehlschlägt.</summary>
      <param name="condition" vsli:raw="The conditional expression to assume &lt;see langword=&quot;true&quot; /&gt;.">Der auszuwertende bedingte Ausdruck, für den <see langword="true" /> angenommen werden soll.</param>
      <param name="userMessage" vsli:raw="The message to post if the assumption fails.">Die Meldung, die angezeigt wird, wenn die Annahme fehlschlägt.</param>
    </member>
    <member name="E:System.Diagnostics.Contracts.Contract.ContractFailed">
      <summary vsli:raw="Occurs when a contract fails.">Tritt auf, wenn ein Vertrag fehlschlägt.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
      <summary vsli:raw="Marks the end of the contract section when a method's contracts contain only preconditions in the &lt;see langword=&quot;if&quot; /&gt;-&lt;see langword=&quot;then&quot; /&gt;-&lt;see langword=&quot;throw&quot; /&gt; form.">Markiert das Ende des Vertragsabschnitts, wenn die Verträge einer Methode nur Vorbedingungen in Form vom <see langword="if" />-<see langword="then" />-<see langword="throw" /> enthalten.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
      <summary vsli:raw="Specifies a postcondition contract for the enclosing method or property.">Gibt einen Nachbedingungsvertrag für die einschließende Methode oder Eigenschaft an.</summary>
      <param name="condition" vsli:raw="The conditional expression to test. The expression may include &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)&quot; /&gt;, &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)&quot; /&gt;, and &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.Result``1&quot; /&gt; values.">Der bedingte Ausdruck, der getestet werden soll. Der Ausdruck kann folgende Werte enthalten: <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" />, <see cref="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)" /> und <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a postcondition contract for a provided exit condition and a message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Gibt einen Nachbedingungsvertrag für eine vorhandene Exit-Bedingung und eine Meldung an, die angezeigt wird, wenn die Bedingung <see langword="false" /> ist.</summary>
      <param name="condition" vsli:raw="The conditional expression to test. The expression may include &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)&quot; /&gt; and &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.Result``1&quot; /&gt; values.">Der bedingte Ausdruck, der getestet werden soll. Der Ausdruck kann folgende Werte enthalten: <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" /> und <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" />.</param>
      <param name="userMessage" vsli:raw="The message to display if the expression is not &lt;see langword=&quot;true&quot; /&gt;.">Die Meldung, die angezeigt wird, wenn der Ausdruck nicht <see langword="true" /> ist.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
      <summary vsli:raw="Specifies a postcondition contract for the enclosing method or property, based on the provided exception and condition.">Gibt einen Nachbedingungsvertrag für die einschließende Methode oder Eigenschaft auf Grundlage der angegebenen Ausnahme und Bedingung an.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Der bedingte Ausdruck, der getestet werden soll.</param>
      <typeparam name="TException" vsli:raw="The type of exception that invokes the postcondition check.">Der Ausnahmetyp, von dem die Nachbedingungsüberprüfung aufgerufen wird.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a postcondition contract and a message to display if the condition is &lt;see langword=&quot;false&quot; /&gt; for the enclosing method or property, based on the provided exception and condition.">Gibt auf Grundlage der angegebenen Ausnahme und Bedingung einen Nachbedingungsvertrag für die Ausnahme und Bedingung und eine Meldung an, die angezeigt wird, wenn die Bedingung <see langword="false" /> ist.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Der bedingte Ausdruck, der getestet werden soll.</param>
      <param name="userMessage" vsli:raw="The message to display if the expression is &lt;see langword=&quot;false&quot; /&gt;.">Die Meldung, die angezeigt wird, wenn der Ausdruck <see langword="false" /> ist.</param>
      <typeparam name="TException" vsli:raw="The type of exception that invokes the postcondition check.">Der Ausnahmetyp, von dem die Nachbedingungsüberprüfung aufgerufen wird.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary vsli:raw="Determines whether a specified test is true for any integer within a range of integers.">Bestimmt, ob ein bestimmter Test für jede ganze Zahl in einem Bereich von ganzen Zahlen den den Wert true zurückgibt.</summary>
      <param name="fromInclusive" vsli:raw="The first integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Die erste ganze Zahl, die an <paramref name="predicate" /> übergeben werden soll.</param>
      <param name="toExclusive" vsli:raw="One more than the last integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Die letzte ganze Zahl, die an <paramref name="predicate" /> übergeben werden soll, +1.</param>
      <param name="predicate" vsli:raw="The function to evaluate for any value of the integer in the specified range.">Die Funktion zum Auswerten auf Ganzzahlwerte im angegebenen Bereich.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for any integer starting from &lt;paramref name=&quot;fromInclusive&quot; /&gt; to &lt;paramref name=&quot;toExclusive&quot; /&gt; - 1.">
        <see langword="true" />, wenn <paramref name="predicate" /> für eine beliebige ganze Zahl zwischen <paramref name="fromInclusive" /> und <paramref name="toExclusive" /> -1 <see langword="true" /> zurückgibt.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="predicate" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;toExclusive&quot; /&gt; is less than &lt;paramref name=&quot;fromInclusive&quot; /&gt;.">
        <paramref name="toExclusive" /> ist kleiner als <paramref name="fromInclusive" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary vsli:raw="Determines whether an element within a collection of elements exists within a function.">Bestimmt, ob ein Element in einer Auflistung von Elementen in einer Funktion vorhanden ist.</summary>
      <param name="collection" vsli:raw="The collection from which elements of type &lt;c&gt;T&lt;/c&gt; will be drawn to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Die Sammlung, aus der Elemente des Typs <c>T</c> an <paramref name="predicate" /> übergeben werden.</param>
      <param name="predicate" vsli:raw="The function to evaluate for an element in &lt;paramref name=&quot;collection&quot; /&gt;.">Die Funktion, mit der überprüft wird, ob ein Element in <paramref name="collection" /> vorhanden ist.</param>
      <typeparam name="T" vsli:raw="The type that is contained in &lt;paramref name=&quot;collection&quot; /&gt;.">Der in <paramref name="collection" /> enthaltene Typ.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if and only if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for any element of type &lt;paramref name=&quot;T&quot; /&gt; in &lt;paramref name=&quot;collection&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="predicate" /> für ein beliebiges Element des Typs <paramref name="T" /> in <paramref name="collection" /> den Wert <see langword="true" /> zurückgibt.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> oder <paramref name="predicate" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary vsli:raw="Determines whether a particular condition is valid for all integers in a specified range.">Bestimmt, ob eine angegebene Bedingung für alle ganzen Zahlen in einem angegebenen Bereich gültig ist.</summary>
      <param name="fromInclusive" vsli:raw="The first integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Die erste ganze Zahl, die an <paramref name="predicate" /> übergeben werden soll.</param>
      <param name="toExclusive" vsli:raw="One more than the last integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Die letzte ganze Zahl, die an <paramref name="predicate" /> übergeben werden soll, +1.</param>
      <param name="predicate" vsli:raw="The function to evaluate for the existence of the integers in the specified range.">Die Funktion, mit der überprüft wird, ob die ganzen Zahlen im angegebenen Bereich vorhanden sind.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for all integers starting from &lt;paramref name=&quot;fromInclusive&quot; /&gt; to &lt;paramref name=&quot;toExclusive&quot; /&gt; - 1.">
        <see langword="true" />, wenn <paramref name="predicate" /> für alle ganzen Zahlen zwischen <paramref name="fromInclusive" /> und <paramref name="toExclusive" /> -1 <see langword="true" /> zurückgibt.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="predicate" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;toExclusive&quot; /&gt; is less than &lt;paramref name=&quot;fromInclusive&quot; /&gt;.">
        <paramref name="toExclusive" /> ist kleiner als <paramref name="fromInclusive" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary vsli:raw="Determines whether all the elements in a collection exist within a function.">Bestimmt, ob alle Elemente in einer Auflistung in einer Funktion vorhanden sind.</summary>
      <param name="collection" vsli:raw="The collection from which elements of type &lt;c&gt;T&lt;/c&gt; will be drawn to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Die Sammlung, aus der Elemente des Typs <c>T</c> an <paramref name="predicate" /> übergeben werden.</param>
      <param name="predicate" vsli:raw="The function to evaluate for the existence of all the elements in &lt;paramref name=&quot;collection&quot; /&gt;.">Die Funktion, mit der überprüft wird, ob alle Elemente in <paramref name="collection" /> vorhanden sind.</param>
      <typeparam name="T" vsli:raw="The type that is contained in &lt;paramref name=&quot;collection&quot; /&gt;.">Der in <paramref name="collection" /> enthaltene Typ.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if and only if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for all elements of type &lt;paramref name=&quot;T&quot; /&gt; in &lt;paramref name=&quot;collection&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="predicate" /> für alle Elemente des Typs <paramref name="T" /> in <paramref name="collection" /> den Wert <see langword="true" /> zurückgibt.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> oder <paramref name="predicate" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
      <summary vsli:raw="Specifies an invariant contract for the enclosing method or property.">Gibt einen invarianten Vertrag für die einschließende Methode oder Eigenschaft an.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Der bedingte Ausdruck, der getestet werden soll.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
      <summary vsli:raw="Specifies an invariant contract for the enclosing method or property, and displays a message if the condition for the contract fails.">Gibt einen invarianten Vertrag für die einschließende Methode oder Eigenschaft an und zeigt eine Meldung an, wenn die Bedingung für den Vertrag nicht erfüllt wird.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Der bedingte Ausdruck, der getestet werden soll.</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Die Meldung, die angezeigt werden soll, wenn die Bedingung <see langword="false" /> lautet.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
      <summary vsli:raw="Represents values as they were at the start of a method or property.">Stellt Werte in ihrem Zustand beim Starten einer Methode oder einer Eigenschaft dar.</summary>
      <param name="value" vsli:raw="The value to represent (field or parameter).">Der darzustellende Wert (Feld oder Parameter).</param>
      <typeparam name="T" vsli:raw="The type of value.">Der Typ des Werts.</typeparam>
      <returns vsli:raw="The value of the parameter or field at the start of a method or property.">Der Wert des Parameters oder Felds am Anfang einer Methode oder Eigenschaft.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property.">Gibt einen Vorbedingungsvertrag für die einschließende Methode oder Eigenschaft an.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Der bedingte Ausdruck, der getestet werden soll.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and displays a message if the condition for the contract fails.">Gibt einen Vorbedingungsvertrag für die einschließende Methode oder Eigenschaft an, und zeigt eine Meldung an, wenn die Bedingung für den Vertrag nicht erfüllt wird.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Der bedingte Ausdruck, der getestet werden soll.</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Die Meldung, die angezeigt werden soll, wenn die Bedingung <see langword="false" /> lautet.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and throws an exception if the condition for the contract fails.">Gibt einen Vorbedingungsvertrag für die einschließende Methode oder Eigenschaft an, und löst eine Ausnahme aus, wenn die Bedingung für den Vertrag nicht erfüllt wird.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Der bedingte Ausdruck, der getestet werden soll.</param>
      <typeparam name="TException" vsli:raw="The exception to throw if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Die Ausnahme, die ausgelöst wird, wenn die Bedingung <see langword="false" /> ist.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and throws an exception with the provided message if the condition for the contract fails.">Gibt einen Vorbedingungsvertrag für die einschließende Methode oder Eigenschaft an, und löst eine Ausnahme mit der angegebenen Meldung aus, wenn die Bedingung für den Vertrag nicht erfüllt wird.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Der bedingte Ausdruck, der getestet werden soll.</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Die Meldung, die angezeigt werden soll, wenn die Bedingung <see langword="false" /> lautet.</param>
      <typeparam name="TException" vsli:raw="The exception to throw if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Die Ausnahme, die ausgelöst wird, wenn die Bedingung <see langword="false" /> ist.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Result``1">
      <summary vsli:raw="Represents the return value of a method or property.">Stellt den Rückgabewert einer Methode oder Eigenschaft dar.</summary>
      <typeparam name="T" vsli:raw="Type of return value of the enclosing method or property.">Der Typ des Rückgabewerts der einschließenden Methode oder Eigenschaft.</typeparam>
      <returns vsli:raw="Return value of the enclosing method or property.">Der Rückgabewert der einschließenden Methode oder Eigenschaft.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
      <summary vsli:raw="Represents the final (output) value of an &lt;see langword=&quot;out&quot; /&gt; parameter when returning from a method.">Stellt den von einer Methode zurückgegebenen endgültigen Wert (Ausgabewert) eines <see langword="out" />-Parameters dar.</summary>
      <param name="value" vsli:raw="The &lt;see langword=&quot;out&quot; /&gt; parameter.">Der <see langword="out" />-Parameter.</param>
      <typeparam name="T" vsli:raw="The type of the &lt;see langword=&quot;out&quot; /&gt; parameter.">Der Typ des <see langword="out" />-Parameters.</typeparam>
      <returns vsli:raw="The output value of the &lt;see langword=&quot;out&quot; /&gt; parameter.">Der Ausgabewert des <see langword="out" />-Parameters.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute">
      <summary vsli:raw="Defines abbreviations that you can use in place of the full contract syntax.">Definiert Abkürzungen, die Sie anstelle der vollständigen Vertragssyntax verwenden können.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractAbbreviatorAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute" />-Klasse.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
      <summary vsli:raw="Enables the factoring of legacy &lt;see langword=&quot;if-then-throw&quot; /&gt; code into separate methods for reuse, and provides full control over thrown exceptions and arguments.">Aktiviert die Verarbeitung von Legacy <see langword="if-then-throw" />-Code in separate Methoden zur Wiederverwendung und stellt die vollständige Kontrolle über ausgelösten Ausnahmen und Argumenten bereit.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute" />-Klasse.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassAttribute">
      <summary vsli:raw="Specifies that a separate type contains the code contracts for this type.">Gibt an, dass ein separater Typ die Codeverträge für diesen Typ enthält.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractClassAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.Contracts.ContractClassAttribute" />-Klasse.</summary>
      <param name="typeContainingContracts" vsli:raw="The type that contains the code contracts for this type.">Der Typ, der die Codeverträge für diesen Typ enthält.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassAttribute.TypeContainingContracts">
      <summary vsli:raw="Gets the type that contains the code contracts for this type.">Ruft den Typ ab, der die Codeverträge für diesen Typ enthält.</summary>
      <returns vsli:raw="The type that contains the code contracts for this type.">Der Typ, der die Codeverträge für diesen Typ enthält.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassForAttribute">
      <summary vsli:raw="Specifies that a class is a contract for a type.">Gibt an, dass eine Klasse einen Vertrag für einen Typ darstellt.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassForAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractClassForAttribute&quot; /&gt; class, specifying the type the current class is a contract for.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.Contracts.ContractClassForAttribute" />-Klasse und gibt den Typ an, für den die aktuelle Klasse ein Vertrag ist.</summary>
      <param name="typeContractsAreFor" vsli:raw="The type the current class is a contract for.">Der Typ, für den die aktuelle Klasse ein Vertrag ist.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassForAttribute.TypeContractsAreFor">
      <summary vsli:raw="Gets the type that this code contract applies to.">Ruft den Typ ab, für den dieser Codevertrag gilt.</summary>
      <returns vsli:raw="The type that this contract applies to.">Der Typ, für den dieser Vertrag gilt.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailedEventArgs">
      <summary vsli:raw="Provides methods and data for the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">Stellt Methoden und Daten für das <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" />-Ereignis bereit.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.#ctor(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">Stellt Daten für das <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" />-Ereignis bereit.</summary>
      <param name="failureKind" vsli:raw="One of the enumeration values that specifies the contract that failed.">Einer der Enumerationswerte, der den fehlgeschlagenen Vertrag angibt.</param>
      <param name="message" vsli:raw="The message for the event.">Die Meldung für das Ereignis.</param>
      <param name="condition" vsli:raw="The condition for the event.">Die Bedingung für das Ereignis.</param>
      <param name="originalException" vsli:raw="The exception that caused the event.">Die Ausnahme, durch die das Ereignis verursacht wurde.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Condition">
      <summary vsli:raw="Gets the condition for the failure of the contract.">Ruft die Bedingung für den Fehler des Vertrags ab.</summary>
      <returns vsli:raw="The condition for the failure.">Die Bedingung für den Fehler.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.FailureKind">
      <summary vsli:raw="Gets the type of contract that failed.">Ruft den Typ des fehlgeschlagenen Vertrags ab.</summary>
      <returns vsli:raw="One of the enumeration values that specifies the type of contract that failed.">Einer der Enumerationswerte, der den Typ des fehlgeschlagenen Vertrags angibt.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled">
      <summary vsli:raw="Indicates whether the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event has been handled.">Gibt an, ob das <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" />-Ereignis behandelt wurde.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event has been handled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Ereignis behandelt wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Message">
      <summary vsli:raw="Gets the message that describes the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">Ruft die Meldung ab, in der das <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" />-Ereignis beschrieben wird.</summary>
      <returns vsli:raw="The message that describes the event.">Die Meldung, in der das Ereignis beschrieben wird.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.OriginalException">
      <summary vsli:raw="Gets the original exception that caused the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">Ruft die ursprüngliche Ausnahme ab, durch die das <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" />-Ereignis verursacht wurde.</summary>
      <returns vsli:raw="The exception that caused the event.">Die Ausnahme, durch die das Ereignis verursacht wurde.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled">
      <summary vsli:raw="Sets the &lt;see cref=&quot;P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled&quot; /&gt; property to &lt;see langword=&quot;true&quot; /&gt;.">Legt die <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled" />-Eigenschaft auf <see langword="true" /> fest.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind">
      <summary vsli:raw="Sets the &lt;see cref=&quot;P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind&quot; /&gt; property to &lt;see langword=&quot;true&quot; /&gt;.">Legt die <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind" />-Eigenschaft auf <see langword="true" /> fest.</summary>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind">
      <summary vsli:raw="Indicates whether the code contract escalation policy should be applied.">Gibt an, ob die Ausweitungsrichtlinie für den Codevertrag angewendet werden soll.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to apply the escalation policy; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um die Ausweitungsrichtlinie anzuwenden, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailureKind">
      <summary vsli:raw="Specifies the type of contract that failed.">Gibt den Typ des fehlgeschlagenen Vertrags an.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assert">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Assert&quot; /&gt; contract failed.">Ein fehlgeschlagener <see cref="Overload:System.Diagnostics.Contracts.Contract.Assert" />-Vertrag.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assume">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Assume&quot; /&gt; contract failed.">Ein fehlgeschlagener <see cref="Overload:System.Diagnostics.Contracts.Contract.Assume" />-Vertrag.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Invariant">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Invariant&quot; /&gt; contract failed.">Ein fehlgeschlagener <see cref="Overload:System.Diagnostics.Contracts.Contract.Invariant" />-Vertrag.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Postcondition">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Ensures&quot; /&gt; contract failed.">Ein fehlgeschlagener <see cref="Overload:System.Diagnostics.Contracts.Contract.Ensures" />-Vertrag.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.PostconditionOnException">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.EnsuresOnThrow&quot; /&gt; contract failed.">Ein fehlgeschlagener <see cref="Overload:System.Diagnostics.Contracts.Contract.EnsuresOnThrow" />-Vertrag.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Precondition">
      <summary vsli:raw="A &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Requires&quot; /&gt; contract failed.">Ein fehlgeschlagener <see cref="Overload:System.Diagnostics.Contracts.Contract.Requires" />-Vertrag.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute">
      <summary vsli:raw="Marks a method as being the invariant method for a class.">Kennzeichnet eine Methode als invariante Methode für eine Klasse.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractInvariantMethodAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute" />-Klasse.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractOptionAttribute">
      <summary vsli:raw="Enables you to set contract and tool options at assembly, type, or method granularity.">Ermöglicht es Ihnen, Vertrags- und Tool-Optionen in der Assembly, am Typ oder Methodengranularität festzulegen.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractOptionAttribute&quot; /&gt; class by using the provided category, setting, and enable/disable value.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.Contracts.ContractOptionAttribute" />-Klasse unter Verwendung der angegebenen Kategorie, Einstellung und des aktivieren/deaktivieren-Werts.</summary>
      <param name="category" vsli:raw="The category for the option to be set.">Die Kategorie für die festzulegende Option.</param>
      <param name="setting" vsli:raw="The option setting.">Die Optionseinstellung.</param>
      <param name="enabled" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to enable the option; &lt;see langword=&quot;false&quot; /&gt; to disable the option.">
        <see langword="true" />, um die Option zu aktivieren; <see langword="false" />, um die Option zu deaktivieren.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractOptionAttribute&quot; /&gt; class by using the provided category, setting, and value.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.Contracts.ContractOptionAttribute" />-Klasse unter Verwendung der angegebenen Kategorie, Einstellung und des Werts.</summary>
      <param name="category" vsli:raw="The category of the option to be set.">Die Kategorie der festzulegenden Option.</param>
      <param name="setting" vsli:raw="The option setting.">Die Optionseinstellung.</param>
      <param name="value" vsli:raw="The value for the setting.">Der Wert für diese Einstellung.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Category">
      <summary vsli:raw="Gets the category of the option.">Ruft die Kategorie der Option ab.</summary>
      <returns vsli:raw="The category of the option.">Die Kategorie der Option.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Enabled">
      <summary vsli:raw="Determines if an option is enabled.">Bestimmt, ob eine Option aktiviert ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the option is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Option aktiviert ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Setting">
      <summary vsli:raw="Gets the setting for the option.">Ruft die Einstellung für die Option ab.</summary>
      <returns vsli:raw="The setting for the option.">Die Einstellung für die Option.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Value">
      <summary vsli:raw="Gets the value for the option.">Ruft den Wert der Option ab.</summary>
      <returns vsli:raw="The value for the option.">Der Wert für die Option.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute">
      <summary vsli:raw="Specifies that a field can be used in method contracts when the field has less visibility than the method.">Gibt an, dass ein Feld in den Methodenverträgen verwendet werden kann, wenn das Feld eine geringere Sichtbarkeit aufweist als die Methode.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute" />-Klasse.</summary>
      <param name="name" vsli:raw="The property name to apply to the field.">Der für das Feld zu übernehmende Eigenschaftenname.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.Name">
      <summary vsli:raw="Gets the property name to be applied to the field.">Ruft den für das Feld zu übernehmenden Eigenschaftennamen ab.</summary>
      <returns vsli:raw="The property name to be applied to the field.">Der für das Feld zu übernehmende Eigenschaftenname.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute">
      <summary vsli:raw="Specifies that an assembly is a reference assembly that contains contracts.">Gibt an, dass eine Assembly eine Verweisassembly mit Verträgen ist.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute" />-Klasse.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute">
      <summary vsli:raw="Identifies a member that has no run-time behavior.">Gibt einen Member an, der kein Laufzeitverhalten aufweist.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute" />-Klasse.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractVerificationAttribute">
      <summary vsli:raw="Instructs analysis tools to assume the correctness of an assembly, type, or member without performing static verification.">Weist die Analysetools an, die Richtigkeit einer Assembly, eines Typs oder Members ohne statische Überprüfung anzunehmen.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractVerificationAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractVerificationAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.Contracts.ContractVerificationAttribute" />-Klasse.</summary>
      <param name="value" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to require verification; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um die Überprüfung als erforderlich festzulegen, andernfalls <see langword="false" />.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractVerificationAttribute.Value">
      <summary vsli:raw="Gets the value that indicates whether to verify the contract of the target.">Ruft den Wert ab, der angibt, ob der Vertrag des Ziels überprüft werden soll.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if verification is required; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Überprüfung erforderlich ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.PureAttribute">
      <summary vsli:raw="Indicates that a type or method is pure, that is, it does not make any visible state changes.">Gibt an, dass ein Typ oder eine Methode rein ist, d. h., keine sichtbaren Zustandsänderungen vornimmt.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.PureAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.PureAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.Contracts.PureAttribute" />-Klasse.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ContractHelper">
      <summary vsli:raw="Provides methods that the binary rewriter uses to handle contract failures.">Stellt Methoden bereit, mit denen der binäre Rewriter Vertragsfehler behandelt.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ContractHelper.RaiseContractFailedEvent(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary vsli:raw="Used by the binary rewriter to activate the default failure behavior.">Wird vom binären Rewriter verwendet, um das Standardfehlerverhalten zu aktivieren.</summary>
      <param name="failureKind" vsli:raw="One of the enumeration values that specifies the type of failure.">Einer der Enumerationswerte, der den Typ der Fehlfunktion angibt.</param>
      <param name="userMessage" vsli:raw="Additional user information.">Weitere Informationen für den Benutzer.</param>
      <param name="conditionText" vsli:raw="The description of the condition that caused the failure.">Die Beschreibung der Bedingung, die den Fehler verursacht hat.</param>
      <param name="innerException" vsli:raw="The inner exception that caused the current exception.">Die interne Ausnahme, durch die die aktuelle Ausnahme verursacht wurde.</param>
      <returns vsli:raw="A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) if the event was handled and should not trigger a failure; otherwise, returns the localized failure message.">Ein NULL-Verweis (<see langword="Nothing" /> in Visual Basic), wenn das Ereignis behandelt wurde und keinen Fehler auslösen soll. Andernfalls wird die lokalisierte Fehlermeldung zurückgegeben.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;failureKind&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractFailureKind&quot; /&gt; value.">
        <paramref name="failureKind" /> ist kein gültiger <see cref="T:System.Diagnostics.Contracts.ContractFailureKind" />-Wert.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ContractHelper.TriggerFailure(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.String,System.Exception)">
      <summary vsli:raw="Triggers the default failure behavior.">Löst das Standardfehlerverhalten aus.</summary>
      <param name="kind" vsli:raw="One of the enumeration values that specifies the type of failure.">Einer der Enumerationswerte, der den Typ der Fehlfunktion angibt.</param>
      <param name="displayMessage" vsli:raw="The message to display.">Die anzuzeigende Meldung.</param>
      <param name="userMessage" vsli:raw="Additional user information.">Weitere Informationen für den Benutzer.</param>
      <param name="conditionText" vsli:raw="The description of the condition that caused the failure.">Die Beschreibung der Bedingung, die den Fehler verursacht hat.</param>
      <param name="innerException" vsli:raw="The inner exception that caused the current exception.">Die interne Ausnahme, durch die die aktuelle Ausnahme verursacht wurde.</param>
    </member>
  </members>
</doc>
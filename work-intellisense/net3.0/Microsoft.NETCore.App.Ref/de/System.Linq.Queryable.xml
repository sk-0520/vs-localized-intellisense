<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Linq.Queryable</name>
  </assembly>
  <members>
    <member name="T:System.Linq.EnumerableExecutor">
      <summary vsli:raw="Represents an expression tree and provides functionality to execute the expression tree after rewriting it.">Stellt eine Ausdrucksbaumstruktur dar und liefert die Funktionalität zur Ausführung der Ausdrucksbaumstruktur, nachdem sie umgeschrieben wurde.</summary>
    </member>
    <member name="T:System.Linq.EnumerableExecutor`1">
      <summary vsli:raw="Represents an expression tree and provides functionality to execute the expression tree after rewriting it.">Stellt eine Ausdrucksbaumstruktur dar und liefert die Funktionalität zur Ausführung der Ausdrucksbaumstruktur, nachdem sie umgeschrieben wurde.</summary>
      <typeparam name="T" vsli:raw="The data type of the value that results from executing the expression tree.">Der Datentyp des Werts, der aus der Ausführung der Ausdrucksbaumstruktur resultiert.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableExecutor`1.#ctor(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Linq.EnumerableExecutor`1&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Linq.EnumerableExecutor`1" />-Klasse.</summary>
      <param name="expression" vsli:raw="An expression tree to associate with the new instance.">Eine Ausdrucksbaumstruktur, die mit der neuen Instanz verknüpft werden soll.</param>
    </member>
    <member name="T:System.Linq.EnumerableQuery">
      <summary vsli:raw="Represents an &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; as an &lt;see cref=&quot;T:System.Linq.EnumerableQuery&quot; /&gt; data source.">Stellt <see cref="T:System.Collections.IEnumerable" /> als eine <see cref="T:System.Linq.EnumerableQuery" />-Datenquelle dar.</summary>
    </member>
    <member name="T:System.Linq.EnumerableQuery`1">
      <summary vsli:raw="Represents an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; collection as an &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; data source.">Stellt eine <see cref="T:System.Collections.Generic.IEnumerable`1" />-Auflistung als <see cref="T:System.Linq.IQueryable`1" />-Datenquelle dar.</summary>
      <typeparam name="T" vsli:raw="The type of the data in the collection.">Der Datentyp in der Datenauflistung.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Linq.EnumerableQuery`1&quot; /&gt; class and associates it with an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; collection.">Initialisiert eine neue Instanz der <see cref="T:System.Linq.EnumerableQuery`1" />-Klasse und verknüpft sie mit einer <see cref="T:System.Collections.Generic.IEnumerable`1" />-Auflistung.</summary>
      <param name="enumerable" vsli:raw="A collection to associate with the new instance.">Eine Auflistung, die mit der neuen  Instanz verknüpft werden soll.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Linq.EnumerableQuery`1&quot; /&gt; class and associates the instance with an expression tree.">Initialisiert eine neue Instanz der <see cref="T:System.Linq.EnumerableQuery`1" />-Klasse und verknüpft die Instanz mit einer Ausdrucksbaumstruktur.</summary>
      <param name="expression" vsli:raw="An expression tree to associate with the new instance.">Eine Ausdrucksbaumstruktur, die mit der neuen Instanz verknüpft werden soll.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that can iterate through the associated &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; collection, or, if it is null, through the collection that results from rewriting the associated expression tree as a query on an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; data source and executing it.">Gibt einen Enumerator zurück, der die zugehörige <see cref="T:System.Collections.Generic.IEnumerable`1" />-Auflistung durchlaufen kann oder der, falls diese null ist, die Auflistung durchläuft, die von der Umschreibung der zugehörigen Ausdrucksbaumstruktur als Abfrage zu einer <see cref="T:System.Collections.Generic.IEnumerable`1" />-Datenquelle stammt und diese ausführt.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the associated data source.">Ein Enumerator, mit dem die zugehörige Datenquelle durchlaufen werden kann.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that can iterate through the associated &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; collection, or, if it is null, through the collection that results from rewriting the associated expression tree as a query on an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; data source and executing it.">Gibt einen Enumerator zurück, der die zugehörige <see cref="T:System.Collections.Generic.IEnumerable`1" />-Auflistung durchlaufen kann oder der, falls diese null ist, die Auflistung durchläuft, die von der Umschreibung der zugehörigen Ausdrucksbaumstruktur als Abfrage zu einer <see cref="T:System.Collections.Generic.IEnumerable`1" />-Datenquelle stammt und diese ausführt.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the associated data source.">Ein Enumerator, mit dem die zugehörige Datenquelle durchlaufen werden kann.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#ElementType">
      <summary vsli:raw="Gets the type of the data in the collection that this instance represents.">Ruft den Datentyp in der Auflistung ab, die diese Instanz darstellt.</summary>
      <returns vsli:raw="The type of the data in the collection that this instance represents.">Der Datentyp in der Auflistung, die diese Instanz darstellt.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Expression">
      <summary vsli:raw="Gets the expression tree that is associated with or that represents this instance.">Ruft die Ausdrucksbaumstruktur ab, die mit dieser Instanz verknüpft ist oder diese Instanz darstellt.</summary>
      <returns vsli:raw="The expression tree that is associated with or that represents this instance.">Die Ausdrucksbaumstruktur, die mit dieser Instanz verknüpft ist oder diese Instanz darstellt.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Provider">
      <summary vsli:raw="Gets the query provider that is associated with this instance.">Ruft den Abfrageanbieter ab, der mit dieser Instanz verknüpft ist.</summary>
      <returns vsli:raw="The query provider that is associated with this instance.">Der Abfrageanbieter, der mit dieser Instanz verknüpft ist.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Constructs a new &lt;see cref=&quot;T:System.Linq.EnumerableQuery`1&quot; /&gt; object and associates it with a specified expression tree that represents an &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; collection of data.">Erstellt eine neues <see cref="T:System.Linq.EnumerableQuery`1" />-Objekt und verknüpft es mit einer angegebenen Ausdrucksbaumstruktur, die eine <see cref="T:System.Linq.IQueryable" />-Auflistung von Daten darstellt.</summary>
      <param name="expression" vsli:raw="An expression tree that represents an &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; collection of data.">Eine Ausdrucksbaumstruktur, die eine <see cref="T:System.Linq.IQueryable" />-Auflistung von Daten darstellt.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.EnumerableQuery`1&quot; /&gt; object that is associated with &lt;paramref name=&quot;expression&quot; /&gt;.">Ein <see cref="T:System.Linq.EnumerableQuery`1" />-Objekt, das mit diesem <paramref name="expression" /> verknüpft ist.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine neues <see cref="T:System.Linq.EnumerableQuery`1" />-Objekt und verknüpft es mit einer angegebenen Ausdrucksbaumstruktur, die eine <see cref="T:System.Linq.IQueryable`1" />-Auflistung von Daten darstellt.</summary>
      <param name="expression">Eine auszuführende Ausdrucksbaumstruktur.</param>
      <typeparam name="S">Der Datentyp in der Auflistung, die <paramref name="expression" /> darstellt.</typeparam>
      <returns>Ein EnumerableQuery-Objekt, das mit <paramref name="expression" /> verknüpft ist.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Executes an expression after rewriting it to call &lt;see cref=&quot;T:System.Linq.Enumerable&quot; /&gt; methods instead of &lt;see cref=&quot;T:System.Linq.Queryable&quot; /&gt; methods on any enumerable data sources that cannot be queried by &lt;see cref=&quot;T:System.Linq.Queryable&quot; /&gt; methods.">Führt einen Ausdruck aus, nachdem dieser zum Aufrufen von <see cref="T:System.Linq.Enumerable" />-Methoden statt <see cref="T:System.Linq.Queryable" />-Methoden zu allen zählbaren Datenquellen umgeschrieben wurde, die nicht von <see cref="T:System.Linq.Queryable" />-Methoden abgefragt werden können.</summary>
      <param name="expression" vsli:raw="An expression tree to execute.">Eine auszuführende Ausdrucksbaumstruktur.</param>
      <returns vsli:raw="The value that results from executing &lt;paramref name=&quot;expression&quot; /&gt;.">Der Wert, der aus der Ausführung von <paramref name="expression" /> stammt.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
      <summary>Führt einen Ausdruck aus, nachdem dieser zum Aufrufen von <see cref="T:System.Linq.Enumerable" />-Methoden statt <see cref="T:System.Linq.Queryable" />-Methoden zu allen zählbaren Datenquellen umgeschrieben wurde, die nicht von <see cref="T:System.Linq.Queryable" />-Methoden abgefragt werden können.</summary>
      <param name="expression">Eine auszuführende Ausdrucksbaumstruktur.</param>
      <typeparam name="S">Der Datentyp in der Auflistung, die <paramref name="expression" /> darstellt.</typeparam>
      <returns>Der Wert, der aus der Ausführung von <paramref name="expression" /> stammt.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.ToString">
      <summary vsli:raw="Returns a textual representation of the enumerable collection or, if it is null, of the expression tree that is associated with this instance.">Gibt eine Textdarstellung der zählbaren Auflistung zurück oder, wenn diese NULL ist, eine Darstellung der Ausdrucksbaumstruktur, die dieser Instanz zugeordnet ist.</summary>
      <returns vsli:raw="A textual representation of the enumerable collection or, if it is null, of the expression tree that is associated with this instance.">Eine Textdarstellung der zählbaren Auflistung oder, wenn diese NULL ist, eine Darstellung der Ausdrucksbaumstruktur, die dieser Instanz zugeordnet ist.</returns>
    </member>
    <member name="T:System.Linq.Queryable">
      <summary vsli:raw="Provides a set of &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) methods for querying data structures that implement &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt;.">Stellt einen Satz von <see langword="static" />-Methoden (<see langword="Shared" />-Methoden in Visual Basic) zum Abfragen von Datenstrukturen bereit, die <see cref="T:System.Linq.IQueryable`1" /> implementieren.</summary>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
      <summary vsli:raw="Applies an accumulator function over a sequence.">Wendet eine Akkumulatorfunktion auf eine Sequenz an</summary>
      <param name="source" vsli:raw="A sequence to aggregate over.">Eine Sequenz, die aggregiert werden soll.</param>
      <param name="func" vsli:raw="An accumulator function to apply to each element.">Eine Akkumulatorfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The final accumulator value.">Der letzte Akkumulatorwert.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;func&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="func" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
      <summary vsli:raw="Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.">Wendet eine Akkumulatorfunktion auf eine Sequenz an Der angegebene Startwert wird als erster Akkumulatorwert verwendet.</summary>
      <param name="source" vsli:raw="A sequence to aggregate over.">Eine Sequenz, die aggregiert werden soll.</param>
      <param name="seed" vsli:raw="The initial accumulator value.">Der erste Akkumulatorwert.</param>
      <param name="func" vsli:raw="An accumulator function to invoke on each element.">Eine Akkumulatorfunktion, die für jedes Element aufgerufen werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulator value.">Der Typ des Akkumulatorwerts.</typeparam>
      <returns vsli:raw="The final accumulator value.">Der letzte Akkumulatorwert.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;func&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="func" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
      <summary vsli:raw="Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.">Wendet eine Akkumulatorfunktion auf eine Sequenz an Der angegebene Startwert wird als erster Akkumulatorwert verwendet, und der Ergebniswert wird mit der angegebenen Funktion ausgewählt.</summary>
      <param name="source" vsli:raw="A sequence to aggregate over.">Eine Sequenz, die aggregiert werden soll.</param>
      <param name="seed" vsli:raw="The initial accumulator value.">Der erste Akkumulatorwert.</param>
      <param name="func" vsli:raw="An accumulator function to invoke on each element.">Eine Akkumulatorfunktion, die für jedes Element aufgerufen werden soll.</param>
      <param name="selector" vsli:raw="A function to transform the final accumulator value into the result value.">Eine Funktion zum Transformieren des letzten Akkumulatorwerts in den Ergebniswert.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulator value.">Der Typ des Akkumulatorwerts.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the resulting value.">Der Typ des Ergebniswerts.</typeparam>
      <returns vsli:raw="The transformed final accumulator value.">Der transformierte letzte Akkumulatorwert.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;func&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="func" /> oder <paramref name="selector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Determines whether all the elements of a sequence satisfy a condition.">Bestimmt, ob alle Elemente einer Sequenz eine Bedingung erfüllen.</summary>
      <param name="source" vsli:raw="A sequence whose elements to test for a condition.">Eine Sequenz, deren Elemente auf eine Bedingung überprüft werden sollen.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn jedes Element der Quellsequenz im angegebenen Prädikat erfolgreich überprüft wird oder wenn die Sequenz leer ist, andernfalls <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Determines whether a sequence contains any elements.">Bestimmt, ob eine Sequenz Elemente enthält.</summary>
      <param name="source" vsli:raw="A sequence to check for being empty.">Eine Sequenz, für die überprüft werden soll, ob sie leer ist.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the source sequence contains any elements; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Quellsequenz Elemente enthält, andernfalls <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Determines whether any element of a sequence satisfies a condition.">Bestimmt, ob ein Element einer Sequenz eine Bedingung erfüllt.</summary>
      <param name="source" vsli:raw="A sequence whose elements to test for a condition.">Eine Sequenz, deren Elemente auf eine Bedingung überprüft werden sollen.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any elements in the source sequence pass the test in the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn Elemente der Quellsequenz im angegebenen Prädikat erfolgreich überprüft werden, andernfalls <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Append``1(System.Linq.IQueryable{``0},``0)">
      <param name="source" vsli:raw="A queryable sequence." />
      <param name="element" vsli:raw="An element of type &lt;typeparamref name=&quot;TSource&quot; /&gt; to append to &lt;paramref name=&quot;source&quot; /&gt;." />
      <typeparam name="TSource" vsli:raw="The type of the elements in the queryable sequence." />
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
      <summary vsli:raw="Converts an &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; to an &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt;.">Konvertiert einen <see cref="T:System.Collections.IEnumerable" /> in einen <see cref="T:System.Linq.IQueryable" />.</summary>
      <param name="source" vsli:raw="A sequence to convert.">Eine zu konvertierende Sequenz.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; that represents the input sequence.">Ein <see cref="T:System.Linq.IQueryable" />, das die Eingabesequenz darstellt.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; does not implement &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; for some &lt;paramref name=&quot;T&quot; /&gt;.">Für einige <paramref name="source" /> wird <see cref="T:System.Collections.Generic.IEnumerable`1" /> von <paramref name="T" /> nicht implementiert.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Converts a generic &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to a generic &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt;.">Konvertiert ein generisches <see cref="T:System.Collections.Generic.IEnumerable`1" /> in ein generisches <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <param name="source" vsli:raw="A sequence to convert.">Eine zu konvertierende Sequenz.</param>
      <typeparam name="TElement" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that represents the input sequence.">Ein <see cref="T:System.Linq.IQueryable`1" />, das die Eingabesequenz darstellt.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Decimal" />-Werten.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to calculate the average of.">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, deren Durchschnitt berechnet werden soll.</param>
      <returns vsli:raw="The average of the sequence of values.">Der Durchschnitt der Sequenz von Werten.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Double" />-Werten.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values to calculate the average of.">Eine Sequenz von <see cref="T:System.Double" />-Werten, deren Durchschnitt berechnet werden soll.</param>
      <returns vsli:raw="The average of the sequence of values.">Der Durchschnitt der Sequenz von Werten.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int32" />-Werten.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to calculate the average of.">Eine Sequenz von <see cref="T:System.Int32" />-Werten, deren Durchschnitt berechnet werden soll.</param>
      <returns vsli:raw="The average of the sequence of values.">Der Durchschnitt der Sequenz von Werten.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int64" />-Werten.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to calculate the average of.">Eine Sequenz von <see cref="T:System.Int64" />-Werten, deren Durchschnitt berechnet werden soll.</param>
      <returns vsli:raw="The average of the sequence of values.">Der Durchschnitt der Sequenz von Werten.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL sein können.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to calculate the average of.">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL sein können, zum Berechnen des Durchschnitts.</param>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Der Durchschnitt der Sequenz von Werten, oder <see langword="null" />, wenn die Quellsequenz leer ist oder nur <see langword="null" />-Werte enthält.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Double" />-Werten, die NULL sein können.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values to calculate the average of.">Eine Sequenz von <see cref="T:System.Double" />-Werten, die NULL sein können, zum Berechnen des Durchschnitts.</param>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Der Durchschnitt der Sequenz von Werten, oder <see langword="null" />, wenn die Quellsequenz leer ist oder nur <see langword="null" />-Werte enthält.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int32" />-Werten, die NULL sein können.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to calculate the average of.">Eine Sequenz von <see cref="T:System.Int32" />-Werten, die NULL sein können, zum Berechnen des Durchschnitts.</param>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Der Durchschnitt der Sequenz von Werten, oder <see langword="null" />, wenn die Quellsequenz leer ist oder nur <see langword="null" />-Werte enthält.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int64" />-Werten, die NULL sein können.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to calculate the average of.">Eine Sequenz von <see cref="T:System.Int64" />-Werten, die NULL sein können, zum Berechnen des Durchschnitts.</param>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Der Durchschnitt der Sequenz von Werten, oder <see langword="null" />, wenn die Quellsequenz leer ist oder nur <see langword="null" />-Werte enthält.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Single" />-Werten, die NULL sein können.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values to calculate the average of.">Eine Sequenz von <see cref="T:System.Single" />-Werten, die NULL sein können, zum Berechnen des Durchschnitts.</param>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Der Durchschnitt der Sequenz von Werten, oder <see langword="null" />, wenn die Quellsequenz leer ist oder nur <see langword="null" />-Werte enthält.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Single" />-Werten.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values to calculate the average of.">Eine Sequenz von <see cref="T:System.Single" />-Werten, deren Durchschnitt berechnet werden soll.</param>
      <returns vsli:raw="The average of the sequence of values.">Der Durchschnitt der Sequenz von Werten.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Decimal" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <param name="source" vsli:raw="A sequence of values that are used to calculate an average.">Eine Sequenz von Werten, mit denen ein Durchschnittswert berechnet wird.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values.">Der Durchschnitt der Sequenz von Werten.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Double" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values.">Der Durchschnitt der Sequenz von Werten.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int32" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values.">Der Durchschnitt der Sequenz von Werten.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int64" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values.">Der Durchschnitt der Sequenz von Werten.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the &lt;paramref name=&quot;source&quot; /&gt; sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Der Durchschnitt der Sequenz von Werten oder <see langword="null" />, wenn die <paramref name="source" />-Sequenz leer ist oder nur <see langword="null" />-Werte enthält.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Double" />-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the &lt;paramref name=&quot;source&quot; /&gt; sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Der Durchschnitt der Sequenz von Werten oder <see langword="null" />, wenn die <paramref name="source" />-Sequenz leer ist oder nur <see langword="null" />-Werte enthält.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int32" />-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the &lt;paramref name=&quot;source&quot; /&gt; sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Der Durchschnitt der Sequenz von Werten oder <see langword="null" />, wenn die <paramref name="source" />-Sequenz leer ist oder nur <see langword="null" />-Werte enthält.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int64" />-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the &lt;paramref name=&quot;source&quot; /&gt; sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Der Durchschnitt der Sequenz von Werten oder <see langword="null" />, wenn die <paramref name="source" />-Sequenz leer ist oder nur <see langword="null" />-Werte enthält.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Single" />-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the &lt;paramref name=&quot;source&quot; /&gt; sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Der Durchschnitt der Sequenz von Werten oder <see langword="null" />, wenn die <paramref name="source" />-Sequenz leer ist oder nur <see langword="null" />-Werte enthält.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Single" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values.">Der Durchschnitt der Sequenz von Werten.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
      <summary vsli:raw="Converts the elements of an &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; to the specified type.">Konvertiert die Elemente einer <see cref="T:System.Linq.IQueryable" /> in den angegebenen Typ.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; that contains the elements to be converted.">Das <see cref="T:System.Linq.IQueryable" />, das die zu konvertierenden Elemente enthält.</param>
      <typeparam name="TResult" vsli:raw="The type to convert the elements of &lt;paramref name=&quot;source&quot; /&gt; to.">Der Typ, in den die Elemente von <paramref name="source" /> konvertiert werden sollen.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains each element of the source sequence converted to the specified type.">Eine <see cref="T:System.Linq.IQueryable`1" />, die jedes in den angegebenen Typ konvertierte Element der Quellsequenz enthält.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="An element in the sequence cannot be cast to type &lt;paramref name=&quot;TResult&quot; /&gt;.">Ein Element in der Sequenz kann nicht in den Typ <paramref name="TResult" /> umgewandelt werden.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Concatenates two sequences.">Verkettet zwei Sequenzen</summary>
      <param name="source1" vsli:raw="The first sequence to concatenate.">Die erste zu verkettende Sequenz.</param>
      <param name="source2" vsli:raw="The sequence to concatenate to the first sequence.">Die Sequenz, die mit der ersten Sequenz verkettet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the concatenated elements of the two input sequences.">Ein <see cref="T:System.Linq.IQueryable`1" />, das die verketteten Elemente der beiden Eingabesequenzen enthält.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> oder <paramref name="source2" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
      <summary vsli:raw="Determines whether a sequence contains a specified element by using the default equality comparer.">Bestimmt mithilfe des Standardgleichheitsvergleichs, ob eine Sequenz ein angegebenes Element enthält</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; in which to locate &lt;paramref name=&quot;item&quot; /&gt;.">Ein <see cref="T:System.Linq.IQueryable`1" />, in dem <paramref name="item" /> gesucht werden soll.</param>
      <param name="item" vsli:raw="The object to locate in the sequence.">Das Objekt, das in der Sequenz gesucht werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input sequence contains an element that has the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Eingabesequenz ein Element mit dem angegebenen Wert enthält, andernfalls <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Determines whether a sequence contains a specified element by using a specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Bestimmt mithilfe eines angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, ob eine Sequenz ein angegebenes Element enthält</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; in which to locate &lt;paramref name=&quot;item&quot; /&gt;.">Ein <see cref="T:System.Linq.IQueryable`1" />, in dem <paramref name="item" /> gesucht werden soll.</param>
      <param name="item" vsli:raw="The object to locate in the sequence.">Das Objekt, das in der Sequenz gesucht werden soll.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input sequence contains an element that has the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Eingabesequenz ein Element mit dem angegebenen Wert enthält, andernfalls <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the number of elements in a sequence.">Gibt die Anzahl der Elemente in einer Sequenz zurück</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the elements to be counted.">Das <see cref="T:System.Linq.IQueryable`1" />, das die zu zählenden Elemente enthält.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The number of elements in the input sequence.">Die Anzahl der Elemente in der Eingabesequenz.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The number of elements in &lt;paramref name=&quot;source&quot; /&gt; is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns the number of elements in the specified sequence that satisfies a condition.">Gibt die Anzahl der Elemente in der angegebenen Sequenz zurück, die eine Bedingung erfüllen.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the elements to be counted.">Ein <see cref="T:System.Linq.IQueryable`1" />, das die zu zählenden Elemente enthält</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The number of elements in the sequence that satisfies the condition in the predicate function.">Die Anzahl von Elementen in der Sequenz, die die Bedingung in der Prädikatfunktion erfüllen.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The number of elements in &lt;paramref name=&quot;source&quot; /&gt; is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.">Gibt die Elemente der angegebenen Sequenz oder den Standardwert des Typparameters in einer Singletonauflistung zurück, wenn die Sequenz leer ist</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return a default value for if empty.">Das <see cref="T:System.Linq.IQueryable`1" />, für das ein Standardwert zurückgegeben soll, wenn die Sequenz leer ist.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains &lt;see langword=&quot;default&quot; /&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if &lt;paramref name=&quot;source&quot; /&gt; is empty; otherwise, &lt;paramref name=&quot;source&quot; /&gt;.">Ein <see cref="T:System.Linq.IQueryable`1" />, das <see langword="default" />(<paramref name="TSource" />) enthält, wenn <paramref name="source" /> leer ist, andernfalls <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
      <summary vsli:raw="Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.">Gibt die Elemente der angegebenen Sequenz oder den angegebenen Wert in einer Singletonauflistung zurück, wenn die Sequenz leer ist.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return the specified value for if empty.">Das <see cref="T:System.Linq.IQueryable`1" />, für das der angegebene Wert zurückgegeben soll, wenn die Sequenz leer ist.</param>
      <param name="defaultValue" vsli:raw="The value to return if the sequence is empty.">Der Wert, der zurückgegeben werden soll, wenn die Sequenz leer ist.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains &lt;paramref name=&quot;defaultValue&quot; /&gt; if &lt;paramref name=&quot;source&quot; /&gt; is empty; otherwise, &lt;paramref name=&quot;source&quot; /&gt;.">Ein <see cref="T:System.Linq.IQueryable`1" />, das <paramref name="defaultValue" /> enthält, wenn <paramref name="source" /> leer ist, andernfalls <paramref name="source" /></returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns distinct elements from a sequence by using the default equality comparer to compare values.">Gibt mithilfe des Standardgleichheitsvergleichs zum Vergleichen von Werten unterschiedliche Elemente aus einer Sequenz zurück</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to remove duplicates from.">Das <see cref="T:System.Linq.IQueryable`1" />, aus dem Duplikate entfernt werden sollen.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains distinct elements from &lt;paramref name=&quot;source&quot; /&gt;.">Ein <see cref="T:System.Linq.IQueryable`1" />, das unterschiedliche Elemente aus <paramref name="source" /> enthält.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Returns distinct elements from a sequence by using a specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Gibt mithilfe eines angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten unterschiedliche Elemente aus einer Sequenz zurück</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to remove duplicates from.">Das <see cref="T:System.Linq.IQueryable`1" />, aus dem Duplikate entfernt werden sollen.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains distinct elements from &lt;paramref name=&quot;source&quot; /&gt;.">Ein <see cref="T:System.Linq.IQueryable`1" />, das unterschiedliche Elemente aus <paramref name="source" /> enthält.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="comparer" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in a sequence.">Gibt das Element an einem angegebenen Index in einer Sequenz zurück</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return an element from.">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem ein Element zurückgegeben werden soll</param>
      <param name="index" vsli:raw="The zero-based index of the element to retrieve.">Der auf 0 (null) basierende Index des abzurufenden Elements.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The element at the specified position in &lt;paramref name=&quot;source&quot; /&gt;.">Das Element an der angegebenen Position in <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> ist kleiner als Null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in a sequence or a default value if the index is out of range.">Gibt das Element an einem angegebenen Index in einer Sequenz oder einen Standardwert zurück, wenn der Index außerhalb des gültigen Bereichs liegt.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return an element from.">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem ein Element zurückgegeben werden soll</param>
      <param name="index" vsli:raw="The zero-based index of the element to retrieve.">Der auf 0 (null) basierende Index des abzurufenden Elements.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;c&gt;default&lt;/c&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if &lt;paramref name=&quot;index&quot; /&gt; is outside the bounds of &lt;paramref name=&quot;source&quot; /&gt;; otherwise, the element at the specified position in &lt;paramref name=&quot;source&quot; /&gt;.">
        <c>default</c>(<paramref name="TSource" />), wenn <paramref name="index" /> außerhalb der Begrenzungen von <paramref name="source" /> liegt, andernfalls das Element an der angegebenen Position in <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Produces the set difference of two sequences by using the default equality comparer to compare values.">Erzeugt die Differenzmenge zweier Sequenzen mithilfe des Standardgleichheitsvergleichs zum Vergleichen von Werten</summary>
      <param name="source1" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements that are not also in &lt;paramref name=&quot;source2&quot; /&gt; will be returned.">Es wird ein <see cref="T:System.Linq.IQueryable`1" /> zurückgegeben, dessen Elemente nicht auch in <paramref name="source2" /> enthalten sind.</param>
      <param name="source2" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements that also occur in the first sequence will not appear in the returned sequence.">Die Rückgabesequenz enthält kein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente auch in der ersten Sequenz vorhanden sind.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the set difference of the two sequences.">Ein <see cref="T:System.Linq.IQueryable`1" />, das die Differenzmenge der beiden Sequenzen enthält.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> oder <paramref name="source2" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Produces the set difference of two sequences by using the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Erzeugt mithilfe des angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> die Differenzmenge zweier Sequenzen zum Vergleichen von Werten</summary>
      <param name="source1" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements that are not also in &lt;paramref name=&quot;source2&quot; /&gt; will be returned.">Es wird ein <see cref="T:System.Linq.IQueryable`1" /> zurückgegeben, dessen Elemente nicht auch in <paramref name="source2" /> enthalten sind.</param>
      <param name="source2" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements that also occur in the first sequence will not appear in the returned sequence.">Die Rückgabesequenz enthält kein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente auch in der ersten Sequenz vorhanden sind.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the set difference of the two sequences.">Ein <see cref="T:System.Linq.IQueryable`1" />, das die Differenzmenge der beiden Sequenzen enthält.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> oder <paramref name="source2" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the first element of a sequence.">Gibt das erste Element einer Sequenz zurück</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return the first element of.">Das <see cref="T:System.Linq.IQueryable`1" />, dessen erstes Element zurückgegeben werden soll</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The first element in &lt;paramref name=&quot;source&quot; /&gt;.">Das erste Element in <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source sequence is empty.">Die Quellsequenz ist leer.</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns the first element of a sequence that satisfies a specified condition.">Gibt das erste Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return an element from.">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem ein Element zurückgegeben werden soll</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The first element in &lt;paramref name=&quot;source&quot; /&gt; that passes the test in &lt;paramref name=&quot;predicate&quot; /&gt;.">Das erste Element in <paramref name="source" />, das in <paramref name="predicate" /> erfolgreich überprüft wird.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The source sequence is empty.">Kein Element erfüllt die Bedingung in <paramref name="predicate" />.  

oder - 
Die Quellsequenz ist leer.</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the first element of a sequence, or a default value if the sequence contains no elements.">Gibt das erste Element einer Sequenz oder einen Standardwert zurück, wenn die Sequenz keine Elemente enthält.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return the first element of.">Das <see cref="T:System.Linq.IQueryable`1" />, dessen erstes Element zurückgegeben werden soll</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;c&gt;default&lt;/c&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if &lt;paramref name=&quot;source&quot; /&gt; is empty; otherwise, the first element in &lt;paramref name=&quot;source&quot; /&gt;.">
        <c>default</c>(<paramref name="TSource" />), wenn <paramref name="source" /> leer ist, andernfalls das erste Element in <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.">Gibt das erste Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt, oder einen Standardwert, wenn ein solches Element nicht gefunden wird.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return an element from.">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem ein Element zurückgegeben werden soll</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;c&gt;default&lt;/c&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if &lt;paramref name=&quot;source&quot; /&gt; is empty or if no element passes the test specified by &lt;paramref name=&quot;predicate&quot; /&gt;; otherwise, the first element in &lt;paramref name=&quot;source&quot; /&gt; that passes the test specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">
        <c>default</c>(<paramref name="TSource" />), wenn <paramref name="source" /> leer ist oder wenn kein Element die von <paramref name="predicate" /> angegebene Überprüfung besteht. Andernfalls das erste Element in <paramref name="source" />, das die von <paramref name="predicate" /> angegebene Überprüfung besteht.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function.">Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente gruppiert werden sollen</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">Der Typ des Schlüssels, der von der in <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <returns vsli:raw="An &lt;c&gt;IQueryable&amp;lt;IGrouping&amp;lt;TKey, TSource&amp;gt;&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;IQueryable(Of IGrouping(Of TKey, TSource))&lt;/c&gt; in Visual Basic where each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt; object contains a sequence of objects and a key.">Eine <c>IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> in C# oder eine <c>IQueryable(Of IGrouping(Of TKey, TSource))</c> in Visual Basic, wobei jede <see cref="T:System.Linq.IGrouping`2" />-Schnittstelle eine Sequenz von Objekten und einen Schlüssel enthält.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.">Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und vergleicht die Schlüssel mithilfe eines angegebenen Vergleichs</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente gruppiert werden sollen</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">Der Typ des Schlüssels, der von der in <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <returns vsli:raw="An &lt;c&gt;IQueryable&amp;lt;IGrouping&amp;lt;TKey, TSource&amp;gt;&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;IQueryable(Of IGrouping(Of TKey, TSource))&lt;/c&gt; in Visual Basic where each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt; contains a sequence of objects and a key.">Eine <c>IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> in C# oder eine <c>IQueryable(Of IGrouping(Of TKey, TSource))</c> in Visual Basic, wobei jede <see cref="T:System.Linq.IGrouping`2" /> eine Sequenz von Objekten und einen Schlüssel enthält.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="comparer" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.">Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und projiziert die Elemente für jede Gruppe mithilfe einer angegebenen Funktion</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente gruppiert werden sollen</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</param>
      <param name="elementSelector" vsli:raw="A function to map each source element to an element in an &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Eine Funktion, mit der jedes Quellelement einem Element in einem <see cref="T:System.Linq.IGrouping`2" /> zugeordnet wird.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">Der Typ des Schlüssels, der von der in <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements in each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Der Typ der Elemente in jedem <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <returns vsli:raw="An &lt;c&gt;IQueryable&amp;lt;IGrouping&amp;lt;TKey, TElement&amp;gt;&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;IQueryable(Of IGrouping(Of TKey, TElement))&lt;/c&gt; in Visual Basic where each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt; contains a sequence of objects of type &lt;paramref name=&quot;TElement&quot; /&gt; and a key.">Eine <c>IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> in C# oder eine <c>IQueryable(Of IGrouping(Of TKey, TElement))</c> in Visual Basic, wobei jede <see cref="T:System.Linq.IGrouping`2" />-Schnittstelle eine Sequenz von Objekten vom Typ <paramref name="TElement" /> und einen Schlüssel enthält.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;elementSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="elementSelector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Groups the elements of a sequence and projects the elements for each group by using a specified function. Key values are compared by using a specified comparer.">Gruppiert die Elemente einer Sequenz und projiziert die Elemente jeder Gruppe mithilfe einer angegebenen Funktion. Schlüsselwerte werden mithilfe eines angegebenen Vergleichs verglichen.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente gruppiert werden sollen</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</param>
      <param name="elementSelector" vsli:raw="A function to map each source element to an element in an &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Eine Funktion, mit der jedes Quellelement einem Element in einem <see cref="T:System.Linq.IGrouping`2" /> zugeordnet wird.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">Der Typ des Schlüssels, der von der in <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements in each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Der Typ der Elemente in jedem <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <returns vsli:raw="An &lt;c&gt;IQueryable&amp;lt;IGrouping&amp;lt;TKey, TElement&amp;gt;&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;IQueryable(Of IGrouping(Of TKey, TElement))&lt;/c&gt; in Visual Basic where each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt; contains a sequence of objects of type &lt;paramref name=&quot;TElement&quot; /&gt; and a key.">Eine <c>IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> in C# oder eine <c>IQueryable(Of IGrouping(Of TKey, TElement))</c> in Visual Basic, wobei jede <see cref="T:System.Linq.IGrouping`2" />-Schnittstelle eine Sequenz von Objekten vom Typ <paramref name="TElement" /> und einen Schlüssel enthält.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;elementSelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="keySelector" />, <paramref name="elementSelector" /> oder <paramref name="comparer" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.">Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und erstellt aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente gruppiert werden sollen</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</param>
      <param name="resultSelector" vsli:raw="A function to create a result value from each group.">Eine Funktion, mit der aus jeder Gruppe ein Ergebniswert erstellt wird.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">Der Typ des Schlüssels, der von der in <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result value returned by &lt;paramref name=&quot;resultSelector&quot; /&gt;.">Der Typ des von <paramref name="resultSelector" /> zurückgegebenen Ergebniswerts.</typeparam>
      <returns vsli:raw="An &lt;c&gt;T:System.Linq.IQueryable`1&lt;/c&gt; that has a type argument of &lt;paramref name=&quot;TResult&quot; /&gt; and where each element represents a projection over a group and its key.">Eine <c>T:System.Linq.IQueryable`1</c>-Schnittstelle, die über das Typargument <paramref name="TResult" /> verfügt und in der jedes Element eine Projektion über einer Gruppe und ihrem Schlüssel darstellt.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="resultSelector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer.">Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und erstellt aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert. Schlüssel werden mithilfe eines angegebenen Vergleichs verglichen.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente gruppiert werden sollen</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</param>
      <param name="resultSelector" vsli:raw="A function to create a result value from each group.">Eine Funktion, mit der aus jeder Gruppe ein Ergebniswert erstellt wird.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">Der Typ des Schlüssels, der von der in <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result value returned by &lt;paramref name=&quot;resultSelector&quot; /&gt;.">Der Typ des von <paramref name="resultSelector" /> zurückgegebenen Ergebniswerts.</typeparam>
      <returns vsli:raw="An &lt;c&gt;T:System.Linq.IQueryable`1&lt;/c&gt; that has a type argument of &lt;paramref name=&quot;TResult&quot; /&gt; and where each element represents a projection over a group and its key.">Eine <c>T:System.Linq.IQueryable`1</c>-Schnittstelle, die über das Typargument <paramref name="TResult" /> verfügt und in der jedes Element eine Projektion über einer Gruppe und ihrem Schlüssel darstellt.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="keySelector" />, <paramref name="resultSelector" /> oder <paramref name="comparer" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.">Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und erstellt aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert. Die Elemente jeder Gruppe werden mithilfe einer angegebenen Funktion projiziert.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente gruppiert werden sollen</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</param>
      <param name="elementSelector" vsli:raw="A function to map each source element to an element in an &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Eine Funktion, mit der jedes Quellelement einem Element in einem <see cref="T:System.Linq.IGrouping`2" /> zugeordnet wird.</param>
      <param name="resultSelector" vsli:raw="A function to create a result value from each group.">Eine Funktion, mit der aus jeder Gruppe ein Ergebniswert erstellt wird.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">Der Typ des Schlüssels, der von der in <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements in each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Der Typ der Elemente in jedem <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result value returned by &lt;paramref name=&quot;resultSelector&quot; /&gt;.">Der Typ des von <paramref name="resultSelector" /> zurückgegebenen Ergebniswerts.</typeparam>
      <returns vsli:raw="An &lt;c&gt;T:System.Linq.IQueryable`1&lt;/c&gt; that has a type argument of &lt;paramref name=&quot;TResult&quot; /&gt; and where each element represents a projection over a group and its key.">Eine <c>T:System.Linq.IQueryable`1</c>-Schnittstelle, die über das Typargument <paramref name="TResult" /> verfügt und in der jedes Element eine Projektion über einer Gruppe und ihrem Schlüssel darstellt.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;elementSelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="keySelector" />, <paramref name="elementSelector" /> oder <paramref name="resultSelector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer and the elements of each group are projected by using a specified function.">Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und erstellt aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert. Schlüssel werden mithilfe eines angegebenen Vergleichs verglichen, und die Elemente jeder Gruppe werden mithilfe einer angegebenen Funktion projiziert.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente gruppiert werden sollen</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</param>
      <param name="elementSelector" vsli:raw="A function to map each source element to an element in an &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Eine Funktion, mit der jedes Quellelement einem Element in einem <see cref="T:System.Linq.IGrouping`2" /> zugeordnet wird.</param>
      <param name="resultSelector" vsli:raw="A function to create a result value from each group.">Eine Funktion, mit der aus jeder Gruppe ein Ergebniswert erstellt wird.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">Der Typ des Schlüssels, der von der in <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements in each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Der Typ der Elemente in jedem <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result value returned by &lt;paramref name=&quot;resultSelector&quot; /&gt;.">Der Typ des von <paramref name="resultSelector" /> zurückgegebenen Ergebniswerts.</typeparam>
      <returns vsli:raw="An &lt;c&gt;T:System.Linq.IQueryable`1&lt;/c&gt; that has a type argument of &lt;paramref name=&quot;TResult&quot; /&gt; and where each element represents a projection over a group and its key.">Eine <c>T:System.Linq.IQueryable`1</c>-Schnittstelle, die über das Typargument <paramref name="TResult" /> verfügt und in der jedes Element eine Projektion über einer Gruppe und ihrem Schlüssel darstellt.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;elementSelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="keySelector" />, <paramref name="elementSelector" />, <paramref name="resultSelector" /> oder <paramref name="comparer" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
      <summary vsli:raw="Correlates the elements of two sequences based on key equality and groups the results. The default equality comparer is used to compare keys.">Korreliert die Elemente von zwei Sequenzen anhand der Gleichheit der Schlüssel und gruppiert die Ergebnisse Schlüssel werden mithilfe des Standardgleichheitsvergleichs verglichen.</summary>
      <param name="outer" vsli:raw="The first sequence to join.">Die erste zu verknüpfende Sequenz.</param>
      <param name="inner" vsli:raw="The sequence to join to the first sequence.">Die Sequenz, die mit der ersten Sequenz verknüpft werden soll.</param>
      <param name="outerKeySelector" vsli:raw="A function to extract the join key from each element of the first sequence.">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der ersten Sequenz.</param>
      <param name="innerKeySelector" vsli:raw="A function to extract the join key from each element of the second sequence.">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der zweiten Sequenz.</param>
      <param name="resultSelector" vsli:raw="A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.">Eine Funktion zum Erstellen eines Ergebniselements anhand eines Elements aus der ersten Sequenz und einer Auflistung von übereinstimmenden Elementen aus der zweiten Sequenz.</param>
      <typeparam name="TOuter" vsli:raw="The type of the elements of the first sequence.">Der Typ der Elemente der ersten Sequenz.</typeparam>
      <typeparam name="TInner" vsli:raw="The type of the elements of the second sequence.">Der Typ der Elemente der zweiten Sequenz.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys returned by the key selector functions.">Der Typ der von den Schlüsselauswahlfunktionen zurückgegebenen Schlüssel.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result elements.">Der Typ der Ergebniselemente.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements of type &lt;paramref name=&quot;TResult&quot; /&gt; obtained by performing a grouped join on two sequences.">Ein <see cref="T:System.Linq.IQueryable`1" />, das Elemente vom Typ <paramref name="TResult" /> enthält, die durch Ausführen eines Gruppenjoins von zwei Sequenzen ermittelt werden.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;outer&quot; /&gt; or &lt;paramref name=&quot;inner&quot; /&gt; or &lt;paramref name=&quot;outerKeySelector&quot; /&gt; or &lt;paramref name=&quot;innerKeySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKeySelector" />, <paramref name="innerKeySelector" /> oder <paramref name="resultSelector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Correlates the elements of two sequences based on key equality and groups the results. A specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; is used to compare keys.">Korreliert die Elemente von zwei Sequenzen anhand der Gleichheit der Schlüssel und gruppiert die Ergebnisse Schlüssel werden mithilfe eines angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> verglichen.</summary>
      <param name="outer" vsli:raw="The first sequence to join.">Die erste zu verknüpfende Sequenz.</param>
      <param name="inner" vsli:raw="The sequence to join to the first sequence.">Die Sequenz, die mit der ersten Sequenz verknüpft werden soll.</param>
      <param name="outerKeySelector" vsli:raw="A function to extract the join key from each element of the first sequence.">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der ersten Sequenz.</param>
      <param name="innerKeySelector" vsli:raw="A function to extract the join key from each element of the second sequence.">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der zweiten Sequenz.</param>
      <param name="resultSelector" vsli:raw="A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.">Eine Funktion zum Erstellen eines Ergebniselements anhand eines Elements aus der ersten Sequenz und einer Auflistung von übereinstimmenden Elementen aus der zweiten Sequenz.</param>
      <param name="comparer" vsli:raw="A comparer to hash and compare keys.">Ein Vergleich zum Hashen und Vergleichen von Schlüsseln.</param>
      <typeparam name="TOuter" vsli:raw="The type of the elements of the first sequence.">Der Typ der Elemente der ersten Sequenz.</typeparam>
      <typeparam name="TInner" vsli:raw="The type of the elements of the second sequence.">Der Typ der Elemente der zweiten Sequenz.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys returned by the key selector functions.">Der Typ der von den Schlüsselauswahlfunktionen zurückgegebenen Schlüssel.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result elements.">Der Typ der Ergebniselemente.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements of type &lt;paramref name=&quot;TResult&quot; /&gt; obtained by performing a grouped join on two sequences.">Ein <see cref="T:System.Linq.IQueryable`1" />, das Elemente vom Typ <paramref name="TResult" /> enthält, die durch Ausführen eines Gruppenjoins von zwei Sequenzen ermittelt werden.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;outer&quot; /&gt; or &lt;paramref name=&quot;inner&quot; /&gt; or &lt;paramref name=&quot;outerKeySelector&quot; /&gt; or &lt;paramref name=&quot;innerKeySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKeySelector" />, <paramref name="innerKeySelector" /> oder <paramref name="resultSelector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Produces the set intersection of two sequences by using the default equality comparer to compare values.">Erzeugt die Schnittmenge zweier Sequenzen mithilfe des Standardgleichheitsvergleichs zum Vergleichen von Werten</summary>
      <param name="source1" vsli:raw="A sequence whose distinct elements that also appear in &lt;paramref name=&quot;source2&quot; /&gt; are returned.">Eine Sequenz, deren unterschiedliche Elemente, die auch in <paramref name="source2" /> vorhanden sind, zurückgegeben werden.</param>
      <param name="source2" vsli:raw="A sequence whose distinct elements that also appear in the first sequence are returned.">Eine Sequenz, deren unterschiedliche Elemente, die auch in der ersten Sequenz vorhanden sind, zurückgegeben werden.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <returns vsli:raw="A sequence that contains the set intersection of the two sequences.">Eine Sequenz, die die Schnittmenge der beiden Sequenzen enthält.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> oder <paramref name="source2" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Produces the set intersection of two sequences by using the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Erzeugt mithilfe des angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten die Schnittmenge von zwei Sequenzen</summary>
      <param name="source1" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose distinct elements that also appear in &lt;paramref name=&quot;source2&quot; /&gt; are returned.">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen unterschiedliche Elemente, die auch in <paramref name="source2" /> vorhanden sind, zurückgegeben werden.</param>
      <param name="source2" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose distinct elements that also appear in the first sequence are returned.">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen unterschiedliche Elemente, die auch in der ersten Sequenz vorhanden sind, zurückgegeben werden.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the set intersection of the two sequences.">Ein <see cref="T:System.Linq.IQueryable`1" />, das die Schnittmenge der beiden Sequenzen enthält.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> oder <paramref name="source2" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
      <summary vsli:raw="Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.">Korreliert die Elemente von zwei Sequenzen auf der Grundlage von übereinstimmenden Schlüsseln Schlüssel werden mithilfe des Standardgleichheitsvergleichs verglichen.</summary>
      <param name="outer" vsli:raw="The first sequence to join.">Die erste zu verknüpfende Sequenz.</param>
      <param name="inner" vsli:raw="The sequence to join to the first sequence.">Die Sequenz, die mit der ersten Sequenz verknüpft werden soll.</param>
      <param name="outerKeySelector" vsli:raw="A function to extract the join key from each element of the first sequence.">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der ersten Sequenz.</param>
      <param name="innerKeySelector" vsli:raw="A function to extract the join key from each element of the second sequence.">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der zweiten Sequenz.</param>
      <param name="resultSelector" vsli:raw="A function to create a result element from two matching elements.">Eine Funktion zum Erstellen eines Ergebniselements aus zwei übereinstimmenden Elementen.</param>
      <typeparam name="TOuter" vsli:raw="The type of the elements of the first sequence.">Der Typ der Elemente der ersten Sequenz.</typeparam>
      <typeparam name="TInner" vsli:raw="The type of the elements of the second sequence.">Der Typ der Elemente der zweiten Sequenz.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys returned by the key selector functions.">Der Typ der von den Schlüsselauswahlfunktionen zurückgegebenen Schlüssel.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result elements.">Der Typ der Ergebniselemente.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that has elements of type &lt;paramref name=&quot;TResult&quot; /&gt; obtained by performing an inner join on two sequences.">Ein <see cref="T:System.Linq.IQueryable`1" />, für das Elemente vom Typ <paramref name="TResult" /> durch Ausführen eines inneren Joins von zwei Sequenzen ermittelt werden.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;outer&quot; /&gt; or &lt;paramref name=&quot;inner&quot; /&gt; or &lt;paramref name=&quot;outerKeySelector&quot; /&gt; or &lt;paramref name=&quot;innerKeySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKeySelector" />, <paramref name="innerKeySelector" /> oder <paramref name="resultSelector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Correlates the elements of two sequences based on matching keys. A specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; is used to compare keys.">Korreliert die Elemente von zwei Sequenzen auf der Grundlage von übereinstimmenden Schlüsseln Schlüssel werden mithilfe eines angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> verglichen.</summary>
      <param name="outer" vsli:raw="The first sequence to join.">Die erste zu verknüpfende Sequenz.</param>
      <param name="inner" vsli:raw="The sequence to join to the first sequence.">Die Sequenz, die mit der ersten Sequenz verknüpft werden soll.</param>
      <param name="outerKeySelector" vsli:raw="A function to extract the join key from each element of the first sequence.">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der ersten Sequenz.</param>
      <param name="innerKeySelector" vsli:raw="A function to extract the join key from each element of the second sequence.">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der zweiten Sequenz.</param>
      <param name="resultSelector" vsli:raw="A function to create a result element from two matching elements.">Eine Funktion zum Erstellen eines Ergebniselements aus zwei übereinstimmenden Elementen.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to hash and compare keys.">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Hashen und Vergleichen von Schlüsseln.</param>
      <typeparam name="TOuter" vsli:raw="The type of the elements of the first sequence.">Der Typ der Elemente der ersten Sequenz.</typeparam>
      <typeparam name="TInner" vsli:raw="The type of the elements of the second sequence.">Der Typ der Elemente der zweiten Sequenz.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys returned by the key selector functions.">Der Typ der von den Schlüsselauswahlfunktionen zurückgegebenen Schlüssel.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result elements.">Der Typ der Ergebniselemente.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that has elements of type &lt;paramref name=&quot;TResult&quot; /&gt; obtained by performing an inner join on two sequences.">Ein <see cref="T:System.Linq.IQueryable`1" />, für das Elemente vom Typ <paramref name="TResult" /> durch Ausführen eines inneren Joins von zwei Sequenzen ermittelt werden.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;outer&quot; /&gt; or &lt;paramref name=&quot;inner&quot; /&gt; or &lt;paramref name=&quot;outerKeySelector&quot; /&gt; or &lt;paramref name=&quot;innerKeySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKeySelector" />, <paramref name="innerKeySelector" /> oder <paramref name="resultSelector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the last element in a sequence.">Gibt das letzte Element in einer Sequenz zurück.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return the last element of.">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen letztes Element zurückgegeben werden soll</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The value at the last position in &lt;paramref name=&quot;source&quot; /&gt;.">Der Wert an der letzten Position <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source sequence is empty.">Die Quellsequenz ist leer.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a specified condition.">Gibt das letzte Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return an element from.">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem ein Element zurückgegeben werden soll</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The last element in &lt;paramref name=&quot;source&quot; /&gt; that passes the test specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">Das letzte Element in <paramref name="source" />, das die von <paramref name="predicate" /> angegebene Überprüfung besteht.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The source sequence is empty.">Kein Element erfüllt die Bedingung in <paramref name="predicate" />.  

oder - 
Die Quellsequenz ist leer.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the last element in a sequence, or a default value if the sequence contains no elements.">Gibt das letzte Element in einer Sequenz zurück, oder einen Standardwert, wenn die Sequenz keine Elemente enthält.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return the last element of.">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen letztes Element zurückgegeben werden soll</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;c&gt;default&lt;/c&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if &lt;paramref name=&quot;source&quot; /&gt; is empty; otherwise, the last element in &lt;paramref name=&quot;source&quot; /&gt;.">
        <c>default</c>(<paramref name="TSource" />), wenn <paramref name="source" /> leer ist, andernfalls das letzte Element in <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.">Gibt das letzte Element einer Sequenz, das eine Bedingung erfüllt, oder einen Standardwert zurück, wenn ein solches Element nicht gefunden wird.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return an element from.">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem ein Element zurückgegeben werden soll</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;c&gt;default&lt;/c&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if &lt;paramref name=&quot;source&quot; /&gt; is empty or if no elements pass the test in the predicate function; otherwise, the last element of &lt;paramref name=&quot;source&quot; /&gt; that passes the test in the predicate function.">
        <c>default</c>(<paramref name="TSource" />), wenn <paramref name="source" /> leer ist oder wenn keine Elemente von der Prädikatfunktion erfolgreich überprüft werden. Andernfalls das letzte Element von <paramref name="source" />, das von der Prädikatfunktion erfolgreich überprüft wird.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Int64&quot; /&gt; that represents the total number of elements in a sequence.">Gibt ein <see cref="T:System.Int64" /> zurück, das die Gesamtanzahl der Elemente in einer Sequenz darstellt</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the elements to be counted.">Ein <see cref="T:System.Linq.IQueryable`1" />, das die zu zählenden Elemente enthält</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The number of elements in &lt;paramref name=&quot;source&quot; /&gt;.">Die Anzahl von Elementen in <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The number of elements exceeds &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">Die Anzahl der Elemente überschreitet <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Int64&quot; /&gt; that represents the number of elements in a sequence that satisfy a condition.">Gibt ein <see cref="T:System.Int64" /> zurück, das die Anzahl der Elemente in einer Sequenz darstellt, die eine Bedingung erfüllen.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the elements to be counted.">Ein <see cref="T:System.Linq.IQueryable`1" />, das die zu zählenden Elemente enthält</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The number of elements in &lt;paramref name=&quot;source&quot; /&gt; that satisfy the condition in the predicate function.">Die Anzahl der Elemente in <paramref name="source" />, die die Bedingung in der Prädikatfunktion erfüllen.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The number of matching elements exceeds &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">Die Anzahl der übereinstimmenden Elemente überschreitet <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the maximum value in a generic &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt;.">Gibt den Höchstwert in einem generischen <see cref="T:System.Linq.IQueryable`1" /> zurück.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum of.">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The maximum value in the sequence.">Der Höchstwert in der Sequenz.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Invokes a projection function on each element of a generic &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; and returns the maximum resulting value.">Ruft für jedes Element eines generischen <see cref="T:System.Linq.IQueryable`1" /> eine Projektionsfunktion auf und gibt den höchsten Ergebniswert zurück.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum of.">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the value returned by the function represented by &lt;paramref name=&quot;selector&quot; /&gt;.">Der Typ des Werts, der von der durch <paramref name="selector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <returns vsli:raw="The maximum value in the sequence.">Der Höchstwert in der Sequenz.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the minimum value of a generic &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt;.">Gibt den Mindestwert eines generischen <see cref="T:System.Linq.IQueryable`1" /> zurück.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum of.">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The minimum value in the sequence.">Der Mindestwert in der Sequenz.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Invokes a projection function on each element of a generic &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; and returns the minimum resulting value.">Ruft für jedes Element eines generischen <see cref="T:System.Linq.IQueryable`1" /> eine Projektionsfunktion auf und gibt den niedrigsten Ergebniswert zurück.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum of.">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the value returned by the function represented by &lt;paramref name=&quot;selector&quot; /&gt;.">Der Typ des Werts, der von der durch <paramref name="selector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <returns vsli:raw="The minimum value in the sequence.">Der Mindestwert in der Sequenz.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
      <summary vsli:raw="Filters the elements of an &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; based on a specified type.">Filtert die Elemente eines <see cref="T:System.Linq.IQueryable" /> anhand eines angegebenen Typs</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; whose elements to filter.">Ein <see cref="T:System.Linq.IQueryable" />, dessen Elemente gefiltert werden sollen.</param>
      <typeparam name="TResult" vsli:raw="The type to filter the elements of the sequence on.">Der Typ, nach dem die Elemente der Sequenz gefiltert werden sollen.</typeparam>
      <returns vsli:raw="A collection that contains the elements from &lt;paramref name=&quot;source&quot; /&gt; that have type &lt;paramref name=&quot;TResult&quot; /&gt;.">Eine Auflistung, die die Elemente aus <paramref name="source" /> mit dem Typ <paramref name="TResult" /> enthält.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Sorts the elements of a sequence in ascending order according to a key.">Sortiert die Elemente einer Sequenz in aufsteigender Reihenfolge nach einem Schlüssel</summary>
      <param name="source" vsli:raw="A sequence of values to order.">Eine Sequenz von anzuordnenden Werten.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from an element.">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function that is represented by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Der Typ des Schlüssels, der von der durch <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; whose elements are sorted according to a key.">Ein <see cref="T:System.Linq.IOrderedQueryable`1" />, dessen Elemente nach einem Schlüssel sortiert werden</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Sorts the elements of a sequence in ascending order by using a specified comparer.">Sortiert die Elemente einer Sequenz mithilfe eines angegebenen Vergleichs in aufsteigender Reihenfolge</summary>
      <param name="source" vsli:raw="A sequence of values to order.">Eine Sequenz von anzuordnenden Werten.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from an element.">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; to compare keys.">Ein <see cref="T:System.Collections.Generic.IComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function that is represented by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Der Typ des Schlüssels, der von der durch <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; whose elements are sorted according to a key.">Ein <see cref="T:System.Linq.IOrderedQueryable`1" />, dessen Elemente nach einem Schlüssel sortiert werden</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="comparer" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Sorts the elements of a sequence in descending order according to a key.">Sortiert die Elemente einer Sequenz in absteigender Reihenfolge nach einem Schlüssel</summary>
      <param name="source" vsli:raw="A sequence of values to order.">Eine Sequenz von anzuordnenden Werten.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from an element.">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function that is represented by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Der Typ des Schlüssels, der von der durch <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; whose elements are sorted in descending order according to a key.">Ein <see cref="T:System.Linq.IOrderedQueryable`1" />, dessen Elemente in absteigender Reihenfolge nach einem Schlüssel sortiert werden</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Sorts the elements of a sequence in descending order by using a specified comparer.">Sortiert die Elemente einer Sequenz mithilfe eines angegebenen Vergleichs in absteigender Reihenfolge.</summary>
      <param name="source" vsli:raw="A sequence of values to order.">Eine Sequenz von anzuordnenden Werten.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from an element.">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; to compare keys.">Ein <see cref="T:System.Collections.Generic.IComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function that is represented by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Der Typ des Schlüssels, der von der durch <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; whose elements are sorted in descending order according to a key.">Ein <see cref="T:System.Linq.IOrderedQueryable`1" />, dessen Elemente in absteigender Reihenfolge nach einem Schlüssel sortiert werden</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="comparer" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Prepend``1(System.Linq.IQueryable{``0},``0)">
      <param name="source" vsli:raw="A queryable sequence." />
      <param name="element" vsli:raw="An element of type &lt;typeparamref name=&quot;TSource&quot; /&gt; to prepend to &lt;paramref name=&quot;source&quot; /&gt;." />
      <typeparam name="TSource" vsli:raw="The type of the elements in the queryable sequence." />
    </member>
    <member name="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Inverts the order of the elements in a sequence.">Kehrt die Reihenfolge der Elemente in einer Sequenz um</summary>
      <param name="source" vsli:raw="A sequence of values to reverse.">Eine umzukehrende Sequenz von Werten.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements correspond to those of the input sequence in reverse order.">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente den Elementen der Eingabesequenz in umgekehrter Reihenfolge entsprechen.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Projects each element of a sequence into a new form.">Projiziert jedes Element einer Sequenz in ein neues Format.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Eine Sequenz von zu projizierenden Werten.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the value returned by the function represented by &lt;paramref name=&quot;selector&quot; /&gt;.">Der Typ des Werts, der von der durch <paramref name="selector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements are the result of invoking a projection function on each element of &lt;paramref name=&quot;source&quot; /&gt;.">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente das Ergebnis des Aufrufs einer Projektionsfunktion für jedes Element von <paramref name="source" /> sind.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
      <summary vsli:raw="Projects each element of a sequence into a new form by incorporating the element's index.">Projiziert jedes Element einer Sequenz in ein neues Format, indem der Index des Elements integriert wird</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Eine Sequenz von zu projizierenden Werten.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the value returned by the function represented by &lt;paramref name=&quot;selector&quot; /&gt;.">Der Typ des Werts, der von der durch <paramref name="selector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements are the result of invoking a projection function on each element of &lt;paramref name=&quot;source&quot; /&gt;.">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente das Ergebnis des Aufrufs einer Projektionsfunktion für jedes Element von <paramref name="source" /> sind.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; and combines the resulting sequences into one sequence.">Projiziert jedes Element einer Sequenz in ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> und fasst die resultierenden Sequenzen in einer einzigen Sequenz zusammen.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Eine Sequenz von zu projizierenden Werten.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the sequence returned by the function represented by &lt;paramref name=&quot;selector&quot; /&gt;.">Der Typ der Elemente der Sequenz, die von der durch <paramref name="selector" /> dargestellten Funktion zurückgegeben werden.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente das Ergebnis des Aufrufs einer 1:n-Projektionsfunktion für jedes Element der Eingabesequenz sind.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; and combines the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.">Projiziert jedes Element einer Sequenz in ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> und fasst die resultierenden Sequenzen in einer einzigen Sequenz zusammen. Der Index jedes Quellelements wird im projizierten Format des jeweiligen Elements verwendet.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Eine Sequenz von zu projizierenden Werten.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element; the second parameter of this function represents the index of the source element.">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll. Der zweite Parameter der Funktion stellt den Index des Quellelements dar.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the sequence returned by the function represented by &lt;paramref name=&quot;selector&quot; /&gt;.">Der Typ der Elemente der Sequenz, die von der durch <paramref name="selector" /> dargestellten Funktion zurückgegeben werden.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente das Ergebnis des Aufrufs einer 1:n-Projektionsfunktion für jedes Element der Eingabesequenz sind.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; and invokes a result selector function on each element therein. The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned.">Projiziert jedes Element einer Sequenz in ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> und ruft für jedes Element darin eine Ergebnisauswahlfunktion auf. Die Ergebniswerte aus jeder Zwischensequenz werden zu einer einzigen eindimensionalen Sequenz zusammengefasst und zurückgegeben.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Eine Sequenz von zu projizierenden Werten.</param>
      <param name="collectionSelector" vsli:raw="A projection function to apply to each element of the input sequence.">Eine Projektionsfunktion, die auf jedes Element der Eingabesequenz angewendet werden soll.</param>
      <param name="resultSelector" vsli:raw="A projection function to apply to each element of each intermediate sequence.">Eine Projektionsfunktion, die auf jedes Element jeder Zwischensequenz angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TCollection" vsli:raw="The type of the intermediate elements collected by the function represented by &lt;paramref name=&quot;collectionSelector&quot; /&gt;.">Der Typ der Zwischenelemente, die von der durch <paramref name="collectionSelector" /> dargestellten Funktion erfasst werden.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the resulting sequence.">Der Typ der Elemente in der resultierenden Sequenz.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements are the result of invoking the one-to-many projection function &lt;paramref name=&quot;collectionSelector&quot; /&gt; on each element of &lt;paramref name=&quot;source&quot; /&gt; and then mapping each of those sequence elements and their corresponding &lt;paramref name=&quot;source&quot; /&gt; element to a result element.">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente erzeugt werden, indem für jedes Element von <paramref name="collectionSelector" /> die 1:n-Projektionsfunktion <paramref name="source" /> aufgerufen wird und dann jedes so erzeugte Element der Sequenz und sein entsprechendes <paramref name="source" />-Element einem Ergebniselement zugeordnet werden.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;collectionSelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="collectionSelector" /> oder <paramref name="resultSelector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that incorporates the index of the source element that produced it. A result selector function is invoked on each element of each intermediate sequence, and the resulting values are combined into a single, one-dimensional sequence and returned.">Projiziert jedes Element einer Sequenz in ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das den Index des Quellelements enthält, von dem es erzeugt wurde. Für jedes Element jeder Zwischensequenz wird eine Ergebnisauswahlfunktion aufgerufen, und die Ergebniswerte werden zu einer einzigen eindimensionale Sequenz zusammengefasst und zurückgegeben.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Eine Sequenz von zu projizierenden Werten.</param>
      <param name="collectionSelector" vsli:raw="A projection function to apply to each element of the input sequence; the second parameter of this function represents the index of the source element.">Eine Projektionsfunktion, die auf jedes Element der Eingabesequenz angewendet werden soll. Der zweite Parameter der Funktion stellt den Index des Quellelements dar.</param>
      <param name="resultSelector" vsli:raw="A projection function to apply to each element of each intermediate sequence.">Eine Projektionsfunktion, die auf jedes Element jeder Zwischensequenz angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TCollection" vsli:raw="The type of the intermediate elements collected by the function represented by &lt;paramref name=&quot;collectionSelector&quot; /&gt;.">Der Typ der Zwischenelemente, die von der durch <paramref name="collectionSelector" /> dargestellten Funktion erfasst werden.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the resulting sequence.">Der Typ der Elemente in der resultierenden Sequenz.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements are the result of invoking the one-to-many projection function &lt;paramref name=&quot;collectionSelector&quot; /&gt; on each element of &lt;paramref name=&quot;source&quot; /&gt; and then mapping each of those sequence elements and their corresponding &lt;paramref name=&quot;source&quot; /&gt; element to a result element.">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente erzeugt werden, indem für jedes Element von <paramref name="collectionSelector" /> die 1:n-Projektionsfunktion <paramref name="source" /> aufgerufen wird und dann jedes so erzeugte Element der Sequenz und sein entsprechendes <paramref name="source" />-Element einem Ergebniselement zugeordnet werden.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;collectionSelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="collectionSelector" /> oder <paramref name="resultSelector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Determines whether two sequences are equal by using the default equality comparer to compare elements.">Bestimmt mithilfe des Standardgleichheitsvergleichs zum Vergleichen von Elementen, ob zwei Sequenzen gleich sind.</summary>
      <param name="source1" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to compare to those of &lt;paramref name=&quot;source2&quot; /&gt;.">Ein <see cref="T:System.Linq.IQueryable`1" /> dessen Elemente mit den Elementen von <paramref name="source2" /> verglichen werden sollen.</param>
      <param name="source2" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements to compare to those of the first sequence.">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente mit den Elementen der ersten Sequenz verglichen werden sollen.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die zwei Quellsequenzen von gleicher Länge sind und ihre entsprechenden Elemente als gleich gelten, andernfalls <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> oder <paramref name="source2" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Determines whether two sequences are equal by using a specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare elements.">Bestimmt mithilfe eines angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Elementen, ob zwei Sequenzen gleich sind.</summary>
      <param name="source1" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to compare to those of &lt;paramref name=&quot;source2&quot; /&gt;.">Ein <see cref="T:System.Linq.IQueryable`1" /> dessen Elemente mit den Elementen von <paramref name="source2" /> verglichen werden sollen.</param>
      <param name="source2" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements to compare to those of the first sequence.">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente mit den Elementen der ersten Sequenz verglichen werden sollen.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to use to compare elements.">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, der zum Vergleichen von Elementen verwendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die zwei Quellsequenzen von gleicher Länge sind und ihre entsprechenden Elemente als gleich gelten, andernfalls <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> oder <paramref name="source2" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.">Gibt das einzige Element einer Sequenz zurück und löst eine Ausnahme aus, wenn nicht genau ein Element in der Sequenz vorhanden ist.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return the single element of.">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen einziges Element zurückgegeben werden soll</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The single element of the input sequence.">Das einzige Element der Eingabesequenz.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; has more than one element.&#xA;&#xA; -or-&#xA;&#xA; The source sequence is empty.">
        <paramref name="source" /> hat mehr als ein Element.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.">Gibt das einzige Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt, und löst eine Ausnahme aus, wenn mehrere solche Elemente vorhanden sind.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return a single element from.">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem ein einzelnes Element zurückgegeben werden soll</param>
      <param name="predicate" vsli:raw="A function to test an element for a condition.">Eine Funktion zum Überprüfen eines Elements auf eine Bedingung.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The single element of the input sequence that satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.">Das einzige Element der Eingabesequenz, das die Bedingung in <paramref name="predicate" /> erfüllt.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; More than one element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The source sequence is empty.">Kein Element erfüllt die Bedingung in <paramref name="predicate" />.  

oder - 
Die Bedingung in <paramref name="predicate" /> wird von mehreren Elementen erfüllt.  

oder - 
Die Quellsequenz ist leer.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.">Gibt das einzige Element einer Sequenz oder einen Standardwert zurück, wenn die Sequenz leer ist. Diese Methode löst eine Ausnahme aus, wenn mehrere Elemente in der Sequenz vorhanden sind.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return the single element of.">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen einziges Element zurückgegeben werden soll</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The single element of the input sequence, or &lt;c&gt;default&lt;/c&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if the sequence contains no elements.">Das einzige Element der Eingabesequenz oder <c>default</c>(<paramref name="TSource" />), wenn die Sequenz keine Elemente enthält.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; has more than one element.">
        <paramref name="source" /> hat mehr als ein Element.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.">Gibt das einzige Element einer Sequenz, das eine angegebene Bedingung erfüllt, oder einen Standardwert zurück, wenn kein solches Element vorhanden ist. Diese Methode löst eine Ausnahme aus, wenn mehrere Elemente die Bedingung erfüllen.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return a single element from.">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem ein einzelnes Element zurückgegeben werden soll</param>
      <param name="predicate" vsli:raw="A function to test an element for a condition.">Eine Funktion zum Überprüfen eines Elements auf eine Bedingung.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The single element of the input sequence that satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;, or &lt;c&gt;default&lt;/c&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if no such element is found.">Gibt das einzige Element der Eingabesequenz zurück, das die Bedingung in <paramref name="predicate" /> erfüllt, oder <c>default</c>(<paramref name="TSource" />), wenn ein solches Element nicht gefunden wird.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="More than one element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.">Die Bedingung in <paramref name="predicate" /> wird von mehreren Elementen erfüllt.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary vsli:raw="Bypasses a specified number of elements in a sequence and then returns the remaining elements.">Umgeht eine festgelegte Anzahl von Elementen in einer Sequenz und gibt dann die übrigen Elemente zurück</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return elements from.">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem Elemente zurückgegeben werden sollen</param>
      <param name="count" vsli:raw="The number of elements to skip before returning the remaining elements.">Die Anzahl der Elemente, die übersprungen werden sollen, bevor die übrigen Elemente zurückgegeben werden.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements that occur after the specified index in the input sequence.">Ein <see cref="T:System.Linq.IQueryable`1" />, das Elemente enthält, die nach dem angegebenen Index in der Eingabesequenz auftreten.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipLast``1(System.Linq.IQueryable{``0},System.Int32)">
      <param name="source" vsli:raw="A queryable sequence." />
      <param name="count" vsli:raw="The number of elements to omit from the end of the queryable sequence." />
      <typeparam name="TSource" vsli:raw="The type of the elements in the queryable sequence." />
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.">Umgeht Elemente in einer Sequenz, solange eine angegebene Bedingung true ist, und gibt dann die übrigen Elemente zurück</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return elements from.">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem Elemente zurückgegeben werden sollen</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements from &lt;paramref name=&quot;source&quot; /&gt; starting at the first element in the linear series that does not pass the test specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">Ein <see cref="T:System.Linq.IQueryable`1" />, das Elemente aus <paramref name="source" /> ab dem ersten Element in der linearen Reihe enthält, das die in <paramref name="predicate" /> angegebene Überprüfung nicht besteht.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary vsli:raw="Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.">Umgeht Elemente in einer Sequenz, solange eine angegebene Bedingung true ist, und gibt dann die übrigen Elemente zurück In der Logik der Prädikatfunktion wird der Index des Elements verwendet.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return elements from.">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem Elemente zurückgegeben werden sollen</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition; the second parameter of this function represents the index of the source element.">Eine Funktion zum Überprüfen jedes Elements auf eine Bedingung. Der zweite Parameter der Funktion stellt den Index des Quellelements dar.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements from &lt;paramref name=&quot;source&quot; /&gt; starting at the first element in the linear series that does not pass the test specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">Ein <see cref="T:System.Linq.IQueryable`1" />, das Elemente aus <paramref name="source" /> ab dem ersten Element in der linearen Reihe enthält, das die in <paramref name="predicate" /> angegebene Überprüfung nicht besteht.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Berechnet die Summe einer Sequenz von <see cref="T:System.Decimal" />-Werten</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to calculate the sum of.">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, deren Summe berechnet werden soll</param>
      <returns vsli:raw="The sum of the values in the sequence.">Die Summe der Werte in der Sequenz</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">Die Summe ist größer als <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Berechnet die Summe einer Sequenz von <see cref="T:System.Double" />-Werten</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values to calculate the sum of.">Eine Sequenz von <see cref="T:System.Double" />-Werten, deren Summe berechnet werden soll</param>
      <returns vsli:raw="The sum of the values in the sequence.">Die Summe der Werte in der Sequenz</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Berechnet die Summe einer Sequenz von <see cref="T:System.Int32" />-Werten</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to calculate the sum of.">Eine Sequenz von <see cref="T:System.Int32" />-Werten, deren Summe berechnet werden soll</param>
      <returns vsli:raw="The sum of the values in the sequence.">Die Summe der Werte in der Sequenz</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">Die Summe ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Berechnet die Summe einer Sequenz von <see cref="T:System.Int64" />-Werten</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to calculate the sum of.">Eine Sequenz von <see cref="T:System.Int64" />-Werten, deren Summe berechnet werden soll</param>
      <returns vsli:raw="The sum of the values in the sequence.">Die Summe der Werte in der Sequenz</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">Die Summe ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Berechnet die Summe einer Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL zulassen</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to calculate the sum of.">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL zulassen, und deren Summe berechnet werden soll</param>
      <returns vsli:raw="The sum of the values in the sequence.">Die Summe der Werte in der Sequenz</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">Die Summe ist größer als <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Berechnet die Summe einer Sequenz von <see cref="T:System.Double" />-Werten, die NULL zulassen</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values to calculate the sum of.">Eine Sequenz von <see cref="T:System.Double" />-Werten, die NULL zulassen, und deren Summe berechnet werden soll</param>
      <returns vsli:raw="The sum of the values in the sequence.">Die Summe der Werte in der Sequenz</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Berechnet die Summe einer Sequenz von <see cref="T:System.Int32" />-Werten, die NULL zulassen</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to calculate the sum of.">Eine Sequenz von <see cref="T:System.Int32" />-Werten, die NULL zulassen, und deren Summe berechnet werden soll</param>
      <returns vsli:raw="The sum of the values in the sequence.">Die Summe der Werte in der Sequenz</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">Die Summe ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Berechnet die Summe einer Sequenz von <see cref="T:System.Int64" />-Werten, die NULL zulassen</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to calculate the sum of.">Eine Sequenz von <see cref="T:System.Int64" />-Werten, die NULL zulassen, und deren Summe berechnet werden soll</param>
      <returns vsli:raw="The sum of the values in the sequence.">Die Summe der Werte in der Sequenz</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">Die Summe ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Berechnet die Summe einer Sequenz von <see cref="T:System.Single" />-Werten, die NULL zulassen</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values to calculate the sum of.">Eine Sequenz von <see cref="T:System.Single" />-Werten, die NULL zulassen, und deren Summe berechnet werden soll</param>
      <returns vsli:raw="The sum of the values in the sequence.">Die Summe der Werte in der Sequenz</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Berechnet die Summe einer Sequenz von <see cref="T:System.Single" />-Werten</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values to calculate the sum of.">Eine Sequenz von <see cref="T:System.Single" />-Werten, deren Summe berechnet werden soll</param>
      <returns vsli:raw="The sum of the values in the sequence.">Die Summe der Werte in der Sequenz</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Berechnet die Summe einer Sequenz von <see cref="T:System.Decimal" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Die Summe der projizierten Werte</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">Die Summe ist größer als <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Berechnet die Summe einer Sequenz von <see cref="T:System.Double" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Die Summe der projizierten Werte</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Berechnet die Summe einer Sequenz von <see cref="T:System.Int32" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Die Summe der projizierten Werte</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">Die Summe ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Berechnet die Summe einer Sequenz von <see cref="T:System.Int64" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Die Summe der projizierten Werte</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">Die Summe ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Berechnet die Summe einer Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Die Summe der projizierten Werte</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">Die Summe ist größer als <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Berechnet die Summe einer Sequenz von <see cref="T:System.Double" />-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Die Summe der projizierten Werte</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Berechnet die Summe einer Sequenz von <see cref="T:System.Int32" />-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Die Summe der projizierten Werte</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">Die Summe ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Berechnet die Summe einer Sequenz von <see cref="T:System.Int64" />-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Die Summe der projizierten Werte</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">Die Summe ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Berechnet die Summe einer Sequenz von <see cref="T:System.Single" />-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Die Summe der projizierten Werte</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Berechnet die Summe einer Sequenz von <see cref="T:System.Single" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Die Summe der projizierten Werte</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="selector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary vsli:raw="Returns a specified number of contiguous elements from the start of a sequence.">Gibt eine angegebene Anzahl von zusammenhängenden Elementen ab dem Anfang einer Sequenz zurück</summary>
      <param name="source" vsli:raw="The sequence to return elements from.">Die Sequenz, aus der Elemente zurückgegeben werden sollen.</param>
      <param name="count" vsli:raw="The number of elements to return.">Die Anzahl der zurückzugebenden Elemente.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the specified number of elements from the start of &lt;paramref name=&quot;source&quot; /&gt;.">Ein <see cref="T:System.Linq.IQueryable`1" />, das die angegebene Anzahl von Elementen ab dem Anfang von <paramref name="source" /> enthält.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeLast``1(System.Linq.IQueryable{``0},System.Int32)">
      <param name="source" vsli:raw="A queryable sequence instance." />
      <param name="count" vsli:raw="The number of elements to take from the end of the queryable sequence." />
      <typeparam name="TSource" vsli:raw="The type of the elements in the queryable sequence." />
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns elements from a sequence as long as a specified condition is true.">Gibt Elemente aus einer Sequenz zurück, solange eine angegebene Bedingung TRUE ist</summary>
      <param name="source" vsli:raw="The sequence to return elements from.">Die Sequenz, aus der Elemente zurückgegeben werden sollen.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements from the input sequence occurring before the element at which the test specified by &lt;paramref name=&quot;predicate&quot; /&gt; no longer passes.">Ein <see cref="T:System.Linq.IQueryable`1" />, das Elemente aus der Eingabesequenz enthält, die vor dem Element auftreten, bei dem die von <paramref name="predicate" /> angegebene Überprüfung nicht mehr erfolgreich ist.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary vsli:raw="Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.">Gibt Elemente aus einer Sequenz zurück, solange eine angegebene Bedingung TRUE ist In der Logik der Prädikatfunktion wird der Index des Elements verwendet.</summary>
      <param name="source" vsli:raw="The sequence to return elements from.">Die Sequenz, aus der Elemente zurückgegeben werden sollen.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.">Eine Funktion zum Überprüfen jedes Elements auf eine Bedingung. Der zweite Parameter der Funktion stellt den Index des Elements in der Quellsequenz dar.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements from the input sequence occurring before the element at which the test specified by &lt;paramref name=&quot;predicate&quot; /&gt; no longer passes.">Ein <see cref="T:System.Linq.IQueryable`1" />, das Elemente aus der Eingabesequenz enthält, die vor dem Element auftreten, bei dem die von <paramref name="predicate" /> angegebene Überprüfung nicht mehr erfolgreich ist.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.">Führt eine nachfolgende Sortierung der Elemente in einer Sequenz in aufsteigender Reihenfolge nach einem Schlüssel durch</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; that contains elements to sort.">Ein <see cref="T:System.Linq.IOrderedQueryable`1" /> mit den zu sortierenden Elementen.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Der Typ des Schlüssels, der von der von <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; whose elements are sorted according to a key.">Ein <see cref="T:System.Linq.IOrderedQueryable`1" />, dessen Elemente nach einem Schlüssel sortiert werden</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.">Führt mithilfe eines angegebenen Vergleichs eine nachfolgende Sortierung der Elemente in einer Sequenz in aufsteigender Reihenfolge durch</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; that contains elements to sort.">Ein <see cref="T:System.Linq.IOrderedQueryable`1" /> mit den zu sortierenden Elementen.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; to compare keys.">Ein <see cref="T:System.Collections.Generic.IComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Der Typ des Schlüssels, der von der von <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; whose elements are sorted according to a key.">Ein <see cref="T:System.Linq.IOrderedQueryable`1" />, dessen Elemente nach einem Schlüssel sortiert werden</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="comparer" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.">Führt eine nachfolgende Sortierung der Elemente in einer Sequenz in absteigender Reihenfolge nach einem Schlüssel durch</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; that contains elements to sort.">Ein <see cref="T:System.Linq.IOrderedQueryable`1" /> mit den zu sortierenden Elementen.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Der Typ des Schlüssels, der von der von <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; whose elements are sorted in descending order according to a key.">Ein <see cref="T:System.Linq.IOrderedQueryable`1" />, dessen Elemente in absteigender Reihenfolge nach einem Schlüssel sortiert werden</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.">Führt mithilfe eines angegebenen Vergleichs eine nachfolgende Sortierung der Elemente in einer Sequenz in absteigender Reihenfolge durch</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; that contains elements to sort.">Ein <see cref="T:System.Linq.IOrderedQueryable`1" /> mit den zu sortierenden Elementen.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; to compare keys.">Ein <see cref="T:System.Collections.Generic.IComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key that is returned by the &lt;paramref name=&quot;keySelector&quot; /&gt; function.">Der Typ des Schlüssels, der von der <paramref name="keySelector" />-Funktion zurückgegeben wird.</typeparam>
      <returns vsli:raw="A collection whose elements are sorted in descending order according to a key.">Eine Auflistung, deren Elemente in absteigender Reihenfolge nach einem Schlüssel sortiert werden.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="comparer" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Produces the set union of two sequences by using the default equality comparer.">Erzeugt die Vereinigungsmenge von zwei Sequenzen mithilfe des Standardgleichheitsvergleichs</summary>
      <param name="source1" vsli:raw="A sequence whose distinct elements form the first set for the union operation.">Eine Sequenz, deren unterschiedliche Elemente den ersten Satz für die Gesamtmengenbildung darstellen.</param>
      <param name="source2" vsli:raw="A sequence whose distinct elements form the second set for the union operation.">Eine Sequenz, deren unterschiedliche Elemente den zweiten Satz für die Gesamtmengenbildung darstellen.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the elements from both input sequences, excluding duplicates.">Ein <see cref="T:System.Linq.IQueryable`1" />, das die Elemente aus beiden Eingabesequenzen ohne Duplikate enthält</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> oder <paramref name="source2" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Produces the set union of two sequences by using a specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Erzeugt mithilfe eines angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> die Vereinigungsmenge von zwei Sequenzen</summary>
      <param name="source1" vsli:raw="A sequence whose distinct elements form the first set for the union operation.">Eine Sequenz, deren unterschiedliche Elemente den ersten Satz für die Gesamtmengenbildung darstellen.</param>
      <param name="source2" vsli:raw="A sequence whose distinct elements form the second set for the union operation.">Eine Sequenz, deren unterschiedliche Elemente den zweiten Satz für die Gesamtmengenbildung darstellen.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the elements from both input sequences, excluding duplicates.">Ein <see cref="T:System.Linq.IQueryable`1" />, das die Elemente aus beiden Eingabesequenzen ohne Duplikate enthält</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> oder <paramref name="source2" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Filters a sequence of values based on a predicate.">Filtert eine Sequenz von Werten basierend auf einem Prädikat.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to filter.">Ein zu filterndes <see cref="T:System.Linq.IQueryable`1" /></param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements from the input sequence that satisfy the condition specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">Ein <see cref="T:System.Linq.IQueryable`1" /> mit Elementen aus der Eingabesequenz, die die von <paramref name="predicate" /> angegebene Bedingung erfüllen.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary vsli:raw="Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.">Filtert eine Sequenz von Werten basierend auf einem Prädikat. In der Logik der Prädikatfunktion wird der Index der einzelnen Elemente verwendet.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to filter.">Ein zu filterndes <see cref="T:System.Linq.IQueryable`1" /></param>
      <param name="predicate" vsli:raw="A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.">Eine Funktion zum Überprüfen jedes Elements auf eine Bedingung. Der zweite Parameter der Funktion stellt den Index des Elements in der Quellsequenz dar.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements from the input sequence that satisfy the condition specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">Ein <see cref="T:System.Linq.IQueryable`1" /> mit Elementen aus der Eingabesequenz, die die von <paramref name="predicate" /> angegebene Bedingung erfüllen.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> oder <paramref name="predicate" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Zip``2(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1})">
      <summary vsli:raw="Produces a sequence of tuples with elements from the two specified sequences.">Erzeugt eine Tupelsequenz mit Elementen aus den beiden angegebenen Sequenzen.</summary>
      <param name="source1" vsli:raw="The first sequence to merge.">Die erste Sequenz, die zusammengeführt werden soll</param>
      <param name="source2" vsli:raw="The second sequence to merge.">Die zweite Sequenz, die zusammengeführt werden soll</param>
      <typeparam name="TFirst" vsli:raw="The type of the elements of the first input sequence.">Der Typ der Elemente der ersten Eingabesequenz.</typeparam>
      <typeparam name="TSecond" vsli:raw="The type of the elements of the second input sequence.">Der Typ der Elemente der zweiten Eingabesequenz.</typeparam>
      <returns vsli:raw="A sequence of tuples with elements taken from the first and second sequences, in that order.">Eine Tupelsequenz mit Elementen, die der ersten und zweiten Sequenz in dieser Reihenfolge entnommen wurden.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary vsli:raw="Merges two sequences by using the specified predicate function.">Führt zwei Sequenzen mit der angegebenen Prädikatfunktion zusammen.</summary>
      <param name="source1" vsli:raw="The first sequence to merge.">Die erste Sequenz, die zusammengeführt werden soll</param>
      <param name="source2" vsli:raw="The second sequence to merge.">Die zweite Sequenz, die zusammengeführt werden soll</param>
      <param name="resultSelector" vsli:raw="A function that specifies how to merge the elements from the two sequences.">Eine Funktion, die angibt, wie die Elemente der zwei Sequenzen zusammengeführt werden sollen</param>
      <typeparam name="TFirst" vsli:raw="The type of the elements of the first input sequence.">Der Typ der Elemente der ersten Eingabesequenz.</typeparam>
      <typeparam name="TSecond" vsli:raw="The type of the elements of the second input sequence.">Der Typ der Elemente der zweiten Eingabesequenz.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the result sequence.">Der Typ der Elemente in der Ergebnissequenz.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains merged elements of two input sequences.">Ein <see cref="T:System.Linq.IQueryable`1" />, das die zusammengeführten Elemente der beiden Eingabesequenzen enthält</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> oder <paramref name="source2" /> ist <see langword="null" />.</exception>
    </member>
  </members>
</doc>
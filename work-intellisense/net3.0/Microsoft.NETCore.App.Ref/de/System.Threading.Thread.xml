<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Thread</name>
  </assembly>
  <members>
    <member name="T:System.LocalDataStoreSlot">
      <summary>Kapselt einen Speicherslot zum Speichern lokaler Daten. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.LocalDataStoreSlot.Finalize">
      <summary>Stellt das Freigeben von Ressourcen und das Ausführen anderer Garbage Collector-Vorgänge sicher, wenn der Garbage Collector das <see cref="T:System.LocalDataStoreSlot" />-Objekt verarbeitet.</summary>
    </member>
    <member name="T:System.Threading.ApartmentState">
      <summary>Gibt den Apartmentzustand eines <see cref="T:System.Threading.Thread" /> an.</summary>
    </member>
    <member name="F:System.Threading.ApartmentState.MTA">
      <summary>Der <see cref="T:System.Threading.Thread" /> erstellt ein MTA (Multithreaded Apartment) und wird in dieses aufgenommen.</summary>
    </member>
    <member name="F:System.Threading.ApartmentState.STA">
      <summary>Der <see cref="T:System.Threading.Thread" /> erstellt ein STA (Singlethreaded Apartment) und wird in dieses aufgenommen.</summary>
    </member>
    <member name="F:System.Threading.ApartmentState.Unknown">
      <summary>Die <see cref="P:System.Threading.Thread.ApartmentState" />-Eigenschaft wurde nicht festgelegt.</summary>
    </member>
    <member name="T:System.Threading.CompressedStack">
      <summary>Stellt Methoden zum Festlegen und Erfassen des komprimierten Stapels für den aktuellen Thread bereit. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.Threading.CompressedStack.Capture">
      <summary>Erfasst den komprimierten Stapel für den aktuellen Thread.</summary>
      <returns>Ein <see cref="T:System.Threading.CompressedStack" />-Objekt.</returns>
    </member>
    <member name="M:System.Threading.CompressedStack.CreateCopy">
      <summary>Erstellt eine Kopie des aktuellen komprimierten Stapels.</summary>
      <returns>Ein <see cref="T:System.Threading.CompressedStack" />-Objekt, das den aktuellen komprimierten Stapel darstellt.</returns>
    </member>
    <member name="M:System.Threading.CompressedStack.GetCompressedStack">
      <summary>Ruft den komprimierten Stapel für den aktuellen Thread ab.</summary>
      <returns>Ein <see cref="T:System.Threading.CompressedStack" /> für den aktuellen Thread.</returns>
      <exception cref="T:System.Security.SecurityException">Ein Aufrufer in der Aufrufkette verfügt nicht über die Berechtigung für den Zugriff auf nicht verwalteten Code.  

oder - 
Fehler bei der Anforderung für <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" />.</exception>
    </member>
    <member name="M:System.Threading.CompressedStack.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Ruft das <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Objekt mit den logischen Kontextinformationen ab, die zum erneuten Erstellen des Ausführungskontexts erforderlich sind.</summary>
      <param name="info">Das <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Objekt, das mit Serialisierungsinformationen aufgefüllt werden soll.</param>
      <param name="context">Die <see cref="T:System.Runtime.Serialization.StreamingContext" />-Struktur, die den Zielkontext der Serialisierung darstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.CompressedStack.Run(System.Threading.CompressedStack,System.Threading.ContextCallback,System.Object)">
      <summary>Führt eine Methode im angegebenen komprimierten Stapel für den aktuellen Thread aus.</summary>
      <param name="compressedStack">Die festzulegende <see cref="T:System.Threading.CompressedStack" />.</param>
      <param name="callback">Ein <see cref="T:System.Threading.ContextCallback" />, der die im angegebenen Sicherheitskontext auszuführende Methode darstellt.</param>
      <param name="state">Das an die Rückrufmethode zu übergebende Objekt.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="compressedStack" /> ist <see langword="null" />.</exception>
    </member>
    <member name="T:System.Threading.ParameterizedThreadStart">
      <summary>Stellt die Methode dar, die in einem <see cref="T:System.Threading.Thread" /> ausgeführt wird.</summary>
      <param name="obj">Ein Objekt, das Daten für die Threadprozedur enthält.</param>
    </member>
    <member name="T:System.Threading.Thread">
      <summary>Erstellt und steuert einen Thread, legt dessen Priorität fest und ruft den Status ab.</summary>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.Thread" />-Klasse und gibt dabei einen Delegaten an, der das Übergeben eines Objekts an den Thread bei dessen Start ermöglicht.</summary>
      <param name="start">Ein Delegat, der die Methoden darstellt, die bei Beginn der Ausführung dieses Threads aufgerufen werden müssen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.Thread" />-Klasse und gibt dabei einen Delegaten, der das Übergeben eines Objekts an den Thread bei dessen Start ermöglicht, sowie eine maximale Stapelgröße für den Thread an.</summary>
      <param name="start">Ein <see cref="T:System.Threading.ParameterizedThreadStart" />-Delegat, der die Methoden darstellt, die bei Beginn der Ausführung dieses Threads aufgerufen werden müssen.</param>
      <param name="maxStackSize">Die maximale Stapelgröße, in Bytes, für den Thread, oder 0 (null), wenn die angegebene maximale Standardstapelgröße aus dem Header der ausführbaren Datei verwendet werden soll.  
Wichtig: Für teilweise vertrauenswürdigen Code wird <paramref name="maxStackSize" /> ignoriert, wenn sie größer als die Standardstapelgröße ist. Es werden keine Ausnahmen ausgelöst.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxStackSize" /> ist kleiner als Null.</exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.Thread" />-Klasse.</summary>
      <param name="start">Ein <see cref="T:System.Threading.ThreadStart" />-Delegat, der die Methoden darstellt, die bei Beginn der Ausführung dieses Threads aufgerufen werden müssen.</param>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="start" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.Thread" />-Klasse und gibt die maximale Stapelgröße für den Thread an.</summary>
      <param name="start">Ein <see cref="T:System.Threading.ThreadStart" />-Delegat, der die Methoden darstellt, die bei Beginn der Ausführung dieses Threads aufgerufen werden müssen.</param>
      <param name="maxStackSize">Die maximale Stapelgröße, in Bytes, für den Thread, oder 0 (null), wenn die angegebene maximale Standardstapelgröße aus dem Header der ausführbaren Datei verwendet werden soll.  
Wichtig: Für teilweise vertrauenswürdigen Code wird <paramref name="maxStackSize" /> ignoriert, wenn sie größer als die Standardstapelgröße ist. Es werden keine Ausnahmen ausgelöst.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxStackSize" /> ist kleiner als Null.</exception>
    </member>
    <member name="M:System.Threading.Thread.Abort">
      <summary>Löst eine <see cref="T:System.Threading.ThreadAbortException" /> im Thread aus, für den der Aufruf erfolgte, um das Beenden des Threads zu beginnen. Durch den Aufruf dieser Methode wird der Thread i. d. R. beendet.</summary>
      <exception cref="T:System.PlatformNotSupportedException">Nur .NET Core: Dieser Member wird nicht unterstützt.</exception>
      <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
      <exception cref="T:System.Threading.ThreadStateException">Der abgebrochene Thread ist derzeit angehalten.</exception>
    </member>
    <member name="M:System.Threading.Thread.Abort(System.Object)">
      <summary>Löst eine <see cref="T:System.Threading.ThreadAbortException" /> im Thread aus, für den der Aufruf erfolgte, um das Beenden des Threads zu beginnen. Gleichzeitig werden Ausnahmeinformationen über das Beenden des Threads bereitgestellt. Durch den Aufruf dieser Methode wird der Thread i. d. R. beendet.</summary>
      <param name="stateInfo">Ein Objekt, das anwendungsspezifische Informationen enthält (z. B. über den Zustand), die vom abgebrochenen Thread verwendet werden können.</param>
      <exception cref="T:System.PlatformNotSupportedException">Nur .NET Core: Dieser Member wird nicht unterstützt.</exception>
      <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
      <exception cref="T:System.Threading.ThreadStateException">Der abgebrochene Thread ist derzeit angehalten.</exception>
    </member>
    <member name="M:System.Threading.Thread.AllocateDataSlot">
      <summary>Reserviert einen unbenannten Datenslot für alle Threads. Eine höhere Leistung erzielen Sie, wenn Sie stattdessen Felder verwenden, die mit dem <see cref="T:System.ThreadStaticAttribute" />-Attribut markiert sind.</summary>
      <returns>Der reservierte benannte Datenslot für alle Threads.</returns>
    </member>
    <member name="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
      <summary>Reserviert einen benannten Datenslot für alle Threads. Eine höhere Leistung erzielen Sie, wenn Sie stattdessen Felder verwenden, die mit dem <see cref="T:System.ThreadStaticAttribute" />-Attribut markiert sind.</summary>
      <param name="name">Der Name des zu reservierenden Datenslots.</param>
      <returns>Der reservierte benannte Datenslot für alle Threads.</returns>
      <exception cref="T:System.ArgumentException">Es ist bereits ein benannter Datenslot mit dem angegebenen Namen vorhanden.</exception>
    </member>
    <member name="P:System.Threading.Thread.ApartmentState">
      <summary>Ruft den Apartmentzustand dieses Threads ab oder legt diesen fest.</summary>
      <returns>Einer der <see cref="T:System.Threading.ApartmentState" />-Werte. Der Anfangswert ist <see langword="Unknown" />.</returns>
      <exception cref="T:System.ArgumentException">Es wird versucht, diese Eigenschaft in einen Zustand zu versetzen, der kein gültiger Apartmentzustand ist, d. h. in einen anderen Zustand als Singlethread-Apartment (<see langword="STA" />) oder Multithread-Apartment (<see langword="MTA" />).</exception>
    </member>
    <member name="M:System.Threading.Thread.BeginCriticalRegion">
      <summary>Benachrichtigt einen Host, dass die Ausführung im Begriff ist, zu einem Codebereich überzugehen, in dem die Auswirkungen eines Threadabbruchs oder einer nicht behandelten Ausnahme andere Aufgaben in der Anwendungsdomäne gefährden könnten.</summary>
    </member>
    <member name="M:System.Threading.Thread.BeginThreadAffinity">
      <summary>Benachrichtigt einen Host, dass verwalteter Code im Begriff ist, Anweisungen auszuführen, die von der Identität des aktuellen physischen Betriebssystemthreads abhängen.</summary>
      <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
    </member>
    <member name="P:System.Threading.Thread.CurrentCulture">
      <summary>Ruft die Kultur für den aktuellen Thread ab oder legt diese fest.</summary>
      <returns>Ein Objekt, das die Kultur für den aktuellen Thread darstellt.</returns>
      <exception cref="T:System.ArgumentNullException">Die Eigenschaft ist auf <see langword="null" /> festgelegt.</exception>
      <exception cref="T:System.InvalidOperationException">Nur .NET Core: Das Lesen oder Schreiben der Kultur eines Threads von einem anderen Thread wird nicht unterstützt.</exception>
    </member>
    <member name="P:System.Threading.Thread.CurrentPrincipal">
      <summary>Ruft den aktuellen Prinzipal des Threads (für rollenbasierte Sicherheit) ab oder legt diesen fest.</summary>
      <returns>Ein <see cref="T:System.Security.Principal.IPrincipal" />-Wert, der den Sicherheitskontext darstellt.</returns>
      <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung zum Festlegen des Prinzipals.</exception>
    </member>
    <member name="P:System.Threading.Thread.CurrentThread">
      <summary>Ruft den derzeit ausgeführten Thread ab.</summary>
      <returns>Ein <see cref="T:System.Threading.Thread" />, der den derzeit ausgeführten Thread darstellt.</returns>
    </member>
    <member name="P:System.Threading.Thread.CurrentUICulture">
      <summary>Ruft die aktuelle Kultur ab, mit deren Hilfe der Ressourcen-Manager zur Laufzeit kulturabhängige Ressourcen sucht, oder legt diese fest.</summary>
      <returns>Ein Objekt, das die aktuelle Kultur darstellt.</returns>
      <exception cref="T:System.ArgumentNullException">Die Eigenschaft ist auf <see langword="null" /> festgelegt.</exception>
      <exception cref="T:System.ArgumentException">Die Eigenschaft ist auf einen Kulturnamen festgelegt, der nicht zum Suchen einer Ressourcendatei verwendet werden kann. Ressourcendateinamen dürfen nur Buchstaben, Zahlen, Bindestriche oder Unterstriche enthalten.</exception>
      <exception cref="T:System.InvalidOperationException">Nur .NET Core: Das Lesen oder Schreiben der Kultur eines Threads von einem anderen Thread wird nicht unterstützt.</exception>
    </member>
    <member name="M:System.Threading.Thread.DisableComObjectEagerCleanup">
      <summary>Deaktiviert die automatische Bereinigung von Runtime Callable Wrappern (RCW) für den aktuellen Thread.</summary>
    </member>
    <member name="M:System.Threading.Thread.EndCriticalRegion">
      <summary>Benachrichtigt einen Host, dass die Ausführung im Begriff ist, zu einem Codebereich überzugehen, in dem die Auswirkungen eines Threadabbruchs oder einer nicht behandelten Ausnahme auf die aktuelle Aufgabe beschränkt sind.</summary>
    </member>
    <member name="M:System.Threading.Thread.EndThreadAffinity">
      <summary>Benachrichtigt einen Host, dass verwalteter Code die Ausführung von Anweisungen beendet hat, die von der Identität des aktuellen physischen Betriebssystemthreads abhängen.</summary>
      <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
    </member>
    <member name="P:System.Threading.Thread.ExecutionContext">
      <summary>Ruft ein <see cref="T:System.Threading.ExecutionContext" />-Objekt ab, das Informationen zu den verschiedenen Kontexten des aktuellen Threads enthält.</summary>
      <returns>Ein <see cref="T:System.Threading.ExecutionContext" />-Objekt, das Kontextinformationen für den aktuellen Thread konsolidiert.</returns>
    </member>
    <member name="M:System.Threading.Thread.Finalize">
      <summary>Stellt das Freigeben von Ressourcen und das Ausführen anderer Garbage Collector-Vorgänge sicher, wenn der Garbage Collector das <see cref="T:System.Threading.Thread" />-Objekt verarbeitet.</summary>
    </member>
    <member name="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
      <summary>Entfernt die Zuordnung zwischen einem Namen und einem Slot für alle Threads in dem Prozess. Eine höhere Leistung erzielen Sie, wenn Sie stattdessen Felder verwenden, die mit dem <see cref="T:System.ThreadStaticAttribute" />-Attribut markiert sind.</summary>
      <param name="name">Der Name des freizugebenden Datenslots.</param>
    </member>
    <member name="M:System.Threading.Thread.GetApartmentState">
      <summary>Gibt einen <see cref="T:System.Threading.ApartmentState" />-Wert zurück, der den Apartmentzustand angibt.</summary>
      <returns>Einer der <see cref="T:System.Threading.ApartmentState" />-Werte, der den Apartmentzustand des verwalteten Threads angibt. Die Standardeinstellung ist <see cref="F:System.Threading.ApartmentState.Unknown" />.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetCompressedStack">
      <summary>Gibt ein <see cref="T:System.Threading.CompressedStack" />-Objekt zurück, mit dem der Stapel für den aktuellen Thread erfasst werden kann.</summary>
      <returns>Keine</returns>
      <exception cref="T:System.InvalidOperationException">In allen Fällen.</exception>
    </member>
    <member name="M:System.Threading.Thread.GetCurrentProcessorId" />
    <member name="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
      <summary>Ruft in der aktuellen Domäne des aktuellen Threads den Wert aus dem angegebenen Slot für den aktuellen Thread ab. Eine höhere Leistung erzielen Sie, wenn Sie stattdessen Felder verwenden, die mit dem <see cref="T:System.ThreadStaticAttribute" />-Attribut markiert sind.</summary>
      <param name="slot">Der <see cref="T:System.LocalDataStoreSlot" />, aus dem der Wert abgerufen werden soll.</param>
      <returns>Der abgerufene Wert.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetDomain">
      <summary>Gibt die aktuelle Domäne zurück, in der der aktuelle Thread ausgeführt wird.</summary>
      <returns>Eine <see cref="T:System.AppDomain" />, die die aktuelle Anwendungsdomäne des ausgeführten Threads darstellt.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetDomainID">
      <summary>Gibt einen eindeutigen Bezeichner der Anwendungsdomäne zurück.</summary>
      <returns>Eine 32-Bit-Ganzzahl mit Vorzeichen, mit der die Anwendungsdomäne eindeutig bezeichnet wird.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetHashCode">
      <summary>Gibt einen Hashcode für den aktuellen Thread zurück.</summary>
      <returns>Ein ganzzahliger Hashcodewert.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
      <summary>Sucht einen benannten Datenslot. Eine höhere Leistung erzielen Sie, wenn Sie stattdessen Felder verwenden, die mit dem <see cref="T:System.ThreadStaticAttribute" />-Attribut markiert sind.</summary>
      <param name="name">Der Name des lokalen Datenslots.</param>
      <returns>Ein für diesen Thread reservierter <see cref="T:System.LocalDataStoreSlot" />.</returns>
    </member>
    <member name="M:System.Threading.Thread.Interrupt">
      <summary>Unterbricht einen Thread, der sich im <see cref="F:System.Threading.ThreadState.WaitSleepJoin" />-Threadzustand befindet.</summary>
      <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die geeignete <see cref="T:System.Security.Permissions.SecurityPermission" />.</exception>
    </member>
    <member name="P:System.Threading.Thread.IsAlive">
      <summary>Ruft einen Wert ab, der den Ausführungsstatus des aktuellen Threads angibt.</summary>
      <returns>
        <see langword="true" />, wenn dieser Thread gestartet und ordnungsgemäß beendet bzw. abgebrochen wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Thread.IsBackground">
      <summary>Ruft einen Wert ab, der angibt, ob es sich bei einem Thread um einen Hintergrundthread handelt, oder legt diesen fest.</summary>
      <returns>
        <see langword="true" />, wenn dieser Thread ein Hintergrundthread ist oder zu einem solchen wird, andernfalls <see langword="false" />.</returns>
      <exception cref="T:System.Threading.ThreadStateException">Der Thread ist deaktiviert.</exception>
    </member>
    <member name="P:System.Threading.Thread.IsThreadPoolThread">
      <summary>Ruft einen Wert ab, der angibt, ob ein Thread zu dem verwalteten Threadpool gehört.</summary>
      <returns>
        <see langword="true" />, wenn der Thread zu dem verwalteten Threadpool gehört, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Thread.Join">
      <summary>Blockiert den aufrufenden Thread, bis der durch diese Instanz dargestellte Thread beendet wird, während das Standard-COM- und das <see langword="SendMessage" />-Pumping fortgesetzt werden.</summary>
      <exception cref="T:System.Threading.ThreadStateException">Der Aufrufer hat versucht, mit einem Thread zu verknüpfen, der den Zustand <see cref="F:System.Threading.ThreadState.Unstarted" /> hat.</exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">Der Thread wird beim Warten unterbrochen.</exception>
    </member>
    <member name="M:System.Threading.Thread.Join(System.Int32)">
      <summary>Blockiert den aufrufenden Thread, bis der von dieser Instanz dargestellte Thread beendet wird, oder die festgelegte Zeit verstreicht, während das Standard-COM- und das SendMessage-Pumping fortgesetzt werden.</summary>
      <param name="millisecondsTimeout">Die Anzahl der Millisekunden, die auf das Beenden des Threads gewartet werden soll.</param>
      <returns>
        <see langword="true" />, wenn der Thread beendet wurde. <see langword="false" />, wenn der Thread nach Ablauf des vom <paramref name="millisecondsTimeout" />-Parameter angegebenen Zeitraums nicht beendet wurde.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Der Wert von <paramref name="millisecondsTimeout" /> ist negativ und nicht gleich <see cref="F:System.Threading.Timeout.Infinite" /> in Millisekunden.</exception>
      <exception cref="T:System.Threading.ThreadStateException">Der Thread wurde nicht gestartet.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="millisecondsTimeout" /> ist kleiner als -1 (Timeout.Infinite).</exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">Der Thread wurde beim Warten unterbrochen.</exception>
    </member>
    <member name="M:System.Threading.Thread.Join(System.TimeSpan)">
      <summary>Blockiert den aufrufenden Thread, bis der von dieser Instanz dargestellte Thread beendet wird, oder die festgelegte Zeit verstreicht, während das Standard-COM- und das SendMessage-Pumping fortgesetzt werden.</summary>
      <param name="timeout">Ein <see cref="T:System.TimeSpan" />-Wert, der auf den Zeitraum festgelegt ist, während dessen auf das Beenden des Threads gewartet werden soll.</param>
      <returns>
        <see langword="true" />, wenn der Thread beendet wurde. <see langword="false" />, wenn der Thread nach Ablauf des vom <paramref name="timeout" />-Parameter angegebenen Zeitraums nicht beendet wurde.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Der Wert von <paramref name="timeout" /> ist negativ und nicht gleich <see cref="F:System.Threading.Timeout.Infinite" /> in Millisekunden oder größer als <see cref="F:System.Int32.MaxValue" /> Millisekunden.</exception>
      <exception cref="T:System.Threading.ThreadStateException">Der Aufrufer hat versucht, mit einem Thread zu verknüpfen, der den Zustand <see cref="F:System.Threading.ThreadState.Unstarted" /> hat.</exception>
    </member>
    <member name="P:System.Threading.Thread.ManagedThreadId">
      <summary>Ruft einen eindeutigen Bezeichner für den aktuellen verwalteten Thread ab.</summary>
      <returns>Eine Ganzzahl, die einen eindeutigen Bezeichner für diesen verwalteten Thread darstellt.</returns>
    </member>
    <member name="M:System.Threading.Thread.MemoryBarrier">
      <summary>Synchronisiert den Arbeitsspeicherzugriff wie folgt: Der Prozessor, der den aktuellen Thread ausführt, kann Anweisungen nicht so neu anordnen, dass Speicherzugriffe vor dem Aufruf von <see cref="M:System.Threading.Thread.MemoryBarrier" /> nach Speicherzugriffen ausgeführt werden, die nach dem Aufruf von <see cref="M:System.Threading.Thread.MemoryBarrier" /> erfolgen.</summary>
    </member>
    <member name="P:System.Threading.Thread.Name">
      <summary>Ruft den Namen des Threads ab oder legt diesen fest.</summary>
      <returns>Eine Zeichenfolge mit dem Namen des Threads, oder <see langword="null" />, wenn kein Name festgelegt wurde.</returns>
      <exception cref="T:System.InvalidOperationException">Ein SET-Vorgang wurde angefordert, aber die <see langword="Name" />-Eigenschaft wurde bereits festgelegt.</exception>
    </member>
    <member name="P:System.Threading.Thread.Priority">
      <summary>Ruft einen Wert ab, der die Planungspriorität eines Threads angibt, oder legt diesen fest.</summary>
      <returns>Einer der <see cref="T:System.Threading.ThreadPriority" />-Werte. Der Standardwert ist <see cref="F:System.Threading.ThreadPriority.Normal" />sein.</returns>
      <exception cref="T:System.Threading.ThreadStateException">Der Thread hat einen Endzustand erreicht, z. B. <see cref="F:System.Threading.ThreadState.Aborted" />.</exception>
      <exception cref="T:System.ArgumentException">Der für einen SET-Vorgang festgelegte Wert ist kein gültiger <see cref="T:System.Threading.ThreadPriority" />-Wert.</exception>
    </member>
    <member name="M:System.Threading.Thread.ResetAbort">
      <summary>Bricht ein <see cref="M:System.Threading.Thread.Abort(System.Object)" /> ab, das für den aktuellen Thread angefordert wurde.</summary>
      <exception cref="T:System.PlatformNotSupportedException">Nur .NET Core: Dieser Member wird nicht unterstützt.</exception>
      <exception cref="T:System.Threading.ThreadStateException">
        <see langword="Abort" /> wurde für den aktuellen Thread nicht aufgerufen.</exception>
      <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderlichen Sicherheitsberechtigungen für den aktuellen Thread.</exception>
    </member>
    <member name="M:System.Threading.Thread.Resume">
      <summary>Nimmt die Ausführung eines angehaltenen Threads wieder auf.</summary>
      <exception cref="T:System.PlatformNotSupportedException">Nur .NET Core: Dieser Member wird nicht unterstützt.</exception>
      <exception cref="T:System.Threading.ThreadStateException">Der Thread wurde nicht gestartet, ist deaktiviert oder befindet sich nicht im angehaltenen Zustand.</exception>
      <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die geeignete <see cref="T:System.Security.Permissions.SecurityPermission" />.</exception>
    </member>
    <member name="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)">
      <summary>Legt den Apartmentzustand eines Threads fest, bevor dieser gestartet wird.</summary>
      <param name="state">Der neue Apartmentzustand.</param>
      <exception cref="T:System.PlatformNotSupportedException">Nur .NET Core: Dieser Member wird auf macOS- und Linux-Plattformen nicht unterstützt.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> ist kein gültiger Apartmentzustand.</exception>
      <exception cref="T:System.Threading.ThreadStateException">Der Thread wurde bereits gestartet.</exception>
      <exception cref="T:System.InvalidOperationException">Der Apartmentzustand wurde bereits initialisiert.</exception>
    </member>
    <member name="M:System.Threading.Thread.SetCompressedStack(System.Threading.CompressedStack)">
      <summary>Übernimmt einen erfassten <see cref="T:System.Threading.CompressedStack" /> für den aktuellen Thread.</summary>
      <param name="stack">Das <see cref="T:System.Threading.CompressedStack" />-Objekt, das für den aktuellen Thread übernommen werden soll.</param>
      <exception cref="T:System.InvalidOperationException">In allen Fällen.</exception>
    </member>
    <member name="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
      <summary>Legt die Daten im angegebenen Slot auf den derzeit ausgeführten Thread und für die aktuelle Domäne des betreffenden Threads fest. Eine höhere Leistung erzielen Sie, wenn Sie stattdessen Felder verwenden, die mit dem <see cref="T:System.ThreadStaticAttribute" />-Attribut markiert sind.</summary>
      <param name="slot">Der <see cref="T:System.LocalDataStoreSlot" />, in dem der Wert festgelegt werden soll.</param>
      <param name="data">Der festzulegende Wert.</param>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.Int32)">
      <summary>Hält den aktuellen Thread für die angegebene Anzahl von Millisekunden an.</summary>
      <param name="millisecondsTimeout">Die Anzahl von Millisekunden, die der Thread angehalten wird. Wenn der Wert des <paramref name="millisecondsTimeout" />-Arguments 0 (null) lautet, gibt der Thread den Rest seines Zeitanteils an einen beliebigen Thread mit gleicher Priorität ab, der für die Ausführung bereit ist. Sind keine anderen Threads mit gleicher Priorität vorhanden, die ausgeführt werden können, wird die Ausführung des aktuellen Threads nicht angehalten.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Der Timeoutwert ist negativ und ungleich <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.TimeSpan)">
      <summary>Hält den aktuellen Thread während des angegebenen Zeitraums an.</summary>
      <param name="timeout">Der Zeitraum, während dessen der Thread angehalten wird. Wenn der Wert des <paramref name="millisecondsTimeout" />-Arguments <see cref="F:System.TimeSpan.Zero" /> lautet, gibt der Thread den Rest seines Zeitanteils an einen beliebigen Thread mit gleicher Priorität ab, der für die Ausführung bereit ist. Sind keine anderen Threads mit gleicher Priorität vorhanden, die ausgeführt werden können, wird die Ausführung des aktuellen Threads nicht angehalten.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Der Wert von <paramref name="timeout" /> ist negativ und nicht gleich <see cref="F:System.Threading.Timeout.Infinite" /> in Millisekunden oder größer als <see cref="F:System.Int32.MaxValue" /> Millisekunden.</exception>
    </member>
    <member name="M:System.Threading.Thread.SpinWait(System.Int32)">
      <summary>Veranlasst, dass ein Thread so oft wartet, wie vom <paramref name="iterations" />-Parameter definiert.</summary>
      <param name="iterations">Eine 32-Bit-Ganzzahl mit Vorzeichen, die den Zeitraum definiert, den ein Thread warten soll.</param>
    </member>
    <member name="M:System.Threading.Thread.Start">
      <summary>Weist das Betriebssystem an, den Zustand der aktuellen Instanz in <see cref="F:System.Threading.ThreadState.Running" /> zu ändern.</summary>
      <exception cref="T:System.Threading.ThreadStateException">Der Thread wurde bereits gestartet.</exception>
      <exception cref="T:System.OutOfMemoryException">Es ist nicht genügend Speicher zum Starten dieses Threads verfügbar.</exception>
    </member>
    <member name="M:System.Threading.Thread.Start(System.Object)">
      <summary>Bewirkt, dass das Betriebssystem den Zustand der aktuellen Instanz in <see cref="F:System.Threading.ThreadState.Running" /> ändert, und stellt optional ein Objekt mit Daten bereit, die von der vom Thread ausgeführten Methode verwendet werden sollen.</summary>
      <param name="parameter">Ein Objekt mit Daten, die von der vom Thread ausgeführten Methode verwendet werden sollen.</param>
      <exception cref="T:System.Threading.ThreadStateException">Der Thread wurde bereits gestartet.</exception>
      <exception cref="T:System.OutOfMemoryException">Es ist nicht genügend Speicher zum Starten dieses Threads verfügbar.</exception>
      <exception cref="T:System.InvalidOperationException">Dieser Thread wurde mithilfe eines <see cref="T:System.Threading.ThreadStart" />-Delegaten anstelle eines <see cref="T:System.Threading.ParameterizedThreadStart" />-Delegaten erstellt.</exception>
    </member>
    <member name="M:System.Threading.Thread.Suspend">
      <summary>Hält den Thread an. Hat keine Auswirkungen, wenn der Thread bereits angehalten ist.</summary>
      <exception cref="T:System.PlatformNotSupportedException">Nur .NET Core: Dieser Member wird nicht unterstützt.</exception>
      <exception cref="T:System.Threading.ThreadStateException">Der Thread wurde nicht gestartet oder reagiert nicht.</exception>
      <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die geeignete <see cref="T:System.Security.Permissions.SecurityPermission" />.</exception>
    </member>
    <member name="P:System.Threading.Thread.ThreadState">
      <summary>Ruft einen Wert ab, der die Zustände des aktuellen Threads enthält.</summary>
      <returns>Einer der <see cref="T:System.Threading.ThreadState" />-Werte, der den Zustand des aktuellen Threads angibt. Der Anfangswert ist <see cref="F:System.Threading.ThreadState.Unstarted" />.</returns>
    </member>
    <member name="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)">
      <summary>Legt den Apartmentzustand eines Threads fest, bevor dieser gestartet wird.</summary>
      <param name="state">Der neue Apartmentzustand.</param>
      <returns>
        <see langword="true" />, wenn der Apartmentzustand festgelegt wurde, andernfalls <see langword="false" />.</returns>
      <exception cref="T:System.PlatformNotSupportedException">Nur .NET Core: Dieser Member wird auf macOS- und Linux-Plattformen nicht unterstützt.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> ist kein gültiger Apartmentzustand.</exception>
      <exception cref="T:System.Threading.ThreadStateException">Der Thread wurde gestartet und beendet, oder der Aufruf erfolgt nicht aus dem Kontext des Threads, während der Thread ausgeführt wird.</exception>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Byte@)">
      <summary>Liest den Wert eines Felds. Der Wert entspricht dem letzten von einem Prozessor in dem Computer geschriebenen Wert, unabhängig von der Anzahl der Prozessoren und dem Zustand des Prozessorcaches.</summary>
      <param name="address">Das zu lesende Feld.</param>
      <returns>Der letzte von einem Prozessor in das Feld geschriebene Wert.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Double@)">
      <summary>Liest den Wert eines Felds. Der Wert entspricht dem letzten von einem Prozessor in dem Computer geschriebenen Wert, unabhängig von der Anzahl der Prozessoren und dem Zustand des Prozessorcaches.</summary>
      <param name="address">Das zu lesende Feld.</param>
      <returns>Der letzte von einem Prozessor in das Feld geschriebene Wert.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int16@)">
      <summary>Liest den Wert eines Felds. Der Wert entspricht dem letzten von einem Prozessor in dem Computer geschriebenen Wert, unabhängig von der Anzahl der Prozessoren und dem Zustand des Prozessorcaches.</summary>
      <param name="address">Das zu lesende Feld.</param>
      <returns>Der letzte von einem Prozessor in das Feld geschriebene Wert.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int32@)">
      <summary>Liest den Wert eines Felds. Der Wert entspricht dem letzten von einem Prozessor in dem Computer geschriebenen Wert, unabhängig von der Anzahl der Prozessoren und dem Zustand des Prozessorcaches.</summary>
      <param name="address">Das zu lesende Feld.</param>
      <returns>Der letzte von einem Prozessor in das Feld geschriebene Wert.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int64@)">
      <summary>Liest den Wert eines Felds. Der Wert entspricht dem letzten von einem Prozessor in dem Computer geschriebenen Wert, unabhängig von der Anzahl der Prozessoren und dem Zustand des Prozessorcaches.</summary>
      <param name="address">Das zu lesende Feld.</param>
      <returns>Der letzte von einem Prozessor in das Feld geschriebene Wert.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.IntPtr@)">
      <summary>Liest den Wert eines Felds. Der Wert entspricht dem letzten von einem Prozessor in dem Computer geschriebenen Wert, unabhängig von der Anzahl der Prozessoren und dem Zustand des Prozessorcaches.</summary>
      <param name="address">Das zu lesende Feld.</param>
      <returns>Der letzte von einem Prozessor in das Feld geschriebene Wert.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Object@)">
      <summary>Liest den Wert eines Felds. Der Wert entspricht dem letzten von einem Prozessor in dem Computer geschriebenen Wert, unabhängig von der Anzahl der Prozessoren und dem Zustand des Prozessorcaches.</summary>
      <param name="address">Das zu lesende Feld.</param>
      <returns>Der letzte von einem Prozessor in das Feld geschriebene Wert.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.SByte@)">
      <summary>Liest den Wert eines Felds. Der Wert entspricht dem letzten von einem Prozessor in dem Computer geschriebenen Wert, unabhängig von der Anzahl der Prozessoren und dem Zustand des Prozessorcaches.</summary>
      <param name="address">Das zu lesende Feld.</param>
      <returns>Der letzte von einem Prozessor in das Feld geschriebene Wert.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Single@)">
      <summary>Liest den Wert eines Felds. Der Wert entspricht dem letzten von einem Prozessor in dem Computer geschriebenen Wert, unabhängig von der Anzahl der Prozessoren und dem Zustand des Prozessorcaches.</summary>
      <param name="address">Das zu lesende Feld.</param>
      <returns>Der letzte von einem Prozessor in das Feld geschriebene Wert.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt16@)">
      <summary>Liest den Wert eines Felds. Der Wert entspricht dem letzten von einem Prozessor in dem Computer geschriebenen Wert, unabhängig von der Anzahl der Prozessoren und dem Zustand des Prozessorcaches.</summary>
      <param name="address">Das zu lesende Feld.</param>
      <returns>Der letzte von einem Prozessor in das Feld geschriebene Wert.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt32@)">
      <summary>Liest den Wert eines Felds. Der Wert entspricht dem letzten von einem Prozessor in dem Computer geschriebenen Wert, unabhängig von der Anzahl der Prozessoren und dem Zustand des Prozessorcaches.</summary>
      <param name="address">Das zu lesende Feld.</param>
      <returns>Der letzte von einem Prozessor in das Feld geschriebene Wert.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt64@)">
      <summary>Liest den Wert eines Felds. Der Wert entspricht dem letzten von einem Prozessor in dem Computer geschriebenen Wert, unabhängig von der Anzahl der Prozessoren und dem Zustand des Prozessorcaches.</summary>
      <param name="address">Das zu lesende Feld.</param>
      <returns>Der letzte von einem Prozessor in das Feld geschriebene Wert.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)">
      <summary>Liest den Wert eines Felds. Der Wert entspricht dem letzten von einem Prozessor in dem Computer geschriebenen Wert, unabhängig von der Anzahl der Prozessoren und dem Zustand des Prozessorcaches.</summary>
      <param name="address">Das zu lesende Feld.</param>
      <returns>Der letzte von einem Prozessor in das Feld geschriebene Wert.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)">
      <summary>Schreibt einen Wert sofort in ein Feld, sodass der Wert für alle Prozessoren des Computers sichtbar ist.</summary>
      <param name="address">Das Feld, in das der Wert geschrieben werden soll.</param>
      <param name="value">Der zu schreibende Wert.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)">
      <summary>Schreibt einen Wert sofort in ein Feld, sodass der Wert für alle Prozessoren des Computers sichtbar ist.</summary>
      <param name="address">Das Feld, in das der Wert geschrieben werden soll.</param>
      <param name="value">Der zu schreibende Wert.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)">
      <summary>Schreibt einen Wert sofort in ein Feld, sodass der Wert für alle Prozessoren des Computers sichtbar ist.</summary>
      <param name="address">Das Feld, in das der Wert geschrieben werden soll.</param>
      <param name="value">Der zu schreibende Wert.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)">
      <summary>Schreibt einen Wert sofort in ein Feld, sodass der Wert für alle Prozessoren des Computers sichtbar ist.</summary>
      <param name="address">Das Feld, in das der Wert geschrieben werden soll.</param>
      <param name="value">Der zu schreibende Wert.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)">
      <summary>Schreibt einen Wert sofort in ein Feld, sodass der Wert für alle Prozessoren des Computers sichtbar ist.</summary>
      <param name="address">Das Feld, in das der Wert geschrieben werden soll.</param>
      <param name="value">Der zu schreibende Wert.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)">
      <summary>Schreibt einen Wert sofort in ein Feld, sodass der Wert für alle Prozessoren des Computers sichtbar ist.</summary>
      <param name="address">Das Feld, in das der Wert geschrieben werden soll.</param>
      <param name="value">Der zu schreibende Wert.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)">
      <summary>Schreibt einen Wert sofort in ein Feld, sodass der Wert für alle Prozessoren des Computers sichtbar ist.</summary>
      <param name="address">Das Feld, in das der Wert geschrieben werden soll.</param>
      <param name="value">Der zu schreibende Wert.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)">
      <summary>Schreibt einen Wert sofort in ein Feld, sodass der Wert für alle Prozessoren des Computers sichtbar ist.</summary>
      <param name="address">Das Feld, in das der Wert geschrieben werden soll.</param>
      <param name="value">Der zu schreibende Wert.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)">
      <summary>Schreibt einen Wert sofort in ein Feld, sodass der Wert für alle Prozessoren des Computers sichtbar ist.</summary>
      <param name="address">Das Feld, in das der Wert geschrieben werden soll.</param>
      <param name="value">Der zu schreibende Wert.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)">
      <summary>Schreibt einen Wert sofort in ein Feld, sodass der Wert für alle Prozessoren des Computers sichtbar ist.</summary>
      <param name="address">Das Feld, in das der Wert geschrieben werden soll.</param>
      <param name="value">Der zu schreibende Wert.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)">
      <summary>Schreibt einen Wert sofort in ein Feld, sodass der Wert für alle Prozessoren des Computers sichtbar ist.</summary>
      <param name="address">Das Feld, in das der Wert geschrieben werden soll.</param>
      <param name="value">Der zu schreibende Wert.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)">
      <summary>Schreibt einen Wert sofort in ein Feld, sodass der Wert für alle Prozessoren des Computers sichtbar ist.</summary>
      <param name="address">Das Feld, in das der Wert geschrieben werden soll.</param>
      <param name="value">Der zu schreibende Wert.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)">
      <summary>Schreibt einen Wert sofort in ein Feld, sodass der Wert für alle Prozessoren des Computers sichtbar ist.</summary>
      <param name="address">Das Feld, in das der Wert geschrieben werden soll.</param>
      <param name="value">Der zu schreibende Wert.</param>
    </member>
    <member name="M:System.Threading.Thread.Yield">
      <summary>Bewirkt, dass der aufrufende Thread die Ausführung an einen anderen Thread übergibt, der auf dem aktuellen Prozessor ausgeführt werden kann. Das Betriebssystem wählt den Thread für die Übergabe aus.</summary>
      <returns>
        <see langword="true" />, wenn das Betriebssystem die Ausführung an einen anderen Thread übergeben hat, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.ThreadAbortException">
      <summary>Die Ausnahme, die bei einem Aufruf der <see cref="M:System.Threading.Thread.Abort(System.Object)" />-Methode ausgelöst wird. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="P:System.Threading.ThreadAbortException.ExceptionState">
      <summary>Ruft ein Objekt ab, das anwendungsspezifische Informationen über den Threadabbruch enthält.</summary>
      <returns>Ein Objekt, das anwendungsspezifische Informationen enthält.</returns>
    </member>
    <member name="T:System.Threading.ThreadExceptionEventArgs">
      <summary>Stellt Daten für das <see cref="E:System.Windows.Forms.Application.ThreadException" />-Ereignis bereit.</summary>
    </member>
    <member name="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.ThreadExceptionEventArgs" />-Klasse.</summary>
      <param name="t">Die <see cref="T:System.Exception" />, die aufgetreten ist.</param>
    </member>
    <member name="P:System.Threading.ThreadExceptionEventArgs.Exception">
      <summary>Ruft die aufgetretene <see cref="T:System.Exception" /> ab.</summary>
      <returns>Die <see cref="T:System.Exception" />, die aufgetreten ist.</returns>
    </member>
    <member name="T:System.Threading.ThreadExceptionEventHandler">
      <summary>Stellt die Methode dar, die das <see cref="E:System.Windows.Forms.Application.ThreadException" />-Ereignis eines <see cref="T:System.Windows.Forms.Application" /> behandelt.</summary>
      <param name="sender">Die Quelle des Ereignisses.</param>
      <param name="e">Ein <see cref="T:System.Threading.ThreadExceptionEventArgs" />, das die Ereignisdaten enthält.</param>
    </member>
    <member name="T:System.Threading.ThreadInterruptedException">
      <summary>Die Ausnahme, die ausgelöst wird, wenn ein <see cref="T:System.Threading.Thread" /> im Wartezustand unterbrochen wird.</summary>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.ThreadInterruptedException" />-Klasse mit Standardeigenschaften.</summary>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.ThreadInterruptedException" />-Klasse mit serialisierten Daten.</summary>
      <param name="info">Die <see cref="T:System.Runtime.Serialization.SerializationInfo" />, die die serialisierten Objektdaten für die ausgelöste Ausnahme enthält.</param>
      <param name="context">Der <see cref="T:System.Runtime.Serialization.StreamingContext" />, der die Kontextinformationen über die Quelle oder das Ziel enthält.</param>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.ThreadInterruptedException" />-Klasse mit einer angegebenen Fehlermeldung.</summary>
      <param name="message">Die Fehlermeldung, in der die Ursache der Ausnahme erklärt wird.</param>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.ThreadInterruptedException" />-Klasse mit einer angegebenen Fehlermeldung und einem Verweis auf die innere Ausnahme, die diese Ausnahme ausgelöst hat.</summary>
      <param name="message">Die Fehlermeldung, in der die Ursache der Ausnahme erklärt wird.</param>
      <param name="innerException">Die Ausnahme, die die Ursache der aktuellen Ausnahme ist. Wenn der <paramref name="innerException" />-Parameter nicht <see langword="null" /> ist, wird die aktuelle Ausnahme in einem <see langword="catch" />-Block ausgelöst, der die innere Ausnahme behandelt.</param>
    </member>
    <member name="T:System.Threading.ThreadPriority">
      <summary>Gibt die Planungspriorität eines <see cref="T:System.Threading.Thread" /> an.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.AboveNormal">
      <summary>Der <see cref="T:System.Threading.Thread" /> kann anschließend an die Threads mit <see langword="Highest" />-Priorität und vor den Threads mit <see langword="Normal" />-Priorität geplant werden.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.BelowNormal">
      <summary>Der <see cref="T:System.Threading.Thread" /> kann anschließend an die Threads mit <see langword="Normal" />-Priorität und vor den Threads mit <see langword="Lowest" />-Priorität geplant werden.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Highest">
      <summary>Der <see cref="T:System.Threading.Thread" /> kann vor Threads mit jeder anderen Priorität geplant werden.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Lowest">
      <summary>Der <see cref="T:System.Threading.Thread" /> kann nach Threads mit jeder anderen Priorität geplant werden.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Normal">
      <summary>Der <see cref="T:System.Threading.Thread" /> kann anschließend an die Threads mit <see langword="AboveNormal" />-Priorität und vor den Threads mit <see langword="BelowNormal" />-Priorität geplant werden. Threads haben standardmäßig <see langword="Normal" />-Priorität.</summary>
    </member>
    <member name="T:System.Threading.ThreadStart">
      <summary>Stellt die Methode dar, die in einem <see cref="T:System.Threading.Thread" /> ausgeführt wird.</summary>
    </member>
    <member name="T:System.Threading.ThreadStartException">
      <summary>Die Ausnahme, die ausgelöst wird, wenn ein Fehler in einem verwalteten Thread auftritt, nachdem der Thread des zugrunde liegenden Betriebssystems gestartet wurde, jedoch bevor der Thread bereit ist, Benutzercode auszuführen.</summary>
    </member>
    <member name="T:System.Threading.ThreadState">
      <summary>Gibt die Ausführungszustände eines <see cref="T:System.Threading.Thread" /> an.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Aborted">
      <summary>Der Threadzustand schließt <see cref="F:System.Threading.ThreadState.AbortRequested" /> ein, und der Thread ist jetzt deaktiviert. Der Zustand hat sich jedoch noch nicht in <see cref="F:System.Threading.ThreadState.Stopped" /> geändert.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.AbortRequested">
      <summary>Die <see cref="M:System.Threading.Thread.Abort(System.Object)" />-Methode wurde für den Thread aufgerufen, doch der Thread hat noch nicht die ausstehende <see cref="T:System.Threading.ThreadAbortException" /> empfangen, die ihn zu beenden versucht.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Background">
      <summary>Der Thread wird nicht als Vordergrundthread, sondern als Hintergrundthread ausgeführt. Dieser Zustand wird durch Festlegen der <see cref="P:System.Threading.Thread.IsBackground" />-Eigenschaft gesteuert.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Running">
      <summary>Der Thread wurde gestartet und noch nicht beendet.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Stopped">
      <summary>Der Thread wurde beendet.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.StopRequested">
      <summary>Es besteht eine Anforderung für die Beendigung des Threads. Dies ist ausschließlich für die interne Verwendung vorgesehen.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Suspended">
      <summary>Der Thread wurde unterbrochen.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.SuspendRequested">
      <summary>Es besteht eine Anforderung für die Unterbrechung des Threads.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Unstarted">
      <summary>Die <see cref="M:System.Threading.Thread.Start" />-Methode wurde für den Thread nicht aufgerufen.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.WaitSleepJoin">
      <summary>Der Thread ist blockiert. Die Ursache hierfür könnte sein, dass <see cref="M:System.Threading.Thread.Sleep(System.Int32)" /> oder <see cref="M:System.Threading.Thread.Join" /> aufgerufen wurde, dass eine Sperre angefordert wurde, z.B. durch Aufrufen von <see cref="M:System.Threading.Monitor.Enter(System.Object)" /> oder <see cref="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" />, oder dass auf ein Threadsynchronisierungsobjekt wie <see cref="T:System.Threading.ManualResetEvent" /> gewartet wird.</summary>
    </member>
    <member name="T:System.Threading.ThreadStateException">
      <summary>Die Ausnahme, die ausgelöst wird, wenn sich ein <see cref="T:System.Threading.Thread" /> in einem für den Methodenaufruf ungültigen <see cref="P:System.Threading.Thread.ThreadState" /> befindet.</summary>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.ThreadStateException" />-Klasse mit Standardeigenschaften.</summary>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.ThreadStateException" />-Klasse mit serialisierten Daten.</summary>
      <param name="info">Die <see cref="T:System.Runtime.Serialization.SerializationInfo" />, die die serialisierten Objektdaten für die ausgelöste Ausnahme enthält.</param>
      <param name="context">Der <see cref="T:System.Runtime.Serialization.StreamingContext" />, der die Kontextinformationen über die Quelle oder das Ziel enthält.</param>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.ThreadStateException" />-Klasse mit einer angegebenen Fehlermeldung.</summary>
      <param name="message">Die Fehlermeldung, in der die Ursache der Ausnahme erklärt wird.</param>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.ThreadStateException" />-Klasse mit einer angegebenen Fehlermeldung und einem Verweis auf die innere Ausnahme, die diese Ausnahme ausgelöst hat.</summary>
      <param name="message">Die Fehlermeldung, in der die Ursache der Ausnahme erklärt wird.</param>
      <param name="innerException">Die Ausnahme, die die Ursache der aktuellen Ausnahme ist. Wenn der <paramref name="innerException" />-Parameter nicht <see langword="null" /> ist, wird die aktuelle Ausnahme in einem <see langword="catch" />-Block ausgelöst, der die innere Ausnahme behandelt.</param>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Tasks</name>
  </assembly>
  <members>
    <member name="T:System.OperationCanceledException">
      <summary>Die Ausnahme, die einem Thread beim Abbrechen eines von diesem Thread ausgeführten Vorgangs ausgelöst wird.</summary>
    </member>
    <member name="M:System.OperationCanceledException.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.OperationCanceledException" />-Klasse mit einer vom System bereitgestellten Fehlermeldung.</summary>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.OperationCanceledException" />-Klasse mit serialisierten Daten.</summary>
      <param name="info">Das Objekt, das die Daten des serialisierten Objekts enthält.</param>
      <param name="context">Die Kontextinformationen zur Quelle bzw. zum Ziel.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.OperationCanceledException" />-Klasse mit einer angegebenen Fehlermeldung.</summary>
      <param name="message">Ein <see cref="T:System.String" />, der den Fehler beschreibt.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.OperationCanceledException" />-Klasse mit einer angegebenen Fehlermeldung und einem Verweis auf die innere Ausnahme, die diese Ausnahme ausgelöst hat.</summary>
      <param name="message">Die Fehlermeldung, in der die Ursache der Ausnahme erklärt wird.</param>
      <param name="innerException">Die Ausnahme, die die Ursache der aktuellen Ausnahme ist. Wenn der <paramref name="innerException" />-Parameter nicht <see langword="null" /> ist, wird die aktuelle Ausnahme in einem <see langword="catch" />-Block ausgelöst, der die innere Ausnahme behandelt.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Exception,System.Threading.CancellationToken)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.OperationCanceledException" />-Klasse mit einer angegebenen Fehlermeldung, einem Verweis auf die innere Ausnahme, die diese Ausnahme ausgelöst hat, und einem Abbruchtoken.</summary>
      <param name="message">Die Fehlermeldung, in der die Ursache der Ausnahme erklärt wird.</param>
      <param name="innerException">Die Ausnahme, die die Ursache der aktuellen Ausnahme ist. Wenn der <paramref name="innerException" />-Parameter nicht <see langword="null" /> ist, wird die aktuelle Ausnahme in einem <see langword="catch" />-Block ausgelöst, der die innere Ausnahme behandelt.</param>
      <param name="token">Ein Abbruchtoken, das dem abgebrochenen Vorgang zugeordnet ist.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Threading.CancellationToken)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.OperationCanceledException" />-Klasse mit einer angegebenen Fehlermeldung und einem Abbruchtoken.</summary>
      <param name="message">Die Fehlermeldung, in der die Ursache der Ausnahme erklärt wird.</param>
      <param name="token">Ein Abbruchtoken, das dem abgebrochenen Vorgang zugeordnet ist.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.Threading.CancellationToken)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.OperationCanceledException" />-Klasse mit einem Abbruchtoken.</summary>
      <param name="token">Ein Abbruchtoken, das dem abgebrochenen Vorgang zugeordnet ist.</param>
    </member>
    <member name="P:System.OperationCanceledException.CancellationToken">
      <summary>Ruft ein Token ab, das dem abgebrochenen Vorgang zugeordnet ist.</summary>
      <returns>Ein Token, das dem abgebrochenen Vorgang zugeordnet ist, oder ein Standardtoken.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder">
      <summary>Stellt einen Generator für asynchrone Iteratoren dar.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>Plant den Übergang des Zustandsautomaten zur nächsten Aktion, wenn der angegebene Awaiter abgeschlossen ist.</summary>
      <param name="awaiter">Der Awaiter.</param>
      <param name="stateMachine">Der Zustandsautomat.</param>
      <typeparam name="TAwaiter">Der Awaitertyp.</typeparam>
      <typeparam name="TStateMachine">Der Typ des Zustandsautomaten.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>Plant den Übergang des Zustandsautomaten zur nächsten Aktion, wenn der angegebene Awaiter abgeschlossen ist.</summary>
      <param name="awaiter">Der Awaiter.</param>
      <param name="stateMachine">Der Zustandsautomat.</param>
      <typeparam name="TAwaiter">Der Awaitertyp.</typeparam>
      <typeparam name="TStateMachine">Der Typ des Zustandsautomaten.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.Complete">
      <summary>Markiert die Iteration als abgeschlossen, ob erfolgreich oder nicht.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.Create">
      <summary>Erstellt eine Instanz der <see cref="T:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder" />-Struktur.</summary>
      <returns>Die initialisierte Instanz.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.MoveNext``1(``0@)">
      <summary>Ruft <see cref="M:System.Runtime.CompilerServices.IAsyncStateMachine.MoveNext" /> auf dem Zustandsautomaten ab und schützt den <see cref="T:System.Threading.ExecutionContext" />.</summary>
      <param name="stateMachine">Die Zustandsautomatinstanz, die als Verweis übergeben wird.</param>
      <typeparam name="TStateMachine">Der Typ des Zustandsautomaten.</typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder">
      <summary>Stellt einen Generator für asynchrone Methoden dar, die eine Aufgabe zurückgeben.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>Plant den Übergang des Zustandsautomaten zur nächsten Aktion, wenn der angegebene Awaiter abgeschlossen ist.</summary>
      <param name="awaiter">Der Awaiter.</param>
      <param name="stateMachine">Der Zustandsautomat.</param>
      <typeparam name="TAwaiter">Der Awaitertyp.</typeparam>
      <typeparam name="TStateMachine">Der Typ des Zustandsautomaten.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>Plant den Übergang des Zustandsautomaten zur nächsten Aktion, wenn der angegebene Awaiter abgeschlossen ist. Diese Methode kann von teilweise vertrauenswürdigem Code aufgerufen werden.</summary>
      <param name="awaiter">Der Awaiter.</param>
      <param name="stateMachine">Der Zustandsautomat.</param>
      <typeparam name="TAwaiter">Der Awaitertyp.</typeparam>
      <typeparam name="TStateMachine">Der Typ des Zustandsautomaten.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Create">
      <summary>Erstellt eine Instanz der <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder" />-Klasse.</summary>
      <returns>Eine neue Instanz des Generators.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetException(System.Exception)">
      <summary>Markiert die Aufgabe als fehlgeschlagen und verknüpft die angegebene Ausnahme mit der Aufgabe.</summary>
      <param name="exception">Die Ausnahme, die an die Aufgabe gebunden werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Die Aufgabe ist bereits abgeschlossen.  

oder -  

 Der Builder wird nicht initialisiert.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult">
      <summary>Markiert die Aufgabe als erfolgreich abgeschlossen.</summary>
      <exception cref="T:System.InvalidOperationException">Die Aufgabe ist bereits abgeschlossen.  

oder -  

 Der Builder wird nicht initialisiert.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>Ordnet den Generator dem angegebenen Zustandsautomaten zu.</summary>
      <param name="stateMachine">Die Zustandsautomatinstanz, die dem Generator zugeordnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der Zustandsautomat wurde zuvor festgelegt.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start``1(``0@)">
      <summary>Startet den Generator mit dem zugeordneten Zustandsautomaten.</summary>
      <param name="stateMachine">Die Zustandsautomatinstanz, die als Verweis übergeben wird.</param>
      <typeparam name="TStateMachine">Der Typ des Zustandsautomaten.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> ist <see langword="null" />.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Task">
      <summary>Ruft die Aufgabe für diesen Generator ab.</summary>
      <returns>Die Aufgabe für diesen Generator.</returns>
      <exception cref="T:System.InvalidOperationException">Der Builder wird nicht initialisiert.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1">
      <summary>Stellt einen Generator für asynchrone Methoden dar, die eine Aufgabe zurückgeben, und stellt einen Parameter für das Ergebnis bereit.</summary>
      <typeparam name="TResult">Das zum Abschließen der Aufgabe zu verwendende Ergebnis.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)">
      <summary>Plant den Übergang des Zustandsautomaten zur nächsten Aktion, wenn der angegebene Awaiter abgeschlossen ist.</summary>
      <param name="awaiter">Der Awaiter.</param>
      <param name="stateMachine">Der Zustandsautomat.</param>
      <typeparam name="TAwaiter">Der Awaitertyp.</typeparam>
      <typeparam name="TStateMachine">Der Typ des Zustandsautomaten.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>Plant den Übergang des Zustandsautomaten zur nächsten Aktion, wenn der angegebene Awaiter abgeschlossen ist. Diese Methode kann von teilweise vertrauenswürdigem Code aufgerufen werden.</summary>
      <param name="awaiter">Der Awaiter.</param>
      <param name="stateMachine">Der Zustandsautomat.</param>
      <typeparam name="TAwaiter">Der Awaitertyp.</typeparam>
      <typeparam name="TStateMachine">Der Typ des Zustandsautomaten.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Create">
      <summary>Erstellt eine Instanz der <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1" />-Klasse.</summary>
      <returns>Eine neue Instanz des Generators.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(System.Exception)">
      <summary>Markiert die Aufgabe als fehlgeschlagen und verknüpft die angegebene Ausnahme mit der Aufgabe.</summary>
      <param name="exception">Die Ausnahme, die an die Aufgabe gebunden werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Die Aufgabe ist bereits abgeschlossen.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(`0)">
      <summary>Markiert die Aufgabe als erfolgreich abgeschlossen.</summary>
      <param name="result">Das zum Abschließen der Aufgabe zu verwendende Ergebnis.</param>
      <exception cref="T:System.InvalidOperationException">Die Aufgabe ist bereits abgeschlossen.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>Ordnet den Generator dem angegebenen Zustandsautomaten zu.</summary>
      <param name="stateMachine">Die Zustandsautomatinstanz, die dem Generator zugeordnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der Zustandsautomat wurde zuvor festgelegt.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start``1(``0@)">
      <summary>Startet den Generator mit dem zugeordneten Zustandsautomaten.</summary>
      <param name="stateMachine">Die Zustandsautomatinstanz, die als Verweis übergeben wird.</param>
      <typeparam name="TStateMachine">Der Typ des Zustandsautomaten.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> ist <see langword="null" />.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Task">
      <summary>Ruft die Aufgabe für diesen Generator ab.</summary>
      <returns>Die Aufgabe für diesen Generator.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder">
      <summary>Stellt einen Generator für asynchrone Methoden dar, die keinen Wert zurückgeben.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>Plant den Übergang des Zustandsautomaten zur nächsten Aktion, wenn der angegebene Awaiter abgeschlossen ist.</summary>
      <param name="awaiter">Der Awaiter.</param>
      <param name="stateMachine">Der Zustandsautomat.</param>
      <typeparam name="TAwaiter">Der Awaitertyp.</typeparam>
      <typeparam name="TStateMachine">Der Typ des Zustandsautomaten.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>Plant den Übergang des Zustandsautomaten zur nächsten Aktion, wenn der angegebene Awaiter abgeschlossen ist. Diese Methode kann von teilweise vertrauenswürdigem Code aufgerufen werden.</summary>
      <param name="awaiter">Der Awaiter.</param>
      <param name="stateMachine">Der Zustandsautomat.</param>
      <typeparam name="TAwaiter">Der Awaitertyp.</typeparam>
      <typeparam name="TStateMachine">Der Typ des Zustandsautomaten.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Create">
      <summary>Erstellt eine Instanz der <see cref="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder" />-Klasse.</summary>
      <returns>Eine neue Instanz des Generators.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetException(System.Exception)">
      <summary>Bindet eine Ausnahme an den Methodengenerator.</summary>
      <param name="exception">Die zu bindende Ausnahme.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der Builder wird nicht initialisiert.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetResult">
      <summary>Markiert den Methodengenerator als erfolgreich abgeschlossen.</summary>
      <exception cref="T:System.InvalidOperationException">Der Builder wird nicht initialisiert.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>Ordnet den Generator dem angegebenen Zustandsautomaten zu.</summary>
      <param name="stateMachine">Die Zustandsautomatinstanz, die dem Generator zugeordnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der Zustandsautomat wurde zuvor festgelegt.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Start``1(``0@)">
      <summary>Startet den Generator mit dem zugeordneten Zustandsautomaten.</summary>
      <param name="stateMachine">Die Zustandsautomatinstanz, die als Verweis übergeben wird.</param>
      <typeparam name="TStateMachine">Der Typ des Zustandsautomaten.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> ist <see langword="null" />.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredAsyncDisposable">
      <summary>Bietet einen Typ, mit dem konfiguriert werden kann, wie Wartezeiten an <see cref="T:System.IAsyncDisposable" /> ausgeführt werden.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredAsyncDisposable.DisposeAsync">
      <summary>Gibt die nicht verwalteten Ressourcen, die von der <see cref="T:System.Runtime.CompilerServices.ConfiguredAsyncDisposable" /> verwendet werden, asynchron frei.</summary>
      <returns>Eine Aufgabe, die den asynchronen Löschvorgang darstellt.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1">
      <summary>Bietet einen asynchronen aufzählbaren awaitable-Wert, der eine abbrechbare Iteration und konfigurierte Wartezeiten ermöglicht.</summary>
      <typeparam name="T">Der Typ der aufzuzählenden Werte.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.ConfigureAwait(System.Boolean)">
      <summary>Konfiguriert, wie Wartezeiten auf die Aufgaben angewandt werden, die von einer asynchronen Iteration zurückgegeben werden.</summary>
      <param name="continueOnCapturedContext">
        <see langword="true" /> zum Erfassen und zum Marshallen zurück zum aktuellen Kontext; andernfalls <see langword="false" />.</param>
      <returns>Der konfigurierte aufzählbare Wert.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator">
      <summary>Bietet einen asynchronen awaitable-Enumerator, der eine abbrechbare Iteration und konfigurierte Wartezeiten ermöglicht.</summary>
      <typeparam name="T">Der Typ der aufzuzählenden Werte.</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.Current">
      <summary>Ruft das Element in der Auflistung an der aktuellen Position des Enumerators ab.</summary>
      <returns>Das Element in der Auflistung an der aktuellen Position des Enumerators.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.DisposeAsync">
      <summary>Führt anwendungsspezifische Aufgaben aus, die mit dem asynchronen Freigeben, Zurückgeben oder Zurücksetzen von nicht verwalteten Ressourcen zusammenhängen.</summary>
      <returns>Eine Aufgabe, die den asynchronen Löschvorgang darstellt.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.MoveNextAsync">
      <summary>Setzt den Enumerator asynchron auf das nächste Element der Sammlung.</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" /> wird mit dem Ergebnis <see langword="true" /> ausgeführt, wenn der Enumerator erfolgreich auf das nächste Element gesetzt wurde, oder <see langword="false" />, wenn der Enumerator das Ende der Sammlung überschritten hat.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.GetAsyncEnumerator">
      <summary>Gibt einen Enumerator zurück, der Auflistungen asynchron durchläuft. Dieser Enumerator ermöglicht Iterationen, die abgebrochen werden können, sowie konfigurierte Wartezeiten.</summary>
      <returns>Ein Enumerator für die <see cref="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1" />-Klasse.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.WithCancellation(System.Threading.CancellationToken)">
      <summary>Legt das <see cref="T:System.Threading.CancellationToken" /> fest, das beim Durchlaufen an <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" /> übergeben werden soll.</summary>
      <param name="cancellationToken">Das zu verwendende Abbruchtoken.</param>
      <returns>Der konfigurierte aufzählbare Wert.</returns>
    </member>
    <member name="T:System.Threading.CancellationTokenSource">
      <summary>Signalisiert einem <see cref="T:System.Threading.CancellationToken" />, dass es abgebrochen werden soll.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.CancellationTokenSource" />-Klasse.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.CancellationTokenSource" />-Klasse, die nach der angegebene Verzögerung in Millisekunden abgebrochen wird.</summary>
      <param name="millisecondsDelay">Das Zeitintervall in Millisekunden, das vor dem Abbrechen dieser <see cref="T:System.Threading.CancellationTokenSource" />-Klasse gewartet wird.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsDelay" /> ist kleiner als -1.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.CancellationTokenSource" />-Klasse, die nach der angegebenen Zeitspanne abgebrochen wird.</summary>
      <param name="delay">Das Zeitintervall, das vor dem Abbrechen dieser <see cref="T:System.Threading.CancellationTokenSource" />-Klasse abgewartet wird.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delay" />.<see cref="P:System.TimeSpan.TotalMilliseconds" /> ist kleiner als -1 oder größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Cancel">
      <summary>Übermittelt eine Abbruchanforderung.</summary>
      <exception cref="T:System.ObjectDisposedException">Diese <see cref="T:System.Threading.CancellationTokenSource" /> wurde verworfen.</exception>
      <exception cref="T:System.AggregateException">Eine aggregierte Ausnahme, die alle Ausnahmen enthält, die von den registrierten Rückrufen für das zugeordnete <see cref="T:System.Threading.CancellationToken" /> ausgelöst werden.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
      <summary>Teilt eine Anforderung für Abbruch mit und gibt an, ob verbleibende Rückrufe und abbrechbare Vorgänge verarbeitet werden sollen, wenn keine Ausnahme auftritt.</summary>
      <param name="throwOnFirstException">
        <see langword="true" />, wenn Ausnahmen sofort weitergegeben werden sollten; andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ObjectDisposedException">Diese <see cref="T:System.Threading.CancellationTokenSource" /> wurde verworfen.</exception>
      <exception cref="T:System.AggregateException">Eine aggregierte Ausnahme, die alle Ausnahmen enthält, die von den registrierten Rückrufen für das zugeordnete <see cref="T:System.Threading.CancellationToken" /> ausgelöst werden.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
      <summary>Plant einen Abbruch auf diesem <see cref="T:System.Threading.CancellationTokenSource" /> nach der angegebenen Anzahl von Millisekunden.</summary>
      <param name="millisecondsDelay">Die Zeitspanne, die gewartet wird, bevor diese <see cref="T:System.Threading.CancellationTokenSource" /> abgebrochen wird.</param>
      <exception cref="T:System.ObjectDisposedException">Die Ausnahme, die ausgelöst wird, wenn dieses <see cref="T:System.Threading.CancellationTokenSource" /> freigegeben wurde.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Die Ausnahme, die ausgelöst wird, wenn <paramref name="millisecondsDelay" /> kleiner als -1 ist.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)">
      <summary>Plant einen Abbruch auf diesem <see cref="T:System.Threading.CancellationTokenSource" /> nach der angegebenen Zeitspanne.</summary>
      <param name="delay">Die Zeitspanne, die gewartet wird, bevor diese <see cref="T:System.Threading.CancellationTokenSource" /> abgebrochen wird.</param>
      <exception cref="T:System.ObjectDisposedException">Die Ausnahme, die ausgelöst wird, wenn dieses <see cref="T:System.Threading.CancellationTokenSource" /> freigegeben wurde.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Die Ausnahme, die ausgelöst wird, wenn <paramref name="delay" /> kleiner als -1 oder größer als Int32.MaxValue ist.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>Erstellt eine <see cref="T:System.Threading.CancellationTokenSource" />, für die der Zustand "abgebrochen" festgelegt wird, wenn eines der Quelltoken im Zustand "abgebrochen" ist.</summary>
      <param name="token1">Das erste Abbruchtoken, das überwacht werden soll.</param>
      <param name="token2">Das zweite Abbruchtoken, das überwacht werden soll.</param>
      <returns>Ein <see cref="T:System.Threading.CancellationTokenSource" />, das mit den Quelltoken verknüpft ist.</returns>
      <exception cref="T:System.ObjectDisposedException">Eine einem der Quelltoken zugeordnete <see cref="T:System.Threading.CancellationTokenSource" /> wurde freigegeben.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
      <summary>Erstellt eine <see cref="T:System.Threading.CancellationTokenSource" />, für die der Zustand "abgebrochen" festgelegt wird, wenn eines der Quelltoken im angegebenen Array im Zustand "abgebrochen" ist.</summary>
      <param name="tokens">Ein Array, das das Abbruchtokeninstanzen enthält, die beobachtet werden sollen.</param>
      <returns>Ein <see cref="T:System.Threading.CancellationTokenSource" />, das mit den Quelltoken verknüpft ist.</returns>
      <exception cref="T:System.ObjectDisposedException">Eine einem der Quelltoken zugeordnete <see cref="T:System.Threading.CancellationTokenSource" /> wurde freigegeben.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokens" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tokens" /> ist leer.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Dispose">
      <summary>Gibt alle von der aktuellen Instanz der <see cref="T:System.Threading.CancellationTokenSource" />-Klasse verwendeten Ressourcen frei.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Dispose(System.Boolean)">
      <summary>Gibt die von der <see cref="T:System.Threading.CancellationTokenSource" />-Klasse verwendeten nicht verwalteten Ressourcen frei und gibt (optional) auch die verwalteten Ressourcen frei.</summary>
      <param name="disposing">
        <see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</param>
    </member>
    <member name="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
      <summary>Ruft einen Wert ab, der angibt, ob für diese <see cref="T:System.Threading.CancellationTokenSource" /> ein Abbruch angefordert wurde.</summary>
      <returns>
        <see langword="true" />, wenn der Abbruch für diese <see cref="T:System.Threading.CancellationTokenSource" /> angefordert wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.CancellationTokenSource.Token">
      <summary>Ruft den diesem <see cref="T:System.Threading.CancellationToken" /> zugeordneten <see cref="T:System.Threading.CancellationTokenSource" /> ab.</summary>
      <returns>Das dieser <see cref="T:System.Threading.CancellationToken" /> zugeordnete <see cref="T:System.Threading.CancellationTokenSource" />.</returns>
      <exception cref="T:System.ObjectDisposedException">Die Tokenquelle wurde freigegeben.</exception>
    </member>
    <member name="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair">
      <summary>Stellt Taskplaner bereit, die auszuführende Aufgaben koordinieren, während sie sicherstellen, dass gleichzeitige Aufgaben gleichzeitig ausgeführt werden können, exklusive Aufgaben zu keinerlei Zeitpunkt.</summary>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" />-Klasse.</summary>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" />-Klasse, die auf den angegebenen Planer abzielt.</summary>
      <param name="taskScheduler">Der Zielplaner, auf dem dieses Paar ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" />-Klasse für den angegebenen Planer mit einer maximalen Parallelitätsebene.</summary>
      <param name="taskScheduler">Der Zielplaner, auf dem dieses Paar ausgeführt werden soll.</param>
      <param name="maxConcurrencyLevel">Die maximale Anzahl von Tasks, die gleichzeitig ausgeführt werden.</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32,System.Int32)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" />-Klasse für den angegebenen Planer mit einer maximalen Parallelitätsebene und einer maximalen Anzahl von geplanten Aufgaben, die als Einheit verarbeitet werden können.</summary>
      <param name="taskScheduler">Der Zielplaner, auf dem dieses Paar ausgeführt werden soll.</param>
      <param name="maxConcurrencyLevel">Die maximale Anzahl von Tasks, die gleichzeitig ausgeführt werden.</param>
      <param name="maxItemsPerTask">Die maximale Anzahl auszuführender Tasks für jeden zugrunde liegenden geplanten Task, der von dem Paar verwendet wird.</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Complete">
      <summary>Informiert das Planerpaar, dass es keine weiteren Aufgaben annehmen sollte.</summary>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Completion">
      <summary>Ruft <see cref="T:System.Threading.Tasks.Task" /> ab, der abgeschlossen wird, wenn der Planer die Verarbeitung abgeschlossen hat.</summary>
      <returns>Der asynchrone Vorgang, der abgeschlossen wird, wenn der Planer die Verarbeitung abschließt.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentScheduler">
      <summary>Ruft <see cref="T:System.Threading.Tasks.TaskScheduler" /> ab, das verwendet werden kann, um Aufgaben für dieses Paar zu planen, die gleichzeitig mit anderen Aufgaben für dieses Paar ausgeführt werden können.</summary>
      <returns>Ein Objekt, das verwendet werden kann, um Aufgaben gleichzeitig zu planen.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ExclusiveScheduler">
      <summary>Ruft <see cref="T:System.Threading.Tasks.TaskScheduler" /> ab, das verwendet werden kann, um Aufgaben für dieses Paar zu planen, die in Bezug auf andere Aufgaben für dieses Paar exklusiv ausgeführt werden müssen.</summary>
      <returns>Ein Objekt, das verwendet werden kann, um Aufgaben zu planen, die nicht gleichzeitig mit anderen Aufgaben ausgeführt werden.</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskAsyncEnumerableExtensions">
      <summary>Bietet eine Reihe von statischen Methoden zur Konfiguration des aufgabenbezogenen Verhaltens bei asynchronen aufzählbaren und verwerfbaren Elementen.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait(System.IAsyncDisposable,System.Boolean)">
      <summary>Konfiguriert, wie Wartezeiten auf die Aufgaben angewandt werden, die von einem asynchronen verwerfbaren Element zurückgegeben werden.</summary>
      <param name="source">Die asynchrone, verwerfbare Quelle.</param>
      <param name="continueOnCapturedContext">
        <see langword="true" /> zum Erfassen und zum Marshallen zurück zum aktuellen Kontext; andernfalls <see langword="false" />.</param>
      <returns>Das konfigurierte asynchrone verwerfbare Element.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Boolean)">
      <summary>Konfiguriert, wie Wartezeiten auf die Aufgaben angewandt werden, die von einer asynchronen Iteration zurückgegeben werden.</summary>
      <param name="source">Die zu durchlaufende aufzählbare Quelle.</param>
      <param name="continueOnCapturedContext">
        <see langword="true" /> zum Erfassen und zum Marshallen zurück zum aktuellen Kontext; andernfalls <see langword="false" />.</param>
      <typeparam name="T">Der Typ der zu durch iterenden Objekte.</typeparam>
      <returns>Das konfigurierte aufzählbare Element.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.WithCancellation``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
      <summary>Legt das <see cref="T:System.Threading.CancellationToken" /> fest, das beim Durchlaufen an <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" /> übergeben werden soll.</summary>
      <param name="source">Die zu durchlaufende aufzählbare Quelle.</param>
      <param name="cancellationToken">Das zu verwendende Abbruchtoken.</param>
      <typeparam name="T">Der Typ der zu durch iterenden Objekte.</typeparam>
      <returns>Das konfigurierte aufzählbare Element.</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskCanceledException">
      <summary>Stellt eine Ausnahme dar, die verwendet wurde, um einen Taskabbruch zu übermitteln.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.Tasks.TaskCanceledException" />-Klasse mit einer vom System generierten Meldung, die den Fehler beschreibt.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.Tasks.TaskCanceledException" />-Klasse mit serialisierten Daten.</summary>
      <param name="info">Das Objekt, das die Daten des serialisierten Objekts enthält.</param>
      <param name="context">Die Kontextinformationen zur Quelle bzw. zum Ziel.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.Tasks.TaskCanceledException" />-Klasse mit einer angegebenen Meldung, die den Fehler beschreibt.</summary>
      <param name="message">Die Meldung, in der die Ausnahme beschrieben wird Der Aufrufer dieses Konstruktors muss sicherstellen, dass diese Zeichenfolge für die aktuelle Systemkultur lokalisiert wurde.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.Tasks.TaskCanceledException" />-Klasse mit einer angegebenen Fehlermeldung und einem Verweis auf die innere Ausnahme, die diese Ausnahme ausgelöst hat.</summary>
      <param name="message">Die Meldung, in der die Ausnahme beschrieben wird Der Aufrufer dieses Konstruktors muss sicherstellen, dass diese Zeichenfolge für die aktuelle Systemkultur lokalisiert wurde.</param>
      <param name="innerException">Die Ausnahme, die die Ursache der aktuellen Ausnahme ist. Wenn der <paramref name="innerException" />-Parameter nicht <see langword="null" /> ist, wird die aktuelle Ausnahme in einem <see langword="catch" />-Block ausgelöst, der die innere Ausnahme behandelt.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String,System.Exception,System.Threading.CancellationToken)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.Tasks.TaskCanceledException" />-Klasse mit einer angegebenen Fehlermeldung, einem Verweis auf die innere Ausnahme, die diese Ausnahme ausgelöst hat, und das <see cref="T:System.Threading.CancellationToken" />, das den Abbruch ausgelöst hat.</summary>
      <param name="message">Die Fehlermeldung, in der die Ursache der Ausnahme erklärt wird.</param>
      <param name="innerException">Die Ausnahme, die die Ursache der aktuellen Ausnahme ist.</param>
      <param name="token">Das Abbruchtoken, das den Abbruch ausgelöst hat.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.Threading.Tasks.Task)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.Tasks.TaskCanceledException" />-Klasse mit einem Verweis auf das <see cref="T:System.Threading.Tasks.Task" />-Objekt, das abgebrochen wurde.</summary>
      <param name="task">Ein Task, der abgebrochen wurde.</param>
    </member>
    <member name="P:System.Threading.Tasks.TaskCanceledException.Task">
      <summary>Ruft die Aufgabe ab, die dieser Ausnahme zugeordnet ist.</summary>
      <returns>Ein Verweis auf den <see cref="T:System.Threading.Tasks.Task" />, der dieser Ausnahme zugeordnet ist.</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskCompletionSource`1">
      <summary>Stellt die Producerseite eines <see cref="T:System.Threading.Tasks.Task`1" />-Objekts dar, dessen Bindung an einen Delegaten aufgehoben wurde. Das Element ermöglicht mithilfe der <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />-Eigenschaft den Zugriff auf die Consumerseite.</summary>
      <typeparam name="TResult">Der Typ des Ergebnis Werts, der diesem <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />zugeordnet ist.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor">
      <summary>Erstellt eine <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object)">
      <summary>Erstellt ein <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />-Objekt mit dem angegebenen Zustand.</summary>
      <param name="state">Der Zustand, der als zugrunde liegender AsyncState von <see cref="T:System.Threading.Tasks.Task`1" /> verwendet werden soll.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Erstellt ein <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />-Objekt mit dem angegebenen Zustand und den angegebenen Optionen.</summary>
      <param name="state">Der Zustand, der als zugrunde liegender AsyncState von <see cref="T:System.Threading.Tasks.Task`1" /> verwendet werden soll.</param>
      <param name="creationOptions">Die Optionen, die beim Erstellen des zugrunde liegenden <see cref="T:System.Threading.Tasks.Task`1" />-Objekts zu verwenden sind.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="creationOptions" /> stellt Optionen dar, die für die Verwendung mit einem <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> ungültig sind.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Threading.Tasks.TaskCreationOptions)">
      <summary>Erstellt ein <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />-Objekt mit den angegebenen Optionen.</summary>
      <param name="creationOptions">Die Optionen, die beim Erstellen des zugrunde liegenden <see cref="T:System.Threading.Tasks.Task`1" />-Objekts zu verwenden sind.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="creationOptions" /> stellt Optionen dar, die für die Verwendung mit einem <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> ungültig sind.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetCanceled">
      <summary>Sorgt für den Übergang des zugrunde liegenden <see cref="T:System.Threading.Tasks.Task`1" />-Objekts in den <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />-Zustand.</summary>
      <exception cref="T:System.InvalidOperationException">Der zugrunde liegende <see cref="T:System.Threading.Tasks.Task`1" /> befindet sich bereits in einem der drei Endzustände: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> oder <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />, oder wenn der zugrunde liegende <see cref="T:System.Threading.Tasks.Task`1" /> bereits freigegeben wurde.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> wurde verworfen.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>Sorgt für den Übergang des zugrunde liegenden <see cref="T:System.Threading.Tasks.Task`1" /> in den <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />-Status und bindet eine Sammlung von Ausnahmeobjekten daran.</summary>
      <param name="exceptions">Die Auflistung der Ausnahmen, die an das <see cref="T:System.Threading.Tasks.Task`1" />-Objekt gebunden werden sollen.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> wurde verworfen.</exception>
      <exception cref="T:System.ArgumentNullException">Das <paramref name="exceptions" />-Argument lautet <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="exceptions" /> enthält mindestens ein NULL-Element.</exception>
      <exception cref="T:System.InvalidOperationException">Der zugrunde liegende <see cref="T:System.Threading.Tasks.Task`1" /> ist bereits in einem der drei Endzustände: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> oder <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)">
      <summary>Lässt den zugrunde liegenden <see cref="T:System.Threading.Tasks.Task`1" /> in den <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />-Status übergehen und bindet ihn an eine angegebene Ausnahme.</summary>
      <param name="exception">Die Ausnahme, die an das <see cref="T:System.Threading.Tasks.Task`1" />-Objekt gebunden werden soll.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> wurde verworfen.</exception>
      <exception cref="T:System.ArgumentNullException">Das <paramref name="exception" />-Argument lautet <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der zugrunde liegende <see cref="T:System.Threading.Tasks.Task`1" /> ist bereits in einem der drei Endzustände: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> oder <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetResult(`0)">
      <summary>Sorgt für den Übergang des zugrunde liegenden <see cref="T:System.Threading.Tasks.Task`1" />-Objekts in den <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />-Zustand.</summary>
      <param name="result">Der Ergebniswert, der an das <see cref="T:System.Threading.Tasks.Task`1" />-Objekt gebunden werden soll.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> wurde verworfen.</exception>
      <exception cref="T:System.InvalidOperationException">Der zugrunde liegende <see cref="T:System.Threading.Tasks.Task`1" /> ist bereits in einem der drei Endzustände: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> oder <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskCompletionSource`1.Task">
      <summary>Ruft den von der <see cref="T:System.Threading.Tasks.Task`1" /> erstellten <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> ab.</summary>
      <returns>Gibt den von dieser <see cref="T:System.Threading.Tasks.Task`1" /> erstellten <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> zurück.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled">
      <summary>Versucht, den Übergang des zugrunde liegenden <see cref="T:System.Threading.Tasks.Task`1" />-Objekts in den <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />-Zustand auszuführen.</summary>
      <returns>True, wenn der Vorgang erfolgreich war, false, wenn der Vorgang nicht erfolgreich war oder das Objekt bereits freigegeben wurde.</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> wurde verworfen.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled(System.Threading.CancellationToken)">
      <summary>Versucht, den Übergang des zugrunde liegenden <see cref="T:System.Threading.Tasks.Task`1" />-Objekts in den <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />-Zustand auszuführen, und ermöglicht das Speichern eines Abbruchtokens in der abgebrochenen Aufgabe.</summary>
      <param name="cancellationToken">Ein Abbruchtoken.</param>
      <returns>
        <see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>Versucht den Übergang der zugrunde liegenden <see cref="T:System.Threading.Tasks.Task`1" /> in den <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />-Status und bindet eine Sammlung von Ausnahmeobjekten daran.</summary>
      <param name="exceptions">Die Auflistung der Ausnahmen, die an das <see cref="T:System.Threading.Tasks.Task`1" />-Objekt gebunden werden sollen.</param>
      <returns>True, wenn der Vorgang erfolgreich war, andernfalls false.</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> wurde verworfen.</exception>
      <exception cref="T:System.ArgumentNullException">Das <paramref name="exceptions" />-Argument lautet <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="exceptions" /> enthält mindestens ein NULL-Element.  

oder - 
Die <paramref name="exceptions" />-Sammlung ist leer.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
      <summary>Versucht den Übergang der zugrunde liegenden <see cref="T:System.Threading.Tasks.Task`1" /> in den <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />-Status und bindet sie an eine angegebene Ausnahme.</summary>
      <param name="exception">Die Ausnahme, die an das <see cref="T:System.Threading.Tasks.Task`1" />-Objekt gebunden werden soll.</param>
      <returns>True, wenn der Vorgang erfolgreich war, andernfalls false.</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> wurde verworfen.</exception>
      <exception cref="T:System.ArgumentNullException">Das <paramref name="exception" />-Argument lautet <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)">
      <summary>Versucht, den Übergang des zugrunde liegenden <see cref="T:System.Threading.Tasks.Task`1" />-Objekts in den <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />-Zustand auszuführen.</summary>
      <param name="result">Der Ergebniswert, der an das <see cref="T:System.Threading.Tasks.Task`1" />-Objekt gebunden werden soll.</param>
      <returns>True, wenn der Vorgang erfolgreich war, andernfalls false.</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> wurde verworfen.</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskExtensions">
      <summary>Stellt einen Satz mit statischen Methoden (Shared in Visual Basic) für die Arbeit mit bestimmten Arten von <see cref="T:System.Threading.Tasks.Task" />-Instanzen bereit.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
      <summary>Erstellt einen <see cref="T:System.Threading.Tasks.Task" /> für Proxys, der den asynchronen Vorgang eines <see cref="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)" /> darstellt.</summary>
      <param name="task">Die zu entpackende <see langword="Task&lt;Task&gt;" /> (C#) oder <see langword="Task (Of Task)" /> Visual Basic).</param>
      <returns>Eine Aufgabe, die den asynchronen Vorgang des angegebenen <see langword="System.Threading.Tasks.Task(Of Task)" /> darstellt.</returns>
      <exception cref="T:System.ArgumentNullException">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="task" />-Argument NULL ist.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
      <summary>Erstellt einen Proxy-<see cref="T:System.Threading.Tasks.Task" />, der den asynchronen Vorgang von einem <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) oder <see langword="Task (Of Task(Of T))" /> (Visual Basic) darstellt.</summary>
      <param name="task">Die zu entpackende <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) oder <see langword="Task (Of Task(Of T))" /> Visual Basic).</param>
      <typeparam name="TResult">Der Typ des Aufgabenergebnisses.</typeparam>
      <returns>Ein <see cref="T:System.Threading.Tasks.Task" />, der den asynchronen Vorgang des bereitgestellten <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) oder <see langword="Task (Of Task(Of T))" /> (Visual Basic) darstellt.</returns>
      <exception cref="T:System.ArgumentNullException">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="task" />-Argument NULL ist.</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskSchedulerException">
      <summary>Stellt eine Ausnahme dar, die verwendet wird, um einen ungültigen Vorgang eines <see cref="T:System.Threading.Tasks.TaskScheduler" /> zu übermitteln.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.Tasks.TaskSchedulerException" />-Klasse mit einer vom System generierten Meldung, die den Fehler beschreibt.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.Tasks.TaskSchedulerException" />-Klasse unter Verwendung einer Standardfehlermeldung und eines Verweises auf die interne Ausnahme, die die Ursache dieser Ausnahme ist.</summary>
      <param name="innerException">Die Ausnahme, die die Ursache der aktuellen Ausnahme ist.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.Tasks.TaskSchedulerException" />-Klasse mit serialisierten Daten.</summary>
      <param name="info">Das Objekt, das die Daten des serialisierten Objekts enthält.</param>
      <param name="context">Die Kontextinformationen zur Quelle bzw. zum Ziel.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.Tasks.TaskSchedulerException" />-Klasse mit einer angegebenen Meldung, die den Fehler beschreibt.</summary>
      <param name="message">Die Meldung, in der die Ausnahme beschrieben wird Der Aufrufer dieses Konstruktors muss sicherstellen, dass diese Zeichenfolge für die aktuelle Systemkultur lokalisiert wurde.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.Tasks.TaskSchedulerException" />-Klasse mit einer angegebenen Fehlermeldung und einem Verweis auf die innere Ausnahme, die diese Ausnahme ausgelöst hat.</summary>
      <param name="message">Die Meldung, in der die Ausnahme beschrieben wird Der Aufrufer dieses Konstruktors muss sicherstellen, dass diese Zeichenfolge für die aktuelle Systemkultur lokalisiert wurde.</param>
      <param name="innerException">Die Ausnahme, die die Ursache der aktuellen Ausnahme ist. Wenn der <paramref name="innerException" />-Parameter nicht <see langword="null" /> ist, wird die aktuelle Ausnahme in einem <see langword="catch" />-Block ausgelöst, der die innere Ausnahme behandelt.</param>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Channels</name>
  </assembly>
  <members>
    <member name="T:System.Threading.Channels.BoundedChannelFullMode">
      <summary>Gibt das Verhalten an, das beim Schreiben in einen gebundenen Kanal verwendet werden soll, der bereits voll ist.</summary>
    </member>
    <member name="F:System.Threading.Channels.BoundedChannelFullMode.DropNewest">
      <summary>Entfernt und ignoriert das neueste Element im Kanal, um Platz für das zu schreibende Element zu schaffen.</summary>
    </member>
    <member name="F:System.Threading.Channels.BoundedChannelFullMode.DropOldest">
      <summary>Entfernt und ignoriert das älteste Element im Kanal, um Platz für das zu schreibende Element zu schaffen.</summary>
    </member>
    <member name="F:System.Threading.Channels.BoundedChannelFullMode.DropWrite">
      <summary>Löscht das Element, das geschrieben wird.</summary>
    </member>
    <member name="F:System.Threading.Channels.BoundedChannelFullMode.Wait">
      <summary>Wartet darauf, dass Platz verfügbar ist, um den Schreibvorgang abzuschließen.</summary>
    </member>
    <member name="T:System.Threading.Channels.BoundedChannelOptions">
      <summary>Bietet Optionen, die das Verhalten von gebundenen <see cref="T:System.Threading.Channels.Channel`1" />-Instanzen steuern.</summary>
    </member>
    <member name="M:System.Threading.Channels.BoundedChannelOptions.#ctor(System.Int32)">
      <summary>Initialisiert die Optionen.</summary>
      <param name="capacity">Die maximale Anzahl von Elementen, die der gebunden Kanal speichern kann.</param>
    </member>
    <member name="P:System.Threading.Channels.BoundedChannelOptions.Capacity">
      <summary>Ruft die maximale Anzahl von Elementen ab, die der gebunden Kanal speichern kann, bzw. legt diese fest.</summary>
    </member>
    <member name="P:System.Threading.Channels.BoundedChannelOptions.FullMode">
      <summary>Ruft das durch Schreibvorgänge ausgelöste Verhalten ab, wenn der Kanal voll ist, bzw. legt dieses fest.</summary>
    </member>
    <member name="T:System.Threading.Channels.Channel">
      <summary>Stellt statische Methoden zum Erstellen von Kanälen bereit.</summary>
    </member>
    <member name="M:System.Threading.Channels.Channel.CreateBounded``1(System.Int32)">
      <summary>Erstellt einen Kanal mit der angegebenen maximalen Kapazität.</summary>
      <param name="capacity">Die maximale Anzahl von Elementen, die der Kanal speichern kann.</param>
      <typeparam name="T">Gibt den Typ der Daten im Kanal an.</typeparam>
      <returns>Der erstellte Kanal.</returns>
    </member>
    <member name="M:System.Threading.Channels.Channel.CreateBounded``1(System.Threading.Channels.BoundedChannelOptions)">
      <summary>Erstellt einen Kanal mit der angegebenen maximalen Kapazität.</summary>
      <param name="options">Optionen, die das Verhalten des Kanals steuern.</param>
      <typeparam name="T">Gibt den Typ der Daten im Kanal an.</typeparam>
      <returns>Der erstellte Kanal.</returns>
    </member>
    <member name="M:System.Threading.Channels.Channel.CreateUnbounded``1">
      <summary>Erstellt einen ungebundenen Kanal, der von einer beliebigen Anzahl von Lesern und Schreibern gleichzeitig genutzt werden kann.</summary>
      <typeparam name="T" />
      <returns>Der erstellte Kanal.</returns>
    </member>
    <member name="M:System.Threading.Channels.Channel.CreateUnbounded``1(System.Threading.Channels.UnboundedChannelOptions)">
      <summary>Erstellt einen ungebundenen Kanal gemäß den angegebenen Optionen.</summary>
      <param name="options">Optionen, die das Verhalten des Kanals steuern.</param>
      <typeparam name="T">Gibt den Typ der Daten im Kanal an.</typeparam>
      <returns>Der erstellte Kanal.</returns>
    </member>
    <member name="T:System.Threading.Channels.Channel`1">
      <summary>Stellt eine Basisklasse für Kanäle bereit, die das Lesen und Schreiben von Elementen des Typs <typeparamref name="T" /> unterstützen.</summary>
      <typeparam name="T">Gibt den Typ der Daten an, die im Kanal lesbar und schreibbar sind.</typeparam>
    </member>
    <member name="M:System.Threading.Channels.Channel`1.#ctor" />
    <member name="T:System.Threading.Channels.Channel`2">
      <summary>Stellt eine Basisklasse für Kanäle bereit, die das Lesen von Elementen des Typs <typeparamref name="TRead" /> und das Schreiben von Elementen des Typs <typeparamref name="TWrite" /> unterstützen.</summary>
      <typeparam name="TWrite">Gibt den Typ der Daten an, die möglicherweise in den Kanal geschrieben werden.</typeparam>
      <typeparam name="TRead">Gibt den Datentyp an, der vom Kanal gelesen werden kann.</typeparam>
    </member>
    <member name="M:System.Threading.Channels.Channel`2.#ctor" />
    <member name="M:System.Threading.Channels.Channel`2.op_Implicit(System.Threading.Channels.Channel{`0,`1})~System.Threading.Channels.ChannelReader{`1}">
      <summary>Implizite Umwandlung von einem <see cref="T:System.Threading.Channels.Channel`2" /> in seine lesbare Hälfte.</summary>
      <param name="channel">Der <see cref="T:System.Threading.Channels.Channel`2" />, der umgewandelt wird.</param>
      <returns>Die lesbare Hälfte.</returns>
    </member>
    <member name="M:System.Threading.Channels.Channel`2.op_Implicit(System.Threading.Channels.Channel{`0,`1})~System.Threading.Channels.ChannelWriter{`0}">
      <summary>Implizite Umwandlung von einem <see cref="T:System.Threading.Channels.Channel`2" /> in seine beschreibbare Hälfte.</summary>
      <param name="channel">Der <see cref="T:System.Threading.Channels.Channel`2" />, der umgewandelt wird.</param>
      <returns>Die beschreibbare Hälfte.</returns>
    </member>
    <member name="P:System.Threading.Channels.Channel`2.Reader">
      <summary>Ruft den lesbaren Teil dieses Kanals ab.</summary>
    </member>
    <member name="P:System.Threading.Channels.Channel`2.Writer">
      <summary>Ruft den schreibbaren Teil dieses Kanals ab.</summary>
    </member>
    <member name="T:System.Threading.Channels.ChannelClosedException">
      <summary>Die Ausnahme wird ausgelöst, wenn ein Kanal verwendet wird, nachdem er geschlossen wurde.</summary>
    </member>
    <member name="M:System.Threading.Channels.ChannelClosedException.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.Channels.ChannelClosedException" />-Klasse.</summary>
    </member>
    <member name="M:System.Threading.Channels.ChannelClosedException.#ctor(System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.Channels.ChannelClosedException" />-Klasse.</summary>
      <param name="innerException">Die Ausnahme, die diese Ausnahme verursacht hat.</param>
    </member>
    <member name="M:System.Threading.Channels.ChannelClosedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.Channels.ChannelClosedException" />-Klasse mit serialisierten Daten.</summary>
      <param name="info">Das Objekt, das die Daten des serialisierten Objekts enthält.</param>
      <param name="context">Die Kontextinformationen zur Quelle bzw. zum Ziel.</param>
    </member>
    <member name="M:System.Threading.Channels.ChannelClosedException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.Channels.ChannelClosedException" />-Klasse.</summary>
      <param name="message">Die Meldung, in der der Fehler beschrieben wird.</param>
    </member>
    <member name="M:System.Threading.Channels.ChannelClosedException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.Channels.ChannelClosedException" />-Klasse.</summary>
      <param name="message">Die Meldung, in der der Fehler beschrieben wird.</param>
      <param name="innerException">Die Ausnahme, die diese Ausnahme verursacht hat.</param>
    </member>
    <member name="T:System.Threading.Channels.ChannelOptions">
      <summary>Bietet Optionen, die das Verhalten von Kanalinstanzen steuern.</summary>
    </member>
    <member name="M:System.Threading.Channels.ChannelOptions.#ctor" />
    <member name="P:System.Threading.Channels.ChannelOptions.AllowSynchronousContinuations">
      <summary>
        <see langword="true" />, wenn Operationen, die auf einem Kanal ausgeführt werden, synchron Fortsetzungen aufrufen können, die abonniert sind, um Benachrichtigungen über anstehende asynchrone Operationen zu erhalten; <see langword="false" />, wenn alle Fortsetzungen asynchron aufgerufen werden sollen.</summary>
    </member>
    <member name="P:System.Threading.Channels.ChannelOptions.SingleReader">
      <summary>
        <see langword="true" />-Leser aus dem Kanal garantieren, dass es immer nur maximal einen Lesevorgang auf einmal geben wird; <see langword="false" />, wenn keine solche Einschränkung gewährleistet ist.</summary>
    </member>
    <member name="P:System.Threading.Channels.ChannelOptions.SingleWriter">
      <summary>
        <see langword="true" />-Schreiber aus dem Kanal garantieren, dass es immer nur maximal einen Schreibvorgang auf einmal geben wird; <see langword="false" />, wenn keine solche Einschränkung gewährleistet ist.</summary>
    </member>
    <member name="T:System.Threading.Channels.ChannelReader`1">
      <summary>Stellt eine Basisklasse zum Lesen aus einen Kanal bereit.</summary>
      <typeparam name="T">Gibt den Datentyp an, der vom Kanal gelesen werden kann.</typeparam>
    </member>
    <member name="M:System.Threading.Channels.ChannelReader`1.#ctor" />
    <member name="P:System.Threading.Channels.ChannelReader`1.Completion">
      <summary>Ruft eine <see cref="T:System.Threading.Tasks.Task" /> ab, die abgeschlossen wird, wenn keine weiteren Daten mehr aus dem Kanal gelesen werden können.</summary>
    </member>
    <member name="M:System.Threading.Channels.ChannelReader`1.ReadAllAsync(System.Threading.CancellationToken)">
      <summary>Es erstellt eine <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />, die das Lesen aller Daten aus dem Kanal ermöglicht.</summary>
      <param name="cancellationToken">Das Abbruchtoken zum Abbrechen der Enumeration.</param>
      <returns>Die erstellte asynchrone Enumerable.</returns>
    </member>
    <member name="M:System.Threading.Channels.ChannelReader`1.ReadAsync(System.Threading.CancellationToken)">
      <summary>Liest asynchron ein Element aus dem Kanal.</summary>
      <param name="cancellationToken">Ein zum Beenden des Lesevorgangs verwendetes <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>Eine <see cref="T:System.Threading.Tasks.ValueTask`1" />, die den asynchronen Lesevorgang darstellt.</returns>
    </member>
    <member name="M:System.Threading.Channels.ChannelReader`1.TryRead(`0@)">
      <summary>Versucht, ein Element aus dem Kanal zu lesen.</summary>
      <param name="item">Das read-Element oder ein Standardwert, wenn kein Element gelesen werden konnte.</param>
      <returns>
        <see langword="true" />, wenn ein Element gelesen wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Channels.ChannelReader`1.WaitToReadAsync(System.Threading.CancellationToken)">
      <summary>Gibt eine <see cref="T:System.Threading.Tasks.Task`1" /> zurück, die abgeschlossen wird, wenn Daten zum Lesen verfügbar sind.</summary>
      <param name="cancellationToken">Ein zum Beenden des Wartevorgangs verwendetes <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>Eine <see cref="T:System.Threading.Tasks.Task`1" />, die mit einem <see langword="true" />-Ergebnis abgeschlossen wird, wenn Daten zum Lesen verfügbar sind, oder mit einem <see langword="false" />-Ergebnis, wenn keine weiteren Daten mehr gelesen werden können.</returns>
    </member>
    <member name="T:System.Threading.Channels.ChannelWriter`1">
      <summary>Stellt eine Basisklasse zum Schreiben in einen Kanal bereit.</summary>
      <typeparam name="T">Gibt den Typ der Daten an, die möglicherweise in den Kanal geschrieben werden.</typeparam>
    </member>
    <member name="M:System.Threading.Channels.ChannelWriter`1.#ctor" />
    <member name="M:System.Threading.Channels.ChannelWriter`1.Complete(System.Exception)">
      <summary>Markiert den Kanal als abgeschlossen, d.h. es werden keine weiteren Elemente geschrieben.</summary>
      <param name="error">Optional weißt die Ausnahme auf einen Fehler hin, durch den der Kanal beendet wird.</param>
      <exception cref="T:System.InvalidOperationException">Der Channel wurde bereits als abgeschlossen markiert.</exception>
    </member>
    <member name="M:System.Threading.Channels.ChannelWriter`1.TryComplete(System.Exception)">
      <summary>Versucht, den Kanal als abgeschlossen zu markieren, d.h. es werden keine weiteren Daten geschrieben.</summary>
      <param name="error">
        <see cref="T:System.Exception" /> weißt auf einen Fehler hin, der dazu führt, dass keine weiteren Daten geschrieben werden, oder auf Null für den Erfolg.</param>
      <returns>
        <see langword="true" />, wenn dieser Vorgang den Kanal erfolgreich beendet; andernfalls <see langword="false" />, wenn der Kanal nicht für den Abschluss markiert werden konnte, z.B. weil er bereits als solcher gekennzeichnet wurde oder weil er den Abschluss nicht unterstützt.</returns>
    </member>
    <member name="M:System.Threading.Channels.ChannelWriter`1.TryWrite(`0)">
      <summary>Versucht, das angegebene Element an den Kanal zu schreiben.</summary>
      <param name="item">Das zu schreibende Element.</param>
      <returns>
        <see langword="true" />, wenn das Element geschrieben wurde; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Channels.ChannelWriter`1.WaitToWriteAsync(System.Threading.CancellationToken)">
      <summary>Gibt eine <see cref="T:System.Threading.Tasks.Task`1" /> zurück, die abgeschlossen wird, wenn Speicherplatz zum Schreiben eines Elements verfügbar ist.</summary>
      <param name="cancellationToken">Ein zum Beenden des Wartevorgangs verwendetes <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>Eine <see cref="T:System.Threading.Tasks.Task`1" />, die mit einem <see langword="true" />-Ergebnis abgeschlossen wird, wenn Speicherplatz zum Schreiben eines Elements verfügbar ist, oder mit einem <see langword="false" />-Ergebnis, wenn keine weiteren Schreibvorgänge zulässig sind.</returns>
    </member>
    <member name="M:System.Threading.Channels.ChannelWriter`1.WriteAsync(`0,System.Threading.CancellationToken)">
      <summary>Schreibt asynchron ein Element in den Kanal.</summary>
      <param name="item">Der Wert zum Schreiben im Kanal.</param>
      <param name="cancellationToken">Ein zum Abbrechen des Schreibvorgangs verwendetes <see cref="T:System.Threading.CancellationToken" />.</param>
      <returns>Eine <see cref="T:System.Threading.Tasks.Task" />, die den asynchronen Schreibvorgang darstellt.</returns>
    </member>
    <member name="T:System.Threading.Channels.UnboundedChannelOptions">
      <summary>Bietet Optionen, die das Verhalten von ungebundenen <see cref="T:System.Threading.Channels.Channel`1" />-Instanzen steuern.</summary>
    </member>
    <member name="M:System.Threading.Channels.UnboundedChannelOptions.#ctor" />
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Reflection.Emit</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.AssemblyBuilder">
      <summary vsli:raw="Defines and represents a dynamic assembly.">Definisce e rappresenta un assembly dinamico.</summary>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.CodeBase">
      <summary vsli:raw="Gets the location of the assembly, as specified originally (such as in an &lt;see cref=&quot;T:System.Reflection.AssemblyName&quot; /&gt; object).">Ottiene la posizione dell'assembly come specificata in origine, ad esempio in un oggetto <see cref="T:System.Reflection.AssemblyName" />.</summary>
      <returns vsli:raw="The location of the assembly, as specified originally.">Posizione dell'assembly come specificata in origine.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Questo metodo non è attualmente supportato.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
      <summary vsli:raw="Defines a dynamic assembly that has the specified name and access rights.">Definisce un assembly dinamico con il nome e i diritti di accesso specificati.</summary>
      <param name="name" vsli:raw="The name of the assembly.">Nome dell'assembly.</param>
      <param name="access" vsli:raw="The access rights of the assembly.">I diritti di accesso dell'assembly.</param>
      <returns vsli:raw="An object that represents the new assembly.">Oggetto che rappresenta il nuovo assembly.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
      <summary vsli:raw="Defines a new assembly that has the specified name, access rights, and attributes.">Definisce un nuovo assembly con il nome, i diritti di accesso e gli attributi specificati.</summary>
      <param name="name" vsli:raw="The name of the assembly.">Nome dell'assembly.</param>
      <param name="access" vsli:raw="The access rights of the assembly.">I diritti di accesso dell'assembly.</param>
      <param name="assemblyAttributes" vsli:raw="A collection that contains the attributes of the assembly.">Raccolta che contiene gli attributi dell'assembly.</param>
      <returns vsli:raw="An object that represents the new assembly.">Oggetto che rappresenta il nuovo assembly.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)">
      <summary vsli:raw="Defines a named transient dynamic module in this assembly.">Definisce un modulo dinamico temporaneo denominato nell'assembly.</summary>
      <param name="name" vsli:raw="The name of the dynamic module.">Nome del modulo dinamico.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; representing the defined dynamic module.">Oggetto <see cref="T:System.Reflection.Emit.ModuleBuilder" /> che rappresenta il modulo dinamico definito.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; begins with white space.&#xA;&#xA; -or-&#xA;&#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.&#xA;&#xA; -or-&#xA;&#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is greater than the system-defined maximum length.">
        <paramref name="name" /> inizia con uno spazio vuoto.  
-oppure- 
La lunghezza di <paramref name="name" /> è zero.  
-oppure- 
La lunghezza di <paramref name="name" /> è maggiore della lunghezza massima definita nel sistema.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
      <exception cref="T:System.ExecutionEngineException" vsli:raw="The assembly for default symbol writer cannot be loaded.&#xA;&#xA; -or-&#xA;&#xA; The type that implements the default symbol writer interface cannot be found.">Non è possibile caricare l'assembly per un writer di simboli predefinito.  
 -oppure-  
 Non è possibile trovare il tipo che implementa l'interfaccia del writer di simboli predefinito.</exception>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.EntryPoint">
      <summary vsli:raw="Returns the entry point of this assembly.">Restituisce il punto di ingresso dell'assembly.</summary>
      <returns vsli:raw="The entry point of this assembly.">Punto di ingresso dell'assembly.</returns>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to the specified object.">Restituisce un valore che indica se questa istanza è uguale all'oggetto specificato.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance, or &lt;see langword=&quot;null&quot; /&gt;.">Oggetto da confrontare con questa istanza o <see langword="null" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="obj" /> è uguale al tipo e al valore di questa istanza; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.FullName">
      <summary vsli:raw="Gets the display name of the current dynamic assembly.">Ottiene il nome visualizzato dell'assembly dinamico corrente.</summary>
      <returns vsli:raw="The display name of the dynamic assembly.">Nome visualizzato dell'assembly dinamico.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;.">Restituisce tutti gli attributi personalizzati applicati all'oggetto <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> corrente.</summary>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">Questo argomento viene ignorato per gli oggetti di questo tipo.</param>
      <returns vsli:raw="An array that contains the custom attributes; the array is empty if there are no attributes.">Matrice contenente gli attributi personalizzati; la matrice è vuota se non sono presenti attributi.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;, and that derive from a specified attribute type.">Restituisce tutti gli attributi personalizzati applicati all'oggetto <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> corrente e che derivano da un tipo di attributo specificato.</summary>
      <param name="attributeType" vsli:raw="The base type from which attributes derive.">Il tipo di base da cui derivano gli attributi.</param>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">Questo argomento viene ignorato per gli oggetti di questo tipo.</param>
      <returns vsli:raw="An array that contains the custom attributes that are derived at any level from &lt;paramref name=&quot;attributeType&quot; /&gt;; the array is empty if there are no such attributes.">Matrice che contiene gli attributi personalizzati derivati, a qualsiasi livello, da <paramref name="attributeType" />; la matrice è vuota se non ci sono tali attributi.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is not a &lt;see cref=&quot;T:System.Type&quot; /&gt; object supplied by the runtime. For example, &lt;paramref name=&quot;attributeType&quot; /&gt; is a &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object.">
        <paramref name="attributeType" /> non è un oggetto <see cref="T:System.Type" /> fornito dal runtime. Ad esempio, <paramref name="attributeType" /> è un oggetto <see cref="T:System.Reflection.Emit.TypeBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributesData">
      <summary vsli:raw="Returns &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects that contain information about the attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;.">Restituisce oggetti <see cref="T:System.Reflection.CustomAttributeData" /> che contengono informazioni sugli attributi applicati all'oggetto <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> corrente.</summary>
      <returns vsli:raw="A generic list of &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects representing data about the attributes that have been applied to the current module.">Elenco generico di oggetti <see cref="T:System.Reflection.CustomAttributeData" /> che rappresentano i dati relativi agli attributi applicati al modulo corrente.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)">
      <summary vsli:raw="Returns the dynamic module with the specified name.">Restituisce il modulo dinamico con il nome specificato.</summary>
      <param name="name" vsli:raw="The name of the requested dynamic module.">Nome del modulo dinamico richiesto.</param>
      <returns vsli:raw="A ModuleBuilder object representing the requested dynamic module.">Oggetto ModuleBuilder che rappresenta il modulo dinamico richiesto.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">La lunghezza di <paramref name="name" /> è zero.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetExportedTypes">
      <summary vsli:raw="Gets the exported types defined in this assembly.">Ottiene i tipi esportati definiti nell'assembly.</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; containing the exported types defined in this assembly.">Matrice dell'oggetto <see cref="T:System.Type" /> contenente i tipi esportati definiti nell'assembly.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented.">Questo metodo non è implementato.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetFile(System.String)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.IO.FileStream&quot; /&gt; for the specified file in the file table of the manifest of this assembly.">Ottiene un oggetto <see cref="T:System.IO.FileStream" /> per il file specificato nella tabella file del manifesto dell'assembly.</summary>
      <param name="name" vsli:raw="The name of the specified file.">Nome del file specificato.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.IO.FileStream&quot; /&gt; for the specified file, or &lt;see langword=&quot;null&quot; /&gt;, if the file is not found.">Oggetto <see cref="T:System.IO.FileStream" /> per il file specificato oppure <see langword="null" /> se il file non viene trovato.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Questo metodo non è attualmente supportato.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetFiles(System.Boolean)">
      <summary vsli:raw="Gets the files in the file table of an assembly manifest, specifying whether to include resource modules.">Ottiene i file della tabella file di un manifesto dell'assembly, specificando se includere i moduli delle risorse.</summary>
      <param name="getResourceModules" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include resource modules; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per includere i moduli delle risorse; in caso contrario, <see langword="false" />.</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.IO.FileStream&quot; /&gt; objects.">Matrice di oggetti <see cref="T:System.IO.FileStream" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Questo metodo non è attualmente supportato.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Restituisce il codice hash per l'istanza.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Codice hash di un intero con segno a 32 bit.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetLoadedModules(System.Boolean)">
      <summary vsli:raw="Returns all the loaded modules that are part of this assembly, and optionally includes resource modules.">Restituisce tutti i moduli caricati che fanno parte di questo assembly e, facoltativamente, comprende i moduli delle risorse.</summary>
      <param name="getResourceModules" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include resource modules; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per includere i moduli delle risorse; in caso contrario, <see langword="false" />.</param>
      <returns vsli:raw="The loaded modules that are part of this assembly.">Moduli caricati che fanno parte di questo assembly.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(System.String)">
      <summary vsli:raw="Returns information about how the given resource has been persisted.">Restituisce informazioni sul modo in cui la risorsa specificata è stata resa persistente.</summary>
      <param name="resourceName" vsli:raw="The name of the resource.">Nome della risorsa.</param>
      <returns vsli:raw="&lt;see cref=&quot;T:System.Reflection.ManifestResourceInfo&quot; /&gt; populated with information about the resource's topology, or &lt;see langword=&quot;null&quot; /&gt; if the resource is not found.">Oggetto <see cref="T:System.Reflection.ManifestResourceInfo" /> compilato con informazioni relative alla topologia della risorsa oppure <see langword="null" /> se la risorsa non è stata trovata.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Questo metodo non è attualmente supportato.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames">
      <summary vsli:raw="Loads the specified manifest resource from this assembly.">Carica la risorsa del manifesto specificata da questo assembly.</summary>
      <returns vsli:raw="An array of type &lt;see langword=&quot;String&quot; /&gt; containing the names of all the resources.">Matrice di tipo <see langword="String" /> che contiene i nomi di tutte le risorse.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported on a dynamic assembly. To get the manifest resource names, use &lt;see cref=&quot;M:System.Reflection.Assembly.GetManifestResourceNames&quot; /&gt;.">Il metodo non è supportato su un assembly dinamico. Per ottenere i nomi della risorsa del manifesto, utilizzare il metodo <see cref="M:System.Reflection.Assembly.GetManifestResourceNames" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)">
      <summary vsli:raw="Loads the specified manifest resource from this assembly.">Carica la risorsa del manifesto specificata da questo assembly.</summary>
      <param name="name" vsli:raw="The name of the manifest resource being requested.">Nome della risorsa del manifesto richiesta.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; representing this manifest resource.">Oggetto <see cref="T:System.IO.Stream" /> che rappresenta la risorsa del manifesto.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Questo metodo non è attualmente supportato.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.Type,System.String)">
      <summary vsli:raw="Loads the specified manifest resource, scoped by the namespace of the specified type, from this assembly.">Carica la risorsa del manifesto specificata, definita per l'ambito dallo spazio dei nomi del tipo specificato, da questo assembly.</summary>
      <param name="type" vsli:raw="The type whose namespace is used to scope the manifest resource name.">Tipo il cui spazio dei nomi viene usato per definire l'ambito del nome della risorsa del manifesto.</param>
      <param name="name" vsli:raw="The name of the manifest resource being requested.">Nome della risorsa del manifesto richiesta.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; representing this manifest resource.">Oggetto <see cref="T:System.IO.Stream" /> che rappresenta la risorsa del manifesto.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Questo metodo non è attualmente supportato.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetModule(System.String)">
      <summary vsli:raw="Gets the specified module in this assembly.">Ottiene il modulo specificato in questo assembly.</summary>
      <param name="name" vsli:raw="The name of the requested module.">Nome del modulo richiesto.</param>
      <returns vsli:raw="The module being requested, or &lt;see langword=&quot;null&quot; /&gt; if the module is not found.">Modulo richiesto o <see langword="null" /> se il modulo non viene trovato.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetModules(System.Boolean)">
      <summary vsli:raw="Gets all the modules that are part of this assembly, and optionally includes resource modules.">Ottiene tutti i moduli che fanno parte di questo assembly e, facoltativamente, comprende i moduli delle risorse.</summary>
      <param name="getResourceModules" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include resource modules; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per includere i moduli delle risorse; in caso contrario, <see langword="false" />.</param>
      <returns vsli:raw="The modules that are part of this assembly.">Moduli che fanno parte di questo assembly.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetName(System.Boolean)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Reflection.AssemblyName&quot; /&gt; that was specified when the current dynamic assembly was created, and sets the code base as specified.">Ottiene l'oggetto <see cref="T:System.Reflection.AssemblyName" /> specificato alla creazione dell'assembly dinamico corrente e imposta la codebase come specificato.</summary>
      <param name="copiedName" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set the code base to the location of the assembly after it is shadow-copied; &lt;see langword=&quot;false&quot; /&gt; to set the code base to the original location.">
        <see langword="true" /> per impostare la codebase sul percorso dell'assembly dopo che è stata eseguita la copia shadow; <see langword="false" /> per impostare la codebase sul percorso originale.</param>
      <returns vsli:raw="The name of the dynamic assembly.">Nome dell'assembly dinamico.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetReferencedAssemblies">
      <summary vsli:raw="Gets an incomplete list of &lt;see cref=&quot;T:System.Reflection.AssemblyName&quot; /&gt; objects for the assemblies that are referenced by this &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;.">Ottiene un elenco incompleto di oggetti <see cref="T:System.Reflection.AssemblyName" /> per gli assembly a cui fa riferimento questo oggetto <see cref="T:System.Reflection.Emit.AssemblyBuilder" />.</summary>
      <returns vsli:raw="An array of assembly names for the referenced assemblies. This array is not a complete list.">Matrice di nomi dell'assembly per gli assembly a cui si fa riferimento. Questa matrice non è un elenco completo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo)">
      <summary vsli:raw="Gets the satellite assembly for the specified culture.">Ottiene l'assembly satellite per le impostazioni cultura specificate.</summary>
      <param name="culture" vsli:raw="The specified culture.">Impostazioni cultura specificate.</param>
      <returns vsli:raw="The specified satellite assembly.">Assembly satellite specificato.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;culture&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="culture" /> è <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The assembly cannot be found.">L'assembly non è stato trovato.</exception>
      <exception cref="T:System.IO.FileLoadException" vsli:raw="The satellite assembly with a matching file name was found, but the &lt;see langword=&quot;CultureInfo&quot; /&gt; did not match the one specified.">L'assembly satellite con un nome di file corrispondente è stato trovato, ma <see langword="CultureInfo" /> non corrisponde a quello specificato.</exception>
      <exception cref="T:System.BadImageFormatException" vsli:raw="The satellite assembly is not a valid assembly.">L'assembly satellite non è un assembly valido.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)">
      <summary vsli:raw="Gets the specified version of the satellite assembly for the specified culture.">Ottiene la versione specificata dell'assembly satellite per le impostazioni cultura specificate.</summary>
      <param name="culture" vsli:raw="The specified culture.">Impostazioni cultura specificate.</param>
      <param name="version" vsli:raw="The version of the satellite assembly.">Versione dell'assembly satellite.</param>
      <returns vsli:raw="The specified satellite assembly.">Assembly satellite specificato.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;culture&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="culture" /> è <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileLoadException" vsli:raw="The satellite assembly with a matching file name was found, but the &lt;see langword=&quot;CultureInfo&quot; /&gt; or the version did not match the one specified.">È stato trovato l'assembly satellite con un nome file corrispondente, ma <see langword="CultureInfo" /> o la versione non corrisponde a quanto specificato.</exception>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The assembly cannot be found.">L'assembly non è stato trovato.</exception>
      <exception cref="T:System.BadImageFormatException" vsli:raw="The satellite assembly is not a valid assembly.">L'assembly satellite non è un assembly valido.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetType(System.String,System.Boolean,System.Boolean)">
      <summary vsli:raw="Gets the specified type from the types that have been defined and created in the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;.">Ottiene il tipo specificato dai tipi definiti e creati nell'oggetto <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> corrente.</summary>
      <param name="name" vsli:raw="The name of the type to search for.">Nome del tipo di cui eseguire la ricerca.</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to throw an exception if the type is not found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per generare un'eccezione se non è possibile trovare il tipo; in caso contrario, <see langword="false" />.</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to ignore the case of the type name when searching; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per ignorare la distinzione tra maiuscole e minuscole nel nome del tipo in fase di ricerca; in caso contrario, <see langword="false" />.</param>
      <returns vsli:raw="The specified type, or &lt;see langword=&quot;null&quot; /&gt; if the type is not found or has not been created yet.">Il tipo specificato o <see langword="null" /> se il tipo non è stato trovato o non è stato ancora creato.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.GlobalAssemblyCache">
      <summary>Ottiene un valore che indica se l'assembly è stato caricato dalla Global Assembly Cache.</summary>
      <returns>Sempre <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.HostContext">
      <summary vsli:raw="Gets the host context where the dynamic assembly is being created.">Ottiene il contesto dell'host dove viene creato l'assembly dinamico.</summary>
      <returns vsli:raw="A value that indicates the host context where the dynamic assembly is being created.">Valore che indica il contesto dell'host dove viene creato l'assembly dinamico.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ImageRuntimeVersion">
      <summary>Ottiene la versione di CLR (Common Language Runtime) che verrà salvata nel file che contiene il manifesto.</summary>
      <returns>Stringa che rappresenta la versione di Common Language Runtime.</returns>
      <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Returns a value that indicates whether one or more instances of the specified attribute type is applied to this member.">Restituisce un valore che indica se a questo membro sono state applicate una o più istanze del tipo di attributo specificato.</summary>
      <param name="attributeType" vsli:raw="The type of attribute to test for.">Tipo di attributo per cui effettuare il test.</param>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">Questo argomento viene ignorato per gli oggetti di questo tipo.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instances of &lt;paramref name=&quot;attributeType&quot; /&gt; is applied to this dynamic assembly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se una o più istanze di <paramref name="attributeType" /> sono applicate all'assembly dinamico; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.IsDynamic">
      <summary vsli:raw="Gets a value that indicates that the current assembly is a dynamic assembly.">Ottiene un valore che indica che l'assembly corrente è un assembly dinamico.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;true&quot; /&gt;.">Sempre <see langword="true" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.Location">
      <summary vsli:raw="Gets the location, in codebase format, of the loaded file that contains the manifest if it is not shadow-copied.">Ottiene il percorso, in formato codebase, del file caricato che contiene il manifesto, se non è replicato.</summary>
      <returns vsli:raw="The location of the loaded file that contains the manifest. If the loaded file has been shadow-copied, the &lt;see langword=&quot;Location&quot; /&gt; is that of the file before being shadow-copied.">Percorso del file caricato che contiene il manifesto. Se il file caricato è stato replicato, <see langword="Location" /> corrisponde al percorso del file prima della replica.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Questo metodo non è attualmente supportato.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ManifestModule">
      <summary vsli:raw="Gets the module in the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt; that contains the assembly manifest.">Ottiene il modulo nell'oggetto <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> corrente che contiene il manifesto dell'assembly.</summary>
      <returns vsli:raw="The manifest module.">Modulo manifesto.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ReflectionOnly">
      <summary vsli:raw="Gets a value indicating whether the dynamic assembly is in the reflection-only context.">Ottiene un valore che indica se l'assembly dinamico si trova nel contesto solo reflection.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dynamic assembly is in the reflection-only context; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'assembly dinamico si trova nel contesto solo reflection; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute on this assembly using a specified custom attribute blob.">Impostare un attributo personalizzato sull'assembly utilizzando un blob di attributi personalizzati specificato.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Costruttore dell'attributo personalizzato.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">BLOB di byte che rappresenta gli attributi.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> o <paramref name="binaryAttribute" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is not a &lt;see langword=&quot;RuntimeConstructorInfo&quot; /&gt; object.">
        <paramref name="con" /> non è un oggetto <see langword="RuntimeConstructorInfo" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute on this assembly using a custom attribute builder.">Impostare un attributo personalizzato sull'assembly utilizzando un generatore di attributi personalizzati.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">Un'istanza di una classe helper per definire l'attributo personalizzato.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="T:System.Reflection.Emit.AssemblyBuilderAccess">
      <summary vsli:raw="Defines the access modes for a dynamic assembly.">Definisce le modalità di accesso per un assembly dinamico.</summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.Run">
      <summary vsli:raw="The dynamic assembly can be executed, but not saved.">L'assembly dinamico può essere eseguito ma non salvato.</summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.RunAndCollect">
      <summary vsli:raw="The dynamic assembly will be automatically unloaded and its memory reclaimed, when it's no longer accessible.">L'assembly dinamico verrà automaticamente scaricato e la relativa memoria recuperata, quando non è più accessibile.</summary>
    </member>
    <member name="T:System.Reflection.Emit.ConstructorBuilder">
      <summary vsli:raw="Defines and represents a constructor of a dynamic class.">Definisce e rappresenta un costruttore di una classe dinamica.</summary>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Attributes">
      <summary vsli:raw="Gets the attributes for this constructor.">Ottiene gli attributi per questo costruttore.</summary>
      <returns vsli:raw="The attributes for this constructor.">Attributi per il costruttore.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.CallingConvention">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.CallingConventions&quot; /&gt; value that depends on whether the declaring type is generic.">Ottiene un valore <see cref="T:System.Reflection.CallingConventions" /> che dipende dal fatto che il tipo dichiarante sia generico o non generico.</summary>
      <returns vsli:raw="&lt;see cref=&quot;F:System.Reflection.CallingConventions.HasThis&quot; /&gt; if the declaring type is generic; otherwise, &lt;see cref=&quot;F:System.Reflection.CallingConventions.Standard&quot; /&gt;.">
        <see cref="F:System.Reflection.CallingConventions.HasThis" /> se il tipo dichiarante è generico. In caso contrario, <see cref="F:System.Reflection.CallingConventions.Standard" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.DeclaringType">
      <summary vsli:raw="Gets a reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the type that declares this member.">Ottiene un riferimento all'oggetto <see cref="T:System.Type" /> per il tipo che dichiara questo membro.</summary>
      <returns vsli:raw="The type that declares this member.">Tipo che dichiara il membro.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary vsli:raw="Defines a parameter of this constructor.">Definisce un parametro del costruttore.</summary>
      <param name="iSequence" vsli:raw="The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter.">Posizione del parametro nell'elenco dei parametri. I parametri sono indicizzati iniziando da 1 per il primo parametro.</param>
      <param name="attributes" vsli:raw="The attributes of the parameter.">Attributi del parametro.</param>
      <param name="strParamName" vsli:raw="The name of the parameter. The name can be the null string.">Nome del parametro. Il nome può essere rappresentato dalla stringa null.</param>
      <returns vsli:raw="An object that represents the new parameter of this constructor.">Oggetto che rappresenta il nuovo parametro del costruttore.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;iSequence&quot; /&gt; is less than 0 (zero), or it is greater than the number of parameters of the constructor.">
        <paramref name="iSequence" /> è minore di 0 (zero) oppure maggiore del numero di parametri del costruttore.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Il tipo contenitore è stato creato usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this constructor.">Restituisce tutti gli attributi personalizzati definiti per il costruttore.</summary>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes. This parameter is ignored.">Controlla l'ereditarietà degli attributi personalizzati dalle classi base. Questo parametro viene ignorato.</param>
      <returns vsli:raw="An array of objects representing all the custom attributes of the constructor represented by this &lt;see cref=&quot;T:System.Reflection.Emit.ConstructorBuilder&quot; /&gt; instance.">Matrice di oggetti che rappresentano tutti gli attributi personalizzati del costruttore rappresentato da questa istanza <see cref="T:System.Reflection.Emit.ConstructorBuilder" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Questo metodo non è attualmente supportato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns the custom attributes identified by the given type.">Restituisce gli attributi personalizzati identificati dal tipo dato.</summary>
      <param name="attributeType" vsli:raw="The custom attribute type.">Tipo di attributo personalizzato.</param>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes. This parameter is ignored.">Controlla l'ereditarietà degli attributi personalizzati dalle classi base. Questo parametro viene ignorato.</param>
      <returns vsli:raw="An object array that represents the attributes of this constructor.">Matrice di oggetti che rappresenta gli attributi di questo costruttore.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Questo metodo non è attualmente supportato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; for this constructor.">Ottiene un oggetto <see cref="T:System.Reflection.Emit.ILGenerator" /> per il costruttore.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; object for this constructor.">Oggetto <see cref="T:System.Reflection.Emit.ILGenerator" /> per questo costruttore.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The constructor is a parameterless constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The constructor has &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.MethodImplAttributes&quot; /&gt; flags indicating that it should not have a method body.">Il costruttore è un costruttore senza parametri.  
In alternativa 
Il costruttore dispone di un flag <see cref="T:System.Reflection.MethodAttributes" /> o di un flag <see cref="T:System.Reflection.MethodImplAttributes" /> che indica che non deve essere presente il corpo di un metodo.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator(System.Int32)">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; object, with the specified MSIL stream size, that can be used to build a method body for this constructor.">Ottiene una classe <see cref="T:System.Reflection.Emit.ILGenerator" />, con la dimensione di flusso MSIL specificata, che può essere utilizzata per compilare un corpo del metodo per questo costruttore.</summary>
      <param name="streamSize" vsli:raw="The size of the MSIL stream, in bytes.">Dimensione del flusso MSIL in byte.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; for this constructor.">Classe <see cref="T:System.Reflection.Emit.ILGenerator" /> per questo costruttore.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The constructor is a parameterless constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The constructor has &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.MethodImplAttributes&quot; /&gt; flags indicating that it should not have a method body.">Il costruttore è un costruttore senza parametri.  
In alternativa 
Il costruttore dispone di un flag <see cref="T:System.Reflection.MethodAttributes" /> o di un flag <see cref="T:System.Reflection.MethodImplAttributes" /> che indica che non deve essere presente il corpo di un metodo.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags">
      <summary vsli:raw="Returns the method implementation flags for this constructor.">Restituisce i flag di implementazione dei metodi per il costruttore.</summary>
      <returns vsli:raw="The method implementation flags for this constructor.">Flag di implementazione dei metodi per il costruttore.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetParameters">
      <summary vsli:raw="Returns the parameters of this constructor.">Restituisce i parametri del costruttore.</summary>
      <returns vsli:raw="An array that represents the parameters of this constructor.">Matrice che rappresenta i parametri di questo costruttore.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has not been called on this constructor's type, in the .NET Framework versions 1.0 and 1.1.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> non è stato chiamato sul tipo di questo costruttore in .NET Framework versioni 1.0 e 1.1.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has not been called on this constructor's type, in the .NET Framework version 2.0.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> non è stato chiamato sul tipo di questo costruttore in .NET Framework versione 2.0.</exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.InitLocals">
      <summary vsli:raw="Gets or sets whether the local variables in this constructor should be zero-initialized.">Ottiene o imposta un valore che indica se le variabili locali nel costruttore devono essere inizializzate a zero.</summary>
      <returns vsli:raw="Read/write. Gets or sets whether the local variables in this constructor should be zero-initialized.">Lettura/scrittura. Ottiene o imposta un valore che indica se le variabili locali nel costruttore devono essere inizializzate a zero.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Dynamically invokes the constructor reflected by this instance with the specified arguments, under the constraints of the specified &lt;see langword=&quot;Binder&quot; /&gt;.">Richiama in modo dinamico il costruttore ottenuto tramite reflection dall'istanza in questione con gli argomenti specificati, in base ai vincoli dell'oggetto <see langword="Binder" /> specificato.</summary>
      <param name="obj" vsli:raw="The object that needs to be reinitialized.">Oggetto da reinizializzare.</param>
      <param name="invokeAttr" vsli:raw="One of the &lt;see langword=&quot;BindingFlags&quot; /&gt; values that specifies the type of binding that is desired.">Uno dei valori di <see langword="BindingFlags" /> che specifica il tipo di associazione desiderata.</param>
      <param name="binder" vsli:raw="A &lt;see langword=&quot;Binder&quot; /&gt; that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection. If &lt;paramref name=&quot;binder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, then Binder.DefaultBinding is used.">Oggetto <see langword="Binder" /> che definisce un insieme di proprietà e attiva l'associazione, l'assegnazione forzata dei tipi di argomento e la chiamata dei membri tramite reflection. Se <paramref name="binder" /> è <see langword="null" />, viene utilizzato Binder.DefaultBinding.</param>
      <param name="parameters" vsli:raw="An argument list. This is an array of arguments with the same number, order, and type as the parameters of the constructor to be invoked. If there are no parameters, this should be a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">Elenco di argomenti. Matrice di argomenti con lo stesso numero, ordine e tipo dei parametri del costruttore da richiamare. In assenza di parametri, deve essere un riferimento null (<see langword="Nothing" /> in Visual Basic).</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; for the current thread is used.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> usato per regolare la coercizione dei tipi. Se tale parametro è Null, verrà usato l'oggetto <see cref="T:System.Globalization.CultureInfo" /> per il thread corrente.</param>
      <returns vsli:raw="An instance of the class associated with the constructor.">Istanza della classe associata al costruttore.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. You can retrieve the constructor using &lt;see cref=&quot;M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;.">Questo metodo non è attualmente supportato. È possibile recuperare il costruttore utilizzando il metodo <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> e chiamare il metodo <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> sull'oggetto <see cref="T:System.Reflection.ConstructorInfo" /> restituito.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Dynamically invokes the constructor represented by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.">Richiama in modo dinamico il costruttore rappresentato da questa istanza sull'oggetto indicato, passando i parametri specificati e con i vincoli del binder indicato.</summary>
      <param name="invokeAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as InvokeMethod, NonPublic, and so on.">È necessario che si tratti di un flag di bit da <see cref="T:System.Reflection.BindingFlags" />, come InvokeMethod, NonPublic e così via.</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If binder is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used. See &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt;.">Oggetto che consente l'associazione, la coercizione dei tipi di argomento, la chiamata dei membri e il recupero di oggetti <see langword="MemberInfo" /> tramite reflection. Se il binder è <see langword="null" />, viene usato quello predefinito. Vedere <see cref="T:System.Reflection.Binder" />.</param>
      <param name="parameters" vsli:raw="An argument list. This is an array of arguments with the same number, order, and type as the parameters of the constructor to be invoked. If there are no parameters this should be &lt;see langword=&quot;null&quot; /&gt;.">Elenco di argomenti. Matrice di argomenti con lo stesso numero, ordine e tipo dei parametri del costruttore da richiamare. In assenza di parametri, deve essere <see langword="null" />.</param>
      <param name="culture" vsli:raw="An instance of &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; for the current thread is used. (For example, this is necessary to convert a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents 1000 to a &lt;see cref=&quot;T:System.Double&quot; /&gt; value, since 1000 is represented differently by different cultures.)">Istanza di <see cref="T:System.Globalization.CultureInfo" /> usata per regolare la coercizione dei tipi. Se tale parametro è Null, verrà usato l'oggetto <see cref="T:System.Globalization.CultureInfo" /> per il thread corrente. Questa condizione è necessaria, ad esempio, per convertire un oggetto <see cref="T:System.String" /> che rappresenta 1000 in un valore <see cref="T:System.Double" />, dal momento che 1000 è rappresentato in modo diverso in base alle varie impostazioni cultura.</param>
      <returns vsli:raw="The value returned by the invoked constructor.">Valore restituito dal costruttore richiamato.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. You can retrieve the constructor using &lt;see cref=&quot;M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;.">Questo metodo non è attualmente supportato. È possibile recuperare il costruttore utilizzando il metodo <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> e chiamare il metodo <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> sull'oggetto <see cref="T:System.Reflection.ConstructorInfo" /> restituito.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Checks if the specified custom attribute type is defined.">Controlla se è definito il tipo di attributo personalizzato specificato.</summary>
      <param name="attributeType" vsli:raw="A custom attribute type.">Tipo di attributo personalizzato.</param>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes. This parameter is ignored.">Controlla l'ereditarietà degli attributi personalizzati dalle classi base. Questo parametro viene ignorato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified custom attribute type is defined; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se è definito il tipo di attributo personalizzato specificato; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. You can retrieve the constructor using &lt;see cref=&quot;M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;.">Questo metodo non è attualmente supportato. È possibile recuperare il costruttore utilizzando il metodo <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> e chiamare il metodo <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> sull'oggetto <see cref="T:System.Reflection.ConstructorInfo" /> restituito.</exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.MethodHandle">
      <summary vsli:raw="Gets the internal handle for the method. Use this handle to access the underlying metadata handle.">Ottiene l'handle interno per il metodo. Utilizzare questo handle per accedere all'handle dei metadati sottostante.</summary>
      <returns vsli:raw="The internal handle for the method. Use this handle to access the underlying metadata handle.">Handle interno per il metodo. Utilizzare questo handle per accedere all'handle dei metadati sottostante.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This property is not supported on this class.">La proprietà non è supportata sulla classe in questione.</exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Module">
      <summary vsli:raw="Gets the dynamic module in which this constructor is defined.">Ottiene il modulo dinamico in cui il costruttore è definito.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; object that represents the dynamic module in which this constructor is defined.">Oggetto <see cref="T:System.Reflection.Module" /> che rappresenta il modulo dinamico in cui il costruttore è definito.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Name">
      <summary vsli:raw="Retrieves the name of this constructor.">Recupera il nome del costruttore.</summary>
      <returns vsli:raw="The name of this constructor.">Nome di questo costruttore.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.ReflectedType">
      <summary vsli:raw="Holds a reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object from which this object was obtained.">Contiene un riferimento all'oggetto <see cref="T:System.Type" /> da cui l'oggetto in questione è stato ottenuto.</summary>
      <returns vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object from which this object was obtained.">
        <see langword="Type" /> Oggetto da cui è stato ottenuto questo oggetto.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute using a specified custom attribute blob.">Impostare un attributo personalizzato utilizzando un blob di attributi personalizzati specificato.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Costruttore dell'attributo personalizzato.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">BLOB di byte che rappresenta gli attributi.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> o <paramref name="binaryAttribute" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">Impostare un attributo personalizzato usando un generatore di attributi personalizzati.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">Un'istanza di una classe helper per definire l'attributo personalizzato.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
      <summary vsli:raw="Sets the method implementation flags for this constructor.">Imposta i flag di implementazione dei metodi per il costruttore.</summary>
      <param name="attributes" vsli:raw="The method implementation flags.">Flag di implementazione dei metodi.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Il tipo contenitore è stato creato usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.ToString">
      <summary vsli:raw="Returns this &lt;see cref=&quot;T:System.Reflection.Emit.ConstructorBuilder&quot; /&gt; instance as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">Restituisce l'istanza dell'oggetto <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> come un oggetto <see cref="T:System.String" />.</summary>
      <returns vsli:raw="A string containing the name, attributes, and exceptions of this constructor, followed by the current Microsoft intermediate language (MSIL) stream.">Stringa che contiene nome, attributi ed eccezioni di questo costruttore, seguita dal flusso MSIL (Microsoft Intermediate Language) corrente.</returns>
    </member>
    <member name="T:System.Reflection.Emit.EnumBuilder">
      <summary vsli:raw="Describes and represents an enumeration type.">Descrive e rappresenta un tipo di enumerazione.</summary>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Assembly">
      <summary vsli:raw="Retrieves the dynamic assembly that contains this enum definition.">Recupera l'assembly dinamico che contiene la definizione dell'enum.</summary>
      <returns vsli:raw="Read-only. The dynamic assembly that contains this enum definition.">Sola lettura. Assembly dinamico che contiene la definizione dell'enum.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
      <summary vsli:raw="Returns the full path of this enum qualified by the display name of the parent assembly.">Restituisce il percorso completo dell'enum qualificato dal nome visualizzato dell'assembly padre.</summary>
      <returns vsli:raw="Read-only. The full path of this enum qualified by the display name of the parent assembly.">Sola lettura. Percorso completo dell'enum qualificato dal nome visualizzato dell'assembly padre.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.BaseType">
      <summary vsli:raw="Returns the parent &lt;see cref=&quot;T:System.Type&quot; /&gt; of this type which is always &lt;see cref=&quot;T:System.Enum&quot; /&gt;.">Restituisce il tipo <see cref="T:System.Type" /> padre del tipo, il quale è sempre <see cref="T:System.Enum" />.</summary>
      <returns vsli:raw="Read-only. The parent &lt;see cref=&quot;T:System.Type&quot; /&gt; of this type.">Sola lettura. Tipo <see cref="T:System.Type" /> padre del tipo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.CreateTypeInfo">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.TypeInfo&quot; /&gt; object that represents this enumeration.">Ottiene un oggetto <see cref="T:System.Reflection.TypeInfo" /> che rappresenta l'enumerazione.</summary>
      <returns vsli:raw="An object that represents this enumeration.">Oggetto che rappresenta l'enumerazione.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.DeclaringType">
      <summary vsli:raw="Returns the type that declared this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;.">Restituisce il tipo con cui è stato dichiarato l'oggetto <see cref="T:System.Reflection.Emit.EnumBuilder" />.</summary>
      <returns vsli:raw="Read-only. The type that declared this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;.">Sola lettura. Tipo con cui è stato dichiarato l'oggetto <see cref="T:System.Reflection.Emit.EnumBuilder" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
      <summary vsli:raw="Defines the named static field in an enumeration type with the specified constant value.">Definisce un campo statico denominato in un tipo di enumerazione con il valore di costante specificato.</summary>
      <param name="literalName" vsli:raw="The name of the static field.">Nome del campo statico.</param>
      <param name="literalValue" vsli:raw="The constant value of the literal.">Valore costante del valore letterale.</param>
      <returns vsli:raw="The defined field.">Campo definito.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.FullName">
      <summary vsli:raw="Returns the full path of this enum.">Restituisce il percorso completo dell'enum.</summary>
      <returns vsli:raw="Read-only. The full path of this enum.">Sola lettura. Percorso completo dell'enum.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; objects representing the public and non-public constructors defined for this class, as specified.">Restituisce una matrice di oggetti <see cref="T:System.Reflection.ConstructorInfo" /> che rappresentano i costruttori pubblici e non pubblici definiti per questa classe, come specificato.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />: <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned.">Restituisce una matrice di oggetti <see cref="T:System.Reflection.ConstructorInfo" /> che rappresentano i costruttori specificati definiti per questa classe. Se non è stato definito alcun costruttore, verrà restituita una matrice vuota.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this constructor.">Restituisce tutti gli attributi personalizzati definiti per il costruttore.</summary>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">Specifica se trovare gli attributi cercandoli nella catena di ereditarietà del membro.</param>
      <returns vsli:raw="Returns an array of objects representing all the custom attributes of the constructor represented by this &lt;see cref=&quot;T:System.Reflection.Emit.ConstructorBuilder&quot; /&gt; instance.">Restituisce una matrice di oggetti che rappresentano tutti gli attributi personalizzati del costruttore rappresentato dall'istanza di <see cref="T:System.Reflection.Emit.ConstructorBuilder" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns the custom attributes identified by the given type.">Restituisce gli attributi personalizzati identificati dal tipo dato.</summary>
      <param name="attributeType" vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object to which the custom attributes are applied.">Oggetto <see langword="Type" /> a cui vengono applicati gli attributi personalizzati.</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">Specifica se trovare gli attributi cercandoli nella catena di ereditarietà del membro.</param>
      <returns vsli:raw="Returns an array of objects representing the attributes of this constructor that are of &lt;see cref=&quot;T:System.Type&quot; /&gt;&lt;paramref name=&quot;attributeType&quot; /&gt;.">Restituisce una matrice di oggetti che rappresenta gli attributi di questo costruttore che sono di <see cref="T:System.Type" /><paramref name="attributeType" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetElementType">
      <summary vsli:raw="Calling this method always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">La chiamata di questo metodo genera sempre un'eccezione <see cref="T:System.NotSupportedException" />.</summary>
      <returns vsli:raw="This method is not supported. No value is returned.">Questo metodo non è supportato. Non vengono restituiti valori.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Questo metodo non è attualmente supportato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType">
      <summary vsli:raw="Returns the underlying integer type of the current enumeration, which is set when the enumeration builder is defined.">Restituisce il tipo Integer sottostante dell'enumerazione corrente, che viene impostato al momento della definizione del generatore di enumerazione.</summary>
      <returns vsli:raw="The underlying type.">Tipo sottostante.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the event with the specified name.">Restituisce l'evento con il nome specificato.</summary>
      <param name="name" vsli:raw="The name of the event to get.">Nome dell'evento da ottenere.</param>
      <param name="bindingAttr" vsli:raw="This invocation attribute. This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Attributo di chiamata. Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />: <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns vsli:raw="Returns an &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; object representing the event declared or inherited by this type with the specified name. If there are no matches, &lt;see langword=&quot;null&quot; /&gt; is returned.">Restituisce un oggetto <see cref="T:System.Reflection.EventInfo" /> che rappresenta l'evento dichiarato o ereditato da questo tipo con il nome specificato. Se non ci sono corrispondenze, verrà restituito <see langword="null" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents">
      <summary vsli:raw="Returns the events for the public events declared or inherited by this type.">Restituisce gli eventi per gli eventi pubblici dichiarati o ereditati dal tipo.</summary>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events.">Restituisce una matrice di oggetti <see cref="T:System.Reflection.EventInfo" /> che rappresentano gli eventi pubblici dichiarati o ereditati da questo tipo. In assenza di eventi pubblici, viene restituita una matrice vuota.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public events that are declared by this type.">Restituisce gli eventi pubblici e non pubblici dichiarati da questo tipo.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />, ad esempio <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; objects representing the public and non-public events declared or inherited by this type. An empty array is returned if there are no events, as specified.">Restituisce una matrice di oggetti <see cref="T:System.Reflection.EventInfo" /> che rappresentano gli eventi pubblici e non pubblici dichiarati o ereditati da questo tipo. Se non sono presenti eventi, come specificato, verrà restituita una matrice vuota.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the field specified by the given name.">Restituisce il campo specificato con il nome specificato.</summary>
      <param name="name" vsli:raw="The name of the field to get.">Nome del campo da ottenere.</param>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />: <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns vsli:raw="Returns the &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches, then null is returned.">Restituisce l'oggetto <see cref="T:System.Reflection.FieldInfo" /> che rappresenta il campo dichiarato o ereditato da questo tipo con il nome specificato e il modificatore pubblico o non pubblico. Se sono presenti corrispondenze, verrà restituito null.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public fields that are declared by this type.">Restituisce i campi pubblici e non pubblici dichiarati da questo tipo.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as InvokeMethod, NonPublic, and so on.">È necessario che si tratti di un flag di bit da <see cref="T:System.Reflection.BindingFlags" />, come InvokeMethod, NonPublic e così via.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified.">Restituisce una matrice di oggetti <see cref="T:System.Reflection.FieldInfo" /> che rappresentano i campi pubblici e non pubblici dichiarati o ereditati da questo tipo. In assenza di campi, viene restituita una matrice vuota, come specificato.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
      <summary vsli:raw="Returns the interface implemented (directly or indirectly) by this type, with the specified fully-qualified name.">Restituisce l'interfaccia implementata, direttamente o indirettamente, da questo tipo con il nome completo specificato.</summary>
      <param name="name" vsli:raw="The name of the interface.">Nome dell'interfaccia.</param>
      <param name="ignoreCase" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the search is case-insensitive. If &lt;see langword=&quot;false&quot; /&gt;, the search is case-sensitive.">Se <see langword="true" />, la ricerca non fa distinzione tra maiuscole e minuscole. Se <see langword="false" />, la ricerca fa distinzione tra maiuscole e minuscole.</param>
      <returns vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the implemented interface. Returns null if no interface matching name is found.">Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta l'interfaccia implementata. Restituisce Null se non viene trovato alcun nome di interfaccia corrispondente.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)">
      <summary vsli:raw="Returns an interface mapping for the interface requested.">Restituisce un mapping di interfaccia per l'interfaccia richiesta.</summary>
      <param name="interfaceType" vsli:raw="The type of the interface for which the interface mapping is to be retrieved.">Tipo di interfaccia per il quale recuperare il mapping di interfaccia.</param>
      <returns vsli:raw="The requested interface mapping.">Mapping dell'interfaccia richiesta.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The type does not implement the interface.">Il tipo non implementa l'interfaccia.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaces">
      <summary vsli:raw="Returns an array of all the interfaces implemented on this a class and its base classes.">Restituisce una matrice di tutte le interfacce implementate sulla classe e sulle relative classi base.</summary>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the implemented interfaces. If none are defined, an empty array is returned.">Restituisce una matrice di oggetti <see cref="T:System.Type" /> che rappresentano le interfacce implementate. Se non è stata definita alcuna interfaccia, viene restituita una matrice vuota.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all members with the specified name, type, and binding that are declared or inherited by this type.">Restituisce tutti i membri con il nome, il tipo e l'associazione specificati che vengono dichiarati o ereditati da questo tipo.</summary>
      <param name="name" vsli:raw="The name of the member.">Nome del membro.</param>
      <param name="type" vsli:raw="The type of member that is to be returned.">Tipo del membro da restituire.</param>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />: <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects representing the public and non-public members defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public members are returned.">Restituisce una matrice di oggetti <see cref="T:System.Reflection.MemberInfo" /> che rappresentano i membri pubblici e non pubblici definiti sul tipo se è usato il parametro <paramref name="nonPublic" />; in caso contrario, vengono restituiti solo i membri pubblici.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the specified members declared or inherited by this type.">Restituisce i membri specificati che vengono dichiarati o ereditati da questo tipo.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />: <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members.">Restituisce una matrice di oggetti <see cref="T:System.Reflection.MemberInfo" /> che rappresentano i membri pubblici o non pubblici dichiarati o ereditati da questo tipo. In assenza di membri corrispondenti, viene restituita una matrice vuota.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public methods declared or inherited by this type, as specified.">Restituisce tutti i metodi pubblici e non pubblici dichiarati o ereditati da questo tipo, come specificato.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />, ad esempio <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; objects representing the public and non-public methods defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public methods are returned.">Restituisce una matrice di oggetti <see cref="T:System.Reflection.MethodInfo" /> che rappresentano i metodi pubblici e non pubblici definiti sul tipo se è usato il parametro <paramref name="nonPublic" />; in caso contrario, vengono restituiti solo i metodi pubblici.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the specified nested type that is declared by this type.">Restituisce il tipo annidato specificato che viene dichiarato da questo tipo.</summary>
      <param name="name" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the nested type to get.">Oggetto <see cref="T:System.String" /> che contiene il nome del tipo annidato da ottenere.</param>
      <param name="bindingAttr" vsli:raw="A bitmask comprised of one or more &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; that specify how the search is conducted.  &#xA;  &#xA; -or-  &#xA;  &#xA; Zero, to conduct a case-sensitive search for public methods.">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.  
In alternativa 
Zero, per eseguire una ricerca di metodi pubblici con distinzione tra maiuscole e minuscole.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the nested type that matches the specified requirements, if found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo annidato corrispondente ai requisiti specificati, se presente; in caso contrario, <see langword="null" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public nested types that are declared or inherited by this type.">Restituisce i tipi annidati pubblici e non pubblici dichiarati o ereditati da questo tipo.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />, ad esempio <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing all the types nested within the current &lt;see cref=&quot;T:System.Type&quot; /&gt; that match the specified binding constraints.  &#xA;  &#xA; An empty array of type &lt;see cref=&quot;T:System.Type&quot; /&gt;, if no types are nested within the current &lt;see cref=&quot;T:System.Type&quot; /&gt;, or if none of the nested types match the binding constraints.">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano tutti i tipi annidati nell'oggetto <see cref="T:System.Type" /> corrente che corrispondono ai vincoli di associazione specificati.  
Matrice vuota di tipo <see cref="T:System.Type" />, se l'oggetto <see cref="T:System.Type" /> corrente non contiene tipi annidati o se nessuno dei tipi annidati corrisponde ai vincoli di associazione.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public properties declared or inherited by this type, as specified.">Restituisce tutte le proprietà pubbliche e non pubbliche dichiarate o ereditate da questo tipo, come specificato.</summary>
      <param name="bindingAttr" vsli:raw="This invocation attribute. This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Attributo di chiamata. Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />: <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; objects representing the public and non-public properties defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public properties are returned.">Restituisce una matrice di oggetti <see cref="T:System.Reflection.PropertyInfo" /> che rappresentano le proprietà pubbliche e non pubbliche definite per questo tipo se viene usato il parametro <paramref name="nonPublic" />; in caso contrario, vengono restituite solo le proprietà pubbliche.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.GUID">
      <summary vsli:raw="Returns the GUID of this enum.">Restituisce il GUID dell'enum.</summary>
      <returns vsli:raw="Read-only. The GUID of this enum.">Sola lettura. GUID dell'enum.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary vsli:raw="Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.">Richiama il membro specificato. Il metodo da richiamare deve essere accessibile e fornire massima corrispondenza con l'elenco di argomenti specificato, in conformità ai vincoli del binder e degli attributi di chiamata specificati.</summary>
      <param name="name" vsli:raw="The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.">Nome del membro da richiamare. Può essere un costruttore, un metodo, una proprietà o un campo. È necessario specificare un attributo di chiamata appropriato. Si noti che è possibile richiamare il membro predefinito di una classe passando una stringa vuota come nome del membro.</param>
      <param name="invokeAttr" vsli:raw="The invocation attribute. This must be a bit flag from &lt;see langword=&quot;BindingFlags&quot; /&gt;.">Attributo di chiamata. Deve essere un flag di bit di <see langword="BindingFlags" />.</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If binder is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used. See &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt;.">Oggetto che consente l'associazione, la coercizione dei tipi di argomento, la chiamata dei membri e il recupero di oggetti <see langword="MemberInfo" /> tramite reflection. Se il binder è <see langword="null" />, viene usato quello predefinito. Vedere <see cref="T:System.Reflection.Binder" />.</param>
      <param name="target" vsli:raw="The object on which to invoke the specified member. If the member is static, this parameter is ignored.">Oggetto su cui richiamare il membro specificato. Se il membro è statico, il parametro viene ignorato.</param>
      <param name="args" vsli:raw="An argument list. This is an array of objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null.">Elenco di argomenti. Matrice di oggetti che contiene il numero, l'ordine e il tipo dei parametri del membro da richiamare. In assenza di parametri, deve essere Null.</param>
      <param name="modifiers" vsli:raw="An array of the same length as &lt;paramref name=&quot;args&quot; /&gt; with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for details such as this.">Matrice della stessa lunghezza di <paramref name="args" /> con elementi che rappresentano gli attributi associati agli argomenti del membro da richiamare. A un parametro sono associati attributi nei metadati. Vengono usati da vari servizi di interoperabilità. Per questo tipo di informazioni, vedere le specifiche dei metadati.</param>
      <param name="culture" vsli:raw="An instance of &lt;see langword=&quot;CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see langword=&quot;CultureInfo&quot; /&gt; for the current thread is used. (Note that this is necessary to, for example, convert a string that represents 1000 to a double value, since 1000 is represented differently by different cultures.)">Istanza di <see langword="CultureInfo" /> usata per regolare la coercizione dei tipi. Se tale parametro è Null, verrà usato l'oggetto <see langword="CultureInfo" /> per il thread corrente. Ciò è necessario, ad esempio, per convertire una stringa che rappresenta 1000 in un valore double, poiché 1000 è rappresentato in modo diverso nelle diverse impostazioni cultura.</param>
      <param name="namedParameters" vsli:raw="Each parameter in the &lt;paramref name=&quot;namedParameters&quot; /&gt; array gets the value in the corresponding element in the &lt;paramref name=&quot;args&quot; /&gt; array. If the length of &lt;paramref name=&quot;args&quot; /&gt; is greater than the length of &lt;paramref name=&quot;namedParameters&quot; /&gt;, the remaining argument values are passed in order.">Tutti i parametri nella matrice <paramref name="namedParameters" /> ottengono il valore nell'elemento corrispondente della matrice <paramref name="args" />. Se la lunghezza di <paramref name="args" /> è superiore a quella di <paramref name="namedParameters" />, i valori degli argomenti rimanenti vengono passati in ordine.</param>
      <returns vsli:raw="Returns the return value of the invoked member.">Restituisce il valore restituito del membro richiamato.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsConstructedGenericType">
      <summary vsli:raw="Gets a value that indicates whether this object represents a constructed generic type.">Ottiene un valore che indica se l'oggetto rappresenta un tipo generico costruito.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object represents a constructed generic type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se questo oggetto rappresenta una definizione di tipo generico; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Checks if the specified custom attribute type is defined.">Controlla se è definito il tipo di attributo personalizzato specificato.</summary>
      <param name="attributeType" vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object to which the custom attributes are applied.">Oggetto <see langword="Type" /> a cui vengono applicati gli attributi personalizzati.</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">Specifica se trovare gli attributi cercandoli nella catena di ereditarietà del membro.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instance of &lt;paramref name=&quot;attributeType&quot; /&gt; is defined on this member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se una o più istanze di <paramref name="attributeType" /> sono definite sul membro; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsVariableBoundArray" />
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeArrayType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing a one-dimensional array of the current type, with a lower bound of zero.">Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta una matrice unidimensionale del tipo corrente, con limite inferiore zero.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing a one-dimensional array of the current type, with a lower bound of zero.">Oggetto <see cref="T:System.Type" /> che rappresenta una matrice unidimensionale del tipo corrente, con limite inferiore zero.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing an array of the current type, with the specified number of dimensions.">Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta una matrice del tipo corrente, con il numero specificato di dimensioni.</summary>
      <param name="rank" vsli:raw="The number of dimensions for the array. This number must be less than or equal to 32.">Numero di dimensioni della matrice. Il numero deve essere minore o uguale a 32.</param>
      <returns vsli:raw="An object representing an array of the current type, with the specified number of dimensions.">Oggetto che rappresenta una matrice del tipo corrente, con il numero specificato di dimensioni.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;rank&quot; /&gt; is less than 1.">
        <paramref name="rank" /> è minore di 1.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeByRefType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).">Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta il tipo corrente quando viene passato come parametro ref (parametro ByRef in Visual Basic).</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo corrente quando viene passato come parametro ref (parametro ByRef in Visual Basic).</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakePointerType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a pointer to the current type.">Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta un puntatore al tipo corrente.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a pointer to the current type.">Oggetto <see cref="T:System.Type" /> che rappresenta un puntatore al tipo corrente.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Module">
      <summary vsli:raw="Retrieves the dynamic module that contains this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt; definition.">Recupera il modulo dinamico che contiene la definizione di <see cref="T:System.Reflection.Emit.EnumBuilder" />.</summary>
      <returns vsli:raw="Read-only. The dynamic module that contains this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt; definition.">Sola lettura. Modulo dinamico che contiene la definizione di <see cref="T:System.Reflection.Emit.EnumBuilder" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Name">
      <summary vsli:raw="Returns the name of this enum.">Restituisce il nome dell'enum.</summary>
      <returns vsli:raw="Read-only. The name of this enum.">Sola lettura. Nome dell'enum.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Namespace">
      <summary vsli:raw="Returns the namespace of this enum.">Restituisce lo spazio dei nomi dell'enum.</summary>
      <returns vsli:raw="Read-only. The namespace of this enum.">Sola lettura. Spazio dei nomi dell'enum.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.ReflectedType">
      <summary vsli:raw="Returns the type that was used to obtain this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;.">Restituisce il tipo utilizzato per ottenere l'oggetto <see cref="T:System.Reflection.Emit.EnumBuilder" />.</summary>
      <returns vsli:raw="Read-only. The type that was used to obtain this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;.">Sola lettura. Tipo utilizzato per ottenere l'oggetto <see cref="T:System.Reflection.Emit.EnumBuilder" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">Imposta un attributo personalizzato usando un BLOB di attributi personalizzati specificato.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Costruttore dell'attributo personalizzato.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">BLOB di byte che rappresenta gli attributi.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> o <paramref name="binaryAttribute" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Sets a custom attribute using a custom attribute builder.">Imposta un attributo personalizzato utilizzando un generatore di attributi personalizzato.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">Un'istanza di una classe helper per definire l'attributo personalizzato.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> è <see langword="null" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.TypeHandle">
      <summary vsli:raw="Retrieves the internal handle for this enum.">Recupera l'handle interno per l'enum.</summary>
      <returns vsli:raw="Read-only. The internal handle for this enum.">Sola lettura. Handle interno per l'enum.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This property is not currently supported.">La proprietà non è attualmente supportata.</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingField">
      <summary vsli:raw="Returns the underlying field for this enum.">Restituisce il campo sottostante per l'enum.</summary>
      <returns vsli:raw="Read-only. The underlying field for this enum.">Sola lettura. Campo sottostante per l'enum.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingSystemType">
      <summary vsli:raw="Returns the underlying system type for this enum.">Restituisce il tipo di sistema sottostante per l'enum.</summary>
      <returns vsli:raw="Read-only. Returns the underlying system type.">Sola lettura. Restituisce il tipo di sistema sottostante.</returns>
    </member>
    <member name="T:System.Reflection.Emit.EventBuilder">
      <summary vsli:raw="Defines events for a class.">Definisce gli eventi per una classe.</summary>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Adds one of the &quot;other&quot; methods associated with this event. &quot;Other&quot; methods are methods other than the &quot;on&quot; and &quot;raise&quot; methods associated with an event. This function can be called many times to add as many &quot;other&quot; methods.">Aggiunge uno degli altri metodi associati all'evento, ovvero un metodo diverso dai metodi "on" e "raise" associati a un evento. È possibile chiamare questa funzione più volte per aggiungere un numero qualsiasi di altri metodi.</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the other method.">Oggetto <see langword="MethodBuilder" /> che rappresenta l'altro metodo.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">Il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> è stato chiamato sul tipo di inclusione.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetAddOnMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method used to subscribe to this event.">Imposta il metodo utilizzato per la sottoscrizione dell'evento.</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method used to subscribe to this event.">Oggetto <see langword="MethodBuilder" /> che rappresenta il metodo utilizzato per la sottoscrizione dell'evento.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">Il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> è stato chiamato sul tipo di inclusione.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute using a specified custom attribute blob.">Impostare un attributo personalizzato utilizzando un blob di attributi personalizzati specificato.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Costruttore dell'attributo personalizzato.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">BLOB di byte che rappresenta gli attributi.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> o <paramref name="binaryAttribute" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">Il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> è stato chiamato sul tipo di inclusione.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Sets a custom attribute using a custom attribute builder.">Imposta un attributo personalizzato utilizzando un generatore di attributi personalizzato.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to describe the custom attribute.">Istanza di una classe di supporto per definire l'attributo personalizzato.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">Il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> è stato chiamato sul tipo di inclusione.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRaiseMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method used to raise this event.">Imposta il metodo utilizzato per generare l'evento.</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method used to raise this event.">Oggetto <see langword="MethodBuilder" /> che rappresenta il metodo utilizzato per generare l'evento.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">Il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> è stato chiamato sul tipo di inclusione.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRemoveOnMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method used to unsubscribe to this event.">Imposta il metodo utilizzato per annullare la sottoscrizione dell'evento.</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method used to unsubscribe to this event.">Oggetto <see langword="MethodBuilder" /> che rappresenta il metodo utilizzato per annullare la sottoscrizione dell'evento.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">Il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> è stato chiamato sul tipo di inclusione.</exception>
    </member>
    <member name="T:System.Reflection.Emit.FieldBuilder">
      <summary vsli:raw="Defines and represents a field. This class cannot be inherited.">Definisce e rappresenta un campo. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Attributes">
      <summary vsli:raw="Indicates the attributes of this field. This property is read-only.">Indica gli attributi del campo. Questa proprietà è di sola lettura.</summary>
      <returns vsli:raw="The attributes of this field.">Attributi del campo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.DeclaringType">
      <summary vsli:raw="Indicates a reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the type that declares this field. This property is read-only.">Indica un riferimento all'oggetto <see cref="T:System.Type" /> per il tipo che dichiara il campo. Questa proprietà è di sola lettura.</summary>
      <returns vsli:raw="A reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the type that declares this field.">Riferimento all'oggetto <see cref="T:System.Type" /> per il tipo che dichiara il campo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldHandle">
      <summary vsli:raw="Indicates the internal metadata handle for this field. This property is read-only.">Indica l'handle di metadati interno per il campo. Questa proprietà è di sola lettura.</summary>
      <returns vsli:raw="The internal metadata handle for this field.">Handle di metadati interno per il campo.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Questo metodo non è supportato.</exception>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldType">
      <summary vsli:raw="Indicates the &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of this field. This property is read-only.">Indica l'oggetto <see cref="T:System.Type" /> che rappresenta il tipo del campo. Questa proprietà è di sola lettura.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of this field.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo del campo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this field.">Restituisce tutti gli attributi personalizzati definiti per il campo.</summary>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes.">Controlla l'ereditarietà degli attributi personalizzati dalle classi base.</param>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.Object&quot; /&gt; representing all the custom attributes of the constructor represented by this &lt;see cref=&quot;T:System.Reflection.Emit.FieldBuilder&quot; /&gt; instance.">Matrice di tipo <see cref="T:System.Object" /> che rappresenta tutti gli attributi personalizzati del costruttore indicato dall'istanza di <see cref="T:System.Reflection.Emit.FieldBuilder" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Questo metodo non è supportato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this field identified by the given type.">Restituisce tutti gli attributi personalizzati definiti per il campo identificato dal tipo indicato.</summary>
      <param name="attributeType" vsli:raw="The custom attribute type.">Tipo di attributo personalizzato.</param>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes.">Controlla l'ereditarietà degli attributi personalizzati dalle classi base.</param>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.Object&quot; /&gt; representing all the custom attributes of the constructor represented by this &lt;see cref=&quot;T:System.Reflection.Emit.FieldBuilder&quot; /&gt; instance.">Matrice di tipo <see cref="T:System.Object" /> che rappresenta tutti gli attributi personalizzati del costruttore indicato dall'istanza di <see cref="T:System.Reflection.Emit.FieldBuilder" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Questo metodo non è supportato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetValue(System.Object)">
      <summary vsli:raw="Retrieves the value of the field supported by the given object.">Recupera il valore del campo supportato dall'oggetto indicato.</summary>
      <param name="obj" vsli:raw="The object on which to access the field.">Oggetto da utilizzare per accedere al campo.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; containing the value of the field reflected by this instance.">Oggetto <see cref="T:System.Object" /> contenente il valore del campo ottenuto mediante reflection dall'istanza.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Questo metodo non è supportato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Indicates whether an attribute having the specified type is defined on a field.">Indica se un attributo con il tipo specificato è definito in un campo.</summary>
      <param name="attributeType" vsli:raw="The type of the attribute.">Tipo dell'attributo.</param>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes.">Controlla l'ereditarietà degli attributi personalizzati dalle classi base.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instance of &lt;paramref name=&quot;attributeType&quot; /&gt; is defined on this field; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se una o più istanze di <paramref name="attributeType" /> sono definite nel campo; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the field using &lt;see cref=&quot;M:System.Type.GetField(System.String,System.Reflection.BindingFlags)&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;.">Questo metodo non è attualmente supportato. Recuperare il campo utilizzando il metodo <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" /> e chiamare il metodo <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> per l'oggetto <see cref="T:System.Reflection.FieldInfo" /> restituito.</exception>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Module">
      <summary vsli:raw="Gets the module in which the type that contains this field is being defined.">Ottiene il modulo in cui viene definito il tipo che contiene questo campo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; that represents the dynamic module in which this field is being defined.">Oggetto <see cref="T:System.Reflection.Module" /> che rappresenta il modulo dinamico in cui viene definito questo campo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Name">
      <summary vsli:raw="Indicates the name of this field. This property is read-only.">Indica il nome del campo. Questa proprietà è di sola lettura.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of this field.">Oggetto <see cref="T:System.String" /> contenente il nome del campo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.ReflectedType">
      <summary vsli:raw="Indicates the reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object from which this object was obtained. This property is read-only.">Indica il riferimento all'oggetto <see cref="T:System.Type" /> da cui è stato ottenuto l'oggetto. Questa proprietà è di sola lettura.</summary>
      <returns vsli:raw="A reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object from which this instance was obtained.">Riferimento all'oggetto <see cref="T:System.Type" /> da cui è stata ottenuta l'istanza.</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetConstant(System.Object)">
      <summary vsli:raw="Sets the default value of this field.">Imposta il valore predefinito del campo.</summary>
      <param name="defaultValue" vsli:raw="The new default value for this field.">Nuovo valore predefinito per il campo.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Il tipo contenitore è stato creato usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The field is not one of the supported types.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of &lt;paramref name=&quot;defaultValue&quot; /&gt; does not match the type of the field.  &#xA;  &#xA; -or-  &#xA;  &#xA; The field is of type &lt;see cref=&quot;T:System.Object&quot; /&gt; or other reference type, &lt;paramref name=&quot;defaultValue&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;, and the value cannot be assigned to the reference type.">Il campo non è tra i tipi supportati.  
In alternativa 
Il tipo di <paramref name="defaultValue" /> e il tipo del campo non corrispondono.  
-oppure- 
Il tipo del campo è <see cref="T:System.Object" /> o un altro tipo di riferimento, <paramref name="defaultValue" /> non è <see langword="null" /> e il valore non può essere assegnato al tipo di riferimento.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">Imposta un attributo personalizzato usando un BLOB di attributi personalizzati specificato.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Costruttore dell'attributo personalizzato.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">BLOB di byte che rappresenta gli attributi.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> o <paramref name="binaryAttribute" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The parent type of this field is complete.">Il tipo padre del campo è completo.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Sets a custom attribute using a custom attribute builder.">Imposta un attributo personalizzato utilizzando un generatore di attributi personalizzato.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">Un'istanza di una classe helper per definire l'attributo personalizzato.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The parent type of this field is complete.">Il tipo padre del campo è completo.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetOffset(System.Int32)">
      <summary vsli:raw="Specifies the field layout.">Specifica il layout dei campi.</summary>
      <param name="iOffset" vsli:raw="The offset of the field within the type containing this field.">Offset del campo all'interno del tipo contenente il campo.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Il tipo contenitore è stato creato usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;iOffset&quot; /&gt; is less than zero.">
        <paramref name="iOffset" /> è minore di zero.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary vsli:raw="Sets the value of the field supported by the given object.">Imposta il valore del campo supportato dall'oggetto specificato.</summary>
      <param name="obj" vsli:raw="The object on which to access the field.">Oggetto da utilizzare per accedere al campo.</param>
      <param name="val" vsli:raw="The value to assign to the field.">Valore da assegnare al campo.</param>
      <param name="invokeAttr" vsli:raw="A member of &lt;see langword=&quot;IBinder&quot; /&gt; that specifies the type of binding that is desired (for example, IBinder.CreateInstance, IBinder.ExactBinding).">Membro di <see langword="IBinder" /> che specifica il tipo di associazione desiderata, ad esempio IBinder.CreateInstance e IBinder.ExactBinding.</param>
      <param name="binder" vsli:raw="A set of properties and enabling for binding, coercion of argument types, and invocation of members using reflection. If binder is null, then IBinder.DefaultBinding is used.">Set di proprietà che abilita l'associazione, la coercizione dei tipi di argomento e la chiamata dei membri tramite reflection. Se il gestore di associazione è null, verrà utilizzato IBinder.DefaultBinding.</param>
      <param name="culture" vsli:raw="The software preferences of a particular culture.">Preferenze software di determinate impostazioni cultura.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Questo metodo non è supportato.</exception>
    </member>
    <member name="T:System.Reflection.Emit.GenericTypeParameterBuilder">
      <summary vsli:raw="Defines and creates generic type parameters for dynamically defined generic types and methods. This class cannot be inherited.">Definisce e crea parametri di tipo generico per tipi e metodi generici definiti dinamicamente. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Assembly">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.">Ottiene un oggetto <see cref="T:System.Reflection.Assembly" /> che rappresenta l'assembly dinamico che contiene la definizione di tipo generico a cui appartiene il parametro di tipo corrente.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.">Classe <see cref="T:System.Reflection.Assembly" /> che rappresenta l'assembly dinamico che contiene la definizione di tipo generico a cui appartiene il parametro di tipo corrente.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName">
      <summary vsli:raw="Gets &lt;see langword=&quot;null&quot; /&gt; in all cases.">Ottiene <see langword="null" /> in tutti i casi.</summary>
      <returns vsli:raw="A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) in all cases.">Riferimento null (<see langword="Nothing" /> in Visual Basic) in tutti i casi.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType">
      <summary vsli:raw="Gets the base type constraint of the current generic type parameter.">Ottiene il vincolo del tipo di base per il parametro di tipo generico corrente.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the base type constraint of the generic type parameter, or &lt;see langword=&quot;null&quot; /&gt; if the type parameter has no base type constraint.">Oggetto <see cref="T:System.Type" /> che rappresenta il vincolo di tipo di base del parametro di tipo generico oppure <see langword="null" /> se il parametro di tipo non dispone di vincoli di tipo di base.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters">
      <summary vsli:raw="Gets &lt;see langword=&quot;true&quot; /&gt; in all cases.">Ottiene <see langword="true" /> in tutti i casi.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">
        <see langword="true" /> in tutti i casi.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the declaring method, if the current &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; represents a type parameter of a generic method.">Ottiene una classe <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo dichiarante se la classe <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> corrente rappresenta un parametro di tipo di un metodo generico.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the declaring method, if the current &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; represents a type parameter of a generic method; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Classe <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo dichiarante se l'oggetto <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> corrente rappresenta un parametro di tipo di un metodo generico. In caso contrario, <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType">
      <summary vsli:raw="Gets the generic type definition or generic method definition to which the generic type parameter belongs.">Ottiene la definizione di tipo generico o la definizione di metodo generico a cui il parametro di tipo generico appartiene.</summary>
      <returns vsli:raw="If the type parameter belongs to a generic type, a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing that generic type; if the type parameter belongs to a generic method, a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing that type that declared that generic method.">Se il parametro di tipo appartiene a un tipo generico, un oggetto <see cref="T:System.Type" /> che rappresenta tale tipo generico; se il parametro di tipo appartiene a un metodo generico, un oggetto <see cref="T:System.Type" /> che rappresenta il tipo in cui è stato dichiarato il metodo generico.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)">
      <summary vsli:raw="Tests whether the given object is an instance of &lt;see langword=&quot;EventToken&quot; /&gt; and is equal to the current instance.">Verifica se l'oggetto dato è un'istanza di <see langword="EventToken" /> ed è uguale all'istanza corrente.</summary>
      <param name="o" vsli:raw="The object to be compared with the current instance.">Oggetto da confrontare con l'istanza corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;o&quot; /&gt; is an instance of &lt;see langword=&quot;EventToken&quot; /&gt; and equals the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="o" /> è un'istanza di <see langword="EventToken" /> ed è uguale all'istanza corrente, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.FullName">
      <summary vsli:raw="Gets &lt;see langword=&quot;null&quot; /&gt; in all cases.">Ottiene <see langword="null" /> in tutti i casi.</summary>
      <returns vsli:raw="A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) in all cases.">Riferimento null (<see langword="Nothing" /> in Visual Basic) in tutti i casi.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes">
      <summary vsli:raw="Gets a combination of &lt;see cref=&quot;T:System.Reflection.GenericParameterAttributes&quot; /&gt; flags that describe the covariance and special constraints of the current generic type parameter.">Ottiene una combinazione di flag <see cref="T:System.Reflection.GenericParameterAttributes" /> che descrivono la covariante e i vincoli speciali del parametro di tipo generico corrente.</summary>
      <returns vsli:raw="A bitwise combination of values that describes the covariance and special constraints of the current generic type parameter.">Combinazione bit per bit di valori che descrive la covariante e i vincoli speciali del parametro di tipo generico corrente.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition">
      <summary vsli:raw="Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter.">Ottiene la posizione del parametro di tipo nell'elenco dei parametri di tipo del tipo generico o del metodo generico in cui il parametro è dichiarato.</summary>
      <returns vsli:raw="The position of the type parameter in the type parameter list of the generic type or method that declared the parameter.">Posizione del parametro di tipo nell'elenco dei parametri di tipo del tipo o del metodo generico in cui il parametro è dichiarato.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">Non supportato.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">Specifica se trovare gli attributi cercandoli nella catena di ereditarietà del membro.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="attributeType" vsli:raw="The type of attribute to search for. Only attributes that are assignable to this type are returned.">Tipo di attributo da cercare. Vengono restituiti solo gli attributi assegnabili a questo tipo.</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">Specifica se trovare gli attributi cercandoli nella catena di ereditarietà del membro.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <returns vsli:raw="The type referred to by the current array type, pointer type, or &lt;see langword=&quot;ByRef&quot; /&gt; type; or &lt;see langword=&quot;null&quot; /&gt; if the current type is not an array type, is not a pointer type, and is not passed by reference.">Il tipo a cui fa riferimento il tipo di matrice corrente, il tipo di puntatore o il tipo <see langword="ByRef" /> oppure <see langword="null" /> se il tipo corrente non è un tipo di matrice o di puntatore e se non viene passato dal riferimento.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="name" vsli:raw="Not supported.">Non supportato.</param>
      <param name="bindingAttr" vsli:raw="Not supported.">Non supportato.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</summary>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">Non supportato.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="name" vsli:raw="Not supported.">Non supportato.</param>
      <param name="bindingAttr" vsli:raw="Not supported.">Non supportato.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">Non supportato.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments">
      <summary vsli:raw="Not valid for generic type parameters.">Non valido per i parametri di tipo generico.</summary>
      <returns vsli:raw="Not valid for generic type parameters.">Non valido per i parametri di tipo generico.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition">
      <summary vsli:raw="Not valid for generic type parameters.">Non valido per i parametri di tipo generico.</summary>
      <returns vsli:raw="Not valid for generic type parameters.">Non valido per i parametri di tipo generico.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode">
      <summary vsli:raw="Returns a 32-bit integer hash code for the current instance.">Restituisce un codice hash di valori interi a 32 bit per l'istanza corrente.</summary>
      <returns vsli:raw="A 32-bit integer hash code.">Codice hash di valori interi a 32 bit.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="name" vsli:raw="The name of the interface.">Nome dell'interfaccia.</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search without regard for case; &lt;see langword=&quot;false&quot; /&gt; to make a case-sensitive search.">
        <see langword="true" /> per eseguire la ricerca senza distinzione tra maiuscole e minuscole; <see langword="false" /> per eseguire la ricerca con la distinzione tra maiuscole e minuscole.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="interfaceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the interface type for which the mapping is to be retrieved.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di interfaccia per il quale recuperare il mapping.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</summary>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="name" vsli:raw="Not supported.">Non supportato.</param>
      <param name="type" vsli:raw="Not supported.">Non supportato.</param>
      <param name="bindingAttr" vsli:raw="Not supported.">Non supportato.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">Non supportato.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">Non supportato.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="name" vsli:raw="Not supported.">Non supportato.</param>
      <param name="bindingAttr" vsli:raw="Not supported.">Non supportato.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">Non supportato.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">Non supportato.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GUID">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</summary>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="name" vsli:raw="Not supported.">Non supportato.</param>
      <param name="invokeAttr" vsli:raw="Not supported.">Non supportato.</param>
      <param name="binder" vsli:raw="Not supported.">Non supportato.</param>
      <param name="target" vsli:raw="Not supported.">Non supportato.</param>
      <param name="args" vsli:raw="Not supported.">Non supportato.</param>
      <param name="modifiers" vsli:raw="Not supported.">Non supportato.</param>
      <param name="culture" vsli:raw="Not supported.">Non supportato.</param>
      <param name="namedParameters" vsli:raw="Not supported.">Non supportato.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; exception in all cases.">Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="c" vsli:raw="The object to test.">Oggetto da testare.</param>
      <returns vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; exception in all cases.">Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType">
      <summary vsli:raw="Gets a value that indicates whether this object represents a constructed generic type.">Ottiene un valore che indica se l'oggetto rappresenta un tipo generico costruito.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object represents a constructed generic type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se questo oggetto rappresenta una definizione di tipo generico; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="attributeType" vsli:raw="Not supported.">Non supportato.</param>
      <param name="inherit" vsli:raw="Not supported.">Non supportato.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter">
      <summary vsli:raw="Gets &lt;see langword=&quot;true&quot; /&gt; in all cases.">Ottiene <see langword="true" /> in tutti i casi.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">
        <see langword="true" /> in tutti i casi.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType">
      <summary vsli:raw="Returns &lt;see langword=&quot;false&quot; /&gt; in all cases.">Restituisce <see langword="false" /> in tutti i casi.</summary>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; in all cases.">
        <see langword="false" /> in tutti i casi.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition">
      <summary vsli:raw="Gets &lt;see langword=&quot;false&quot; /&gt; in all cases.">Ottiene <see langword="false" /> in tutti i casi.</summary>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; in all cases.">
        <see langword="false" /> in tutti i casi.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="c" vsli:raw="Not supported.">Non supportato.</param>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsVariableBoundArray" />
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType">
      <summary vsli:raw="Returns the type of a one-dimensional array whose element type is the generic type parameter.">Restituisce il tipo di una matrice unidimensionale il cui tipo di elemento è il parametro di tipo generico.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of a one-dimensional array whose element type is the generic type parameter.">Classe <see cref="T:System.Type" /> che rappresenta il tipo di una matrice unidimensionale il cui tipo di elemento è il parametro di tipo generico.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
      <summary vsli:raw="Returns the type of an array whose element type is the generic type parameter, with the specified number of dimensions.">Restituisce il tipo di una matrice il cui tipo di elemento è il parametro di tipo generico, con il numero specificato di dimensioni.</summary>
      <param name="rank" vsli:raw="The number of dimensions for the array.">Numero di dimensioni della matrice.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of an array whose element type is the generic type parameter, with the specified number of dimensions.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di una matrice il cui tipo di elemento è il parametro di tipo generico, con il numero specificato di dimensioni.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;rank&quot; /&gt; is not a valid number of dimensions. For example, its value is less than 1.">
        <paramref name="rank" /> non è un numero di dimensioni valido. Ad esempio, il suo valore è minore di 1.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current generic type parameter when passed as a reference parameter.">Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta il parametro di tipo generico corrente quando è passato come parametro di riferimento.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current generic type parameter when passed as a reference parameter.">Oggetto <see cref="T:System.Type" /> che rappresenta il parametro di tipo generico corrente quando è passato come parametro di riferimento.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])">
      <summary vsli:raw="Not valid for incomplete generic type parameters.">Non valido per i parametri di tipo generico incompleti.</summary>
      <param name="typeArguments" vsli:raw="An array of type arguments.">Matrice di argomenti di tipo.</param>
      <returns vsli:raw="This method is invalid for incomplete generic type parameters.">Questo metodo non è valido per parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a pointer to the current generic type parameter.">Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta un puntatore al parametro di tipo generico corrente.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a pointer to the current generic type parameter.">Oggetto <see cref="T:System.Type" /> che rappresenta un puntatore al parametro di tipo generico corrente.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Module">
      <summary vsli:raw="Gets the dynamic module that contains the generic type parameter.">Ottiene il modulo dinamico che contiene il parametro di tipo generico.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; object that represents the dynamic module that contains the generic type parameter.">Oggetto <see cref="T:System.Reflection.Module" /> che rappresenta il modulo dinamico che contiene il parametro di tipo generico.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Name">
      <summary vsli:raw="Gets the name of the generic type parameter.">Ottiene il nome del parametro di tipo generico.</summary>
      <returns vsli:raw="The name of the generic type parameter.">Il nome del parametro di tipo generico.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Namespace">
      <summary vsli:raw="Gets &lt;see langword=&quot;null&quot; /&gt; in all cases.">Ottiene <see langword="null" /> in tutti i casi.</summary>
      <returns vsli:raw="A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) in all cases.">Riferimento null (<see langword="Nothing" /> in Visual Basic) in tutti i casi.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Type&quot; /&gt; object that was used to obtain the &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt;.">Ottiene l'oggetto <see cref="T:System.Type" /> utilizzato per ottenere la classe <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that was used to obtain the &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt;.">Oggetto <see cref="T:System.Type" /> utilizzato per ottenere la classe <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
      <summary vsli:raw="Sets the base type that a type must inherit in order to be substituted for the type parameter.">Imposta il tipo di base che un tipo deve ereditare per essere sostituito dal parametro di tipo.</summary>
      <param name="baseTypeConstraint" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that must be inherited by any type that is to be substituted for the type parameter.">Classe <see cref="T:System.Type" /> che deve essere ereditata da qualsiasi tipo per cui sia richiesta la sostituzione con il parametro di tipo.</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">Imposta un attributo personalizzato usando un BLOB di attributi personalizzati specificato.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Costruttore dell'attributo personalizzato.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attribute.">Blob di byte che rappresenta l'attributo.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is a null reference.">
        <paramref name="con" /> è <see langword="null" />.  
-oppure- 
 <paramref name="binaryAttribute" /> è un riferimento null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">Impostare un attributo personalizzato usando un generatore di attributi personalizzati.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class that defines the custom attribute.">Istanza di una classe di supporto che consente di definire l'attributo personalizzato.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
      <summary vsli:raw="Sets the variance characteristics and special constraints of the generic parameter, such as the parameterless constructor constraint.">Imposta le caratteristiche di varianza e i vincoli speciali del parametro generico, ad esempio il vincolo del costruttore senza parametri.</summary>
      <param name="genericParameterAttributes" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.GenericParameterAttributes&quot; /&gt; values that represent the variance characteristics and special constraints of the generic type parameter.">Combinazione bit per bit di valori <see cref="T:System.Reflection.GenericParameterAttributes" /> che rappresentano le caratteristiche di varianza e i vincoli speciali del parametro di tipo generico.</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
      <summary vsli:raw="Sets the interfaces a type must implement in order to be substituted for the type parameter.">Imposta le interfacce da implementare per un tipo, per consentirne la sostituzione con il parametro di tipo.</summary>
      <param name="interfaceConstraints" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects that represent the interfaces a type must implement in order to be substituted for the type parameter.">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano le interfacce da implementare per un tipo, per consentirne la sostituzione con il parametro di tipo.</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.ToString">
      <summary vsli:raw="Returns a string representation of the current generic type parameter.">Restituisce una rappresentazione di stringa del parametro di tipo generico corrente.</summary>
      <returns vsli:raw="A string that contains the name of the generic type parameter.">Stringa contenente il nome del parametro di tipo generico.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</summary>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType">
      <summary vsli:raw="Gets the current generic type parameter.">Ottiene il parametro di tipo generico corrente.</summary>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; object.">Oggetto <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> corrente.</returns>
    </member>
    <member name="T:System.Reflection.Emit.MethodBuilder">
      <summary vsli:raw="Defines and represents a method (or constructor) on a dynamic class.">Definisce e rappresenta un metodo (o costruttore) su una classe dinamica.</summary>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Attributes">
      <summary vsli:raw="Retrieves the attributes for this method.">Recupera gli attributi per il metodo.</summary>
      <returns vsli:raw="Read-only. Retrieves the &lt;see langword=&quot;MethodAttributes&quot; /&gt; for this method.">Sola lettura. Recupera l'oggetto <see langword="MethodAttributes" /> per il metodo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.CallingConvention">
      <summary vsli:raw="Returns the calling convention of the method.">Restituisce la convenzione di chiamata del metodo.</summary>
      <returns vsli:raw="Read-only. The calling convention of the method.">Sola lettura. Convenzione di chiamata del metodo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ContainsGenericParameters">
      <summary vsli:raw="Not supported for this type.">Non supportata per questo tipo.</summary>
      <returns vsli:raw="Not supported.">Non supportato.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The invoked method is not supported in the base class.">Il metodo richiamato non è supportato nella classe base.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.DeclaringType">
      <summary vsli:raw="Returns the type that declares this method.">Restituisce il tipo che dichiara il metodo.</summary>
      <returns vsli:raw="Read-only. The type that declares this method.">Sola lettura. Tipo che dichiara il metodo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
      <summary vsli:raw="Sets the number of generic type parameters for the current method, specifies their names, and returns an array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects that can be used to define their constraints.">Imposta il numero di parametri di tipo generico per il metodo corrente, con l'indicazione dei relativi nomi, e restituisce una matrice di oggetti <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> che possono essere utilizzati per impostare i vincoli.</summary>
      <param name="names" vsli:raw="An array of strings that represent the names of the generic type parameters.">Matrice di stringhe che rappresentano i nomi dei parametri di tipo generico.</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects representing the type parameters of the generic method.">Matrice di oggetti <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> che rappresentano i parametri di tipo del metodo generico.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Generic type parameters have already been defined for this method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method has been completed already.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)&quot; /&gt; method has been called for the current method.">I parametri di tipo generico sono già stati definiti per questo metodo.  
-oppure- 
Il metodo è stato già completato.  
-oppure- 
Il metodo <see cref="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)" /> è stato chiamato per il metodo corrente.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;names&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;names&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="names" /> è <see langword="null" />.  
-oppure- 
Un elemento di <paramref name="names" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;names&quot; /&gt; is an empty array.">
        <paramref name="names" /> è una matrice vuota.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary vsli:raw="Sets the parameter attributes and the name of a parameter of this method, or of the return value of this method. Returns a ParameterBuilder that can be used to apply custom attributes.">Imposta gli attributi del parametro e il nome di un parametro di questo metodo oppure del valore restituito di questo metodo. Restituisce un oggetto ParameterBuilder che può essere usato per applicare attributi personalizzati.</summary>
      <param name="position" vsli:raw="The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter; the number 0 represents the return value of the method.">Posizione del parametro nell'elenco dei parametri. I parametri vengono indicizzati a partire dal numero 1 per il primo parametro. Il numero 0 rappresenta il valore restituito del metodo.</param>
      <param name="attributes" vsli:raw="The parameter attributes of the parameter.">Attributi del parametro.</param>
      <param name="strParamName" vsli:raw="The name of the parameter. The name can be the null string.">Nome del parametro. Il nome può essere rappresentato dalla stringa null.</param>
      <returns vsli:raw="Returns a &lt;see langword=&quot;ParameterBuilder&quot; /&gt; object that represents a parameter of this method or the return value of this method.">Restituisce un oggetto <see langword="ParameterBuilder" /> che rappresenta un parametro o il valore restituito di questo metodo.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The method has no parameters.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;position&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;position&quot; /&gt; is greater than the number of the method's parameters.">Il metodo non ha parametri.  
-oppure- 
 <paramref name="position" /> è minore di zero.  
-oppure- 
 <paramref name="position" /> è maggiore del numero dei parametri del metodo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Il tipo contenitore è stato creato in precedenza con <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  
-oppure- 
Per il metodo corrente la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> è <see langword="true" />, ma la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Equals(System.Object)">
      <summary vsli:raw="Determines whether the given object is equal to this instance.">Determina se l'oggetto indicato è uguale all'istanza.</summary>
      <param name="obj" vsli:raw="The object to compare with this &lt;see langword=&quot;MethodBuilder&quot; /&gt; instance.">Oggetto da confrontare con l'istanza di <see langword="MethodBuilder" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see langword=&quot;MethodBuilder&quot; /&gt; and is equal to this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="obj" /> è un'istanza di <see langword="MethodBuilder" /> ed è uguale all'oggetto, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetBaseDefinition">
      <summary vsli:raw="Return the base implementation for a method.">Restituisce l'implementazione di base per un metodo.</summary>
      <returns vsli:raw="The base implementation of this method.">Implementazione di base di questo metodo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this method.">Restituisce tutti gli attributi personalizzati definiti per il metodo.</summary>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the custom attributes.">Specifica se effettuare una ricerca nella catena di ereditarietà di questo membro per trovare gli attributi personalizzati.</param>
      <returns vsli:raw="Returns an array of objects representing all the custom attributes of this method.">Restituisce una matrice di oggetti che rappresenta tutti gli attributi personalizzati del metodo.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">Questo metodo non è attualmente supportato. Recuperare il metodo utilizzando il metodo <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> e chiamare il metodo <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> sull'oggetto <see cref="T:System.Reflection.MethodInfo" /> restituito.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns the custom attributes identified by the given type.">Restituisce gli attributi personalizzati identificati dal tipo dato.</summary>
      <param name="attributeType" vsli:raw="The custom attribute type.">Tipo di attributo personalizzato.</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the custom attributes.">Specifica se effettuare una ricerca nella catena di ereditarietà di questo membro per trovare gli attributi personalizzati.</param>
      <returns vsli:raw="Returns an array of objects representing the attributes of this method that are of type &lt;paramref name=&quot;attributeType&quot; /&gt;.">Restituisce una matrice di oggetti che rappresenta gli attributi del metodo di tipo <paramref name="attributeType" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">Questo metodo non è attualmente supportato. Recuperare il metodo utilizzando il metodo <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> e chiamare il metodo <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> sull'oggetto <see cref="T:System.Reflection.MethodInfo" /> restituito.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetGenericArguments">
      <summary vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects that represent the type parameters of the method, if it is generic.">Restituisce una matrice di oggetti <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> che rappresentano i parametri di tipo del metodo, se il metodo è generico.</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects representing the type parameters, if the method is generic, or &lt;see langword=&quot;null&quot; /&gt; if the method is not generic.">Matrice di oggetti <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> che rappresentano i parametri di tipo, se il metodo è generico, o <see langword="null" /> se il metodo non è generico.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition">
      <summary vsli:raw="Returns this method.">Restituisce il metodo.</summary>
      <returns vsli:raw="The current instance of &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt;.">Istanza corrente della classe <see cref="T:System.Reflection.Emit.MethodBuilder" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current method is not generic. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property returns &lt;see langword=&quot;false&quot; /&gt;.">Il metodo corrente non è generico, Quindi la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> restituisce <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetHashCode">
      <summary vsli:raw="Gets the hash code for this method.">Ottiene il codice hash per il metodo.</summary>
      <returns vsli:raw="The hash code for this method.">Codice hash per il metodo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator">
      <summary vsli:raw="Returns an &lt;see langword=&quot;ILGenerator&quot; /&gt; for this method with a default Microsoft intermediate language (MSIL) stream size of 64 bytes.">Restituisce un oggetto <see langword="ILGenerator" /> per il metodo con una dimensione di flusso MSIL (Microsoft Intermediate Language) predefinita di 64 byte.</summary>
      <returns vsli:raw="Returns an &lt;see langword=&quot;ILGenerator&quot; /&gt; object for this method.">Restituisce un oggetto <see langword="ILGenerator" /> per il metodo.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The method should not have a body because of its &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.MethodImplAttributes&quot; /&gt; flags, for example because it has the &lt;see cref=&quot;F:System.Reflection.MethodAttributes.PinvokeImpl&quot; /&gt; flag.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is a generic method, but not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Questo metodo non ha un corpo a causa dei flag <see cref="T:System.Reflection.MethodAttributes" /> o <see cref="T:System.Reflection.MethodImplAttributes" />, ad esempio perché contiene il flag <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" />.  
-oppure- 
Il metodo è un metodo generico ma non una definizione di metodo generica. In altre parole, la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> è <see langword="true" />, ma la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)">
      <summary vsli:raw="Returns an &lt;see langword=&quot;ILGenerator&quot; /&gt; for this method with the specified Microsoft intermediate language (MSIL) stream size.">Restituisce un oggetto <see langword="ILGenerator" /> per il metodo con la dimensione di flusso MSIL specificata.</summary>
      <param name="size" vsli:raw="The size of the MSIL stream, in bytes.">Dimensione del flusso MSIL in byte.</param>
      <returns vsli:raw="Returns an &lt;see langword=&quot;ILGenerator&quot; /&gt; object for this method.">Restituisce un oggetto <see langword="ILGenerator" /> per il metodo.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The method should not have a body because of its &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.MethodImplAttributes&quot; /&gt; flags, for example because it has the &lt;see cref=&quot;F:System.Reflection.MethodAttributes.PinvokeImpl&quot; /&gt; flag.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is a generic method, but not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Questo metodo non ha un corpo a causa dei flag <see cref="T:System.Reflection.MethodAttributes" /> o <see cref="T:System.Reflection.MethodImplAttributes" />, ad esempio perché contiene il flag <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" />.  
In alternativa 
Il metodo è un metodo generico ma non una definizione di metodo generica. In altre parole, la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> è <see langword="true" />, ma la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags">
      <summary vsli:raw="Returns the implementation flags for the method.">Restituisce i flag di implementazione per il metodo.</summary>
      <returns vsli:raw="Returns the implementation flags for the method.">Restituisce i flag di implementazione per il metodo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetParameters">
      <summary vsli:raw="Returns the parameters of this method.">Restituisce i parametri del metodo.</summary>
      <returns vsli:raw="An array of &lt;see langword=&quot;ParameterInfo&quot; /&gt; objects that represent the parameters of the method.">Matrice di oggetti <see langword="ParameterInfo" /> che rappresenta i parametri del metodo.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see langword=&quot;GetParameters&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">Questo metodo non è attualmente supportato. Recuperare il metodo utilizzando il metodo <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> e chiamare il metodo <see langword="GetParameters" /> sull'oggetto <see cref="T:System.Reflection.MethodInfo" /> restituito.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.InitLocals">
      <summary vsli:raw="Gets or sets a Boolean value that specifies whether the local variables in this method are zero initialized. The default value of this property is &lt;see langword=&quot;true&quot; /&gt;.">Ottiene o imposta un valore booleano che indica se le variabili locali all'interno del metodo sono inizializzate su zero. Il valore predefinito di questa proprietà è <see langword="true" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the local variables in this method should be zero initialized; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se le variabili locali all'interno del metodo sono inizializzate su zero; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;. (Get or set.)">Per il metodo corrente la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> è <see langword="true" />, ma la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> è <see langword="false" />. (ottenuta o impostata).</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Dynamically invokes the method reflected by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.">Richiama dinamicamente il metodo ottenuto mediante reflection dall'istanza sull'oggetto indicato, passando i parametri specificati e con i vincoli del gestore di associazione indicato.</summary>
      <param name="obj" vsli:raw="The object on which to invoke the specified method. If the method is static, this parameter is ignored.">Oggetto su cui richiamare il metodo specificato. Se il metodo è statico, il parametro verrà ignorato.</param>
      <param name="invokeAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />: <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If binder is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used. For more details, see &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt;.">Oggetto che consente l'associazione, la coercizione dei tipi, la chiamata dei membri e il recupero di oggetti MemberInfo tramite reflection. Se il binder è <see langword="null" />, viene usato quello predefinito. Per informazioni dettagliate, vedere <see cref="T:System.Reflection.Binder" />.</param>
      <param name="parameters" vsli:raw="An argument list. This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked. If there are no parameters this should be &lt;see langword=&quot;null&quot; /&gt;.">Elenco di argomenti. Si tratta di una matrice di argomenti con lo stesso numero, ordine e tipo dei parametri del metodo da richiamare. In assenza di parametri, deve essere <see langword="null" />.</param>
      <param name="culture" vsli:raw="An instance of &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; for the current thread is used. (Note that this is necessary to, for example, convert a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents 1000 to a &lt;see cref=&quot;T:System.Double&quot; /&gt; value, since 1000 is represented differently by different cultures.)">Istanza di <see cref="T:System.Globalization.CultureInfo" /> usata per regolare la coercizione dei tipi. Se tale parametro è Null, verrà usato l'oggetto <see cref="T:System.Globalization.CultureInfo" /> per il thread corrente. Questo è necessario, ad esempio, per convertire un valore <see cref="T:System.String" /> che rappresenta 1000 in un valore <see cref="T:System.Double" />, poiché 1000 viene rappresentato in modo diverso dalle diverse impostazioni cultura.</param>
      <returns vsli:raw="Returns an object containing the return value of the invoked method.">Restituisce un oggetto contenente il valore restituito del metodo richiamato.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">Questo metodo non è attualmente supportato. Recuperare il metodo utilizzando il metodo <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> e chiamare il metodo <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> sull'oggetto <see cref="T:System.Reflection.MethodInfo" /> restituito.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsConstructedGenericMethod" />
    <member name="M:System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Checks if the specified custom attribute type is defined.">Controlla se è definito il tipo di attributo personalizzato specificato.</summary>
      <param name="attributeType" vsli:raw="The custom attribute type.">Tipo di attributo personalizzato.</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the custom attributes.">Specifica se effettuare una ricerca nella catena di ereditarietà di questo membro per trovare gli attributi personalizzati.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified custom attribute type is defined; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se è definito il tipo di attributo personalizzato specificato; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">Questo metodo non è attualmente supportato. Recuperare il metodo utilizzando il metodo <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> e chiamare il metodo <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> sull'oggetto <see cref="T:System.Reflection.MethodInfo" /> restituito.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod">
      <summary vsli:raw="Gets a value indicating whether the method is a generic method.">Ottiene un valore che indica se il metodo è un metodo generico.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is generic; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il metodo è generico; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition">
      <summary vsli:raw="Gets a value indicating whether the current &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; object represents the definition of a generic method.">Ottiene un valore che indica se l'oggetto <see cref="T:System.Reflection.Emit.MethodBuilder" /> corrente rappresenta la definizione di un metodo generico.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; object represents the definition of a generic method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto <see cref="T:System.Reflection.Emit.MethodBuilder" /> corrente rappresenta la definizione di un metodo generico; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecurityCritical">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <returns vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases. This property is not supported in dynamic assemblies.">In tutti i casi. Questa proprietà non è supportata negli assembly dinamici.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <returns vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases. This property is not supported in dynamic assemblies.">In tutti i casi. Questa proprietà non è supportata negli assembly dinamici.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecurityTransparent">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <returns vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases. This property is not supported in dynamic assemblies.">In tutti i casi. Questa proprietà non è supportata negli assembly dinamici.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])">
      <summary vsli:raw="Returns a generic method constructed from the current generic method definition using the specified generic type arguments.">Restituisce un metodo generico costruito dalla definizione di metodo generica corrente tramite gli argomenti di tipo generico specificati.</summary>
      <param name="typeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects that represent the type arguments for the generic method.">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano gli argomenti di tipo del metodo generico.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; representing the generic method constructed from the current generic method definition using the specified generic type arguments.">Classe <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo generico costruito dalla definizione di metodo generica corrente tramite gli argomenti di tipo generico specificati.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.MethodHandle">
      <summary vsli:raw="Retrieves the internal handle for the method. Use this handle to access the underlying metadata handle.">Recupera l'handle interno per il metodo. Utilizzare questo handle per accedere all'handle dei metadati sottostante.</summary>
      <returns vsli:raw="Read-only. The internal handle for the method. Use this handle to access the underlying metadata handle.">Sola lettura. Handle interno per il metodo. Utilizzare questo handle per accedere all'handle dei metadati sottostante.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;P:System.Reflection.MethodBase.MethodHandle&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">Questo metodo non è attualmente supportato. Recuperare il metodo utilizzando il metodo <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> e chiamare il metodo <see cref="P:System.Reflection.MethodBase.MethodHandle" /> sull'oggetto <see cref="T:System.Reflection.MethodInfo" /> restituito.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Module">
      <summary vsli:raw="Gets the module in which the current method is being defined.">Ottiene il modulo in cui viene definito il metodo corrente.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; in which the member represented by the current &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; is being defined.">Classe <see cref="T:System.Reflection.Module" /> in cui viene definito il membro rappresentato dalla classe <see cref="T:System.Reflection.MemberInfo" /> corrente.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Name">
      <summary vsli:raw="Retrieves the name of this method.">Recupera il nome del metodo.</summary>
      <returns vsli:raw="Read-only. Retrieves a string containing the simple name of this method.">Sola lettura. Recupera una stringa contenente il nome semplice del metodo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReflectedType">
      <summary vsli:raw="Retrieves the class that was used in reflection to obtain this object.">Recupera la classe utilizzata nella reflection per ottenere l'oggetto.</summary>
      <returns vsli:raw="Read-only. The type used to obtain this method.">Sola lettura. Tipo utilizzato per ottenere il metodo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnParameter">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.ParameterInfo&quot; /&gt; object that contains information about the return type of the method, such as whether the return type has custom modifiers.">Ottiene un oggetto <see cref="T:System.Reflection.ParameterInfo" /> contenente informazioni sul tipo restituito dal metodo, ad esempio se il tipo restituito contiene modificatori personalizzati.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.ParameterInfo&quot; /&gt; object that contains information about the return type.">Oggetto <see cref="T:System.Reflection.ParameterInfo" /> contenente informazioni relative al tipo restituito.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The declaring type has not been created.">Il tipo di dichiarazione non è stato creato.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnType">
      <summary vsli:raw="Gets the return type of the method represented by this &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt;.">Ottiene il tipo restituito dal metodo rappresentato da questo oggetto <see cref="T:System.Reflection.Emit.MethodBuilder" />.</summary>
      <returns vsli:raw="The return type of the method.">Tipo restituito del metodo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes">
      <summary vsli:raw="Returns the custom attributes of the method's return type.">Restituisce gli attributi personalizzati del tipo restituito del metodo.</summary>
      <returns vsli:raw="Read-only. The custom attributes of the method's return type.">Sola lettura. Attributi personalizzati del tipo restituito del metodo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">Imposta un attributo personalizzato usando un BLOB di attributi personalizzati specificato.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Costruttore dell'attributo personalizzato.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">BLOB di byte che rappresenta gli attributi.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> o <paramref name="binaryAttribute" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Per il metodo corrente la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> è <see langword="true" />, ma la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Sets a custom attribute using a custom attribute builder.">Imposta un attributo personalizzato utilizzando un generatore di attributi personalizzato.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to describe the custom attribute.">Istanza di una classe di supporto per definire l'attributo personalizzato.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Per il metodo corrente la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> è <see langword="true" />, ma la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
      <summary vsli:raw="Sets the implementation flags for this method.">Imposta i flag di implementazione per il metodo.</summary>
      <param name="attributes" vsli:raw="The implementation flags to set.">Flag di implementazione da impostare.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Il tipo contenitore è stato creato in precedenza con <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  
In alternativa 
Per il metodo corrente la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> è <see langword="true" />, ma la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])">
      <summary vsli:raw="Sets the number and types of parameters for a method.">Imposta il numero e i tipi di parametri di un metodo.</summary>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the parameter types.">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano i tipi di parametro.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current method is generic, but is not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Il metodo corrente è un metodo generico ma non una definizione di metodo generica. In altre parole, la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> è <see langword="true" />, ma la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)">
      <summary vsli:raw="Sets the return type of the method.">Imposta il tipo restituito del metodo.</summary>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the return type of the method.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo restituito del metodo.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current method is generic, but is not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Il metodo corrente è un metodo generico ma non una definizione di metodo generica. In altre parole, la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> è <see langword="true" />, ma la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Sets the method signature, including the return type, the parameter types, and the required and optional custom modifiers of the return type and parameter types.">Imposta la firma del metodo, incluso il tipo restituito, i tipi di parametro e i modificatori personalizzati obbligatori e facoltativi del tipo restituito e dei tipi di parametro.</summary>
      <param name="returnType" vsli:raw="The return type of the method.">Tipo restituito del metodo.</param>
      <param name="returnTypeRequiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the method. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Matrice di tipi che rappresenta i modificatori personalizzati obbligatori, come <see cref="T:System.Runtime.CompilerServices.IsConst" />, per il tipo restituito del metodo. Se il tipo restituito non ha modificatori personalizzati obbligatori, specificare <see langword="null" />.</param>
      <param name="returnTypeOptionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the method. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Matrice di tipi che rappresenta i modificatori personalizzati facoltativi, come <see cref="T:System.Runtime.CompilerServices.IsConst" />, per il tipo restituito del metodo. Se il tipo restituito non ha modificatori personalizzati facoltativi, specificare <see langword="null" />.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the method.">Tipi dei parametri del metodo.</param>
      <param name="parameterTypeRequiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Matrice di matrici di tipi. Ogni matrice di tipi rappresenta i modificatori personalizzati obbligatori per il parametro corrispondente, come <see cref="T:System.Runtime.CompilerServices.IsConst" />. Se un parametro particolare non ha modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di tipi. Se nessun parametro ha modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <param name="parameterTypeOptionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Matrice di matrici di tipi. Ogni matrice di tipi rappresenta i modificatori personalizzati facoltativi per il parametro corrispondente, come <see cref="T:System.Runtime.CompilerServices.IsConst" />. Se un parametro particolare non ha modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di tipi. Se nessun parametro ha modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current method is generic, but is not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Il metodo corrente è un metodo generico ma non una definizione di metodo generica. In altre parole, la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> è <see langword="true" />, ma la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.ToString">
      <summary vsli:raw="Returns this &lt;see langword=&quot;MethodBuilder&quot; /&gt; instance as a string.">Restituisce l'istanza dell'oggetto <see langword="MethodBuilder" /> in forma di stringa.</summary>
      <returns vsli:raw="Returns a string containing the name, attributes, method signature, exceptions, and local signature of this method followed by the current Microsoft intermediate language (MSIL) stream.">Restituisce una stringa contenente il nome, gli attributi, la firma, le eccezioni e la firma locale del metodo, seguiti dal flusso MSIL (Microsoft Intermediate Language) corrente.</returns>
    </member>
    <member name="T:System.Reflection.Emit.ModuleBuilder">
      <summary vsli:raw="Defines and represents a module in a dynamic assembly.">Definisce e rappresenta un modulo in un assembly dinamico.</summary>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.Assembly">
      <summary vsli:raw="Gets the dynamic assembly that defined this instance of &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">Ottiene l'assembly dinamico che ha definito questa istanza di <see cref="T:System.Reflection.Emit.ModuleBuilder" />.</summary>
      <returns vsli:raw="The dynamic assembly that defined the current dynamic module.">Assembly dinamico che ha definito il modulo dinamico corrente.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions">
      <summary vsli:raw="Completes the global function definitions and global data definitions for this dynamic module.">Completa le definizioni delle funzioni globali e quelle dei dati globali per il modulo dinamico.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This method was called previously.">Il metodo è stato chiamato in precedenza.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary vsli:raw="Defines an enumeration type that is a value type with a single non-static field called &lt;paramref name=&quot;value__&quot; /&gt; of the specified type.">Definisce un tipo di enumerazione, ovvero un tipo di valore con un solo campo non statico denominato <paramref name="value__" /> del tipo specificato.</summary>
      <param name="name" vsli:raw="The full path of the enumeration type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Percorso completo del tipo di enumerazione. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="visibility" vsli:raw="The type attributes for the enumeration. The attributes are any bits defined by &lt;see cref=&quot;F:System.Reflection.TypeAttributes.VisibilityMask&quot; /&gt;.">Attributi del tipo per l'enumerazione. Gli attributi sono definiti per singolo bit dal campo <see cref="F:System.Reflection.TypeAttributes.VisibilityMask" />.</param>
      <param name="underlyingType" vsli:raw="The underlying type for the enumeration. This must be a built-in integer type.">Tipo sottostante per l'enumerazione. Deve essere un tipo Integer incorporato.</param>
      <returns vsli:raw="The defined enumeration.">Enumerazione definita.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Attributes other than visibility attributes are provided.  &#xA;  &#xA; -or-  &#xA;  &#xA; An enumeration with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; The visibility attributes do not match the scope of the enumeration. For example, &lt;see cref=&quot;F:System.Reflection.TypeAttributes.NestedPublic&quot; /&gt; is specified for &lt;paramref name=&quot;visibility&quot; /&gt;, but the enumeration is not a nested type.">Sono forniti gli attributi che non siano di visibilità.  
-oppure- 
Nell'assembly padre del modulo è presente un'enumerazione con il nome indicato.  
-oppure- 
Gli attributi di visibilità non corrispondono all'ambito dell'enumerazione. Ad esempio, <see cref="F:System.Reflection.TypeAttributes.NestedPublic" /> viene specificato per <paramref name="visibility" />, ma l'enumerazione non è un tipo annidato.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary vsli:raw="Defines a global method with the specified name, attributes, calling convention, return type, and parameter types.">Definisce un metodo globale con il nome, gli attributi, la convenzione di chiamata, il tipo restituito e i tipi di parametri specificati.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nome del metodo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attributes" vsli:raw="The attributes of the method. &lt;paramref name=&quot;attributes&quot; /&gt; must include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.">Attributi del metodo. Il parametro <paramref name="attributes" /> deve includere il campo <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention" vsli:raw="The calling convention for the method.">Convenzione di chiamata del metodo.</param>
      <param name="returnType" vsli:raw="The return type of the method.">Tipo restituito del metodo.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">Tipi dei parametri del metodo.</param>
      <returns vsli:raw="The defined global method.">Metodo globale definito.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static. That is, &lt;paramref name=&quot;attributes&quot; /&gt; does not include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element in the &lt;see cref=&quot;T:System.Type&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">Il metodo non è statico. In altre parole, <paramref name="attributes" /> non include <see cref="F:System.Reflection.MethodAttributes.Static" />.  
-oppure- 
Un elemento nella matrice <see cref="T:System.Type" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; has been previously called.">L'oggetto <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> è stato chiamato in precedenza.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Defines a global method with the specified name, attributes, calling convention, return type, custom modifiers for the return type, parameter types, and custom modifiers for the parameter types.">Definisce un metodo globale con il nome, gli attributi, la convenzione di chiamata, il tipo restituito, i modificatori personalizzati per il tipo restituito, i tipi di parametri e i modificatori personalizzati per i tipi di parametri specificati.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded null characters.">Nome del metodo. <paramref name="name" /> non può contenere caratteri null incorporati.</param>
      <param name="attributes" vsli:raw="The attributes of the method. &lt;paramref name=&quot;attributes&quot; /&gt; must include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.">Attributi del metodo. Il parametro <paramref name="attributes" /> deve includere il campo <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention" vsli:raw="The calling convention for the method.">Convenzione di chiamata del metodo.</param>
      <param name="returnType" vsli:raw="The return type of the method.">Tipo restituito del metodo.</param>
      <param name="requiredReturnTypeCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Matrice di tipi che rappresentano i modificatori personalizzati obbligatori per il tipo restituito, come <see cref="T:System.Runtime.CompilerServices.IsConst" /> o <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Se il tipo restituito non ha modificatori personalizzati obbligatori, specificare <see langword="null" />.</param>
      <param name="optionalReturnTypeCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Matrice di tipi che rappresentano i modificatori personalizzati opzionali per il tipo restituito, come <see cref="T:System.Runtime.CompilerServices.IsConst" /> o <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Se il tipo restituito non ha modificatori personalizzati facoltativi, specificare <see langword="null" />.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">Tipi dei parametri del metodo.</param>
      <param name="requiredParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter of the global method. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the global method has no arguments, or if none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Matrice di matrici di tipi. Ciascuna matrice di tipi rappresenta i modificatori personalizzati obbligatori per il parametro corrispondente del metodo globale. Se un determinato argomento non dispone di modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di tipi. Se il metodo globale non dispone di argomenti oppure se nessun argomento dispone di modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <param name="optionalParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the global method has no arguments, or if none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Matrice di matrici di tipi. Ciascuna matrice di tipi rappresenta i modificatori personalizzati opzionali per il parametro corrispondente. Se un determinato argomento non dispone di modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di tipi. Se il metodo globale non dispone di argomenti oppure se nessun argomento dispone di modificatori personalizzati opzionali, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <returns vsli:raw="The defined global method.">Metodo globale definito.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static. That is, &lt;paramref name=&quot;attributes&quot; /&gt; does not include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element in the &lt;see cref=&quot;T:System.Type&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">Il metodo non è statico. In altre parole, <paramref name="attributes" /> non include <see cref="F:System.Reflection.MethodAttributes.Static" />.  
-oppure- 
Un elemento nella matrice <see cref="T:System.Type" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; method has been previously called.">Il metodo <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> è già stato chiamato in precedenza.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Defines a global method with the specified name, attributes, return type, and parameter types.">Definisce un metodo globale con il nome, gli attributi, il tipo restituito e i tipi di parametri specificati.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nome del metodo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attributes" vsli:raw="The attributes of the method. &lt;paramref name=&quot;attributes&quot; /&gt; must include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.">Attributi del metodo. Il parametro <paramref name="attributes" /> deve includere il campo <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="returnType" vsli:raw="The return type of the method.">Tipo restituito del metodo.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">Tipi dei parametri del metodo.</param>
      <returns vsli:raw="The defined global method.">Metodo globale definito.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static. That is, &lt;paramref name=&quot;attributes&quot; /&gt; does not include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero  &#xA;  &#xA; -or-  &#xA;  &#xA; An element in the &lt;see cref=&quot;T:System.Type&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">Il metodo non è statico. In altre parole, <paramref name="attributes" /> non include <see cref="F:System.Reflection.MethodAttributes.Static" />.  
-oppure- 
La lunghezza di <paramref name="name" /> è zero. 
-oppure- 
Un elemento nella matrice <see cref="T:System.Type" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; has been previously called.">L'oggetto <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> è stato chiamato in precedenza.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
      <summary vsli:raw="Defines an initialized data field in the .sdata section of the portable executable (PE) file.">Definisce un campo di dati inizializzati nella sezione .sdata del file PE (Portable Executable).</summary>
      <param name="name" vsli:raw="The name used to refer to the data. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nome usato per fare riferimento ai dati. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="data" vsli:raw="The binary large object (BLOB) of data.">Oggetto binario di grandi dimensioni (BLOB) di dati.</param>
      <param name="attributes" vsli:raw="The attributes for the field. The default is &lt;see langword=&quot;Static&quot; /&gt;.">Attributi per il campo. Il valore predefinito è <see langword="Static" />.</param>
      <returns vsli:raw="A field to reference the data.">Campo di riferimento ai dati.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;data&quot; /&gt; is less than or equal to zero or greater than or equal to 0x3f0000.">La lunghezza di <paramref name="name" /> è zero.  
-oppure- 
Le dimensioni dei <paramref name="data" /> sono minori di o uguali a zero oppure maggiori di o uguali a 0x3f0000.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;data&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> o <paramref name="data" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; has been previously called.">L'oggetto <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> è stato chiamato in precedenza.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Defines a &lt;see langword=&quot;PInvoke&quot; /&gt; method with the specified name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the &lt;see langword=&quot;PInvoke&quot; /&gt; flags.">Definisce un metodo <see langword="PInvoke" />, con il nome, il nome del file DLL nel quale viene definito il metodo, gli attributi, la convenzione di chiamata, il tipo restituito, i tipi di parametri e i flag <see langword="PInvoke" /> del metodo specificati.</summary>
      <param name="name" vsli:raw="The name of the &lt;see langword=&quot;PInvoke&quot; /&gt; method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nome del metodo <see langword="PInvoke" />. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="dllName" vsli:raw="The name of the DLL in which the &lt;see langword=&quot;PInvoke&quot; /&gt; method is defined.">Nome della DLL in cui è definito il metodo <see langword="PInvoke" />.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">Attributi del metodo.</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">Convenzione di chiamata del metodo.</param>
      <param name="returnType" vsli:raw="The method's return type.">Tipo restituito del metodo.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">Tipi dei parametri del metodo.</param>
      <param name="nativeCallConv" vsli:raw="The native calling convention.">Convenzione di chiamata nativa.</param>
      <param name="nativeCharSet" vsli:raw="The method's native character set.">Set di caratteri nativo del metodo.</param>
      <returns vsli:raw="The defined &lt;see langword=&quot;PInvoke&quot; /&gt; method.">Metodo <see langword="PInvoke" /> definito.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static or if the containing type is an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is abstract.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method was previously defined.">Il metodo non è statico o il tipo che lo contiene è un'interfaccia.  
 -oppure-  
 Il metodo è di tipo abstract.  
 In alternativa  
 Il metodo è stato definito in precedenza.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;dllName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> o <paramref name="dllName" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;">Il tipo che lo contiene è stato creato in precedenza utilizzando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Defines a &lt;see langword=&quot;PInvoke&quot; /&gt; method with the specified name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the &lt;see langword=&quot;PInvoke&quot; /&gt; flags.">Definisce un metodo <see langword="PInvoke" />, con il nome, il nome del file DLL nel quale viene definito il metodo, gli attributi, la convenzione di chiamata, il tipo restituito, i tipi di parametri e i flag <see langword="PInvoke" /> del metodo specificati.</summary>
      <param name="name" vsli:raw="The name of the &lt;see langword=&quot;PInvoke&quot; /&gt; method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nome del metodo <see langword="PInvoke" />. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="dllName" vsli:raw="The name of the DLL in which the &lt;see langword=&quot;PInvoke&quot; /&gt; method is defined.">Nome della DLL in cui è definito il metodo <see langword="PInvoke" />.</param>
      <param name="entryName" vsli:raw="The name of the entry point in the DLL.">Nome del punto di ingresso nella DLL.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">Attributi del metodo.</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">Convenzione di chiamata del metodo.</param>
      <param name="returnType" vsli:raw="The method's return type.">Tipo restituito del metodo.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">Tipi dei parametri del metodo.</param>
      <param name="nativeCallConv" vsli:raw="The native calling convention.">Convenzione di chiamata nativa.</param>
      <param name="nativeCharSet" vsli:raw="The method's native character set.">Set di caratteri nativo del metodo.</param>
      <returns vsli:raw="The defined &lt;see langword=&quot;PInvoke&quot; /&gt; method.">Metodo <see langword="PInvoke" /> definito.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static or if the containing type is an interface or if the method is abstract of if the method was previously defined.">Il metodo non è statico oppure il tipo che lo contiene è un'interfaccia oppure il metodo è astratto oppure il metodo è stato definito in precedenza.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;dllName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> o <paramref name="dllName" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;">Il tipo che lo contiene è stato creato in precedenza utilizzando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; for a private type with the specified name in this module.">Costruisce un oggetto <see langword="TypeBuilder" /> per un tipo privato con il nome specificato in questo modulo.</summary>
      <param name="name" vsli:raw="The full path of the type, including the namespace. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Percorso completo del tipo, incluso lo spazio dei nomi. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <returns vsli:raw="A private type with the specified name.">Tipo privato con il nome specificato.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">Nell'assembly padre del modulo esiste un tipo con il nome indicato.  
 -oppure-  
 Gli attributi di tipi annidati sono impostati su un tipo non annidato.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name and the type attributes.">Costruisce un oggetto <see langword="TypeBuilder" />, dati il nome e gli attributi del tipo.</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Percorso completo del tipo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attr" vsli:raw="The attributes of the defined type.">Attributi del tipo definito.</param>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; created with all of the requested attributes.">
        <see langword="TypeBuilder" /> creato con tutti gli attributi richiesti.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">Nell'assembly padre del modulo esiste un tipo con il nome indicato.  
 In alternativa  
 Gli attributi di tipi annidati sono impostati su un tipo non annidato.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given type name, its attributes, and the type that the defined type extends.">Costruisce un oggetto <see langword="TypeBuilder" />, dati il nome del tipo, i relativi attributi e il tipo esteso dal tipo definito.</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Percorso completo del tipo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attr" vsli:raw="The attribute to be associated with the type.">Attributo da associare al tipo.</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">Tipo esteso dal tipo definito.</param>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; created with all of the requested attributes.">
        <see langword="TypeBuilder" /> creato con tutti gli attributi richiesti.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">Nell'assembly padre del modulo esiste un tipo con il nome indicato.  
 -oppure-  
 Gli attributi di tipi annidati sono impostati su un tipo non annidato.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name, the attributes, the type that the defined type extends, and the total size of the type.">Costruisce un oggetto <see langword="TypeBuilder" />, dati il nome del tipo, gli attributi, il tipo esteso dal tipo definito e la dimensione totale del tipo.</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Percorso completo del tipo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attr" vsli:raw="The attributes of the defined type.">Attributi del tipo definito.</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">Tipo esteso dal tipo definito.</param>
      <param name="typesize" vsli:raw="The total size of the type.">Dimensione totale del tipo.</param>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; object.">Oggetto <see langword="TypeBuilder" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">Nell'assembly padre del modulo esiste un tipo con il nome indicato.  
 -oppure-  
 Gli attributi di tipi annidati sono impostati su un tipo non annidato.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name, the attributes, the type that the defined type extends, and the packing size of the type.">Costruisce un oggetto <see langword="TypeBuilder" />, dati il nome del tipo, gli attributi, il tipo esteso dal tipo definito e la dimensione del tipo compresso.</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Percorso completo del tipo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attr" vsli:raw="The attributes of the defined type.">Attributi del tipo definito.</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">Tipo esteso dal tipo definito.</param>
      <param name="packsize" vsli:raw="The packing size of the type.">Dimensione di compressione del tipo.</param>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; object.">Oggetto <see langword="TypeBuilder" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">Nell'assembly padre del modulo esiste un tipo con il nome indicato.  
 -oppure-  
 Gli attributi di tipi annidati sono impostati su un tipo non annidato.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name, attributes, the type that the defined type extends, the packing size of the defined type, and the total size of the defined type.">Costruisce un oggetto <see langword="TypeBuilder" />, dati il nome del tipo, gli attributi, il tipo esteso dal tipo definito e la relativa dimensione compressa e totale.</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Percorso completo del tipo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attr" vsli:raw="The attributes of the defined type.">Attributi del tipo definito.</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">Tipo esteso dal tipo definito.</param>
      <param name="packingSize" vsli:raw="The packing size of the type.">Dimensione di compressione del tipo.</param>
      <param name="typesize" vsli:raw="The total size of the type.">Dimensione totale del tipo.</param>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; created with all of the requested attributes.">
        <see langword="TypeBuilder" /> creato con tutti gli attributi richiesti.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">Nell'assembly padre del modulo esiste un tipo con il nome indicato.  
 In alternativa  
 Gli attributi di tipi annidati sono impostati su un tipo non annidato.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name, attributes, the type that the defined type extends, and the interfaces that the defined type implements.">Costruisce un oggetto <see langword="TypeBuilder" />, dati il nome del tipo, gli attributi, il tipo esteso dal tipo definito e le interfacce da esso implementate.</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Percorso completo del tipo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attr" vsli:raw="The attributes to be associated with the type.">Attributi da associare al tipo.</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">Tipo esteso dal tipo definito.</param>
      <param name="interfaces" vsli:raw="The list of interfaces that the type implements.">Elenco delle interfacce implementate dal tipo.</param>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; created with all of the requested attributes.">
        <see langword="TypeBuilder" /> creato con tutti gli attributi richiesti.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">Nell'assembly padre del modulo esiste un tipo con il nome indicato.  
 In alternativa  
 Gli attributi di tipi annidati sono impostati su un tipo non annidato.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
      <summary vsli:raw="Defines an uninitialized data field in the .sdata section of the portable executable (PE) file.">Definisce un campo di dati non inizializzati nella sezione .sdata del file PE (Portable Executable).</summary>
      <param name="name" vsli:raw="The name used to refer to the data. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nome usato per fare riferimento ai dati. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="size" vsli:raw="The size of the data field.">Dimensione del campo dati.</param>
      <param name="attributes" vsli:raw="The attributes for the field.">Attributi per il campo.</param>
      <returns vsli:raw="A field to reference the data.">Campo di riferimento ai dati.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;size&quot; /&gt; is less than or equal to zero, or greater than or equal to 0x003f0000.">La lunghezza di <paramref name="name" /> è zero.  
-oppure- 
 <paramref name="size" /> è minore di o uguale a zero oppure maggiore di o uguale a 0x003f0000.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; has been previously called.">L'oggetto <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> è stato chiamato in precedenza.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to the specified object.">Restituisce un valore che indica se questa istanza è uguale all'oggetto specificato.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance, or &lt;see langword=&quot;null&quot; /&gt;.">Oggetto da confrontare con questa istanza o <see langword="null" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="obj" /> è uguale al tipo e al valore di questa istanza; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.FullyQualifiedName">
      <summary vsli:raw="Gets a &lt;see langword=&quot;String&quot; /&gt; representing the fully qualified name and path to this module.">Ottiene un oggetto <see langword="String" /> che rappresenta il nome e il percorso completi del modulo.</summary>
      <returns vsli:raw="The fully qualified module name.">Nome completo del modulo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary vsli:raw="Returns the named method on an array class.">Restituisce il metodo denominato su una classe di matrici.</summary>
      <param name="arrayClass" vsli:raw="An array class.">Classe di matrici.</param>
      <param name="methodName" vsli:raw="The name of a method on the array class.">Nome di un metodo sulla classe di matrici.</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">Convenzione di chiamata del metodo.</param>
      <param name="returnType" vsli:raw="The return type of the method.">Tipo restituito del metodo.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">Tipi dei parametri del metodo.</param>
      <returns vsli:raw="The named method on an array class.">Metodo denominato su una classe di matrici.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;arrayClass&quot; /&gt; is not an array.">
        <paramref name="arrayClass" /> non è una matrice.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;arrayClass&quot; /&gt; or &lt;paramref name=&quot;methodName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="arrayClass" /> o <paramref name="methodName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">Restituisce tutti gli attributi personalizzati applicati all'oggetto <see cref="T:System.Reflection.Emit.ModuleBuilder" /> corrente.</summary>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">Questo argomento viene ignorato per gli oggetti di questo tipo.</param>
      <returns vsli:raw="An array that contains the custom attributes; the array is empty if there are no attributes.">Matrice contenente gli attributi personalizzati; la matrice è vuota se non sono presenti attributi.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;, and that derive from a specified attribute type.">Restituisce tutti gli attributi personalizzati applicati all'oggetto <see cref="T:System.Reflection.Emit.ModuleBuilder" /> corrente e che derivano da un tipo di attributo specificato.</summary>
      <param name="attributeType" vsli:raw="The base type from which attributes derive.">Il tipo di base da cui derivano gli attributi.</param>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">Questo argomento viene ignorato per gli oggetti di questo tipo.</param>
      <returns vsli:raw="An array that contains the custom attributes that are derived, at any level, from &lt;paramref name=&quot;attributeType&quot; /&gt;; the array is empty if there are no such attributes.">Una matrice che contiene gli attributi personalizzati derivati, a qualsiasi livello, da <paramref name="attributeType" />; la matrice è vuota se non ci sono tali attributi.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is not a &lt;see cref=&quot;T:System.Type&quot; /&gt; object supplied by the runtime. For example, &lt;paramref name=&quot;attributeType&quot; /&gt; is a &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object.">
        <paramref name="attributeType" /> non è un oggetto <see cref="T:System.Type" /> fornito dal runtime. Ad esempio, <paramref name="attributeType" /> è un oggetto <see cref="T:System.Reflection.Emit.TypeBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributesData">
      <summary vsli:raw="Returns information about the attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;, expressed as &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects.">Restituisce informazioni sugli attributi applicati all'oggetto <see cref="T:System.Reflection.Emit.ModuleBuilder" /> corrente, espresse sotto forma di oggetti <see cref="T:System.Reflection.CustomAttributeData" />.</summary>
      <returns vsli:raw="A generic list of &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects representing data about the attributes that have been applied to the current module.">Elenco generico di oggetti <see cref="T:System.Reflection.CustomAttributeData" /> che rappresentano i dati relativi agli attributi applicati al modulo corrente.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns a module-level field, defined in the .sdata region of the portable executable (PE) file, that has the specified name and binding attributes.">Restituisce un campo del livello di modulo, definito nell'area .sdata del file eseguibile di tipo PE che dispone del nome specificato e degli attributi di associazione.</summary>
      <param name="name" vsli:raw="The field name.">Nome del campo.</param>
      <param name="bindingAttr" vsli:raw="A combination of the &lt;see langword=&quot;BindingFlags&quot; /&gt; bit flags used to control the search.">Combinazione dei flag di bit <see langword="BindingFlags" /> utilizzati per controllare la ricerca.</param>
      <returns vsli:raw="A field that has the specified name and binding attributes, or &lt;see langword=&quot;null&quot; /&gt; if the field does not exist.">Campo con il nome specificato e gli attributi di associazione, o <see langword="null" /> se il campo non esiste.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;name&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all fields defined in the .sdata region of the portable executable (PE) file that match the specified binding flags.">Restituisce tutti i campi definiti nell'area .sdata del file eseguibile di tipo PE che corrispondono ai flag di associazione specificati.</summary>
      <param name="bindingFlags" vsli:raw="A combination of the &lt;see langword=&quot;BindingFlags&quot; /&gt; bit flags used to control the search.">Combinazione dei flag di bit <see langword="BindingFlags" /> utilizzati per controllare la ricerca.</param>
      <returns vsli:raw="An array of fields that match the specified flags; the array is empty if no such fields exist.">Una matrice di campi che corrispondono ai flag specificati; la matrice è vuota se non esiste nessuno di questi campi.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;name&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Restituisce il codice hash per l'istanza.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Codice hash di un intero con segno a 32 bit.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the methods that have been defined at the module level for the current &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;, and that match the specified binding flags.">Restituisce tutti i metodi definiti al livello di modulo per l'oggetto <see cref="T:System.Reflection.Emit.ModuleBuilder" /> corrente, e corrispondenti ai flag di associazione specificati.</summary>
      <param name="bindingFlags" vsli:raw="A combination of &lt;see langword=&quot;BindingFlags&quot; /&gt; bit flags used to control the search.">Combinazione dei flag di bit <see langword="BindingFlags" /> utilizzati per controllare la ricerca.</param>
      <returns vsli:raw="An array that contains all the module-level methods that match &lt;paramref name=&quot;bindingFlags&quot; /&gt;.">Una matrice che contiene tutti i metodi a livello di modulo che corrispondono a <paramref name="bindingFlags" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)">
      <summary vsli:raw="Gets a pair of values indicating the nature of the code in a module and the platform targeted by the module.">Ottiene una coppia di valori che indica il tipo di codice in un modulo e la piattaforma di destinazione del modulo.</summary>
      <param name="peKind" vsli:raw="When this method returns, a combination of the &lt;see cref=&quot;T:System.Reflection.PortableExecutableKinds&quot; /&gt; values indicating the nature of the code in the module.">Quando termina, questo metodo contiene una combinazione di valori <see cref="T:System.Reflection.PortableExecutableKinds" /> che indica il tipo di codice nel modulo.</param>
      <param name="machine" vsli:raw="When this method returns, one of the &lt;see cref=&quot;T:System.Reflection.ImageFileMachine&quot; /&gt; values indicating the platform targeted by the module.">Quando termina, questo metodo contiene uno dei valori <see cref="T:System.Reflection.ImageFileMachine" /> che indica la piattaforma di destinazione del modulo.</param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String)">
      <summary vsli:raw="Gets the named type defined in the module.">Ottiene il tipo denominato definito nel modulo.</summary>
      <param name="className" vsli:raw="The name of the &lt;see cref=&quot;T:System.Type&quot; /&gt; to get.">Nome dell'oggetto <see cref="T:System.Type" /> da ottenere.</param>
      <returns vsli:raw="The requested type, if the type is defined in this module; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Tipo richiesto, se il tipo è definito in questo modulo; in caso contrario <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;className&quot; /&gt; is zero or is greater than 1023.">La lunghezza di <paramref name="className" /> è zero o maggiore di 1023.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;className&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="className" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The requested &lt;see cref=&quot;T:System.Type&quot; /&gt; is non-public and the caller does not have &lt;see cref=&quot;T:System.Security.Permissions.ReflectionPermission&quot; /&gt; to reflect non-public objects outside the current assembly.">L'oggetto <see cref="T:System.Type" /> richiesto è di tipo non pubblico e il chiamante non dispone dell'autorizzazione <see cref="T:System.Security.Permissions.ReflectionPermission" /> per riprodurre gli oggetti non pubblici al di fuori dell'assembly corrente.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException" vsli:raw="A class initializer is invoked and throws an exception.">Viene richiamato un inizializzatore di classi e viene generata un'eccezione.</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="An error is encountered while loading the &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Si è verificato un errore durante il caricamento del <see cref="T:System.Type" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean)">
      <summary vsli:raw="Gets the named type defined in the module, optionally ignoring the case of the type name.">Ottiene il tipo denominato definito nel modulo, ignorando facoltativamente la combinazione di maiuscole e minuscole del nome del tipo.</summary>
      <param name="className" vsli:raw="The name of the &lt;see cref=&quot;T:System.Type&quot; /&gt; to get.">Nome dell'oggetto <see cref="T:System.Type" /> da ottenere.</param>
      <param name="ignoreCase" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the search is case-insensitive. If &lt;see langword=&quot;false&quot; /&gt;, the search is case-sensitive.">Se <see langword="true" />, la ricerca non fa distinzione tra maiuscole e minuscole. Se <see langword="false" />, la ricerca fa distinzione tra maiuscole e minuscole.</param>
      <returns vsli:raw="The requested type, if the type is defined in this module; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Tipo richiesto, se il tipo è definito in questo modulo; in caso contrario <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;className&quot; /&gt; is zero or is greater than 1023.">La lunghezza di <paramref name="className" /> è zero o maggiore di 1023.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;className&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="className" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The requested &lt;see cref=&quot;T:System.Type&quot; /&gt; is non-public and the caller does not have &lt;see cref=&quot;T:System.Security.Permissions.ReflectionPermission&quot; /&gt; to reflect non-public objects outside the current assembly.">L'oggetto <see cref="T:System.Type" /> richiesto è di tipo non pubblico e il chiamante non dispone dell'autorizzazione <see cref="T:System.Security.Permissions.ReflectionPermission" /> per riprodurre gli oggetti non pubblici al di fuori dell'assembly corrente.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException" vsli:raw="A class initializer is invoked and throws an exception.">Viene richiamato un inizializzatore di classi e viene generata un'eccezione.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean,System.Boolean)">
      <summary vsli:raw="Gets the named type defined in the module, optionally ignoring the case of the type name. Optionally throws an exception if the type is not found.">Ottiene il tipo denominato definito nel modulo, ignorando facoltativamente la combinazione di maiuscole e minuscole del nome del tipo. Genera facoltativamente un'eccezione se il tipo non viene trovato.</summary>
      <param name="className" vsli:raw="The name of the &lt;see cref=&quot;T:System.Type&quot; /&gt; to get.">Nome dell'oggetto <see cref="T:System.Type" /> da ottenere.</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to throw an exception if the type cannot be found; &lt;see langword=&quot;false&quot; /&gt; to return &lt;see langword=&quot;null&quot; /&gt;.">
        <see langword="true" /> per generare un'eccezione se non è possibile trovare il tipo; <see langword="false" /> per restituire <see langword="null" />.</param>
      <param name="ignoreCase" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the search is case-insensitive. If &lt;see langword=&quot;false&quot; /&gt;, the search is case-sensitive.">Se <see langword="true" />, la ricerca non fa distinzione tra maiuscole e minuscole. Se <see langword="false" />, la ricerca fa distinzione tra maiuscole e minuscole.</param>
      <returns vsli:raw="The specified type, if the type is declared in this module; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Tipo specificato, se il tipo è dichiarato in questo modulo; in caso contrario <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;className&quot; /&gt; is zero or is greater than 1023.">La lunghezza di <paramref name="className" /> è zero o maggiore di 1023.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;className&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="className" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The requested &lt;see cref=&quot;T:System.Type&quot; /&gt; is non-public and the caller does not have &lt;see cref=&quot;T:System.Security.Permissions.ReflectionPermission&quot; /&gt; to reflect non-public objects outside the current assembly.">L'oggetto <see cref="T:System.Type" /> richiesto è di tipo non pubblico e il chiamante non dispone dell'autorizzazione <see cref="T:System.Security.Permissions.ReflectionPermission" /> per riprodurre gli oggetti non pubblici al di fuori dell'assembly corrente.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException" vsli:raw="A class initializer is invoked and throws an exception.">Viene richiamato un inizializzatore di classi e viene generata un'eccezione.</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="&lt;paramref name=&quot;throwOnError&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and the specified type is not found.">
        <paramref name="throwOnError" /> è <see langword="true" /> e il tipo specificato non è stato trovato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetTypes">
      <summary vsli:raw="Returns all the classes defined within this module.">Restituisce tutte le classi definite all'interno del modulo.</summary>
      <returns vsli:raw="An array that contains the types defined within the module that is reflected by this instance.">Matrice che contiene i tipi definiti all'interno del modulo ottenuto tramite reflection dall'istanza.</returns>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException" vsli:raw="One or more classes in a module could not be loaded.">Non è stato possibile caricare una o più classi in un modulo.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Returns a value that indicates whether the specified attribute type has been applied to this module.">Restituisce un valore che indica se il tipo di attributo specificato è stato applicato a questo modulo.</summary>
      <param name="attributeType" vsli:raw="The type of custom attribute to test for.">Tipo di attributo personalizzato per cui effettuare il test.</param>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">Questo argomento viene ignorato per gli oggetti di questo tipo.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instances of &lt;paramref name=&quot;attributeType&quot; /&gt; have been applied to this module; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se una o più istanze di <paramref name="attributeType" /> sono state applicate al modulo; in caso contrario <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is not a &lt;see cref=&quot;T:System.Type&quot; /&gt; object supplied by the runtime. For example, &lt;paramref name=&quot;attributeType&quot; /&gt; is a &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object.">
        <paramref name="attributeType" /> non è un oggetto <see cref="T:System.Type" /> fornito dal runtime. Ad esempio, <paramref name="attributeType" /> è un oggetto <see cref="T:System.Reflection.Emit.TypeBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.IsResource">
      <summary vsli:raw="Gets a value indicating whether the object is a resource.">Ottiene un valore che indica se l'oggetto è una risorsa.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is a resource; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto è una risorsa; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.MDStreamVersion">
      <summary vsli:raw="Gets the metadata stream version.">Ottiene la versione del flusso di metadati.</summary>
      <returns vsli:raw="A 32-bit integer representing the metadata stream version. The high-order two bytes represent the major version number, and the low-order two bytes represent the minor version number.">Intero a 32 bit che rappresenta la versione del flusso di metadati. I due byte più significativi rappresentano il numero di versione principale, mentre i due byte meno significativi rappresentano il numero di versione secondario.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.MetadataToken">
      <summary vsli:raw="Gets a token that identifies the current dynamic module in metadata.">Ottiene un token che identifica il modulo dinamico corrente nei metadati.</summary>
      <returns vsli:raw="An integer token that identifies the current module in metadata.">Un token Integer che identifica il modulo corrente nei metadati.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.ModuleVersionId">
      <summary vsli:raw="Gets a universally unique identifier (UUID) that can be used to distinguish between two versions of a module.">Ottiene un nuovo UUID (Universally Unique Identifier) che può essere usato per la distinzione tra due versioni di un modulo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; that can be used to distinguish between two versions of a module.">Oggetto <see cref="T:System.Guid" /> che può essere usato per la distinzione tra due versioni di un modulo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.Name">
      <summary vsli:raw="A string that indicates that this is an in-memory module.">Stringa che indica che questo è un modulo in memoria.</summary>
      <returns vsli:raw="Text that indicates that this is an in-memory module.">Testo che indica che questo è un modulo in memoria.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveField(System.Int32,System.Type[],System.Type[])">
      <summary vsli:raw="Returns the field identified by the specified metadata token, in the context defined by the specified generic type parameters.">Restituisce il campo identificato dal token di metadati specificato, nel contesto definito dai parametri di tipo generico specificati.</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a field in the module.">Token di metadati che identifica un campo nel modulo.</param>
      <param name="genericTypeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the type where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that type is not generic.">Matrice di oggetti <see cref="T:System.Type" /> che rappresenta gli argomenti di tipo generico del tipo nel cui ambito si trova il token o <see langword="null" /> se non si tratta di un tipo generico.</param>
      <param name="genericMethodArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the method where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that method is not generic.">Matrice di oggetti <see cref="T:System.Type" /> che rappresenta gli argomenti di tipo generico del metodo nel cui ambito si trova il token o <see langword="null" /> se non si tratta di un metodo generico.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; object representing the field that is identified by the specified metadata token.">Oggetto <see cref="T:System.Reflection.FieldInfo" /> che rappresenta il campo identificato dal token di metadati specificato.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a field in the scope of the current module.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; identifies a field whose parent &lt;see langword=&quot;TypeSpec&quot; /&gt; has a signature containing element type &lt;see langword=&quot;var&quot; /&gt; (a type parameter of a generic type) or &lt;see langword=&quot;mvar&quot; /&gt; (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of &lt;paramref name=&quot;genericTypeArguments&quot; /&gt; and &lt;paramref name=&quot;genericMethodArguments&quot; /&gt;.">il parametro <paramref name="metadataToken" /> non è un token per un campo nell'ambito del modulo corrente.  
In alternativa 
 <paramref name="metadataToken" /> identifica un campo il cui elemento padre <see langword="TypeSpec" /> presenta una firma contenente il tipo di elemento <see langword="var" /> (un tipo di parametro di un tipo generico) o <see langword="mvar" /> (un tipo di parametro di un metodo generico) e non sono stati specificati gli argomenti di tipo generico necessari per <paramref name="genericTypeArguments" /> o <paramref name="genericMethodArguments" /> o per entrambi.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> non è un token valido nell'ambito del modulo corrente.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveMember(System.Int32,System.Type[],System.Type[])">
      <summary vsli:raw="Returns the type or member identified by the specified metadata token, in the context defined by the specified generic type parameters.">Restituisce il tipo o il membro identificato dal token di metadati specificato nel contesto definito dai parametri di tipo generico specificati.</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a type or member in the module.">Token di metadati che identifica un tipo o un membro del modulo.</param>
      <param name="genericTypeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the type where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that type is not generic.">Matrice di oggetti <see cref="T:System.Type" /> che rappresenta gli argomenti di tipo generico del tipo nel cui ambito si trova il token o <see langword="null" /> se non si tratta di un tipo generico.</param>
      <param name="genericMethodArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the method where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that method is not generic.">Matrice di oggetti <see cref="T:System.Type" /> che rappresenta gli argomenti di tipo generico del metodo nel cui ambito si trova il token o <see langword="null" /> se non si tratta di un metodo generico.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; object representing the type or member that is identified by the specified metadata token.">Oggetto <see cref="T:System.Reflection.MemberInfo" /> che rappresenta il tipo o il membro identificato dal token di metadati specificato.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a type or member in the scope of the current module.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; is a &lt;see langword=&quot;MethodSpec&quot; /&gt; or &lt;see langword=&quot;TypeSpec&quot; /&gt; whose signature contains element type &lt;see langword=&quot;var&quot; /&gt; (a type parameter of a generic type) or &lt;see langword=&quot;mvar&quot; /&gt; (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of &lt;paramref name=&quot;genericTypeArguments&quot; /&gt; and &lt;paramref name=&quot;genericMethodArguments&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; identifies a property or event.">
        <paramref name="metadataToken" /> non è un token per un tipo o un membro nell'ambito del modulo corrente.  
-oppure- 
 <paramref name="metadataToken" /> è un tipo di elemento <see langword="MethodSpec" /> o <see langword="TypeSpec" /> la cui firma contiene il tipo di elemento <see langword="var" /> (un tipo di parametro di un tipo generico) o <see langword="mvar" /> (un tipo di parametro di un metodo generico) e non sono stati specificati gli argomenti di tipo generico necessari per <paramref name="genericTypeArguments" /> o <paramref name="genericMethodArguments" /> o per entrambi.  
-oppure- 
 <paramref name="metadataToken" /> identifica una proprietà o un evento.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> non è un token valido nell'ambito del modulo corrente.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveMethod(System.Int32,System.Type[],System.Type[])">
      <summary vsli:raw="Returns the method or constructor identified by the specified metadata token, in the context defined by the specified generic type parameters.">Restituisce il metodo o il costruttore identificato dal token di metadati specificato nel contesto definito dai parametri di tipo generico specificati.</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a method or constructor in the module.">Token di metadati che identifica un metodo o un costruttore nel modulo.</param>
      <param name="genericTypeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the type where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that type is not generic.">Matrice di oggetti <see cref="T:System.Type" /> che rappresenta gli argomenti di tipo generico del tipo nel cui ambito si trova il token o <see langword="null" /> se non si tratta di un tipo generico.</param>
      <param name="genericMethodArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the method where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that method is not generic.">Matrice di oggetti <see cref="T:System.Type" /> che rappresenta gli argomenti di tipo generico del metodo nel cui ambito si trova il token o <see langword="null" /> se non si tratta di un metodo generico.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodBase&quot; /&gt; object representing the method that is identified by the specified metadata token.">Oggetto <see cref="T:System.Reflection.MethodBase" /> che rappresenta il metodo identificato dal token di metadati specificato.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a method or constructor in the scope of the current module.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; is a &lt;see langword=&quot;MethodSpec&quot; /&gt; whose signature contains element type &lt;see langword=&quot;var&quot; /&gt; (a type parameter of a generic type) or &lt;see langword=&quot;mvar&quot; /&gt; (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of &lt;paramref name=&quot;genericTypeArguments&quot; /&gt; and &lt;paramref name=&quot;genericMethodArguments&quot; /&gt;.">
        <paramref name="metadataToken" /> non è un token per un metodo o un costruttore nell'ambito del modulo corrente.  
In alternativa 
 <paramref name="metadataToken" /> è un tipo di elemento <see langword="MethodSpec" /> la cui firma contiene il tipo di elemento <see langword="var" /> (un tipo di parametro di un tipo generico) o <see langword="mvar" /> (un tipo di parametro di un metodo generico) e non sono stati specificati gli argomenti di tipo generico necessari per <paramref name="genericTypeArguments" /> o <paramref name="genericMethodArguments" /> o per entrambi.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> non è un token valido nell'ambito del modulo corrente.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveSignature(System.Int32)">
      <summary vsli:raw="Returns the signature blob identified by a metadata token.">Restituisce il blob della firma identificato da un token di metadati.</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a signature in the module.">Token di metadati che identifica una firma nel modulo.</param>
      <returns vsli:raw="An array of bytes representing the signature blob.">Matrice di byte che rappresenta il blob della firma.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid &lt;see langword=&quot;MemberRef&quot; /&gt;, &lt;see langword=&quot;MethodDef&quot; /&gt;, &lt;see langword=&quot;TypeSpec&quot; /&gt;, signature, or &lt;see langword=&quot;FieldDef&quot; /&gt; token in the scope of the current module.">
        <paramref name="metadataToken" /> non è un elemento <see langword="MemberRef" />, <see langword="MethodDef" /> o <see langword="TypeSpec" />, una firma o un token <see langword="FieldDef" /> valido nell'ambito del modulo corrente.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> non è un token valido nell'ambito del modulo corrente.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveString(System.Int32)">
      <summary vsli:raw="Returns the string identified by the specified metadata token.">Restituisce la stringa identificata dal token di metadati specificato.</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a string in the string heap of the module.">Token di metadati che identifica una stringa nell'heap delle stringhe del modulo.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing a string value from the metadata string heap.">
        <see cref="T:System.String" /> contenente un valore di stringa derivato dall'heap delle stringhe dei metadati.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a string in the scope of the current module.">
        <paramref name="metadataToken" /> non è un token per una stringa nell'ambito del modulo corrente.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> non è un token valido nell'ambito del modulo corrente.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveType(System.Int32,System.Type[],System.Type[])">
      <summary vsli:raw="Returns the type identified by the specified metadata token, in the context defined by the specified generic type parameters.">Restituisce il tipo identificato dal token di metadati specificato nel contesto definito dai parametri di tipo generico specificati.</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a type in the module.">Token di metadati che identifica un tipo nel modulo.</param>
      <param name="genericTypeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the type where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that type is not generic.">Matrice di oggetti <see cref="T:System.Type" /> che rappresenta gli argomenti di tipo generico del tipo nel cui ambito si trova il token o <see langword="null" /> se non si tratta di un tipo generico.</param>
      <param name="genericMethodArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the method where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that method is not generic.">Matrice di oggetti <see cref="T:System.Type" /> che rappresenta gli argomenti di tipo generico del metodo nel cui ambito si trova il token o <see langword="null" /> se non si tratta di un metodo generico.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the type that is identified by the specified metadata token.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo identificato dal token di metadati specificato.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a type in the scope of the current module.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; is a &lt;see langword=&quot;TypeSpec&quot; /&gt; whose signature contains element type &lt;see langword=&quot;var&quot; /&gt; (a type parameter of a generic type) or &lt;see langword=&quot;mvar&quot; /&gt; (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of &lt;paramref name=&quot;genericTypeArguments&quot; /&gt; and &lt;paramref name=&quot;genericMethodArguments&quot; /&gt;.">Il parametro <paramref name="metadataToken" /> non è un token per un tipo nell'ambito del modulo corrente.  
-oppure- 
 <paramref name="metadataToken" /> è un tipo di elemento <see langword="TypeSpec" /> la cui firma contiene il tipo di elemento <see langword="var" /> (un tipo di parametro di un tipo generico) o <see langword="mvar" /> (un tipo di parametro di un metodo generico) e non sono stati specificati gli argomenti di tipo generico necessari per <paramref name="genericTypeArguments" /> o <paramref name="genericMethodArguments" /> o per entrambi.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> non è un token valido nell'ambito del modulo corrente.</exception>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.ScopeName">
      <summary vsli:raw="Gets a string that represents the name of the dynamic module.">Ottiene una stringa che rappresenta il nome del modulo dinamico.</summary>
      <returns vsli:raw="The name of the dynamic module.">Nome del modulo dinamico.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Applies a custom attribute to this module by using a specified binary large object (BLOB) that represents the attribute.">Applica un attributo personalizzato al modulo tramite un oggetto binario di grandi dimensioni (BLOB) specificato che rappresenta l'attributo.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Costruttore dell'attributo personalizzato.</param>
      <param name="binaryAttribute" vsli:raw="A byte BLOB representing the attribute.">BLOB di byte che rappresenta l'attributo.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> o <paramref name="binaryAttribute" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Applies a custom attribute to this module by using a custom attribute builder.">Applica un attributo personalizzato al modulo utilizzando un generatore di attributi personalizzati.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class that specifies the custom attribute to apply.">Istanza di una classe di supporto che consente di specificare l'attributo personalizzato da applicare.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> è <see langword="null" />.</exception>
    </member>
    <member name="T:System.Reflection.Emit.PropertyBuilder">
      <summary vsli:raw="Defines the properties for a type.">Definisce le proprietà per un tipo.</summary>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Adds one of the other methods associated with this property.">Aggiunge uno degli altri metodi associati a questa proprietà.</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the other method.">Oggetto <see langword="MethodBuilder" /> che rappresenta l'altro metodo.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">Il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> è stato chiamato sul tipo di inclusione.</exception>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Attributes">
      <summary vsli:raw="Gets the attributes for this property.">Ottiene gli attributi per questa proprietà.</summary>
      <returns vsli:raw="Attributes of this property.">Attributi di questa proprietà.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanRead">
      <summary vsli:raw="Gets a value indicating whether the property can be read.">Ottiene un valore che indica se è possibile leggere la proprietà.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this property can be read; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se è possibile leggere la proprietà; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanWrite">
      <summary vsli:raw="Gets a value indicating whether the property can be written to.">Ottiene un valore che indica se è possibile scrivere nella proprietà.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this property can be written to; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se è possibile scrivere nella proprietà; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.DeclaringType">
      <summary vsli:raw="Gets the class that declares this member.">Ottiene la classe che dichiara questo membro.</summary>
      <returns vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object for the class that declares this member.">Oggetto <see langword="Type" /> per la classe che dichiara questo membro.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)">
      <summary vsli:raw="Returns an array of the public and non-public &lt;see langword=&quot;get&quot; /&gt; and &lt;see langword=&quot;set&quot; /&gt; accessors on this property.">Restituisce una matrice delle funzioni di accesso <see langword="get" /> e <see langword="set" /> pubbliche e non pubbliche su questa proprietà.</summary>
      <param name="nonPublic" vsli:raw="Indicates whether non-public methods should be returned in the &lt;see langword=&quot;MethodInfo&quot; /&gt; array. &lt;see langword=&quot;true&quot; /&gt; if non-public methods are to be included; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Indica se nella matrice <see langword="MethodInfo" /> devono essere restituiti metodi non pubblici. <see langword="true" /> se devono essere inclusi i metodi non pubblici; in caso contrario, <see langword="false" />.</param>
      <returns vsli:raw="An array of type &lt;see langword=&quot;MethodInfo&quot; /&gt; containing the matching public or non-public accessors, or an empty array if matching accessors do not exist on this property.">Matrice di tipo <see langword="MethodInfo" /> contenente le funzioni di accesso pubbliche o non pubbliche corrispondenti oppure una matrice vuota se le funzioni di accesso corrispondenti non sono disponibili in questa proprietà.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Questo metodo non è supportato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns an array of all the custom attributes for this property.">Restituisce una matrice di tutti gli attributi personalizzati per questa proprietà.</summary>
      <param name="inherit" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, walks up this property's inheritance chain to find the custom attributes.">Se <see langword="true" />, esplora la catena di ereditarietà di questa proprietà per trovare gli attributi personalizzati.</param>
      <returns vsli:raw="An array of all the custom attributes.">Matrice di tutti gli attributi personalizzati.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Questo metodo non è supportato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns an array of custom attributes identified by &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Restituisce una matrice di attributi personalizzati identificati dall'oggetto <see cref="T:System.Type" />.</summary>
      <param name="attributeType" vsli:raw="An array of custom attributes identified by type.">Matrice di attributi personalizzati identificati per tipo.</param>
      <param name="inherit" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, walks up this property's inheritance chain to find the custom attributes.">Se <see langword="true" />, esplora la catena di ereditarietà di questa proprietà per trovare gli attributi personalizzati.</param>
      <returns vsli:raw="An array of custom attributes defined on this reflected member, or &lt;see langword=&quot;null&quot; /&gt; if no attributes are defined on this member.">Matrice di attributi personalizzati definiti su questo membro di cui si è eseguita la reflection oppure <see langword="null" /> se nessun attributo è stato definito su questo membro.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Questo metodo non è supportato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)">
      <summary vsli:raw="Returns the public and non-public get accessor for this property.">Restituisce la funzione di accesso get pubblica e non pubblica per questa proprietà.</summary>
      <param name="nonPublic" vsli:raw="Indicates whether non-public get accessors should be returned. &lt;see langword=&quot;true&quot; /&gt; if non-public methods are to be included; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Indica se deve essere restituita una funzione di accesso get non pubblica. <see langword="true" /> se devono essere inclusi i metodi non pubblici; in caso contrario, <see langword="false" />.</param>
      <returns vsli:raw="A &lt;see langword=&quot;MethodInfo&quot; /&gt; object representing the get accessor for this property, if &lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;. Returns &lt;see langword=&quot;null&quot; /&gt; if &lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt; and the get accessor is non-public, or if &lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; but no get accessors exist.">Oggetto <see langword="MethodInfo" /> che rappresenta la funzione di accesso get per questa proprietà, se <paramref name="nonPublic" /> è <see langword="true" />. Restituisce <see langword="null" /> se <paramref name="nonPublic" /> è <see langword="false" /> e la funzione di accesso get non è pubblica oppure se <paramref name="nonPublic" /> è <see langword="true" /> ma non è disponibile alcuna funzione di accesso get.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetIndexParameters">
      <summary vsli:raw="Returns an array of all the index parameters for the property.">Restituisce una matrice di tutti i parametri degli indici per la proprietà.</summary>
      <returns vsli:raw="An array of type &lt;see langword=&quot;ParameterInfo&quot; /&gt; containing the parameters for the indexes.">Matrice di tipo <see langword="ParameterInfo" /> contenente i parametri per gli indici.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Questo metodo non è supportato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
      <summary vsli:raw="Returns the set accessor for this property.">Restituisce la funzione di accesso set per questa proprietà.</summary>
      <param name="nonPublic" vsli:raw="Indicates whether the accessor should be returned if it is non-public. &lt;see langword=&quot;true&quot; /&gt; if non-public methods are to be included; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Indica se la funzione di accesso deve essere restituita se non è pubblica. <see langword="true" /> se devono essere inclusi i metodi non pubblici; in caso contrario, <see langword="false" />.</param>
      <returns vsli:raw="The property's &lt;see langword=&quot;Set&quot; /&gt; method, or &lt;see langword=&quot;null&quot; /&gt;, as shown in the following table.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Condition&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object representing the Set method for this property.&lt;/term&gt;&lt;description&gt; The set accessor is public.  &#xA;  &#xA; &lt;paramref name=&quot;nonPublic&quot; /&gt; is true and non-public methods can be returned.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; null&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;nonPublic&quot; /&gt; is true, but the property is read-only.  &#xA;  &#xA; &lt;paramref name=&quot;nonPublic&quot; /&gt; is false and the set accessor is non-public.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Metodo <see langword="Set" /> della proprietà oppure <see langword="null" />, come illustrato nella tabella seguente.  
  Value 
  Condizione 
  Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo Set per questa proprietà.  

  La funzione di accesso set è pubblica.  

 <paramref name="nonPublic" /> è true e possono essere restituiti metodi non pubblici.  

  Null 
 <paramref name="nonPublic" /> è true, ma la proprietà è di sola lettura.  

 <paramref name="nonPublic" /> è false e la funzione di accesso set non è pubblica.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
      <summary vsli:raw="Gets the value of the indexed property by calling the property's getter method.">Ottiene il valore della proprietà indicizzata chiamando il metodo per il richiamo della proprietà.</summary>
      <param name="obj" vsli:raw="The object whose property value will be returned.">Oggetto di cui verrà restituito il valore della proprietà.</param>
      <param name="index" vsli:raw="Optional index values for indexed properties. This value should be &lt;see langword=&quot;null&quot; /&gt; for non-indexed properties.">Valori di indice facoltativi per le proprietà indicizzate. Il valore deve essere <see langword="null" /> per le proprietà non indicizzate.</param>
      <returns vsli:raw="The value of the specified indexed property.">Valore della proprietà indicizzata specificata.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Questo metodo non è supportato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Gets the value of a property having the specified binding, index, and &lt;see langword=&quot;CultureInfo&quot; /&gt;.">Ottiene il valore di una proprietà con l'associazione, l'indice e l'oggetto <see langword="CultureInfo" /> specificati.</summary>
      <param name="obj" vsli:raw="The object whose property value will be returned.">Oggetto di cui verrà restituito il valore della proprietà.</param>
      <param name="invokeAttr" vsli:raw="The invocation attribute. This must be a bit flag from &lt;see langword=&quot;BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;CreateInstance&quot; /&gt;, &lt;see langword=&quot;Static&quot; /&gt;, &lt;see langword=&quot;GetField&quot; /&gt;, &lt;see langword=&quot;SetField&quot; /&gt;, &lt;see langword=&quot;GetProperty&quot; /&gt;, or &lt;see langword=&quot;SetProperty&quot; /&gt;. A suitable invocation attribute must be specified. If a static member is to be invoked, the &lt;see langword=&quot;Static&quot; /&gt; flag of &lt;see langword=&quot;BindingFlags&quot; /&gt; must be set.">Attributo di chiamata. È necessario che si tratti di un flag di bit da <see langword="BindingFlags" />: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> o <see langword="SetProperty" />. È necessario specificare un attributo di chiamata appropriato. Se occorre richiamare un membro statico, è necessario impostare il flag <see langword="Static" /> di <see langword="BindingFlags" />.</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If &lt;paramref name=&quot;binder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used.">Oggetto che consente l'associazione, la coercizione dei tipi di argomento, la chiamata dei membri e il recupero di oggetti <see langword="MemberInfo" /> tramite reflection. Se <paramref name="binder" /> è <see langword="null" />, verrà usato il binder predefinito.</param>
      <param name="index" vsli:raw="Optional index values for indexed properties. This value should be &lt;see langword=&quot;null&quot; /&gt; for non-indexed properties.">Valori di indice facoltativi per le proprietà indicizzate. Il valore deve essere <see langword="null" /> per le proprietà non indicizzate.</param>
      <param name="culture" vsli:raw="The &lt;see langword=&quot;CultureInfo&quot; /&gt; object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the &lt;see langword=&quot;CultureInfo.Parent&quot; /&gt; method will be called successively in search of a match. If this value is &lt;see langword=&quot;null&quot; /&gt;, the &lt;see langword=&quot;CultureInfo&quot; /&gt; is obtained from the &lt;see langword=&quot;CultureInfo.CurrentUICulture&quot; /&gt; property.">Oggetto <see langword="CultureInfo" /> che rappresenta le impostazioni cultura con le quali deve essere localizzata la risorsa. Se una risorsa non viene localizzata con queste impostazioni cultura, il metodo <see langword="CultureInfo.Parent" /> sarà successivamente chiamato in cerca di una corrispondenza. Se questo valore è <see langword="null" />, l'oggetto <see langword="CultureInfo" /> è ottenuto dalla proprietà <see langword="CultureInfo.CurrentUICulture" />.</param>
      <returns vsli:raw="The property value for &lt;paramref name=&quot;obj&quot; /&gt;.">Valore della proprietà per <paramref name="obj" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Questo metodo non è supportato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Indicates whether one or more instance of &lt;paramref name=&quot;attributeType&quot; /&gt; is defined on this property.">Indica se una o più istanze di <paramref name="attributeType" /> sono definite su questa proprietà.</summary>
      <param name="attributeType" vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object to which the custom attributes are applied.">Oggetto <see langword="Type" /> a cui vengono applicati gli attributi personalizzati.</param>
      <param name="inherit" vsli:raw="Specifies whether to walk up this property's inheritance chain to find the custom attributes.">Specifica se esplorare la catena di ereditarietà di questa proprietà per trovare gli attributi personalizzati.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instance of &lt;paramref name=&quot;attributeType&quot; /&gt; is defined on this property; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se una o più istanze di <paramref name="attributeType" /> sono definite su questa proprietà; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Questo metodo non è supportato.</exception>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Module">
      <summary vsli:raw="Gets the module in which the type that declares the current property is being defined.">Ottiene il modulo in cui viene definito il tipo che dichiara la proprietà corrente.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; in which the type that declares the current property is defined.">Oggetto <see cref="T:System.Reflection.Module" /> in cui viene definito il tipo che dichiara la proprietà corrente.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Name">
      <summary vsli:raw="Gets the name of this member.">Ottiene il nome di questo membro.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of this member.">
        <see cref="T:System.String" /> che contiene il nome di questo membro.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.PropertyType">
      <summary vsli:raw="Gets the type of the field of this property.">Ottiene il tipo del campo di questa proprietà.</summary>
      <returns vsli:raw="The type of this property.">Tipo della proprietà.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.ReflectedType">
      <summary vsli:raw="Gets the class object that was used to obtain this instance of &lt;see langword=&quot;MemberInfo&quot; /&gt;.">Ottiene l'oggetto classe utilizzato per ottenere questa istanza di <see langword="MemberInfo" />.</summary>
      <returns vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object through which this &lt;see langword=&quot;MemberInfo&quot; /&gt; object was obtained.">Oggetto <see langword="Type" /> tramite il quale è stato ottenuto questo oggetto <see langword="MemberInfo" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
      <summary vsli:raw="Sets the default value of this property.">Imposta il valore predefinito di questa proprietà.</summary>
      <param name="defaultValue" vsli:raw="The default value of this property.">Valore predefinito della proprietà.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">Il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> è stato chiamato sul tipo di inclusione.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The property is not one of the supported types.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of &lt;paramref name=&quot;defaultValue&quot; /&gt; does not match the type of the property.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property is of type &lt;see cref=&quot;T:System.Object&quot; /&gt; or other reference type, &lt;paramref name=&quot;defaultValue&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;, and the value cannot be assigned to the reference type.">La proprietà non è tra i tipi supportati.  
-oppure- 
Il tipo dell'oggetto <paramref name="defaultValue" /> non corrisponde al tipo della proprietà.  
In alternativa 
Il tipo della proprietà è <see cref="T:System.Object" /> o un altro tipo di riferimento, <paramref name="defaultValue" /> non è <see langword="null" /> e il valore non può essere assegnato al tipo di riferimento.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute using a specified custom attribute blob.">Impostare un attributo personalizzato utilizzando un blob di attributi personalizzati specificato.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Costruttore dell'attributo personalizzato.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">BLOB di byte che rappresenta gli attributi.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> o <paramref name="binaryAttribute" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">Il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> è stato chiamato sul tipo di inclusione.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">Impostare un attributo personalizzato usando un generatore di attributi personalizzati.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">Un'istanza di una classe helper per definire l'attributo personalizzato.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="if &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">se <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> è stato chiamato sul tipo di inclusione.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method that gets the property value.">Imposta il metodo che ottiene il valore della proprietà.</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method that gets the property value.">Oggetto <see langword="MethodBuilder" /> che rappresenta il metodo che ottiene il valore della proprietà.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">Il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> è stato chiamato sul tipo di inclusione.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method that sets the property value.">Imposta il metodo che imposta il valore della proprietà.</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method that sets the property value.">Oggetto <see langword="MethodBuilder" /> che rappresenta il metodo che imposta il valore della proprietà.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">Il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> è stato chiamato sul tipo di inclusione.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
      <summary vsli:raw="Sets the value of the property with optional index values for index properties.">Imposta il valore della proprietà con valori di indice facoltativi per le proprietà dell'indice.</summary>
      <param name="obj" vsli:raw="The object whose property value will be set.">Oggetto di cui verrà impostato il valore della proprietà.</param>
      <param name="value" vsli:raw="The new value for this property.">Nuovo valore della proprietà.</param>
      <param name="index" vsli:raw="Optional index values for indexed properties. This value should be &lt;see langword=&quot;null&quot; /&gt; for non-indexed properties.">Valori di indice facoltativi per le proprietà indicizzate. Il valore deve essere <see langword="null" /> per le proprietà non indicizzate.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Questo metodo non è supportato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Sets the property value for the given object to the given value.">Imposta il valore della proprietà per l'oggetto dato sul valore dato.</summary>
      <param name="obj" vsli:raw="The object whose property value will be returned.">Oggetto di cui verrà restituito il valore della proprietà.</param>
      <param name="value" vsli:raw="The new value for this property.">Nuovo valore della proprietà.</param>
      <param name="invokeAttr" vsli:raw="The invocation attribute. This must be a bit flag from &lt;see langword=&quot;BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;CreateInstance&quot; /&gt;, &lt;see langword=&quot;Static&quot; /&gt;, &lt;see langword=&quot;GetField&quot; /&gt;, &lt;see langword=&quot;SetField&quot; /&gt;, &lt;see langword=&quot;GetProperty&quot; /&gt;, or &lt;see langword=&quot;SetProperty&quot; /&gt;. A suitable invocation attribute must be specified. If a static member is to be invoked, the &lt;see langword=&quot;Static&quot; /&gt; flag of &lt;see langword=&quot;BindingFlags&quot; /&gt; must be set.">Attributo di chiamata. È necessario che si tratti di un flag di bit da <see langword="BindingFlags" />: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> o <see langword="SetProperty" />. È necessario specificare un attributo di chiamata appropriato. Se occorre richiamare un membro statico, è necessario impostare il flag <see langword="Static" /> di <see langword="BindingFlags" />.</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If &lt;paramref name=&quot;binder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used.">Oggetto che consente l'associazione, la coercizione dei tipi di argomento, la chiamata dei membri e il recupero di oggetti <see langword="MemberInfo" /> tramite reflection. Se <paramref name="binder" /> è <see langword="null" />, verrà usato il binder predefinito.</param>
      <param name="index" vsli:raw="Optional index values for indexed properties. This value should be &lt;see langword=&quot;null&quot; /&gt; for non-indexed properties.">Valori di indice facoltativi per le proprietà indicizzate. Il valore deve essere <see langword="null" /> per le proprietà non indicizzate.</param>
      <param name="culture" vsli:raw="The &lt;see langword=&quot;CultureInfo&quot; /&gt; object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the &lt;see langword=&quot;CultureInfo.Parent&quot; /&gt; method will be called successively in search of a match. If this value is &lt;see langword=&quot;null&quot; /&gt;, the &lt;see langword=&quot;CultureInfo&quot; /&gt; is obtained from the &lt;see langword=&quot;CultureInfo.CurrentUICulture&quot; /&gt; property.">Oggetto <see langword="CultureInfo" /> che rappresenta le impostazioni cultura con le quali deve essere localizzata la risorsa. Se una risorsa non viene localizzata con queste impostazioni cultura, il metodo <see langword="CultureInfo.Parent" /> sarà successivamente chiamato in cerca di una corrispondenza. Se questo valore è <see langword="null" />, l'oggetto <see langword="CultureInfo" /> è ottenuto dalla proprietà <see langword="CultureInfo.CurrentUICulture" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Questo metodo non è supportato.</exception>
    </member>
    <member name="T:System.Reflection.Emit.TypeBuilder">
      <summary vsli:raw="Defines and creates new instances of classes during run time.">Definisce e crea nuove istanze delle classi in fase di esecuzione.</summary>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(System.Type)">
      <summary vsli:raw="Adds an interface that this type implements.">Aggiunge un'interfaccia implementata da questo tipo.</summary>
      <param name="interfaceType" vsli:raw="The interface that this type implements.">Interfaccia implementata da questo tipo.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;interfaceType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="interfaceType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Assembly">
      <summary vsli:raw="Retrieves the dynamic assembly that contains this type definition.">Recupera l'assembly dinamico che contiene la definizione di tipo.</summary>
      <returns vsli:raw="Read-only. Retrieves the dynamic assembly that contains this type definition.">Sola lettura. Recupera l'assembly dinamico che contiene la definizione di tipo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName">
      <summary vsli:raw="Returns the full name of this type qualified by the display name of the assembly.">Restituisce il nome completo di questo tipo qualificato dal nome visualizzato dell'assembly.</summary>
      <returns vsli:raw="Read-only. The full name of this type qualified by the display name of the assembly.">Sola lettura. Nome completo di questo tipo qualificato dal nome visualizzato dell'assembly.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.BaseType">
      <summary vsli:raw="Retrieves the base type of this type.">Recupera il tipo di base del tipo.</summary>
      <returns vsli:raw="Read-only. Retrieves the base type of this type.">Sola lettura. Recupera il tipo di base del tipo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.CreateType">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the class. After defining fields and methods on the class, &lt;see langword=&quot;CreateType&quot; /&gt; is called in order to load its &lt;see langword=&quot;Type&quot; /&gt; object.">Crea un oggetto <see cref="T:System.Type" /> per la classe. Dopo aver definito i campi e metodi della classe <see langword="CreateType" /> viene chiamato per caricare il relativo oggetto <see langword="Type" />.</summary>
      <returns vsli:raw="Returns the new &lt;see cref=&quot;T:System.Type&quot; /&gt; object for this class.">Restituisce il nuovo oggetto <see cref="T:System.Type" /> per questa classe.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enclosing type has not been created.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is non-abstract and contains an abstract method.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is not an abstract class or an interface and has a method without a method body.">Il tipo di inclusione non è stato creato.  
 In alternativa  
 Questo tipo è non astratto e contiene un metodo astratto.  
 -oppure-  
 Questo tipo è una classe o un'interfaccia non astratta e ha un metodo senza corpo.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The type contains invalid Microsoft intermediate language (MSIL) code.  &#xA;  &#xA; -or-  &#xA;  &#xA; The branch target is specified using a 1-byte offset, but the target is at a distance greater than 127 bytes from the branch.">Il tipo contiene codice MSIL (Microsoft Intermediate Language) non valido.  
 In alternativa  
 La destinazione branch viene specificata usando un offset di 1 byte, ma la destinazione si trova a una distanza maggiore di 127 byte dal branch.</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="The type cannot be loaded. For example, it contains a &lt;see langword=&quot;static&quot; /&gt; method that has the calling convention &lt;see cref=&quot;F:System.Reflection.CallingConventions.HasThis&quot; /&gt;.">Non è possibile caricare il tipo. Ad esempio, contiene un metodo <see langword="static" /> con la convenzione di chiamata <see cref="F:System.Reflection.CallingConventions.HasThis" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.CreateTypeInfo">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.TypeInfo&quot; /&gt; object that represents this type.">Ottiene un oggetto <see cref="T:System.Reflection.TypeInfo" /> che rappresenta il tipo.</summary>
      <returns vsli:raw="An object that represents this type.">Oggetto che rappresenta il tipo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringMethod">
      <summary vsli:raw="Gets the method that declared the current generic type parameter.">Ottiene il metodo che ha dichiarato il parametro di tipo generico corrente.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodBase&quot; /&gt; that represents the method that declared the current type, if the current type is a generic type parameter; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Oggetto<see cref="T:System.Reflection.MethodBase" /> che rappresenta il metodo che ha dichiarato il tipo corrente, se il tipo corrente è un parametro di tipo generico; in caso contrario, <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringType">
      <summary vsli:raw="Returns the type that declared this type.">Restituisce il tipo con cui è stato dichiarato questo tipo.</summary>
      <returns vsli:raw="Read-only. The type that declared this type.">Sola lettura. Tipo con cui è stato dichiarato questo tipo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])">
      <summary vsli:raw="Adds a new constructor to the type, with the given attributes and signature.">Aggiunge un nuovo costruttore al tipo, con la firma e gli attributi specificati.</summary>
      <param name="attributes" vsli:raw="The attributes of the constructor.">Attributi del costruttore.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the constructor.">Convenzione di chiamata del costruttore.</param>
      <param name="parameterTypes" vsli:raw="The parameter types of the constructor.">Tipi di parametro del costruttore.</param>
      <returns vsli:raw="The defined constructor.">Costruttore definito.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a new constructor to the type, with the given attributes, signature, and custom modifiers.">Aggiunge un nuovo costruttore al tipo, con gli attributi specificati, la firma e i modificatori personalizzati.</summary>
      <param name="attributes" vsli:raw="The attributes of the constructor.">Attributi del costruttore.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the constructor.">Convenzione di chiamata del costruttore.</param>
      <param name="parameterTypes" vsli:raw="The parameter types of the constructor.">Tipi di parametro del costruttore.</param>
      <param name="requiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Matrice di matrici di tipi. Ogni matrice di tipi rappresenta i modificatori personalizzati obbligatori per il parametro corrispondente, come <see cref="T:System.Runtime.CompilerServices.IsConst" />. Se un parametro particolare non ha modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di tipi. Se nessun parametro ha modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <param name="optionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Matrice di matrici di tipi. Ogni matrice di tipi rappresenta i modificatori personalizzati facoltativi per il parametro corrispondente, come <see cref="T:System.Runtime.CompilerServices.IsConst" />. Se un parametro particolare non ha modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di tipi. Se nessun parametro ha modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <returns vsli:raw="The defined constructor.">Costruttore definito.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The size of &lt;paramref name=&quot;requiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">La dimensione di <paramref name="requiredCustomModifiers" /> o <paramref name="optionalCustomModifiers" /> non è uguale a quella di <paramref name="parameterTypes" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  
-oppure- 
Per il tipo dinamico corrente, la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> è <see langword="true" /> ma la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)">
      <summary vsli:raw="Defines the parameterless constructor. The constructor defined here will simply call the parameterless constructor of the parent.">Definisce il costruttore senza parametri. Il costruttore definito qui chiamerà semplicemente il costruttore senza parametri dell'elemento padre.</summary>
      <param name="attributes" vsli:raw="A &lt;see langword=&quot;MethodAttributes&quot; /&gt; object representing the attributes to be applied to the constructor.">Oggetto <see langword="MethodAttributes" /> che rappresenta gli attributi da applicare al costruttore.</param>
      <returns vsli:raw="Returns the constructor.">Restituisce il costruttore.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The parent type (base type) does not have a parameterless constructor.">Il tipo padre (tipo di base) non ha un costruttore senza parametri.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  
-oppure- 
Per il tipo dinamico corrente, la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> è <see langword="true" /> ma la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineEvent(System.String,System.Reflection.EventAttributes,System.Type)">
      <summary vsli:raw="Adds a new event to the type, with the given name, attributes and event type.">Aggiunge un nuovo evento al tipo, con il nome, gli attributi e il tipo di evento specificati.</summary>
      <param name="name" vsli:raw="The name of the event. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nome dell'evento. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attributes" vsli:raw="The attributes of the event.">Attributi dell'evento.</param>
      <param name="eventtype" vsli:raw="The type of the event.">Tipo di evento.</param>
      <returns vsli:raw="The defined event.">Evento definito.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">La lunghezza di <paramref name="name" /> è zero.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;eventtype&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.  
-oppure- 
 <paramref name="eventtype" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)">
      <summary vsli:raw="Adds a new field to the type, with the given name, attributes, and field type.">Aggiunge un nuovo campo al tipo, con il nome, gli attributi e il tipo di campo specificati.</summary>
      <param name="fieldName" vsli:raw="The name of the field. &lt;paramref name=&quot;fieldName&quot; /&gt; cannot contain embedded nulls.">Nome del campo. <paramref name="fieldName" /> non può contenere valori Null incorporati.</param>
      <param name="type" vsli:raw="The type of the field.">Tipo di campo.</param>
      <param name="attributes" vsli:raw="The attributes of the field.">Attributi del campo.</param>
      <returns vsli:raw="The defined field.">Campo definito.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;fieldName&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is System.Void.  &#xA;  &#xA; -or-  &#xA;  &#xA; A total size was specified for the parent class of this field.">La lunghezza di <paramref name="fieldName" /> è zero.  
In alternativa 
 <paramref name="type" /> è System.Void.  
In alternativa 
È stata specificata una dimensione totale per la classe padre di questo campo.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fieldName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fieldName" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes)">
      <summary vsli:raw="Adds a new field to the type, with the given name, attributes, field type, and custom modifiers.">Aggiunge un nuovo campo al tipo, con il nome, gli attributi, il tipo di campo e i modificatori personalizzati specificati.</summary>
      <param name="fieldName" vsli:raw="The name of the field. &lt;paramref name=&quot;fieldName&quot; /&gt; cannot contain embedded nulls.">Nome del campo. <paramref name="fieldName" /> non può contenere valori Null incorporati.</param>
      <param name="type" vsli:raw="The type of the field.">Tipo di campo.</param>
      <param name="requiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the field, such as &lt;see cref=&quot;T:Microsoft.VisualC.IsConstModifier&quot; /&gt;.">Matrice di tipi che rappresentano i modificatori personalizzati obbligatori per il campo, come <see cref="T:Microsoft.VisualC.IsConstModifier" />.</param>
      <param name="optionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the field, such as &lt;see cref=&quot;T:Microsoft.VisualC.IsConstModifier&quot; /&gt;.">Matrice di tipi che rappresentano i modificatori personalizzati opzionali per il campo, come <see cref="T:Microsoft.VisualC.IsConstModifier" />.</param>
      <param name="attributes" vsli:raw="The attributes of the field.">Attributi del campo.</param>
      <returns vsli:raw="The defined field.">Campo definito.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;fieldName&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is System.Void.  &#xA;  &#xA; -or-  &#xA;  &#xA; A total size was specified for the parent class of this field.">La lunghezza di <paramref name="fieldName" /> è zero.  
-oppure- 
 <paramref name="type" /> è System.Void.  
-oppure- 
È stata specificata una dimensione totale per la classe padre di questo campo.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fieldName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fieldName" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])">
      <summary vsli:raw="Defines the generic type parameters for the current type, specifying their number and their names, and returns an array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects that can be used to set their constraints.">Definisce parametri di tipo generico per il tipo corrente, specificandone il numero e i nomi e restituisce una matrice di oggetti <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> che possono essere usati per impostare i vincoli.</summary>
      <param name="names" vsli:raw="An array of names for the generic type parameters.">Matrice di nomi per i parametri di tipo generico.</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects that can be used to define the constraints of the generic type parameters for the current type.">Matrice di oggetti <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> che può essere usata per definire i vincoli dei parametri di tipo generico per il tipo corrente.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Generic type parameters have already been defined for this type.">Parametri di tipo generico sono già stati definiti per questo tipo.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;names&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;names&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="names" /> è <see langword="null" />.  
In alternativa 
Un elemento di <paramref name="names" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;names&quot; /&gt; is an empty array.">
        <paramref name="names" /> è una matrice vuota.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
      <summary vsli:raw="Defines initialized data field in the .sdata section of the portable executable (PE) file.">Definisce il campo di dati inizializzati nella sezione .sdata del file eseguibile di tipo PE.</summary>
      <param name="name" vsli:raw="The name used to refer to the data. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nome usato per fare riferimento ai dati. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="data" vsli:raw="The blob of data.">BLOB di dati.</param>
      <param name="attributes" vsli:raw="The attributes for the field.">Attributi per il campo.</param>
      <returns vsli:raw="A field to reference the data.">Campo di riferimento ai dati.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of the data is less than or equal to zero, or greater than or equal to 0x3f0000.">La lunghezza di <paramref name="name" /> è zero.  
-oppure- 
La dimensione dei dati è minore o uguale a zero oppure maggiore o uguale a 0x3f0000.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;data&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> o <paramref name="data" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been previously called.">L'oggetto <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> è stato chiamato in precedenza.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes)">
      <summary vsli:raw="Adds a new method to the type, with the specified name and method attributes.">Aggiunge un nuovo metodo al tipo, con il nome e gli attributi del metodo specificati.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nome del metodo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">Attributi del metodo.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; representing the newly defined method.">Oggetto <see cref="T:System.Reflection.Emit.MethodBuilder" /> che rappresenta il metodo appena definito.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface, and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).">La lunghezza di <paramref name="name" /> è zero.  
-oppure- 
Il tipo dell'elemento padre di questo metodo è un'interfaccia e il metodo non è virtuale (<see langword="Overridable" /> in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  
-oppure- 
Per il tipo dinamico corrente, la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> è <see langword="true" /> ma la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions)">
      <summary vsli:raw="Adds a new method to the type, with the specified name, method attributes, and calling convention.">Aggiunge un nuovo metodo al tipo, con il nome e gli attributi del metodo e la convenzione di chiamata specificati.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nome del metodo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">Attributi del metodo.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">Convenzione di chiamata del metodo.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; representing the newly defined method.">Oggetto <see cref="T:System.Reflection.Emit.MethodBuilder" /> che rappresenta il metodo appena definito.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).">La lunghezza di <paramref name="name" /> è zero.  
-oppure- 
Il tipo dell'elemento padre di questo metodo è un'interfaccia e il metodo non è virtuale (<see langword="Overridable" /> in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  
In alternativa 
Per il tipo dinamico corrente, la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> è <see langword="true" /> ma la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary vsli:raw="Adds a new method to the type, with the specified name, method attributes, calling convention, and method signature.">Aggiunge un nuovo metodo al tipo, con il nome, gli attributi del metodo, la convenzione di chiamata e la firma del metodo specificati.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nome del metodo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">Attributi del metodo.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">Convenzione di chiamata del metodo.</param>
      <param name="returnType" vsli:raw="The return type of the method.">Tipo restituito del metodo.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the method.">Tipi dei parametri del metodo.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; representing the newly defined method.">Oggetto <see cref="T:System.Reflection.Emit.MethodBuilder" /> che rappresenta il metodo appena definito.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface, and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).">La lunghezza di <paramref name="name" /> è zero.  
In alternativa 
Il tipo dell'elemento padre di questo metodo è un'interfaccia e il metodo non è virtuale (<see langword="Overridable" /> in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  
-oppure- 
Per il tipo dinamico corrente, la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> è <see langword="true" /> ma la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a new method to the type, with the specified name, method attributes, calling convention, method signature, and custom modifiers.">Aggiunge un nuovo metodo al tipo, con il nome, gli attributi del metodo, la convenzione di chiamata, la firma del metodo e i modificatori personalizzati specificati.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nome del metodo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">Attributi del metodo.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">Convenzione di chiamata del metodo.</param>
      <param name="returnType" vsli:raw="The return type of the method.">Tipo restituito del metodo.</param>
      <param name="returnTypeRequiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the method. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Matrice di tipi che rappresenta i modificatori personalizzati obbligatori, come <see cref="T:System.Runtime.CompilerServices.IsConst" />, per il tipo restituito del metodo. Se il tipo restituito non ha modificatori personalizzati obbligatori, specificare <see langword="null" />.</param>
      <param name="returnTypeOptionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the method. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Matrice di tipi che rappresenta i modificatori personalizzati facoltativi, come <see cref="T:System.Runtime.CompilerServices.IsConst" />, per il tipo restituito del metodo. Se il tipo restituito non ha modificatori personalizzati facoltativi, specificare <see langword="null" />.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the method.">Tipi dei parametri del metodo.</param>
      <param name="parameterTypeRequiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Matrice di matrici di tipi. Ogni matrice di tipi rappresenta i modificatori personalizzati obbligatori per il parametro corrispondente, come <see cref="T:System.Runtime.CompilerServices.IsConst" />. Se un parametro particolare non ha modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di tipi. Se nessun parametro ha modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <param name="parameterTypeOptionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Matrice di matrici di tipi. Ogni matrice di tipi rappresenta i modificatori personalizzati facoltativi per il parametro corrispondente, come <see cref="T:System.Runtime.CompilerServices.IsConst" />. Se un parametro particolare non ha modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di tipi. Se nessun parametro ha modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; object representing the newly added method.">Oggetto <see cref="T:System.Reflection.Emit.MethodBuilder" /> che rappresenta il metodo appena aggiunto.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface, and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;parameterTypeRequiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;parameterTypeOptionalCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">La lunghezza di <paramref name="name" /> è zero.  
-oppure- 
Il tipo dell'elemento padre di questo metodo è un'interfaccia e il metodo non è virtuale (<see langword="Overridable" /> in Visual Basic).  
-oppure- 
La dimensione di <paramref name="parameterTypeRequiredCustomModifiers" /> o <paramref name="parameterTypeOptionalCustomModifiers" /> non è uguale a quella di <paramref name="parameterTypes" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  
In alternativa 
Per il tipo dinamico corrente, la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> è <see langword="true" /> ma la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Adds a new method to the type, with the specified name, method attributes, and method signature.">Aggiunge un nuovo metodo al tipo, con il nome, gli attributi e la firma del metodo specificati.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nome del metodo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">Attributi del metodo.</param>
      <param name="returnType" vsli:raw="The return type of the method.">Tipo restituito del metodo.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the method.">Tipi dei parametri del metodo.</param>
      <returns vsli:raw="The defined method.">Metodo definito.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface, and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).">La lunghezza di <paramref name="name" /> è zero.  
In alternativa 
Il tipo dell'elemento padre di questo metodo è un'interfaccia e il metodo non è virtuale (<see langword="Overridable" /> in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  
-oppure- 
Per il tipo dinamico corrente, la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> è <see langword="true" /> ma la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethodOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
      <summary vsli:raw="Specifies a given method body that implements a given method declaration, potentially with a different name.">Specifica un corpo del metodo che implementa una data dichiarazione di metodo, potenzialmente con un nome diverso.</summary>
      <param name="methodInfoBody" vsli:raw="The method body to be used. This should be a &lt;see langword=&quot;MethodBuilder&quot; /&gt; object.">Corpo del metodo da usare. Deve essere un oggetto <see langword="MethodBuilder" /> .</param>
      <param name="methodInfoDeclaration" vsli:raw="The method whose declaration is to be used.">Metodo di cui usare la dichiarazione.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;methodInfoBody&quot; /&gt; does not belong to this class.">
        <paramref name="methodInfoBody" /> non appartiene a questa classe.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;methodInfoBody&quot; /&gt; or &lt;paramref name=&quot;methodInfoDeclaration&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="methodInfoBody" /> o <paramref name="methodInfoDeclaration" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;methodInfoBody&quot; /&gt; is not the type represented by this &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt;.">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  
In alternativa 
Il tipo dichiarante di <paramref name="methodInfoBody" /> non è il tipo rappresentato da questo oggetto <see cref="T:System.Reflection.Emit.TypeBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String)">
      <summary vsli:raw="Defines a nested type, given its name.">Definisce un tipo annidato, dato il relativo nome.</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nome breve del tipo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <returns vsli:raw="The defined nested type.">Tipo annidato definito.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">La lunghezza di <paramref name="name" /> è zero o maggiore di 1023.  
In alternativa 
Questa operazione creerebbe un tipo con un oggetto <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> duplicato nell'assembly corrente.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes)">
      <summary vsli:raw="Defines a nested type, given its name and attributes.">Definisce un tipo annidato, dato il relativo nome e attributi.</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nome breve del tipo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attr" vsli:raw="The attributes of the type.">Attributi del tipo.</param>
      <returns vsli:raw="The defined nested type.">Tipo annidato definito.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">L'attributo annidato non è specificato.  
-oppure- 
Questo tipo è sealed.  
-oppure- 
Questo tipo è una matrice.  
-oppure- 
Questo tipo è un'interfaccia, ma il tipo annidato non è un'interfaccia.  
-oppure- 
La lunghezza di <paramref name="name" /> è zero o maggiore di 1023.  
-oppure- 
Questa operazione creerebbe un tipo con un oggetto <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> duplicato nell'assembly corrente.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary vsli:raw="Defines a nested type, given its name, attributes, and the type that it extends.">Definisce un tipo annidato a partire dal nome, dagli attributi e dal tipo che estende.</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nome breve del tipo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attr" vsli:raw="The attributes of the type.">Attributi del tipo.</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">Tipo esteso dal tipo annidato.</param>
      <returns vsli:raw="The defined nested type.">Tipo annidato definito.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">L'attributo annidato non è specificato.  
-oppure- 
Questo tipo è sealed.  
-oppure- 
Questo tipo è una matrice.  
-oppure- 
Questo tipo è un'interfaccia, ma il tipo annidato non è un'interfaccia.  
-oppure- 
La lunghezza di <paramref name="name" /> è zero o maggiore di 1023.  
-oppure- 
Questa operazione creerebbe un tipo con un oggetto <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> duplicato nell'assembly corrente.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
      <summary vsli:raw="Defines a nested type, given its name, attributes, the total size of the type, and the type that it extends.">Definisce un tipo annidato a partire dal nome, dagli attributi, dalla dimensione totale del tipo e dal tipo che estende.</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nome breve del tipo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attr" vsli:raw="The attributes of the type.">Attributi del tipo.</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">Tipo esteso dal tipo annidato.</param>
      <param name="typeSize" vsli:raw="The total size of the type.">Dimensione totale del tipo.</param>
      <returns vsli:raw="The defined nested type.">Tipo annidato definito.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">L'attributo annidato non è specificato.  
In alternativa 
Questo tipo è sealed.  
-oppure- 
Questo tipo è una matrice.  
-oppure- 
Questo tipo è un'interfaccia, ma il tipo annidato non è un'interfaccia.  
-oppure- 
La lunghezza di <paramref name="name" /> è zero o maggiore di 1023.  
In alternativa 
Questa operazione creerebbe un tipo con un oggetto <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> duplicato nell'assembly corrente.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
      <summary vsli:raw="Defines a nested type, given its name, attributes, the type that it extends, and the packing size.">Definisce un tipo annidato a partire dal nome, dagli attributi, dal tipo che estende e dalla dimensione di compressione.</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nome breve del tipo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attr" vsli:raw="The attributes of the type.">Attributi del tipo.</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">Tipo esteso dal tipo annidato.</param>
      <param name="packSize" vsli:raw="The packing size of the type.">Dimensione di compressione del tipo.</param>
      <returns vsli:raw="The defined nested type.">Tipo annidato definito.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">L'attributo annidato non è specificato.  
In alternativa 
Questo tipo è sealed.  
In alternativa 
Questo tipo è una matrice.  
In alternativa 
Questo tipo è un'interfaccia, ma il tipo annidato non è un'interfaccia.  
-oppure- 
La lunghezza di <paramref name="name" /> è zero o maggiore di 1023.  
In alternativa 
Questa operazione creerebbe un tipo con un oggetto <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> duplicato nell'assembly corrente.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)">
      <summary vsli:raw="Defines a nested type, given its name, attributes, size, and the type that it extends.">Definisce un tipo annidato a partire dal nome, dagli attributi, dalla dimensione e dal tipo che estende.</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded null values.">Nome breve del tipo. L'oggetto <paramref name="name" /> non può contenere valori null incorporati.</param>
      <param name="attr" vsli:raw="The attributes of the type.">Attributi del tipo.</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">Tipo esteso dal tipo annidato.</param>
      <param name="packSize" vsli:raw="The packing size of the type.">Dimensione di compressione del tipo.</param>
      <param name="typeSize" vsli:raw="The total size of the type.">Dimensione totale del tipo.</param>
      <returns vsli:raw="The defined nested type.">Tipo annidato definito.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Defines a nested type, given its name, attributes, the type that it extends, and the interfaces that it implements.">Definisce un tipo annidato a partire dal nome, dagli attributi, dal tipo che estende e dalle interfacce che implementa.</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nome breve del tipo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attr" vsli:raw="The attributes of the type.">Attributi del tipo.</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">Tipo esteso dal tipo annidato.</param>
      <param name="interfaces" vsli:raw="The interfaces that the nested type implements.">Interfacce implementate dal tipo annidato.</param>
      <returns vsli:raw="The defined nested type.">Tipo annidato definito.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">L'attributo annidato non è specificato.  
-oppure- 
Questo tipo è sealed.  
-oppure- 
Questo tipo è una matrice.  
In alternativa 
Questo tipo è un'interfaccia, ma il tipo annidato non è un'interfaccia.  
In alternativa 
La lunghezza di <paramref name="name" /> è zero o maggiore di 1023.  
-oppure- 
Questa operazione creerebbe un tipo con un oggetto <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> duplicato nell'assembly corrente.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of the &lt;paramref name=&quot;interfaces&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.  
-oppure- 
Un elemento della matrice <paramref name="interfaces" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Defines a &lt;see langword=&quot;PInvoke&quot; /&gt; method given its name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the &lt;see langword=&quot;PInvoke&quot; /&gt; flags.">Definisce un metodo <see langword="PInvoke" /> in base al nome, al nome della DLL in cui è definito il metodo, agli attributi del metodo, alla convenzione di chiamata del metodo, al tipo restituito del metodo, ai tipi di parametri del metodo e ai flag <see langword="PInvoke" />.</summary>
      <param name="name" vsli:raw="The name of the &lt;see langword=&quot;PInvoke&quot; /&gt; method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nome del metodo <see langword="PInvoke" />. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="dllName" vsli:raw="The name of the DLL in which the &lt;see langword=&quot;PInvoke&quot; /&gt; method is defined.">Nome della DLL in cui è definito il metodo <see langword="PInvoke" />.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">Attributi del metodo.</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">Convenzione di chiamata del metodo.</param>
      <param name="returnType" vsli:raw="The method's return type.">Tipo restituito del metodo.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">Tipi dei parametri del metodo.</param>
      <param name="nativeCallConv" vsli:raw="The native calling convention.">Convenzione di chiamata nativa.</param>
      <param name="nativeCharSet" vsli:raw="The method's native character set.">Set di caratteri nativo del metodo.</param>
      <returns vsli:raw="The defined &lt;see langword=&quot;PInvoke&quot; /&gt; method.">Metodo <see langword="PInvoke" /> definito.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static.  &#xA;  &#xA; -or-  &#xA;  &#xA; The parent type is an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is abstract.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method was previously defined.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;dllName&quot; /&gt; is zero.">Il metodo non è statico.  
-oppure- 
Il tipo padre è un'interfaccia.  
-oppure- 
Il metodo è di tipo abstract.  
In alternativa 
Il metodo è stato definito in precedenza.  
-oppure- 
La lunghezza di <paramref name="name" /> o <paramref name="dllName" /> è zero.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;dllName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> o <paramref name="dllName" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Il tipo contenitore è stato creato in precedenza con <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Defines a &lt;see langword=&quot;PInvoke&quot; /&gt; method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the &lt;see langword=&quot;PInvoke&quot; /&gt; flags.">Definisce un metodo <see langword="PInvoke" /> in base al nome, al nome della DLL in cui è definito il metodo, al nome del punto di ingresso, agli attributi del metodo, alla convenzione di chiamata del metodo, al tipo restituito del metodo, ai tipi di parametri del metodo e ai flag <see langword="PInvoke" />.</summary>
      <param name="name" vsli:raw="The name of the &lt;see langword=&quot;PInvoke&quot; /&gt; method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nome del metodo <see langword="PInvoke" />. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="dllName" vsli:raw="The name of the DLL in which the &lt;see langword=&quot;PInvoke&quot; /&gt; method is defined.">Nome della DLL in cui è definito il metodo <see langword="PInvoke" />.</param>
      <param name="entryName" vsli:raw="The name of the entry point in the DLL.">Nome del punto di ingresso nella DLL.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">Attributi del metodo.</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">Convenzione di chiamata del metodo.</param>
      <param name="returnType" vsli:raw="The method's return type.">Tipo restituito del metodo.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">Tipi dei parametri del metodo.</param>
      <param name="nativeCallConv" vsli:raw="The native calling convention.">Convenzione di chiamata nativa.</param>
      <param name="nativeCharSet" vsli:raw="The method's native character set.">Set di caratteri nativo del metodo.</param>
      <returns vsli:raw="The defined &lt;see langword=&quot;PInvoke&quot; /&gt; method.">Metodo <see langword="PInvoke" /> definito.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static.  &#xA;  &#xA; -or-  &#xA;  &#xA; The parent type is an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is abstract.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method was previously defined.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt;, &lt;paramref name=&quot;dllName&quot; /&gt;, or &lt;paramref name=&quot;entryName&quot; /&gt; is zero.">Il metodo non è statico.  
-oppure- 
Il tipo padre è un'interfaccia.  
-oppure- 
Il metodo è di tipo abstract.  
-oppure- 
Il metodo è stato definito in precedenza.  
-oppure- 
La lunghezza di <paramref name="name" />, <paramref name="dllName" /> o <paramref name="entryName" /> è zero.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt;, &lt;paramref name=&quot;dllName&quot; /&gt;, or &lt;paramref name=&quot;entryName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />, <paramref name="dllName" /> o <paramref name="entryName" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Il tipo contenitore è stato creato in precedenza con <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Type[][],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][])">
      <summary>Definisce un metodo <see langword="PInvoke" /> in base al nome, al nome della DLL in cui è definito il metodo, al nome del punto di ingresso, agli attributi del metodo, alla convenzione di chiamata del metodo, al tipo restituito del metodo, ai tipi di parametri del metodo, ai flag <see langword="PInvoke" /> e ai modificatori personalizzati relativi ai parametri e al tipo restituito.</summary>
      <param name="name">Nome del metodo <see langword="PInvoke" />. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="dllName">Nome della DLL in cui è definito il metodo <see langword="PInvoke" />.</param>
      <param name="parameterTypeOptionalCustomModifiers">Matrice di matrici di tipi. Ogni matrice di tipi rappresenta i modificatori personalizzati facoltativi per il parametro corrispondente, come <see cref="T:System.Runtime.CompilerServices.IsConst" />. Se un parametro particolare non ha modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di tipi. Se nessun parametro ha modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <param name="nativeCallConv">Convenzione di chiamata nativa.</param>
      <param name="nativeCharSet">Set di caratteri nativo del metodo.</param>
      <param name="entryName">Nome del punto di ingresso nella DLL.</param>
      <param name="attributes">Attributi del metodo.</param>
      <param name="callingConvention">Convenzione di chiamata del metodo.</param>
      <param name="returnType">Tipo restituito del metodo.</param>
      <param name="returnTypeRequiredCustomModifiers">Matrice di tipi che rappresenta i modificatori personalizzati obbligatori, come <see cref="T:System.Runtime.CompilerServices.IsConst" />, per il tipo restituito del metodo. Se il tipo restituito non ha modificatori personalizzati obbligatori, specificare <see langword="null" />.</param>
      <param name="returnTypeOptionalCustomModifiers">Matrice di tipi che rappresenta i modificatori personalizzati facoltativi, come <see cref="T:System.Runtime.CompilerServices.IsConst" />, per il tipo restituito del metodo. Se il tipo restituito non ha modificatori personalizzati facoltativi, specificare <see langword="null" />.</param>
      <param name="parameterTypes">Tipi dei parametri del metodo.</param>
      <param name="parameterTypeRequiredCustomModifiers">Matrice di matrici di tipi. Ogni matrice di tipi rappresenta i modificatori personalizzati obbligatori per il parametro corrispondente, come <see cref="T:System.Runtime.CompilerServices.IsConst" />. Se un parametro particolare non ha modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di tipi. Se nessun parametro ha modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <returns>Oggetto <see cref="T:System.Reflection.Emit.MethodBuilder" /> che rappresenta il metodo <see langword="PInvoke" /> definito.</returns>
      <exception cref="T:System.ArgumentException">Il metodo non è statico.  
In alternativa 
Il tipo padre è un'interfaccia.  
-oppure- 
Il metodo è di tipo abstract.  
In alternativa 
Il metodo è stato definito in precedenza.  
-oppure- 
La lunghezza di <paramref name="name" />, <paramref name="dllName" /> o <paramref name="entryName" /> è zero.  
-oppure- 
La dimensione di <paramref name="parameterTypeRequiredCustomModifiers" /> o <paramref name="parameterTypeOptionalCustomModifiers" /> non è uguale a quella di <paramref name="parameterTypes" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />, <paramref name="dllName" /> o <paramref name="entryName" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  
-oppure- 
Per il tipo dinamico corrente, la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> è <see langword="true" /> ma la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary vsli:raw="Adds a new property to the type, with the given name, attributes, calling convention, and property signature.">Aggiunge una nuova proprietà al tipo, con il nome, gli attributi, la convenzione di chiamata e la firma della proprietà specificati.</summary>
      <param name="name" vsli:raw="The name of the property. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nome della proprietà. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attributes" vsli:raw="The attributes of the property.">Attributi della proprietà.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the property accessors.">Convenzione di chiamata delle funzioni di accesso della proprietà.</param>
      <param name="returnType" vsli:raw="The return type of the property.">Tipo restituito della proprietà.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the property.">Tipi dei parametri della proprietà.</param>
      <returns vsli:raw="The defined property.">Proprietà definita.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">La lunghezza di <paramref name="name" /> è zero.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Any of the elements of the &lt;paramref name=&quot;parameterTypes&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.  
In alternativa 
Uno degli elementi della matrice <paramref name="parameterTypes" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a new property to the type, with the given name, calling convention, property signature, and custom modifiers.">Aggiunge una nuova proprietà al tipo, con il nome, la convenzione di chiamata, la firma e i modificatori personalizzati specificati.</summary>
      <param name="name" vsli:raw="The name of the property. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nome della proprietà. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attributes" vsli:raw="The attributes of the property.">Attributi della proprietà.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the property accessors.">Convenzione di chiamata delle funzioni di accesso della proprietà.</param>
      <param name="returnType" vsli:raw="The return type of the property.">Tipo restituito della proprietà.</param>
      <param name="returnTypeRequiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the property. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Matrice di tipi che rappresenta i modificatori personalizzati obbligatori, come <see cref="T:System.Runtime.CompilerServices.IsConst" />, per il tipo restituito della proprietà. Se il tipo restituito non ha modificatori personalizzati obbligatori, specificare <see langword="null" />.</param>
      <param name="returnTypeOptionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the property. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Matrice di tipi che rappresenta i modificatori personalizzati facoltativi, come <see cref="T:System.Runtime.CompilerServices.IsConst" />, per il tipo restituito della proprietà. Se il tipo restituito non ha modificatori personalizzati facoltativi, specificare <see langword="null" />.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the property.">Tipi dei parametri della proprietà.</param>
      <param name="parameterTypeRequiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Matrice di matrici di tipi. Ogni matrice di tipi rappresenta i modificatori personalizzati obbligatori per il parametro corrispondente, come <see cref="T:System.Runtime.CompilerServices.IsConst" />. Se un parametro particolare non ha modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di tipi. Se nessun parametro ha modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <param name="parameterTypeOptionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Matrice di matrici di tipi. Ogni matrice di tipi rappresenta i modificatori personalizzati facoltativi per il parametro corrispondente, come <see cref="T:System.Runtime.CompilerServices.IsConst" />. Se un parametro particolare non ha modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di tipi. Se nessun parametro ha modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <returns vsli:raw="The defined property.">Proprietà definita.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">La lunghezza di <paramref name="name" /> è zero.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Any of the elements of the &lt;paramref name=&quot;parameterTypes&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.  
In alternativa 
Uno degli elementi della matrice <paramref name="parameterTypes" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Adds a new property to the type, with the given name and property signature.">Aggiunge una nuova proprietà al tipo, con il nome e la firma della proprietà specificati.</summary>
      <param name="name" vsli:raw="The name of the property. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nome della proprietà. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attributes" vsli:raw="The attributes of the property.">Attributi della proprietà.</param>
      <param name="returnType" vsli:raw="The return type of the property.">Tipo restituito della proprietà.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the property.">Tipi dei parametri della proprietà.</param>
      <returns vsli:raw="The defined property.">Proprietà definita.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">La lunghezza di <paramref name="name" /> è zero.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Any of the elements of the &lt;paramref name=&quot;parameterTypes&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.  
-oppure- 
Uno degli elementi della matrice <paramref name="parameterTypes" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a new property to the type, with the given name, property signature, and custom modifiers.">Aggiunge una nuova proprietà al tipo, con il nome, la firma della proprietà e i modificatori personalizzati specificati.</summary>
      <param name="name" vsli:raw="The name of the property. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nome della proprietà. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attributes" vsli:raw="The attributes of the property.">Attributi della proprietà.</param>
      <param name="returnType" vsli:raw="The return type of the property.">Tipo restituito della proprietà.</param>
      <param name="returnTypeRequiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the property. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Matrice di tipi che rappresenta i modificatori personalizzati obbligatori, come <see cref="T:System.Runtime.CompilerServices.IsConst" />, per il tipo restituito della proprietà. Se il tipo restituito non ha modificatori personalizzati obbligatori, specificare <see langword="null" />.</param>
      <param name="returnTypeOptionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the property. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Matrice di tipi che rappresenta i modificatori personalizzati facoltativi, come <see cref="T:System.Runtime.CompilerServices.IsConst" />, per il tipo restituito della proprietà. Se il tipo restituito non ha modificatori personalizzati facoltativi, specificare <see langword="null" />.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the property.">Tipi dei parametri della proprietà.</param>
      <param name="parameterTypeRequiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Matrice di matrici di tipi. Ogni matrice di tipi rappresenta i modificatori personalizzati obbligatori per il parametro corrispondente, come <see cref="T:System.Runtime.CompilerServices.IsConst" />. Se un parametro particolare non ha modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di tipi. Se nessun parametro ha modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <param name="parameterTypeOptionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Matrice di matrici di tipi. Ogni matrice di tipi rappresenta i modificatori personalizzati facoltativi per il parametro corrispondente, come <see cref="T:System.Runtime.CompilerServices.IsConst" />. Se un parametro particolare non ha modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di tipi. Se nessun parametro ha modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <returns vsli:raw="The defined property.">Proprietà definita.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">La lunghezza di <paramref name="name" /> è zero.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;  &#xA;  &#xA; -or-  &#xA;  &#xA; Any of the elements of the &lt;paramref name=&quot;parameterTypes&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;">
        <paramref name="name" /> è <see langword="null" />  
-oppure- 
Uno degli elementi della matrice <paramref name="parameterTypes" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer">
      <summary vsli:raw="Defines the initializer for this type.">Definisce l'inizializzatore per questo tipo.</summary>
      <returns vsli:raw="Returns a type initializer.">Restituisce un inizializzatore di tipo.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Il tipo contenitore è stato creato in precedenza con <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
      <summary vsli:raw="Defines an uninitialized data field in the &lt;see langword=&quot;.sdata&quot; /&gt; section of the portable executable (PE) file.">Definisce un campo di dati non inizializzati nella sezione <see langword=".sdata" /> del file eseguibile di tipo PE.</summary>
      <param name="name" vsli:raw="The name used to refer to the data. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Nome usato per fare riferimento ai dati. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="size" vsli:raw="The size of the data field.">Dimensione del campo dati.</param>
      <param name="attributes" vsli:raw="The attributes for the field.">Attributi per il campo.</param>
      <returns vsli:raw="A field to reference the data.">Campo di riferimento ai dati.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;size&quot; /&gt; is less than or equal to zero, or greater than or equal to 0x003f0000.">La lunghezza di <paramref name="name" /> è zero.  
-oppure- 
 <paramref name="size" /> è minore di o uguale a zero oppure maggiore di o uguale a 0x003f0000.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.FullName">
      <summary vsli:raw="Retrieves the full path of this type.">Recupera il percorso completo di questo tipo.</summary>
      <returns vsli:raw="Read-only. Retrieves the full path of this type.">Sola lettura. Recupera il percorso completo di questo tipo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterAttributes">
      <summary vsli:raw="Gets a value that indicates the covariance and special constraints of the current generic type parameter.">Ottiene un valore che indica la covarianza e i vincoli speciali del parametro di tipo generico corrente.</summary>
      <returns vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.GenericParameterAttributes&quot; /&gt; values that describes the covariance and special constraints of the current generic type parameter.">Combinazione bit per bit di valori <see cref="T:System.Reflection.GenericParameterAttributes" /> che descrive la covariante e i vincoli speciali del parametro di tipo generico corrente.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterPosition">
      <summary vsli:raw="Gets the position of a type parameter in the type parameter list of the generic type that declared the parameter.">Ottiene la posizione di un parametro di tipo nell'elenco dei parametri di tipo del tipo generico che ha dichiarato il parametro.</summary>
      <returns vsli:raw="If the current &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object represents a generic type parameter, the position of the type parameter in the type parameter list of the generic type that declared the parameter; otherwise, undefined.">Se l'oggetto <see cref="T:System.Reflection.Emit.TypeBuilder" /> corrente rappresenta un parametro di tipo generico, la posizione del parametro di tipo nell'elenco di parametri di tipo del tipo generico che ha dichiarato il parametro; in caso contrario, non definito.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructor(System.Type,System.Reflection.ConstructorInfo)">
      <summary vsli:raw="Returns the constructor of the specified constructed generic type that corresponds to the specified constructor of the generic type definition.">Restituisce il costruttore del tipo generico costruito specificato che corrisponde al costruttore specificato della definizione di tipo generico.</summary>
      <param name="type" vsli:raw="The constructed generic type whose constructor is returned.">Tipo generico creato di cui viene restituito il costruttore.</param>
      <param name="constructor" vsli:raw="A constructor on the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;, which specifies which constructor of &lt;paramref name=&quot;type&quot; /&gt; to return.">Costruttore sulla definizione di tipo generico dell'oggetto <paramref name="type" />, che specifica il costruttore di <paramref name="type" /> da restituire.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; object that represents the constructor of &lt;paramref name=&quot;type&quot; /&gt; corresponding to &lt;paramref name=&quot;constructor&quot; /&gt;, which specifies a constructor belonging to the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">Oggetto <see cref="T:System.Reflection.ConstructorInfo" /> che rappresenta il costruttore di <paramref name="type" /> corrispondente a <paramref name="constructor" />, che specifica un costruttore appartenente alla definizione di tipo generico di <paramref name="type" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; does not represent a generic type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is not of type &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;constructor&quot; /&gt; is not a generic type definition.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;constructor&quot; /&gt; is not the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="type" /> non rappresenta un tipo generico.  
In alternativa 
 <paramref name="type" /> non è di tipo <see cref="T:System.Reflection.Emit.TypeBuilder" />.  
-oppure- 
Il tipo dichiarante di <paramref name="constructor" /> non è una definizione di tipo generico.  
-oppure- 
Il tipo dichiarante di <paramref name="constructor" /> non è la definizione di tipo generico di <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; objects representing the public and non-public constructors defined for this class, as specified.">Restituisce una matrice di oggetti <see cref="T:System.Reflection.ConstructorInfo" /> che rappresentano i costruttori pubblici e non pubblici definiti per questa classe, come specificato.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />, come in <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned.">Restituisce una matrice di oggetti <see cref="T:System.Reflection.ConstructorInfo" /> che rappresentano i costruttori specificati definiti per questa classe. Se non è stato definito alcun costruttore, verrà restituita una matrice vuota.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Questo metodo non viene implementato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this type.">Restituisce tutti gli attributi personalizzati definiti per questo tipo.</summary>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">Specifica se trovare gli attributi cercandoli nella catena di ereditarietà del membro.</param>
      <returns vsli:raw="Returns an array of objects representing all the custom attributes of this type.">Restituisce una matrice di oggetti che rappresentano tutti gli attributi personalizzati di questo tipo.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types. Retrieve the type using &lt;see cref=&quot;M:System.Type.GetType&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Questo metodo non è attualmente supportato per i tipi incompleti. Recuperare il tipo usando <see cref="M:System.Type.GetType" /> e chiamare <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> nell'oggetto <see cref="T:System.Type" /> restituito.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes of the current type that are assignable to a specified type.">Restituisce tutti gli attributi personalizzati del tipo corrente che è possibile assegnare a un tipo specificato.</summary>
      <param name="attributeType" vsli:raw="The type of attribute to search for. Only attributes that are assignable to this type are returned.">Tipo di attributo da cercare. Vengono restituiti solo gli attributi assegnabili a questo tipo.</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">Specifica se trovare gli attributi cercandoli nella catena di ereditarietà del membro.</param>
      <returns vsli:raw="An array of custom attributes defined on the current type.">Matrice di attributi personalizzati definiti per il tipo corrente.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types. Retrieve the type using &lt;see cref=&quot;M:System.Type.GetType&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Questo metodo non è attualmente supportato per i tipi incompleti. Recuperare il tipo usando <see cref="M:System.Type.GetType" /> e chiamare <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> nell'oggetto <see cref="T:System.Type" />restituito.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The type must be a type provided by the underlying runtime system.">Il tipo deve essere uno di quelli forniti dal sistema di runtime sottostante.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetElementType">
      <summary vsli:raw="Calling this method always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">La chiamata di questo metodo genera sempre un'eccezione <see cref="T:System.NotSupportedException" />.</summary>
      <returns vsli:raw="This method is not supported. No value is returned.">Questo metodo non è supportato. Non vengono restituiti valori.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Questo metodo non è supportato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the event with the specified name.">Restituisce l'evento con il nome specificato.</summary>
      <param name="name" vsli:raw="The name of the event to search for.">Nome dell'evento di cui eseguire la ricerca.</param>
      <param name="bindingAttr" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; values that limits the search.">Combinazione bit per bit dei valori <see cref="T:System.Reflection.BindingFlags" /> che limita la ricerca.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; object representing the event declared or inherited by this type with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if there are no matches.">Oggetto <see cref="T:System.Reflection.EventInfo" /> che rappresenta l'evento dichiarato o ereditato da questo tipo con il nome specificato o <see langword="null" /> in assenza di corrispondenze.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Questo metodo non viene implementato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents">
      <summary vsli:raw="Returns the public events declared or inherited by this type.">Restituisce gli eventi pubblici dichiarati o ereditati da questo tipo.</summary>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events.">Restituisce una matrice di oggetti <see cref="T:System.Reflection.EventInfo" /> che rappresentano gli eventi pubblici dichiarati o ereditati da questo tipo. In assenza di eventi pubblici, viene restituita una matrice vuota.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Questo metodo non viene implementato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public events that are declared by this type.">Restituisce gli eventi pubblici e non pubblici dichiarati da questo tipo.</summary>
      <param name="bindingAttr" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; values that limits the search.">Combinazione bit per bit dei valori <see cref="T:System.Reflection.BindingFlags" /> che limita la ricerca.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; objects representing the events declared or inherited by this type that match the specified binding flags. An empty array is returned if there are no matching events.">Restituisce una matrice di oggetti <see cref="T:System.Reflection.EventInfo" /> che rappresentano gli eventi dichiarati o ereditati da questo tipo che corrispondono ai flag di binding specificati. In assenza di eventi corrispondenti, viene restituita una matrice vuota.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Questo metodo non viene implementato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the field specified by the given name.">Restituisce il campo specificato con il nome specificato.</summary>
      <param name="name" vsli:raw="The name of the field to get.">Nome del campo da ottenere.</param>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />, come in <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns vsli:raw="Returns the &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches then &lt;see langword=&quot;null&quot; /&gt; is returned.">Restituisce l'oggetto <see cref="T:System.Reflection.FieldInfo" /> che rappresenta il campo dichiarato o ereditato da questo tipo con il nome specificato e il modificatore pubblico o non pubblico. Se non sono presenti corrispondenze, verrà restituito <see langword="null" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Questo metodo non viene implementato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.Type,System.Reflection.FieldInfo)">
      <summary vsli:raw="Returns the field of the specified constructed generic type that corresponds to the specified field of the generic type definition.">Restituisce il campo del tipo generico specificato che corrisponde al campo specificato della definizione di tipo generico.</summary>
      <param name="type" vsli:raw="The constructed generic type whose field is returned.">Il tipo generico creato di cui viene restituito il campo.</param>
      <param name="field" vsli:raw="A field on the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;, which specifies which field of &lt;paramref name=&quot;type&quot; /&gt; to return.">Campo sulla definizione di tipo generico dell'oggetto <paramref name="type" />, che specifica il campo di <paramref name="type" /> da restituire.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; object that represents the field of &lt;paramref name=&quot;type&quot; /&gt; corresponding to &lt;paramref name=&quot;field&quot; /&gt;, which specifies a field belonging to the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">Oggetto <see cref="T:System.Reflection.FieldInfo" /> che rappresenta il campo di <paramref name="type" /> corrispondente a <paramref name="field" />, che specifica un campo appartenente alla definizione di tipo generico di <paramref name="type" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; does not represent a generic type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is not of type &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;field&quot; /&gt; is not a generic type definition.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;field&quot; /&gt; is not the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="type" /> non rappresenta un tipo generico.  
-oppure- 
 <paramref name="type" /> non è di tipo <see cref="T:System.Reflection.Emit.TypeBuilder" />.  
In alternativa 
Il tipo dichiarante di <paramref name="field" /> non è una definizione di tipo generico.  
-oppure- 
Il tipo dichiarante di <paramref name="field" /> non è la definizione di tipo generico di <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public fields that are declared by this type.">Restituisce i campi pubblici e non pubblici dichiarati da questo tipo.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />: <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified.">Restituisce una matrice di oggetti <see cref="T:System.Reflection.FieldInfo" /> che rappresentano i campi pubblici e non pubblici dichiarati o ereditati da questo tipo. In assenza di campi, viene restituita una matrice vuota, come specificato.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Questo metodo non viene implementato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericArguments">
      <summary vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the type arguments of a generic type or the type parameters of a generic type definition.">Restituisce una matrice di oggetti <see cref="T:System.Type" /> che rappresentano gli argomenti di tipo di un tipo generico o i parametri di tipo di una definizione di tipo generico.</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects. The elements of the array represent the type arguments of a generic type or the type parameters of a generic type definition.">Matrice di oggetti <see cref="T:System.Type" />. Gli elementi della matrice rappresentano gli argomenti tipo di un tipo generico o i parametri di tipo di una definizione di tipo generico.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a generic type definition from which the current type can be obtained.">Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta una definizione di tipo generico da cui è possibile ottenere il tipo generico.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing a generic type definition from which the current type can be obtained.">Oggetto <see cref="T:System.Type" /> che rappresenta una definizione di tipo generico da cui è possibile ottenere il tipo generico.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current type is not generic. That is, &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; returns &lt;see langword=&quot;false&quot; /&gt;.">Il tipo corrente non è generico. Ciò significa che <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> restituisce <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterface(System.String,System.Boolean)">
      <summary vsli:raw="Returns the interface implemented (directly or indirectly) by this class with the fully qualified name matching the given interface name.">Restituisce l'interfaccia implementata (direttamente o indirettamente) da questa classe, con il nome completo corrispondente al nome di interfaccia specificato.</summary>
      <param name="name" vsli:raw="The name of the interface.">Nome dell'interfaccia.</param>
      <param name="ignoreCase" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the search is case-insensitive. If &lt;see langword=&quot;false&quot; /&gt;, the search is case-sensitive.">Se <see langword="true" />, la ricerca non fa distinzione tra maiuscole e minuscole. Se <see langword="false" />, la ricerca fa distinzione tra maiuscole e minuscole.</param>
      <returns vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the implemented interface. Returns null if no interface matching name is found.">Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta l'interfaccia implementata. Restituisce Null se non viene trovato alcun nome di interfaccia corrispondente.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Questo metodo non viene implementato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaceMap(System.Type)">
      <summary vsli:raw="Returns an interface mapping for the requested interface.">Restituisce un mapping di interfaccia per l'interfaccia richiesta.</summary>
      <param name="interfaceType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the interface for which the mapping is to be retrieved.">Oggetto <see cref="T:System.Type" /> dell'interfaccia per cui recuperare il mapping.</param>
      <returns vsli:raw="Returns the requested interface mapping.">Restituisce il mapping dell'interfaccia richiesto.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Questo metodo non viene implementato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaces">
      <summary vsli:raw="Returns an array of all the interfaces implemented on this type and its base types.">Restituisce una matrice di tutte le interfacce implementate nel tipo e nei relativi tipi di base.</summary>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the implemented interfaces. If none are defined, an empty array is returned.">Restituisce una matrice di oggetti <see cref="T:System.Type" /> che rappresentano le interfacce implementate. Se non è stata definita alcuna interfaccia, viene restituita una matrice vuota.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public members declared or inherited by this type, as specified.">Restituisce tutti i membri pubblici e non pubblici dichiarati o ereditati da questo tipo, come specificato.</summary>
      <param name="name" vsli:raw="The name of the member.">Nome del membro.</param>
      <param name="type" vsli:raw="The type of the member to return.">Tipo del membro da restituire.</param>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />, come in <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects representing the public and non-public members defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public members are returned.">Restituisce una matrice di oggetti <see cref="T:System.Reflection.MemberInfo" /> che rappresentano i membri pubblici e non pubblici definiti sul tipo se è usato il parametro <paramref name="nonPublic" />; in caso contrario, vengono restituiti solo i membri pubblici.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Questo metodo non viene implementato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the members for the public and non-public members declared or inherited by this type.">Restituisce i membri per i membri pubblici e non pubblici dichiarati o ereditati da questo tipo.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />, ad esempio <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members.">Restituisce una matrice di oggetti <see cref="T:System.Reflection.MemberInfo" /> che rappresentano i membri pubblici o non pubblici dichiarati o ereditati da questo tipo. In assenza di membri corrispondenti, viene restituita una matrice vuota.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Questo metodo non viene implementato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethod(System.Type,System.Reflection.MethodInfo)">
      <summary vsli:raw="Returns the method of the specified constructed generic type that corresponds to the specified method of the generic type definition.">Restituisce il metodo del tipo generico costruito specificato che corrisponde al metodo specificato della definizione di tipo generico.</summary>
      <param name="type" vsli:raw="The constructed generic type whose method is returned.">Tipo generico costruito di cui viene restituito il metodo.</param>
      <param name="method" vsli:raw="A method on the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;, which specifies which method of &lt;paramref name=&quot;type&quot; /&gt; to return.">Metodo sulla definizione di tipo generico dell'oggetto <paramref name="type" />, che specifica quale metodo di <paramref name="type" /> restituire.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object that represents the method of &lt;paramref name=&quot;type&quot; /&gt; corresponding to &lt;paramref name=&quot;method&quot; /&gt;, which specifies a method belonging to the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">Un oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo di <paramref name="type" /> corrispondente a <paramref name="method" />, che specifica un metodo appartenente alla definizione di tipo generico di <paramref name="type" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is a generic method that is not a generic method definition.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; does not represent a generic type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is not of type &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;method&quot; /&gt; is not a generic type definition.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;method&quot; /&gt; is not the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="method" /> è un metodo generico che non è una definizione di metodo generico.  
-oppure- 
 <paramref name="type" /> non rappresenta un tipo generico.  
-oppure- 
 <paramref name="type" /> non è di tipo <see cref="T:System.Reflection.Emit.TypeBuilder" />.  
-oppure- 
Il tipo dichiarante di <paramref name="method" /> non è una definizione di tipo generico.  
In alternativa 
Il tipo dichiarante di <paramref name="method" /> non è la definizione di tipo generico di <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public methods declared or inherited by this type, as specified.">Restituisce tutti i metodi pubblici e non pubblici dichiarati o ereditati da questo tipo, come specificato.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />, come in <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; objects representing the public and non-public methods defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public methods are returned.">Restituisce una matrice di oggetti <see cref="T:System.Reflection.MethodInfo" /> che rappresentano i metodi pubblici e non pubblici definiti sul tipo se è usato il parametro <paramref name="nonPublic" />; in caso contrario, vengono restituiti solo i metodi pubblici.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Questo metodo non viene implementato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public nested types that are declared by this type.">Restituisce i tipi annidati pubblici e non pubblici dichiarati da questo tipo.</summary>
      <param name="name" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the nested type to get.">Oggetto <see cref="T:System.String" /> che contiene il nome del tipo annidato da ottenere.</param>
      <param name="bindingAttr" vsli:raw="A bitmask comprised of one or more &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; that specify how the search is conducted.  &#xA;  &#xA; -or-  &#xA;  &#xA; Zero, to conduct a case-sensitive search for public methods.">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.  
-oppure- 
Zero, per eseguire una ricerca di metodi pubblici con distinzione tra maiuscole e minuscole.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the nested type that matches the specified requirements, if found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo annidato corrispondente ai requisiti specificati, se presente; in caso contrario, <see langword="null" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Questo metodo non viene implementato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public nested types that are declared or inherited by this type.">Restituisce i tipi annidati pubblici e non pubblici dichiarati o ereditati da questo tipo.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />, come in <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing all the types nested within the current &lt;see cref=&quot;T:System.Type&quot; /&gt; that match the specified binding constraints.  &#xA;  &#xA; An empty array of type &lt;see cref=&quot;T:System.Type&quot; /&gt;, if no types are nested within the current &lt;see cref=&quot;T:System.Type&quot; /&gt;, or if none of the nested types match the binding constraints.">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano tutti i tipi annidati nell'oggetto <see cref="T:System.Type" /> corrente che corrispondono ai vincoli di associazione specificati.  
Matrice vuota di tipo <see cref="T:System.Type" />, se l'oggetto <see cref="T:System.Type" /> corrente non contiene tipi annidati o se nessuno dei tipi annidati corrisponde ai vincoli di associazione.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Questo metodo non viene implementato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public properties declared or inherited by this type, as specified.">Restituisce tutte le proprietà pubbliche e non pubbliche dichiarate o ereditate da questo tipo, come specificato.</summary>
      <param name="bindingAttr" vsli:raw="This invocation attribute. This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Attributo di chiamata. Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />: <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns vsli:raw="Returns an array of &lt;see langword=&quot;PropertyInfo&quot; /&gt; objects representing the public and non-public properties defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public properties are returned.">Restituisce una matrice di oggetti <see langword="PropertyInfo" /> che rappresentano le proprietà pubbliche e non pubbliche definite per questo tipo se viene usato il parametro <paramref name="nonPublic" />; in caso contrario, vengono restituite solo le proprietà pubbliche.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Questo metodo non viene implementato per i tipi incompleti.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GUID">
      <summary vsli:raw="Retrieves the GUID of this type.">Recupera il GUID di questo tipo.</summary>
      <returns vsli:raw="Read-only. Retrieves the GUID of this type.">Sola lettura. Recupera il GUID di questo tipo</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types.">Questo metodo non è attualmente supportato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary vsli:raw="Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.">Richiama il membro specificato. Il metodo da richiamare deve essere accessibile e fornire massima corrispondenza con l'elenco di argomenti specificato, in conformità ai vincoli del binder e degli attributi di chiamata specificati.</summary>
      <param name="name" vsli:raw="The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.">Nome del membro da richiamare. Può essere un costruttore, un metodo, una proprietà o un campo. È necessario specificare un attributo di chiamata appropriato. Si noti che è possibile richiamare il membro predefinito di una classe passando una stringa vuota come nome del membro.</param>
      <param name="invokeAttr" vsli:raw="The invocation attribute. This must be a bit flag from &lt;see langword=&quot;BindingFlags&quot; /&gt;.">Attributo di chiamata. Deve essere un flag di bit di <see langword="BindingFlags" />.</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If binder is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used. See &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt;.">Oggetto che consente l'associazione, la coercizione dei tipi di argomento, la chiamata dei membri e il recupero di oggetti <see langword="MemberInfo" /> tramite reflection. Se il binder è <see langword="null" />, viene usato quello predefinito. Vedere <see cref="T:System.Reflection.Binder" />.</param>
      <param name="target" vsli:raw="The object on which to invoke the specified member. If the member is static, this parameter is ignored.">Oggetto su cui richiamare il membro specificato. Se il membro è statico, il parametro viene ignorato.</param>
      <param name="args" vsli:raw="An argument list. This is an array of Objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null.">Elenco di argomenti. Matrice di oggetti che contiene il numero, l'ordine e il tipo dei parametri del membro da richiamare. In assenza di parametri, deve essere Null.</param>
      <param name="modifiers" vsli:raw="An array of the same length as &lt;paramref name=&quot;args&quot; /&gt; with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for more details.">Matrice della stessa lunghezza di <paramref name="args" /> con elementi che rappresentano gli attributi associati agli argomenti del membro da richiamare. A un parametro sono associati attributi nei metadati. Vengono usati da vari servizi di interoperabilità. Per informazioni dettagliate, vedere le specifiche dei metadati.</param>
      <param name="culture" vsli:raw="An instance of &lt;see langword=&quot;CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see langword=&quot;CultureInfo&quot; /&gt; for the current thread is used. (Note that this is necessary to, for example, convert a String that represents 1000 to a Double value, since 1000 is represented differently by different cultures.)">Istanza di <see langword="CultureInfo" /> usata per regolare la coercizione dei tipi. Se tale parametro è Null, verrà usato l'oggetto <see langword="CultureInfo" /> per il thread corrente. Ciò è necessario, ad esempio, per convertire una stringa che rappresenta 1000 in un valore double, perché 1000 è rappresentato in modo diverso nelle diverse impostazioni cultura.</param>
      <param name="namedParameters" vsli:raw="Each parameter in the &lt;paramref name=&quot;namedParameters&quot; /&gt; array gets the value in the corresponding element in the &lt;paramref name=&quot;args&quot; /&gt; array. If the length of &lt;paramref name=&quot;args&quot; /&gt; is greater than the length of &lt;paramref name=&quot;namedParameters&quot; /&gt;, the remaining argument values are passed in order.">Tutti i parametri nella matrice <paramref name="namedParameters" /> ottengono il valore nell'elemento corrispondente della matrice <paramref name="args" />. Se la lunghezza di <paramref name="args" /> è superiore a quella di <paramref name="namedParameters" />, i valori degli argomenti rimanenti vengono passati in ordine.</param>
      <returns vsli:raw="Returns the return value of the invoked member.">Restituisce il valore restituito del membro richiamato.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types.">Questo metodo non è attualmente supportato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Type)">
      <summary vsli:raw="Gets a value that indicates whether a specified &lt;see cref=&quot;T:System.Type&quot; /&gt; can be assigned to this object.">Ottiene un valore che indica se all'oggetto è possibile assegnare un oggetto <see cref="T:System.Type" /> specificato.</summary>
      <param name="c" vsli:raw="The object to test.">Oggetto da testare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;c&quot; /&gt; parameter and the current type represent the same type, or if the current type is in the inheritance hierarchy of &lt;paramref name=&quot;c&quot; /&gt;, or if the current type is an interface that &lt;paramref name=&quot;c&quot; /&gt; supports. &lt;see langword=&quot;false&quot; /&gt; if none of these conditions are valid, or if &lt;paramref name=&quot;c&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <see langword="true" /> se il parametro <paramref name="c" /> e il tipo corrente rappresentano lo stesso tipo oppure se il tipo corrente è nella gerarchia di ereditarietà di <paramref name="c" /> o è un'interfaccia che supporta <paramref name="c" />. <see langword="false" />se nessuna di queste condizioni è valida oppure se <paramref name="c" /> è <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsConstructedGenericType">
      <summary vsli:raw="Gets a value that indicates whether this object represents a constructed generic type.">Ottiene un valore che indica se l'oggetto rappresenta un tipo generico costruito.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object represents a constructed generic type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se questo oggetto rappresenta una definizione di tipo generico; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsCreated">
      <summary vsli:raw="Returns a value that indicates whether the current dynamic type has been created.">Restituisce un valore che indica se è stato creato il tipo dinamico corrente.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method has been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> è stato chiamato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Determines whether a custom attribute is applied to the current type.">Determina se un attributo personalizzato viene applicato al tipo corrente.</summary>
      <param name="attributeType" vsli:raw="The type of attribute to search for. Only attributes that are assignable to this type are returned.">Tipo di attributo da cercare. Vengono restituiti solo gli attributi assegnabili a questo tipo.</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">Specifica se trovare gli attributi cercandoli nella catena di ereditarietà del membro.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instances of &lt;paramref name=&quot;attributeType&quot; /&gt;, or an attribute derived from &lt;paramref name=&quot;attributeType&quot; /&gt;, is defined on this type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se una o più istanze di <paramref name="attributeType" />, o un attributo derivato da <paramref name="attributeType" />, sono definite in questo tipo; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types. Retrieve the type using &lt;see cref=&quot;M:System.Type.GetType&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Questo metodo non è attualmente supportato per i tipi incompleti. Recuperare il tipo usando <see cref="M:System.Type.GetType" /> e chiamare <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> nell'oggetto <see cref="T:System.Type" /> restituito.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is not defined.">
        <paramref name="attributeType" /> non è definito.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> è <see langword="null" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericParameter">
      <summary vsli:raw="Gets a value indicating whether the current type is a generic type parameter.">Ottiene un valore che indica se il tipo corrente è un parametro di tipo generico.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object represents a generic type parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto <see cref="T:System.Reflection.Emit.TypeBuilder" /> corrente rappresenta un parametro di tipo generico; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericType">
      <summary vsli:raw="Gets a value indicating whether the current type is a generic type.">Ottiene un valore che indica se il tipo corrente è un tipo generico.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type represented by the current &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object is generic; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il tipo rappresentato dall'oggetto <see cref="T:System.Reflection.Emit.TypeBuilder" /> corrente è generico; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition">
      <summary vsli:raw="Gets a value indicating whether the current &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; represents a generic type definition from which other generic types can be constructed.">Ottiene un valore che indica se la classe <see cref="T:System.Reflection.Emit.TypeBuilder" /> corrente rappresenta una definizione di tipo generico, da cui è possibile costruire altri tipi generici.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object represents a generic type definition; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se questo oggetto <see cref="T:System.Reflection.Emit.TypeBuilder" /> rappresenta una definizione di tipo generico; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecurityCritical">
      <summary vsli:raw="Gets a value that indicates whether the current type is security-critical or security-safe-critical, and therefore can perform critical operations.">Ottiene un valore che indica se il tipo corrente è critico per la sicurezza o critico per la sicurezza e richiamabile da codice trasparente e può pertanto eseguire operazioni critiche.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current type is security-critical or security-safe-critical; &lt;see langword=&quot;false&quot; /&gt; if it is transparent.">
        <see langword="true" /> se il tipo corrente è critico per la sicurezza o critico per la sicurezza e richiamabile da codice trasparente; <see langword="false" /> se è trasparente.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The current dynamic type has not been created by calling the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.">Il tipo dinamico corrente non è stato creato chiamando il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical">
      <summary vsli:raw="Gets a value that indicates whether the current type is security-safe-critical; that is, whether it can perform critical operations and can be accessed by transparent code.">Ottiene un valore che indica se il tipo corrente è critico per la sicurezza, vale a dire se può eseguire operazioni critiche e se è possibile accedervi tramite codice trasparente.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current type is security-safe-critical; &lt;see langword=&quot;false&quot; /&gt; if it is security-critical or transparent.">
        <see langword="true" /> se il tipo corrente è critico per la sicurezza, <see langword="false" /> se è critico per la sicurezza o trasparente.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The current dynamic type has not been created by calling the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.">Il tipo dinamico corrente non è stato creato chiamando il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent">
      <summary vsli:raw="Gets a value that indicates whether the current type is transparent, and therefore cannot perform critical operations.">Ottiene un valore che indica se il tipo corrente è trasparente e pertanto non può eseguire operazioni critiche.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is security-transparent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il tipo è trasparente per la sicurezza; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The current dynamic type has not been created by calling the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.">Il tipo dinamico corrente non è stato creato chiamando il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsSubclassOf(System.Type)">
      <summary vsli:raw="Determines whether this type is derived from a specified type.">Determina se questo tipo è derivato da un tipo specificato.</summary>
      <param name="c" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that is to be checked.">Oggetto <see cref="T:System.Type" /> da verificare.</param>
      <returns vsli:raw="Read-only. Returns &lt;see langword=&quot;true&quot; /&gt; if this type is the same as the type &lt;paramref name=&quot;c&quot; /&gt;, or is a subtype of type &lt;paramref name=&quot;c&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Sola lettura. Restituisce <see langword="true" /> se questo tipo è lo stesso del tipo <paramref name="c" /> oppure è un sottotipo del tipo <paramref name="c" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsVariableBoundArray" />
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a one-dimensional array of the current type, with a lower bound of zero.">Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta una matrice unidimensionale del tipo corrente con un limite inferiore a zero.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing a one-dimensional array type whose element type is the current type, with a lower bound of zero.">Oggetto <see cref="T:System.Type" /> che rappresenta un tipo di matrice unidimensionale, il cui tipo di elemento è di tipo corrente con limite inferiore zero.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents an array of the current type, with the specified number of dimensions.">Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta una matrice del tipo corrente, con il numero specificato di dimensioni.</summary>
      <param name="rank" vsli:raw="The number of dimensions for the array.">Numero di dimensioni della matrice.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a one-dimensional array of the current type.">Oggetto <see cref="T:System.Type" /> che rappresenta una matrice unidimensionale del tipo corrente.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;rank&quot; /&gt; is not a valid array dimension.">
        <paramref name="rank" /> non è una dimensione di matrice valida.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeByRefType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current type when passed as a &lt;see langword=&quot;ref&quot; /&gt; parameter (&lt;see langword=&quot;ByRef&quot; /&gt; in Visual Basic).">Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta il tipo corrente quando viene passato come parametro <see langword="ref" /> (<see langword="ByRef" /> in Visual Basic).</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current type when passed as a &lt;see langword=&quot;ref&quot; /&gt; parameter (&lt;see langword=&quot;ByRef&quot; /&gt; in Visual Basic).">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo corrente quando viene passato come parametro <see langword="ref" /> (<see langword="ByRef" /> in Visual Basic).</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])">
      <summary vsli:raw="Substitutes the elements of an array of types for the type parameters of the current generic type definition, and returns the resulting constructed type.">Sostituisce gli elementi di una matrice di tipi ai parametri di tipo della definizione di tipo generico corrente e restituisce il tipo costruito risultante.</summary>
      <param name="typeArguments" vsli:raw="An array of types to be substituted for the type parameters of the current generic type definition.">Matrice di tipi con cui sostituire i parametri di tipo della definizione di tipo generico corrente.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; representing the constructed type formed by substituting the elements of &lt;paramref name=&quot;typeArguments&quot; /&gt; for the type parameters of the current generic type.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo costruito ottenuto sostituendo i parametri di tipo del tipo generico corrente con gli elementi di <paramref name="typeArguments" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current type does not represent the definition of a generic type. That is, &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; returns &lt;see langword=&quot;false&quot; /&gt;.">Il tipo corrente non rappresenta la definizione di un tipo generico. Ciò significa che <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> restituisce <see langword="false" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeArguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Any element of &lt;paramref name=&quot;typeArguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeArguments" /> è <see langword="null" />.  
-oppure- 
Qualsiasi elemento di <paramref name="typeArguments" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Type.Module&quot; /&gt; property of any element of &lt;paramref name=&quot;typeArguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Reflection.Module.Assembly&quot; /&gt; property of the module of any element of &lt;paramref name=&quot;typeArguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">La proprietà <see cref="P:System.Type.Module" /> di qualsiasi elemento di <paramref name="typeArguments" /> è <see langword="null" />.  
-oppure- 
La proprietà <see cref="P:System.Reflection.Module.Assembly" /> del modulo di qualsiasi elemento di <paramref name="typeArguments" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakePointerType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of an unmanaged pointer to the current type.">Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta il tipo di un puntatore non gestito al tipo corrente.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of an unmanaged pointer to the current type.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di un puntatore non gestito al tipo corrente.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Module">
      <summary vsli:raw="Retrieves the dynamic module that contains this type definition.">Recupera il modulo dinamico che contiene la definizione di tipo.</summary>
      <returns vsli:raw="Read-only. Retrieves the dynamic module that contains this type definition.">Sola lettura. Recupera il modulo dinamico che contiene la definizione di tipo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Name">
      <summary vsli:raw="Retrieves the name of this type.">Recupera il nome di questo tipo.</summary>
      <returns vsli:raw="Read-only. Retrieves the &lt;see cref=&quot;T:System.String&quot; /&gt; name of this type.">Sola lettura. Recupera il nome dell'oggetto <see cref="T:System.String" /> di questo tipo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Namespace">
      <summary vsli:raw="Retrieves the namespace where this &lt;see langword=&quot;TypeBuilder&quot; /&gt; is defined.">Recupera lo spazio dei nomi in cui è definito <see langword="TypeBuilder" />.</summary>
      <returns vsli:raw="Read-only. Retrieves the namespace where this &lt;see langword=&quot;TypeBuilder&quot; /&gt; is defined.">Sola lettura. Recupera lo spazio dei nomi in cui è definito <see langword="TypeBuilder" /> .</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.PackingSize">
      <summary vsli:raw="Retrieves the packing size of this type.">Recupera la dimensione di compressione di questo tipo.</summary>
      <returns vsli:raw="Read-only. Retrieves the packing size of this type.">Sola lettura. Recupera la dimensione di compressione di questo tipo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.ReflectedType">
      <summary vsli:raw="Returns the type that was used to obtain this type.">Restituisce il tipo usato per ottenere questo tipo.</summary>
      <returns vsli:raw="Read-only. The type that was used to obtain this type.">Sola lettura. Tipo usato per ottenere questo tipo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">Imposta un attributo personalizzato usando un BLOB di attributi personalizzati specificato.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Costruttore dell'attributo personalizzato.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">BLOB di byte che rappresenta gli attributi.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> o <paramref name="binaryAttribute" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Per il tipo dinamico corrente, la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> è <see langword="true" /> ma la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">Impostare un attributo personalizzato usando un generatore di attributi personalizzati.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">Un'istanza di una classe helper per definire l'attributo personalizzato.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Per il tipo dinamico corrente, la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> è <see langword="true" /> ma la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetParent(System.Type)">
      <summary vsli:raw="Sets the base type of the type currently under construction.">Imposta il tipo di base del tipo che si sta creando.</summary>
      <param name="parent" vsli:raw="The new base type.">Nuovo tipo di base.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;parent&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the current instance represents an interface whose attributes do not include &lt;see cref=&quot;F:System.Reflection.TypeAttributes.Abstract&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  
In alternativa 
 <paramref name="parent" /> è <see langword="null" /> e l'istanza corrente rappresenta un'interfaccia i cui attributi non includono <see cref="F:System.Reflection.TypeAttributes.Abstract" />.  
-oppure- 
Per il tipo dinamico corrente, la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> è <see langword="true" /> ma la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> è <see langword="false" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;parent&quot; /&gt; is an interface. This exception condition is new in the .NET Framework version 2.0.">
        <paramref name="parent" /> è un'interfaccia. Questa condizione di eccezione è stata introdotta in .NET Framework versione 2.0.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Size">
      <summary vsli:raw="Retrieves the total size of a type.">Recupera la dimensione totale di un tipo.</summary>
      <returns vsli:raw="Read-only. Retrieves this type's total size.">Sola lettura. Recupera le dimensioni totali di questo tipo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.ToString">
      <summary vsli:raw="Returns the name of the type excluding the namespace.">Restituisce il nome del tipo escluso lo spazio dei nomi.</summary>
      <returns vsli:raw="Read-only. The name of the type excluding the namespace.">Sola lettura. Nome del tipo escluso lo spazio dei nomi.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.TypeHandle">
      <summary vsli:raw="Not supported in dynamic modules.">Non supportato in moduli dinamici.</summary>
      <returns vsli:raw="Read-only.">Sola lettura.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Not supported in dynamic modules.">Non supportato in moduli dinamici.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.UnderlyingSystemType">
      <summary vsli:raw="Returns the underlying system type for this &lt;see langword=&quot;TypeBuilder&quot; /&gt;.">Restituisce il tipo di sistema sottostante per l'oggetto <see langword="TypeBuilder" />.</summary>
      <returns vsli:raw="Read-only. Returns the underlying system type.">Sola lettura. Restituisce il tipo di sistema sottostante.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This type is an enumeration, but there is no underlying system type.">Questo tipo è un'enumerazione, ma non esiste alcun tipo di sistema sottostante.</exception>
    </member>
    <member name="F:System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize">
      <summary vsli:raw="Represents that total size for the type is not specified.">Indica che le dimensioni totali per il tipo non sono specificate.</summary>
    </member>
  </members>
</doc>